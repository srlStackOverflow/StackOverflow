<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Clusters>
<cluster>
<question questionID="48035481" questionTitle="Create a stream of custom alternating numbers">
<Answer><![CDATA[private class SeqGen {
    int[] arr;
    int start;
    int curr;
    boolean flag;

    public SeqGen(int[] arr, int start) {
        this.arr = arr;
        this.start = start;
    }

    public int gen() {
        int ret = -1;
        int l = arr[start + curr];
        int r = arr[arr.length - curr - start - 1];
        if (!flag) {
            ret = l;
            curr++;
        } else {
            ret = r;
        }
        flag = !flag;
        return ret;
    }
}]]></Answer>
<Answer><![CDATA[boolean toLeft = false;
int size = 5;

int half = size % 2 == 0 ? size / 2 : size / 2 + 1;
IntStream inferiorStream = IntStream.iterate (half, x -> x - 1);
IntStream superiorStream = IntStream.iterate (half, x -> x + 1);

OfInt a = toLeft 
          ? inferiorStream.iterator () 
          : superiorStream.iterator ();
OfInt b = toLeft 
          ? superiorStream.skip (1).iterator () 
          : inferiorStream.skip (1).iterator ();

IntStream stream = Stream.generate (() -> IntStream.concat (
    a.hasNext () ? IntStream.of (a.nextInt ()) : IntStream.empty (),
    b.hasNext () ? IntStream.of (b.nextInt ()) : IntStream.empty ()))
    .flatMapToInt (Function.identity ())
    .limit (size);

stream.forEach (System.out :: println);]]></Answer>
<Answer><![CDATA[class Test
{
  static IntStream alternateNumbers(int start, boolean incrementFirst)
  {
    return IntStream.generate(new IntSupplier()
    {
      boolean dec = !incrementFirst;

      int left  = dec ? start - 1 : start;
      int right = left + 1;

      @Override
      public int getAsInt()
      {
        dec = !dec;
        return dec ? left-- : right++;
      }
    });
  }

  public static void main(String[] args) throws Exception
  {
    alternateNumbers(10, true)
        .limit(6)
        .forEach(n -> System.out.printf("%02d ", n));
    // 10 11 09 12 08 13

    System.out.println();

    alternateNumbers(10, false)
        .limit(6)
        .forEach(n -> System.out.printf("%02d ", n));
    // 10 09 11 08 12 07
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="48012957" questionTitle="JavaFX Label doesn't center if not wrapped">
<Answer><![CDATA[public void start(Stage primaryStage) throws Exception
{
    TilePane panel = new TilePane();
    panel.setTileAlignment(Pos.CENTER_LEFT);

    for (int i = 0; i < 25; i++)
    {
        panel.getChildren().add(new Label(randomAlphabetic(10)));
    }

    Label title = new Label("Lorem ipsum dolor sit amet, consectetur adipiscing elit");
    title.setStyle("-fx-font-size: 16; -fx-font-weight: bold; -fx-wrap-text:true; -fx-border-color:black;");

        title.setPadding(new Insets(5));
        title.setAlignment(Pos.CENTER);
        title.setMaxWidth(Double.MAX_VALUE);


    title.setTextAlignment(TextAlignment.CENTER);

    VBox box = new VBox(title, panel);
    box.setFillWidth(true); 

    box.setPadding(new Insets(10));

    primaryStage.setScene(new Scene(box, 400, 400));
    primaryStage.show();

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception
{
    TilePane panel = new TilePane();
    panel.setTileAlignment(Pos.CENTER_LEFT);

    for (int i = 0; i < 25; i++)
    {
        panel.getChildren().add(new Label(RandomStringUtils.randomAlphabetic(10)));
    }

    Label title = new Label("Lorem ipsum dolor sit amet, consectetur adipiscing elit");
    title.setStyle("-fx-font-size: 16; -fx-font-weight: bold; -fx-wrap-text:true; -fx-alignment: center; -fx-border-color:black;");
    title.setMinWidth(400); //This is important, else the width will just be the text's length

    VBox box = new VBox(title, panel);
    box.setPadding(new Insets(10));

    primaryStage.setScene(new Scene(box, 400, 400));
    primaryStage.show();

}

public static void main(String[] args)
{
    launch(args);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="48011433" questionTitle="How do I specify how an object is converted to string to display it in a JavaFX TableView?">
<Answer><![CDATA[private TableColumn<Customer, LocalDateTime> Col_date;
    Col_date.setCellFactory((TableColumn<LogEntry, LocalDateTime> param) -> {
        TableCell<LogEntry, LocalDateTime> cell = new TableCell<LogEntry, LocalDateTime>() {
            @Override
            public void updateItem(LocalDateTime item, boolean empty) {
                if (item != null) {
                    setText(getDateTimeFormat(item,"yyyy/MM/dd HH:mm"));

                } else {
                    setText(null);
                }
            }
        };
        return cell;
    });


public static String getDateTimeFormat(LocalDateTime dateTime,String format) throws DateTimeParseException {
    return dateTime.format(DateTimeFormatter.ofPattern(format));
}]]></Answer>
<Answer><![CDATA[public class LocalDateTimeTableCell<S> extends TableCell<S, LocalDateTime> {
    private final DateTimeFormatter myDateFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private final DateTimeFormatter myDateTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss a");
    private final boolean showTime;

    public LocalDateTimeTableCell(boolean showTime){
        this.showTime = showTime;
    }
    @Override
    protected void updateItem(LocalDateTime item, boolean empty) {
        super.updateItem(item, empty);
        if (item == null || empty) {
            setText(null);
            setStyle("");
        } else {
            // Format date.
            if(showTime) {
                setText(myDateTimeFormatter.format(item));
            }else {
                setText(myDateFormatter.format(item));
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47991539" questionTitle="JAvaFX elements resize to fit Window">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane id="AnchorPane" prefHeight="671.0" prefWidth="1020.0" stylesheets="@../../../resources/css/MainCSS.css" xmlns="http://javafx.com/javafx/8.0.102" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.arpentechnologies.software.core.paneladmin.gestionroles.FXMLGestionRolesController">
    <children>
      <ScrollPane prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <content>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="670.0" prefWidth="1005.0">
               <children>
                  <HBox layoutX="389.0" layoutY="30.0">
                     <children>
                          <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Gesti�n de Roles" wrappingWidth="241.0546875" HBox.hgrow="NEVER">
                              <font>
                                  <Font size="30.0" />
                              </font>
                          </Text>
                     </children>
                  </HBox>
                    <Button id="backButton" fx:id="volverPanelAdminButton" layoutX="14.0" layoutY="25.0" mnemonicParsing="false" onAction="#onClickVolverInicio" prefHeight="50.0" prefWidth="115.0" styleClass="backButton" stylesheets="@../../../resources/css/MainCSS.css" AnchorPane.leftAnchor="14.0">
                        <graphic>
                            <FontIcon iconLiteral="mdi-keyboard-backspace" iconSize="30" wrappingWidth="30.0" />
                        </graphic>
                    </Button>
                    <StackPane layoutX="14.0" layoutY="87.0" prefHeight="50.0" prefWidth="253.0" AnchorPane.leftAnchor="14.0">
                        <children>
                            <TextField promptText="Buscar...">
                                <font>
                                    <Font size="18.0" />
                                </font>
                            </TextField>
                        </children>
                    </StackPane>
                    <StackPane layoutX="280.0" layoutY="87.0" prefHeight="50.0" prefWidth="50.0">
                        <children>
                            <FontIcon iconLiteral="mdi-send" iconSize="36" text="?" />
                        </children>
                    </StackPane>
                    <StackPane layoutX="784.0" layoutY="81.0" prefHeight="62.0" prefWidth="200.0" AnchorPane.rightAnchor="21.0">
                        <children>
                            <Button fx:id="anadirRolButton" mnemonicParsing="false" onAction="#onClickAnadirRol" text=" A�adir Rol">
                                <font>
                                    <Font size="18.0" />
                                </font>
                                <graphic>
                                    <FontIcon iconLiteral="mdi-account-plus" iconSize="26" />
                                </graphic>
                            </Button>
                        </children>
                    </StackPane>
                    <HBox maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" AnchorPane.bottomAnchor="8.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="152.0">
                        <children>
                            <TableView HBox.hgrow="ALWAYS">
                                <columns>
                                    <TableColumn prefWidth="75.0" text="Nombre" />
                                    <TableColumn prefWidth="75.0" text="Rol Padre" />
                                    <TableColumn prefWidth="75.0" text="M�dulos" />
                                    <TableColumn prefWidth="75.0" text="Permisos" />
                                    <TableColumn prefWidth="75.0" text="Editar" />
                                    <TableColumn prefWidth="75.0" text="Borrar" />
                                </columns>
                            </TableView>
                        </children>
                    </HBox>
               </children>
            </AnchorPane>
        </content>
      </ScrollPane>
    </children>
</AnchorPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane id="AnchorPane" prefHeight="671.0" prefWidth="1020.0" stylesheets="@../../../resources/css/MainCSS.css" xmlns="http://javafx.com/javafx/8.0.102" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.arpentechnologies.software.core.paneladmin.gestionroles.FXMLGestionRolesController">
    <children>
        <Button id="backButton" fx:id="volverPanelAdminButton" layoutX="14.0" layoutY="14.0" mnemonicParsing="false" onAction="#onClickVolverInicio" prefHeight="56.0" prefWidth="54.0" styleClass="backButton" stylesheets="@../../../resources/css/MainCSS.css" AnchorPane.leftAnchor="8.0">
            <graphic>
                <FontIcon iconLiteral="mdi-keyboard-backspace" iconSize="30" wrappingWidth="30.0" />
            </graphic>
        </Button>
        <StackPane layoutX="14.0" layoutY="83.0" prefHeight="50.0" prefWidth="253.0" AnchorPane.leftAnchor="8.0">
            <children>
                <TextField prefHeight="45.0" prefWidth="283.0" promptText="Buscar...">
                    <font>
                        <Font size="18.0" />
                    </font>
                </TextField>
            </children>
        </StackPane>
        <StackPane layoutX="267.0" layoutY="83.0" prefHeight="50.0" prefWidth="50.0">
            <children>
                <FontIcon iconLiteral="mdi-send" iconSize="36" text="?" />
            </children>
        </StackPane>
        <StackPane layoutX="860.0" layoutY="77.0" prefHeight="62.0" prefWidth="200.0" AnchorPane.rightAnchor="8.0">
            <children>
                <Button fx:id="anadirRolButton" mnemonicParsing="false" onAction="#onClickAnadirRol" prefHeight="39.0" prefWidth="231.0" text=" A�adir Rol">
                    <font>
                        <Font size="18.0" />
                    </font>
                    <graphic>
                        <FontIcon iconLiteral="mdi-account-plus" iconSize="26" />
                    </graphic>
                </Button>
            </children>
        </StackPane>
        <HBox layoutX="14.0" layoutY="152.0" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="511.0" prefWidth="1060.0" AnchorPane.bottomAnchor="8.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="152.0">
            <children>
                <TableView prefHeight="495.0" prefWidth="1049.0" HBox.hgrow="ALWAYS">
                    <columns>
                        <TableColumn prefWidth="75.0" text="Nombre" />
                        <TableColumn prefWidth="75.0" text="Rol Padre" />
                        <TableColumn prefWidth="75.0" text="M�dulos" />
                        <TableColumn prefWidth="75.0" text="Permisos" />
                        <TableColumn prefWidth="75.0" text="Editar" />
                        <TableColumn prefWidth="75.0" text="Borrar" />
                    </columns>
                </TableView>
            </children>
        </HBox>
        <Text layoutX="425.0" layoutY="65.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Gesti�n de Roles" wrappingWidth="224.0546875">
            <font>
                <Font size="30.0" />
            </font>
        </Text>
    </children>
</AnchorPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane id="AnchorPane" prefHeight="671.0" prefWidth="1020.0" stylesheets="@../../../resources/css/MainCSS.css" xmlns="http://javafx.com/javafx/8.0.141" xmlns:fx="http://javafx.com/fxml/1">
    <children>
        <Button id="backButton" fx:id="volverPanelAdminButton" layoutX="14.0" layoutY="14.0" mnemonicParsing="false" prefHeight="56.0" prefWidth="54.0" styleClass="backButton" stylesheets="@../../../resources/css/MainCSS.css" AnchorPane.leftAnchor="8.0">
            <graphic>
            </graphic>
        </Button>
        <StackPane layoutX="14.0" layoutY="83.0" prefHeight="50.0" prefWidth="253.0" AnchorPane.leftAnchor="8.0">
            <children>
                <TextField prefHeight="45.0" prefWidth="283.0" promptText="Buscar...">
                    <font>
                        <Font size="18.0" />
                    </font>
                </TextField>
            </children>
        </StackPane>
        <StackPane layoutX="267.0" layoutY="83.0" prefHeight="50.0" prefWidth="50.0">
            <children>
            </children>
        </StackPane>
        <StackPane layoutX="860.0" layoutY="77.0" prefHeight="62.0" prefWidth="200.0" AnchorPane.rightAnchor="8.0">
            <children>
                <Button fx:id="anadirRolButton" mnemonicParsing="false" prefHeight="39.0" prefWidth="231.0" text=" Añadir Rol">
                    <font>
                        <Font size="18.0" />
                    </font>
                    <graphic>
                    </graphic>
                </Button>
            </children>
        </StackPane>
        <HBox layoutX="14.0" layoutY="152.0" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="511.0" prefWidth="1060.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
            <children>
                <TableView prefHeight="495.0" prefWidth="1049.0" HBox.hgrow="ALWAYS">
                    <columns>
                        <TableColumn prefWidth="75.0" text="Nombre" />
                        <TableColumn prefWidth="75.0" text="Rol Padre" />
                        <TableColumn prefWidth="75.0" text="Módulos" />
                        <TableColumn prefWidth="75.0" text="Permisos" />
                        <TableColumn prefWidth="75.0" text="Editar" />
                        <TableColumn prefWidth="75.0" text="Borrar" />
                    </columns>
                </TableView>
            </children>
        </HBox>
      <HBox alignment="CENTER" layoutX="174.0" layoutY="14.0" prefHeight="100.0" prefWidth="200.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Gestión de Roles" wrappingWidth="224.0546875" HBox.hgrow="ALWAYS">
                  <font>
                      <Font size="30.0" />
                  </font>
              </Text>
         </children>
      </HBox>
    </children>
</AnchorPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47896079" questionTitle="JavaFX using a custom listcell">
<Answer><![CDATA[public class TicketCell extends ListCell<Ticket> { 
private static final String TAG = TicketCell.class.getSimpleName();
private Logger logger;
private Ticket ticket;
@FXML
private Label lbTitle;
@FXML
private Label lbDescription;
@FXML
private AnchorPane anchorPane;  
private FXMLLoader mLLoader;

public TicketCell(){
    logger = Logger.getLogger(MainWindowController.class);
    BasicConfigurator.configure(); 
}


public void updateItem(Ticket pos,boolean empty){
super.updateItem(pos, empty);

if(pos == null){
setText(null);
setGraphic(null);
}else{

    if (mLLoader == null) {
            mLLoader = new FXMLLoader(getClass().getResource("/resources/fxml/TicketDesignCell.fxml"));
            mLLoader.setController(this);

            try {
                mLLoader.load();
            } catch (IOException e) {
                logger.error(TAG, e);
            }
logger.error(TAG + " Loading content: "+pos.getTitle());
}


    this.lbTitle.setText(pos.getTitle());
    this.lbDescription.setText(pos.getDescription());


    setText(null);
    setGraphic(anchorPane);


}

}]]></Answer>
<Answer><![CDATA[public class TicketCellController {

    private Ticket ticket;
    @FXML
    private Label lbTitle;
    @FXML
    private Label lbDescription;

    private AnchorPane anchorPane;

    public TicketCellController() {

        try {
            // assumes FXML file is in same package as this controller
            // (also make sure name of FXML resource is correct)
            FXMLLoader loader = new FXMLLoader(getClass().getResource("CustomListCell.fxml"));
            loader.setController(this);
            anchorPane = loader.load();
        } catch (IOException exc) {
            // pretty much fatal here...
            throw new UncheckedIOException(exc);
        }
    }

    public void setTicket(Ticket ticket) {
        lbTitle.setText(ticket.getTitle());
        lbDescription.setText(ticket.getDescription());
    }

    public Node getView() {
        return anchorPane ;
    }

    // ...

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47819863" questionTitle="How to animate a spinning top?">
<Answer><![CDATA[import static javafx.scene.paint.Color.*;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.geometry.Point3D;
import javafx.scene.Camera;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.SceneAntialiasing;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.shape.Cylinder;
import javafx.scene.shape.Sphere;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Translate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class FinalDreidelSpin extends Application {

    private double bodyBase = 30;
    private double bodyHeight = bodyBase * 3 / 2;
    private double baseRadius = bodyBase / 2;

    @Override
    public void start(Stage stage) throws Exception {
        double tiltAngle = 40;
        DoubleProperty spinAngle = new SimpleDoubleProperty();

        Rotate spin = new Rotate(0, Rotate.Z_AXIS);
        Rotate tilt = new Rotate(tiltAngle, Rotate.X_AXIS);

        spin.angleProperty().bind(spinAngle);

        Timeline spinAnim = new Timeline();
        spinAnim.getKeyFrames().add(new KeyFrame(Duration.seconds(2), new KeyValue(spinAngle, 360)));
        spinAnim.setCycleCount(Timeline.INDEFINITE);
        spinAnim.play();

        Group dreidel = createDreidel();
        Translate zTrans = new Translate(0, 0, -(bodyHeight/2 + baseRadius));
        dreidel.getTransforms().addAll(spin, tilt, spin, zTrans);

        Scene scene = new Scene(new Group(dreidel, createAxes()), 200, 200, true, SceneAntialiasing.BALANCED);
        scene.setFill(SKYBLUE);
        scene.setCamera(createCamera());

        stage.setScene(scene);
        stage.show();
    }

    private Group createDreidel() {
        double handleHeight = bodyBase * 3/4;
        Cylinder handle = new Cylinder(bodyBase / 6, handleHeight);
        handle.setTranslateZ(-(bodyHeight + handleHeight) / 2);
        handle.setRotationAxis(Rotate.X_AXIS);
        handle.setRotate(90);
        handle.setMaterial(new PhongMaterial(RED));

        Box body = new Box(bodyBase, bodyBase, bodyHeight);
        body.setMaterial(new PhongMaterial(BLUE));

        Sphere base = new Sphere(baseRadius);
        base.setTranslateZ(bodyHeight / 2);
        base.setMaterial(new PhongMaterial(GREEN));

        return new Group(handle, body, base);
    }

    private Camera createCamera() {
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(1000);

        int xy = 150;
        Translate trans = new Translate(-xy, xy, -100);
        Rotate rotXY = new Rotate(70, new Point3D(1, 1, 0));
        Rotate rotZ = new Rotate(45, new Point3D(0, 0, 1));
        camera.getTransforms().addAll(trans, rotXY, rotZ);

        return camera;
    }

    private Group createAxes() {
        int axisWidth = 1;
        int axisLength = 400;

        Cylinder xAxis = new Cylinder(axisWidth, axisLength);
        xAxis.setMaterial(new PhongMaterial(CYAN));

        Cylinder yAxis = new Cylinder(axisWidth, axisLength);
        yAxis.setRotationAxis(Rotate.Z_AXIS);
        yAxis.setRotate(90);
        yAxis.setMaterial(new PhongMaterial(MAGENTA));

        Cylinder zAxis = new Cylinder(axisWidth, axisLength);
        zAxis.setRotationAxis(Rotate.X_AXIS);
        zAxis.setRotate(90);
        zAxis.setMaterial(new PhongMaterial(YELLOW));

        return new Group(xAxis, yAxis, zAxis);
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
<Answer><![CDATA[class DreidelMesh extends Group {

    float width = 375f;
    float height = 351f; 

    public DreidelMesh(){
        MeshView bodyMesh = new MeshView(createBodyMesh());
        PhongMaterial material = new PhongMaterial();
        material.setDiffuseMap(new Image(getClass().getResourceAsStream("3dreidel3d.png")));
        bodyMesh.setMaterial(material);

        Cylinder handle = new Cylinder(45, 260);
        handle.setTranslateY(-(handle.getHeight() + width) / 2);
        material = new PhongMaterial(Color.web("#daaf6d"));
        handle.setMaterial(material);

        getTransforms().add(new Rotate(90, Rotate.X_AXIS));
        getChildren().addAll(bodyMesh, handle);
    }

    private TriangleMesh createBodyMesh() {
        TriangleMesh m = new TriangleMesh();

        float L = 4f * width;
        float H = 2f * width + height;
        float w2 = width / 2f;

        // POINTS
        m.getPoints().addAll(
             w2,  w2,  w2, 
             w2,  w2, -w2, 
             w2, -w2,  w2, 
             w2, -w2, -w2, 
            -w2,  w2,  w2, 
            -w2,  w2, -w2, 
            -w2, -w2,  w2, 
            -w2, -w2, -w2, 
             0f,  w2 + height,  0f
        );

        // TEXTURES
        m.getTexCoords().addAll(
            width / L, 0f, 
            2f * width/ L, 0f, 
            0f, width / H,
            width / L, width / H, 
            2f * width/ L, width / H, 
            3f * width/ L, width / H, 
            1f, width / H, 
            0f, 2f * width / H,
            width / L, 2f * width / H, 
            2f * width/ L, 2f * width / H, 
            3f * width/ L, 2f * width / H, 
            1f, 2f * width / H, 
            width / 2f / L, 1f,
            3f * width / 2f / L, 1f,
            5f * width / 2f / L, 1f,
            7f * width / 2f / L, 1f
        );

        // FACES
        m.getFaces().addAll(
            0,  8, 2,  3, 1,  7,           
            2,  3, 3,  2, 1,  7,           
            4,  9, 5, 10, 6,  4,           
            6,  4, 5, 10, 7,  5,           
            0,  8, 1,  7, 8, 12,        
            4,  9, 0,  8, 8, 13,           
            5, 10, 4,  9, 8, 14,           
            1, 11, 5, 10, 8, 15,            
            2,  3, 6,  4, 3,  0,            
            3,  0, 6,  4, 7,  1,            
            0,  8, 4,  9, 2,  3,          
            2,  3, 4,  9, 6,  4,           
            1, 11, 3,  6, 5, 10,           
            5, 10, 3,  6, 7,  5
        );
        return m;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47817206" questionTitle="What is blocking my UI thread in a JavaFX app?">
<Answer><![CDATA[public class Controller implements Initializable {

    // ...
    private Thread calcThread;
    Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(0.5), new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
            Draw.drawPlanets(universe, paneDraw);
        }
    }));

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // ...
        MyCalculations myCalc = new MyCalculations(universe);
        calcThread = new Thread(myCalc);
        // ...
    }    

    @FXML private void buttonStartSimulation(ActionEvent event) throws InterruptedException {    
        calcThread.start();
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
    }    
}]]></Answer>
<Answer><![CDATA[@FXML private void buttonStartSimulation(ActionEvent event) throws InterruptedException {    

    calcThread.start();

    Thread updaterThread = new Thread( () -> {
        @Override public void run () {
            int i = 0;
            while ( true ) {   // this line is what I want
                Platform.runLater( () -> Draw.drawPlanets(universe, paneDraw) );
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    System.out.println(e);
                }
                i++;
            }
        }
    }
    updaterThread.setDaemon ( true );
    updaterThread.start();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47750190" questionTitle="Java generics with Function.apply">
<Answer><![CDATA[final class Checker<T> {

    private final T value;

    private final UnaryOperator<T> callback;

    private Checker(T value, UnaryOperator<T> callback) {
        this.value = value;
        this.callback = callback;
    }

    public static <T> Checker<T> when(T t) {
        return new Checker<>(t, UnaryOperator.identity());
    }

    public Checker<T> then(UnaryOperator<T> callback) {
        return new Checker<>(value, t -> callback.apply(this.callback.apply(t)));
    }

    public T execute() {
        return callback.apply(value);
    }
}]]></Answer>
<Answer><![CDATA[static class Checker<T> {

    private final T value;

    private UnaryOperator<T> callback;

    private Checker(T value) {
        this.value = value;
    }

    public static <T> Checker<T> when(T o) {
        return new Checker<>(o);
    }

    public Checker<T> then(UnaryOperator<T> callback) {
        this.callback = callback;
        return this;
    }

    public T execute() {
        return this.callback.apply(value);
    }
}]]></Answer>
<Answer><![CDATA[class Checker<T>{

  private T value;
  private Function<T, T> callback;

  private Checker(T value) {
    this.value = value;
  }

  public static Checker<String> when(String o) {
    return new Checker<>(o);
  }

  public static Checker<Integer> when(int o) {
    return new Checker<>(o);
  }

  public Checker<T> then(Function<T, T> callback) {
    this.callback = callback;
    return this;
  }

  public T execute() {
    return this.callback.apply(value);
  }

  public static void main (String[] args) {
    Checker.when("123").then(str -> {
      return "." + str + ".";
    }).execute();

    Checker.when(123).then(i -> {
      return i + 100;
    }).execute();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47740725" questionTitle="Get each object within depth object">
<Answer><![CDATA[public class Person {
        private List<Person> people = new ArrayList<>();
        private String name;
        public Person() {
        }
        public Person(String name) {
            this.name = name;
        }
        public List<Person> getPeople() {
            return people;
        }
        public void setPeople(List<Person> people) {
            this.people = people;
        }

        public int maxDepth() {
            if (people.isEmpty()) {
                return 0;
            }
            int maxChildrenDepth = 0;
            for (Person prs: people) {
                maxChildrenDepth = Math.max(maxChildrenDepth, prs.maxDepth());
            }
            return 1+maxChildrenDepth;
        }

       public static void getPersonLevel(Person person, int depth, Set<Person> ppl) {
            if (depth <= 0) {
                return;
            } else {
                for (Person prs : person.getPeople()) {
                    getPersonLevel(prs, depth - 1, ppl);
                }
            }
            ppl.addAll(person.getPeople());
       }

      //just for logging
       @Override
       public String toString() {
            return "Person [name=" + name + "]";
      }
}]]></Answer>
<Answer><![CDATA[public class Person {
    private List<Person> people = new ArrayList<>();

    public Person() {
    }
    public List<Person> getPeople() {
        return people;
    }
    public void setPeople(List<Person> people) {
        this.people = people;
    }

    public Stream<Person> people() {
        return people.stream();
    }

    public Stream<Person> peopleLevel(int depth, boolean includeThis) {
        if(depth<0) throw new IllegalArgumentException();
        if(depth==0) return includeThis? Stream.of(this): Stream.empty();
        Stream<Person> sub = people();
        if(depth > 1) sub = sub.flatMap(p -> p.peopleLevel(depth-1, true));
        return includeThis? Stream.concat(Stream.of(this), sub): sub;
    }

    public static Set<Person> getPersonLevel(Person person, int depth) {
        return person.peopleLevel(depth, false).collect(Collectors.toSet());
    }

    public int maxDepth() {
        return maxDepth(false);
    }
    public int maxDepth(boolean includeThis) {
        int chDepth = people().mapToInt(p -> p.maxDepth(true)).max().orElse(0);
        if(includeThis) chDepth++;
        return chDepth;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47694579" questionTitle="Converting List&lt;Map&lt;String, List&lt;String&gt;&gt;&gt; to String[][]">
<Answer><![CDATA[static void initData(List<Map<String, List<String>>> l) {
    l.add(new TreeMap<String, List<String>>() {{
        put("Category", new ArrayList<String>() {{ add("Wireless"); add("Sensor"); }});
        put("Price", new ArrayList<String>() {{ add("20"); }});
        put("Title", new ArrayList<String>() {{ add("Product 1"); }});
    }});
    l.add(new TreeMap<String, List<String>>() {{
        put("Category", new ArrayList<String>() {{ add("Sensor"); }});
        put("Price", new ArrayList<String>() {{ add("35"); }});
        put("Title", new ArrayList<String>() {{ add("Product 2"); }});
    }});
    l.add(new TreeMap<String, List<String>>() {{
        put("Price", new ArrayList<String>() {{ add("15"); }});
        put("Title", new ArrayList<String>() {{ add("Product 3"); }});
    }});
    l.add(new TreeMap<String, List<String>>() {{
        put("Category", new ArrayList<String>() {{ add("Wireless"); add("Sensor"); add("Category14"); }});
        put("Price", new ArrayList<String>() {{ add("15"); }});
        put("Title", new ArrayList<String>() {{ add("Product 3"); }});
    }});
    l.add(new TreeMap<String, List<String>>() {{
        put("Category", new ArrayList<String>() {{ add("Wireless"); add("Sensor"); add("Category541"); add("SomeCategory");}});
        put("Price", new ArrayList<String>() {{ add("15"); }});
        put("Title", new ArrayList<String>() {{ add("Product 3"); }});
    }});
}]]></Answer>
<Answer><![CDATA[Map<String, Integer> colPositions = rows.stream()
    .flatMap(m -> m.entrySet().stream())
    .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().size(),
                              Integer::max, TreeMap::new));
String[] header = colPositions.entrySet().stream()
    .flatMap(e -> Collections.nCopies(e.getValue(), e.getKey()).stream())
    .toArray(String[]::new);
int tableWidth = 0;
for(Map.Entry<String,Integer> e: colPositions.entrySet())
    tableWidth += e.setValue(tableWidth);

String[][] array = new String[rows.size()+1][tableWidth];
array[0] = header;

int rowIdx = 1;
for(Map<String, List<String>> row: rows) {
    for(Map.Entry<String,List<String>> e: row.entrySet()) {
        int index = colPositions.get(e.getKey());
        for(String s: e.getValue()) array[rowIdx][index++]=s;
    }
    rowIdx++;
}
return array;]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47645399" questionTitle="Java 8 Stream: Defining collectors based on other collectors">
<Answer><![CDATA[private static Collector<InputRecord, ?, Collection<OutputRecord>> toOutputRecords() {
    class Acc {

        Map<String, OutputRecord> map = new HashMap<>();

        void add(InputRecord elem) {
            String value = elem.getName();
            // constructor without fieldC since you compute it at the end
            OutputRecord record = new OutputRecord(value, elem.getFieldA(), elem.getFieldB());
            mergeIntoMap(map, value, record);
        }

        Acc merge(Acc right) {
            Map<String, OutputRecord> leftMap = map;
            Map<String, OutputRecord> rightMap = right.map;

            for (Entry<String, OutputRecord> entry : rightMap.entrySet()) {
                mergeIntoMap(leftMap, entry.getKey(), entry.getValue());
            }
            return this;
        }

        private void mergeIntoMap(Map<String, OutputRecord> map, String value, OutputRecord record) {

            map.merge(value, record, (left, right) -> {
                left.setSumOfFieldA(left.getSumOfFieldA() + right.getSumOfFieldA());
                left.setSumOfFieldB(left.getSumOfFieldB().add(right.getSumOfFieldB()));

                return left;
            });
        }

        public Collection<OutputRecord> finisher() {
            for (Entry<String, OutputRecord> e : map.entrySet()) {
                OutputRecord output = e.getValue();
                output.setFieldC(output.getSumOfFieldB().multiply(BigDecimal.valueOf(output.getSumOfFieldA())));
            }
            return map.values();
        }

    }
    return Collector.of(Acc::new, Acc::add, Acc::merge, Acc::finisher);
}]]></Answer>
<Answer><![CDATA[Collection<InputRecord> input = Arrays.asList(
        new InputRecord("A", 100, new BigDecimal(1.1)),
        new InputRecord("A", 150, new BigDecimal(2.0)),
        new InputRecord("B", 200, new BigDecimal(1.5)),
        new InputRecord("A", 120, new BigDecimal(1.3)));

Collection<OutputRecord> output = input.stream()
        // group records for particular Name into a List
        .collect(Collectors.groupingBy(InputRecord::getName))
        .values().stream()
        // Reduce every List to a single records, performing summing
        .map(records -> records.stream()
                .reduce((a, b) ->
                        new InputRecord(a.getName(),
                                a.getFieldA() + b.getFieldA(),
                                a.getFieldB().add(b.getFieldB()))))
        .filter(Optional::isPresent)
        .map(Optional::get)
        // Finally transform the InputRecord to OutputRecord
        .map(record -> new OutputRecord(record.getName(),
                record.getFieldA(),
                record.getFieldB(),
                record.getFieldB().multiply(new BigDecimal(record.getFieldA()))))
        .collect(Collectors.toList());]]></Answer>
<Answer><![CDATA[Map<String, OutputRecord> result = inputRecords.stream().collect(() -> new HashMap<>(),
                (HashMap<String, OutputRecord> map, InputRecord inObj) -> {
                    OutputRecord out = map.get(inObj.getName());
                    if (out == null) {
                        out = new OutputRecord();
                        out.setName(inObj.getName());
                        out.setSumOfFieldA(inObj.getFieldA());
                        out.setSumOfFieldB(inObj.getFieldB());
                    } else {

                        Integer s = out.getSumOfFieldA();
                        out.setSumOfFieldA(s + inObj.getFieldA());
                        BigDecimal bd = out.getSumOfFieldB();
                        out.setSumOfFieldB(bd.add(inObj.getFieldB()));
                    }
                    out.setFieldC(out.getSumOfFieldB().multiply(new BigDecimal(out.getSumOfFieldA())));
                    map.put(out.getName(), out);

                }, (HashMap<String, OutputRecord> out1, HashMap<String, OutputRecord> out2) -> {
                    out1.putAll(out2);
                });

        System.out.println(result);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47602070" questionTitle="JavaFX - Event Handlers on different objects created by for loop">
<Answer><![CDATA[import java.util.Random;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

/**
 *
 * @author blj0011
 */
public class JavaFXApplication54 extends Application
{

    @Override
    public void start(Stage primaryStage)
    {
        Random random = new Random();

        AnchorPane root = new AnchorPane();

        for (int i = 0; i < 5; i++)
        {
            int x1 = random.nextInt(300);
            System.out.println("l: " + x1);
            int y1 = random.nextInt(250);
            int radius = random.nextInt(10) + 3;
            root.getChildren().add(getCircle(x1, y1, radius));
        }

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)
    {
        launch(args);
    }

    Circle getCircle(int x1, int y1, int radius)
    {
        Circle tempCircle = new Circle(x1, y1, radius);
        tempCircle.setFill(Color.BLACK);

        tempCircle.setOnMousePressed(me -> tempCircle.setFill(Color.CYAN));
        tempCircle.setOnMouseEntered(me -> tempCircle.setFill(Color.RED));
        tempCircle.setOnMouseExited(me -> tempCircle.setFill(Color.BLACK));

        return tempCircle;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Random;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class CircleColours extends Application {

    private final Random random = new Random();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        AnchorPane pane = new AnchorPane();
        Scene scene = new Scene(pane, 600, 400);
        addCircles(pane, 10, 50);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public void addCircles(AnchorPane pane, int amount, int radius) {
        for (int i = 0; i < amount; i++) {
            Circle circle = new Circle(random.nextInt((int) pane.getWidth()), random.nextInt((int) pane.getHeight()), radius);
            circle.setOnMouseEntered(event -> circle.setFill(Color.rgb(random.nextInt(255), random.nextInt(255), random.nextInt(255))));
            circle.setOnMouseClicked(event -> circle.setFill(Color.rgb(random.nextInt(255), random.nextInt(255), random.nextInt(255))));
            //circle.setOnMouseExited(event -> circle.setFill(Color.BLACK));
            pane.getChildren().add(circle);
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47590919" questionTitle="Auto close JavaFX application due to innactivity">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws IOException {
    Button button = new Button("abcde");
    StackPane root = new StackPane(button);
    Scene scene = new Scene(root, 400, 400);

    // create transition for logout
    Duration delay = Duration.seconds(10);
    PauseTransition transition = new PauseTransition(delay);
    transition.setOnFinished(evt -> logout());

    // restart transition on user interaction
    scene.addEventFilter(InputEvent.ANY, evt -> transition.playFromStart());

    primaryStage.setScene(scene);
    primaryStage.show();

    transition.play();
}

private void logout() {
    // TODO: replace with logout code
    Platform.exit();
}]]></Answer>
<Answer><![CDATA[public class AutoClose {
    private Timeline timer;

    public AutoClose(VBox mainPanel) {

        timer = new Timeline(new KeyFrame(Duration.seconds(3600), new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent evt) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Inactivity");
                alert.setHeaderText("Connection closed due to inactivity");
                alert.show();

                try {
                    Stage mainWindowStage = Login.getPrimaryStage();

                    Parent root = FXMLLoader.load(getClass().getResource("/view/Login.fxml"));

                    Scene scene = new Scene(root);
                    mainWindowStage.setScene(scene);
                    mainWindowStage.show();

                    timer.stop();
                } catch (IOException ex) { 
                }
            }
        }));
        timer.setCycleCount(Timeline.INDEFINITE);
        timer.play();

        mainPanel.addEventFilter(MouseEvent.ANY, new EventHandler<Event>() {
            @Override
            public void handle(Event event) {
                timer.playFromStart();
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47548989" questionTitle="Java 8 stream filter">
<Answer><![CDATA[List<Prices> result;

    try {
        result = List.of(
                new Prices("a", 100),
                new Prices("b", 200),
                new Prices("c", 250),
                new Prices("d", 350),
                new Prices("e", 450))
                .stream()
                .reduce(new ArrayList<>(),
                        (list, e) -> {
                            double total = list.stream().mapToDouble(Prices::getPrice).sum();
                            ArrayList<Prices> newL = new ArrayList<>(list);
                            if (total < 600) {
                                newL.add(e);
                                return newL;
                            }

                            throw new MyException(newL);
                        },
                        (left, right) -> {
                            throw new RuntimeException("Not for parallel");
                        });
    } catch (MyException e) {
        e.printStackTrace();
        result = e.getPrices();
    }

    result.forEach(x -> System.out.println(x.getItem()));]]></Answer>
<Answer><![CDATA[Predicate<Prices> pred = new Predicate<Prices>() {
    double sum = 0.0;
    boolean reached = false;
    public boolean test (Prices p) {
        sum += p.getPrice();
        if (sum >= 600.0) { // reached the sum
            if (reached) { // already reached the some before, reject element
                return false;
            } else { // first time we reach the sum, so current element is still accepted
                reached = true;
                return true;
            }
        } else { // haven't reached the sum yet, accept current element
            return true;
        }
    }
};

List<Prices> sublist = 
    input.stream()
         .takeWhile(pred)
         .collect(Collectors.toList());]]></Answer>
<Answer><![CDATA[double priceThreshold = 600;
List<Prices> resultList = list.stream().collect(
    () -> new Object() {
        List<Prices> current = new ArrayList<>();
        double accumulatedPrice;
    },
    (o, p) -> {
        if(o.accumulatedPrice < priceThreshold) {
            o.current.add(p);
            o.accumulatedPrice += p.getPrice();
        }
    },
    (a,b) -> {
        if(a.accumulatedPrice+b.accumulatedPrice <= priceThreshold) {
            a.current.addAll(b.current);
            a.accumulatedPrice += b.accumulatedPrice;
        }
        else for(int i=0; a.accumulatedPrice<priceThreshold && i<b.current.size(); i++) {
            a.current.add(b.current.get(i));
            a.accumulatedPrice += b.current.get(i).getPrice();
        }
    }).current;]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47413305" questionTitle="JavaFx: auto resize TitledPane">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.control.TitledPane?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TableColumn?>

<BorderPane fx:id="pane" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="stackoverflow.three.Controller">
    <center>
      <VBox prefHeight="800.0">
         <children>
               <TitledPane fx:id="first" text="First">
                  <content>
                      <TableView prefHeight="2000.0">
                          <columns>
                              <TableColumn text="Test" />
                          </columns>
                      </TableView>
                  </content>
               </TitledPane>
               <TitledPane fx:id="second" text="Second">
                  <content>
                      <TableView prefHeight="2000.0">
                          <columns>
                              <TableColumn text="Test" />
                          </columns>
                      </TableView>
                  </content>
               </TitledPane>
         </children>
      </VBox>
    </center>
</BorderPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.control.TitledPane?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TableColumn?>

<BorderPane fx:id="pane" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="stackoverflow.three.Controller">
    <center>
      <SplitPane dividerPositions="0.5" orientation="VERTICAL" prefHeight="800.0">
         <items>
               <TitledPane fx:id="first" text="First">
                  <content>
                      <TableView prefHeight="2000.0">
                          <columns>
                              <TableColumn text="Test" />
                          </columns>
                      </TableView>
                  </content>
               </TitledPane>
               <TitledPane fx:id="second" text="Second">
                  <content>
                      <TableView prefHeight="2000.0">
                          <columns>
                              <TableColumn text="Test" />
                          </columns>
                      </TableView>
                  </content>
               </TitledPane>
         </items>
      </SplitPane>
    </center>
</BorderPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47401536" questionTitle="Java 8 Running Multiple Methods In Parallel">
<Answer><![CDATA[final CyclicBarrier gate = new CyclicBarrier(3);
public void method(int id) {
    Thread one = new Thread (()->{
        gate.await();
        List<FooA> fooAs = generateFooA(id);
    });
    Thread two = new Thread (()->{
        gate.await();
        List<FooB> fooBs = generateFooB(id);
    });
    one.start();
    two.start();
    gate.await();
    //Do more processesing
}

public List<FooA> generateFooA(int id) {
    //code
}

public List<FooB> generateFooB(int id) {
    //code
}]]></Answer>
<Answer><![CDATA[public void method(int id) throws InterruptedException, ExecutionException {
    CompletableFuture<String> cfa = CompletableFuture.supplyAsync(() -> generateA(id));
    CompletableFuture<String> cfb = CompletableFuture.supplyAsync(() -> generateB(id));
    String fooA = cfa.get();
    String fooB = cfb.get();
    System.out.println("Final fooA " + fooA);
    System.out.println("Final fooB " + fooB);
}

public String generateA(int id) {
    System.out.println("Entering generateA " + Thread.currentThread());
    sleep(2000);
    System.out.println("Leaving generateA");
    return "A" + id;
}

public String generateB(int id) {
    System.out.println("Entering generateB " + Thread.currentThread());
    sleep(1000);
    System.out.println("Leaving generateB");
    return "B" + id;
}

private void sleep(int n) {
    try {
        Thread.sleep(n);
    } catch (InterruptedException ex) {
        // never mind
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47353687" questionTitle="Printing certain values using Collections.frequency()">
<Answer><![CDATA[package various;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class Frequency {
    public static void main(String[] args) {
        int[] array = {11, 14, 17, 11, 48, 33, 29, 11, 17, 22, 11, 48, 18};
        ArrayList<Integer> list = new ArrayList<>(array.length);
        for (int i = 0; i < array.length; i++) {
            list.add(array[i]);
        }

        Set<Integer> dup = new HashSet<>(list);

        dup.stream().forEach((key) -> {
            System.out.print((Collections.frequency(list, key) > 2) ? key + ": " + Collections.frequency(list, key) +"\n" : "");
        });
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Collectors;

public class Program {
    public static void main(final String[] args) {
        // Input.
        final int[] inputArray = {11, 14, 17, 11, 48, 33, 29, 11, 17, 22, 11, 48, 18};

        // Processing.
        final DuplicateCounter<Integer> duplicateCounter = Arrays.stream(inputArray)
            .collect(
                DuplicateCounter<Integer>::new,
                DuplicateCounter<Integer>::accept,
                DuplicateCounter<Integer>::combine
            );

        // Output.
        System.out.println(duplicateCounter.getDuplicateCountMap());
    }

    private static final class DuplicateCounter<T> implements Consumer<T> {
        private final Map<T, Integer> countMap = new HashMap<>();

        public void accept(final T obj) {
            this.incrementCounter(obj, 1);
        }

        public void combine(final DuplicateCounter<T> other) {
            other.countMap.entrySet()
                .forEach(entry -> this.incrementCounter(entry.getKey(), entry.getValue()));
        }

        public Map<T, Integer> getDuplicateCountMap() {
            return this.countMap.entrySet()
                .stream()
                .filter(entry -> entry.getValue() > 1)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }

        private void incrementCounter(final T obj, int increment) {
            final Integer counter = this.countMap.getOrDefault(obj, 0);
            this.countMap.put(obj, counter + increment);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47300969" questionTitle="How to retrieve the changed item in an ObservableList via ListChangeListener">
<Answer><![CDATA[import javafx.beans.Observable;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener.Change;
import javafx.collections.ObservableList;

public class ListUpdateTest {

    public static void main(String[] args) {

        ObservableList<Foo> fooList = FXCollections.observableArrayList(foo -> new Observable[] { foo.nameProperty() });
        Foo fooA = new Foo("Hello");
        Foo fooB = new Foo("Kitty");
        fooList.add(fooA);
        fooList.add(fooB);

        fooList.addListener((Change<? extends Foo> c) -> {
             while (c.next()) {
                if (c.wasUpdated()) {
                    int start = c.getFrom() ;
                    int end = c.getTo() ;
                    for (int i = start ; i < end ; i++) {
                        System.out.println("Element at position "+i+" was updated to: " +c.getList().get(i).getName() );
                    }
                }
            }
        });

        fooB.setName("Mickey");
    }

    public static class Foo {
        private StringProperty name = new SimpleStringProperty();
        public final StringProperty nameProperty() { return name; }
        public final String getName() { return name.get(); }
        public final void setName(String n) { name.set(n); }
        public Foo(String fooName) { setName(fooName); }
    }
}]]></Answer>
<Answer><![CDATA[ObservableList theList = ...;

 theList.addListener(new ListChangeListener<Item>() {
     public void onChanged(Change<tem> c) {
         while (c.next()) {
             if (c.wasPermutated()) {
                     for (int i = c.getFrom(); i < c.getTo(); ++i) {
                          //permutate
                     }
                 } else if (c.wasUpdated()) {
                          //update item
                 } else {
                     for (Item remitem : c.getRemoved()) {
                         remitem.remove(Outer.this);
                     }
                     for (Item additem : c.getAddedSubList()) {
                         additem.add(Outer.this);
                     }
                 }
             }
         }
     });

 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47174881" questionTitle="How to sum a list of lists per column and per row using lambda functions in Java?">
<Answer><![CDATA[class Matrix {

    public static List<Wrapper> crossSum(List<List<Wrapper>> input){
        return input.stream().reduce(Matrix::sum).orElse(Collections.emptyList());
    }

    public static List<Wrapper> straightSum(List<List<Wrapper>> input){
        return input.stream().map(Matrix::sum).collect(Collectors.toList());
    }

    private static List<Wrapper> sum(List<Wrapper> big, List<Wrapper> small){
        if (big.size() < small.size()){
            return sum(small, big);
        }
        return IntStream.range(0, big.size()).boxed()
                .map(idx -> sum(big, small, idx))
                .collect(Collectors.toList());
    }

    private static Wrapper sum(List<Wrapper> big, List<Wrapper> small, int idx){
        if (idx < small.size()){
            return new Wrapper(big.get(idx).getValue() + small.get(idx).getValue());
        }
        return big.get(idx);
    }

    private static Wrapper sum(List<Wrapper> line){
        return new Wrapper(line.stream().mapToInt(Wrapper::getValue).sum());
    }
}]]></Answer>
<Answer><![CDATA[static class Wrapper
{
    public int value = 0;

    public Wrapper( int value )
    {
        super();
        this.value = value;
    }

    public int getValue()
    {
        return value;
    }

    public void setValue( int value )
    {
        this.value = value;
    }

    @Override
    public String toString()
    {
        return "Wrapper [value=" + value + "]";
    }

}

public static List<Wrapper> sum( List<Wrapper> l1, List<Wrapper> l2 )
{
    int l1Size = l1.size();
    int l2Size = l2.size();
    int size = Math.max( l1.size(), l2.size() );
    List<Wrapper> result = new ArrayList<>( size );
    int v1 = 0;
    int v2 = 0;
    for ( int i = 0; i < size; i++ )
    {
        v1 = i < l1Size && l1.get( i ) != null ? l1.get( i ).getValue() : 0;
        v2 = i < l2Size && l2.get( i ) != null ? l2.get( i ).getValue() : 0;
        result.add( new Wrapper( v1 + v2 ) );
    }
    return result;
}

public static void main( String[] args )
    throws Exception
{

    List<List<Wrapper>> listOfLists = new ArrayList<>();
    List<Wrapper> list1 = new ArrayList<>();
    list1.add( new Wrapper( 3 ) );
    list1.add( new Wrapper( 4 ) );
    list1.add( new Wrapper( 5 ) );

    List<Wrapper> list2 = new ArrayList<>();
    list2.add( new Wrapper( 1 ) );
    list2.add( new Wrapper( 2 ) );
    list2.add( new Wrapper( 9 ) );

    List<Wrapper> list3 = new ArrayList<>();
    list3.add( new Wrapper( 4 ) );
    list3.add( new Wrapper( 10 ) );
    list3.add( new Wrapper( 11 ) );

    listOfLists.add( list1 );
    listOfLists.add( list2 );
    listOfLists.add( list3 );

    List<Wrapper> colSum = listOfLists.stream().reduce( Collections.emptyList(), ( l1, l2 ) -> sum( l1, l2 ) );

    List<Wrapper> rowSum =
        listOfLists.stream().map( list -> list.stream().reduce( new Wrapper( 0 ),
                                                                ( w1, w2 ) -> new Wrapper( w1.value
                                                                    + w2.value ) ) ).collect( Collectors.toList() );
    System.out.println( "Sum by column : " );
    colSum.forEach( System.out::println );

    System.out.println( "Sum by row : " );
    rowSum.forEach( System.out::println );

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47150031" questionTitle="In JavaFX How to resize multiple images inside a parent node?">
<Answer><![CDATA[package sample;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class Main extends Application {
    public void start(Stage primaryStage) throws Exception {
        HBox OuterHBox = new HBox();

        Image image1 = new Image("file:resources/redseven.png", 200, 200, true, true);
        ImageView imageView1 = new ImageView(image1);
        imageView1.setFitWidth(200);
        imageView1.setFitHeight(200);
        imageView1.setPreserveRatio(true);
        // imageView1.fitWidthProperty().bind(OuterHBox.widthProperty());
        imageView1.fitHeightProperty().bind(OuterHBox.heightProperty());

        Image image2 = new Image("file:resources/redseven.png", 200, 200, true, true);
        ImageView imageView2 = new ImageView(image2);
        imageView2.setFitWidth(200);
        imageView2.setFitHeight(200);
        imageView2.setPreserveRatio(true);
        // imageView1.fitWidthProperty().bind(OuterHBox.widthProperty());
        imageView2.fitHeightProperty().bind(OuterHBox.heightProperty());
        // Updated Code============
        OuterHBox.widthProperty().addListener((observable, oldValue, newValue) -> {

            imageView1.setFitWidth(newValue.doubleValue() / 2);
            imageView2.setFitWidth(newValue.doubleValue() / 2);
        });
        OuterHBox.getChildren().addAll(imageView1, imageView2);

        Scene scene = new Scene(OuterHBox, 600, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    public static void loadFontStuff() {
        Font.loadFont(Main.class.getResource("TRON.TTF").toExternalForm(), 10);
        System.out.println(Main.class.getResource("TRON.TTF"));

    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Main extends Application {

    private ArrayList<ImageView> allImages = null;

    public void start(Stage primaryStage) {
        HBox mainPane = new HBox();

        try {
            allImages = createImages(10, "icon.png");
        } catch (Exception e1) {
            e1.printStackTrace();
        }

        if (allImages == null || allImages.isEmpty()) {
            Platform.exit();
        }

        mainPane.getChildren().addAll(allImages);

        mainPane.widthProperty().addListener(e -> {
            double fitWidth = mainPane.widthProperty().get() / allImages.size();
            for (ImageView iv : allImages) {
                iv.setFitWidth(fitWidth);
            }
        });

        mainPane.heightProperty().addListener(e -> {
            double fitHeight = mainPane.heightProperty().get();
            for (ImageView iv : allImages) {
                iv.setFitHeight(fitHeight);
            }
        });

        Scene scene = new Scene(mainPane, 600, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private ArrayList<ImageView> createImages(int count, String string) throws Exception {

        ArrayList<ImageView> list = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            Image image = new Image(getClass().getResource("icon.png").toURI().toURL().toString());
            ImageView imageView = new ImageView(image);
            imageView.setPreserveRatio(true);
            list.add(imageView);
        }
        return list;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="47102658" questionTitle="How to generate random values where a percentage of them are 0?">
<Answer><![CDATA[static IntStream randomWithPercentZero(int count, double pctZero, int range) {
    return StreamSupport.intStream(
        new Spliterators.AbstractIntSpliterator(count, Spliterator.SIZED) {
            int remainingInts = count;
            int remainingZeroes = (int)Math.round(count * pctZero);
            Random random = new Random();

            @Override
            public boolean tryAdvance(IntConsumer action) {
                if (remainingInts == 0)
                    return false;

                if (random.nextDouble() < (double)remainingZeroes / remainingInts--) {
                    remainingZeroes--;
                    action.accept(0);
                } else {
                    action.accept(random.nextInt(range) + 1);
                }
                return true;
            }
        },
        false);
}]]></Answer>
<Answer><![CDATA[public class RandomGeneratorSample {
    public static void main(String... strings) {
        Random random = new Random();
        Controll60PercentOfZero controll60 = new Controll60PercentOfZero();

        Stream<Integer> boxed = random.ints(0, 100).map(x -> controll60.nextValueMustBeZero(x) ? 0 : x).boxed();

        boxed.forEach(System.out::println);
    }

    static class Controll60PercentOfZero {
        private long count_zero = 1;
        private long count_not_zero = 1;

        public boolean nextValueMustBeZero(int x) {

            if (x == 0) {
                count_zero++;
            } else {
                count_not_zero++;
            }           
            boolean nextValueMustBeZero= (count_zero * 100 / count_not_zero) < 60;
            if(nextValueMustBeZero){
                count_zero++;
            }
            return nextValueMustBeZero;
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46980301" questionTitle="ListView with custom Cell click handling">
<Answer><![CDATA[public class AppointmentCellMouseClickHandler implements EventHandler<MouseEvent> {

    private final Appointment appointment;

    public AppointmentCellMouseClickHandler(Appointment appointment) {
        this.appointment = appointment;
    }

    @Override
    public void handle(MouseEvent arg0) {
        //Do stuff with appointment
    }
}

public class EmptyAppointmentCellMouseClickHandler implements EventHandler<MouseEvent> {

    @Override
    public void handle(MouseEvent arg0) {
        //Do stuff without appointment
    }
}

public class AppointmentCell extends ListCell<Appointment> {

    @Override
    protected void updateItem(Appointment item, boolean empty) {
        super.updateItem(item, empty);
        if (!empty) {
            setGraphic(new AppointmentLabel(item));
            this.setOnMouseClicked(new AppointmentCellMouseClickHandler(item));
        } else {
            setGraphic(null);
            this.setOnMouseClicked(new EmptyAppointmentCellMouseClickHandler());
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ListViewMouseHandlerExample extends Application {

    private int count = 0 ;

    @Override
    public void start(Stage primaryStage) {
        ListView<String> listView = new ListView<>();

        Button addButton = new Button("Add");
        addButton.setOnAction(e -> listView.getItems().add("Item " + (++count)));

        Button deleteButton = new Button("Delete");
        deleteButton.setOnAction(e -> listView.getItems().remove(listView.getSelectionModel().getSelectedIndex()));
        deleteButton.disableProperty().bind(listView.getSelectionModel().selectedItemProperty().isNull());

        listView.setCellFactory(lv -> {
            ListCell<String> cell = new ListCell<String>() {
                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    setText(item);
                }
            };
            cell.setOnMouseClicked(e -> {
                if (!cell.isEmpty()) {
                    System.out.println("You clicked on " + cell.getItem());
                    e.consume();
                }
            });
            return cell;
        });

        listView.setOnMouseClicked(e -> {
            System.out.println("You clicked on an empty cell");
        });

        BorderPane root = new BorderPane(listView);
        ButtonBar buttons = new ButtonBar();
        buttons.getButtons().addAll(addButton, deleteButton);
        root.setBottom(buttons);


        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46973943" questionTitle="Javafx how to get cell from list(not value)">
<Answer><![CDATA[import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.cell.TextFieldListCell;

public class ListCellWithContextMenu extends TextFieldListCell<String> {


    private final ContextMenu contextMenu ;

    public ListCellWithContextMenu(Controller controller) {
        contextMenu = new ContextMenu();
        MenuItem delete = new MenuItem("Delete");
        MenuItem edit = new MenuItem("Edit");
        contextMenu.getItems().addAll(edit, delete);

        edit.setOnAction(e -> controller.edit(getIndex()));
        delete.setOnAction(e -> controller.delete(getIndex()));

        setConverter(TextFormatter.IDENTITY_STRING_CONVERTER);

    }

    @Override
    public void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);
        if (empty) {
            setContextMenu(null);
        } else {
            setContextMenu(contextMenu);
        }
    }
}]]></Answer>
<Answer><![CDATA[//let your cell extend this class
 public class GetAbleListCell<T> extends ListCell<T>{

    private ListViewHelper<T> libraryListHelper;

    public GetAbleListCell(ListViewHelper<T> libraryListHelper) {
        this.libraryListHelper = libraryListHelper;


    }

    @Override
    public void updateIndex(int i) {
        // TODO Auto-generated method stub
        super.updateIndex(i);

        if(getIndex()>0)
        {
            libraryListHelper.setCell(getIndex(),this);
        }
    }

}
 //helper class 
public class ListViewHelper<T> {

    private ObservableList<GetAbleListCell<T>> list=FXCollections.observableArrayList();


    public GetAbleListCell<T> getCell(int index) {

        return list.get(index);
    }



    public void setCell(int index, GetAbleListCell<T> getAbleListCell) {
        while(list.size()<index+1)
        {
        list.add(null);
        }
        list.set(index, getAbleListCell);

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46937493" questionTitle="Spring boot + Jackson + LocalDateTime: Date not parsed correctly">
<Answer><![CDATA[import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;
import java.time.LocalDateTime;

import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;

public class JsonDateTimeDeserializer extends JsonDeserializer<LocalDateTime> {

private static final String NULL_VALUE = "null";

@Override
public LocalDateTime deserialize(JsonParser jp, DeserializationContext ctxt)
        throws IOException {
    ObjectCodec oc = jp.getCodec();
    JsonNode node = oc.readTree(jp);
    String dateString = node.textValue();

    LocalDateTime dateTime = null;
    if (!NULL_VALUE.equals(dateString)) {
        dateTime = LocalDateTime.parse(dateString, ISO_LOCAL_DATE_TIME);
    }
    return dateTime;
}
}]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.so.example</groupId>
    <artifactId>localDateTime</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>localDateTime</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.8.RELEASE</version>
        <relativePath/>
    </parent>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>RELEASE</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46760004" questionTitle="java game how to construct timed effect/fixed distance effect?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Random;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.stage.Stage;

public class TestApp extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {

        Group root = new Group();
        Scene theScene = new Scene(root);
        stage.setScene(theScene);

        Canvas canvas = new Canvas(512, 820);
        root.getChildren().add(canvas);

        GraphicsContext gc = canvas.getGraphicsContext2D();

        ArrayList<Lasser> allLassers = new ArrayList<>();

        Random randGen = new Random();

        for (int i = 0; i < 10; i++) {
            // create 10 lessers with different self-destruction time
            // on random places
            allLassers.add(new Lasser(randGen.nextInt(500) + 10, 800, i * 1000));
        }

        new AnimationTimer() {
            public void handle(long currentNanoTime) {
                // Clear the canvas
                gc.clearRect(0, 0, 512, 820);

                for (Lasser l : allLassers) {
                    // if the current object is still ok
                    if (!l.isDestroyed()) {
                        // draw it
                        gc.fillRect(l.getxPos(), l.getyPos(), l.getWidth(), l.getHeight());
                    }
                }

                // remove all destroyed object
                for (int i = allLassers.size() - 1; i >= 0; i--) {
                    if (allLassers.get(i).isDestroyed()) {
                        allLassers.remove(i);
                    }
                }
            }
        }.start();

        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[import io.reactivex.Scheduler;
import io.reactivex.disposables.SerialDisposable;

public final class GameSchedulers {
    private static final Scheduler EVENT_LOOP =
        io.reactivex.schedulers.Schedulers.single();

    public static Scheduler eventLoop() {
        return EVENT_LOOP;
    }
}

public abstract class Entity implements Collidable {
    private final SerialDisposable scheduledDestruction = new SerialDisposable();
    private volatile boolean isDestroyed;

    public void destroyNow() {
        this.isDestroyed = true;
        this.scheduledDestruction.dispose();
    }

    public void destroyAfter(long delay, TimeUnit unit) {
        scheduledDestruction.set(
            GameSchedulers.eventLoop()
                          .scheduleDirect(this::destroyNow, delay, unit)
        );
    }

    /* (rest of class omitted) */
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46716808" questionTitle="What are alternatives to using numerous boolean switches">
<Answer><![CDATA[public class Animal {
  private final boolean isCat;
  private final boolean isReptile;
  private final boolean isDog;


  private Animal(final boolean isCat, final boolean isReptile, final boolean isDog) {
    this.isCat = isCat;
    this.isReptile = isReptile;
    this.isDog = isDog;
  }

  public static Animal getLizard() {
    return new Animal(false, true, true);
  }

  public static Animal getDog() {
    return new Animal(false, false, false);
  }

  public String seeStranger() {
    final StringBuilder result = new StringBuilder(this.toString());
    if (isDog) {
      result.append(" barks and");
    } else if (isCat) {
      result.append(" meows and");
    }
    if (isReptile) {
      result.append(" crawls away.");
    } else {
      result.append(" walks forward.");
    }
    return result.toString();
  }
}]]></Answer>
<Answer><![CDATA[if (condition1)
{
  bool1 = true
}
else if (condition2)
{
  bool2 = true
}

...

if (bool1 == true && bool2 == true && bool3 == false)
{
  do something
}
else if (bool1 == true && bool2 == false && bool3 == false)
{
  do something
}

...]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46702432" questionTitle="How to get sorted a TreeMap from list using streams">
<Answer><![CDATA[public class Level implements Comparable<Level> {
    int levelId;

    public Level(int levelId) {
        this.levelId = levelId;
    }

    @Override
    public int compareTo(Level o) {
        return Integer.compare(levelId, o.levelId);
    }

    public static Level getLevel(String name){
        return new Level(name.length());
    }

    public static void main(String[]args){
        Set<String> names=new HashSet<>();
        names.add("Mahesh");
        names.add("Ram");
        names.add("Rita");

        Map<Level, Set<String>> map = names.stream().collect(
                Collectors.groupingBy(Level::getLevel, TreeMap::new,
                        Collectors.toSet()));
    }
}]]></Answer>
<Answer><![CDATA[public class Level {
    int levelId;

    public Level(int levelId) {
        this.levelId = levelId;
    }

    public static Level getLevel(String name){
        return new Level(name.length());
    }

    public int getLevelId() {
        return levelId;
    }

    public static void main(String[]args){
        Set<String> names=new HashSet<>();
        names.add("Mahesh");
        names.add("Ram");
        names.add("Rita");

        Comparator<Level> c = Comparator.comparingInt(Level::getLevelId);
        Map<Level, Set<String>> map = names.stream()
            .collect(Collectors.groupingBy(
                         Level::getLevel, () -> new TreeMap<>(c), Collectors.toSet()));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46663675" questionTitle="How to do method chaining with subclasses in Java 8">
<Answer><![CDATA[static abstract class Screen {
    abstract <T extends Screen> T setBrightness(int value);
    abstract <T extends Screen> T setContrast(int value);
}

static class CrtScreen extends Screen {

    @SuppressWarnings("unchecked")
    @Override
    public <T extends Screen> T setBrightness(int value) {
        // ...
        return (T) this;
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends Screen> T setContrast(int value) {
        // ...
        return (T) this;
    }
}

static class ColorCrt extends CrtScreen { /* ... */ }

static class Stuff {
    Stuff add(Screen s) {
        return this;
    }

    Stuff add(String s) {
        return this;
    }

    Stuff add(int i) {
        return this;
    }
}

public static void main(String[] args) {
    ColorCrt cc = new ColorCrt().setBrightness(50).setContrast(50);
    new Stuff().add(new ColorCrt().setBrightness(50).setContrast(50)).add(25).add("...");
}]]></Answer>
<Answer><![CDATA[interface Screen<T extends Screen> {
    T setBrightness(int value);
    T setContrast(int value);
}

class CrtScreen implements Screen<CrtScreen> {
    @SuppressWarnings("unchecked")
    @Override
    public CrtScreen setBrightness(int value) {
        // ...
        return this;
    }

    @SuppressWarnings("unchecked")
    @Override
    public CrtScreen setContrast(int value) {
        // ...
        return this;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46621253" questionTitle="JavaFX - Mask text of a TextArea">
<Answer><![CDATA[import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.TextArea;

public class PasswordArea extends TextArea {

    private StringBuilder original = new StringBuilder();
    private StringBuilder masked = new StringBuilder();

    public PasswordArea() {
        this.textProperty().addListener(new ChangeListener<String>() {

        @Override
        public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
            int oldLength = oldValue.length();
            int newLength = newValue.length();

            if (newLength == oldLength) {
                // obviously an unnecessary case to be checked
            } else if (newLength < oldLength) {
                // last character deleted, so delete the last one of each, original and masked text
                original.delete(newLength, oldLength);
                masked.delete(newLength, oldLength);
            } else {
                // one character added, so just replace that one
                char c = newValue.toCharArray()[newLength - 1];
                if (Character.isSpaceChar(c)) {
                    original.append(c);
                    masked.append(c);
                } else if (c == '\u2022') {

                } else {
                    masked.append('\u2022');
                    original.append(c);
                }
            }
            // this output is just for checking the state of the original
            System.out.println(original.toString() + "\t--->\t" + masked.toString());
            textProperty().set(masked.toString());
        }
    });
}]]></Answer>
<Answer><![CDATA[public class Test extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        String s = "some times there are\nmore strings\n\nin here";
        TextArea ta = new TextArea(s);
        ta.setSkin(new TextAreaMaskSkin(ta));

        TextArea view = new TextArea();
        view.textProperty().bind(ta.textProperty());

        Scene scene = new Scene(new HBox(view, ta));
        stage.setScene(scene);
        stage.show();
    }

    private static class TextAreaMaskSkin extends TextAreaSkin {

        public TextAreaMaskSkin(TextArea textArea) throws Exception {
            super(textArea);
            Field field = TextAreaSkin.class.getDeclaredField("paragraphNodes");
            field.setAccessible(true);
            Group group = (Group) field.get(this);
            Text text = (Text) group.getChildren().get(0);
            text.setText(maskText(textArea.textProperty().getValueSafe()));
            text.textProperty().addListener(o -> text.setText(maskText(textArea.textProperty().getValueSafe())));
        }

        @Override
        protected String maskText(String txt) {
            int n = txt.length();
            StringBuilder passwordBuilder = new StringBuilder(n);
            for (int i = 0; i < n; i++) {
                if (txt.charAt(i) == '\n') {
                    passwordBuilder.append('\n');
                } else {
                    passwordBuilder.append(TextFieldSkin.BULLET);
                }
            }
            return passwordBuilder.toString();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.scene.control.TextArea;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PasswordArea extends TextArea {

    private final static List<String> text = new ArrayList<>();

    private final static List<KeyCode> allowedKeys = Arrays.asList(KeyCode.ENTER, KeyCode.SPACE, KeyCode.BACK_SPACE, KeyCode.A, KeyCode.B, KeyCode.C, KeyCode.D, KeyCode.E, KeyCode.F,
            KeyCode.G, KeyCode.H, KeyCode.I, KeyCode.J, KeyCode.K, KeyCode.L, KeyCode.M, KeyCode.N, KeyCode.O, KeyCode.P, KeyCode.Q, KeyCode.R, KeyCode.S, KeyCode.T, KeyCode.V,
            KeyCode.W, KeyCode.X, KeyCode.Y, KeyCode.Z);

    public PasswordArea() {
        this.setEditable(false);
        this.setOnKeyPressed(event -> {
            if (!allowedKeys.contains(event.getCode())) {
                return;
            }
            KeyCombination ctrlDelete = new KeyCodeCombination(KeyCode.BACK_SPACE, KeyCombination.CONTROL_DOWN);
            if(ctrlDelete.match(event)) {
                setPasswordText(getPasswordText());
                return;
            }
            switch (event.getCode()) {
                case ENTER:
                    this.appendText("\n");
                    text.add("\n");
                    break;
                case SPACE:
                    this.appendText(" ");
                    text.add(" ");
                    break;
                case BACK_SPACE:
                    final int size = this.textProperty().length().get();
                    if (size > 0) {
                        this.deleteText(size - 1, size);
                        text.remove(text.size() - 1);
                    }
                    break;
                default:
                    this.appendText("" + '\u2022');
                    text.add(event.getText());
                    break;
            }
        });
    }

    public String getPasswordText() {
        StringBuilder builder = new StringBuilder();
        text.forEach(builder::append);
        return builder.toString();
    }

    public void setPasswordText(String setText) {
        text.clear();
        this.clear();
        for (int i = 0; i < setText.length(); i++) {
            switch (setText.charAt(i)) {
                case ' ':
                    this.appendText(" ");
                    break;
                case '\n':
                    this.appendText("\n");
                    break;
                default:
                    this.appendText("" + '\u2022');
                    break;
            }
        }
        text.add(setText);
    }
}]]></Answer>
<Answer><![CDATA[public class PasswordAreaSkin extends TextAreaSkin {
    public PasswordAreaSkin(PasswordArea control) {
        Text textNode=getTextNode();
        textNode.textProperty().addListener(obs -> {
            textNode().setText(
                maskText(control.textProperty().getValueSafe()));
        });
    }

    @Override
    protected String maskText(String text) {
        int n = txt.length();
        StringBuilder passwordBuilder=new StringBuilder(n);
        for(int i = 0; i < n; i++) {
            passwordBuilder.append('\u2022'); //append 'bullet' char
        }

        return passwordBuilder.toString();
    }

    private Text getTextNode() {
        //WARNING: call ONLY in the constructor because 
        //children list could change
        Region content=
            ((Region)((ScrollPane)getChildren().get(0)).getContent());
        Group g=(Group)content.getChildrenUnmodifiable().get(1);
        return (Text)g.getChildren().get(0);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46603948" questionTitle="JavaFX position dialog and stage in center of screen">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.stage.Screen;
import javafx.stage.Stage;

public class TestApp extends Application {

    private static final double WIDTH = 316.0;
    private static final double HEIGHT = 339.0;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {

        HBox pane = new HBox();
        pane.setAlignment(Pos.CENTER);

        Button b = new Button("click me");
        b.setOnAction(e -> {
            showDialog();
        });

        pane.getChildren().add(b);

        Scene scene = new Scene(pane, 300, 300);

        stage.setScene(scene);

        centerStage(stage, WIDTH, HEIGHT);
        stage.show();

        System.out.println(stage.getWidth() + " " + stage.getHeight());
    }

    private void showDialog() {
        Alert dialog = new Alert(AlertType.ERROR);
        dialog.setTitle("Error Dialog");
        dialog.setHeaderText("Look, an Error Dialog");
        dialog.setContentText("Ooops, there was an error!");

        Stage stage = (Stage) dialog.getDialogPane().getScene().getWindow();
        centerStage(stage, 366, 175);

        dialog.showAndWait();

    }

    private void centerStage(Stage stage, double width, double height) {
        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
        stage.setX((screenBounds.getWidth() - width) / 2);
        stage.setY((screenBounds.getHeight() - height) / 2);
    }
}]]></Answer>
<Answer><![CDATA[public static void centerChildWindowOnStage(Stage stage, Stage primaryStage ) {

    if(primaryStage == null){
        return;
    }

    double x = stage.getX();
    double y = stage.getY();

    // Firstly we need to force CSS and layout to happen, as the dialogPane
    // may not have been shown yet (so it has no dimensions)
    stage.getScene().getRoot().applyCss();
    stage.getScene().getRoot().layout();

    final Scene ownerScene = primaryStage.getScene();
    final double titleBarHeight = ownerScene.getY();

    // because Stage does not seem to centre itself over its owner, we
    // do it here.

    // then we can get the dimensions and position the dialog appropriately.
    final double dialogWidth = stage.getScene().getRoot().prefWidth(-1);
    final double dialogHeight = stage.getScene().getRoot().prefHeight(dialogWidth);

    final double ownerWidth = primaryStage.getScene().getRoot().prefWidth(-1);
    final double ownerHeight = primaryStage.getScene().getRoot().prefHeight(ownerWidth);

    if(dialogWidth < ownerWidth){
        x = primaryStage.getX() + (ownerScene.getWidth() / 2.0) - (dialogWidth / 2.0);
    }else {
        x = primaryStage.getX();
        stage.setWidth(dialogWidth);
    }

    if(dialogHeight < ownerHeight){
        y = primaryStage.getY() + titleBarHeight / 2.0 + (ownerScene.getHeight() / 2.0) - (dialogHeight / 2.0);
    }else {
        y = primaryStage.getY();
    }

    stage.setX(x);
    stage.setY(y);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46563798" questionTitle="JavaFX Pagination button sizes and style">
<Answer><![CDATA[.pagination > .pagination-control > .control-box > .number-button {
    -fx-min-width: 40;
    -fx-min-height: 30;
}

.pagination > .pagination-control > .control-box > .left-arrow-button {
    -fx-min-width: 40;
    -fx-min-height: 30;
}

.pagination > .pagination-control > .control-box > .right-arrow-button {
    -fx-min-width: 40;
    -fx-min-height: 30;
}

.pagination .pagination-control .toggle-button:selected {   
    -fx-background-color: purple;
}

.pagination .pagination-control .toggle-button:hover, .pagination .pagination-control .button:hover  {   
    -fx-background-color: grey;
}]]></Answer>
<Answer><![CDATA[/* Remove spacing */
.pagination > .pagination-control > .control-box {
    -fx-spacing: 0;
}

/* You can control the actual button sizes here */
.pagination > .pagination-control > .control-box > .number-button,
.pagination > .pagination-control > .control-box > .bullet-button,
.pagination > .pagination-control > .control-box > .left-arrow-button,
.pagination > .pagination-control > .control-box > .right-arrow-button {
    -fx-background-insets: 0, 1;
    -fx-background-color: lightgray, #FAFAFA;
    -fx-min-width: 30;
    -fx-min-height: 30;
}

/* Colors on hover */
.pagination > .pagination-control > .control-box > .number-button:hover,
.pagination > .pagination-control > .control-box > .bullet-button:hover,
.pagination > .pagination-control > .control-box > .left-arrow-button:hover,
.pagination > .pagination-control > .control-box > .right-arrow-button:hover {
    -fx-background-insets: 0;
    -fx-background-color: lightgray;
}

/* Selected toggle color */
.pagination > .pagination-control > .control-box > .number-button:selected,
.pagination > .pagination-control > .control-box > .bullet-button:selected{
    -fx-background-insets: 0;
    -fx-background-color: #58379A;
    -fx-text-fill: white;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46535831" questionTitle="Parallel stream invoking Spliterator more times than its limit">
<Answer><![CDATA[static class LimitingSpliterator<T> implements Spliterator<T> {

    private int limit;

    private final Supplier<T> generator;

    private LimitingSpliterator(Supplier<T> generator, int limit) {
        this.limit = limit;
        this.generator = generator;
    }

    static <T> LimitingSpliterator<T> of(Supplier<T> supplier, int limit) {
        return new LimitingSpliterator<>(supplier, limit);
    }

    @Override
    public boolean tryAdvance(final Consumer<? super T> consumer) {
        Objects.requireNonNull(consumer);
        if (limit > 0) {
            --limit;
            generator.get();
            consumer.accept(generator.get());
            return true;
        }
        return false;
    }

    @Override
    public void forEachRemaining(final Consumer<? super T> consumer) {
        while (limit > 0) {
            consumer.accept(generator.get());
            --limit;
        }
    }

    @Override
    public LimitingSpliterator<T> trySplit() {
        int half = limit >> 2;
        limit = limit - half;
        return new LimitingSpliterator<>(generator, half);
    }

    @Override
    public long estimateSize() {
        return limit << 2;
    }

    @Override
    public int characteristics() {
        return SIZED;
    }
}]]></Answer>
<Answer><![CDATA[trySplit() [0, 500000, 1000000]
trySplit() [500000, 750000, 1000000]
trySplit() [500000, 625000, 750000]
trySplit() [625000, 687500, 750000]
trySplit() [625000, 656250, 687500]
trySplit() [656250, 671875, 687500]
trySplit() [0, 250000, 500000]
trySplit() [750000, 875000, 1000000]
trySplit() [250000, 375000, 500000]
trySplit() [0, 125000, 250000]
trySplit() [250000, 312500, 375000]
trySplit() [312500, 343750, 375000]
trySplit() [125000, 187500, 250000]
trySplit() [875000, 937500, 1000000]
trySplit() [375000, 437500, 500000]
trySplit() [125000, 156250, 187500]
trySplit() [250000, 281250, 312500]
trySplit() [750000, 812500, 875000]
trySplit() [281250, 296875, 312500]
trySplit() [156250, 171875, 187500]
trySplit() [437500, 468750, 500000]
trySplit() [0, 62500, 125000]
trySplit() [875000, 906250, 937500]
trySplit() [62500, 93750, 125000]
trySplit() [812500, 843750, 875000]
trySplit() [906250, 921875, 937500]
trySplit() [0, 31250, 62500]
trySplit() [31250, 46875, 62500]
trySplit() [46875, 54687, 62500]
trySplit() [54687, 58593, 62500]
trySplit() [58593, 60546, 62500]
trySplit() [60546, 61523, 62500]
trySplit() [61523, 62011, 62500]
trySplit() [62011, 62255, 62500]]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46500699" questionTitle="Java 8, how to group stream elements to sets using BiPredicate">
<Answer><![CDATA[public static <T> Collector<T,?,Map<T,Set<T>>> groupingBy(BiPredicate<T,T> p) {
    return Collector.of(HashMap::new,
        (map,t) -> {
            for(Map.Entry<T,Set<T>> e: map.entrySet())
                if(p.test(t, e.getKey())) {
                    e.getValue().add(t);
                    return;
                }
            map.computeIfAbsent(t, x->new HashSet<>()).add(t);
        }, (m1,m2) -> {
            if(m1.isEmpty()) return m2;
            m2.forEach((t,set) -> {
                for(Map.Entry<T,Set<T>> e: m1.entrySet())
                    if(p.test(t, e.getKey())) {
                        e.getValue().addAll(set);
                        return;
                    }
                m1.put(t, set);
            });
            return m1;
        }
    );]]></Answer>
<Answer><![CDATA[public class Wrapper<T> {
    private final T value;
    private final ToIntFunction<? super T> hashFunction;
    private final BiFunction<? super T, ? super T, Boolean> equalsFunction;
    private int hashCode;

    private Wrapper(T value, ToIntFunction<? super T> hashFunction, BiFunction<? super T, ? super T, Boolean> equalsFunction) {
        this.value = value;
        this.hashFunction = hashFunction;
        this.equalsFunction = equalsFunction;
    }
    public static <T> Wrapper<T> of(T value, ToIntFunction<? super T> hashFunction, BiFunction<? super T, ? super T, Boolean> equalsFunction) {
        return new Wrapper<>(value, hashFunction, equalsFunction);
    }
    public T value() {
        return value;
    }
    @Override
    public int hashCode() {
        if (hashCode == 0) {
            hashCode = value == null ? 0 : hashFunction.applyAsInt(value);
        }

        return hashCode;
    }
    @Override
    public boolean equals(Object obj) {
        return (obj == this) || (obj instanceof Wrapper && equalsFunction.apply(((Wrapper<T>) obj).value, value));
    }
    // TODO ...
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46473098" questionTitle="Concatenate two or more optional string in Java 8">
<Answer><![CDATA[@SafeVarargs
public final Optional<String> concat(Optional<String>... inputs)
{
    return Arrays.stream(inputs)
        .reduce((left, right) -> left.flatMap(leftValue -> right.map(rightValue -> leftValue + rightValue)))
        .get();
}

@Test
public void shouldReturnEmptyIfFirstItemIsEmpty()
{
    assertThat(concat(Optional.empty(), Optional.of("B")), is(Optional.empty()));
}

@Test
public void shouldReturnEmptyIfSecondItemIsEmpty()
{
    assertThat(concat(Optional.of("A"), Optional.empty()), is(Optional.empty()));
}

@Test
public void shouldConcatIfNoItemIsEmpty()
{
    assertThat(concat(Optional.of("A"), Optional.of("B")), is(Optional.of("AB")));
}]]></Answer>
<Answer><![CDATA[@Value.Immutable
public abstract class Person {

    public Optional<String> firstName() {
        return Optional.of("John");
    }

    public Optional<String> lastName() {
        return Optional.of("Smith");
    }

    public Optional<String> location() {
        return Optional.of("Paris");
    }

    @Value.Lazy
    public String concat() {

        return Stream.of(firstName(), lastName(), location())
                .filter(Optional::isPresent)
                .map(Optional::get)
                .filter(StringUtils::isNotBlank)
                .reduce((first, second) -> first + '.' + second)
                .orElse("");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46327655" questionTitle="Something strange with positioning text with custom font in Itext7">
<Answer><![CDATA[class CustomTextRenderer extends TextRenderer {
    private CustomTextRenderer(Text text) {
        super(text);
    }

    @Override
    public LayoutResult layout(LayoutContext layoutContext) {
        LayoutResult result = super.layout(layoutContext);
        Rectangle oldBbox = this.occupiedArea.getBBox().clone();
        // you can also make the height more than font size or less if needed
        this.occupiedArea.setBBox(oldBbox.moveUp(oldBbox.getHeight() - fontSize).setHeight(fontSize)); 
        yLineOffset = fontSize * 0.8f; // here you config the proportion of the ascender
        return result;
    }

    @Override
    public IRenderer getNextRenderer() {
        return new CustomTextRenderer((Text) modelElement);
    }
}]]></Answer>
<Answer><![CDATA[private void showTextAligned(String alignment,
                                  PdfCanvas pdfCanvas,
                                  String line,
                                  float lineWidth,
                                  float maxWidth) {
        switch (alignment) {
            case "CENTER": {
                float shift = (maxWidth - lineWidth) / 2 - sumOfShifts;
                pdfCanvas.moveText(shift, 0);
                if(numberOfLines == 0) pdfCanvas.showText(line);
                else pdfCanvas.newlineShowText(line);
                numberOfLines++;
                sumOfShifts += shift;
                break;
            }
            case "RIGHT": {
                float shift = maxWidth - lineWidth - sumOfShifts;
                pdfCanvas.moveText(shift, 0);
                if(numberOfLines == 0) pdfCanvas.showText(line);
                else pdfCanvas.newlineShowText(line);
                numberOfLines++;
                sumOfShifts += shift;
                break;
            }
            default:
                pdfCanvas.moveText(0, 0);
                if(numberOfLines == 0) pdfCanvas.showText(line);
                else pdfCanvas.newlineShowText(line);
                numberOfLines++;
                break;
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46318472" questionTitle="Saving to and importing from a .txt file, causes the data to be overwritten">
<Answer><![CDATA[// Writes to CSV File
    private void writeCSV(ArrayList<String[]> newContent){

        CSVWriter writer;

        try {
            writer = new CSVWriter(new FileWriter(this.path), ';', CSVWriter.NO_QUOTE_CHARACTER);
            writer.writeAll(newContent);
            writer.flush();
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(CSVFile.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

    // Reads from CSV File
    private ArrayList<String> readCSV(){
        BufferedReader br = null;
        String line = "";
        ArrayList<String> ret = new ArrayList();

        try {

            br = new BufferedReader(new FileReader(this.path));
            while ((line = br.readLine()) != null) {
                ret.add(line);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return ret;
    }]]></Answer>
<Answer><![CDATA[public class Home implements Initializable {

    private Card goku = new Card("Goku SSJ3","Everlasting Legend",
                 "/images/gokussj3_main.jpg", "/images/gokussj3_secondary.jpg");

    private boolean clickedAgain = false;

    @FXML
    private Button arrowButton;
    @FXML
    private ImageView imageView;

    @FXML
    private ImageView arrow;

    @FXML
    private ListView listView;

    private ObservableList<Card> cards = FXCollections.observableArrayList();


    @Override
    public void initialize(URL location, ResourceBundle resources) {
        addCard(goku);

        listView.setItems(cards);

        // Handle listView selection changes
        listView.getSelectionModel().selectedItemProperty().addListener(((observable, oldCard, newCard) -> {

            System.out.printf("ListView item clicked! Value retrieved: %s\n", newCard);
            imageView.setImage(newCard.getmMainImage());
            arrow.setVisible(true);
            arrowButton.setVisible(true);
        }));

        arrow.translateYProperty().set(283f);
        arrowButton.translateYProperty().set(283f);
        arrow.setRotate(180);
        arrow.setVisible(false);
        arrowButton.setVisible(false);
    }

    public void handleShowDetails(ActionEvent actionEvent) {
        System.out.println("Button Clicked!");
        Card currentlySelectedCard = listView.getSelectionModel().getSelectedItem();
        if (clickedAgain) {
            imageView.setImage(currentlySelectedCard.getmMainImage());
            arrow.setRotate(180);
            clickedAgain = false;
        } else {
            imageView.setImage(currentlySelectedCard.getmSecondaryImage());
            arrow.setRotate(360);
            clickedAgain = true;
        }
    }

    // Saving
    public void exportTo(String fileName) {
        try (
                FileOutputStream fos = new FileOutputStream(fileName);
                PrintWriter writer = new PrintWriter(fos);
        ) {
            for (Card card : cards) {
                // TODO should make image locations properties of card
                // to implement this properly
                writer.printf("%s|%s|%s|%s\n", card.getName(), card.getDescription(),
                        card.getmMainImage().impl_getUrl(), card.getmSecondaryImage().impl_getUrl());
                System.out.println(card.toString());
            }
        } catch (IOException ioe) {
            System.out.printf("Problem saving: %s/n", fileName);
            ioe.printStackTrace();
        }
    }

    // Loading
    public void importFrom(String fileName) {
        try (
                FileInputStream fis = new FileInputStream(fileName);
                BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
        ) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] args = line.split("\\|");
                this.addCard(new Card(args[0], args[1], args[2], args[3]));
            }
        } catch (IOException ioe) {
            System.out.printf("Problem loading: %S\n", fileName);
            ioe.printStackTrace();
        }
        int i = 0;
        for (Card card : testingList) {
            System.out.printf("%s loaded\n", testingList.get(i).toString());
            i++;
        }
        System.out.println("Loading Successful!");
    }

    public void addCard(Card card) {
        cards.add(card);
    }

    // DEBUG purposes
    public void printTestingList() {
        for (Card card : cards) {
            System.out.println(card.toString());
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46290417" questionTitle="JavaFX Disable TableColumn based on checkbox state">
<Answer><![CDATA[data = FXCollections.observableArrayList(new Callback<CustomObject, Observable[]>() {

            @Override
            public Observable[] call(CustomObject param) {
                return new Observable[]{param.petrifiedProperty()};
            }
    });


data.addListener(new ListChangeListener<CustomObject>() {

        @Override
        public void onChanged(ListChangeListener.Change<? extends CustomObject> c) {
            while (c.next()) {
                if (c.wasUpdated()) {
                    tableView.setItems(null); 
                    tableView.layout(); 
                    tableView.setItems(FXCollections.observableList(data)); 
                }
            }
        }
    });]]></Answer>
<Answer><![CDATA[import java.util.logging.Logger;

//import de.swingempire.fx.util.FXUtils;
import javafx.application.Application;
import javafx.beans.Observable;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.converter.DefaultStringConverter;

/**
 * CheckBoxTableCell: update editable state of one column based of  
 * the boolean in another column
 * https://stackoverflow.com/q/46290417/203657
 * 
 * Bug in skins: cell not updated on listChange.wasUpdated
 * 
 * reported as
 * https://bugs.openjdk.java.net/browse/JDK-8187665
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public class TableViewUpdateBug extends Application {


    /**
     * TableCell that updates state based on another value in the row.
     */
    public static class DisableTextFieldTableCel extends TextFieldTableCell {

        public DisableTextFieldTableCel() {
            super(new DefaultStringConverter());
        }

        /**
         * Just to see whether or not this is called on update notification
         * from the items (it's not)
         */
        @Override
        public void updateIndex(int index) {
            super.updateIndex(index);
//            LOG.info("called? " + index);
        }

        /**
         * Implemented to change background based on 
         * visible property of row item.
         */
        @Override
        public void updateItem(Object item, boolean empty) {
            super.updateItem(item, empty);
            TableRow<TableColumn> currentRow = getTableRow();
            boolean editable = false;
            if (!empty && currentRow != null) {
                TableColumn column = currentRow.getItem();
                if (column != null) {
                    editable = column.isVisible();
                }
            }
            if (!empty) {
                setDisable(!editable);
                setEditable(editable);
                if (editable) {
                    this.setStyle("-fx-background-color: red");

                } else {
                    this.setStyle("-fx-background-color: green");
                }
            } else {
                setStyle("-fx-background-color: null");
            }
        }

    }

    @Override
    public void start(Stage primaryStage) {
        // data: list of tableColumns with extractor on visible property
        ObservableList<TableColumn> data = FXCollections.observableArrayList(
                c ->  new Observable[] {c.visibleProperty()});

        data.addAll(new TableColumn("first"), new TableColumn("second"));

        TableView<TableColumn> table = new TableView<>(data);
        table.setEditable(true);

        // hack-around: call refresh
        data.addListener((ListChangeListener) c -> {
            boolean wasUpdated = false;
            boolean otherChange = false;
            while(c.next()) {
                if (c.wasUpdated()) {
                    wasUpdated = true;
                } else {
                    otherChange = true;
                }

            }
            if (wasUpdated && !otherChange) {
                table.refresh();
            }
            //FXUtils.prettyPrint(c);
        });
        TableColumn<TableColumn, String> text = new TableColumn<>("Text");
        text.setCellFactory(c -> new DisableTextFieldTableCel()); 
        text.setCellValueFactory(new PropertyValueFactory<>("text"));

        TableColumn<TableColumn, Boolean> visible = new TableColumn<>("Visible");
        visible.setCellValueFactory(new PropertyValueFactory<>("visible"));
        visible.setCellFactory(CheckBoxTableCell.forTableColumn(visible));

        table.getColumns().addAll(text, visible);

        BorderPane root = new BorderPane(table);
        Scene scene = new Scene(root, 300, 150);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger
            .getLogger(TableViewUpdateBug.class.getName());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46187453" questionTitle="JavaFX Polygons share Points">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.StrokeType;
import javafx.stage.Stage;

public class Main extends Application {

    public class Vertex {

        private double x, y;

        public Vertex(double x, double y) {
            this.x = x;
            this.y = y;
        }

        public Double[] getPoint() {
            return new Double[]{x, y};
        }
    }

    public class Face {

        private List<Vertex> verts;

        public Face(Vertex... verts) {
            this.verts = new ArrayList<>(Arrays.asList(verts));
        }

        public Polygon getPolygon() {
            Polygon polygon = new Polygon();
            polygon.setFill(Color.GRAY);
            polygon.setStroke(Color.BLACK);

            for (Vertex vertex : verts) {
                polygon.getPoints().addAll(vertex.getPoint());
            }
            return polygon;
        }

        public boolean containsVertex(Vertex ver) {
            for (Vertex v : this.verts) {
                if (v.x == ver.x && v.y == ver.y) {
                    return true;
                }
            }
            return false;
        }
    }

    public class Mesh {

        private List<Vertex> verts = new ArrayList<Vertex>();
        private List<Face> faces = new ArrayList<Face>();
        private Map<Vertex, List<Face>> commonVertices = new HashMap<>();

        public List<Polygon> getPolygons() {
            List<Polygon> polygons = new ArrayList<Polygon>();

            for (Face face : faces) {
                polygons.add(face.getPolygon());
            }
            return polygons;
        }

        public Mesh() {
            verts.add(new Vertex(50, 50));
            verts.add(new Vertex(300, 50));
            verts.add(new Vertex(500, 50));
            verts.add(new Vertex(50, 300));
            verts.add(new Vertex(250, 300));
            verts.add(new Vertex(500, 300));
            verts.add(new Vertex(50, 600));
            verts.add(new Vertex(300, 700));
            verts.add(new Vertex(500, 700));

            faces.add(new Face(verts.get(0), verts.get(1), verts.get(4), verts.get(3)));
            faces.add(new Face(verts.get(4), verts.get(1), verts.get(2), verts.get(5)));
            faces.add(new Face(verts.get(3), verts.get(4), verts.get(7), verts.get(6)));
            faces.add(new Face(verts.get(7), verts.get(4), verts.get(5)));
            faces.add(new Face(verts.get(7), verts.get(5), verts.get(8)));

            findCommonVertices();
        }

        private void findCommonVertices() {
            for (Vertex ver : this.verts) {
                List<Face> share = new ArrayList<>();
                for (Face face : this.faces) {
                    if (face.containsVertex(ver)) {
                        share.add(face);
                    }
                }
                commonVertices.put(ver, share);
            }
        }

        public Map<Vertex, List<Face>> getCommonVertices() {
            return this.commonVertices;
        }

    }

    @Override
    public void start(Stage stage) {
        Group root = new Group();
        Scene scene = new Scene(root, 1024, 768);
        stage.setScene(scene);

        Group g = new Group();
        Mesh mesh = new Mesh();
        List<Polygon> polygons = mesh.getPolygons();

        g.getChildren().addAll(polygons);

        List<Anchor> anchors = new ArrayList<>();
        for (Polygon p : polygons) {
            ObservableList<Anchor> temp = createControlAnchorsFor(p.getPoints());
            g.getChildren().addAll(temp);
            for (Anchor kk : temp) {
                anchors.add(kk);
            }
        }

        for (int i = 0; i < anchors.size(); i++) {
            List<Anchor> common = new ArrayList<>();
            for (int j = 0; j < anchors.size(); j++) {
                if (i != j) {
                    if (anchors.get(i).x.doubleValue() == anchors.get(j).x.doubleValue() && anchors.get(i).y.doubleValue() == anchors.get(j).y.doubleValue()) {
                        anchors.get(i).addCommon(anchors.get(j));
                        System.out.println("COMMON " + i + "  " + j);
                    }
                }
            }
           // anchors.get(i).setCommon(common);
        }

        scene.setRoot(g);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    // Everything below was copied from here: https://gist.github.com/jewelsea/5375786
    // @return a list of anchors which can be dragged around to modify points in the format [x1, y1, x2, y2...]
    private ObservableList<Anchor> createControlAnchorsFor(final ObservableList<Double> points) {
        ObservableList<Anchor> anchors = FXCollections.observableArrayList();

        for (int i = 0; i < points.size(); i += 2) {
            final int idx = i;

            DoubleProperty xProperty = new SimpleDoubleProperty(points.get(i));
            DoubleProperty yProperty = new SimpleDoubleProperty(points.get(i + 1));

            xProperty.addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> ov, Number oldX, Number x) {
                    points.set(idx, (double) x);
                }
            });

            yProperty.addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> ov, Number oldY, Number y) {
                    points.set(idx + 1, (double) y);
                }
            });

            anchors.add(new Anchor(Color.GOLD, xProperty, yProperty));
        }

        return anchors;
    }

    // a draggable anchor displayed around a point.
    class Anchor extends Circle {

        private final DoubleProperty x, y;
        List<Anchor> common = new ArrayList<>();

        public void setCommon(List<Anchor> common) {
            this.common = common;
        }

        public void addCommon(Anchor com) {
            common.add(com);
            enableDrag();
        }

        Anchor(Color color, DoubleProperty x, DoubleProperty y) {
            super(x.get(), y.get(), 10);
            setFill(color.deriveColor(1, 1, 1, 0.5));
            setStroke(color);
            setStrokeWidth(2);
            setStrokeType(StrokeType.OUTSIDE);

            this.x = x;
            this.y = y;

            x.bind(centerXProperty());
            y.bind(centerYProperty());
               enableDrag();
        }

        // make a node movable by dragging it around with the mouse.
        private void enableDrag() {
            final Delta dragDelta = new Delta();
            setOnMousePressed(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    // record a delta distance for the drag and drop operation.
                    dragDelta.x = getCenterX() - mouseEvent.getX();
                    dragDelta.y = getCenterY() - mouseEvent.getY();
                    getScene().setCursor(Cursor.MOVE);
                }
            });
            setOnMouseReleased(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    getScene().setCursor(Cursor.HAND);
                }
            });
            setOnMouseDragged(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    double newX = mouseEvent.getX() + dragDelta.x;
                    if (newX > 0 && newX < getScene().getWidth()) {
                        setCenterX(newX);
                        if (common != null) {
                            for (Anchor an : common) {
                                an.setCenterX(newX);
                                System.out.println("CALLED");
                            }
                        }
                    }
                    double newY = mouseEvent.getY() + dragDelta.y;
                    if (newY > 0 && newY < getScene().getHeight()) {
                        setCenterY(newY);
                        if (common != null) {
                            for (Anchor an : common) {
                                an.setCenterY(newY);
                            }
                        }
                    }
                }
            });
            setOnMouseEntered(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    if (!mouseEvent.isPrimaryButtonDown()) {
                        getScene().setCursor(Cursor.HAND);
                    }
                }
            });
            setOnMouseExited(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    if (!mouseEvent.isPrimaryButtonDown()) {
                        getScene().setCursor(Cursor.DEFAULT);
                    }
                }
            });
        }

        // records relative x and y co-ordinates.
        private class Delta {

            double x, y;
        }
    }
}]]></Answer>
<Answer><![CDATA[public class VertexListener implements InvalidationListerner {
    private final Vertex vertex;
    private final int firstIndex;
    private final List<Double> points;

    public VertexListener(Vertex vertex, Polygon polygon, int pointIndex) {
        this.firstIndex = 2 * pointIndex;
        this.vertex = vertex;
        this.points = polygon.getPoints();

        vertex.xProperty().addListener(this);
        vertex.yProperty().addListener(this);
    } 

    public void dispose() {
        vertex.xProperty().removeListener(this);
        vertex.yProperty().removeListener(this);
    }

    @Override
    public void invalidated(Observable observable) {
        double x = vertex.getX();
        double y = vertex.getY();
        points.set(firstIndex, x);
        points.set(firstIndex+1, y);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46137454" questionTitle="How can I update random value of radius after every cycle?">
<Answer><![CDATA[public void start(Stage primaryStage) {
    Pane root = new Pane();
    Scene scene = new Scene(root, 500, 600);

    final Random random = new Random();
    Circle circle = new Circle(0, 0, random.nextInt(100));
    circle.setFill(Color.RED);
    root.getChildren().add(circle);

    Animation animation = new Transition() {
        {
            setCycleCount(INDEFINITE);
            setCycleDuration(Duration.seconds(2));
        }

        @Override
        protected void interpolate(double frac) {
            if (frac == 0) {
                final int newRadius = random.nextInt(100);
                System.out.println("New Radius: " + newRadius);
                circle.setRadius(newRadius + 5);
            }
            circle.setTranslateX(frac * 600);
        }
    };
    animation.play();
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public void start(Stage primaryStage) throws Exception {
    Pane root = new Pane();
    Scene scene = new Scene(root, 500, 600);
    Random rand = new Random();

    primaryStage.setScene(scene);
    primaryStage.show();

    while (true) { 
        int random = rand.nextInt(100-5)+5;
        Circle circle = new Circle(0, 10, random);
        circle.setFill(Color.RED);
        root.getChildren().add(circle);

        Timeline timeline = new Timeline(new KeyFrame(
            Duration.seconds(2),
            new KeyValue(circle.translateXProperty(), 600)
        ));
        timeline.setCycleCount(1);
        timeline.setAutoReverse(false);

        timeline.play();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46123566" questionTitle="Java - combine Scanner for file with Scanner for user input">
<Answer><![CDATA[/**
     * Initializes an input stream from a file.
     *
     * @param  file the file
     * @throws IllegalArgumentException if cannot open {@code file}
     * @throws IllegalArgumentException if {@code file} is {@code null}
     */
    public In(File file) {
        if (file == null) throw new IllegalArgumentException("file argument is null");
        try {
            // for consistency with StdIn, wrap with BufferedInputStream instead of use
            // file as argument to Scanner
            FileInputStream fis = new FileInputStream(file);
            scanner = new Scanner(new BufferedInputStream(fis), CHARSET_NAME);
            scanner.useLocale(LOCALE);
        }
        catch (IOException ioe) {
            throw new IllegalArgumentException("Could not open " + file, ioe);
        }
    }]]></Answer>
<Answer><![CDATA[public void doFile() {
    try(Scanner cin = new Scanner(aFile)) {
        // read over file
        while (cin.hasNextLine()) {
            commonLoopBody(cin);
        }
    }
}

public void doREPL() {
    // set scanner up against user input - this is the actual line
    Scanner cin = new Scanner(System.in);
    boolean continueRunning = true;

    while(continueRunning) {
        // pretty print prompt
        System.out.printf("%n$> ");
        commonLoopBody(cin);
    }
}

private void commonLoopBody(Scanner cin) {
    // this is actually a lot more complicated, but ultimately we're
    // just doing whatever the next line says
    doWhatItSays(cin.nextLine());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46113170" questionTitle="JavaFX TableView Cell color change depending on text value">
<Answer><![CDATA[public class TestController {

    @FXML
    private TableView<TableRow> table;
    @FXML
    private TableColumn<TableRow, Status> column;

    private ObservableList<TableRow> data = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        column.setCellValueFactory(data -> data.getValue().statusProperty());
        column.setCellFactory(factory -> new ColoredStatusTableCell());
        Map<Status, Color> statusColor = new HashMap<>();
        statusColor.put(Status.READY, Color.GREEN);
        statusColor.put(Status.STARTED, Color.YELLOW);
        statusColor.put(Status.DONE, Color.GRAY);

        TableRow ready = new TableRow(Status.READY, statusColor);
        TableRow started = new TableRow(Status.STARTED, statusColor);
        TableRow done = new TableRow(Status.DONE, statusColor);

        data.addAll(ready, started, done);

        table.setItems(data);
    }

}]]></Answer>
<Answer><![CDATA[`
private void populateTable() {
        log.appLog("Populating table\r\n");
        //clmStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        clmStatus.setCellFactory(new Callback<TableColumn<Orders, String>,
                TableCell<Orders, String>>()
        {
            @Override
            public TableCell<Orders, String> call(
                    TableColumn<Orders, String> param) {
                return new TableCell<Orders, String>() {
                    @Override
                    protected void updateItem(String item, boolean empty) {
                        if (!empty) {
                            int currentIndex = indexProperty()
                                    .getValue() < 0 ? 0
                                    : indexProperty().getValue();
                            String clmStatus = param
                                    .getTableView().getItems()
                                    .get(currentIndex).getStatus();
                            if (clmStatus.equals("READY")) {
                                setTextFill(Color.WHITE);
                                setStyle("-fx-font-weight: bold");
                                setStyle("-fx-background-color: green");
                                setText(clmStatus);
                            } else if (clmStatus.equals("STARTED")){
                                setTextFill(Color.BLACK);
                                setStyle("-fx-font-weight: bold");
                                setStyle("-fx-background-color: yellow");
                                setText(clmStatus);
                            } else if (clmStatus.equals("DONE")){
                                setTextFill(Color.BLACK);
                                setStyle("-fx-font-weight: bold");
                                setStyle("-fx-background-color: gray");
                                setText(clmStatus);
                            } else {
                                setTextFill(Color.WHITE);
                                setStyle("-fx-font-weight: bold");
                                setStyle("-fx-background-color: red");
                                setText(clmStatus);
                            }
                        }
                    }
                };
            }
        });

        clmStartDateTime.setCellValueFactory(new PropertyValueFactory<>("startDateTime"));
        clmShopOrder.setCellValueFactory(new PropertyValueFactory<>("extra1"));
        clmRotation.setCellValueFactory(new PropertyValueFactory<>("batchLotNr"));
        clmGMIECode.setCellValueFactory(new PropertyValueFactory<>("wareNr"));
        clmSAPCode.setCellValueFactory(new PropertyValueFactory<>("serviceDescription"));
        clmLineName.setCellValueFactory(new PropertyValueFactory<>("productionLineNr"));
        clmOrderProductionNr.setCellValueFactory(new PropertyValueFactory<>("orderProductionNr"));
        tblOrders.setItems(list);
    }
`]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46104419" questionTitle="Multiple Java 8 Enums with same methods">
<Answer><![CDATA[public enum BoneDiagnosis
implements
    CommonStuffs
{
  NORMAL(121),
  ELEVATED(207),
  OSTEOPENIA(314),
  OSTEOPOROSIS(315);

  private CommonStuffsImpl commonStuffsImpl;
  private int value;

  BoneDiagnosis(final int theValue)
  {
      value = theValue;

      commonStuffsImpl = new CommonStuffsImpl();
  }

  @Override
    public int toDB()
  {
    return commonStuffsImpl.toDBImplementation(value);
  }
}]]></Answer>
<Answer><![CDATA[public static interface BoneDiagnosisType{

        public String name();

        default int toDB() {
            try{
                Class<?> clazz = getClass();            
                Field field = clazz.getDeclaredField("value");
                return field.getInt(this);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        default String getText(){
            return MainProgram.localize( this.getClass().getSimpleName().toUpperCase() + ".VALUE." + name() );            
        }


        public static < E extends Enum<E> & BoneDiagnosisType > E fromDB(Class<E> eClass, Integer v) {
            if (v != null) {
                for ( final E pc : eClass.getEnumConstants() ) {
                    if ( v == pc.toDB() ) {
                        return pc;
                    }
                }
            }
            return null;
        }  
    }


    public static enum BoneDiagnosis1 implements BoneDiagnosisType{
        NORMAL(121),
        ELEVATED(207),
        OSTEOPENIA(314),
        OSTEOPOROSIS(315);

        int value;

        BoneDiagnosis1(int value) {
            this.value = value;
        }
    }

    public static enum BoneDiagnosis2 implements BoneDiagnosisType{
        NORMAL(1121),
        ELEVATED(1207),
        OSTEOPENIA(1314),
        OSTEOPOROSIS(1315);

        int value;

        BoneDiagnosis2(int value) {
            this.value = value;
        }
    }]]></Answer>
<Answer><![CDATA[@Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME)
public @interface DbId {
    int value();
}
final class Helper extends ClassValue<Map<Object,Object>> {
    static final Helper INSTANCE = new Helper();

    @Override protected Map<Object, Object> computeValue(Class<?> type) {
        Map<Object,Object> m = new HashMap<>();
        for(Field f: type.getDeclaredFields()) {
            if(f.isEnumConstant()) try {
                Object constant = f.get(null);
                Integer id = f.getAnnotation(DbId.class).value();
                m.put(id, constant);
                m.put(constant, id);
            }
            catch(IllegalAccessException ex) {
                throw new IllegalStateException(ex);
            }
        }
        return Collections.unmodifiableMap(m);
    }
}
public interface Common {
    String name();
    Class<? extends Enum<?>> getDeclaringClass(); 
    default int toDB() {
        return (Integer)Helper.INSTANCE.get(getDeclaringClass()).get(this);
    }
    default String getText() {
        return MainProgram.localize(
            getDeclaringClass().getSimpleName().toUpperCase() + ".VALUE." + name());
    }
    static <T extends Enum<T>&Common> T fromDB(Class<T> type, int id) {
        return type.cast(Helper.INSTANCE.get(type).get(id));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46075928" questionTitle="Turn linked Objects into Stream or Collection">
<Answer><![CDATA[static Stream<Throwable> process(Throwable t) {

    Spliterator<Throwable> sp = new AbstractSpliterator<Throwable>(100L, Spliterator.ORDERED) {

        Throwable inner = t;

        @Override
        public boolean tryAdvance(Consumer<? super Throwable> action) {
            if (inner != null) {
                action.accept(inner);
                inner = inner.getCause();
                return true;
            }

            return false;
        }
    };

    return StreamSupport.stream(sp, false);
}]]></Answer>
<Answer><![CDATA[public static <T> Stream<T>
                  iterate​(T seed, Predicate<? super T> hasNext, UnaryOperator<T> next)
{
    Objects.requireNonNull(next);
    Objects.requireNonNull(hasNext);
    return StreamSupport.stream(
        new Spliterators.AbstractSpliterator<T>(Long.MAX_VALUE, Spliterator.ORDERED) {
            T current = seed;
            int state;
            public boolean tryAdvance(Consumer<? super T> action) {
                Objects.requireNonNull(action);
                T value = current;
                if(state > 0) value = next.apply(value);
                else if(state == 0) state = 1;
                else return false;
                if(!hasNext.test(value)) {
                    state = -1;
                    current = null;
                    return false;
                }
                action.accept(current = value);
                return true;
            }
        },
        false);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46066680" questionTitle="How to alter the design so that entities don't use injections?">
<Answer><![CDATA[public class CarFactory {

    public Car makePosrche(final String registrationNumber) {
        Car porsche = new Car();
        porsche.setRegistration(registrationNumber);
        porsche.setType("Posrshe");
        porsche.setYear(1986);
        return porsche;
    }
}

public class PlaneFactory {

    public Plane makeSevenFourSeven(final String name) {
        Plane sevenFourSeven = new Plane();
        List<Engine> engines = new ArrayList<Engine>();
        engines.add(JET);
        engines.add(JET);
        engines.add(JET);
        engines.add(JET);
        sevenFourSeven.setEngines(engines);
        sevenFourSeven.setName(name);
        return sevenFourSeven;
    }

    public Plane makeSpitFire(final String name) {
        Plane spitFire = new Plane();
        List<Engine> engines = new ArrayList<Engine>();
        engines.add(PROPELLER);
        spitFire.setEngines(engines);
        spitFire.setModel("Spitfire");
        spitFire.setName(name);
        return spitFire;
    }
}]]></Answer>
<Answer><![CDATA[public class SSOApplication {

    public class State implements Serializable {

        List<AbstractCar> cars = new ArrayList<>();

        List<AbstractPlane> planes = new ArrayList<>();

        // other objects similar to AbstractPlane as shown below
    }

    public abstract class AbstractPlane implements Serializable {

        long serialNumber;
    }

    public class PropellorPlane extends AbstractPlane {

        int propellors;
    }

    public class EnginePlane extends AbstractPlane {

        List<Engine> engines = new ArrayList<>(); // Engine is another pojo
    }

    public abstract class AbstractCar implements Serializable {

        long serialNumber;

        abstract CarData getData();

    }

    public static class CarData {

        String type;
        int year;
    }

    public class Car2Data extends CarData {

        char property2;

        {
            type = "car2";
            year = 12;
        }
    }

    public static class Car1Data extends CarData {

        int property1;

        {
            type = "car1";
            year = 1;
        }
    }

    public static class Car1 extends AbstractCar {

        @Override
        CarData getData() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

    public static class Car2 extends AbstractCar {

        @Override
        CarData getData() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

    public static interface CarManager<T extends CarData> {

        void operate(T car, int index);

        default boolean canHandle(T carData) {
            final TypeToken<T> token = new TypeToken<T>(getClass()) {
            };

            return token.getType() == carData.getClass();
        }
    }

    @ApplicationScoped
    public static class Car1Manager implements CarManager<Car1Data> {

        public void operate(Car1Data car, int index) {
        }
    }

    @ApplicationScoped
    public static class Car2Manager implements CarManager<Car2Data> {

        public void operate(Car2Data car, int index) {
        }
    }

    @ApplicationScoped
    public static class CarService {

        @Any
        @Inject
        private Instance<CarManager<?>> carManagers;

        public void operate(int index, AbstractCar car) {
            final CarData carData = car.getData();
            final CarManager<?> carManager = carManagers.stream()
                    .filter((mng) -> mng.canHandle(carData))
                    .findFirst()
                    .orElse(IllegalArgumentException::new);

            carManager.operate(carData, index);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="46012383" questionTitle="How to print a list by adding a new line after every 3rd element in a list in java lambda expression?">
<Answer><![CDATA[import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

final class PartitionListExample {

    public static void main(String[] args) {

        final Collection<String> mainList = Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h", "i");
        final AtomicInteger idx = new AtomicInteger(0);
        final int size = 3;

        // Partition a list into list of lists size 3
        final Collection<List<String>> rows = mainList.stream()
                .collect(Collectors.groupingBy(
                        it -> idx.getAndIncrement() / size
                ))
                .values();

        // Write each row in the new line as a string
        final String result = rows.stream()
                .map(row -> String.join(",", row))
                .collect(Collectors.joining("\n"));

        System.out.println(result);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class PartitionListInPlace {

    static class MyCollector implements Collector<String, List<List<String>>, String> {

        private final List<List<String>> buckets;
        private final int bucketSize;

        public MyCollector(int numberOfBuckets, int bucketSize) {
            this.bucketSize = bucketSize;
            this.buckets = new ArrayList<>(numberOfBuckets);
            for (int i = 0; i < numberOfBuckets; i++) {
                buckets.add(new ArrayList<>(bucketSize));
            }
        }

        @Override
        public Supplier<List<List<String>>> supplier() {
            return () -> this.buckets;
        }

        @Override
        public BiConsumer<List<List<String>>, String> accumulator() {
            return (buckets, element) -> buckets
              .stream()
              .filter(x -> x.size() < bucketSize)
              .findFirst()
              .orElseGet(() -> {
                  ArrayList<String> nextBucket = new ArrayList<>(bucketSize);
                  buckets.add(nextBucket);
                  return nextBucket;
              })
              .add(element);
        }

        @Override
        public BinaryOperator<List<List<String>>> combiner() {
            return (b1, b2) -> {
                throw new UnsupportedOperationException();
            };
        }

        @Override
        public Function<List<List<String>>, String> finisher() {
            return buckets -> buckets.stream()
              .map(x -> x.stream()
                .collect(Collectors.joining(", ")))
              .collect(Collectors.joining(System.lineSeparator()));
        }

        @Override
        public Set<Characteristics> characteristics() {
            return new HashSet<>();
        }
    }


    public static void main(String[] args) {
        Collection<String> mainList = Arrays.asList("a","b","c","d","e","f","g","h","i", "j");

        String formattedValues = mainList
          .stream()
          .collect(new MyCollector(mainList.size() / 3, 3));
        System.out.println(formattedValues);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45990731" questionTitle="JAVA Visual Representation">
<Answer><![CDATA[import javafx.application.*;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.*;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;

public class Checkout extends Application {

    private static final double SQUARE_SIZE = 20;
    private static final double PIECE_RADIUS = SQUARE_SIZE / 2.5;

    private static final Color WHITE = Color.BEIGE;
    private static final Color BLACK = Color.ROSYBROWN;

    // setupindex, player, position (1-32 index into top to bottom black squares on the board).
    private static final int[][][] setups =
            {
                    {
                            {31, 27, 19},
                            {17, 12, 5}
                    },
                    {
                            {30, 26, 18},
                            {19, 11, 10},
                    },
                    {
                            {31, 24, 19},
                            {18, 11, 10}
                    }
            };
    private static final String SNAPSHOT_FILE_PREFIX = "snapshot-";
    private static final String SNAPSHOT_FILE_SUFFIX = ".png";

    private WritableImage snapshotFxImage =
            new WritableImage((int) (SQUARE_SIZE * 8), (int) (SQUARE_SIZE * 8));
    private BufferedImage snapshotBufferedImage =
            new BufferedImage((int) (SQUARE_SIZE * 8), (int) (SQUARE_SIZE * 8), BufferedImage.TYPE_INT_ARGB);

    private static final String USER_HOME =
            System.getProperties().getProperty("user.home");


    @Override
    public void start(Stage stage) throws IOException {
        Group layout = new Group();
        renderBoard(layout);
        Scene scene = new Scene(layout);

        int i = 0;
        for (int[][] setup : setups) {
            List<Node> pieces = renderSetup(setup);
            layout.getChildren().addAll(pieces);
            snapshot(scene, i);
            layout.getChildren().removeAll(pieces);

            i++;
        }

        Platform.setImplicitExit(false);
        Platform.exit();
    }

    private void renderBoard(Group layout) {
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                Rectangle square = new Rectangle(
                        c * SQUARE_SIZE,
                        r * SQUARE_SIZE,
                        SQUARE_SIZE,
                        SQUARE_SIZE
                );

                Color fill =
                        (((c + r) % 2) == 0)
                                ? Color.WHITE
                                : Color.BLACK;
                square.setFill(fill);

                layout.getChildren().add(square);
            }
        }
    }

    private List<Node> renderSetup(int[][] setup) {
        List<Node> pieces = new ArrayList<>();
        for (int player = 0; player < 2; player++) {
            for (int pieceIndex = 0; pieceIndex < setup[player].length; pieceIndex++) {
                Color fill =
                        player == 0
                                ? WHITE
                                : BLACK;
                Circle piece = new Circle(PIECE_RADIUS, fill);

                pieces.add(piece);
                movePieceTo(piece, setup[player][pieceIndex]);
            }
        }

        return pieces;
    }

    private void movePieceTo(Circle circle, int p) {
        int r = (p - 1) / 4;
        int c = ((p - 1) % 4) * 2 + (((r % 2) == 0) ? 1 : 0);

        circle.setCenterX(c * SQUARE_SIZE + SQUARE_SIZE / 2);
        circle.setCenterY(r * SQUARE_SIZE + SQUARE_SIZE / 2);
    }

    private void snapshot(Scene scene, int snapshotIdx) throws IOException {
        Path path = Paths.get(
                USER_HOME,
                SNAPSHOT_FILE_PREFIX + snapshotIdx + SNAPSHOT_FILE_SUFFIX
        );
        scene.snapshot(snapshotFxImage);
        SwingFXUtils.fromFXImage(snapshotFxImage, snapshotBufferedImage);
        ImageIO.write(snapshotBufferedImage, "png", path.toFile());

        System.out.println("Saved: " + path.toString());
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class SO45990731 {

    public static void main(String [] args) throws IOException {
        BufferedImage image = new BufferedImage(500, 500, BufferedImage.TYPE_INT_ARGB);

        Graphics g = image.getGraphics();

        // TODO draw your checker board
        g.drawOval(100, 100, 300, 300);

        // cleanup and write
        g.dispose();
        ImageIO.write(image, "png", new File("board.png"));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45977579" questionTitle="How to clip a line?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Bounds;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;


public class LineChartSample extends Application {

    int clickCount = 0;

    @Override public void start(Stage stage) {
        Pane pane = new Pane();
        Scene scene = new Scene(pane, 500, 500);
        Line line = new Line(0, 200, 500, 200);

        line.setStrokeWidth(2);
        line.setStroke(Color.RED);

        Bounds b = line.getBoundsInParent();
        System.out.println(b);

        pane.getChildren().add(line);

        pane.setOnMouseClicked((event)->{
            ++clickCount;
            double d = clickCount*20.0;
            Rectangle clipRect = new Rectangle(b.getMinX() + d, b.getMinY(), b.getWidth() - 2*d, b.getHeight());
            line.setClip(clipRect);
        });

        stage.setWidth(700);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.stage.Stage;


public class LineChartSample extends Application {

    @Override public void start(Stage stage) {
        Pane pane = new Pane();
        Scene scene = new Scene(pane, 500, 500);
        Line line = new Line(0, 200, 500, 200);

        line.setStrokeWidth(2);
        line.setStroke(Color.RED);
        pane.getChildren().add(line);

//        Rectangle clipRect = new Rectangle(line.getBoundsInParent().getWidth(), line.getBoundsInParent().getHeight());
//        line.setClip(clipRect);

        line.setOnMouseClicked((event)->{
            line.setEndX(line.getBoundsInLocal().getWidth() - 100);
        });

        stage.setWidth(700);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45950496" questionTitle="JPA: How should I annotate this Map collections?">
<Answer><![CDATA[@Entity
    class User {
        @Id
        int id;
        @Basic
        Set<SharingIncident> shares;
        @Basic
        Set<FileEtiquette> myFiles;
         // ... fields waht You want
    }

@Entity
class FileEtiquette  {
    @Id
    int id;
    @Basic
    Set<SharingIncident> sharedBy;
    User author;
}

@Entity
class SharingIncident {
    @Id
    int id;
    User user;
    FileEtiquette  file;
    int level;
}]]></Answer>
<Answer><![CDATA[class User {
       @OneToMany
       @JoinTable(name = "USER_HAS__OWN_FILES", joinColumns = {
       @JoinColumn(name = "AUTHOR", referencedColumnName = "USERNAME")}, 
            inverseJoinColumns = {@JoinColumn(name = "OWN_FILE_ID", referencedColumnName = "ID") })
       List<File> ownFiles;

       @ElementCollection
       @CollectionTable(name = "USER_HAS_SHARED_FILES", joinColumns = 
       @JoinColumn(name = "USERNAME", referencedColumnName = "USERNAME"))
       @MapKeyJoinColumn(name = "SHARED_FILE_ID", referencedColumnName = "ID")
       @Column(name = "PERMISSION_LEVEL")
       Map<File, Integer> sharedFiles; 
}

class File {
       @ManyToOne
       @JoinColumn(name = "FILE_AUTHOR", referencedColumnName = "USERNAME")
       User author;

       @ElementCollection
       @CollectionTable(name = "FILE_HAS_BEEN_SHARED_TO_USER", 
           joinColumns = @JoinColumn(name = "FILE_ID", referencedColumnName = "ID"))
       @MapKeyJoinColumn(name = "USER_THAT_FILE_HAS_BEEN_SHARED_TO", referencedColumnName = "USERNAME")
       @Column(name = "PERMISSION_LEVEL")
       Map<User, Integer> sharedUsers;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45921259" questionTitle="How to filter out only the first element not matching a predicate in a Java sequential Stream?">
<Answer><![CDATA[class StatefulPredicate<T> implements Predicate<T> {

    private boolean alreadyFiltered;
    private Predicate<T> pred;

    public StatefulPredicate(Predicate<T> pred) {
        this.pred = pred;
        this.alreadyFiltered = false;
    }

    @Override
    public boolean test(T t) {
        if(alreadyFiltered) {
            return true;
        }

        boolean result = pred.test(t);
        alreadyFiltered = !result;
        return result;
    }
}

    Stream.of(1, -1, 3, -4, -5, 6)
        .filter(new StatefulPredicate<>(i -> i > 0))
        .forEach(System.out::println);]]></Answer>
<Answer><![CDATA[// create a dummy pear; size value does not matter as comparing by ref
final Pear dummy = new Pear(-1);
basket
   // mix basket with the dummy pear
   .concat(basket, Stream.of(dummy))
      // sort by type so pears go first, then by size
      .sorted(Comparator
          .<Fruit>comparingInt(
              // arrange the dummy to always be the last 
              // among other pears but before other types 
              f -> (f == dummy ? 
                 0 : 
                 (Pear.class.equals(f.getClass()) ? -1 : 1))
          )
          .thenComparing(f -> f.size)
      )
      // skip the smallest pear
      .skip(1)
      // filter out the dummy
      .filter(f -> f != dummy)
      // sort again the rest by size
      .sorted(Comparator.comparingInt(f -> f.size))
      // take 20 at max
      .limit(20);]]></Answer>
<Answer><![CDATA[private static <T> Collector<T, ?, List<T>> exceptCollector(Predicate<T> predicate, int size, Comparator<T> comparator) {

    class Acc {

        private TreeSet<T> matches = new TreeSet<>(comparator);

        private TreeSet<T> doesNot = new TreeSet<>(comparator);

        void accumulate(T t) {
            if (predicate.test(t)) {
                matches.add(t);
            } else {
                doesNot.add(t);
            }
        }

        Acc combine(Acc other) {

            matches.addAll(other.matches);
            doesNot.addAll(other.doesNot);

            return this;
        }

        List<T> finisher() {
            T smallest = matches.first();
            if (smallest != null) {
                matches.remove(smallest);
            }

            matches.addAll(doesNot);
            return matches.stream().limit(size).collect(Collectors.toList());
        }

    }
    return Collector.of(Acc::new, Acc::accumulate, Acc::combine, Acc::finisher);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45905481" questionTitle="Populate List from pojo in given order">
<Answer><![CDATA[import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;

final class ResultSet {
    private String field1;
    private String field2;
    private String field3;
    private String field4;

    public ResultSet(String field1, String field2, String field3, String field4) {
        this.field1 = field1;
        this.field2 = field2;
        this.field3 = field3;
        this.field4 = field4;
    }

    private static final Map<String, Function<ResultSet, Object>> mappings = new HashMap<String, Function<ResultSet, Object>>() {{
        put("field1", ResultSet::getField1);
        put("field2", ResultSet::getField2);
        put("field3", ResultSet::getField3);
        put("field4", ResultSet::getField4);
    }};

    public List<Object> populateResultList(List<String> list) {
        return list.stream()
                .map(fieldName -> mappings.getOrDefault(fieldName.toLowerCase(), it -> null).apply(this))
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

    public String getField1() {
        return field1;
    }

    public String getField2() {
        return field2;
    }

    public String getField3() {
        return field3;
    }

    public String getField4() {
        return field4;
    }

    public static void main(String[] args) {
        ResultSet resultSet = new ResultSet("lorem", "ipsum", "dolor", "sit amet");

        System.out.println(resultSet.populateResultList(Arrays.asList("Field1", "Field4", "Field3", "Field2", "Field9")));
    }
}]]></Answer>
<Answer><![CDATA[public class Main {
    private static Map<String, Method> getterMap;

    static {
        try {
            getterMap = Arrays.stream(Introspector.getBeanInfo(ResultSet.class).getPropertyDescriptors())
                    .filter(pd -> pd.getReadMethod() != null && !"class".equals(pd.getName()))
                    .collect(Collectors.toMap(pd -> pd.getName().toLowerCase(), PropertyDescriptor::getReadMethod));
        } catch (IntrospectionException e) {
            getterMap = Collections.emptyMap();
        }
    }

    public static void main(String[] args) {
        ResultSet resultSet = new ResultSet("lorem", "ipsum", "dolor", "sit amet");
        List<String> list = Arrays.asList("field1", "Field4", "Field3", "Field2", "field9");

        List<String> list1 = list.stream()
                .map(String::toLowerCase)
                .filter(getterMap::containsKey)
                .map(getterMap::get)
                .map(getter -> invokeGetter(getter, resultSet))
                .collect(Collectors.toList());

        System.out.println(list1);
    }

    private static String invokeGetter(Method getter, ResultSet rs) {
        try {
            return getter.invoke(rs).toString();
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException(e);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45877903" questionTitle="Efficient way to display different views/layouts/content with JavaFX">
<Answer><![CDATA[class Menu {
  private static final Pane paneMenu = new Pane();
  private static final Button btn1 = new Button("Menu 1");
  private static final Button btn2 = new Button("Menu 2");
  private static final Label firstLabel = new Label("You clicked Menu1");
  private static final Label secondLabel = new Label("You clicked Menu2");

  static Pane getPaneMenu() {
    ObservableList<Node> mainPaneChildren = Main.pane.getChildren();

    btn1.relocate(100, 10);
    btn1.setPrefSize(100, 20);
    btn1.setOnAction(e -> {
      firstLabel.relocate(200, 40);
      if (mainPaneChildren.contains(secondLabel)) {
        mainPaneChildren.remove(secondLabel);
      }
      if (!mainPaneChildren.contains(firstLabel)) {
        mainPaneChildren.add(firstLabel);
      }
    });


    btn2.relocate(300, 10);
    btn2.setPrefSize(100, 20);
    btn2.setOnAction(e -> {
      secondLabel.relocate(200, 40);
      if (mainPaneChildren.contains(firstLabel)) {
        mainPaneChildren.remove(firstLabel);
      }
      if (!mainPaneChildren.contains(secondLabel)) {
        mainPaneChildren.add(secondLabel);
      }
    });
    paneMenu.getChildren().addAll(btn1, btn2);

    return paneMenu;
  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Sample extends Application {

    @Override public void start(Stage stage) {

        BorderPane root = new BorderPane();        

        Button loadSceneOne = new Button("Load Scene One");
        //Event hanlder to load scene one
        loadSceneOne.setOnAction((event)->{
            root.setCenter(getSceneOne());
        });

        //Event hanlder to load scene two
        Button loadSceneTwo = new Button("Load Scene Two");
        loadSceneTwo.setOnAction((event)->{
            root.setCenter(getSceneTwo());
        });

        VBox menu = new VBox();
        menu.getChildren().addAll(loadSceneOne, loadSceneTwo);

        root.setLeft(menu);       

        Scene scene = new Scene(root);   
        stage.setMaximized(true);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    //Scene One
    Pane getSceneOne()
    {
        Pane pane = new Pane();

        Label label = new Label("Scene One!");
        StackPane stackPane = new StackPane();
        stackPane.getChildren().add(label);

        pane.getChildren().add(stackPane);

        return pane;
    }

    //Scene Two
    Pane getSceneTwo()
    {
        Pane pane = new Pane();

        Label label = new Label("Scene Two!");
        StackPane stackPane = new StackPane();
        stackPane.getChildren().add(label);

        pane.getChildren().add(stackPane);

        return pane;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45863687" questionTitle="javafx: Progress bar to show the progress of the process?">
<Answer><![CDATA[senderThreadlive = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                ProgressIndicator WaitingSend=new ProgressIndicator();
                                WaitingSend.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);
                                WaitingBox.getChildren().add(WaitingSend);//this is an HBOX
                                SendMailButton.setDisable(true);
                                SendMailButton.setText("sending in progress");

                              }
                        });
                       //call Your method of sending
 SimpleMail.EmailSender.sendEmail(MailSenderTxt.getText(), MotMailTxt.getText(), DestMailTxt.getText(), ObjetMailTxt.getText(), org.jsoup.Jsoup.parse(ContentMail.getHtmlText()).text());

                       Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                WaitingSend.setProgress(0);
                                WaitingSend.setVisible(false);
                                SendMailButton.setDisable(false);
                                SendMailButton.setText("Send");                                    
                            }
                        });

                    } catch (AuthenticationFailedException e) {

                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                               //Your popUp here 
                            }
                        });

                    } catch (SendFailedException e) {

                        Platform.runLater(new Runnable() {
                            @Override

                            public void run() {
                                //Your popUp here 
                            }
                        });

                    } catch (MessagingException e) {

                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                            //Your popUp here 

                            }
                        });

                    } catch (Exception ex) {

                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                    //Your popUp here 

                            }
                        });

                    }
                }
            });
            senderThreadlive.start();]]></Answer>
<Answer><![CDATA[Task<Parent> yourTaskName = new Task<Parent>() {
    @Override
    public Parent call() {
        // DO YOUR WORK

        //method to set progress
        updateProgress(workDone, max);

        //method to set labeltext
        updateMessage(message);
    }
};

//ProgressBar
ProgressBar pBar = new ProgressBar();
//Load Value from Task
pBar.progressProperty().bind(yourTaskName.progressProperty());
//New Loading Label
Label statusLabel = new Label();
//Get Text
statusLabel.setText("Loading...");
//Layout
VBox root = new VBox(statusLabel, pBar);
//SetFill Width TRUE
root.setFillWidth(true);
//Center Items
root.setAlignment(Pos.CENTER);

//SetOnSucceeded methode 
yourTaskName.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
        @Override
        public void handle(WorkerStateEvent event) {
            System.out.println("Finish");
        }
});

//Start Thread
Thread loadingThread = new Thread(yourTaskName);
loadingThread.start();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45831312" questionTitle="return multiple map&lt;string,string&gt; in java">
<Answer><![CDATA[import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardService {

    public CardDetailsDTO serviceCall(List<?> mapDetails) {

        CardDetailsDTO cardDetailsDTO = new CardDetailsDTO();
        final Map<String, String> debitCardDetailsMap = new HashMap<String, String>();
        final Map<String, String> creditCardDetailsMap = new HashMap<String, String>();


        /*code implementation */
        debitCardDetailsMap.put("type", "VISA");
        debitCardDetailsMap.put("bank", "BofA");
        debitCardDetailsMap.put("rank", "2");

        cardDetailsDTO.setDebitCardDetails(debitCardDetailsMap);

        creditCardDetailsMap.put("type", "VISA");
        creditCardDetailsMap.put("number","23345");
        creditCardDetailsMap.put("bank", "citi");

        cardDetailsDTO.setCreditCardDetails(creditCardDetailsMap);

        return cardDetailsDTO;
    }
}]]></Answer>
<Answer><![CDATA[public Map<CardType, List<Card>> populateData (){
    Map<CardType, List<Card>> cardMap = new HashMap<CardType, List<Card>>();

    List<Card> debitCards = new LinkedList<Card>();
    debitCards.add(new DebitCard("Visa", "Bofa", "2"));
    cardMap.put(CardType.DEBIT_CARD, debitCards);

    List<Card> creditCards = new LinkedList<Card>();
    creditCards.add(new CreditCard("Visa", "23345", "citi"));
    cardMap.put(CardType.CREDIT_CARD, creditCards);

    return cardMap;
}

public void handleData (Map<CardType, List<Card>> cardMap) {
    if (cardMap.get(CardType.CREDIT_CARD) != 0 && cardMap.get(CardType.CREDIT_CARD).size() > 0)) {
          // do something for credit cards list
    } else if (cardMap.get(CardType.CREDIT_CARD) != 0 && cardMap.get(CardType.DEBIT_CARD).size() > 0)) {
          // do something for debit cards list
    } // have as many else as enum types
}]]></Answer>
<Answer><![CDATA[public Map<String, Map<String, String>> populateMaps() {
    //instantiate the maps
    Map<String, Map<String, String>> map = new HashMap<>();
    final Map<String, String> debitCardDetailsMap = new HashMap<>();
    final Map<String, String> creditCardDetailsMap = new HashMap<>();

    //populate the core maps
    debitCardDetailsMap.put("type", "VISA");
    debitCardDetailsMap.put("bank", "BofA");
    debitCardDetailsMap.put("rank", "2");

    creditCardDetailsMap.put("type", "VISA");
    creditCardDetailsMap.put("number","23345");
    creditCardDetailsMap.put("bank", "citi");

    //populate the main map
    map.put(debitCardDetailsMap);
    map.put(creditCardDetailsMap);

    return map;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45817262" questionTitle="Java 8: How to turn a list into a list of lists using lambda">
<Answer><![CDATA[BiFunction<List,Integer,List> splitter= (list2, count)->{
            //temporary list of lists
            List<List> listOfLists=new ArrayList<>();

            //helper implicit recursive function
            BiConsumer<Integer,BiConsumer> splitterHelper = (offset, func) -> {
                if(list2.size()> offset+count){
                    listOfLists.add(list2.subList(offset,offset+count));

                    //implicit self call
                    func.accept(offset+count,func);
                }
                else if(list2.size()>offset){
                    listOfLists.add(list2.subList(offset,list2.size()));

                    //implicit self call
                    func.accept(offset+count,func);
                }
            };

            //pass self reference
            splitterHelper.accept(0,splitterHelper);

            return listOfLists;
        };]]></Answer>
<Answer><![CDATA[public class PartitionedList<T> extends AbstractList<List<T>> {

    private final List<T> source;
    private final int sublistSize;

    public PartitionedList(T source, int sublistSize) {
       this.source = source;
       this.sublistSize = sublistSize;
    }

    @Override
    public int size() {
       return source.size() / sublistSize;
    }

    @Override
    public List<T> get(int index) {
       int sourceIndex = index * sublistSize
       return source.subList(sourceIndex, 
                             Math.min(sourceIndex + sublistSize, source.size());
    }
}]]></Answer>
<Answer><![CDATA[static <T> List<List<T>> listSplitter(List<T> incoming, int size) {
    // add validation if needed
    return incoming.stream()
            .collect(Collector.of(
                    ArrayList::new,
                    (accumulator, item) -> {
                        if(accumulator.isEmpty()) {
                            accumulator.add(new ArrayList<>(singletonList(item)));
                        } else {
                            List<T> last = accumulator.get(accumulator.size() - 1);
                            if(last.size() == size) {
                                accumulator.add(new ArrayList<>(singletonList(item)));
                            } else {
                                last.add(item);
                            }
                        }
                    },
                    (li1, li2) -> {
                        li1.addAll(li2);
                        return li1;
                    }
            ));
}

    System.out.println(
            listSplitter(
                    Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                    4
            )
    );]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45726500" questionTitle="JavaFX: How do I bind a Button property to a thread status?">
<Answer><![CDATA[public class MainApp {

    private final Service<Void> testService = new Service<Void>() {
        @Override
        protected Task<Void> createTask() {
            return new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    // code to execute on background thread here:
                    while (! isCancelled() ) {
                        // ...
                    }
                }
            }
        }
    };

    public Service<Void> getTestService() {
        return testService();
    }

    // ...
}]]></Answer>
<Answer><![CDATA[Button StartButton=new Button("Start");
        Thread TestThread=new Thread(new Runnable(){
           @Override
           public void run()
             {
              Platform.runLater(new Runnable(){
           @Override
           public void run()
             {

             StartButton.setText("Pause");    


             }
             while(true)
            {
              }


            }
         );
        StartButton.addEventHandler(event->{
             if(StartButton.getText().equals("Start"))
             {
              StartThread.start();
             }else{
             StartThread.interrupt();  
              }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45706153" questionTitle="how to get multi properties's mean values using java8 stream?">
<Answer><![CDATA[Map<String, List<Float>> result = Arrays.asList(first, second)
            .stream()
            .collect(Collectors.groupingBy(
                    x -> x.getScoreInfoP().getAnchorId(), 
                    Collector.of(
                            () -> new float[5],
                            (a, x) -> {
                                a[0] += x.getCoveScore();
                                a[1] += x.getTheamScore();
                                a[2] += x.getTeachScore();
                                a[3] += x.getContentScore();
                                a[4]++;
                            },

                            (left, right) -> {
                                for (int i = 0; i < 4; ++i) {
                                    left[i] += right[i];
                                }

                                return left;
                            }, x -> Arrays.asList(x[0] / x[4], x[1] / x[4], x[2] / x[4], x[3] / x[4]))

    ));

    System.out.println(result);]]></Answer>
<Answer><![CDATA[public static Collector<ScoreInfo, ?, ScoreInfoAverage> scoreInfoToAverage() {
  class ScoreInfoAccumulator {
    private DoubleSummaryStatistics cove_score = new DoubleSummaryStatistics();
    private DoubleSummaryStatistics theam_score = new DoubleSummaryStatistics();
    private DoubleSummaryStatistics content_score = new DoubleSummaryStatistics();
    private DoubleSummaryStatistics teach_score = new DoubleSummaryStatistics();

    public void add(ScoreInfo si) {
      cove_score.accept(si.cove_score);
      theam_score.accept(si.theam_score);
      content_score.accept(si.content_score);
      teach_score.accept(si.teach_score);
    }

    public ScoreInfoAccumulator combine(ScoreInfoAccumulator sia) {
      cove_score.combine(sia.cove_score);
      theam_score.combine(sia.theam_score);
      content_score.combine(sia.content_score);
      teach_score.combine(sia.teach_score);
      return this;
    }

    public ScoreInfoAverage average() {
      return new ScoreInfoAverage((float) cove_score.getAverage(), 
        (float) theam_score.getAverage(), (float) content_score.getAverage(), 
        (float) teach_score.getAverage());
    }
  }
  return Collector.of(ScoreInfoAccumulator::new, ScoreInfoAccumulator::add, 
        ScoreInfoAccumulator::combine, ScoreInfoAccumulator::average);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45547829" questionTitle="Creating a &quot;default constructor&quot; for inner sub-interfaces">
<Answer><![CDATA[final class RunnableRetryableImpl
extends    AbstractRetryable<Void, Void>
implements RunnableRetryable {
    private final CheckedRunnable runnable;
    RunnableRetryableImpl(Consumer<Exception> retrying,
                          Consumer<Exception> skipping,
                          int                 trials,
                          CheckedRunnable     runnable) {
        super(retrying, skipping, trials);
        this.runnable = Objects.requireNonNull(runnable, "runnable");
    }
    @Override
    public Void apply(Void ignored) {
        try {
            runnable.tryRun();
        } catch (Exception x) {
            // BTW I would consider doing this.
            if (x instanceof RuntimeException)
                throw (RuntimeException) x;
            // I would also probably write a class like:
            // class RethrownException extends RuntimeException {
            //     RethrownException(Exception cause) {
            //         super(cause);
            //     }
            // }
            // This way the caller can catch a specific type if
            // they want to.
            // (See e.g. java.io.UncheckedIOException)
            throw new RuntimeException(x);
        }
        return null;
    }
}]]></Answer>
<Answer><![CDATA[public interface Retryable<T, R> extends Function<T, R>{
    void retrying(Exception e);
    void skipping(Exception e);
    int trials();
    @Override default R apply(T t) {
        try { return action(t); }
        catch(Exception e) {
            for(int trial = 1; trial < trials(); trial++) {
                retrying(e);
                try { return action(t); } catch (Exception next) { e=next; }
            }
            skipping(e);
            return null;
        }
    }

    R action(T input) throws Exception;

    public static Retryable<Void, Void> of(Consumer<Exception> retrying,
            Consumer<Exception> skipping, int trials, CheckedRunnable runnable) {
        return of(retrying, skipping, trials, x -> { runnable.tryRun(); return null; });
    }

    @FunctionalInterface interface CheckedRunnable extends Runnable {
        void tryRun() throws Exception;
        @Override default void run() {
            try { tryRun(); } catch (Exception e) { throw new RuntimeException(e); }
        }
    }

    public static <T> Retryable<T, Void> of(Consumer<Exception> retrying,
            Consumer<Exception> skipping, int trials, CheckedConsumer<T> consumer) {
        return of(retrying, skipping, trials,
                  value -> { consumer.tryAccept(value); return null; });
    }

    @FunctionalInterface interface CheckedConsumer<T> extends Consumer<T> {
        void tryAccept(T t) throws Exception;
        @Override default void accept(T t) {
            try { tryAccept(t); } catch (Exception e) { throw new RuntimeException(e); }
        }
    }

    public static <T> Retryable<Void, T> of(Consumer<Exception> retrying,
            Consumer<Exception> skipping, int trials, CheckedSupplier<T> supplier) {
        return of(retrying, skipping, trials, voidArg -> { return supplier.tryGet(); });
    }

    @FunctionalInterface interface CheckedSupplier<T> extends Supplier<T> {
        T tryGet() throws Exception;
        @Override default T get() {
            try { return tryGet(); }
            catch (Exception e) { throw new RuntimeException(e); }
        }
    }

    public static <T, R> Retryable<T, R> of(Consumer<Exception> retrying,
            Consumer<Exception> skipping, int trials, CheckedFunction<T, R> function) {
        return new Retryable<T, R>() {
            @Override public void retrying(Exception e) { retrying.accept(e); }
            @Override public void skipping(Exception e) { skipping.accept(e); }
            @Override public int trials() { return trials; }
            @Override public R action(T t) throws Exception {
                return function.tryApply(t);
            }
        };
    }

    @FunctionalInterface interface CheckedFunction<T, R> extends Function<T, R> {
        R tryApply(T t) throws Exception;
        @Override default R apply(T t) {
            try { return tryApply(t); }
            catch (Exception e) { throw new RuntimeException(e); }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45525181" questionTitle="How to refer to actual clicked button in event handler in java fx?">
<Answer><![CDATA[package sample;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;

public class Main extends Application {

@Override
public void start(Stage primaryStage) throws Exception{

    primaryStage.setTitle("Hello World");
    GridPane root = new GridPane();
    primaryStage.setScene(new Scene(root, 1000, 600));
    MyButton[][] buttonArray = new MyButton[10][10];
    HBox[] hboxArray = new HBox[10];


    for(int i=0;i<10;i++)
    {
        hboxArray[i]=new HBox();
        for(int j=0;j<10;j++)
        {
            MyButton button =new MyButton(i,j);
            button.setMinSize(100,50);
            buttonArray[i][j]=button;
            button.setOnAction(new EventHandler<ActionEvent>() {
                @Override public void handle(ActionEvent e) {
                    button.setText("button"+button.getH()+","+button.getV());
                    //where getH is get horizontal and getV is get vertical
                    button.setDisable(true);
                }
            });
            hboxArray[i].getChildren().add(buttonArray[i][j]);
        }
    }

    for(int i=0;i<10;i++)
    {
        root.add(hboxArray[i],1,i);
    }

    primaryStage.show();
}


public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

/**
 *
 * @author Sedrick
 */
public class JavaFXApplication extends Application {

    @Override
    public void start(Stage primaryStage) {
        Button [][] buttonContainer = new Button[3][3];

        VBox vbox = new VBox();

        for(int i = 0; i < 3; i++)
        {
            for(int t = 0; t < 3; t++)
            {
                Button button = new Button();
                button.setText("button" +  i + " : " + t);
                //Create event handler
                button.setOnAction((event)->{
                    button.setText("Hello World!");
                });
                buttonContainer[i][t] = button;//Add the current button to the Button 2D array
                vbox.getChildren().add(buttonContainer[i][t]);//Add current button to the VBox
            }
        }

        StackPane root = new StackPane();
        root.getChildren().add(vbox);

        Scene scene = new Scene(root, 500, 500);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45495758" questionTitle="Detect Hyperlink hover in WebView and print the link">
<Answer><![CDATA[import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.html.HTMLIFrameElement;
import org.w3c.dom.Element;
import javafx.application.Application;
import javafx.concurrent.Worker;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class getWeblinksInCorner extends Application {

    EventListener mouseOverEventListener;
    EventListener mouseOutEventListener;

    @Override
    public void start(final Stage stage) {
        final WebView browser = new WebView();
        Label textField = new Label();

        final WebEngine webEngine = browser.getEngine();

        textField.setVisible(false);

        webEngine.getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == Worker.State.SUCCEEDED) {

                mouseOverEventListener = new EventListener() {
                    @Override
                    public void handleEvent(Event ev) {
                        String href = getNextHref((Element) ev.getTarget());
                        if (href != null && !href.isEmpty()) {
                            if (href.startsWith("/")) {
                                href = ((Element) ev.getTarget()).getBaseURI() + href;
                            }
                            textField.setText(href + "   ");
                            textField.setPrefHeight(22);
                            textField.setMaxWidth(650);
                            textField.setStyle("-fx-border-color: #C6C6C7; -fx-background-color: #F2F2F2;");
                            textField.setVisible(true);
                        }
                    }

                    private String getNextHref(Element target) {
                        while (target.getAttribute("href") == null) {
                            if (target.toString().contains("HTMLHtmlElement")) {
                                return "";
                            }
                            target = (Element) target.getParentNode();
                            if (target == null) {
                                return "";
                            }
                        }
                        return target.getAttribute("href");
                    }
                };

                mouseOutEventListener = new EventListener() {

                    @Override
                    public void handleEvent(Event ev) {
                        textField.setVisible(false);
                    }
                };

                Document document = webEngine.getDocument();
                addListener(document.getElementsByTagName("*"));
            }
        });

        String content = "http://java2s.com";
        webEngine.load(content);

        TextField tf = new TextField();
        tf.textProperty().bind(webEngine.locationProperty());
        BorderPane pane = new BorderPane();

        AnchorPane ap = new AnchorPane(browser, textField);
        AnchorPane.setBottomAnchor(browser, 0.0);
        AnchorPane.setLeftAnchor(browser, 0.0);
        AnchorPane.setTopAnchor(browser, 0.0);
        AnchorPane.setRightAnchor(browser, 0.0);
        AnchorPane.setBottomAnchor(textField, 0.0);
        AnchorPane.setLeftAnchor(textField, 0.0);
        pane.setCenter(ap);
        pane.setTop(tf);

        Scene scene = new Scene(pane);
        stage.setScene(scene);
        stage.show();
    }

    private void addListener(NodeList nodeList) {
        for (int i = 0; i < nodeList.getLength(); i++) {
            try {
                HTMLIFrameElement iFrame = ((HTMLIFrameElement) nodeList.item(i));
                addListener(iFrame.getContentDocument().getElementsByTagName("*"));
            } catch (Exception e) {
                Element el = (Element) nodeList.item(i);
                while (!el.toString().contains("HTMLHtmlElement")) {
                    el = (Element) el.getParentNode();
                    ((EventTarget) el).removeEventListener("mouseover", mouseOverEventListener, false);
                    ((EventTarget) el).removeEventListener("mouseout", mouseOutEventListener, false);
                }
                ((EventTarget) nodeList.item(i)).addEventListener("mouseover", mouseOverEventListener, false);
                ((EventTarget) nodeList.item(i)).addEventListener("mouseout", mouseOutEventListener, false);
            }
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

  @Override
  public void start(final Stage stage) {
    Scene scene = new Scene(new Group());

    final WebView browser = new WebView();
    final WebEngine webEngine = browser.getEngine();

    ScrollPane scrollPane = new ScrollPane();
    scrollPane.setContent(browser);

    TextField textField = new TextField();
    textField.setVisible(false);
    textField.setEditable(false);

    webEngine.getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -> {
      if (newValue == Worker.State.SUCCEEDED) {

        EventListener mouseOverEventListener = new EventListener() {
          @Override
          public void handleEvent(Event ev) {
            String href = ((Element) ev.getTarget()).getAttribute("href");
            textField.setText(href);
            textField.setVisible(true);
            textField.setPrefWidth(textField.getText().length() * 6); //
            System.out.println(href);
          }
        };

        EventListener mouseOutEventListener = new EventListener() {
          @Override
          public void handleEvent(Event ev) {
            textField.setVisible(false);
          }
        };

        Document document = webEngine.getDocument();
        NodeList nodeList = document.getElementsByTagName("a");
        for (int i = 0 ; i < nodeList.getLength() ; i++) {
          ((EventTarget) nodeList.item(i)).addEventListener("mouseover",mouseOverEventListener,false);
          ((EventTarget) nodeList.item(i)).addEventListener("mouseout",mouseOutEventListener,false);
        }
      }
    });

    String content = "http://java2s.com";
    webEngine.load(content);

    AnchorPane anchorPane = new AnchorPane();
    anchorPane.getChildren().add(scrollPane);
    anchorPane.getChildren().add(textField);
    AnchorPane.setBottomAnchor(textField, 0.0);
    AnchorPane.setLeftAnchor(textField, 0.0);

    scene.setRoot(anchorPane);
    stage.setScene(scene);
    stage.show();
  }

  public static void main(String[] args) {
    launch(args);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45483472" questionTitle="Binding to a ObservableValue&lt;ObservableList&gt; instead of an ObservableList with EasyBind">
<Answer><![CDATA[package mcve.javafx;

import java.util.List;
import java.util.stream.Collectors;

import org.fxmisc.easybind.EasyBind;
import org.fxmisc.easybind.monadic.MonadicBinding;

import javafx.application.Application;
import javafx.beans.Observable;
import javafx.beans.binding.Binding;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ListProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TitledPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    private CheckBox checkShowMore;

    @Override
    public void start(Stage primaryStage) {
        try {


            // Initialize model
            MasterDetailModel mdModel = new MasterDetailModel();
            ObservableList<ModelItem> itemsList = FXCollections.observableArrayList();
            for (int i=0;i<5;i++) { itemsList.add(newModelItem(i)); }

            MonadicBinding<ModelItem> selectedItemBinding = EasyBind.monadic(mdModel.selectedItemProperty()).orElse(new ModelItem());

            // Master
            ListView<ModelItem> listView = new ListView<ModelItem>();
            listView.setItems(itemsList);
            listView.setPrefHeight(150);
            mdModel.selectedItemProperty().bind(listView.getSelectionModel().selectedItemProperty());

            //Detail
            checkShowMore = new CheckBox();
            checkShowMore.setText("Show more details");
            VBox detailVBox = new VBox();           
            Label apiLabel = new Label();
            Label labelPlayground = new Label();
            detailVBox.getChildren().addAll(
                    checkShowMore, 
                    new TitledPane("API Binding", apiLabel), 
                    new TitledPane("EasyBind", labelPlayground)
            );


            // Scene
            Scene scene = new Scene(new VBox(listView, detailVBox),400,400);
            primaryStage.setScene(scene);
            primaryStage.setTitle("JavaFX/EasyBind MVCE");

            // --------------------------
            // -------- BINDINGS --------
            // --------------------------

            // API Label Binding

            apiLabel.textProperty().bind(Bindings.createStringBinding( 
                () -> selectedItemBinding.getValue().getDetails().stream()
                    .map(i -> derivedBinding(i.aProperty(), i.bProperty()))
                    .map(v->v.getValue())
                    .collect(Collectors.joining(", "))
                , mdModel.selectedItemProperty(), checkShowMore.selectedProperty()));

            // EasyBind non-working attempt
            /*
            ListProperty<ModelItemDetail> obsList = new SimpleListProperty<>(FXCollections.observableArrayList(i->new Observable[] { i.aProperty(), i.bProperty(), checkShowMore.selectedProperty()}));
            obsList.bind(selectedItemBinding.flatMap(ModelItem::detailsProperty));
            ObservableList<ModelItemDetail> ebDetailList = obsList; // WHY ??
            ObservableList<ObservableValue<String>> ebDerivedList = EasyBind.map(ebDetailList, i -> derivedBinding(i.aProperty(), i.bProperty()));
            ObservableValue<String> ebDerivedValueBinding = EasyBind.combine(ebDerivedList, stream -> stream.collect(Collectors.joining(", "))).orElse("Nothing to see here, move on");
            labelPlayground.textProperty().bind(ebDerivedValueBinding);
            */

            // Working EasyBind Binding
            labelPlayground.textProperty().bind(
                    selectedItemBinding
                    .flatMap(ModelItem::detailsProperty)
                    .map(l -> derivedBinding(l))
                    .flatMap(l -> EasyBind.combine(l, stream -> stream.collect(Collectors.joining(", "))))
                    );

            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private ObservableList<ObservableValue<String>> derivedBinding(ObservableList<ModelItemDetail> l) { 
        return l.stream()
                .map(c -> derivedBinding(c.aProperty(), c.bProperty()))
                .collect(Collectors.toCollection(FXCollections::observableArrayList));
    }

    private Binding<String> derivedBinding(ObservableValue<String> someA, ObservableValue<String> someB ) { 
        return EasyBind.combine(someA, someB, checkShowMore.selectedProperty(), 
                        (a, e, s) -> a + (Boolean.TRUE.equals(s) ? " <" + e + ">" : ""));
    }

    private ModelItem newModelItem(int number) { 
        ModelItem item = new ModelItem();
        item.itemNumber = number+1;
        for (int i=0;i<2;i++) { 
            ModelItemDetail detail = new ModelItemDetail("A" + (i+item.itemNumber), "B" + (i+item.itemNumber));
            item.getDetails().add(detail);
        }
        return item;
    }

    /** GUI Model class */ 
    private static class MasterDetailModel {
        private ObjectProperty<ModelItem> selectedItemProperty = new SimpleObjectProperty<>();
        public ObjectProperty<ModelItem> selectedItemProperty() { return selectedItemProperty; }
        public ModelItem getSelectedItem() { return selectedItemProperty.getValue(); }
        public void setSelectedItem(ModelItem item) { selectedItemProperty.setValue(item); }
    }

    /** Domain Model class */
    private static class ModelItem { 
        int itemNumber;
        private ListProperty<ModelItemDetail> detailsProperty = new SimpleListProperty<>(FXCollections.observableArrayList());
        public ListProperty<ModelItemDetail> detailsProperty() { return detailsProperty; }
        public ObservableList<ModelItemDetail> getDetails() { return detailsProperty.getValue(); }
        public void setDetails(List<ModelItemDetail> details) { detailsProperty.setValue(FXCollections.observableList(details)); }
        public String toString() { return "Item " + itemNumber; }
    }

    /** Domain Model class */
    private static class ModelItemDetail {

        public ModelItemDetail(String a, String b) { 
            setA(a);
            setB(b);
        }

        private StringProperty aProperty = new SimpleStringProperty();
        public StringProperty aProperty() { return aProperty; }
        public String getA() { return aProperty.get(); }
        public void setA(String a) { aProperty.set(a); }

        private StringProperty bProperty = new SimpleStringProperty();
        public StringProperty bProperty() { return bProperty; }
        public String getB() { return bProperty.get(); }
        public void setB(String b) { bProperty.set(b); }
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    public Main() {}

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        // Mock initial data
        ModelItem item = new ModelItem();
        ModelItemDetail mid1 = new ModelItemDetail();
        mid1.setA("a1");
        mid1.setB("b1");
        ModelItemDetail mid2 = new ModelItemDetail();
        mid2.setA("a2");
        mid2.setB("b2");
        ModelItemDetail mid3 = new ModelItemDetail();
        mid3.setA("a3");
        mid3.setB("b3");
        ObservableList<ModelItemDetail> details = item.getDetails();
        details.add(mid1);
        details.add(mid2);
        details.add(mid3);

        // Create binding

        CheckBox showB = new CheckBox("Show b");
        Label label = new Label();

        label.textProperty().bind(Bindings.createStringBinding(() -> {
            return details.stream()
                .map(mid ->
                    Boolean.TRUE.equals(showB.isSelected()) ? new String(mid.getA() + " <" + mid.getB() + ">") : mid.getA()
                ).collect(Collectors.joining(", "));
        }, details, showB.selectedProperty()));

        // Create testing components

        Button add = new Button("Add item detail");
        add.setOnAction(e -> {
            Random r = new Random();
            int i = r.nextInt(100) + 3;
            ModelItemDetail mid = new ModelItemDetail();
            mid.setA("a" + i);
            mid.setB("b" + i);
            details.add(mid);
        });
        Button changeA = new Button("Change some A");
        changeA.setOnAction(e -> {
            Random r = new Random();
            ModelItemDetail detail = details.get(r.nextInt(details.size()));
            detail.setA("a" + r.nextInt(100) + 3);
        });

        // Display everything

        BorderPane pane = new BorderPane();
        ListView<ModelItem> list = new ListView<>();
        list.getItems().add(item);
        pane.setCenter(list);
        pane.setRight(new VBox(add, changeA));
        pane.setTop(showB);
        pane.setBottom(label);
        stage.setScene(new Scene(pane));
        stage.show();
    }

    private static class ModelItem {
        int itemNumber;
        private ObservableList<ModelItemDetail> detailsProperty = FXCollections.observableArrayList(i -> new Observable[]{i.aProperty(), i.bProperty()});
        public ObservableList<ModelItemDetail> getDetails() { return detailsProperty; }
        @Override public String toString() { return "Item " + itemNumber; }
    }

    /** Domain Model class */
    private static class ModelItemDetail {
        private StringProperty aProperty = new SimpleStringProperty();
        public StringProperty aProperty() { return aProperty; }
        public String getA() { return aProperty.get(); }
        public void setA(String a) { aProperty.set(a); }

        private StringProperty bProperty = new SimpleStringProperty();
        public StringProperty bProperty() { return bProperty; }
        public String getB() { return bProperty.get(); }
        public void setB(String b) { bProperty.set(b); }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45481894" questionTitle="Not getting any response while using JavaMail API">
<Answer><![CDATA[SimpleSMTPHeader header;
    AuthenticatingSMTPClient client;
    server = "smtp.gmail.com";

    client = new AuthenticatingSMTPClient();
    client.addProtocolCommandListener(new PrintCommandListener(
                                          new PrintWriter(System.out), true));

    client.connect(server, 587);
    client.ehlo( client.getLocalAddress().getHostName() );
    client.execTLS();

    if (!SMTPReply.isPositiveCompletion(client.getReplyCode()))
    {
        client.disconnect();
        System.err.println("SMTP server refused connection.");
        System.exit(1);
    }

    client.auth(AuthenticatingSMTPClient.AUTH_METHOD.LOGIN,  "gmail-email@gmail.com", "password");


    sender = "sender@email.com";
    subject = "A subject";

    BufferedReader reader = new BufferedReader( new FileReader( "html/DocumentReport.html") );
    client.mail("<email@email.com>");
    String receipient = "recipient@email.com;

    client.addRecipient(receipient);

    writer = client.sendMessageData();

    header = new SimpleSMTPHeader(sender, receipient, subject);
    header.addHeaderField("Mime-Version", "1.0");
    header.addHeaderField("Content-Type", "text/html; charset=\"ISO-8859-1\"");
    header.addHeaderField("Content-Transfer-Encoding", "7bit");


    writer.write(header.toString());
    try {
        Util.copyReader(reader, writer);
    } finally {
        reader.close();             
    }

    writer.close();

    boolean completed = client.completePendingCommand();

    client.logout();

    client.disconnect();]]></Answer>
<Answer><![CDATA[Properties props= System.getProperties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.auth", "true");

    props.put("mail.smtp.ssl.enable", "true");

    Authenticator authenticate= new Authenticator(){
            protected PasswordAuthentication getPasswordAuthentication(){
            return new PasswordAuthentication(username, password);
            }
            };
    @SuppressWarnings("deprecation")
    Session mailSession= Session.getInstance(props, authenticate);
    mailSession.setDebug(true);


    Message mailMessage= new MimeMessage(mailSession);


    try {
        mailMessage.setFrom(new InternetAddress(mailFrom));
        mailMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(mailTo));
        mailMessage.setSubject(subject);
        mailMessage.setText(msg);

        Transport trans= mailSession.getTransport("smtp");
        trans.connect("smtp.gmail.com", username, password);
        Transport.send(mailMessage);

    } catch (Exception ex) {
        Logger.getLogger(MailSender.class.getName()).log(Level.SEVERE, null, ex);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45360153" questionTitle="Java 8 Grouping by Multiple Fields into Single Map">
<Answer><![CDATA[Map<String, List<Integer>> result = foos.stream().collect(Collector.of(
    HashMap::new,
    ( map, foo ) -> {
        map.compute(foo.a + "_" + foo.b + "_" + foo.c, (key,list) -> {
            if(list == null){
                list = new ArrayList<>();
            }
            list.add(foo.d);
            return list;
        });
    },
    ( map1, map2 ) -> {
        map2.forEach(( k, v ) -> {
            map1.compute(k, (key, list) -> {
                if(list == null){
                    list = v;
                } else {
                    list.addAll(v);
                }
                return list;
            });
       });
       return map1;
    }
));]]></Answer>
<Answer><![CDATA[import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FooMain {

    public static void main(String[] args) {
        final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy");

        final List<Foo> foos = Arrays.asList(
                new Foo("Test", "Test", LocalDate.parse("10/02/2015", dateFormat), 5),
                new Foo("Test", "Test", LocalDate.parse("10/02/2015", dateFormat), 4),
                new Foo("Test", "Test", LocalDate.parse("10/02/2015", dateFormat), 3),
                new Foo("Test", "Test", LocalDate.parse("02/02/2015", dateFormat), 5),
                new Foo("Test", "Potato", LocalDate.parse("02/02/2015", dateFormat), 5)
        );

        List<FooResult> result = foos.stream()
                .collect(Collectors.groupingBy(foo -> new MapKey(foo.a, foo.b, foo.c), Collectors.mapping(Foo::getD, Collectors.toList())))
                .entrySet()
                .stream()
                .map(entry -> new FooResult(entry.getKey().a, entry.getKey().b, entry.getKey().c, entry.getValue()))
                .collect(Collectors.toList());

        result.forEach(System.out::println);
    }

    public static final class Foo {
        private final String a;
        private final String b;
        private final LocalDate c;
        private final int d;

        Foo(String a, String b, LocalDate c, int d) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
        }

        int getD() {
            return d;
        }
    }

    public static final class FooResult {
        private final String a;
        private final String b;
        private final LocalDate c;
        private final List<Integer> d;

        FooResult(String a, String b, LocalDate c, List<Integer> d) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
        }

        @Override
        public String toString() {
            return "FooResult{" +
                    "a='" + a + '\'' +
                    ", b='" + b + '\'' +
                    ", c=" + c +
                    ", d=" + d +
                    '}';
        }
    }

    public static final class MapKey {
        private final String a;
        private final String b;
        private final LocalDate c;

        MapKey(String a, String b, LocalDate c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof MapKey)) return false;

            MapKey mapKey = (MapKey) o;

            if (a != null ? !a.equals(mapKey.a) : mapKey.a != null) return false;
            if (b != null ? !b.equals(mapKey.b) : mapKey.b != null) return false;
            return c != null ? c.equals(mapKey.c) : mapKey.c == null;
        }

        @Override
        public int hashCode() {
            int result = a != null ? a.hashCode() : 0;
            result = 31 * result + (b != null ? b.hashCode() : 0);
            result = 31 * result + (c != null ? c.hashCode() : 0);
            return result;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45321012" questionTitle="Compact a comma delimited number list into ranges">
<Answer><![CDATA[static Stream<String> compress(List<Integer> numbers, int step, int minSize) {
    return compress(numbers, minSize, (prev, current) -> current - prev <= step);
}


static Stream<String> compress(List<Integer> numbers,
                               int minSize,
                               IntBiPredicate rule) {
    return StreamSupport.stream(spliterator(numbers, minSize, rule), false);
}


static AbstractSpliterator<String> spliterator(List<Integer> numbers,
                                               int minSize,
                                               IntBiPredicate rule) {
    return new AbstractSpliterator<String>(numbers.size(), ORDERED) {
        private Iterator<Integer> data;
        private Queue<String> queue;
        private IntBuffer buff;


        @Override
        public boolean tryAdvance(Consumer<? super String> action) {
            init();
            return tryConsuming(action) || evaluate();
        }

        private void init() {
            if (data != null) return;
            data = numbers.iterator();
            queue = new LinkedList<>();
            buff = IntBuffer.allocate(minSize + 1);
        }

        private boolean tryConsuming(Consumer<? super String> action) {
            if (queue.isEmpty()) return false;
            action.accept(queue.poll());
            return true;
        }

        private boolean evaluate() {
            if (!data.hasNext()) {
                return buff.position() > 0 && fill();
            } else {
                evaluateNext(data.next());
                return true;
            }
        }

        private void evaluateNext(int it) {
            int prev = buff.position() - 1;
            if (prev >= 0 && !rule.test(buff.get(prev), it)) {
                fill();
                buff.put(it);
            } else {
                if (!buff.hasRemaining()) {
                    buff.put(buff.position() - 1, it);
                } else {
                    buff.put(it);
                }
            }
        }

        private boolean fill() {
            buff.flip();
            if (buff.limit() >= minSize) {
                int min = buff.get(0);
                int max = buff.get(buff.limit() - 1);
                queue.add(format("%d-%d", min, max));
            } else {
                while (buff.hasRemaining()) {
                    queue.add(Integer.toString(buff.get()));
                }
            }
            buff.clear();
            return true;
        }
    };
}

interface IntBiPredicate {
    boolean test(int first, int second);
}]]></Answer>
<Answer><![CDATA[import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class CompactComaDelimitedNumbersTest {

    @Test
    public void testCompactingNumbersWithJavaStream() {
        //given:
        final List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 12, 13, 14, 19);

        //when:
        final List<Object> finalResult = list.stream()
                // Firstly let's pair every number with a number it starts from in
                // given sequence
                .reduce(new ArrayList<Pair<Integer, Integer>>(), (result, number) -> {
                    if (result.isEmpty()) {
                        result.add(new Pair<>(number, number));
                        return result;
                    }

                    final Pair<Integer, Integer> previous = result.get(result.size() - 1);
                    if (previous.getFirst() + 1 == number) {
                        result.add(new Pair<>(number, previous.getSecond()));
                    } else {
                        result.add(new Pair<>(number, number));
                    }
                    return result;
                }, (a, b) -> a)
                // Now let's group list of pair into a Map where key is a number 'from' and value is a list of values
                // in given sequence starting from 'from' number
                .stream()
                .collect(Collectors.groupingBy(Pair::getSecond, Collectors.mapping(Pair::getFirst, Collectors.toList())))
                // Finally let's sort entry set and convert into expected format
                .entrySet()
                .stream()
                .sorted(Comparator.comparing(Map.Entry::getKey))
                .map(e -> e.getValue().size() < 3 ?
                        e.getValue() :
                        Collections.singletonList(String.format("%d-%d", e.getValue().get(0), e.getValue().get(e.getValue().size() - 1))))
                .flatMap(Collection::stream)
                .collect(Collectors.toList());

        //then:
        assertThat(finalResult, is(equalTo(Arrays.asList("1-5", "12-14", 19))));

    }

    static final class Pair<T,K> {
        private final T first;
        private final K second;
        Pair(T first, K second) {
            this.first = first;
            this.second = second;
        }
        public T getFirst() {
            return first;
        }

        public K getSecond() {
            return second;
        }

        @Override
        public String toString() {
            return "Pair{" +
                    "first=" + first +
                    ", second=" + second +
                    '}';
        }
    }
}]]></Answer>
<Answer><![CDATA[List<String> result = IntStream.of(1, 2, 3, 4, 5, 12, 13, 14, 19)
            .boxed()
            .collect(Collector.of(
                    () -> {
                        List<List<Integer>> list = new ArrayList<>();
                        list.add(new ArrayList<>());
                        return list;
                    },
                    (list, x) -> {
                        List<Integer> inner = list.get(list.size() - 1);
                        if (inner.size() == 0) {
                            inner.add(x);
                        } else {
                            int lastElement = inner.get(inner.size() - 1);
                            if (lastElement == x - 1) {
                                inner.add(x);
                            } else {
                                List<Integer> oneMore = new ArrayList<>();
                                oneMore.add(x);
                                list.add(oneMore);
                            }
                        }
                    },
                    (left, right) -> {
                        throw new IllegalArgumentException("No parallel!");
                    },

                    list -> {

                        return list.stream()
                                .map(inner -> {
                                    if (inner.size() > 1) {
                                        return inner.get(0) + "-" + inner.get(inner.size() - 1);
                                    }
                                    return "" + inner.get(0);
                                }).collect(Collectors.toList());

                    }));

    System.out.println(result);]]></Answer>
<Answer><![CDATA[public class RangeCollector implements Collector<Integer, List<String>, List<String>>{

    private int last = 0;
    private LinkedList<Integer> intermediate = new LinkedList<>();

    @Override
    public Supplier<List<String>> supplier(){
        return ArrayList::new;
    }

    @Override
    public BiConsumer<List<String>, Integer> accumulator(){
        return ( finalList, current ) -> {
            if( current - last == 1 ){ // check if adjacent to last value
                intermediate.add(current);
            } else{
                if( intermediate.size() > 2 ){
                    finalList.add(intermediate.getFirst() + "-" + intermediate.getLast()); // add new range
                } else{
                    addLeftOverValues(finalList);
                }
                intermediate.clear();
                intermediate.add(current);
            }
            last = current;
        };
    }

    @Override
    public BinaryOperator<List<String>> combiner(){
        return (list, list2) -> {
            list.addAll(list2);
            return list;
        };
    }

    @Override
    public Function<List<String>, List<String>> finisher(){
        return ( finalList ) -> {
            if( !intermediate.isEmpty() ){
                addLeftOverValues(finalList);
            }
            return finalList;
        };
    }

    @Override
    public Set<Characteristics> characteristics(){
        return EnumSet.noneOf(Characteristics.class);
    }

    private void addLeftOverValues( List<String> list ){
        list.addAll(
            intermediate.stream()
                .map(String::valueOf)
                .collect(Collectors.toList())
       );
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45233063" questionTitle="Consecutive animation in TornadoFX?">
<Answer><![CDATA[class TransitionViews: View() {
   val r1 = Rectangle(20.0, 20.0, Color.RED)
   val r2 = Rectangle(20.0, 20.0, Color.YELLOW)
   val r3 = Rectangle(20.0, 20.0, Color.GREEN)
   val r4 = Rectangle(20.0, 20.0, Color.BLUE)

   override val root = vbox {
       button("Animate").action {
           sequentialTransition {
               timeline {
                   keyframe(0.5.seconds) {
                       keyvalue(r1.translateXProperty(), 50.0, interpolator = Interpolator.EASE_BOTH)
                   }
               }
               timeline {
                   keyframe(0.5.seconds) {
                       keyvalue(r2.translateXProperty(), 100.0, interpolator = Interpolator.EASE_BOTH)
                   }
               }
               timeline {
                   keyframe(0.5.seconds) {
                       keyvalue(r3.translateXProperty(), 150.0, interpolator = Interpolator.EASE_BOTH)
                   }
               }
               timeline {
                   keyframe(0.5.seconds) {
                       keyvalue(r4.translateXProperty(), 200.0, interpolator = Interpolator.EASE_BOTH)
                   }
               }
           }
       }
       pane {
           add(r1)
           add(r2)
           add(r3)
           add(r4)
       }
   }
}]]></Answer>
<Answer><![CDATA[class STTest : View("My View") {

    val r1 = Rectangle(20.0, 20.0, Color.RED)
    val r2 = Rectangle(20.0, 20.0, Color.YELLOW)
    val r3 = Rectangle(20.0, 20.0, Color.GREEN)
    val r4 = Rectangle(20.0, 20.0, Color.BLUE)

    override val root = vbox {

        button("Animate") {
            setOnAction {

                val t1 = timeline(false) {
                    keyframe(Duration.seconds(0.5)) {
                        keyvalue(r1.translateXProperty(), 50.0, interpolator = Interpolator.EASE_BOTH)
                    }
                }
                val t2 = timeline(false) {
                    keyframe(Duration.seconds(0.5)) {
                        keyvalue(r2.translateXProperty(), 100.0, interpolator = Interpolator.EASE_BOTH)
                    }
                }
                val t3 = timeline(false) {
                    keyframe(Duration.seconds(0.5)) {
                        keyvalue(r3.translateXProperty(), 150.0, interpolator = Interpolator.EASE_BOTH)
                    }
                }
                val t4 = timeline(false) {
                    keyframe(Duration.seconds(0.5)) {
                        keyvalue(r4.translateXProperty(), 200.0, interpolator = Interpolator.EASE_BOTH)
                    }
                }

                /* functions look better
                val st = SequentialTransition()
                st.children += t1
                st.children += t2
                st.children += t3
                st.children += t4

                st.play()
                */  

                t1.then(t2).then(t3).then(t4).play()

            }
        }
        pane {
            add(r1)
            add(r2)
            add(r3)
            add(r4)
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45203267" questionTitle="Updating an ImageView from another thread javafx">
<Answer><![CDATA[import javafx.application.*;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.*;
import java.util.concurrent.*;

public class FactoryConsole extends Application {
    private Factory factory = new Factory();

    @Override
    public void start(Stage stage) throws Exception {
        VBox layout = new VBox(10);
        layout.setPadding(new Insets(10));
        layout.setPrefSize(100, 100);

        for (Machine machine: factory.getMachines()) {
            MachineView machineView = new MachineView(machine);
            layout.getChildren().add(machineView);
        }

        factory.start();

        stage.setScene(new Scene(layout));
        stage.show();
    }

    @Override
    public void stop() throws Exception {
        factory.stop();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

enum MachineState {
    IDLE, BAKING
}

class MachineStateChangeEvent {
    private final Machine machine;
    private final MachineState machineState;

    public MachineStateChangeEvent(Machine machine, MachineState machineState) {
        this.machine = machine;
        this.machineState = machineState;
    }

    public Machine getMachine() {
        return machine;
    }

    public MachineState getMachineState() {
        return machineState;
    }
}

interface MachineStateListener {
    void notifyStateChange(MachineStateChangeEvent machineState);
}

class MachineView extends HBox implements MachineStateListener {
    private final Machine machine;
    private final Label label;

    public MachineView(Machine machine) {
        super();
        this.label = new Label();
        this.machine = machine;
        machine.setMachineStateListener(this);

        getChildren().add(label);
    }

    @Override
    public void notifyStateChange(MachineStateChangeEvent event) {
        if (event.getMachine() != machine) {
            return;
        }

        if (!Platform.isFxApplicationThread()) {
            Platform.runLater(() -> updateState(event.getMachineState()));
        } else {
            updateState(event.getMachineState());
        }
    }

    private void updateState(MachineState machineState) {
        label.setText(machine.getId() + ": " + machineState.toString());
    }
}

class Factory {
    private static final int N_MACHINES = 4;
    private ExecutorService pool = Executors.newFixedThreadPool(N_MACHINES);
    private List<Machine> machines = new ArrayList<>();

    public Factory() {
        for (int i = 0; i < N_MACHINES; i++) {
            machines.add(new Machine());
        }
    }

    public void start() {
        for (Machine machine: machines) {
            pool.submit(machine);
        }
    }

    public void stop() {
        // Disable new tasks from being submitted
        pool.shutdown();
        try {
            // Wait a while for existing tasks to terminate
            if (!pool.awaitTermination(5, TimeUnit.SECONDS)) {
                pool.shutdownNow();
                // Cancel currently executing tasks
                // Wait a while for tasks to respond to being cancelled
                if (!pool.awaitTermination(5, TimeUnit.SECONDS))
                    System.err.println("Pool did not terminate");
            }
        } catch (InterruptedException ie) {
            // (Re-)Cancel if current thread also interrupted
            pool.shutdownNow();
            // Preserve interrupt status
            Thread.currentThread().interrupt();
        }
    }

    public List<Machine> getMachines() {
        return machines;
    }
}

class Machine implements Runnable {
    private static final Random random = new Random();
    private static int nextMachineId = 1;

    private int id = nextMachineId++;

    private MachineState state = MachineState.IDLE;
    private MachineStateListener stateListener;

    public void setMachineStateListener(MachineStateListener stateListener) {
        this.stateListener = stateListener;
    }

    @Override
    public void run() {
        try {
            updateState(MachineState.IDLE);
            while (true) {
                Thread.sleep(1000 * random.nextInt(2));
                updateState(MachineState.BAKING);
                Thread.sleep(1000 * random.nextInt(3));
                updateState(MachineState.IDLE);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

    private void updateState(MachineState state) {
        this.state = state;
        if (stateListener != null) {
            stateListener.notifyStateChange(new MachineStateChangeEvent(this, state));
        }
    }

    public int getId() {
        return id;
    }

    public MachineState getState() {
        return state;
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class Display extends Application {
  @Override
  public void start(Stage primaryStage) throws Exception {
    FXMLLoader loader = new FXMLLoader(getClass().getResource("sample.fxml"));
    primaryStage.setTitle("Hello World");
    primaryStage.setScene(new Scene(loader.load(), 800, 400));
    primaryStage.show();

    Controller controller = loader.getController();

    Thread machineryThread = new Thread(() -> {
        // some processes launching after the GUI, including updating the label
        // which you can now easily do with
        Platform.runLater(() -> controller.setLabel("Some new text"));
    });
    machineryThread.start();
  }


}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45132294" questionTitle="Adding an eventhandler in javafx through a custom class">
<Answer><![CDATA[package test;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;


public class Test2 extends Application{

public static void main(String[] args) {
    Test2.launch(args);     
}

@Override
public void start(Stage stage) throws Exception {
    DragDetectedHandler dragDetectedHandler = new 
       DragDetectedHandler("Test");
    Button button = new Button();
    button.setOnDragDetected(dragDetectedHandler);
    Scene scene = new Scene(button);
    stage.setScene(scene);
    stage.show();
}

}]]></Answer>
<Answer><![CDATA[public class Main extends Application
{

    public static void main(String[] args)
    {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception
    {
        DragHandler dh = new DragHandler();
        StackPane pane = new StackPane();
        Rectangle rect = new Rectangle(200 , 200 , 200 ,200);
        rect.setOnDragDetected(dh);
        pane.getChildren().add(rect);
        Scene scene = new Scene(pane , 600 , 600);
        stage.setScene(scene);
        stage.show();
    }

    private class DragHandler implements EventHandler<MouseEvent>
    {
        @Override
        public void handle(MouseEvent event)
        {
            System.out.println("OK");
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45081431" questionTitle="Update events from ObjectProperty (just like in ObservableList)">
<Answer><![CDATA[public class ObservableValueProperty<T> extends SimpleObjectProperty<T> {

    private InvalidationListener listener = null;

    private final Callback<T, Observable[]> extractor;

    public ObservableValueProperty() {
    this(null);
    }

    public ObservableValueProperty(final Callback<T, Observable[]> extractor) {
    this.extractor = extractor;
    }

    @Override
    protected void fireValueChangedEvent() {
    super.fireValueChangedEvent();
    }

    @Override
    public void setValue(final T v) {
    if (extractor != null) {
        final T oldValue = super.get();
        if (oldValue != null) {
        for (final Observable o : extractor.call(oldValue)) {
            o.removeListener(listener);
        }
        }
        listener = o -> fireValueChangedEvent();
        for (final Observable o : extractor.call(v)) {
        o.addListener(listener);
        }
    }
    super.setValue(v);
    }
}

public class ObservableValuePropertyTest4 implements ChangeListener<Object> {

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    static class NestedBean {

    StringProperty nestedProperty = new SimpleStringProperty("hans");

    public static <T extends NestedBean> Callback<T, Observable[]> extractor() {

        return (final T o) -> new Observable[] { o.nestedProperty };
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj instanceof NestedBean) {
        System.err.println(this.nestedProperty.get() + " " + ((NestedBean) obj).nestedProperty.get());
        return Objects.equal(this.nestedProperty.get(), ((NestedBean) obj).nestedProperty.get());
        }
        return false;
    }

    }

    private ObservableValueProperty<NestedBean> p;

    private NestedBean nestedBean;

    private String newNestedValue = null;

    @Test
    public void test01() {
    p = new ObservableValueProperty<>(NestedBean.extractor());
    nestedBean = new NestedBean();
    p.setValue(nestedBean);
    p.addListener(this);
    nestedBean.nestedProperty.set("peter");
    assertEquals("peter", newNestedValue);
    }

    @Override
    public void changed(final ObservableValue<? extends Object> observable, final Object oldValue,
        final Object newValue) {
    System.err.println("Changed");
    newNestedValue = nestedBean.nestedProperty.get();

    }

}]]></Answer>
<Answer><![CDATA[import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.util.Callback;

/**
 *
 * @author Claude Bouchard - 2017
 */

public class ObjectXProperty<E> extends ObjectProperty<E> {

SimpleObjectProperty<E> p;
Callback<E, Observable[]> extractor;

boolean externalBound = false;

public ObjectXProperty(Callback<E, Observable[]> extractor) {
    this.extractor = extractor;
}

public ObjectXProperty(E init, Callback<E, Observable[]> extractor) {

    p = new SimpleObjectProperty();
    this.extractor = extractor;
    set(init);

}

public ObjectXProperty(Object bean, String name, Callback<E, Observable[]> extractor) {
    p = new SimpleObjectProperty(bean, name);
    this.extractor = extractor;
}

public ObjectXProperty(Object bean, String name, E init, Callback<E, Observable[]> extractor) {
    p = new SimpleObjectProperty(bean, name);
    this.extractor = extractor;
    set(init);

}

@Override
public void set(E value) {
    if (!externalBound) {
        if (value != null) {
            p.bind(Bindings.createObjectBinding(() -> {
                return value;
            }, extractor.call(value)));

        } else {
            p.bind(Bindings.createObjectBinding(() -> {
                return value;
            }, new Observable[]{}));
        }
    } else {
        p.set(value); //As expected, it will throw a java.lang.RuntimeException
    }
}

@Override
public E get() {
    return p.get();
}

@Override
public void addListener(ChangeListener<? super E> listener) {
    p.addListener(listener);
}

@Override
public void removeListener(ChangeListener<? super E> listener) {
    p.removeListener(listener);
}

@Override
public void addListener(InvalidationListener listener) {
    p.addListener(listener);
}

@Override
public void removeListener(InvalidationListener listener) {
    p.removeListener(listener);
}

@Override
public Object getBean() {
    return p.getBean();
}

@Override
public String getName() {
    return p.getName();
}

@Override
public void bind(ObservableValue<? extends E> observable) {
    p.bind(observable);
    externalBound = true;
}

@Override
public void unbind() {
    p.unbind();
    externalBound = false;
    set(get()); //to reactivate the extractor on the last value
}

@Override
public boolean isBound() {
    return externalBound;
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

import org.reactfx.value.Val;
import org.reactfx.value.Var;

class TestBean {

    private final StringProperty testProperty = new SimpleStringProperty();
    public final StringProperty testPropertyProperty()        { return testProperty; }
    public final String getTestProperty()                     { return testProperty.get(); }
    public final void setTestProperty(String newTestProperty) { testProperty.set(newTestProperty); }
}

public class SomeType {

    private final ObjectProperty<TestBean> property = new SimpleObjectProperty<>();
    public final ObjectProperty<TestBean> propertyProperty() { return property; }
    public final TestBean getProperty()                      { return property.get(); }
    public final void setProperty(TestBean newProperty)      { property.set(newProperty); }

    public static void main(String[] args) {
        SomeType someType = new SomeType();
        Var<String> chainedTestProperty = Val.selectVar(someType.propertyProperty(), TestBean::testPropertyProperty);
        chainedTestProperty.addListener((obs, oldVal, newVal) -> System.out.println(obs + " " + oldVal + "->" + newVal));

        //Tests
        someType.setProperty(new TestBean());
        someType.getProperty().setTestProperty("s1");
        TestBean bean2 = new TestBean();
        bean2.setTestProperty("s2");
        someType.setProperty(bean2);
        someType.setProperty(new TestBean());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45060886" questionTitle="Grouping items by date">
<Answer><![CDATA[// assuming you have a list of dates
List<LocalDate> dates = new ArrayList<>();
dates.add(LocalDate.of(2017, 1, 1));
dates.add(LocalDate.of(2017, 1, 1));
dates.add(LocalDate.of(2017, 1, 4));
dates.add(LocalDate.of(2017, 1, 5));
dates.add(LocalDate.of(2017, 1, 29));
dates.add(LocalDate.of(2017, 10, 1));
dates.add(LocalDate.of(2018, 4, 5));

CompressionType compression = // get CompressionType from user input
final TemporalField groupField;
switch (compression) {
    case DAY:
        groupField = ChronoField.DAY_OF_YEAR;
        break;
    case WEEK:
    // week starts at Sunday, minimum of 1 day in the first week
        groupField = WeekFields.of(DayOfWeek.SUNDAY, 1).weekOfWeekBasedYear();
        break;
    case MONTH:
        groupField = ChronoField.MONTH_OF_YEAR;
        break;
    case YEAR:
        groupField = ChronoField.YEAR;
        break;
    default:
        groupField = null;
}
if (groupField != null) {
    Map<Integer, List<LocalDate>> result = dates.stream().collect(Collectors.groupingBy(d -> d.get(groupField)));
}]]></Answer>
<Answer><![CDATA[ArrayList<Element> list = new ArrayList<>();
list.add(new Element("item 1", LocalDate.of(2017, 01, 01)));
list.add(new Element("item 2", LocalDate.of(2017, 01, 01)));

WeekFields weekFields = WeekFields.of(Locale.getDefault());
String userChoice = new Scanner(System.in).nextLine();
Map<Integer, List<Element>> map;

switch (userChoice) {
     case "day":
          map = list.stream().collect(Collectors.groupingBy(element 
                              -> element.getDate().getDayOfMonth()));
          break;
     case "week":
          map = list.stream().collect(Collectors.groupingBy(element 
                              -> element.getDate().get(weekFields.weekOfWeekBasedYear())));
          break;
     case "month":
          map = list.stream().collect(Collectors.groupingBy(element 
                              -> element.getDate().getMonthValue()));
          break;
     case "year":
          map = list.stream().collect(Collectors.groupingBy(element 
                              -> element.getDate().getYear()));
          break;
     default:
          break;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="45041702" questionTitle="Request for Wifi Permission when running a Gluon-Mobile Application in Run-time">
<Answer><![CDATA[if (ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED) {


if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,
        Manifest.permission.READ_EXTERNAL_STORAGE)) {

    // Show an explanation to the user *asynchronously* -- don't block
    // this thread waiting for the user's response! After the user
    // sees the explanation, try again to request the permission.

} else {

    // No explanation needed, we can request the permission.

    ActivityCompat.requestPermissions(thisActivity,
            new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
            REQUEST_PERMISSION);

    // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
    // app-defined int constant. The callback method gets the
    // result of the request.
}
}]]></Answer>
<Answer><![CDATA[public class AndroidPlatform {

    private static final String KEY_PERMISSIONS              = "permissions";
    private static final String KEY_REQUEST_CODE             = "requestCode";
    private static final int    REQUEST_CODE_ASK_PERMISSIONS = 246;
    private static final int    REQUEST_CODE                 = 123;

    private final FXActivity    activity;

    public AndroidPlatform() {
        activity = FXActivity.getInstance();
    }

    public void checkPermissions() {
        if (Build.VERSION.SDK_INT >= MARSHMALLOW) {

            List<String> requiredPermissions = new ArrayList<>();
            addPermission(activity, requiredPermissions , Manifest.permission.ACCESS_COARSE_LOCATION);
            // additional required permissions

            if (!requiredPermissions.isEmpty()) {
                Intent permIntent = new Intent(activity, PermissionRequestActivity.class);
                permIntent.putExtra(KEY_PERMISSIONS, requiredPermissions.toArray(new String[requiredPermissions .size()]));
                permIntent.putExtra(KEY_REQUEST_CODE, REQUEST_CODE);
                activity.startActivityForResult(permIntent, REQUEST_CODE_ASK_PERMISSIONS);
            }
        }
    }

    private void addPermission(Activity activity, List<String> permissionsList, String permission) {
        if (ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED) {
            permissionsList.add(permission);
        }
    }

    public static class PermissionRequestActivity extends Activity {

        @Override
        public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
            FXActivity.getInstance().onRequestPermissionsResult(requestCode, permissions, grantResults);
            finish();
        }

        @Override
        protected void onStart() {
            super.onStart();
            String[] permissions = this.getIntent().getStringArrayExtra(KEY_PERMISSIONS);
            int requestCode = this.getIntent().getIntExtra(KEY_REQUEST_CODE, 0);

            ActivityCompat.requestPermissions(this, permissions, requestCode);
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44956955" questionTitle="JavaFX Use Chart Legend to toggle show/hide Series possible?">
<Answer><![CDATA[LineChart<Number, Number> chart;

for (Node n : chart.getChildrenUnmodifiable()) {
    if (n instanceof Legend) {
        Legend l = (Legend) n;
        for (Legend.LegendItem li : l.getItems()) {
            for (XYChart.Series<Number, Number> s : chart.getData()) {
                if (s.getName().equals(li.getText())) {
                    li.getSymbol().setCursor(Cursor.HAND); // Hint user that legend symbol is clickable
                    li.getSymbol().setOnMouseClicked(me -> {
                        if (me.getButton() == MouseButton.PRIMARY) {
                            s.getNode().setVisible(!s.getNode().isVisible()); // Toggle visibility of line
                            for (XYChart.Data<Number, Number> d : s.getData()) {
                                if (d.getNode() != null) {
                                    d.getNode().setVisible(s.getNode().isVisible()); // Toggle visibility of every node in the series
                                }
                            }
                        }
                    });
                    break;
                }
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.LegendItemEntity;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.fx.ChartViewer;
import org.jfree.chart.fx.interaction.ChartMouseEventFX;
import org.jfree.chart.fx.interaction.ChartMouseListenerFX;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * @see https://stackoverflow.com/a/44967809/230513
 * @see https://stackoverflow.com/a/43286042/230513
 */
public class VisibleTest extends Application {

    @Override
    public void start(Stage stage) {
        XYSeriesCollection dataset = new XYSeriesCollection();
        for (int i = 0; i < 3; i++) {
            XYSeries series = new XYSeries("value" + i);
            for (double t = 0; t < 2 * Math.PI; t += 0.5) {
                series.add(t, Math.sin(t) + i);
            }
            dataset.addSeries(series);
        }
        NumberAxis xAxis = new NumberAxis("domain");
        NumberAxis yAxis = new NumberAxis("range");
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer(true, true);
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
        JFreeChart chart = new JFreeChart("Test", plot);
        ChartViewer viewer = new ChartViewer(chart);
        viewer.addChartMouseListener(new ChartMouseListenerFX() {
            @Override
            public void chartMouseClicked(ChartMouseEventFX e) {
                ChartEntity ce = e.getEntity();
                if (ce instanceof XYItemEntity) {
                    XYItemEntity item = (XYItemEntity) ce;
                    renderer.setSeriesVisible(item.getSeriesIndex(), false);
                } else if (ce instanceof LegendItemEntity) {
                    LegendItemEntity item = (LegendItemEntity) ce;
                    Comparable key = item.getSeriesKey();
                    renderer.setSeriesVisible(dataset.getSeriesIndex(key), false);
                } else {
                    for (int i = 0; i < dataset.getSeriesCount(); i++) {
                        renderer.setSeriesVisible(i, true);
                    }
                }
            }

            @Override
            public void chartMouseMoved(ChartMouseEventFX e) {}
        });
        stage.setScene(new Scene(viewer));
        stage.setTitle("JFreeChartFX");
        stage.setWidth(640);
        stage.setHeight(480);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44949774" questionTitle="JavaFX How to add elements eg. Buttons dynamically created from items stored in the database Mysql?">
<Answer><![CDATA[@FXML
void acttable(ActionEvent event) {

String sqlQuery = "SELECT * FROM restauranttables;";
List<Button> buttonlist = new ArrayList<>(); //our Collection to hold newly created Buttons
try {
    connection = database.getConnection();
    statement = connection.createStatement();
    resultSet = statement.executeQuery(sqlQuery);
    while (resultSet.next()) { //iterate over every row returned
        String restaurant = resultSet.getString("restaurantname"); //extract button text, adapt the String to the columnname that you are interested in
        buttonlist.add(new Button(restaurant));

    }
    hboxx.getChildren().clear(); //remove all Buttons that are currently in the container
    hboxx.getChildren().addAll(buttonlist); //then add all your Buttons that you just created

} catch (SQLException e) {
    e.printStackTrace();
} finally{
    resultSet.close();
    statement.close();
    connection.close;
}
}]]></Answer>
<Answer><![CDATA[// connectivity for mysql database coding
String category_name= "Stock";
 
Class.forName("com.mysql.jdbc.Driver");
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/sonoo","root","root");  
Statement stmt=con.createStatement();  
ResultSet rs=stmt.executeQuery("select * from category where category_name=" + "'" + category_name + "'");  
rs.next();


int num_of_rows = rs.getInt(3); (Fetched from database according to category)

Panel p1=new Panel();
p1.setLayout(new GridLayout(Math.Ceil(num_of_rows/6),6,10,10));

Button b[];

b=new Button[num_of_rows];

for(int i=0;i<num_of_rows;i++)
{
	b[i]=new Button(category_name + "" + (i+1));
	p1.add(b[i]);
	b[i].addActionListener(this); // needed if to perform button click
}

//adding the panel to the container
add(p1);


public void actionPerformed(ActionEvent ae)
{
	// The event click code goes here
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44942296" questionTitle="Reversing the letters in words in a String">
<Answer><![CDATA[public static void swap(StringBuilder input, int start, int end) {
    for (int i=0; i <= (end - start) / 2; ++i) {
        char ch = input.charAt(start + i);
        input.setCharAt(start + i, input.charAt(end - i));
        input.setCharAt(end - i, ch);
    }
}

public static void main(String[] args) {
    StringBuilder sb = new StringBuilder("I love chocolate");

    int start = 0;
    int end = 0;

    while (true) {
        while (end <= sb.length() - 1 && sb.charAt(end) != ' ') {
            ++end;
        }
        swap(sb, start, end - 1);
        start = end + 1;
        end = start;
        if (end > sb.length() - 1) {
            break;
        }
    }

    System.out.println(sb);
}]]></Answer>
<Answer><![CDATA[/* Soner - The methods reverse a string with preserving punctiations */
public static String reverse(String x) {
    String[] str = x.split(" ");
    boolean flag = false;
    int lastCharPosition;
    StringBuilder rev = new StringBuilder("");

    for (int i = 0; i < str.length; i++) {
        flag = false;
        lastCharPosition = str[i].length()-1;
        if (str[i].charAt(lastCharPosition) == '.' || str[i].charAt(lastCharPosition) == '!'
                || str[i].charAt(lastCharPosition) == ',') {  // you can add new punctiations
            flag = true;
            lastCharPosition = str[i].length()-2;
        }
        for (int s = lastCharPosition; s >= 0; s--) {
            rev.append(str[i].charAt(s));
        }
        if (flag) rev.append(str[i].charAt(lastCharPosition + 1));
        rev.append(" ");
    }

    return rev.toString();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44935165" questionTitle="Java 8 Stream read file for every 100 lines">
<Answer><![CDATA[Stream<List<String>> split(Path path, int limit) throws IOException {
    // skip the remaining lines if its size < limit
    return split(Files.lines(path), limit, true);
}

<T> Stream<List<T>> split(Stream<T> source,
                          int limit, boolean skipRemainingElements) {

    //variables just for printing purpose
    Spliterator<T> it = source.spliterator();
    long size = it.estimateSize();
    int c = it.characteristics();// characteristics

    return stream(new AbstractSpliterator<List<T>>(size, c) {
        private int thresholds = skipRemainingElements ? limit : 1;

        @Override
        @SuppressWarnings("StatementWithEmptyBody")
        public boolean tryAdvance(Consumer<? super List<T>> action) {
            List<T> each = new ArrayList<>(limit);

            while (each.size() < limit && it.tryAdvance(each::add)) ;

            if (each.size() < thresholds) return false;

            action.accept(each);
            return true;
        }

    }, false).onClose(source::close);
}]]></Answer>
<Answer><![CDATA[Stream<Stream<String>> split(Path path, int limit) throws IOException {
    return LongStream.of(0, lines(path) / limit).parallel()
            .map(it -> it * limit)
            .mapToObj(offset -> {
                try {
                    return Files.lines(path).skip(offset).limit(limit);
                } catch (IOException e) {
                    throw new RejectedExecutionException(e);
                }
            });
}

long lines(Path path) throws IOException {
    try (LineNumberReader in = open(path)) {
        return in.getLineNumber();
    }
}

LineNumberReader open(Path path) throws IOException {
    return new LineNumberReader(newBufferedReader(path));
}

void sendRequest(Stream<String> each) {
    try (BufferedWriter out = null) {// todo: create the output writer
        each.forEach(line -> {
            try {
                out.write(line);
            } catch (IOException e) {
                // todo: handle error
            }
        });
    } catch (IOException ex) {
        //todo: handle error
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44872036" questionTitle="Java 8 Streams filter Strings by length">
<Answer><![CDATA[String line = "James Jack Johnny Frank Bob";
String regexForValidUserName = "[a-zA-Z][a-zA-Z0-9_]{2,24}";
Pattern patternForUserName = Pattern.compile(regexForValidUserName);
Matcher matcherForUserName = patternForUserName.matcher(line);
Stream.Builder<String> builder = Stream.builder();
while(matcherForUserName.find()) builder.add(matcherForUserName.group());
class State {
    String first, last, pair1, pair2;
    int currLength=-1;
    void add(String next) {
        if(first==null) first=next;
        else {
            int nextLength=last.length()+next.length();
                if(nextLength>currLength) {
                pair1=last;
                pair2=next;
                currLength=nextLength;
            }
        }
        last=next;
    }
    void merge(State next) {
        add(next.first);
        if(currLength<next.currLength) {
            pair1=next.pair1;
            pair2=next.pair2;
            currLength=next.currLength;
        }
        last=next.last;
    }
    String[] pair() {
        return currLength>=0? new String[]{ pair1, pair2 }: null;
    }
}
String[] str = builder.build()
       .collect(State::new, State::add, State::merge).pair();
System.out.println(Arrays.toString(str));]]></Answer>
<Answer><![CDATA[class Tracker {
  List<String> pairs = Collections.emptyList();
  String prev = "";
  int longest = 0;

  public void check(String name) {
    int length = prev.length() + name.length();
    if (length > longest) {
      longest = length;
      pairs = Arrays.asList(prev, name);
    }
    prev = name;
  }

  public List<String> pairs() {
    return pairs;
  }
}

String line = "James Jack Johnny Frank Bob";

Tracker tracker = new Tracker();
Stream.of(line.split(" ")).forEach(tracker::check);

System.out.println(tracker.pairs());]]></Answer>
<Answer><![CDATA[import java.util.Spliterators.AbstractSpliterator;
import static java.util.stream.StreamSupport.stream;
import static java.util.Spliterator.*;

<T> Stream<List<T>> chunk2(List<T> list) {
    int characteristics = ORDERED & SIZED & IMMUTABLE ;
    int size = list.size() - 1;
    return stream(new AbstractSpliterator<List<T>>(size, characteristics) {
        private int pos;

        @Override
        public boolean tryAdvance(Consumer<? super List<T>> action) {
            if (pos >= size) return false;

            action.accept(list.subList(pos, ++pos + 1));
            return true;
        }

    }, false);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44857721" questionTitle="Scalafx animation timer causing recursive : Possible to avoid that?">
<Answer><![CDATA[def showMenu{
        //code that show the .fxml layout and controller will handle the controller
    }

    def showInstruction{
        //code that show the .fxml instruction
    }

    def showGame():Unit = {
        this.roots.center = {
            new AnchorPane(){
                children = new Group(){

                    val timer:AnimationTimer = AnimationTimer(t=> {
                        //game code

                        if(playerDie){
                            timer.stop
                            val gameOver:AnimationTimer = AnimationTimer(t => {
                                if(exitPressed){
                                    showMenu
                                } else if (restartPressed){
                                    for(i <- game.restart) children.remove(i)
                                    timer.start
                                }
                            })
                            gameOver.start
                        }
                    })
                    timer.start
                }
            }
        }
    }

    showMenu()
}]]></Answer>
<Answer><![CDATA[object Game extends JFXApp{

    def showMenu{
        //code that show the .fxml layout and controller will handle the controller
    }

    def showInstruction{
        //code that show the .fxml instruction
    }

    def showGame():Unit = {
        this.roots.center = {
            new AnchorPane(){
                children = new Group(){

                    val timer:AnimationTimer = AnimationTimer(t=> {
                        //game code

                        if(playerDie){
                            timer.stop
                            val gameOver:AnimationTimer = AnimationTimer(t => {
                                if(exitPressed){
                                    showMenu
                                } else if (restartPressed){
                                    for(i <- game.restart) children.remove(i)
                                    timer.start
                                }
                            })
                            gameOver.start
                        }
                    })
                    timer.start
                }
            }
        }
    }

    showMenu()
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44855996" questionTitle="How to build a zip file with a size of 400 GB in java">
<Answer><![CDATA[private void addToZipFolder(Folder folder, ZipArchiveOutputStream zos) throws IOException {
    String path = folder.getPaths().get(0).replace(sito_export_path, "");
    ZipArchiveEntry zipEntry = new ZipArchiveEntry(path.concat("/"));
    appLog.info("aggiungo cartella vuota "+folder.getName()+" al file zip");
    zos.putArchiveEntry(zipEntry);
    zos.closeArchiveEntry();
}

private void addToZipFile(Document document, ZipArchiveOutputStream zos) throws IOException {
    InputStream inputStream = document.getContentStream().getStream();
    String path = document.getPaths().get(0).replace(sito_export_path, "");
    ZipArchiveEntry entry = new ZipArchiveEntry(path);
    entry.setSize(document.getContentStreamLength());
    zos.putArchiveEntry(entry);
    byte buffer[] = new byte[1024];
    while (true) {
        int nRead = inputStream.read(buffer, 0, buffer.length);
        if (nRead <= 0) {
            break;
        }
        zos.write(buffer, 0, nRead);
    }
    inputStream.close();
    zos.closeArchiveEntry();
}]]></Answer>
<Answer><![CDATA[/*
 * this class create a zip file base on given(parameter) node
 * */
public class ZipContents extends AbstractWebScript {
    private static Log logger = LogFactory.getLog(ZipContents.class);

    private static final int BUFFER_SIZE = 1024;

    private static final String MIMETYPE_ZIP = "application/zip";
    private static final String TEMP_FILE_PREFIX = "alf";
    private static final String ZIP_EXTENSION = ".zip";

    private ContentService contentService;
    private NodeService nodeService;
    private NamespaceService namespaceService;
    private DictionaryService dictionaryService;
    private StoreRef storeRef;
    private String encoding;

    public void setNodeService(NodeService nodeService) {
        this.nodeService = nodeService;
    }

    public void setContentService(ContentService contentService) {
        this.contentService = contentService;
    }

    public void setNamespaceService(NamespaceService namespaceService) {
        this.namespaceService = namespaceService;
    }

    public void setDictionaryService(DictionaryService dictionaryService) {
        this.dictionaryService = dictionaryService;
    }

    public void setStoreUrl(String url) {
        this.storeRef = new StoreRef(url);
    }

    public void setEncoding(String encoding) {
        this.encoding = encoding;
    }

    public void execute(WebScriptRequest req, WebScriptResponse res) throws IOException {

        String nodes = req.getParameter("nodes");
        if (nodes == null || nodes.length() == 0) {
            throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, "nodes");
        }

        List<String> nodeIds = new ArrayList<String>();
        StringTokenizer tokenizer = new StringTokenizer(nodes, ",");
        if (tokenizer.hasMoreTokens()) {
            while (tokenizer.hasMoreTokens()) {
                nodeIds.add(tokenizer.nextToken());
            }
        }

        String filename = req.getParameter("filename");
        if (filename == null || filename.length() == 0) {
            throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, "filename");
        }

        String noaccentStr = req.getParameter("noaccent");
        if (noaccentStr == null || noaccentStr.length() == 0) {
            throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, "noaccent");
        }

        try {
            res.setContentType(MIMETYPE_ZIP);
            res.setHeader("Content-Transfer-Encoding", "binary");
            res.addHeader("Content-Disposition", "attachment;filename=\"" + unAccent(filename) + ZIP_EXTENSION + "\"");

            res.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
            res.setHeader("Pragma", "public");
            res.setHeader("Expires", "0");

            createZipFile(nodeIds, res.getOutputStream(), new Boolean(noaccentStr));
        } catch (RuntimeException e) {
            throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
        }
    }

    public void createZipFile(List<String> nodeIds, OutputStream os, boolean noaccent) throws IOException {
        File zip = null;

        try {
            if (nodeIds != null && !nodeIds.isEmpty()) {
                zip = TempFileProvider.createTempFile(TEMP_FILE_PREFIX, ZIP_EXTENSION);
                FileOutputStream stream = new FileOutputStream(zip);
                CheckedOutputStream checksum = new CheckedOutputStream(stream, new Adler32());
                BufferedOutputStream buff = new BufferedOutputStream(checksum);
                ZipArchiveOutputStream out = new ZipArchiveOutputStream(buff);
                out.setEncoding(encoding);
                out.setMethod(ZipArchiveOutputStream.DEFLATED);
                out.setLevel(Deflater.BEST_COMPRESSION);

                if (logger.isDebugEnabled()) {
                    logger.debug("Using encoding '" + encoding + "' for zip file.");
                }

                try {
                    for (String nodeId : nodeIds) {
                        NodeRef node = new NodeRef(storeRef, nodeId);
                        addToZip(node, out, noaccent, "");
                    }
                } catch (Exception e) {
                    logger.error(e.getMessage(), e);
                    throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
                } finally {
                    out.close();
                    buff.close();
                    checksum.close();
                    stream.close();

                    if (nodeIds.size() > 0) {
                        InputStream in = new FileInputStream(zip);
                        try {
                            byte[] buffer = new byte[BUFFER_SIZE];
                            int len;

                            while ((len = in.read(buffer)) > 0) {
                                os.write(buffer, 0, len);
                            }
                        } finally {
                            IOUtils.closeQuietly(in);
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw new WebScriptException(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
        } finally {
            // try and delete the temporary file
            if (zip != null) {
                zip.delete();
            }
        }
    }

    public void addToZip(NodeRef node, ZipArchiveOutputStream out, boolean noaccent, String path) throws IOException {
        QName nodeQnameType = this.nodeService.getType(node);

        // Special case : links
        if (this.dictionaryService.isSubClass(nodeQnameType, ApplicationModel.TYPE_FILELINK)) {
            NodeRef linkDestinationNode = (NodeRef) nodeService.getProperty(node, ContentModel.PROP_LINK_DESTINATION);
            if (linkDestinationNode == null) {
                return;
            }

            // Duplicate entry: check if link is not in the same space of the
            // link destination
            if (nodeService.getPrimaryParent(node).getParentRef().equals(nodeService.getPrimaryParent(linkDestinationNode).getParentRef())) {
                return;
            }

            nodeQnameType = this.nodeService.getType(linkDestinationNode);
            node = linkDestinationNode;
        }

        String nodeName = (String) nodeService.getProperty(node, ContentModel.PROP_NAME);
        nodeName = noaccent ? unAccent(nodeName) : nodeName;

        if (this.dictionaryService.isSubClass(nodeQnameType, ContentModel.TYPE_CONTENT)) {
            ContentReader reader = contentService.getReader(node, ContentModel.PROP_CONTENT);
            if (reader != null) {
                InputStream is = reader.getContentInputStream();

                String filename = path.isEmpty() ? nodeName : path + '/' + nodeName;



                ZipArchiveEntry entry = new ZipArchiveEntry(filename);
                entry.setTime(((Date) nodeService.getProperty(node, ContentModel.PROP_MODIFIED)).getTime());

                entry.setSize(reader.getSize());
                out.putArchiveEntry(entry);

                byte buffer[] = new byte[BUFFER_SIZE];
                while (true) {
                    int nRead = is.read(buffer, 0, buffer.length);
                    if (nRead <= 0) {
                        break;
                    }

                    out.write(buffer, 0, nRead);
                }
                is.close();
                out.closeArchiveEntry();
            } else {
                logger.warn("Could not read : " + nodeName + "content");
            }
        } else if (this.dictionaryService.isSubClass(nodeQnameType, ContentModel.TYPE_FOLDER)
                && !this.dictionaryService.isSubClass(nodeQnameType, ContentModel.TYPE_SYSTEM_FOLDER)) {
            List<ChildAssociationRef> children = nodeService.getChildAssocs(node);
            if (children.isEmpty()) {

                String folderPath = path.isEmpty() ? nodeName + '/' : path + '/' + nodeName + '/';
                ZipArchiveEntry entry = new ZipArchiveEntry(folderPath);
                entry.setSize(0);
                entry.setTime(((Date) nodeService.getProperty(node, ContentModel.PROP_MODIFIED)).getTime());
                out.putArchiveEntry(entry);
                out.closeArchiveEntry();

            } else {
                for (ChildAssociationRef childAssoc : children) {
                    NodeRef childNodeRef = childAssoc.getChildRef();
                    addToZip(childNodeRef, out, noaccent, path.isEmpty() ? nodeName : path + '/' + nodeName);
                }
            }
        } else {
            logger.info("Unmanaged type: " + nodeQnameType.getPrefixedQName(this.namespaceService) + ", filename: " + nodeName);
        }
    }



    /**
     * ZipEntry() does not convert filenames from Unicode to platform (waiting
     * Java 7) http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4244499
     * 
     * @param s
     * @return
     */
    public static String unAccent(String s) {
        String temp = Normalizer.normalize(s, Normalizer.NFD, 0);
        return temp.replaceAll("[^\\p{ASCII}]", "");
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44697631" questionTitle="Java 8 Streams &amp; lambdas maintaining strict FP">
<Answer><![CDATA[class Pair<T, U> {
    T first;
    U second;

    Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }
}

Pair<List<String>, BigInteger> result = countries.stream()
    .flatMap(country -> country.states.stream())
    .collect(() -> new Pair<>(
            new ArrayList<>(),
            BigInteger.ZERO
        ),
        (acc, state) -> {
            acc.first.add(state.capital);
            acc.second = acc.second.add(state.population);
        },
        (a, b) -> {
            a.first.addAll(b.first);
            a.second = a.second.add(b.second);
        });]]></Answer>
<Answer><![CDATA[class MyResult {
  private BigInteger population = BigInteger.ZERO;
  private List<String> capitals = new ArrayList<>();

  public void accumulate(State state) {
    population = population.add(state.population);
    capitals.add(state.capital);
  }

  public MyResult merge(MyResult other) {
    population = population.add(other.population);
    capitals.addAll(other.capitals);
    return this;
  }
}
MyResult result = countries.stream()
  .flatMap(c -> c.getStates().stream())
  .collect(Collector.of(MyResult::new, MyResult::accumulate, MyResult::merge));

BigInteger population = result.population;
List<String> capitals = result.capitals;]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44660241" questionTitle="how to add data to table view when click on button on another page?">
<Answer><![CDATA[package db;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.stage.Stage;
import javafx.util.Callback;

/**
 *
 * @author pc
 */
public class FXMLDocumentController implements Initializable{

  public Statement st;
  @FXML
  public TableView<Book> table;
  //public ObservableList<ObservableList> data;
  private ObservableList<Book> bookData;
  //private Button btnNew = new Button("New Record");

  public void buildData(){
    //data = FXCollections.observableArrayList();
    bookData = FXCollections.observableArrayList();

    try{
      Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
      Connection con = DriverManager.getConnection("jdbc:ucanaccess://D:\\GUI\\Library.accdb", "", "");
      System.out.println("connected...");
      st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
      // SQL FOR SELECTING ALL OF BOOK
      String SQL = "SELECT * from BookDB";
      // ResultSet
      ResultSet rs = con.createStatement().executeQuery(SQL);
      /**********************************
       * TABLE COLUMN ADDED DYNAMICALLY *
       **********************************/
      for(int i = 0; i < rs.getMetaData().getColumnCount(); i++){
        // We are using non property style for making dynamic table
        String columnName = rs.getMetaData().getColumnName(i + 1);
        TableColumn<Book, String> col = new TableColumn<>(columnName);
        col.setCellValueFactory(new Callback<CellDataFeatures<Book, String>, ObservableValue<String>>(){
          public ObservableValue<String> call(CellDataFeatures<Book, String> param){
            Book book = param.getValue();
            String cellData = book.getValue(columnName);
            return new SimpleStringProperty(cellData);
          }
        });
        table.getColumns().add(col);
        System.out.println("Column [" + i + "] ");
      }

      TableColumn<Book, Boolean> col_action = new TableColumn<>("Action");
      col_action.setSortable(false);
      col_action.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Book, Boolean>, ObservableValue<Boolean>>(){
        @Override
        public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<Book, Boolean> p){
          return new SimpleBooleanProperty(p.getValue() != null);
        }
      });
      col_action.setCellFactory(new Callback<TableColumn<Book, Boolean>, TableCell<Book, Boolean>>(){
        @Override
        public TableCell<Book, Boolean> call(TableColumn<Book, Boolean> p){
          return new ButtonCell(table);
        }
      });
      table.getColumns().add(col_action);

      TableColumn<Book, Boolean> col_Delete = new TableColumn<>("Delete");
      col_Delete.setSortable(false);
      col_Delete.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Book, Boolean>, ObservableValue<Boolean>>(){
        @Override
        public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<Book, Boolean> p){
          return new SimpleBooleanProperty(p.getValue() != null);
        }
      });
      col_Delete.setCellFactory(new Callback<TableColumn<Book, Boolean>, TableCell<Book, Boolean>>(){
        @Override
        public TableCell<Book, Boolean> call(TableColumn<Book, Boolean> p){
          return new ButtonDelete(table);
        }
      });
      table.getColumns().add(col_Delete);

      /********************************
       * Data added to ObservableList *
       ********************************/
      while(rs.next()){
        Book book = new Book();
        // Iterate Row
        for(int i = 1; i <= rs.getMetaData().getColumnCount(); i++){
          // Iterate Column
          String columnName = rs.getMetaData().getColumnName(i);
          String columnData = rs.getString(i);
          book.setValue(columnName, columnData);
        }
        System.out.println("Row [1] added " + book.getName());
        bookData.add(book);
      }
      // FINALLY ADDED TO TableView
      table.setItems(bookData);

    }catch(Exception e){
      e.printStackTrace();
      System.out.println("Error on Building Data");
    }
  }

  @Override
  public void initialize(URL url, ResourceBundle rb){
    buildData();
    table.refresh();
  }

  // Define the button cell
  private class ButtonCell extends TableCell<Book, Boolean>{
    final Button cellButton = new Button("Add");
    ButtonCell(final TableView<Book> tblView) {
      cellButton.setOnAction(new EventHandler<ActionEvent>(){
        @Override
        public void handle(ActionEvent t){
          try{
            //Second s = new Second();
            //s.start(new Stage());
            openFXMLController();
          }catch(Exception ex){
            Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      });
    }
    // Display button if the row is not empty
    @Override
    protected void updateItem(Boolean t, boolean empty){
      super.updateItem(t, empty);
      if(!empty){
        setGraphic(cellButton);
      }else{
        setGraphic(null);
        setText("");
      }
    }
  }

  private Stage fxmlControllerStage;
  private void openFXMLController(){
    if(fxmlControllerStage == null){
      FXMLLoader loader = new FXMLLoader(getClass().getResource("FXML.fxml"));
      try{
        Parent root = loader.load();
        fxmlControllerStage = new Stage();
        fxmlControllerStage.setScene(new Scene(root));
        if(loader.getController() instanceof FXMLController){
          FXMLController fxmlController = loader.getController();
          fxmlController.setStage(fxmlControllerStage);
          fxmlController.setTable(table);
        }
      }catch(IOException e){
        e.printStackTrace();
      }
    }
    fxmlControllerStage.show();
  }

  // Define the button cell
  private class ButtonDelete extends TableCell<Book, Boolean>{
    final Button delButton = new Button("Delete");
    ButtonDelete(final TableView<Book> tblView) {
      delButton.setOnAction(new EventHandler<ActionEvent>(){
        @Override
        public void handle(ActionEvent t){
          bookData.remove(getIndex());
        }
      });
    }
    // Display button if the row is not empty
    @Override
    protected void updateItem(Boolean t, boolean empty){
      super.updateItem(t, empty);
      if(!empty){
        setGraphic(delButton);
      }else{
        setGraphic(null);
        setText("");
      }
    }
  }
}]]></Answer>
<Answer><![CDATA[import java.io.IOException;
import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class JavaFXApplication20 extends Application {

    // Data for the table
    private ObservableList<String> data = FXCollections.observableArrayList(
                "Item 1","Object 2","Thing 3","Product 4"
        );

    // The table
    private TableView<String> table = new TableView<>(data);

    @Override
    public void start(Stage stage) throws Exception {
        // Content Column
        TableColumn<String,String> contentCol = new TableColumn<>("Content");
        contentCol.setCellValueFactory(p->new ReadOnlyObjectWrapper(p.getValue()));

        // Action Column
        TableColumn actionCol = new TableColumn("Action");
        actionCol.setCellFactory(param->  new TableCell<String, String>() {

                    final Button btn = new Button("Add");

                    @Override
                    public void updateItem(String item, boolean empty) {
                        super.updateItem(item, empty);
                        if (empty) {
                            setGraphic(null);
                            setText(null);
                        } else {
                            // Make sure the column of 'Add' buttons 
                            // call the right method
                            btn.setOnAction(event->addButtonClicked());
                            setGraphic(btn);
                            setText(null);
                        }
                    }
        });

        // Display everything on the stage
        table.getColumns().addAll(contentCol,actionCol);
        Scene scene = new Scene(new VBox(table));
        stage.setScene(scene);
        stage.show();
    }

    public void addButtonClicked() {
        try{
            // Load the popup
            FXMLLoader loader = new FXMLLoader(getClass().getResource("Popup.fxml"));
            loader.load();
            FXMLDocumentController controller = loader.getController();
            Parent popup = loader.getRoot();

            // Give popup a callback method
            controller.setup(
                (value)->{data.add(value);table.refresh();}
            );

            // Display popup
            Stage stage = new Stage();
            stage.setScene(new Scene(popup));
            stage.show();
        } catch(IOException ex) {
            // ToDo: Handle failed popup
        }
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44622083" questionTitle="Java - Elegant way of parsing date/period?">
<Answer><![CDATA[Function<String, Range> convertToRange = (dateString) -> {

    String[] dateStringParts = dateString.split("/");
    return new Range(LocalDateTime.parse(dateStringParts[0], DateTimeFormatter.ISO_DATE_TIME),
            LocalDateTime.parse(dateStringParts[1], DateTimeFormatter.ISO_DATE_TIME));
};

Function<String, DurationAndDateTime> convertToDurationAndDateTime = (dateString) -> {
    String[] dateStringParts = dateString.split("/");
    String[] durationAndPeriodParts = dateStringParts[1].split("T");
    return new DurationAndDateTime(Period.parse(durationAndPeriodParts[0]),
            Duration.parse("PT" + durationAndPeriodParts[1]),
            LocalDateTime.parse(dateStringParts[0], DateTimeFormatter.ISO_DATE_TIME));
};


Function<String, DurationAndDateTime> convertToDateTimeAndDuration = (dateString) -> {
    String[] dateStringParts = dateString.split("/");
    String[] durationAndPeriodParts = dateStringParts[0].split("T");
    return new DurationAndDateTime(Period.parse(durationAndPeriodParts[0]),
            Duration.parse("PT" + durationAndPeriodParts[1]),
            LocalDateTime.parse(dateStringParts[1], DateTimeFormatter.ISO_DATE_TIME));
};

Function<String, DurationOnly> convertToDurationOnlyRelativeToCurrentTime = (dateString) -> {
    String[] durationAndPeriodParts = dateString.split("T");
    return new DurationOnly(Period.parse(durationAndPeriodParts[0]),
            Duration.parse("PT" + durationAndPeriodParts[1]));
};]]></Answer>
<Answer><![CDATA[static TemporalAmount amount(String text) {
    return splitting("T", (first, second) -> new TemporalAmount() {
        private Period period= first.isEmpty() ? Period.ZERO : Period.parse(first);
        private Duration duration = second.isEmpty() ? Duration.ZERO
                : Duration.parse(String.format("PT%s", second));

        @Override
        public long get(TemporalUnit unit) {
            return (period.getUnits().contains(unit) ? period.get(unit) : 0) +
                   (duration.getUnits().contains(unit) ? duration.get(unit) : 0);
        }

        @Override
        public List<TemporalUnit> getUnits() {
            return Stream.of(period, duration).map(TemporalAmount::getUnits)
                                              .flatMap(List::stream)
                                              .collect(toList());
        }

        @Override
        public Temporal addTo(Temporal temporal) {
            return period.addTo(duration.addTo(temporal));
        }

        @Override
        public Temporal subtractFrom(Temporal temporal) {
            return period.subtractFrom(duration.subtractFrom(temporal));
        }
    }).apply(text);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44616583" questionTitle="How to map RuntimeExceptions in Java streams to &quot;recover&quot; from invalid stream elements">
<Answer><![CDATA[<T> Stream<T> exceptionally(Stream<T> source, BiConsumer<Exception, Consumer<? super T>> handler) {
    class ExceptionallySpliterator extends AbstractSpliterator<T>
            implements Consumer<T> {

        private Spliterator<T> source;
        private T value;
        private long fence;

        ExceptionallySpliterator(Spliterator<T> source) {
            super(source.estimateSize(), source.characteristics());
            this.fence = source.getExactSizeIfKnown();
            this.source = source;
        }

        @Override
        public Spliterator<T> trySplit() {
            Spliterator<T> it = source.trySplit();
            return it == null ? null : new ExceptionallySpliterator(it);
        }

        @Override
        public boolean tryAdvance(Consumer<? super T> action) {
            return fence != 0 && consuming(action);
        }

        private boolean consuming(Consumer<? super T> action) {
            Boolean state = tryConsuming(action);
            if (state == null) {
                return true;
            }
            if (state) {
                action.accept(value);
                value = null;
                return true;
            }
            return false;
        }


        private Boolean tryConsuming(Consumer<? super T> action) {
            fence--;
            try {
                return source.tryAdvance(this);
            } catch (Exception ex) {
                handler.accept(ex, action);
                return null;
            }
        }

        @Override
        public void accept(T value) {
            this.value = value;
        }
    }

    return stream(new ExceptionallySpliterator(source.spliterator()), source.isParallel()).onClose(source::close);
}]]></Answer>
<Answer><![CDATA[<T> Stream<T> exceptionally(Stream<T> source,
                            BiConsumer<Exception, Consumer<? super T>> handler) {
    Spliterator<T> s = source.spliterator();
    return StreamSupport.stream(
            spliterator(
                    exceptionally(s, handler),
                    s.estimateSize(),
                    s.characteristics()
            ),
            source.isParallel()
    ).onClose(source::close);
}


//Don't worried the thread-safe & robust since it is invisible for anyone
private <T> Iterator<T> exceptionally(Spliterator<T> spliterator,
                            BiConsumer<Exception, Consumer<? super T>> handler) {
    class ExceptionallyIterator implements Iterator<T>, Consumer<T> {
        private Iterator<T> source = Spliterators.iterator(spliterator);
        private T value;
        private boolean valueInReady = false;
        private boolean stop = false;

        @Override
        public boolean hasNext() {

            while (true) {
                if (valueInReady) return true;
                if (stop) return false;
                try {
                    return source.hasNext();
                } catch (Exception ex) {
                    stop = shouldStopTraversing(ex);
                    handler.accept(ex, this);
                }
            }
        }

        @Override
        public T next() {
            return valueInReady ? dump() : source.next();
        }

        private T dump() {
            T result = value;
            valueInReady = false;
            value = null;
            return result;
        }

        @Override
        public void accept(T value) {
            this.value = value;
            this.valueInReady = true;
        }
    }
    return new ExceptionallyIterator();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44583350" questionTitle="Multiple Null checks handling in java8">
<Answer><![CDATA[RailComponent rc = getRailComponent();
    if (rc != null) {
        RailOffer ro = rc.getRailOffer()
        if (ro != null) {
            RailProduct rp = ro.getRailProducts().get(0).getRailProduct();
            if (rp != null) {
                List<FareBreakDown> fbList = rp.getFareBreakdownList();
                if (fbList != null) {
                    List<PassengerFare> pfList = fb.get(0).getPassengerFareList();
                    if (pfList != null) {
                        List<PassengerSegmentFare> psfList = pfList.get(0).getPassengerSegmentFareList();
                        if (psfList != null) {
                            String carrierServiceClassDisplayName = psfList.get(0).getCarrierServiceClassDisplayName();
                            if (carrierServiceClassDisplayName != null) {
                                return carrierServiceClassDisplayName;
                            }
                        }
                    }
                }
            }
        }
    }]]></Answer>
<Answer><![CDATA[interface SafeCallable<T> {
    T call();

    static <T> SafeCallable<T> of(T value) {
        return () -> value;
    }

    // ?. operator
    default <R> SafeCallable<R> then(Function<T, R> step) {
        return then(step, () -> null);
    }

    // ?: operator
    default T orElse(T value) {
        return then(identity(), () -> value).call();
    }

    default <R> SafeCallable<R> then(Function<T, R> step, Supplier<R> otherwise) {
        T value = call();
        return value == null ? otherwise::get : () -> step.apply(value);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44481086" questionTitle="On enter key pressed, submit input and move to another item">
<Answer><![CDATA[@FXML TextField fName;
@FXML TextField lName;
@FXML DatePicker birthDay;
@FXML TextField address;
@FXML TextField city;
@FXML TextField telephoneNmbr;
@FXML TextField email;
@FXML Button closeBtn;
@FXML Button okBtn;

public void initialize(){

    fName.setOnAction(e -> lName.requestFocus());
    lName.setOnAction(e -> birthDay.requestFocus());
    birthDay.setOnAction(e -> address.requestFocus());

    // etc...

    okBtn.setOnAction(e -> {
        // whatever you need to do when OK is pressed...
    });
}]]></Answer>
<Answer><![CDATA[@FXML TextField fName;
@FXML TextField lName;
@FXML DatePicker birthDay;
@FXML TextField address;
@FXML TextField city;
@FXML TextField telephoneNmbr;
@FXML TextField email;
@FXML Button closeBtn;
@FXML Button okBtn;

public void initialize(){
//ENTER key pressed -> focus on next item
        fName.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:lName.requestFocus();}});
        lName.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:birthDay.requestFocus();}});
        birthDay.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:address.requestFocus();}});
        address.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:city.requestFocus();}});
        city.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:telephoneNmbr.requestFocus();}});
        telephoneNmbr.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:email.requestFocus();}});
        email.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:okBtn.requestFocus();}});

        //ENTER key pressed on okBtn-> Save info
        okBtn.setOnKeyPressed((KeyEvent event) ->{ switch (event.getCode()){
            case ENTER:try {okDugmeKlik(); /*method for saving data into database*/} catch (IOException e) {e.printStackTrace();}}});

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44413649" questionTitle="JavaFx: How to update text of dynimically created TextFields inside GridPane?">
<Answer><![CDATA[/**
* This method to change the current value of the TextField at
* column 3 in the Table(GridPane) by ten 
* @param table
*/
private static void changeByTen(GridPane table){
   // loop through every node in the GridPane
   for(Node node : table.getChildren()){
       // and for every CheckBox
       if(node instanceof CheckBox){
          // add change listener to the Selected Property 
          ((CheckBox)node).selectedProperty().addListener((obs, unSelected, selected)->{
              // get the TextField at third column that corresponds to this CehckBox
              TextField targetTextFeild = 
                      ((TextField)getComponent(GridPane.getRowIndex(node), 3, table));
              try{// then try to add/subtract
                  if(selected){// if checked add 10
                     targetTextFeild.setText(String.valueOf(
                         Integer.parseInt(targetTextFeild.getText())+10));
                  }
                  else if(!selected){ // if unchecked subtract 10
                          targetTextFeild.setText(String.valueOf(
                           Integer.parseInt(targetTextFeild.getText())-10));
                  }
               }catch(Exception e){// do nothing}
           });
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class TableOfControlsInGridPane extends Application {

    @Override
    public void start(Stage primaryStage) {
        Scene scene = new Scene(table(10));
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public GridPane table(int rows){
        GridPane table = new GridPane();

        for(int i=0; i<rows; i++){
            TextField textField = new TextField();
            textField.setAlignment(Pos.CENTER);
            TextField textField2 = new TextField();
            textField2.setAlignment(Pos.CENTER);
            CheckBox checkBox = new CheckBox("Check Box");
            checkBox.setTextFill(Color.WHITE);
            checkBox.setAlignment(Pos.CENTER);
            TextField textField3 = new TextField();
            textField3.setAlignment(Pos.CENTER);

            table.add(textField, 0, i);
            table.add(textField2, 1, i);
            table.add(checkBox , 2, i);
            table.add(textField3,3, i);

            ChangeListener<Object> listener = (obs, oldValue, newValue) -> 
                updateTotalField(textField.getText(), textField2.getText(), checkBox.isSelected(), textField3);

            textField.textProperty().addListener(listener);
            textField2.textProperty().addListener(listener);
            checkBox.selectedProperty().addListener(listener);

            GridPane.setMargin(textField, new Insets(5));
            GridPane.setMargin(textField2, new Insets(5));
            GridPane.setMargin(checkBox, new Insets(5));
            GridPane.setMargin(textField3, new Insets(5));
         }
        table.setAlignment(Pos.CENTER);

        return table;
    }

    private void updateTotalField(String text1, String text2, boolean addPause, TextField output) {
        int value1 = parseText(text1);
        int value2 = parseText(text2);
        int total = value1 + value2 ;
        if (addPause) {
            total += 10 ;
        }
        output.setText(Integer.toString(total));
    }

    private int parseText(String text) {
        // if text is a valid integer:
        if (text.matches("\\d+")) {
            return Integer.parseInt(text);
        } else {
            return 0 ;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44409962" questionTitle="Throwing exception from CompletableFuture">
<Answer><![CDATA[static class Wrapper extends RuntimeException {

    private Wrapper(Throwable throwable) {
        super(throwable);
    }

    public static Wrapper wrap(Throwable throwable) {
        return new Wrapper(throwable);
    }

    public Throwable unwrap() {
        return getCause();
    }
}


 public static void go() {
    CompletableFuture<String> a = CompletableFuture.supplyAsync(() -> {
        try {
            throw new Exception("Just because");
        } catch (Exception ex) {
            throw Wrapper.wrap(ex);
        }
    });

    a.join();
}]]></Answer>
<Answer><![CDATA[public void myFunc() throws ServerException {
    // Some code
    CompletableFuture<A> a = CompletableFuture.supplyAsync(() -> {
        try { return someObj.someFunc(); }
        catch(ServerException ex) { throw new CompletionException(ex); }
    });
    // Some code running in parallel to someFunc()

    A resultOfA;
    try {
        resultOfA = a.join();
    }
    catch(CompletionException ex) {
        try {
            throw ex.getCause();
        }
        catch(Error|RuntimeException|ServerException possible) {
            throw possible;
        }
        catch(Throwable impossible) {
            throw new AssertionError(impossible);
        }
    }
    // some code using resultOfA
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44398290" questionTitle="Srolling on VBox with lots of Textfields">
<Answer><![CDATA[public class BasicView extends View {

    public BasicView(String name) {
        super(name);

        setTop(new Button("Button"));

        VBox controls = new VBox(15.0);

        controls.setAlignment(Pos.CENTER);

        ScrollPane pane = new ScrollPane(controls);
        controls.prefWidthProperty().bind(pane.widthProperty().subtract(20));

        for (int i = 0; i < 100; i++) {
            final Label label = new Label("TextField " + (i + 1));
            final TextField textField1 = new TextField();
            HBox.setHgrow(textField1, Priority.ALWAYS);
            HBox box = new HBox(10, label, textField1);
            box.setMouseTransparent(true);

            box.setAlignment(Pos.CENTER_LEFT);
            box.setPadding(new Insets(5));
            controls.getChildren().add(box);
        }

        addPressAndHoldHandler(controls, Duration.millis(300), eStart -> {
                for (Node box : controls.getChildren()) {
                    box.setMouseTransparent(true);
                }
            }, eEnd -> {
                for (Node box : controls.getChildren()) {
                    if (box.localToScene(box.getBoundsInLocal()).contains(eEnd.getSceneX(), eEnd.getSceneY())) {
                        box.setMouseTransparent(false);
                        ((HBox) box).getChildren().get(1).requestFocus();
                        break;
                    }
                }
            });
        setCenter(pane);

        // iOS only
        Services.get(KeyboardService.class).ifPresent(keyboard -> {
            keyboard.visibleHeightProperty().addListener((obs, ov, nv) -> {
                if (nv.doubleValue() > 0) {
                    for (Node box : controls.getChildren()) {
                        Node n1 = ((HBox) box).getChildren().get(1);
                        if (n1.isFocused()) {
                            double h = getScene().getHeight() - n1.localToScene(n1.getBoundsInLocal()).getMaxY();
                            setTranslateY(-nv.doubleValue() + h);
                            break;
                        }
                    }
                } else {
                    setTranslateY(0);
                }
            });
        });
    }

    @Override
    protected void updateAppBar(AppBar appBar) {
        appBar.setNavIcon(MaterialDesignIcon.MENU.button(e -> System.out.println("Menu")));
        appBar.setTitleText("Scrolling over TextFields");
    }

    private void addPressAndHoldHandler(Node node, Duration holdTime, 
            EventHandler<MouseEvent> handlerStart, EventHandler<MouseEvent> handlerEnd) {
        class Wrapper<T> { 
            T content; 
        }

        Wrapper<MouseEvent> eventWrapper = new Wrapper<>();

        PauseTransition holdTimer = new PauseTransition(holdTime);
        holdTimer.setOnFinished(event -> handlerEnd.handle(eventWrapper.content));

        node.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            handlerStart.handle(event);
            eventWrapper.content = event;
            holdTimer.playFromStart();
        });
        node.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> holdTimer.stop());
        node.addEventHandler(MouseEvent.DRAG_DETECTED, event -> holdTimer.stop());
    }
}]]></Answer>
<Answer><![CDATA[public class MouseClickedFilter{

    private final Node                       observableNode;

    private BooleanProperty                  scrolling          = new ReadOnlyBooleanWrapper(false);

    private EventHandler<? super MouseEvent> dragDetectedFilter = e -> scrolling.set(true);
    private EventHandler<? super MouseEvent> mouseExitedHandler = e -> scrolling.set(false);

    private EventHandler<? super MouseEvent> mouseClickedFilter = evt ->
                                                                    {
                                                                        if (scrolling.get()) {
                                                                            evt.consume();
                                                                            scrolling.set(false);
                                                                        }
                                                                    };

    private boolean                          listenersEnabled;

    public MouseClickedFilter(Node observableNode) {
        this.observableNode = observableNode;
    }

    public void activate() {
        if (!listenersEnabled) {
            observableNode.addEventFilter(MouseEvent.DRAG_DETECTED, dragDetectedFilter);
            observableNode.addEventHandler(MouseEvent.MOUSE_EXITED, mouseExitedHandler);
            observableNode.addEventFilter(MouseEvent.MOUSE_CLICKED, mouseClickedFilter);
        }
    }

    public void deactivate() {
        if (listenersEnabled) {
            observableNode.removeEventFilter(MouseEvent.DRAG_DETECTED, dragDetectedFilter);
            observableNode.removeEventHandler(MouseEvent.MOUSE_EXITED, mouseExitedHandler);
            observableNode.removeEventFilter(MouseEvent.MOUSE_CLICKED, mouseClickedFilter);
        }
    }

    public final ReadOnlyBooleanProperty scrollingProperty() {
        return scrolling;
    }

    public final boolean isScrolling() {
        return scrolling.get();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44365038" questionTitle="How to implement tuple unpacking for function parameters in Java?">
<Answer><![CDATA[package test;


import com.google.common.collect.Iterables;

import java.util.Arrays;
import java.util.function.Function;

import static test.TupleIterable.Func.unpack;
import static test.TupleIterable.Tuple.tuple;

public interface TupleIterable<T> {

    Iterable<T> apply();

    static <E> TupleIterable<E> from(Iterable<E> iterable) {
        return () -> iterable;
    }

    default <E> TupleIterable<E> map(Function<? super T, E> op) {
        return () -> Iterables.transform(TupleIterable.this.apply(), op::apply);
    }

    interface Func {

        static <T1, T2, R> Function<Tuple.Tuple2<T1, T2>, R> unpack(Func2<T1, T2, R> f) {
            return t -> f.apply(t.t1, t.t2);
        }

        static <T1, T2, T3, R> Function<Tuple.Tuple3<T1, T2, T3>, R> unpack(Func3<T1, T2, T3, R> f) {
            return t -> f.apply(t.t1, t.t2, t.t3);
        }

        @FunctionalInterface
        interface Func2<T1, T2, R> {

            R apply(T1 t1, T2 t2);
        }

        @FunctionalInterface
        interface Func3<T1, T2, T3, R> {

            R apply(T1 t1, T2 t2, T3 t3);
        }
    }

    interface Tuple {

        static <T1, T2> Tuple2<T1, T2> tuple(T1 t1, T2 t2) {
            return new Tuple2<>(t1, t2);
        }

        static <T1, T2, T3> Tuple3<T1, T2, T3> tuple(T1 t1, T2 t2, T3 t3) {
            return new Tuple3<>(t1, t2, t3);
        }

        class Tuple2<T1, T2> implements Tuple {

            public T1 t1;

            public T2 t2;

            public Tuple2(T1 t1, T2 t2) {
                this.t1 = t1;
                this.t2 = t2;
            }
        }

        class Tuple3<T1, T2, T3> implements Tuple {

            public T1 t1;

            public T2 t2;

            public T3 t3;

            public Tuple3(T1 t1, T2 t2, T3 t3) {
                this.t1 = t1;
                this.t2 = t2;
                this.t3 = t3;
            }
        }
    }

    public static void main(String[] args) {
        TupleIterable.from(Arrays.asList(1L, 2L))
                .map(x -> tuple(x, x)) // map long to tuple2
                .map(unpack((a, b) -> tuple(a, b, a + b))) // map tuple2 to tuple3
                .map(unpack((a, b, c) -> a + b + c)) // map tuple3 to Long
                .apply()
                .forEach(System.out::println);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.Iterator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;

public class Test {

  public static void main(String... args) {
    MyIterable.from(Arrays.asList(1L, 2L)).mapToTuple(l -> Tuple2.tuple(l, l + 1L)).unwrap((a, b) -> a + b).get()
        .forEach(System.out::println);
  }
}

final class Tuple2<T1, T2> {

  public static <T1, T2> Tuple2<T1, T2> tuple(T1 t1, T2 t2) {
    return new Tuple2<>(t1, t2);
  }

  public final T1 t1;
  public final T2 t2;

  private Tuple2(T1 t1, T2 t2) {
    this.t1 = t1;
    this.t2 = t2;
  }
}

@FunctionalInterface
interface TupleIterable<T1, T2> extends Supplier<Iterable<Tuple2<T1, T2>>> {

  default <E> MyIterable<E> unwrap(BiFunction<T1, T2, E> func) {
    return () -> Iterables.transform(get(), t -> func.apply(t.t1, t.t2));
  }
}

@FunctionalInterface
interface MyIterable<T> extends Supplier<Iterable<T>> {

  static <E> MyIterable<E> from(Iterable<E> iterable) {
    return () -> iterable;
  }

  default <E> MyIterable<E> map(Function<? super T, ? extends E> mapper) {
    return () -> Iterables.transform(get(), mapper::apply);
  }

  default <T1, T2> TupleIterable<T1, T2> mapToTuple(Function<? super T, ? extends Tuple2<T1, T2>> tupleMapper) {
    return () -> Iterables.transform(get(), tupleMapper::apply);
  }
}

final class Iterables {
  public static <T, E> Iterable<E> transform(Iterable<T> iterable, Function<? super T, ? extends E> mapper) {
    return () -> new Iterator<E>() {

      private final Iterator<T> iter = iterable.iterator();

      @Override
      public boolean hasNext() {
        return iter.hasNext();
      }

      @Override
      public E next() {
        return mapper.apply(iter.next());
      }
    };
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44354198" questionTitle="Javafx: Reusable collections using FXML">
<Answer><![CDATA[<HBox xmlns:fx="http://javafx.com/fxml/1" spacing="10">
    <children>
        <ChoiceBox prefWidth="150.0">
            <items>
                <FXCollections fx:id="test" fx:factory="observableArrayList">
                    <String fx:value="1" />
                    <String fx:value="2" />
                    <String fx:value="3" />
                    <String fx:value="4" />
                    <String fx:value="5" />
                    <String fx:value="6" />
                    <String fx:value="7" />
                    <String fx:value="8" />
                    <String fx:value="9" />
                </FXCollections>
            </items>
        </ChoiceBox>
        <ChoiceBox prefWidth="150.0">
            <items>
                <fx:reference source="test" /> <!-- reuse other list here -->
            </items>
        </ChoiceBox>
    </children>
</HBox>]]></Answer>
<Answer><![CDATA[public class Controller {

    private ListProperty<String> choiceBoxItems = new SimpleListProperty(FXCollections.observableArrayList());

    public Controller() {
        IntStream.range(1,10).mapToObj(i -> Integer.toString(i))
            .forEach(choiceBoxItems::add);
    }

    public ListProperty<String> choiceBoxItemsProperty() {
        return choiceBoxItems ;
    }

    public ObservableList<String> getChoiceBoxItems() {
        return choiceBoxItemsProperty().get() ;
    }

    public void setComboBoxItems(ObservableList<String> choiceBoxItems) {
        choiceBoxItemsProperty().set(choiceBoxItems) ;
    }

    // ...
}]]></Answer>
<Answer><![CDATA[public class ComboTest extends Application {

    @Override
    public void start(Stage primaryStage) throws IOException {

        primaryStage.setTitle("Populate combo from custom builder");

        Group group = new Group();
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(25, 25, 25, 25));
        group.getChildren().add(grid);

        FXMLLoader loader = new FXMLLoader(getClass().getResource("combo.fxml"));
        loader.getNamespace().put("itemLoader", new ComboLoader());
        ComboBox<String>combo = loader.load();
        grid.add(combo, 0, 0);

        Scene scene = new Scene(group, 450, 175);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44314740" questionTitle="Write a Java 8 predicate that filters against a value that is not in scope">
<Answer><![CDATA[import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;

public class StreamTest {
    public static void main(String [] args){
        DataContainer dc = new DataContainer();
        Function<LimitValue, Predicate<Integer>> p = limitValue -> {
            return i -> i > limitValue.getValue();
        };

        System.out.println(dc.numberOfValuesSatisfyingPredicate(p, new LimitValue(6)));
    }

}
class DataContainer{
    private List<Integer> l = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

    public long numberOfValuesSatisfyingPredicate(Function<LimitValue, Predicate<Integer>> predicateFactory, LimitValue lv) {
        return l.stream()
                .filter(predicateFactory.apply(lv))
                .count();
    }
}
class LimitValue{
    private int limitValue; 
    public LimitValue(int limitValue){
        this.limitValue = limitValue;
    }
    public int getValue(){
        return limitValue;
    }
}]]></Answer>
<Answer><![CDATA[public class StreamTest {
    public static void main(String[] args) {
        DataContainer dc = new DataContainer();
        BiPredicate<Integer, LimitValue> p = (t, limitValue) -> t > limitValue.getValue();
        System.out.println(dc.numberOfValuesGreaterThan(p, new LimitValue(6)));
    }

}

class DataContainer {
    private int[] l = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    long numberOfValuesGreaterThan(BiPredicate<Integer, LimitValue> predicate, LimitValue lv) {
        return IntStream.of(l)
                .filter(t -> predicate.test(t, lv))
                .count();
    }
}

class LimitValue {
    private int limitValue;

    LimitValue(int limitValue) {
        this.limitValue = limitValue;
    }

    int getValue() {
        return limitValue;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44312354" questionTitle="JavaFx: How to compare values of dynamically created TextFields inside GridPane?">
<Answer><![CDATA[// pass the comboBox.getValue() to the third parameter
private void validateTable(GridPane table, Button button, int numRows) {

   for(Node textField : table.getChildren()){ 
      if(textField instanceof TextField){
         ((TextField)textField).textProperty().addListener((obs, old, newV)->{
           // first of all remove the red border from the invalid TextField (if any)
          // we know that via textFieldIndex which should be -1 if there is no lesser
          // actually it's a pain 
          if(textFieldIndex!=-1){
            ((TextField) getComponent(textFieldIndex, 3, table)).setStyle("");
          }
          if(isAllFilled(table)){ // if all filled ( you already have this method)
             if(hasValidValue(table,numRows)){ // check for validity
                button.setDisable(false); // then make the button active again
             }
             else{// if it's not a valid value
                  // re-style the TextField which has lesser value
                 ((TextField) getComponent(textFieldIndex, 3, table)).
                                        setStyle("-fx-border-color: red;");
                  button.setDisable(true); 
             }
          }
          else{
               button.setDisable(true);
          }
       });
     }  
   }
}]]></Answer>
<Answer><![CDATA[public static GridPane table(int rows){
    GridPane table = new GridPane();

    rowValidationBindings = new BooleanBinding[rows];

    for(int i=0; i<rows; i++){
        TextField textField1 = new JFXTextField();
        textField1.setAlignment(Pos.CENTER);
        TextField textField2 = new JFXTextField();
        textField2.setAlignment(Pos.CENTER);
        TextField textField3 = new JFXTextField();
        textField3.setAlignment(Pos.CENTER);

        rowValidationBindings[i] = Bindings.createBooleanBinding(
            () -> {
                if (textField1.getText().matches("\\d+") &&
                    textField3.getText().matches("\\d+")) {
                    int value1 = Integer.parseInt(textField1.getText());
                    int value3 = Integer.parseInt(textFIeld3.getText());
                    return value3 > value1 ;
                } else {
                    return false ;
                }
            }, textField1.textProperty(), textField2.textProperty()
        );

        //add them to the GridPane
        table.add(textField1, 0, i+1);
        table.add(textField2, 1, i+1);
        table.add(textField3, 2, i+1);
    }

    button.disableProperty().bind(Bindings.createBooleanBinding(
        () -> ! Stream.of(rowValidationBindings).allMatch(BooleanBinding::get),
        rowValidationBindings
    ));

    return table;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44233691" questionTitle="using java streams in parallel with collect(supplier, accumulator, combiner) not giving expected results">
<Answer><![CDATA[public static class WordCountCollector
    implements Collector<Character, SimpleEntry<AtomicInteger, Boolean>, Integer>
{
    @Override
    public Supplier<SimpleEntry<AtomicInteger, Boolean>> supplier()
    {
        return () -> new SimpleEntry<>(new AtomicInteger(0), true);
    }

    @Override
    public BiConsumer<SimpleEntry<AtomicInteger, Boolean>, Character> accumulator()
    {
        return (count, character) -> {
            if (!Character.isWhitespace(character))
            {
                if (count.getValue())
                {
                    String before = count.getKey().get() + " -> ";
                    count.getKey().incrementAndGet();
                    System.out.println(before + count.getKey().get());
                }
                count.setValue(false);
            }
            else
            {
                count.setValue(true);
            }
        };
    }

    @Override
    public BinaryOperator<SimpleEntry<AtomicInteger, Boolean>> combiner()
    {
        return (c1, c2) -> new SimpleEntry<>(new AtomicInteger(c1.getKey().get() + c2.getKey().get()), false);
    }

    @Override
    public Function<SimpleEntry<AtomicInteger, Boolean>, Integer> finisher()
    {
        return count -> count.getKey().get();
    }

    @Override
    public Set<java.util.stream.Collector.Characteristics> characteristics()
    {
        return new HashSet<>(Arrays.asList(Characteristics.CONCURRENT, Characteristics.UNORDERED));
    }
}]]></Answer>
<Answer><![CDATA[public int getWordCountInParallel() {
    return str.codePoints().parallel()
        .collect(WordCountState::new, WordCountState::accumulate, WordCountState::combine)
        .getResult();
}


public class WordCountState {
    private boolean firstSpace, lastSpace=true, initial=true;
    private int counter;

    public void accumulate(int character) {
        boolean white=Character.isWhitespace(character);
        if(lastSpace && !white) counter++;
        lastSpace=white;
        if(initial) {
            firstSpace=white;
            initial=false;
        }
    }
    public void combine(WordCountState b) {
        if(initial) {
            this.initial=b.initial;
            this.counter=b.counter;
            this.firstSpace=b.firstSpace;
            this.lastSpace=b.lastSpace;
        }
        else if(!b.initial) {
            this.counter += b.counter;
            if(!lastSpace && !b.firstSpace) counter--;
            this.lastSpace = b.lastSpace;
        }
    }
    public int getResult() {
        return counter;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44190087" questionTitle="JavaFX: How to set an action to a ComboBox?">
<Answer><![CDATA[ComboBox dropDown = new ComboBox();
        dropDown.getItems().addAll("Mexican Peso", "Canadian Dollar", "Euro", "British Pound");

        Button button = new Button();
        button.setOnAction(event -> {
              //Call a method to determine which item in the list the user has selected
              doAction(dropDown.getValue().toString()); //Send the selected item to the method
        });


  private void doAction(String listItem) {
        switch (listItem) {
              case "Mexican Peso": //Action for this item
                    break;
              case "Canadian Dollar": //Action for this item
                    break;
              case "Euro": //Action for this item
                    break;
              case "British Pound": calculatePound();
                    break;
              default: //Default action
                    break;
        }
  }]]></Answer>
<Answer><![CDATA[public class Currency {

    private final double exchangeRate ;
    private final String name ;

    public Currency(String name, double exchangeRate) {
        this.name = name ;
        this.exchangeRate = exchangeRate ;
    }

    public double convert(double value) {
        return value * exchangeRate ;
    }

    public String getName() {
        return name ;
    }

    @Override
    public String toString() {
        return getName();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44180155" questionTitle="Is Stream.findAny a short-circuit operation?">
<Answer><![CDATA[package test.test;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Stream;

public class Snippet {

    static AtomicInteger predicateApplications;

    public static void main(String arr[]) {
        System.out.println("== Sequential == \n");
        sequential();
        System.out.println(" == Parallel == \n");
        parallel();
    }

    private static void sequential() {
        Stream<String> stream = Stream.of("Alpha", "Beta", "Gamma", "Dolphin", "Fargo", "Mustard", "Lenny", "Mark",
                "Jim", "Arnold", "Loke");
        execute(stream);
    }

    private static void parallel() {
        Stream<String> parallelStream = Stream
                .of("Alpha", "Beta", "Gamma", "Dolphin", "Fargo", "Mustard", "Lenny", "Mark", "Jim", "Arnold", "Loke")
                .parallel();
        execute(parallelStream);
    }

    private static void execute(Stream<String> stream) {
        predicateApplications = new AtomicInteger(0);

        Optional<String> findAny = stream.peek(s -> print(s + "1")).filter(s -> s.contains("a"))
                .peek(s -> print(s + "2")).filter(s -> s.startsWith("F")).findAny();

        String found = findAny.orElse("NONE");
        System.out.println("\nFound: " + found);
        System.out.println("Applications: " + predicateApplications.get());
    }

    private static void print(String s) {
        System.out.print(s + " ");
        predicateApplications.incrementAndGet();
    }

}]]></Answer>
<Answer><![CDATA[public class StreamFilterLazyTest {

  static int stI = 0;

  static class T { 

    public T() {
      super();
      this.i = ++stI;
    }

    int i;

    int getI() {
      System.err.println("getI: "+i);
      return i;
    }
  }

  public static void main(String[] args) {
    T[] arr = {new T(), new T(), new T(), new T(), new T(), new T(), new T(), new T(), new T(), new T()};
    Optional<T> found = Arrays.stream(arr).filter(t -> t.getI() == 3).findAny();
    System.out.println("Found: "+found.get().getI());
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44159794" questionTitle="Get single stage resize event when user releases left mouse button">
<Answer><![CDATA[import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class StageResizeThrottling extends Application {

    private Random rng = new Random();

    @Override
    public void start(Stage primaryStage) {

        BlockingQueue<Point2D> dimensionChangeQueue = new ArrayBlockingQueue<>(1);
        ChangeListener<Number> dimensionChangeListener = (obs, oldValue, newValue) -> {
            dimensionChangeQueue.clear();
            dimensionChangeQueue.add(new Point2D(primaryStage.getWidth(), primaryStage.getHeight()));
        };
        primaryStage.widthProperty().addListener(dimensionChangeListener);
        primaryStage.heightProperty().addListener(dimensionChangeListener);

        Thread processDimensionChangeThread = new Thread(() -> {
            try {
                while (true) {
                    System.out.println("Waiting for change in size");
                    Point2D size = dimensionChangeQueue.take();
                    System.out.printf("Detected change in size to [%.1f, %.1f]: processing%n", size.getX(), size.getY());
                    process(size, primaryStage);
                    System.out.println("Done processing");
                }
            } catch (InterruptedException letThreadExit) { }
        });
        processDimensionChangeThread.setDaemon(true);
        processDimensionChangeThread.start();

        Scene scene = new Scene(new StackPane(), 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void process(Point2D stageDimension, Stage stage) throws InterruptedException {
        // simulate slow process:
        Thread.sleep(500 + rng.nextInt(1000));
        final String title = String.format("Width: %.0f Height: %.0f", stageDimension.getX(), stageDimension.getY());
        Platform.runLater(() -> stage.setTitle(title));
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Cursor;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Screen;
import javafx.stage.Stage;

/**
 * This class to create a default/customized Title Bar 
 * to be added to Undecorated Stage in JavaFX Application
 * @author Yahya Almardeny
 * @version 27/05/2017
 */
public class TitleBar {
    private HBox titleBar;
    private ImageView icon;
    private StackPane close, minimize, maximize; // represent customized components for the title bar (by using the second constructor)
    private Image maximizeBefore, maximizeAfter; // for changing maximize icon when it's full screen
    private Label title;
    private double height, stageWidth, stageHeight, x,y, offsetX, offsetY;
    private double screenWidth = Screen.getPrimary().getVisualBounds().getWidth(), 
                   screenHeight = Screen.getPrimary().getVisualBounds().getHeight();
    private Color backgroundColor;
    private StackPane maximizeButton; // for default title bar
    private Label minimizeButton, closeButton; // for default title bar
    private Stage stage;
    private boolean intialized = false, fromMax = false;

    public static enum Components {ICON,TITLE,MINIMIZE,MAXIMIZE,CLOSE;}

    /**
     * the default constructor, appearance of Windows 10
     * @param title
     */
    public TitleBar(String title){
        titleBar = new HBox();

        icon =  new ImageView(new Image(TitleBar.class.getResourceAsStream("/icon/icon.png")));
        icon.setFitWidth(15); this.icon.setFitHeight(13); 

        closeButton = new Label("×");
        closeButton.setFont(Font.font("Times New Roman", 25));
        closeButton.setPrefWidth(46);
        closeButton.setAlignment(Pos.CENTER);

        minimizeButton = new Label("—");
        minimizeButton.setFont(Font.font(10));
        minimizeButton.setPrefWidth(46);
        minimizeButton.setPrefHeight(29);

        minimizeButton.setAlignment(Pos.CENTER);
        maximizeButton = maximiazeButton();

        this.title = new Label(title);

        final Pane space = new Pane();
        HBox.setHgrow(space,Priority.ALWAYS);

        titleBar.getChildren().addAll(this.icon, this.title,space,this.minimizeButton, this.maximizeButton, this.closeButton);
        titleBar.setAlignment(Pos.CENTER_RIGHT);

        HBox.setMargin(this.icon, new Insets(0,5,0,10)); // top,right, bottom, left

        initalize(); // private method to get the Stage for first time
        setDefaultControlsFunctionality(); // private method to add the default controls functionality

    }


    /**
     * This is constructor to create a custom title bar
     * @param icon
     * @param minimize
     * @param maximize
     * @param close
     * @param title
     */
    public TitleBar(Image icon, Image minimize, Image maximizeBefore, Image maximizeAfter, Image close, String title){
        titleBar = new HBox();

        this.icon =  new ImageView(icon);
        this.icon.setFitWidth(15); this.icon.setFitHeight(14);  // values can be changed via setters

        this.close = new StackPane();
        this.close.setPrefSize(25, 20);
        this.close.getChildren().add(new ImageView(close));
        ((ImageView) this.close.getChildren().get(0)).setFitWidth(20);
        ((ImageView) this.close.getChildren().get(0)).setFitHeight(20);

        this.minimize = new StackPane();
        this.minimize.setPrefSize(25, 20);
        this.minimize.getChildren().add(new ImageView(minimize));
        ((ImageView) this.minimize.getChildren().get(0)).setFitWidth(20);
        ((ImageView) this.minimize.getChildren().get(0)).setFitHeight(20);

        this.maximizeBefore = maximizeBefore;
        this.maximize = new StackPane();
        this.maximize.setPrefSize(25, 20);
        this.maximize.getChildren().add(new ImageView(maximizeBefore));
        ((ImageView) this.maximize.getChildren().get(0)).setFitWidth(20);
        ((ImageView) this.maximize.getChildren().get(0)).setFitHeight(20);
        this.maximizeAfter = maximizeAfter;

        this.title = new Label(title);

        final Pane space = new Pane();
        HBox.setHgrow(space,Priority.ALWAYS);

        titleBar.getChildren().addAll(this.icon, this.title,space,this.minimize, this.maximize, this.close);
        titleBar.setAlignment(Pos.CENTER_RIGHT);

        HBox.setMargin(this.icon, new Insets(0,5,0,10)); // top,right, bottom, left
        HBox.setMargin(this.close, new Insets(0,5,0,0));

        initalize();
        setCustomizedControlsFunctionality();
    }



    /**
     * create the default maximize button
     * @return container
     */
    private StackPane maximiazeButton(){
        StackPane container = new StackPane();
        Rectangle rect = new Rectangle(8,8);
        rect.setFill(Color.TRANSPARENT);
        rect.setStroke(Color.BLACK);
        container.setPrefWidth(46);
        container.getChildren().add(rect);  

        return container;
    }



    /**
     * To get the Stage of the application for one time only
     * as well as adding listener to iconifiedProperty()
     */
    private void initalize(){
       titleBar.setOnMouseEntered(e->{ // the entire block will be executed only once
          if(!intialized){
             // get the stage and assign it to the Stage field
             stage = ((Stage)titleBar.getScene().getWindow());

             // add listener toiconifiedProperty()
             stage.iconifiedProperty().addListener(ee->{
                 if(!stage.isIconified()){ 
                    stage.setMaximized(true);
                    if(fromMax){ // if already maximized
                       stage.setWidth(screenWidth);
                       stage.setHeight(screenHeight);
                       stage.setX(0);
                       stage.setY(0);
                    }
                    else{
                        stage.setWidth(stageWidth);
                        stage.setHeight(stageHeight);
                        stage.setX(x);
                        stage.setY(y);
                    }
                    try { // to remove the flash
                         Thread.sleep(10);
                    } catch (InterruptedException ex) { 
                         ex.printStackTrace();
                    }
                    stage.setOpacity(1.0);
                 }
            });


            intialized=true;
         }
       });  
    }


    /**
     * To add functionality to title bar controls
     * via event listeners
     */
    private void setDefaultControlsFunctionality(){

        // Double-Click on Title Bar
        titleBar.setOnMouseClicked(e->{
            if(e.getClickCount()==2){
                maximizefunctonality();
            }       
        });

        //Maximize Control
        maximizeButton.setOnMouseEntered(e->{// highlight when hover    
            maximizeButton.setBackground(
                new Background(new BackgroundFill(Color.LIGHTGRAY,null,null)));
                ((Rectangle)maximizeButton.getChildren().get(0)).setFill(Color.LIGHTGRAY);
                if(maximizeButton.getChildren().size()==2){
                   ((Rectangle)maximizeButton.getChildren().get(1)).setFill(Color.LIGHTGRAY);
                }

        });
        maximizeButton.setOnMouseExited(e->{ // remove highlight 
            maximizeButton.setBackground(
                new Background(new BackgroundFill(Color.TRANSPARENT,null,null)));
               ((Rectangle)maximizeButton.getChildren().get(0)).setFill(Color.TRANSPARENT);
               if(maximizeButton.getChildren().size()==2){
                  ((Rectangle)maximizeButton.getChildren().get(1)).setFill(Color.WHITE);
                }
        });
        maximizeButton.setOnMouseClicked(e->{
            maximizefunctonality();

        });

        //Close Control
        closeButton.setOnMouseEntered(e->{
            closeButton.setBackground(
                new Background(new BackgroundFill(Color.CRIMSON,null,null)));
                closeButton.setTextFill(Color.WHITE);
        });
        closeButton.setOnMouseExited(e->{
            closeButton.setBackground(
                new Background(new BackgroundFill(Color.TRANSPARENT,null,null)));
                closeButton.setTextFill(Color.BLACK);
        });

        closeButton.setOnMouseClicked(e->{
            stage.close();  
        });


        //Minimize Control
        minimizeButton.setOnMouseEntered(e->{
            minimizeButton.setBackground(
                new Background(new BackgroundFill(Color.LIGHTGRAY,null,null))); 
        });
        minimizeButton.setOnMouseExited(e->{
            minimizeButton.setBackground(
                new Background(new BackgroundFill(Color.TRANSPARENT,null,null)));
        });
        minimizeButton.setOnMouseClicked(e->{
            if(!stage.isIconified()){ // if it's not minimized
                if(fromMax){ // check if it's already full screen(maximized)
                    stage.setOpacity(0.0);
                    stage.setIconified(true); // minimize it
                }
                else{ // if it's not -> record the size and position
                    stageWidth = stage.getWidth();
                    stageHeight = stage.getHeight();
                    x = stage.getX();
                    y = stage.getY();
                    stage.setOpacity(0.0);
                    stage.setIconified(true); // minimize it
                }
            }
        });

        // to make title bar movable
        titleBar.setOnMousePressed(e->{
            if(stage.getWidth()<screenWidth || stage.getHeight()<screenHeight){
                offsetX = e.getScreenX() - stage.getX();
                offsetY = e.getScreenY() - stage.getY();
            }
        });
        titleBar.setOnMouseDragged(e->{
            if(stage.getWidth()<screenWidth || stage.getHeight()<screenHeight){
                stage.setX(e.getScreenX() - offsetX);
                stage.setY(e.getScreenY() - offsetY);
            }
        });

    }



    private void maximizefunctonality(){
        Rectangle rect = (Rectangle) maximizeButton.getChildren().get(0);
        if(stage.getWidth()<screenWidth||stage.getHeight()<screenHeight){
            // get the previous size + position
            stageWidth = stage.getWidth();
            stageHeight = stage.getHeight();
            x = stage.getX();
            y = stage.getY();
            // maximize it
            stage.setWidth(screenWidth);
            stage.setHeight(screenHeight);
            stage.centerOnScreen();

            // change the maximize button appearance
            rect.setTranslateX(2);
            rect.setTranslateY(-2);
            Rectangle rect1 = new Rectangle(8,8);
            rect1.setFill(Color.WHITE);
            rect1.setStroke(Color.BLACK);
            maximizeButton.getChildren().add(rect1);

            fromMax = true;
        }
        else{ // if already maximized -> return to previous size + position
            stage.setWidth(stageWidth);
            stage.setHeight(stageHeight);
            stage.setX(x);
            stage.setY(y);  
            fromMax = false;

            // change the maximize button appearance
            rect.setTranslateX(0);
            rect.setTranslateY(0);
            maximizeButton.getChildren().remove(1);
        }

    }



    private void setCustomizedControlsFunctionality(){

        //Maximize Control
        maximize.setOnMouseClicked(e->{
            if(stage.getWidth()<screenWidth||stage.getHeight()<screenHeight){
                // get the previous size + position
                stageWidth = stage.getWidth();
                stageHeight = stage.getHeight();
                x = stage.getX();
                y = stage.getY();
                // maximize it
                stage.setWidth(screenWidth);
                stage.setHeight(screenHeight);
                stage.centerOnScreen();

                // change the maximize button appearance
                ((ImageView) maximize.getChildren().get(0)).setImage(maximizeAfter);

                fromMax = true;
            }
            else{ // if already maximized -> return to previous size + position
                stage.setWidth(stageWidth);
                stage.setHeight(stageHeight);
                stage.setX(x);
                stage.setY(y);  
                fromMax = false;

                // change the maximize button appearance
                ((ImageView) maximize.getChildren().get(0)).setImage(maximizeBefore);
            }

        });

        close.setOnMouseClicked(e->{
            stage.close();  
        });


        //Minimize Control
        minimize.setOnMouseClicked(e->{
            if(!stage.isIconified()){ // if it's not minimized
                if(fromMax){ // check if it's already full screen(maximized)
                    stage.setOpacity(0.0);
                    stage.setIconified(true); // minimize it
                }
                else{ // if it's not -> record the size and position
                    stageWidth = stage.getWidth();
                    stageHeight = stage.getHeight();
                    x = stage.getX();
                    y = stage.getY();
                    stage.setOpacity(0.0);
                    stage.setIconified(true); // minimize it
                }
            }
        });

        // to make title bar movable
        titleBar.setOnMousePressed(e->{
            if(stage.getWidth()<screenWidth || stage.getHeight()<screenHeight){
                offsetX = e.getScreenX() - stage.getX();
                offsetY = e.getScreenY() - stage.getY();
            }
        });
        titleBar.setOnMouseDragged(e->{
            if(stage.getWidth()<screenWidth || stage.getHeight()<screenHeight){
                stage.setX(e.getScreenX() - offsetX);
                stage.setY(e.getScreenY() - offsetY);
            }
        });

    }



    /**
     * To change margins/insets to the Title Bar components
     * @param component
     * @param top
     * @param right
     * @param bottom
     * @param left
     */
    public void setInsets(Components component, double top, double right, double bottom, double left){
        switch(component){
        case TITLE:
            HBox.setMargin(title, new Insets(top, right, bottom ,left));
            break;
        case ICON:
            HBox.setMargin(icon, new Insets(top, right, bottom ,left));
            break;
        case CLOSE:
            HBox.setMargin(close, new Insets(top, right, bottom ,left));
            break;
        case MAXIMIZE:
            HBox.setMargin(maximize, new Insets(top, right, bottom ,left));
            break;
        case MINIMIZE:
            HBox.setMargin(minimize, new Insets(top, right, bottom ,left));
            break;
        }
    }



    public void setControlsSpace(Components component, double width, double height){
        switch(component){

        case CLOSE:
            close.setPrefSize(width, height);
            break;
        case MAXIMIZE:
            maximize.setPrefSize(width, height);
            break;
        case MINIMIZE:
            minimize.setPrefSize(width, height);
            break;
        case TITLE:
            //do nothing
            break;
        case ICON:
            // do nothing
            break;
        }
    }


    public void addHoverEffect(Components component, Color defaultColor, Color onHover, Cursor cursor){

    }

    //reset of the class
    {...}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44144968" questionTitle="Divide the bigdecimal value in a list of object using java 8?">
<Answer><![CDATA[enum Frequency {
    ANUALLY(12), QUARTERLY(3), MONTHLY(1);

    private final int months;

    Frequency(final int months) {
        this.months = months;
    }

    private BigDecimal monthly(BigDecimal amount) {
        return amount.divide(BigDecimal.valueOf(months));
    }
}

class Invoice {
    private Frequency frequency;
    private BigDecimal amount;

    public Invoice(Frequency frequency, BigDecimal amount) {
        this.frequency = frequency;
        this.amount = amount;
    }

    private Invoice monthly() {
        return new Invoice(Frequency.MONTHLY, frequency.monthly(this.amount));
    }

    // getters are ignored here
    @Override
    public String toString() {
        return "Invoice [frequency=" + frequency + ", amount=" + amount + "]";
    }
}]]></Answer>
<Answer><![CDATA[static class Invoice {
    final BigDecimal amount;
    final int months;

    Invoice(BigDecimal amount, int months) {
        this.amount = amount;
        this.months = months;
    }
}

public static void main(String[] args) {
    List<Invoice> invoices = Arrays.asList(
            new Invoice(new BigDecimal("12.50"), 3),
            new Invoice(new BigDecimal("120.50"), 12),
            new Invoice(new BigDecimal("7.25"), 3));
    BigDecimal sum = invoices.stream()
            .map(inv -> inv.amount.divide(BigDecimal.valueOf(inv.months),
                                          RoundingMode.HALF_UP))
            .reduce(BigDecimal.ZERO, BigDecimal::add);

    System.out.println("Sum: " + sum); // 16.63
}]]></Answer>
<Answer><![CDATA[public enum Frequency {
        ANUALLY(12), QUARTERLY(3);

        private final int divideBy;

        Frequency(final int div) { this.divideBy = div; }

        public int getDivideBy() { return this.divideBy; }
    }

    public class InvoiceMain {

        public static void main(String[] args) {
        List<Invoice> invoiceList = Arrays.asList(new Invoice(Frequency.QUARTERLY,new     BigDecimal(300)), new Invoice(Frequency.ANUALLY, new BigDecimal(1200)));
        for(Invoice invoice: invoiceList) {
            invoice.setAmount(invoice.getAmount().divide(invoice.getFrequency().getDivideBy())));
        }
        System.out.println(invoiceList);
    }
}


class Invoice {
private Frequency frequency;
private BigDecimal amount;
public Invoice(Frequency frequency, BigDecimal amount) {
    super();
    this.frequency = frequency;
    this.amount = amount;
}
public Frequency getFrequency() {
    return frequency;
}
public void setFrequency(Frequency frequency) {
    this.frequency = frequency;
}
public BigDecimal getAmount() {
    return amount;
}
public void setAmount(BigDecimal amount) {
    this.amount = amount;
}
@Override
public String toString() {
    return "Invoice [frequency=" + frequency + ", amount=" + amount + "]";
}]]></Answer>
<Answer><![CDATA[public class InvoiceMain {
public static void main(String[] args) {
    List<Invoice> invoiceList = Arrays.asList(new 
    Invoice("Quarterly",300.0),new Invoice("Annually", 1200.0));            
    Map<String, Double> frequencyFactor = new HashMap<>();
    frequencyFactor.put("Annually", (Double)(1.0 / 12));
    frequencyFactor.put("Quarterly",(Double)(1.0 / 3));
    for (Invoice invoice : invoiceList) {
        switch (invoice.getFrequency()) {
        case "Quarterly": // divide by 4, to convert to Monthly
        invoice.setAmount(invoice.getAmount() *
(frequencyFactor.get(invoice.getFrequency())));    
            break;
        case "Annually": // divide by 12, to convert to Monthly
            invoice.setAmount(invoice.getAmount() * 
(frequencyFactor.get(invoice.getFrequency())));
            break;
        }
    }
    System.out.println(invoiceList);
 }
}

class Invoice {
private String frequency;
private Double amount;

public Invoice(String frequency, Double amount) {
    super();
    this.frequency = frequency;
    this.amount = amount;
}

public String getFrequency() {
    return frequency;
}

public void setFrequency(String frequency) {
    this.frequency = frequency;
}

public double getAmount() {
    return amount;
}

public void setAmount(Double amount) {
    this.amount = amount;
}

@Override
public String toString() {
    return "Invoice [frequency=" + frequency + ", amount=" + amount + "]";
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44108257" questionTitle="right click event and double click event on tableview javafx">
<Answer><![CDATA[words_table.setRowFactory(  
    new Callback<TableView<WordsToFind>, TableRow<WordsToFind>>() {
    @Override
    public TableRow<WordsToFind> call(TableView<WordsToFind> tableView) {
    final TableRow<WordsToFind> row = new TableRow<>();
    row.setOnMouseClicked(new EventHandler<MouseEvent>(){
        @Override
            public void handle(MouseEvent event){

                if (event.getClickCount() == 2 && (! row.isEmpty()) ) {
                   //double click code here
                }
                else if(event.isSecondaryButtonDown()){
                  //right click code here
                }
        }
    });
    return row;
        }    
    });]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

public class RowFactoryExample extends Application {

    @Override
    public void start(Stage primaryStage) {

        TableView<Item> table = new TableView<>();
        table.getColumns().add(column("Item", Item::nameProperty));
        table.getColumns().add(column("Value", Item::valueProperty));
        table.getItems().setAll(createData());

        table.setRowFactory(tableView -> {
            final TableRow<Item> row = new TableRow<>();
            final ContextMenu rowMenu = new ContextMenu();
            MenuItem removeItem = new MenuItem("Delete");
            removeItem.setOnAction(e -> {
                table.getItems().remove(row.getItem());
            });

            rowMenu.getItems().addAll(removeItem);
            row.contextMenuProperty().bind(
                Bindings.when(Bindings.isNotNull(row.itemProperty()))
                        .then(rowMenu)
                        .otherwise((ContextMenu)null));

            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && (! row.isEmpty()) ) {
                    System.out.println("Double click on "+row.getItem().getName());
                }
            });

            return row;
        });

        Scene scene = new Scene(table, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private <S,T> TableColumn<S,T> column(String text, Function<S, ObservableValue<T>> prop) {
        TableColumn<S,T> col = new TableColumn<>(text);
        col.setCellValueFactory(cellData -> prop.apply(cellData.getValue()));
        return col ;
    }

    private List<Item> createData() {
        Random rng = new Random();
        List<Item> data = new ArrayList<>();
        for (int i = 1 ; i <= 100; i++) {
            data.add(new Item("Item "+i, rng.nextInt(1000))) ;
        }
        return data ;
    }

    public static class Item {

        private final StringProperty name = new SimpleStringProperty();
        private final IntegerProperty value = new SimpleIntegerProperty();

        public Item(String name, int value) {
            setName(name);
            setValue(value);
        }

        public final StringProperty nameProperty() {
            return this.name;
        }


        public final String getName() {
            return this.nameProperty().get();
        }


        public final void setName(final String name) {
            this.nameProperty().set(name);
        }


        public final IntegerProperty valueProperty() {
            return this.value;
        }


        public final int getValue() {
            return this.valueProperty().get();
        }


        public final void setValue(final int value) {
            this.valueProperty().set(value);
        }



    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44078633" questionTitle="Why java Map.merge does not pass a supplier?">
<Answer><![CDATA[public static <K, V> V putOrConsume(
        Map<K, V> map,
        K key,
        Supplier<V> ifAbsent,
        Consumer<V> ifPresent) {

    class AbsentSupplier implements Supplier<V> {
        boolean used = false;

        public V get() {
            used = true;
            return ifAbsent.get();
        }
    }
    AbsentSupplier absentSupplier = new AbsentSupplier();

    V computed = map.compute(
            key,
            (k, v) -> v == null ?
                    absentSupplier.get() :
                    consumeAndReturn(v, ifPresent));

    return absentSupplier.used ? null : computed;
}

private static <V> V consumeAndReturn(V v, Consumer<V> consumer) {
    consumer.accept(v);
    return v;
}]]></Answer>
<Answer><![CDATA[//only consuming if value is present
Consumer<V> action = ...;
map.compute(key,ValueMapping.ifPresent(action));

//create value if value is absent
Supplier<V> supplier = ...;
map.compute(key,ValueMapping.ifPresent(action).orElse(supplier));

//map value from key if value is absent
Function<K,V> mapping = ...;
map.compute(key,ValueMapping.ifPresent(action).orElse(mapping));

//orElse supports short-circuit feature
map.compute(key,ValueMapping.ifPresent(action)
                            .orElse(supplier)
                            .orElse(() -> fail("it should not be called "+
                                 "if the value computed by the previous orElse")));

<T> T fail(String message) {
    throw new AssertionError(message); 
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44060204" questionTitle="JavaFX label will not continuously update">
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

public class First extends Application {
    Stage mainStage;
    Scene mainScene;

    Button mainButton;
    Button mainButton2;
    Label mainLabel;

    public static void main(String[] args) {
        launch(args);

    }

    @Override
    public void start(Stage stage) throws Exception {

        mainStage = stage;
        mainButton = new Button("Begin!");
        mainButton2 = new Button("Begin2!");
        mainLabel = new Label("Ready");

        VBox box = new VBox(50);
        box.getChildren().addAll(mainLabel, mainButton, mainButton2);

        mainScene = new Scene(box, 200, 200);
        mainStage.setScene(mainScene);
        mainStage.setTitle("Test Program");
        mainStage.show();


        mainButton.setOnAction(e -> {
            final Second s = new Second();

            mainLabel.textProperty().bind(s.getProperty());

            Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(0), new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent actionEvent) {
                    s.count();
                }
            }), new KeyFrame(Duration.seconds(Second.DURATION)));

            timeline.setCycleCount(11);
            timeline.play();

        });

        mainButton2.setOnAction(event -> {
            final Second s = new Second();
            s.count2(mainLabel);

        });

        //
    }
}

class Second {

    private StringProperty strP = new SimpleStringProperty(this, "strProperty", "");
    private int myCount;
    public static float DURATION = 0.25F;
    public static long DURATION_SEC = (long)DURATION * 1000;

    Second()
    {
        myCount = 0;
    }

    public void count2(final Label mainLabel) {
        Task<Void> task = new Task<Void>() {
            @Override 
            public Void call() throws Exception {
                for (int i=1; i<=10; i++) {
                    updateMessage("Count: "+i);
                    Thread.sleep(DURATION_SEC);
                }
                return null ;
            }
        };

        task.messageProperty().addListener((obs, oldMessage, newMessage) -> mainLabel.setText(newMessage));
        new Thread(task).start();
    }

    // Get Property
    public StringProperty getProperty() {
        return strP;
    }

    // Get String
    public String getString() {
        return strP.get();
    }

    public void count()
    {
        this.strP.set("Count: "+myCount++);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.*;
import javafx.event.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;
import javafx.util.*;

/**
 *
 * @author Sedrick
 */
public class First  extends Application {

    Stage mainStage;
    Scene mainScene;

    Button mainButton;
    Label mainLabel;

    public static void main(String[] args)
    {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception
    {

        mainStage = stage;
        mainButton = new Button("Begin!");
        mainLabel = new Label("Ready");

        VBox box = new VBox(50);
        box.getChildren().addAll(mainLabel, mainButton);

        mainScene = new Scene(box, 200, 200);
        mainStage.setScene(mainScene);
        mainStage.setTitle("Test Program");
        mainStage.show();

        //Handles Button Press
        mainButton.setOnAction(e -> {
            Second s = new Second();
            mainLabel.textProperty().bind(s.getProperty());
            Timeline timeline = new Timeline(
                    new KeyFrame(Duration.seconds(0),
                            new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent actionEvent)
                        {
                            s.setStrP(Integer.toString(Integer.parseInt(s.getStrP()) + 1));//I think you should have used an Integer here.
                        }
                    }
                    ),
                    new KeyFrame(Duration.seconds(1))//Do something every second. In this case we are going to increment setStrP.
            );
            timeline.setCycleCount(10);//Repeat this 10 times
            timeline.play();
        });
    }
}



import javafx.beans.property.*;

public class Second {

    private StringProperty strP = new SimpleStringProperty();

    Second()
    {
        setStrP("0");//set to zero
    }
//Get Property

    public StringProperty getProperty()
    {
        return strP;
    }

//Get String
    public String getStrP()
    {
        return strP.get();
    }

//Changes StringProperty every 0.25s
    public void setStrP(String i)
    {
        this.strP.set(i);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44022381" questionTitle="Keep ListView with Checkboxes synchronized with a list of Strings">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableSet;
import javafx.collections.SetChangeListener;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.cell.CheckBoxListCell;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class ListViewWithCheckBoxes extends Application {

    @Override
    public void start(Stage primaryStage) {
        ListView<String> toppingsList = new ListView<>();
        String[] toppings = {"Cheese", "Tomato Sauce", "Pepperoni", "Black Olives"};
        toppingsList.getItems().addAll(toppings);

        ObservableSet<String> selectedToppings = FXCollections.observableSet();

        toppingsList.setCellFactory(CheckBoxListCell.forListView(new Callback<String, ObservableValue<Boolean>>() {
            @Override
            public ObservableValue<Boolean> call(String item) {
                BooleanProperty observable = new SimpleBooleanProperty();
                observable.addListener((obs, wasSelected, isNowSelected) -> {
                    if (isNowSelected) {
                        selectedToppings.add(item);
                    } else {
                        selectedToppings.remove(item);
                    }
                    System.out.println(selectedToppings.size());

                });

                observable.set(selectedToppings.contains(item));
                selectedToppings.addListener((SetChangeListener.Change<? extends String> c) -> 
                    observable.set(selectedToppings.contains(item)));

                return observable;
            }
        }));


        // example of a button that changes what's selected in the list
        // This selects "Cheese" and "Tomato Sauce" and deselects everything else
        Button justCheese = new Button("Just a cheese pizza");
        justCheese.setOnAction(e -> {
            selectedToppings.clear();
            selectedToppings.add("Cheese");
            selectedToppings.add("Tomato Sauce");
        });

        BorderPane root = new BorderPane(toppingsList);
        root.setTop(justCheese);
        BorderPane.setMargin(justCheese, new Insets(5));

        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[ListView<String> listViewAttributes = new ListView<>();

        List<String> selectedAttributes = new ArrayList<>();
        selectedAttributes.add("Pepperoni");

        String[] toppings = { "Cheese", "Pepperoni", "Black Olives" };
        listViewAttributes.getItems().addAll(toppings);
        listViewAttributes
                .setCellFactory(CheckBoxListCell.forListView(new Callback<String, ObservableValue<Boolean>>() {
                    @Override
                    public ObservableValue<Boolean> call(String item) {
                        BooleanProperty observable = new SimpleBooleanProperty();
                        for (int i = 0; i < selectedAttributes.size(); i++) {
                            if (item.equals(selectedAttributes.get(i))) {
                                observable.set(true);
                            }
                        }
                        observable.addListener((obs, wasSelected, isNowSelected) -> {
                            if (isNowSelected) {
                                selectedAttributes.add(item);
                            } else {
                                selectedAttributes.remove(item);
                            }
                            System.out.println(selectedAttributes.size());

                        });
                        return observable;
                    }
                }));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43984021" questionTitle="Retriving the image from DB to imageView">
<Answer><![CDATA[ConnectionHelper ch=new ConnectionHelper();
ch.Connect();
String q="SELECT IMG FROM img_ins";

Statement st=ch.con.createStatement();
ResultSet rs = st.executeQuery(q);

if (rs.next()) {
    InputStream is= rs.getBinaryStream("IMG");

    // instead of the next 9 lines, you could just do
    // javafx.scene.image.Image image1 = new Image(is);

    OutputStream os=new FileOutputStream(new File("img.jpg"));
    byte [] content= new byte[1024];
    int size=0;


        while ((size=is.read(content))!=-1){

            os.write(content, 0, size);
        }

    os.close();
    is.close();

    javafx.scene.image.Image image1=new Image("file:img.jpg", image.getFitWidth(), image.getFitHeight(), true, true);
    image.setImage(image1);
    image.setPreserveRatio(true);
}]]></Answer>
<Answer><![CDATA[try (Connection conn = DriverManager.getConnection("jdbc:sqlite:contactFX.db");
             Statement stmt = conn.createStatement(); 
             ResultSet rset = stmt.executeQuery(sqlTCNote)) 
        {
            while(rset.next())
            {                
                Company c1 = new Company();  
                c1.setID(Integer.toString(rset.getInt("company_id")));
                c1.setName(rset.getString("company_name"));
                .
                .
                .
                c1.setWebSiteAddress(rset.getString("website_address"));  

                //This part is important to you.
                InputStream input = rset.getBinaryStream("image");
                InputStreamReader inputReader = new InputStreamReader(input);                        
                if(inputReader.ready())
                {
                    File tempFile = new File("tempFile.jpg");

                    FileOutputStream fos = new FileOutputStream(tempFile);
                    byte[] buffer = new byte[1024];
                    while(input.read(buffer) > 0){
                        fos.write(buffer);                        
                    }
                    Image image = new Image(tempFile.toURI().toURL().toString());
                    c1.setImage(image);//right here is where you want to set your imageView with the image.
                }     
                companyData.add(c1);
            }              
        }
        catch(SQLException | IOException ex)
        {
            Logger.getLogger(MainController.class.getName()).log(Level.SEVERE, null, ex);
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43942705" questionTitle="Java 8 collect, count with sum">
<Answer><![CDATA[public static <T, K> Collector<T, ?, Map<K, Long>> groupsWithTotal(
    Function<? super T, ? extends K> classifier,
    K totalKeyName) {

    class Acc {
        Map<K, Long> map = new LinkedHashMap<>();
        long total = 0L;

        void accumulate(T elem) {
            this.map.merge(classifier.apply(elem), 1L, Long::sum);
            this.total++;
        }

        Acc combine(Acc another) {
            another.map.forEach((k, v) -> {
                this.map.merge(k, v, Long::sum);
                this.total += v;
            });
            return this;
        }

        Map<K, Long> finish() {
            this.map.put(totalKeyName, total);
            return this.map;
        }
    }

    return Collector.of(Acc::new, Acc::accumulate, Acc::combine, Acc::finish);
}]]></Answer>
<Answer><![CDATA[import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Getter @Setter
@AllArgsConstructor
class Product {
    private String name;
    private Long date;
}

public class Practice1 {
    public static void main(String... args) {
        final List<Product> list = new ArrayList<>();
        list.add(new Product("ABC", 1L));
        list.add(new Product("ABC", 1L));
        list.add(new Product("XYZ", 1L));
        list.add(new Product("ABC", 2L));

        Map<Long, Map<String, Long>> finalMap = list.stream()
                .collect(
                        Collectors.groupingBy(
                                Product::getDate,
                                Collectors.collectingAndThen(
                                        Collectors.groupingBy(Product::getName, Collectors.counting()),
                                        map -> {
                                            long sum = map.values().stream().reduce(0L, Long::sum);
                                            map.put("total", sum);
                                            return map;
                                        }
                                )

                        )
                );

        System.out.println(finalMap);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43935229" questionTitle="HashMap with 8 million entries becomes slow">
<Answer><![CDATA[package util;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class CachedHashMap<K, V> extends HashMap<K, V>{

private static final long serialVersionUID = 36215319740415714L;

private LRUCache<K, V> cache;
private LRUCache<K, Boolean> containsCache;

public CachedHashMap(int cacheSize){
    containsCache = new LRUCache<>(2*cacheSize);
    cache = new LRUCache<>(cacheSize);
}

@Override
public V put(K key, V value){

    cache.put(key, value);
    containsCache.put(key, true);
    return super.put(key, value);

}

@Override
public boolean containsKey(Object key){

    if(containsCache.containsKey(key)){
        return containsCache.get(key);
    }

    boolean contains = super.containsKey(key);

    containsCache.put((K) key, contains);

    return contains;

}

@Override
public V remove(Object key){
    containsCache.remove(key);
    cache.remove(key);
    return super.remove(key);
}

@Override
public V get(Object key){
    if(containsCache.containsKey(key)){
        if(!containsCache.get(key))
            return null;
    }

    V value = cache.get(key);
    if(value != null)
        return value;

    value = super.get(key);

    K keyCast = (K) key;
    if(value != null){
        containsCache.put(keyCast, true);
        cache.put(keyCast, value);
    }else{
        containsCache.put(keyCast, false);
    }

    return value;
}

class LRUCache<A, B> extends LinkedHashMap<A, B> {
private static final long serialVersionUID = -5958373482978477783L;

private int cacheSize;

  public LRUCache(int cacheSize) {
    super(16, 0.75f, true);
    this.cacheSize = cacheSize;
  }

  protected boolean removeEldestEntry(Map.Entry<A, B> eldest) {
    return size() >= cacheSize;
  }
}

}]]></Answer>
<Answer><![CDATA[import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.TearDown;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

import javafx.geometry.Point2D;

@BenchmarkMode(org.openjdk.jmh.annotations.Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@Warmup(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)
public class TwoMapsTest {
    public static void main(String[] args) throws RunnerException {

        Options opt = new OptionsBuilder().include(EightMillionsTest.class.getSimpleName())
                .jvmArgs("-ea", "-Xms10g", "-Xmx10g")
                .shouldFailOnError(true)
                .build();
        new Runner(opt).run();
    }

    // the check bellow assert map.size() == numberOfElements; can absolutely fail
    // fingers crossed that it does not.

    @State(Scope.Thread)
    public static class Map_10 {

        int numberOfElements = 10;

        public Map<Point2D, Integer> map = new HashMap<>();

        public Point2D mightBePresent = null;

        public Point2D isPresent = null;

        @Setup(Level.Iteration)
        public void setUp() {
            int randomInsideHowManyBoundry = ThreadLocalRandom.current().nextInt(numberOfElements);
            for (int i = 0; i < numberOfElements; ++i) {

                double[] d = generateTwoPoints(-3.0, 3.9999, 4);
                Point2D p = new Point2D(d[0], d[1]);

                if (isPresent == null && i == randomInsideHowManyBoundry) {
                    isPresent = new Point2D(d[0], d[1]);
                }
                map.put(p, i);
            }

            assert map.containsKey(isPresent);
            assert map.size() == numberOfElements;
        }

        @TearDown(Level.Iteration)
        public void tearDown() {
            map.clear();
        }
    }

    @State(Scope.Thread)
    public static class Map_10_000 {

        int numberOfElements = 10_000;

        public Map<Point2D, Integer> map = new HashMap<>();

        public Point2D mightBePresent = null;

        public Point2D isPresent = null;

        @Setup(Level.Iteration)
        public void setUp() {
            int randomInsideHowManyBoundry = ThreadLocalRandom.current().nextInt(numberOfElements);
            for (int i = 0; i < numberOfElements; ++i) {

                double[] d = generateTwoPoints(-3.0, 3.9999, 4);
                Point2D p = new Point2D(d[0], d[1]);

                if (isPresent == null && i == randomInsideHowManyBoundry) {
                    isPresent = new Point2D(d[0], d[1]);
                }
                map.put(p, i);
            }

            assert map.containsKey(isPresent);
            assert map.size() == numberOfElements;
        }

        @TearDown(Level.Iteration)
        public void tearDown() {
            map.clear();
        }
    }

    @State(Scope.Thread)
    public static class Map_10_000_000 {

        int numberOfElements = 10_000_000;

        public Map<Point2D, Integer> map = new HashMap<>();

        public Point2D mightBePresent = null;

        public Point2D isPresent = null;

        @Setup(Level.Iteration)
        public void setUp() {
            int randomInsideHowManyBoundry = ThreadLocalRandom.current().nextInt(10_000_000);
            for (int i = 0; i < 10_000_000; ++i) {

                double[] d = generateTwoPoints(-3.0, 3.9999, 4);
                Point2D p = new Point2D(d[0], d[1]);

                if (isPresent == null && i == randomInsideHowManyBoundry) {
                    isPresent = new Point2D(d[0], d[1]);
                }
                map.put(p, i);
            }

            assert map.containsKey(isPresent);
            assert map.size() == numberOfElements;
        }

        @TearDown(Level.Iteration)
        public void tearDown() {
            map.clear();
        }
    }

    @Fork(1)
    @Benchmark
    public int mightBePresentMap_10(Map_10 map) {
        Integer x = map.map.get(map.mightBePresent);
        return x == null ? -1 : x;
    }

    @Fork(1)
    @Benchmark
    public int isPresentMap_10(Map_10 map) {
        Integer x = map.map.get(map.isPresent);
        return x == null ? -1 : x;
    }

    @Fork(1)
    @Benchmark
    public int mightBePresentMap_10_000(Map_10_000 map) {
        Integer x = map.map.get(map.mightBePresent);
        return x == null ? -1 : x;
    }

    @Fork(1)
    @Benchmark
    public int isPresentMap_10_000(Map_10_000 map) {
        Integer x = map.map.get(map.isPresent);
        return x == null ? -1 : x;
    }

    @Fork(1)
    @Benchmark
    public int mightBePresentMap_10_000_000(Map_10_000_000 map) {
        Integer x = map.map.get(map.mightBePresent);
        return x == null ? -1 : x;
    }

    @Fork(1)
    @Benchmark
    public int isPresentMap_10_000_000(Map_10_000_000 map) {
        Integer x = map.map.get(map.isPresent);
        return x == null ? -1 : x;
    }

    private static double[] generateTwoPoints(double upperBound, double lowerBound, int precision) {
        double x = ThreadLocalRandom.current().nextDouble(lowerBound, upperBound);
        x = BigDecimal.valueOf(x).setScale(precision, RoundingMode.HALF_UP).doubleValue();

        double y = ThreadLocalRandom.current().nextDouble(lowerBound, upperBound);
        y = BigDecimal.valueOf(x).setScale(precision, RoundingMode.HALF_UP).doubleValue();

        return new double[] { x, y };
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43917136" questionTitle="Java Collector.combiner getting called with supplier values always">
<Answer><![CDATA[import java.util.*;
import java.util.concurrent.atomic.*;
import java.util.function.*;
import java.util.stream.*;

public class ParallelMultiplier implements Collector<Integer, AtomicLong, Long> {

    @Override
    public BiConsumer<AtomicLong, Integer> accumulator() {
        return (operand1, operand2) -> operand1.set(operand1.longValue() * operand2.longValue());
    }

    @Override
    public Set<java.util.stream.Collector.Characteristics> characteristics() {
        return Collections.unmodifiableSet(EnumSet.of(Characteristics.UNORDERED));
    }

    @Override
    public BinaryOperator<AtomicLong> combiner() {        
        return (operand1, operand2) -> new AtomicLong(operand1.longValue() * operand2.longValue());
    }

    @Override
    public Function<AtomicLong, Long> finisher() {
        return l -> l.longValue();
    }

    @Override
    public Supplier<AtomicLong> supplier() {      
        return () -> new AtomicLong(1);
    }

}]]></Answer>
<Answer><![CDATA[static class ParallelMultiplier implements Collector<Integer, long[], Long> {

    @Override
    public BiConsumer<long[], Integer> accumulator() {

        return (left, right) -> left[0] *= right;
    }

    @Override
    public BinaryOperator<long[]> combiner() {
        return (left, right) -> {
            left[0] = left[0] * right[0];
            return left;
        };
    }

    @Override
    public Function<long[], Long> finisher() {
        return arr -> arr[0];
    }

    @Override
    public Supplier<long[]> supplier() {
        return () -> new long[] { 1L };
    }

    @Override
    public Set<java.util.stream.Collector.Characteristics> characteristics() {
        return Collections.unmodifiableSet(EnumSet.noneOf(Characteristics.class));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43911117" questionTitle="How to show javafx context menu without show window">
<Answer><![CDATA[final ContextMenu cm = new ContextMenu();
MenuItem cmItem1 = new MenuItem("Copy Image");
cmItem1.setOnAction(new EventHandler<ActionEvent>() {
    public void handle(ActionEvent e) {
         // do something
    }
});

// add the menu item to the menu
cm.getItems().add(cmItem1);

// bind the menu to a node of you scene e.g. canvas
node.addEventHandler(MouseEvent.MOUSE_CLICKED,
    new EventHandler<MouseEvent>() {
        @Override public void handle(MouseEvent e) {
              cm.show(pic, e.getScreenX(), e.getScreenY());
        }
});

// display the ContextMenu at specific location
cm.show(anchor, screenX, screenY);]]></Answer>
<Answer><![CDATA[import javafx.application.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.paint.Color;
import javafx.stage.*;

public class OutOfContext extends Application {
    @Override
    public void start(Stage stage) {
        ContextMenu contextMenu = createContextMenu();

        stage.initStyle(StageStyle.TRANSPARENT);
        stage.setScene(new Scene(new Group(), 0, 0, Color.TRANSPARENT));
        showContextMenu(contextMenu, stage, 150, 100);
    }

    private void showContextMenu(ContextMenu contextMenu, Stage owner, double x, double y) {
        owner.setX(x);
        owner.setY(y);
        owner.show();

        contextMenu.setX(x);
        contextMenu.setY(y);
        contextMenu.show(owner);
    }

    private ContextMenu createContextMenu() {
        MenuItem game = new MenuItem("Global Thermonuclear War");
        game.setOnAction(event -> {
            System.out.println("This is not a good option.");
            Platform.exit();
        });

        MenuItem exit = new MenuItem("Exit");
        exit.setOnAction(event -> Platform.exit());

        return new ContextMenu(
                game,
                exit
        );
    }

    public static void main(String[] args) {
        Application.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43892064" questionTitle="Getting selected Items from a ListView | CheckBoxListCell">
<Answer><![CDATA[public class Topping {

    private final String name ;

    private final BooleanProperty selected = new SimpleBooleanProperty();

    public BooleanProperty selectedProperty() {
        return selected ;
    }

    public final boolean isSelected() {
        return selectedProperty().get();
    }

    public final void setSelected(boolean selected) {
        selectedProperty().set(selected);
    }

    public Topping(String name) {
        this.name = name ;
    }

    public String getName() {
        return name ;
    }

    @Override
    public String toString() {
        return getName(); 
    }
}]]></Answer>
<Answer><![CDATA[public void start(Stage primaryStage) {
        try {
            ListView<String> listView = new ListView<>();
            Button button = new Button("Get");
            List<String> list = new ArrayList<>();
            String[] toppings = { "Cheese", "Pepperoni", "Black Olives" };
            listView.getItems().addAll(toppings);
            listView.setCellFactory(CheckBoxListCell.forListView(new Callback<String, ObservableValue<Boolean>>() {
                @Override
                public ObservableValue<Boolean> call(String item) {
                    BooleanProperty observable = new SimpleBooleanProperty();
                    observable.addListener((obs, wasSelected, isNowSelected) -> {
                        if (isNowSelected) {
                            list.add(item);
                        } else {
                            list.remove(item);
                        }
                    });
                    return observable;
                }
            }));

            button.setOnAction(e -> {
                for (int i = 0; i < list.size(); i++) {
                    System.out.println(list.get(i));
                }
            });

            VBox root = new VBox();
            root.setAlignment(Pos.CENTER);
            root.getChildren().addAll(listView, button);
            Scene scene = new Scene(root, 300, 250);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43806467" questionTitle="Java Streams: How to do an efficient &quot;distinct and sort&quot;?">
<Answer><![CDATA[package test.test;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class SortDistinctTest {

    public static void main(String[] args) {
        IntStream range = IntStream.range(0, 6_000_000);
        List<Integer> collect = range.boxed().collect(Collectors.toList());
        Collections.shuffle(collect);

        long start = System.currentTimeMillis();

        System.out.println("Round 1 (Warm up?)");
        collect.stream().sorted().filter(noAdjacentDuplicatesFilter()).collect(Collectors.counting());
        long fst = System.currentTimeMillis();
        System.out.println(fst - start);

        collect.stream().sorted().distinct().collect(Collectors.counting());
        long snd = System.currentTimeMillis();
        System.out.println(snd - fst);

        collect.stream().distinct().sorted().collect(Collectors.counting());
        long end = System.currentTimeMillis();
        System.out.println(end - snd);

        System.out.println("Round 2");
        collect.stream().sorted().filter(noAdjacentDuplicatesFilter()).collect(Collectors.counting());
        fst = System.currentTimeMillis();
        System.out.println(fst - end);

        collect.stream().sorted().distinct().collect(Collectors.counting());
        snd = System.currentTimeMillis();
        System.out.println(snd - fst);

        collect.stream().distinct().sorted().collect(Collectors.counting());
        end = System.currentTimeMillis();
        System.out.println(end - snd);

        System.out.println("Round 3 Parallel");
        collect.stream().parallel().sorted().filter(noAdjacentDuplicatesFilter()).collect(Collectors.counting());
        fst = System.currentTimeMillis();
        System.out.println(fst - end);

        collect.stream().parallel().sorted().distinct().collect(Collectors.counting());
        snd = System.currentTimeMillis();
        System.out.println(snd - fst);

        collect.stream().parallel().distinct().sorted().collect(Collectors.counting());
        end = System.currentTimeMillis();
        System.out.println(end - snd);

        System.out.println("Round 4 Parallel");
        collect.stream().parallel().sorted().filter(noAdjacentDuplicatesFilter()).collect(Collectors.counting());
        fst = System.currentTimeMillis();
        System.out.println(fst - end);

        collect.stream().parallel().sorted().distinct().collect(Collectors.counting());
        snd = System.currentTimeMillis();
        System.out.println(snd - fst);

        collect.stream().parallel().distinct().sorted().collect(Collectors.counting());
        end = System.currentTimeMillis();
        System.out.println(end - snd);

    }

    public static Predicate<Object> noAdjacentDuplicatesFilter() {
        final Object[] previousValue = { new Object() };

        return value -> {
            final boolean takeValue = !Objects.equals(previousValue[0], value);
            previousValue[0] = value;
            return takeValue;
        };

    }

}]]></Answer>
<Answer><![CDATA[public class DistinctAndSort {
    static int COMPARE, EQUALS, HASHCODE;
    static class Tracker implements Comparable<Tracker> {
        static int SERIAL;
        int id;
        Tracker() {
            id=SERIAL++/2;
        }
        public int compareTo(Tracker o) {
            COMPARE++;
            return Integer.compare(id, o.id);
        }
        public int hashCode() {
            HASHCODE++;
            return id;
        }
        public boolean equals(Object obj) {
            EQUALS++;
            return super.equals(obj);
        }
    }
    public static void main(String[] args) {
        System.out.println("adjacent sorted() and distinct()");
        Stream.generate(Tracker::new).limit(100)
              .sorted().distinct()
              .forEachOrdered(o -> {});
        System.out.printf("compareTo: %d, EQUALS: %d, HASHCODE: %d%n",
                          COMPARE, EQUALS, HASHCODE);
        COMPARE=EQUALS=HASHCODE=0;
        System.out.println("now with intermediate operation");
        Stream.generate(Tracker::new).limit(100)
            .sorted().map(x -> x).distinct()
            .forEachOrdered(o -> {});
        System.out.printf("compareTo: %d, EQUALS: %d, HASHCODE: %d%n",
                          COMPARE, EQUALS, HASHCODE);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43716058" questionTitle="Adding elements to an arraylist on an event hundler">
<Answer><![CDATA[public class Source extends Application {

    public static ArrayList<Path> paths = new ArrayList<>();

    public void start(Stage stage) {
        Group root = new Group();
        Scene scene = new Scene(root, 300, 250);
        scene.setOnMouseDragged(mouseHandler);
        scene.setOnMousePressed(mouseHandler);
        scene.setOnMouseReleased(mouseHandler);
        for(int i=0; i<paths.size(); i++)
          root.getChildren().add(paths.get(i));
        stage.setScene(scene);
        stage.show();
    }

    Path path = new Path();
    EventHandler<MouseEvent> mouseHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent mouseEvent) {
            if(mouseEvent.getEventType() == MouseEvent.MOUSE_PRESSED){   
                path.getElements().add(new MoveTo(mouseEvent.getX(), mouseEvent.getY()));
            }
            else if(mouseEvent.getEventType() == MouseEvent.MOUSE_DRAGGED){
                path.getElements().add(new LineTo(mouseEvent.getX(), mouseEvent.getY()));
            }
            if(mouseEvent.getEventType() == mouseEvent.MOUSE_RELEASED){
                paths.add(path);
            }   
        }
    };
}]]></Answer>
<Answer><![CDATA[public class Source extends Application {
    public static ArrayList<Path> paths = new ArrayList<>();

    public void start(Stage stage) {
        Pane root = new Pane();
        Scene scene = new Scene(root, 300, 250);

        scene.setOnMousePressed(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent event) {
                Path path = new Path();
                paths.add(path);
                path.getElements().add(new MoveTo(event.getX(),event.getY()));

                scene.setOnMouseDragged(new EventHandler<MouseEvent>() {
                    public void handle(MouseEvent event) {
                        path.getElements().add(new LineTo(event.getX(),event.getY()));
                    }
                });
                root.getChildren().add(path);
            }
        });
        stage.setScene(scene);
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43685670" questionTitle="How to show my Photo from Mysql in JAVAFX">
<Answer><![CDATA[//getter image
			public Image getImageById(String id) throws SQLException, IOException  {
			    try (
			    		ConexionSQL cn = new ConexionSQL();
						Connection con = cn.conexion();
			        PreparedStatement ps = con.prepareStatement(
			            "SELECT foto_visi FROM visitantes WHERE cedula_visi = ?");
			    ) {
			        ps.setString(1, id);
			        ResultSet results = ps.executeQuery();
			        Image img = null ;
			        if (results.next()) {
			            Blob foto = results.getBlob("foto_visi");
			            InputStream is = foto.getBinaryStream();
			            img = new Image(is) ; // false = no background loading 
			            is.close();
			        }
			        results.close();
			        return img ;
			    } catch (Throwable e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}//fin getter image]]></Answer>
<Answer><![CDATA[public void gestionarEventos(){

    tbvisitantes.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<visitantes>() {



        @Override
        public void changed(ObservableValue<? extends visitantes> arg0,
                visitantes valorAnterior, visitantes valorSeleccionado) {

            // cancel any image retrieval and start new one:
            imageRetrievalService.restart();

            if (valorSeleccionado!=null){
                txtcedula.setText(valorSeleccionado.getcedula());
                txtnombres.setText(valorSeleccionado.getnombres();
                txtapellidos.setText(valorSeleccionado.getapellidos());
                txtconjunto.setText(valorSeleccionado.getconjunto()));
                txtapto.setText(valorSeleccionado.getapartamento());
                txtcelular.setText(valorSeleccionado.getcelular());
                txtobservaciones.setText(valorSeleccionado.getobservaciones());
            }
        }
    });

    imgfotovisi.imageProperty().bind(imageRetrievalService.valueProperty());

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43681648" questionTitle="how to return different datatypes from single method?">
<Answer><![CDATA[public abstract class Either<L, R> {
    private Either () {}
    // how you make these
    public static <L, R> Either<L, R> left(L l) {  return new Left<>(l); }
    public static <L, R> Either<L, R> right(R r) { return new Right<>(r); }
    // how to use these
    public abstract <V> V match(Function<? super L, ? extends V> leftFn, 
                                Function<? super R, ? extends V> rightFn);

    /* ~ some convenience methods to have a common interface to handle these things ~ */

    // the actual classes
    private static final class Left<L, R> extends Either<L, R> {
        private final L l;
        private Left(L l) {
            this.l = l;
        }

        @Override
        public <V> V match(Function<? super L, ? extends V> leftFn, 
                           Function<? super R, ? extends V> rightFn) {
            return leftFn.apply(l);
        }

        /* some other functions to get .equals() working right etc. */
    }
    // same for Right but with "R" swapped for "L"
}]]></Answer>
<Answer><![CDATA[class RequestResult {
  static enum Result { PASS, FAIL };
  private Whatever dataForPass;
  private SomethingElse dataForFail;

  Whatever get(){
    return get((dataForFail)->throw new RequestError(dataForFail));
  }

  Whatever get(ErrorHandler handler){
    if(dataForFail != null){
      return handler.handle(dataForFail);
    }
    return dataForPass;
  }
}

interface ErrorHandler{
   Whatever handle(SomethingElse dataForFail) throws RequestError;
}

class RequestError extends RuntimeException{
    SomethingElse data;
    RequestError(SomethingElse data){
         this.data=data;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43663323" questionTitle="Will using a Timeline with a duration of 1 millisecond with an indefinite cycle count provide an accurate time for a stopwatch?">
<Answer><![CDATA[Timeline time: 1010, Nano time: 1012, Difference: -2
Timeline time: 2002, Nano time: 2004, Difference: -2
Timeline time: 3010, Nano time: 3012, Difference: -2
Timeline time: 4002, Nano time: 4004, Difference: -2
Timeline time: 5010, Nano time: 5012, Difference: -2
Timeline time: 6002, Nano time: 6004, Difference: -2
Timeline time: 7010, Nano time: 7012, Difference: -2
Timeline time: 8002, Nano time: 8004, Difference: -2
Timeline time: 9010, Nano time: 9012, Difference: -2
Timeline time: 10002, Nano time: 10004, Difference: -2
Timeline time: 11010, Nano time: 11012, Difference: -2
Timeline time: 12002, Nano time: 12004, Difference: -2
Timeline time: 13010, Nano time: 13012, Difference: -2
Timeline time: 14003, Nano time: 14004, Difference: -1
Timeline time: 15011, Nano time: 15012, Difference: -1
Timeline time: 16003, Nano time: 16004, Difference: -1
Timeline time: 17011, Nano time: 17012, Difference: -1
Timeline time: 18002, Nano time: 18003, Difference: -1
Timeline time: 19010, Nano time: 19011, Difference: -1
Timeline time: 20002, Nano time: 20004, Difference: -2
Timeline time: 21010, Nano time: 21012, Difference: -2
Timeline time: 22002, Nano time: 22004, Difference: -2
Timeline time: 23010, Nano time: 23012, Difference: -2
Timeline time: 24002, Nano time: 24004, Difference: -2
Timeline time: 25010, Nano time: 25012, Difference: -2
Timeline time: 26002, Nano time: 26004, Difference: -2
Timeline time: 27010, Nano time: 27012, Difference: -2
Timeline time: 28002, Nano time: 28004, Difference: -2
Timeline time: 29010, Nano time: 29012, Difference: -2
Timeline time: 30002, Nano time: 30004, Difference: -2]]></Answer>
<Answer><![CDATA[LongProperty timeMillis = new SimpleLongProperty(0);

AnimationTimer stopwatch = new AnimationTimer() {

    private static final long STOPPED = -1 ;
    private long startTime = STOPPED ;

    @Override
    public void handle(long timestamp) {
        if (startTime == STOPPED) {
            startTime = timestamp ;
        }
        long elapsedNanos = timestamp - startTime ;
        long elapsedMillis = elapsedNanos / 1_000_000 ;
        timeMillis.set(elapsedMillis);
    }

    @Override
    public void stop() {
        startTime = STOPPED ;
        super.stop();
    }
};]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43657061" questionTitle="Java reduce list to fallback chain">
<Answer><![CDATA[BiFunction<Supplier<EntityChain>, Entity, Supplier<EntityChain>> reducing =
    (initializer, entity) ->
            // get the EntityChain instance when get() called.
            () -> Optional.ofNullable(initializer.get())
                    // create a builder with fallback if EntityChain present
                    .map(fallback -> EntityChain.builder().withFallback(fallback))
                    // create a builder without fallback
                    .orElseGet(EntityChain::builder)
                    //build the EntityChain
                    .withEntity(entity).build();

// combiner never be used in sequentially stream
BinaryOperator<Supplier<EntityChain>> rejectedInParallelStream = (t1, t2) -> {
    throw new IllegalStateException("Can't be used in parallel stream!");
};

EntityChain chain = reverse(entities).
        stream().reduce(() -> null, reducing, rejectedInParallelStream)
        //when the initializer chain built/reduced,
        //calling the get() to fetch EntityChain header
        .get();

//copy & reverse the copied List
static <T> List<T> reverse(List<T> list) {
    List<T> it = list.stream().collect(Collectors.toList());
    Collections.reverse(it);
    return it;
}]]></Answer>
<Answer><![CDATA[public class ChainBuilder {

  public static class Entity {
    int data;
    public Entity(int i) {
      data = i;
    }
    @Override
    public String toString() {
      return "Entity [data=" + data + "]";
    }
  }

  public static class EntityChain {
    private Entity entity;
    private Optional<EntityChain> fallback = null;

    @Override
    public String toString() {
      return "EntityChain [entity=" + entity + ", fallback=" + fallback + "]";
    }

    public static class Builder {
      private EntityChain chain = null;

      public Builder() { }

      private static EntityChain newChainLink(Entity e){
        EntityChain n = new EntityChain();
        n.entity = e;
        n.fallback = Optional.empty();
        return n;
      }

      /** accumulator, attaches to the end of the chain */
      public Builder withEntity(Entity e) {
        if(chain == null) {
          chain = newChainLink(e);
        } else {
          EntityChain last = getLast();
          last.fallback = Optional.of(newChainLink(e));
        }
        return this;
      }

      /** combiner, glues two chains together */
      public Builder combine(Builder u) {
        if(u.chain != null) {
          getLast().fallback = Optional.of(u.chain);
        }
        return this;
      }


      /** returns the end of the chain */
      private EntityChain getLast() {
        EntityChain link = chain;
        while(link.fallback.isPresent()){
          link = link.fallback.get();
        }
        return link;
      }

      public EntityChain build() {
        return chain;
      }

    }
  }

  public static void main(String[] args) {
    List<Entity> entities = Arrays.asList(new Entity(1), new Entity(2), new Entity(3));
    final Builder reduced = entities.stream().reduce(new EntityChain.Builder(),
                                                     (t,u)->t.withEntity(u),
                                                     (t,u)->t.combine(u));
    System.out.println(reduced.build());
  }
}]]></Answer>
<Answer><![CDATA[BiFunction<EntityChain, Entity, EntityChain> reducing =
    (next, entity) -> Optional.ofNullable(next)
                    // create a builder with fallback if EntityChain present
                    .map(fallback -> EntityChain.builder().withFallback(fallback))
                    // create a builder without fallback
                    .orElseGet(EntityChain::builder)
                    //build the EntityChain
                    .withEntity(entity).build();

// combiner never be used in sequentially stream
BinaryOperator<EntityChain> rejectedInParallelStream = (t1, t2) -> {
    //when you use parallel the chain order maybe changed, and the result is wrong.
    throw new IllegalStateException("Can't be used in parallel stream!");
};


EntityChain chain = reverse(entities).
        stream().reduce(null, reducing, rejectedInParallelStream);


//copy & reverse the copied List
static <T> List<T> reverse(List<T> list) {
    List<T> it = list.stream().collect(Collectors.toList());
    Collections.reverse(it);
    return it;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43583155" questionTitle="hibernate-java8 dependency doesn't help to save date correctly">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>LocalDateTimeDemo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>LocalDateTimeDemo</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <hibernate.version>5.2.10.Final</hibernate.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            **<exclusions>
                <exclusion>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-entitymanager</artifactId>
                </exclusion>
            </exclusions>**
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>


</project>]]></Answer>
<Answer><![CDATA[import java.sql.Date;
import java.time.LocalDate;

import javax.persistence.AttributeConverter;
import javax.persistence.Converter;

/**
 * Converter for java.time persistence.
 * 
 * @author m.elbehi
 */
@Converter(autoApply = true)
public class LocalDateConverter implements AttributeConverter<LocalDate, Date> {

    @Override
    public Date convertToDatabaseColumn(LocalDate date) {


        return date != null ? Date.valueOf(date) : null;
    }

    @Override
    public LocalDate convertToEntityAttribute(Date value) {

        return value != null ? value.toLocalDate() : null;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43548483" questionTitle="Animate node into layout">
<Answer><![CDATA[private static final double START_X = 50;
private static final double START_Y = 50;

@Override
public void start(Stage primaryStage) {
    TilePane tilePane = new TilePane();
    tilePane.setPrefSize(200, 200);
    Image image = new Image("https://cdn.sstatic.net/Sites/stackoverflow/company/img/logos/so/so-icon.png", 50, 50, true, false);
    Button btn = new Button("add");
    btn.setOnAction((ActionEvent event) -> {
        ImageView img = new ImageView(image);
        tilePane.getChildren().add(img);

        // layout tilePane
        tilePane.applyCss();
        tilePane.layout();

        // create transition from start position to final position
        TranslateTransition transition = new TranslateTransition(Duration.seconds(4), img);
        transition.setFromX(START_X - img.getLayoutX());
        transition.setFromY(START_Y - img.getLayoutY());
        transition.setToX(0);
        transition.setToY(0);

        transition.play();
    });

    VBox root = new VBox(btn, tilePane);

    Scene scene = new Scene(root);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.image.*;
import javafx.scene.layout.TilePane;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.*;
import java.util.stream.Collectors;

public class Layup extends Application {

    private final Random random = new Random(42);

    // image license: linkware - backlink to http://www.fasticon.com
    private static final String[] IMAGE_LOCS = {
            "http://icons.iconarchive.com/icons/fasticon/fish-toys/128/Blue-Fish-icon.png",
            "http://icons.iconarchive.com/icons/fasticon/fish-toys/128/Red-Fish-icon.png",
            "http://icons.iconarchive.com/icons/fasticon/fish-toys/128/Yellow-Fish-icon.png",
            "http://icons.iconarchive.com/icons/fasticon/fish-toys/128/Green-Fish-icon.png"
    };

    @Override
    public void start(Stage stage) throws Exception {
        TilePane tilePane = createTilePane(IMAGE_LOCS);

        Scene scene = new Scene(new Group(tilePane));

        stage.setScene(scene);
        stage.show();
        stage.setTitle("Click on the scene to animate");

        animateIn(tilePane);

        scene.setOnMouseClicked(event -> animateIn(tilePane));
    }

    private TilePane createTilePane(String[] imageLocs) {
        TilePane tilePane = new TilePane(10, 10);
        tilePane.setPrefColumns(2);

        Arrays.stream(imageLocs).map(
                loc -> new ImageView(new Image(
                        loc, 64, 0, true, true
                ))
        ).collect(Collectors.toCollection(tilePane::getChildren));

        tilePane.setPadding(new Insets(200));
        return tilePane;
    }

    private void animateIn(TilePane tilePane) {
        // layout tilePane
        tilePane.applyCss();
        tilePane.layout();

        double W = (int) tilePane.getScene().getWidth();
        double H = (int) tilePane.getScene().getHeight();

        ParallelTransition pt = new ParallelTransition();

        for (int i = 0; i < IMAGE_LOCS.length; i++) {
            Node child = tilePane.getChildren().get(i);

            Point2D start = new Point2D(
                    random.nextInt((int) (W - child.getBoundsInLocal().getWidth())),
                    random.nextInt((int) (H - child.getBoundsInLocal().getHeight()))
            );

            Point2D startInLocal = child.sceneToLocal(start);

            TranslateTransition tt = new TranslateTransition(Duration.seconds(.5), child);
            tt.setFromX(startInLocal.getX());
            tt.setFromY(startInLocal.getY());
            tt.setToX(0);
            tt.setToY(0);

            pt.getChildren().add(tt);
        }

        pt.play();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43501999" questionTitle="Whats the most efficient way to split and analyze a line of data points in Java">
<Answer><![CDATA[import java.time.LocalDateTime ;
import java.util.stream.DoubleStream ;

public class TemperatureReading {

    private final double[] values ;

    private final LocalDateTime timestamp ;

    public TemperatureReading(LocalDateTime timestamp, double... values) {
        this.timestamp = timestamp ;
        this.values = new double[values.length];
        System.arraycopy(values, 0, this.values, 0, values.length);
    }

    public TemperatureReading(double... values) {
        this(LocalDateTime.now(), values);
    }

    public double getValue(int channel) {
        return values[channel];
    }

    public int getNumberOfChannels() {
        return values.length ;
    }

    public LocalDateTime getTimestamp() {
        return timestamp ;
    }

    public boolean noneExceed(double max) {
        return DoubleStream.of(values)
            .allMatch(v -> v <= max)
    }

}]]></Answer>
<Answer><![CDATA[final double finalTemp = ...;

// 9 channels
double[] channels = new double[9];

long tick = 0;

boolean done = false;

// assume that final temp will be reached
while (!done) {

    // disregarding the Char(13), Char(10), so fullReadings contains temp in String format
    String[] fullReadings = readData().split(SPLIT); 

    // assume fullReadings.length == 9
    for (int i = 0; i < fullReadings.length; i++) {

        // assume the value can be parsed with no errors
        double temp = Double.parseDouble(reading);

        channels[i] = temp;

        if (temp >= finalTemp) {
            done = true;
        }
    }

    tick++;
}

System.out.printf("Time took: %.3f seconds\n", tick / 3.0);

for (int i = 0; i < channels.length; i++) {
    System.out.printf("Channel %d has temp: %.3f\n", i, channels[i]);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43429251" questionTitle="How to draw a continuous line with mouse on JavaFX canvas?">
<Answer><![CDATA[canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, 
        new EventHandler<MouseEvent>(){
    @Override
    public void handle(MouseEvent event) {
        graphicsContext.beginPath();
        graphicsContext.moveTo(event.getX(), event.getY());
        graphicsContext.stroke();

    }
});

canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, 
        new EventHandler<MouseEvent>(){
    @Override
    public void handle(MouseEvent event) {
        graphicsContext.lineTo(event.getX(), event.getY());
        graphicsContext.stroke();
        graphicsContext.closePath();
        graphicsContext.beginPath();
        graphicsContext.moveTo(event.getX(), event.getY());
    }
});

canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, 
        new EventHandler<MouseEvent>(){
    @Override
    public void handle(MouseEvent event) {
        graphicsContext.lineTo(event.getX(), event.getY());
        graphicsContext.stroke();
        graphicsContext.closePath();
    }
});]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

/**
 * @web http://java-buddy.blogspot.com/
 */
public class JavaFX_DrawOnCanvas extends Application {

    @Override
    public void start(Stage primaryStage) {

        Canvas canvas = new Canvas(400, 400);
        final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();
        initDraw(graphicsContext);

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, 
                new EventHandler<MouseEvent>(){

            @Override
            public void handle(MouseEvent event) {
                graphicsContext.beginPath();
                graphicsContext.moveTo(event.getX(), event.getY());
                graphicsContext.stroke();
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, 
                new EventHandler<MouseEvent>(){

            @Override
            public void handle(MouseEvent event) {
                graphicsContext.lineTo(event.getX(), event.getY());
                graphicsContext.stroke();
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, 
                new EventHandler<MouseEvent>(){

            @Override
            public void handle(MouseEvent event) {

            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(canvas);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setTitle("java-buddy.blogspot.com");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private void initDraw(GraphicsContext gc){
        double canvasWidth = gc.getCanvas().getWidth();
        double canvasHeight = gc.getCanvas().getHeight();

        gc.setFill(Color.LIGHTGRAY);
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(5);

        gc.fill();
        gc.strokeRect(
                0,              //x of the upper left corner
                0,              //y of the upper left corner
                canvasWidth,    //width of the rectangle
                canvasHeight);  //height of the rectangle

        gc.setFill(Color.RED);
        gc.setStroke(Color.BLUE);
        gc.setLineWidth(1);

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43429030" questionTitle="Use of Java 8 Lambdas with Generics">
<Answer><![CDATA[public class SumOp<T extends Number> {
    private static final Map<Class<?>, SumOp<?>> OPERATORS = new HashMap<>();
    private final T identity;
    private final BinaryOperator<T> plusOp;
    private final Function<Number, T> valueExtractor;

    static {
       register(Integer.class, new SumOp<>(0, Integer::sum, Number::intValue));
       register(Double.class, new SumOp<>(0., Double::sum, Number::doubleValue));
       //todo: add more SumOp for other Number types
    }

    public static <T extends Number> void register(Class<T> type,
                                                   SumOp<T> sumOp) {
        OPERATORS.put(type, sumOp);
    }

    public static <T extends Number> SumOp<T> of(Class<T> type) {
        return (SumOp<T>) OPERATORS.computeIfAbsent(type, it -> {
            String message = "No SumOp registered for type:" + type.getName();
            throw new IllegalArgumentException(message);
        });
    }

    public SumOp(T identity,
                 BinaryOperator<T> plusOp,
                 Function<Number, T> valueExtractor) {
        this.identity = identity;
        this.valueExtractor = valueExtractor;
        this.plusOp = plusOp;
    }

    public <I extends Number> T sum(List<I> numbers,
                                    Predicate<I> condition) {
        return sum(numbers.stream().filter(condition));
    }

    public T sum(Stream<? extends Number> stream) {
        return stream.reduce(identity, this::plus, plusOp);
    }

    private T plus(Number augend, Number addend) {
        return plusOp.apply(valueIn(augend), valueIn(addend));
    }

    private T valueIn(Number it) {
        return valueExtractor.apply(it);
    }
}]]></Answer>
<Answer><![CDATA[System.out.println(
                MathUtility.sum(listOfInts, i->i<4, new MathUtility.IntegerAddition()).get()
); 

class MathUtility<T extends Number> {

    static class IntegerAddition implements BinaryOperator<Integer> {

        @Override
        public Integer apply(Integer t, Integer u) {
            return t + u;
        }

    }


    public static <T extends Number> Optional<T> sum(List<T> list, Predicate<T> condition, BinaryOperator<T> operation){
        //ability to add is only here
            return list.parallelStream()
            .filter(condition)
            .map(i -> i)
            .reduce(operation);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43399207" questionTitle="JavaFX Switching BorderPane's Center: Buttons only work once">
<Answer><![CDATA[private void showSetupAccountScreen()
{
    try 
    {
        spCenterDisplay.getChildren().remove(0);//remove old display            
        BorderPane root = FXMLLoader.load(getClass().getResource("SubSetupAccount.fxml"));
        spCenterDisplay.getChildren().add(root);//add new display
        GridPane tempDisplay = (GridPane)root.getChildren().get(1);//get Parent of the nodes I will be using in this controller
        loadQWERTYKeyboard();            

        TextField tfFirstName = (TextField)findNodeByID("tfFirstName", tempDisplay.getChildren());
        TextField tfLastName = (TextField)findNodeByID("tfLastName", tempDisplay.getChildren());
        TextField tfStreetAddress = (TextField)findNodeByID("tfStreetAddress", tempDisplay.getChildren());
        TextField tfCity = (TextField)findNodeByID("tfCity", tempDisplay.getChildren());
        TextField tfState = (TextField)findNodeByID("tfState", tempDisplay.getChildren());
        TextField tfZip = (TextField)findNodeByID("tfZip", tempDisplay.getChildren());
        TextField tfInitialDepositChecking = (TextField)findNodeByID("tfInitialDepositChecking", tempDisplay.getChildren());
        TextField tfInitialDepositSavings  = (TextField)findNodeByID("tfInitialDepositSavings", tempDisplay.getChildren());
        ChoiceBox cbChecking  = (ChoiceBox)findNodeByID("cbChecking", tempDisplay.getChildren());
        cbChecking.getItems().addAll("No", "Yes");
        cbChecking.setValue("No");
        ChoiceBox cbSavings  = (ChoiceBox)findNodeByID("cbSavings", tempDisplay.getChildren());
        cbSavings.getItems().addAll("No", "Yes");
        cbSavings.setValue("No");            

        if(true)//come back and check to make sure all info is in textfields
        {
            btnLeftOne.setOnAction((event) -> {

                boolean createChecking = cbChecking.getValue().equals("Yes");
                boolean createSavings = cbSavings.getValue().equals("Yes");

                dbh.createNewAccount(tfFirstName.getText(), tfLastName.getText(), tfStreetAddress.getText(), tfCity.getText(), 
                                     tfState.getText(), tfZip.getText(), createChecking, Double.parseDouble(tfInitialDepositChecking.getText()),
                                     createSavings, Double.parseDouble(tfInitialDepositSavings.getText()));
            });
        }
        else
        {
            //create Alert 
        }

        btnRightOne.setOnAction((event) -> {
            cancelAccountCreation();
        });

        btnLeftTwo.setOnAction(null);
        btnLeftThree.setOnAction(null);
        btnLeftFour.setOnAction(null);
        btnRightTwo.setOnAction(null);
        btnRightThree.setOnAction(null);
        btnRightFour.setOnAction(null);
    }
    catch (IOException ex) 
    {
        Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void loadQWERTYKeyboard()
{
    try 
    {
        AnchorPane keyboardRoot = FXMLLoader.load(getClass().getResource("KeyboardQWERTY.fxml"));
        System.out.println(keyboardRoot.getId());
        spBottomDisplay.getChildren().add(keyboardRoot);

        GridPane tempKeyboard = (GridPane)keyboardRoot.getChildren().get(0);

        tempKeyboard.getChildren().stream().filter((tempNode)
                -> (tempNode instanceof Button)).map((
                        tempNode) -> (Button) tempNode).forEachOrdered((tempButton) -> {
                            buttons.put(tempButton.getText().toLowerCase(), tempButton);
                        });

        apMain.setOnKeyPressed((event) -> {
            Button tempButton = buttons.get(event.getText());
            if (tempButton != null) {
                tempButton.arm();
                tempButton.setStyle("-fx-background-color: blue");
            }
            else if (event.getCode().equals(KeyCode.ENTER)) {
                tempButton = buttons.get("enter");
                tempButton.arm();
                tempButton.setStyle("-fx-background-color: blue");
            }
            else if (event.getCode().equals(KeyCode.BACK_SPACE)) {
                tempButton = buttons.get("backspace");
                tempButton.arm();
                tempButton.setStyle("-fx-background-color: blue");
            }
            else if (event.getCode().equals(KeyCode.SPACE)) {
                tempButton = buttons.get("space");
                tempButton.arm();
                tempButton.setStyle("-fx-background-color: blue");
            }
        });

        apMain.setOnKeyReleased((event) -> {
            System.out.println();
            Button tempButton = buttons.get(event.getText());
            System.out.println("Released key text: " + event.getText());
            System.out.println("Released key code: " + event.getCode());

            if (tempButton != null) {
                tempButton.disarm();
                tempButton.setStyle("");
            }
            else if (event.getCode().equals(KeyCode.ENTER)) {
                tempButton = buttons.get("enter");
                tempButton.disarm();
                tempButton.setStyle("");
            }
            else if (event.getCode().equals(KeyCode.BACK_SPACE)) {
                tempButton = buttons.get("backspace");
                tempButton.disarm();
                tempButton.setStyle("");
            }
            else if (event.getCode().equals(KeyCode.SPACE)) {
                tempButton = buttons.get("space");
                tempButton.disarm();
                tempButton.setStyle("");
            }
        });
    }
    catch (IOException ex) 
    {
        Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private Node findNodeByID(String id, ObservableList<Node> observableList)
{
    for(Node node : observableList)
    {
        if(node.getId().equals(id))
        {
            System.out.println("node found!");
            return node;
        }
        else
        {
            System.out.println("node not found yet!");
        }
    }

    return null;
}]]></Answer>
<Answer><![CDATA[import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;

/**
 *
 * @author blj0011
 */
public class FXMLDocumentController implements Initializable
{    
    @FXML AnchorPane apMain;//This pane will be used to display the other two panes depending on which button is pressed.

    //Foo Pane children nodes
    Button btnFooOne, btnFooTwo;
    TextField tfFooOne, tfFooTwo;
    Label lblFoo;

    //Bar Pane children nodes
    Button btnBar;
    TextField tfBar;
    Label lblBar;

    @FXML
    private void handleButtonAction(ActionEvent event)
    {
        if(((Button)event.getSource()).getId().equals("btnMainBar"))
        {
            loadBarPane();
        }
        else if(((Button)event.getSource()).getId().equals("btnMainFoo"))
        {
            loadFooPane();
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle rb)
    {
        // TODO
    }   

    //This approach uses the findNodeByID method.
    private void loadFooPane()
    {
        try 
        {
            if(apMain.getChildren().size() > 0)
            {
                apMain.getChildren().remove(0);//if a node is loaded into apMain, remove the node.
            }

            Pane root = FXMLLoader.load(getClass().getResource("Foo.fxml"));
            apMain.getChildren().add(root);//Add Foo Pane to apMain

            //Get Foo Pane's children nodes
            tfFooOne = (TextField)findNodeByID("tfFooOne", root.getChildren());
            tfFooTwo = (TextField)findNodeByID("tfFooTwo", root.getChildren());
            btnFooOne = (Button)findNodeByID("btnFooOne", root.getChildren());
            btnFooTwo = (Button)findNodeByID("btnFooTwo", root.getChildren());
            lblFoo = (Label)findNodeByID("lblFoo", root.getChildren());

            //Set Listeners

            tfFooOne.textProperty().addListener((obserValue, oldValue, newValue) -> {
                lblFoo.setText("new value: " + newValue);
            });

            tfFooTwo.textProperty().addListener((obserValue, oldValue, newValue) -> {
                lblFoo.setText("new value: " + newValue);
            });

            btnFooOne.setOnAction((event) -> {lblFoo.setText("You pressed btnFooOne");});
            btnFooTwo.setOnAction((event) -> {lblFoo.setText("You pressed btnFooTwo");});

        }
        catch (IOException ex) 
        {
            Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadBarPane()
    {
        try
        {
            //This way is more complicate if you have more than one of the same type of node
            if(apMain.getChildren().size() > 0)
            {
                apMain.getChildren().remove(0);//if a node is loaded into apMain, remove the node.
            }
            Pane root = FXMLLoader.load(getClass().getResource("Bar.fxml"));
            apMain.getChildren().add(root);//Add Foo Pane to apMain

            //Get Bar Pane's children nodes
            for(Node node : root.getChildren())
            {
                if(node instanceof Button)
                {
                    btnBar = (Button)node;
                }
                else if(node instanceof TextField)
                {
                    tfBar = (TextField)node;
                }
                else if(node instanceof Label)
                {
                    lblBar = (Label)node;
                }
            }

            //Set listeners
            tfBar.textProperty().addListener((obserValue, oldValue, newValue) -> {
                lblBar.setText("new value: " + newValue);
            });

            btnBar.setOnAction((event) -> {lblBar.setText("You pressed btnFooOne");});
        }
        catch (IOException ex)
        {
            Logger.getLogger(FXMLDocumentController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Node findNodeByID(String id, ObservableList<Node> observableList)
    {
        for(Node node : observableList)
        {
            if(node.getId().equals(id))
            {
                System.out.println("node found!");
                return node;
            }
            else
            {
                System.out.println("node not found yet!");
            }
        }

        return null;
    }


}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43393423" questionTitle="How to make JavaFX Property Listener to fire an event even if the oldVaule and newValue are the same?">
<Answer><![CDATA[public class NotifySetIntegerProperty extends SimpleIntegerProperty {
    private OnSetValueListener valueListener;

    public NotifySetIntegerProperty(int initialValue) {
        super(initialValue);
    }

    @Override
    public void set(int newValue) {
        super.set(newValue);
        if(valueListener!= null) {
            valueListener.onValueSet(newValue);
        }
    }

    public void setValueListener(OnSetValueListener valueListener) {
        this.valueListener = valueListener;
    }

    public interface OnSetValueListener {
        void onValueSet(int value);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.List;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.ReadOnlyIntegerProperty;
import javafx.beans.property.ReadOnlyIntegerWrapper;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class ProcessListElements extends Application {

    private int count = 0 ;

    @Override
    public void start(Stage primaryStage) {
        ListView<String> listView = new ListView<>();
        for (int i = 0 ; i < 10 ; i++) addElement(listView.getItems());

        Procedure procedure = new Procedure();

        Button startProcessButton = new Button("Start Process");
        Button addItemButton = new Button("Add item");
        Button deleteItemButton = new Button("Delete item");

        TextArea log = new TextArea();

        startProcessButton.setOnAction(e -> {
            log.clear();
            listView.requestFocus();
            new Thread(() -> procedure.process(listView.getItems())).start();
        });

        addItemButton.setOnAction(e -> addElement(listView.getItems()));
        deleteItemButton.setOnAction(e -> listView.getItems().remove(listView.getSelectionModel().getSelectedIndex()));
        deleteItemButton.disableProperty().bind(listView.getSelectionModel().selectedItemProperty().isNull());

        HBox controls = new HBox(5, startProcessButton, addItemButton, deleteItemButton);
        controls.setAlignment(Pos.CENTER);
        controls.setPadding(new Insets(5));


        BorderPane root = new BorderPane(listView, null, log, controls, null);

        procedure.currentlyChosenElementIndexProperty().addListener((obs, oldIndex, newIndex) -> {
            Platform.runLater(() -> 
                listView.getSelectionModel().clearAndSelect(newIndex.intValue()));
        });

        procedure.currentlyChosenElementIndexProperty().addListener((obs, oldIndex, newIndex) -> {
            Platform.runLater(() -> {
                controls.setDisable(newIndex.intValue() != Procedure.NO_ELEMENT);
            });
        });

        procedure.currentlyChosenElementIndexProperty().addListener((obs, oldIndex, newIndex) -> {
            if (oldIndex.intValue() != Procedure.NO_ELEMENT) {
                log.appendText("Processing of element "+oldIndex.intValue()+" complete\n");
            }
            if (newIndex.intValue() != Procedure.NO_ELEMENT) {
                log.appendText("Processing element "+newIndex.intValue()+" started\n");
            }
        });


        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void addElement(List<String> list) {
        count++ ;
        list.add("Item "+count);
    }

    public static class Procedure {

        private static final int NO_ELEMENT = - 1; 

        private final ReadOnlyIntegerWrapper currentlyChosenElementIndex = new ReadOnlyIntegerWrapper(NO_ELEMENT);

        public void process(List<?> items) {
            if (Platform.isFxApplicationThread()) {
                throw new IllegalStateException("This method blocks and must not be executed on the FX Application Thread");
            }
            try {
                for (int i = 0 ; i < items.size(); i++) {
                    currentlyChosenElementIndex.set(i);
                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            currentlyChosenElementIndex.set(NO_ELEMENT);
        }

        public final ReadOnlyIntegerProperty currentlyChosenElementIndexProperty() {
            return this.currentlyChosenElementIndex.getReadOnlyProperty();
        }


        public final int getCurrentlyChosenElementIndex() {
            return this.currentlyChosenElementIndexProperty().get();
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43357679" questionTitle="Informing the user if a Firebase search was successful">
<Answer><![CDATA[public class FirebaseHandler {

    // parameters
    private DatabaseReference databaseReference;

    // constructor
    public FirebaseHandler() {
        // you'll most probably need these for some actions
        databaseReference = FirebaseDatabase.getInstance().getReference();
    }

    // interface
    public interface FirebaseInterface {
        void firebaseComplete(String serverStatus, String email);
    }

    // listener
    private FirebaseInterface listener;

    // set listener
    public void setListener(FirebaseInterface listener) {
        this.listener = listener;
    }

    /* getter for references, these will be useful to avoid calling the wrong place */
    // -- / 
    public DatabaseReference getRoot() {
        return databaseReference;
    }

    // -- /email       /* specify the data structure here */
    public DatabaseReference getEmailRef() {
        return getRoot().child("email");
    } 

    // finally your method
    public static void addUser() {
        // your codes here...
        whiteRef.child(uid).setValue(email, new DatabaseReference.CompletionListener() {
            @Override
            public void onComplete(DatabaseError dbe, DatabaseReference dbr) {
                // some action here....
                if (listener != null) listener.firebaseComplete("OK", email);
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[public static void addUser() {
    final String email = Tools.getEmail();
    DatabaseReference grayRef = FirebaseDatabase.getInstance().getReference().child("graylist");

    // Search the graylist for the email specified.
    grayRef.addListenerForSingleValueEvent(new ValueEventListener() {
        @Override
        public void onCancelled(DatabaseError dbe) {}

        @Override
        public void onDataChange(DataSnapshot snap) {
            boolean found = false;
            Iterable<DataSnapshot> graylist = snap.getChildren();
            for(DataSnapshot gray : graylist) {
                String uid = gray.getKey();
                String em = gray.getValue(String.class);
                if(em.equals(email)) {
                    found = true;
                    // We found the one we're looking for. Insert its UID into the whitelist.
                    DatabaseReference whiteRef = FirebaseDatabase.getInstance().getReference().child("whitelist");
                    whiteRef.child(uid).setValue(email, new DatabaseReference.CompletionListener() {
                        @Override
                        public void onComplete(DatabaseError dbe, DatabaseReference dbr) {
                            complete[0] = true;
                            if(dbe != null) {
                                System.err.println("Error adding user to whitelist!");
                                dbe.toException().printStackTrace();
                            } else {
                                Platform.runLater(() -> {                                  
                                    ParselyMain.createAlert(AlertType.CONFIRMATION, "User Added", "User added to the whitelist!");
                                });
                            }
                        }
                    });
                    break;
                }
            }
            if(!found) {
                Platform.runLater(() -> {
                    ParselyMain.createAlert(AlertType.INFORMATION, "User Not Found", "That user was not found in the graylist!");
                });
            }
        }
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43292477" questionTitle="Is there a solution to make a method call functions a dynamic amount of parameters by method references?">
<Answer><![CDATA[public class MainClass {
    public void run(String infoOne, String infoTwo, String infoThree,
                    String infoFour, String infoFive, String infoSix) {        
        SomeClass someClass = new SomeClass();
        log(() -> someClass.runSomeMethod());
        log(() -> someClass.runSomeMethodTwo(infoOne));
        log(() -> someClass.runSomeMethodThree(infoThree, infoOne, infoSix));
        log(() -> someClass.runSomeMethodFour(infoTwo, infoFive));
        log(() -> someClass.runSomeMethodFive(infoThree, infoFive, infoOne, infoSix));
    }
    public void log(BooleanSupplier method) {
        try {
            if(method.getAsBoolean()) {
                System.out.println("Success!");
            } else {
                System.out.println("Failed to execute!");
            }
        } catch (Exception e ){
            e.printStackTrace();
        }
    }
}]]></Answer>
<Answer><![CDATA[public class Test {
    static Test testLogger = new Test(); //This should be another class ofcourse, but it doesn't matter for this example

    public static void main(String[] args) throws NoSuchMethodException, SecurityException{
        Test test = new Test();

        run(test, "something", "hi", "hai", "blaa");
    }

    public static void run(Object pageObjectModel, String methodName, String...arguments){
        Class<String>[] args = new Class[arguments.length];
        Arrays.fill(args, String.class);
        try {
            testLogger.log(pageObjectModel, pageObjectModel.getClass().getMethod(methodName, args), arguments);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (SecurityException e) {
            e.printStackTrace();
        }
    }

    private void log(Object pageObjectModel, Method method, String...arguments) {
        try {
            if((Boolean)method.invoke(pageObjectModel, (Object[])arguments)){
                System.out.println("Success!");
            } else {
                System.out.println("Fail!");
            }
        } catch (Exception e){
            e.printStackTrace();
        }
    }

    public boolean something(String one, String two, String three){
        System.out.println(one+", "+two+", "+three);
        return true;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43236082" questionTitle="JavaFx elements, change the size dynamically in relationship to the size of the window">
<Answer><![CDATA[<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>

<GridPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="200.0"
          prefWidth="300.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.65">
  <columnConstraints>
    <ColumnConstraints hgrow="SOMETIMES" percentWidth="5.0"/>
    <ColumnConstraints hgrow="SOMETIMES" percentWidth="30.0"/>
    <ColumnConstraints hgrow="SOMETIMES" percentWidth="5.0"/>
    <ColumnConstraints hgrow="SOMETIMES"/>
  </columnConstraints>
  <rowConstraints>
    <RowConstraints percentHeight="5.0" vgrow="SOMETIMES"/>
    <RowConstraints vgrow="SOMETIMES"/>
    <RowConstraints percentHeight="5.0" vgrow="SOMETIMES"/>
  </rowConstraints>
  <children>
    <Button maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="0.0" minWidth="0.0"
            mnemonicParsing="false" text="Button" GridPane.columnIndex="1" GridPane.halignment="CENTER"
            GridPane.rowIndex="1" GridPane.valignment="CENTER"/>
  </children>
</GridPane>]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class BoundSizes extends Application {
    @Override
    public void start(Stage primaryStage) {
        BorderPane borderPane = new BorderPane();
        VBox vbox = new VBox();
        Button b = new Button("THE BUTTON");
        vbox.getChildren().add(b);
        borderPane.setLeft(vbox);

        // the VBox stays e.g. 1/3 of the window width
        vbox.prefWidthProperty().bind(Bindings.divide(primaryStage.widthProperty(), 3.0));
        // painting it to be obvious
        vbox.setStyle("-fx-background-color: black");

        // the button stays e.g. at half the width of the VBox
        b.prefWidthProperty().bind(Bindings.divide(vbox.widthProperty(), 2.0));

        Scene scene = new Scene(borderPane, 300, 275);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String arg[]) {
        launch(arg);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43222017" questionTitle="JavaFX Refreshing To repaint a picture in new Location">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class CharacMove extends Application
{
    public static void main(String[] args) 
    {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception 
    {
        Group root = new Group();
        Scene scene = new Scene(root);

        scene.setFill(Color.BLACK);
        stage.setWidth(600);
        stage.setHeight(600);   
        stage.setTitle("BBMAN");
        stage.setScene(scene);

        Charac c1 = new Charac();
        ImageView ivChar = new ImageView();
        ivChar.setImage(c1.getImage());
        ivChar.setX(c1.getX());
        ivChar.setY(c1.getY());

        root.setFocusTraversable(true);
        root.requestFocus();
        root.setOnKeyPressed(new EventHandler<KeyEvent>()
        {
            @Override
            public void handle(KeyEvent e) 
            {
                switch(e.getCode())
                {
                    case UP:
                        c1.goUp();
                        break;
                    case DOWN:
                        c1.goDown();
                        break;
                    case LEFT:
                        c1.goLeft();
                        break;
                    case RIGHT:
                        c1.goRight();
                        break;
                    default:
                        break;
                }
                ivChar.setImage(c1.getImage());
                ivChar.setX(c1.getX());
                ivChar.setY(c1.getY());
            }
        });

        root.getChildren().add(ivChar);
        stage.show();
    }

    class Charac
    {
        private Image[] img;
        private double xLoc, yLoc;
        private int currentImg;    

        public Image getImage() { return img[currentImg]; }
        public double getX() { return xLoc; }
        public double getY() { return yLoc; }

        public Charac()
        {
            img = new Image[4];
            img[0] = new Image(getClass().getResource("Images/bbright.png").toString());
            img[1] = new Image(getClass().getResource("Images/bbleft.png").toString());
            img[2] = new Image(getClass().getResource("Images/bbup.png").toString());
            img[3] = new Image(getClass().getResource("Images/bbfront.png").toString());
        }

        public void goRight()
        {
            xLoc += 1;
            currentImg = 0;
        }

        public void goLeft() 
        {
            xLoc -= 1;
            currentImg = 1;
        }

        public void goUp()
        {
            yLoc -= 1;
            currentImg = 2;
        }

        public void goDown()
        {
            yLoc += 1;
            currentImg = 3;
        }
    }
}]]></Answer>
<Answer><![CDATA[box.setOnKeyPressed(new EventHandler<KeyEvent>(){
        @Override
        public void handle(KeyEvent e) {
            switch(e.getCode()){
                case UP:
                    c1.goUp();
                    break;
                case DOWN:
                    c1.goDown();
                    break;
                case LEFT:
                    c1.goLeft();
                    break;
                case RIGHT:
                    c1.goRight();
                    break;
            default:
                break;
            }   
            box.setTranslateY((double)c1.getLocationY());
            box.setTranslateX((double)c1.getLocationX());
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43210916" questionTitle="JavaFX deleting last drawn object from canvas">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class Main extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception{
        BorderPane root = new BorderPane();

        Pane graphicsPane = new Pane();
        root.setCenter(graphicsPane);

        graphicsPane.setOnMouseClicked(e -> {
            // Draw circle around x,y
            Circle circle = new Circle(e.getX(), e.getY(), 50.0);
            circle.setStroke(Color.RED);
            circle.setStrokeWidth(4.0);
            circle.setFill(null);
            graphicsPane.getChildren().add(circle);
        });

        VBox pane2 = new VBox(10);
        pane2.setPrefWidth(224);
        Button button1 = new Button("Clear Last Drawn");
        button1.setOnAction(e -> {
            int numCircles = graphicsPane.getChildren().size();
            if (numCircles > 0) {
                graphicsPane.getChildren().remove(numCircles - 1);
            }
        });

        pane2.getChildren().addAll(button1);
        root.setRight(pane2);
        graphicsPane.setStyle("-fx-background-color: #aaaaaa");
        pane2.setStyle("-fx-background-color: #224488");
        Scene scene1 = new Scene(root, 1024, 600);
        primaryStage.setScene(scene1);
        primaryStage.setTitle("Mouse Clicker");
        primaryStage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[private final double diameter = 25;
    private final LinkedList<Point2D> centers = new LinkedList<>();
    private final Canvas pane1 = new Canvas(800, 600);

    @Override
    public void start(Stage primaryStage) throws Exception
    {
        System.out.println("Hello");
        HBox root = new HBox();

        pane1.setOnMouseClicked((MouseEvent event) ->
        {
            centers.add(new Point2D(event.getSceneX(), event.getSceneY()));
            render();
            System.out.println("Clicked");
        });
        VBox pane2 = new VBox(10);
        pane2.setPrefSize(224, 600);
        Button button1 = new Button("Clear Last Drawn");
        button1.setOnMouseClicked((MouseEvent event) ->
        {
            if (!centers.isEmpty())
            {
                centers.removeLast();
                render();
                System.out.println("Last canvas loaded");
            }
        });
        pane2.getChildren().addAll(button1);
        pane1.setStyle("-fx-background-color: #224488");
        pane2.setStyle("-fx-background-color: #224488");
        root.getChildren().addAll(pane1, pane2);
        Scene scene1 = new Scene(root, 1024, 600);
        primaryStage.setScene(scene1);
        primaryStage.setTitle("Mouse Clicker Project (Berk YATKIN)");
        primaryStage.show();

    }

    private void render()
    {
        pane1.getGraphicsContext2D().clearRect(0, 0, pane1.getWidth(), pane1.getHeight());
        centers.forEach((p) ->
        {
            pane1.getGraphicsContext2D().strokeOval(
                    p.getX() - (diameter / 2),
                    p.getY() - (diameter / 2),
                    diameter,
                    diameter);
        });
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43209318" questionTitle="Filter some methods of servlet">
<Answer><![CDATA[public class WrappingFilter implements Filter {
    Filter wrapped;
    List<String> methods;

    @Override
    public void init(final FilterConfig filterConfig) throws ServletException {
        // process FilterConfig parameters "actual_filter" and "methods"
        String classname = filterConfig.getInitParameter("actual_filter");
        String methodsString = filterConfig.getInitParameter("methods");
        methods = Arrays.asList(methodsString.split("|"));
        try {
            // create and initialize actual filter
            Class<?> clazz = Class.forName(classname);
            wrapped = (Filter) clazz.getConstructor().newInstance();
            wrapped.init(filterConfig);            
        } catch (ClassNotFoundException ex) {
            throw new ServletException(ex);
        } catch (NoSuchMethodException ex) {
            throw new ServletException(ex);
        } catch (SecurityException ex) {
            throw new ServletException(ex);
        } catch (InstantiationException ex) {
            throw new ServletException(ex);
        } catch (IllegalAccessException ex) {
            throw new ServletException(ex);
        } catch (IllegalArgumentException ex) {
            throw new ServletException(ex);
        } catch (InvocationTargetException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        String method = ((HttpServletRequest) request).getMethod();
        if (methods.contains(method)) {
            // appropriate method: call wrapped filter
            wrapped.doFilter(request, response, chain);
        }
        else {
            // directly pass request to next element in chain by-passing wrapped filter
            chain.doFilter(request, response);
        }
    }

    @Override
    public void destroy() {
        // destroys wrapped filter
        wrapped.destroy();
    }    
}]]></Answer>
<Answer><![CDATA[public class PublicFilter implements Filter {

    private FilterConfig filterConfig;
    public static final String PUBLIC_METHODS = "com.example.access.PUBLIC_METHODS";
    static final String IS_PUBLIC = "com.example.access.IS_PUBLIC";

    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
    }

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        final List<String> allowedMethods = Arrays.asList(filterConfig.getInitParameter(PUBLIC_METHODS).split(","));
        final String method = ((HttpServletRequest) request).getMethod();

        if (allowedMethods.contains(method)) request.setAttribute(IS_PUBLIC, true);
        chain.doFilter(request, response);
    }

    public void destroy() {}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43150825" questionTitle="JavaFX Auto Open new Window">
<Answer><![CDATA[Timer timer = new Timer();
    TimerTask timerTask = new TimerTask() {

        @Override
        public void run() {
            Platform.runLater(()->{
                for (int i = 0; i<4; i++) {
                    Parent root = null;
                    try {
                        root = new FXMLLoader(getClass().getResource(View.ABBREVIATION)).load();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    Stage stage = new Stage();
                    stage.setScene(new Scene(root));
                    stage.setTitle("deneme");
                    stage.showAndWait();
                }
            });
        }
    };

    timer.schedule(timerTask, 6000);]]></Answer>
<Answer><![CDATA[private ScheduledExecutorService executor;

@Override
public void stop() throws Exception {
    // stop executor to allow the JVM to terminate
    executor.shutdownNow();
}

@Override
public void init() throws Exception {
    executor = Executors.newSingleThreadScheduledExecutor();
}

@Override
public void start(Stage primaryStage) {
    Button btn = new Button("Start");
    btn.setOnAction(new EventHandler<ActionEvent>() {

        public void handle(ActionEvent event) {
            // just display a "empty" scene
            Scene scene = new Scene(new Pane(), 100, 100);
            Stage stage = new Stage();
            stage.setScene(scene);

            // schedule showing the stage after 5 sec
            executor.schedule(new Runnable() {

                private int openCount = 5;

                @Override
                public void run() {
                    Platform.runLater(() -> {
                        stage.showAndWait();
                        if (--openCount > 0) {
                            // show again after 5 sec unless the window was already opened 5 times
                            executor.schedule(this, 5, TimeUnit.SECONDS);
                        }
                    });
                }

            }, 5, TimeUnit.SECONDS);

        }
    });

    StackPane root = new StackPane();
    root.getChildren().add(btn);

    Scene scene = new Scene(root);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43048178" questionTitle="EventFilter for ComboBox selected Item">
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.DialogPane;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class InterceptComboBox extends Application {

    private ComboBox<String> combo ;
    private boolean needsConfirmation = true ;
    private Label view ;
    private final ReadOnlyObjectWrapper<String> selectedValue = new ReadOnlyObjectWrapper<String>();

    public ReadOnlyObjectProperty<String> selectedValueProperty() {
        return selectedValue.getReadOnlyProperty();
    }

    public final String getSelectedValue() {
        return selectedValueProperty().get();
    }

    @Override
    public void start(Stage primaryStage) {
        combo = new ComboBox<>();
        combo.getItems().addAll("One", "Two", "Three");
        combo.setValue("One");
        selectedValue.set("One");
        view = new Label();
        view.textProperty().bind(Bindings.concat("This is view ", selectedValue));

        combo.valueProperty().addListener((obs, oldValue, newValue) -> {
            if (needsConfirmation) {
                SaveChangesResult saveChanges = showSaveChangesDialog();
                if (saveChanges.save) {
                    saveChanges();
                }
                if (saveChanges.proceed) {
                    selectedValue.set(newValue);
                } else { 
                    Platform.runLater(() -> {
                        needsConfirmation = false ;
                        combo.setValue(oldValue);
                        needsConfirmation = true ;
                    });
                }
            }
        });

        BorderPane root = new BorderPane(view);
        BorderPane.setAlignment(combo, Pos.CENTER);
        BorderPane.setMargin(combo, new Insets(5));
        root.setTop(combo);

        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();
    }

    private void saveChanges() {
        System.out.println("Save changes");
    }

    private SaveChangesResult showSaveChangesDialog() {
        DialogPane dialogPane = new DialogPane();
        dialogPane.setContentText("Save changes?");
        dialogPane.getButtonTypes().setAll(ButtonType.YES, ButtonType.NO, ButtonType.CANCEL);
        Dialog<SaveChangesResult> dialog = new Dialog<>();
        dialog.setDialogPane(dialogPane);
        dialog.setResultConverter(button -> {
            if (button == ButtonType.YES) return SaveChangesResult.SAVE_CHANGES ;
            else if (button == ButtonType.NO) return SaveChangesResult.PROCEED_WITHOUT_SAVING ;
            else return SaveChangesResult.CANCEL ;
        });
        return dialog.showAndWait().orElse(SaveChangesResult.CANCEL);
    }

    enum SaveChangesResult {
        SAVE_CHANGES(true, true), PROCEED_WITHOUT_SAVING(true, false), CANCEL(false, false) ;

        private boolean proceed ;
        private boolean save ;

        SaveChangesResult(boolean proceed, boolean save) {
            this.proceed = proceed ;
            this.save = save ;
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[comboBox.valueProperty().addListener(new ChangeListener<Object>()
{
    @Override
    public void changed(ObservableValue observable, Object oldValue, Object newValue)
    {
        Optional<ButtonType> result = saveAlert.showAndWait();

        if(result.isPresent())
        {
             if(result.get() == ButtonType.YES)
             {
                 //Your Save Functionality
                 comboBox.valueProperty().setValue(newValue);
             }
             else
             {
                 //Whatever
                 comboBox.valueProperty().setValue(oldValue);
             }
        }
    }    
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43034147" questionTitle="Handling ScrollEvent on TableView takes too much of the CPU Time">
<Answer><![CDATA[TableColumn<VerreFX, Number> stock ;

// ...

stock.setCellFactory(column -> new TableCell<VerreFX, Number>() {
    @Override
    protected void updateItem(Number item, boolean empty) {
        super.updateItem(item, empty);

        TableRow<VerreFX> currentRow = getTableRow();

        if (empty || item == null) {
            setText("");
            setGraphic(null);
           currentRow.setStyle(tableVerre.getStyle());
        } else {
            setText(getItem().toString());
        }

        if (!isEmpty()) {
            if (item.intValue() == 0 && st.getVerresBOX()) {
                currentRow.setStyle("-fx-background-color:lightcoral");
            } else {
                currentRow.setStyle(tableVerre.getStyle());
            }
        }
    }
});]]></Answer>
<Answer><![CDATA[tableVerre.addEventFilter(MouseEvent.MOUSE_CLICKED,(
            MouseEvent event)->
    {
        if ((event.getTarget() instanceof TableColumnHeader) | event.isDragDetect()) {
            System.err.println("Mouse Draged : " + event.toString());

            stock.setCellFactory((TableColumn<VerreFX, Number> column) -> {

                return new TableCell<VerreFX, Number>() {
                    @Override
                    protected void updateItem(Number item, boolean empty) {
                        super.updateItem(item, empty);

                        TableRow<VerreFX> currentRow = getTableRow();

                        if (empty || item == null) {
                            setText("");
                            setGraphic(null);
                            currentRow.setStyle(tableVerre.getStyle());
                        } else {
                            setText(getItem().toString());
                        }

                        if (!isEmpty()) {
                            if ((int) item == 0 && st.getVerresBOX()) {
                                currentRow.setStyle("-fx-background-color:lightcoral");
                            }
                        }
                    }
                };
            });
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43003237" questionTitle="Java 8 Stream , convert List&lt;File&gt; to Map&lt;Integer, List&lt;FIle&gt;&gt;">
<Answer><![CDATA[import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;

import static java.util.Arrays.asList;
import static java.util.Collections.singletonList;
import static java.util.stream.Collectors.groupingBy;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

/**
 * Created by holi on 3/24/17.
 */
public class StreamGroupingTest {


    private final File FILE_1MB = file(1);
    private final File FILE_2MB = file(2);
    private final File FILE_3MB = file(3);

    @Test
    void eachFileInIndividualGroupIfEachFileSizeGreaterThanMaxSize() {
        Map<Integer, List<File>> groups = grouping(asList(FILE_2MB, FILE_3MB), 1);

        assertThat(groups.size(), equalTo(2));
        assertThat(groups.get(1), equalTo(singletonList(FILE_2MB)));
        assertThat(groups.get(2), equalTo(singletonList(FILE_3MB)));
    }


    @Test
    void allFilesInAGroupIfTotalSizeOfFilesLessThanOrEqualMaxSize() {
        Map<Integer, List<File>> groups = grouping(asList(FILE_2MB, FILE_3MB), 5);

        assertThat(groups.size(), equalTo(1));
        assertThat(groups.get(1), equalTo(asList(FILE_2MB, FILE_3MB)));
    }

    @Test
    void allNeighboringFilesInAGroupThatTotalOfTheirSizeLessThanOrEqualMaxSize() {
        Map<Integer, List<File>> groups = grouping(asList(FILE_1MB, FILE_2MB, FILE_3MB), 3);

        assertThat(groups.size(), equalTo(2));
        assertThat(groups.get(1), equalTo(asList(FILE_1MB, FILE_2MB)));
        assertThat(groups.get(2), equalTo(singletonList(FILE_3MB)));
    }

    @Test
    void eachFileInIndividualGroupIfTheFirstFileAndTotalOfEachNeighboringFilesSizeGreaterThanMaxSize() {
        Map<Integer, List<File>> groups = grouping(asList(FILE_2MB, FILE_1MB, FILE_3MB), 2);

        assertThat(groups.size(), equalTo(3));
        assertThat(groups.get(1), equalTo(singletonList(FILE_2MB)));
        assertThat(groups.get(2), equalTo(singletonList(FILE_1MB)));
        assertThat(groups.get(3), equalTo(singletonList(FILE_3MB)));
    }

    @Test
    void theFirstEmptyFileInGroup1() throws Throwable {
        File emptyFile = file(0);

        Map<Integer, List<File>> groups = grouping(singletonList(emptyFile), 2);

        assertThat(groups.get(1), equalTo(singletonList(emptyFile)));
    }

    private static final long MB = 1024 * 1024;

    private Map<Integer, List<File>> grouping(List<File> files, long maxSize) {
        AtomicInteger group = new AtomicInteger(0);
        AtomicLong groupSize = new AtomicLong(maxSize * MB + 1);

        return files.stream().collect(groupingBy((file) -> {
            if (groupSize.addAndGet(file.length()) <= maxSize * MB) {
                return group.get();
            }
            groupSize.set(file.length());
            return group.incrementAndGet();
        }));
    }

    private Function<File, Integer> groupSize(final long maxSize) {
        long maxBytesSize = maxSize * MB;
        return new Function<File, Integer>() {
            private int group;
            private long groupSize = maxBytesSize + 1;

            @Override
            public Integer apply(File file) {
                return hasRemainingFor(file) ? current(file) : next(file);
            }

            private boolean hasRemainingFor(File file) {
                return (groupSize += file.length()) <= maxBytesSize;
            }

            private int next(File file) {
                groupSize = file.length();
                return ++group;
            }

            private int current(File file) {
                return group;
            }
        };
    }


    private File file(int sizeOfMB) {
        return new File(String.format("%dMB file", sizeOfMB)) {

            @Override
            public long length() {
                return sizeOfMB * MB;
            }

            @Override
            public boolean equals(Object obj) {
                File that = (File) obj;
                return length() == that.length();
            }
        };
    }

}]]></Answer>
<Answer><![CDATA[List<File> allFilesSortedBySize = getListOfFiles();
// get maxSize in bytes ONCE, instead of converting EACH size to MiB
long maxSizeBytes = (long)(maxSize * 1024 * 1024);
// use "diamond operator"
Map<Integer, List<File>> filesGroupedByMaxSizeMap = new HashMap<>();
// start with "create new list" condition to avoid code duplication
long totalLength = maxSizeBytes;
// count is obsolete, the map maintains a size

// the initial "totalLength = maxSizeBytes" forces creating a new list within the loop
List<File> filesWithSizeTotalMaxSize = null;

for(File file: allFilesSortedBySize) {
    long length = file.length();
    if(maxSizeBytes-totalLength <= length) {
        filesWithSizeTotalMaxSize = new ArrayList<>(); // no utility method needed

        // store each list immediately, so no action after the loop needed
        filesGroupedByMaxSizeMap.put(filesGroupedByMaxSizeMap.size()+1,
                                     filesWithSizeTotalMaxSize);
        totalLength = 0;
    }
    totalLength += length;
    filesWithSizeTotalMaxSize.add(file);
}
return filesGroupedByMaxSizeMap;]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="43003149" questionTitle="Iterate efficiently through 2 different List with same Type of Object(Java8)">
<Answer><![CDATA[// The initial capacity is set (more than) large enough to avoid any rehashing
Map<Long, List<Foo>> dbMap = new HashMap<>(3 * objectFromDb.size() / 2);

// Populate the map
// This could be done more effciently if the objects were ordered by mailId,
// which perhaps the DB could be enlisted to ensure.
for (Foo foo : objectsFromDb) {
    Long mailId = foo.getMailId();
    List<Foo> foos = dbMap.get(mailId);

    if (foos == null) {
        foos = new ArrayList<>();
        dbMap.put(mailId, foos);
    }
    foos.add(foo);
}

// Use the map
for (Foo fooStatus: feedBackStatusFromCsvFiles) {
    List<Foo> dbFoos = dbMap.get(fooStatus.getMailId());

    if (dbFoos != null) {
        String status = fooStatus.getStatus();

        // Iterate over only the Foos that we already know have matching Ids
        for (Foo fooDB : dbFoos) {
            fooDB.setStatus(status);
        }
    }
}]]></Answer>
<Answer><![CDATA[List<Foo> aList = new ArrayList<>();
    List<Foo> bList = new ArrayList<>();
    for(int i = 0;i<5;i++){
        Foo foo = new Foo();
        foo.setId((long) i);
        foo.setValue("FooA"+String.valueOf(i));
        aList.add(foo);
        foo = new Foo();
        foo.setId((long) i);
        foo.setValue("FooB"+String.valueOf(i));
        bList.add(foo);
    }

    final Map<Long,Foo> bMap = bList.stream().collect(Collectors.toMap(Foo::getId, Function.identity()));

    aList.stream().forEach(it->{
        Foo bFoo = bMap.get(it.getId());
        if( bFoo != null){
            it.setValue(bFoo.getValue());
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42989477" questionTitle="How to make a ListView selectable but not editable">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class NewFXMain extends Application {

    @Override
    public void start(Stage primaryStage) {
        ListView listView = new ListView();
        listView.getItems().addAll("one","two","three","four");

        listView.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                System.out.println(listView.getSelectionModel().getSelectedItem());
            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(listView);
        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("ListView Example");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[TableView<DataBean> table = new TableView<>();
    table.setItems(...); // list of some DataBean objects with dataBeanField proprty
    table.setEditable(true);

    TableColumn<DataBean, String> column = new TableColumn<>("SomeData");
    column.setCellValueFactory(new PropertyValueFactory<DataBean, String>("dataBeanField"));
    column.setCellFactory(new Callback<TableColumn<DataBean, String>, TableCell<DataBean, String>>() {
        @Override
        public TableCell<DataBean, String> call(TableColumn<DataBean, String> param) {
            return new TextFieldTableCell<>(new DefaultStringConverter() {
                private String defaultValue = "";

                @Override
                public String fromString(String newValue) {
                    return super.fromString(defaultValue);
                }

                @Override
                public String toString(String value) {
                    return defaultValue = super.toString(value);
                }
            });
        }
    });]]></Answer>
<Answer><![CDATA[package sample;

import com.sun.javafx.scene.control.skin.VirtualFlow;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.TextFieldListCell;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class Main extends Application {
private boolean editable = false;

public static  IndexedCell getCell(final Control control, final int index) {
    return getVirtualFlow(control).getCell(index);
}

public static VirtualFlow<?> getVirtualFlow(Control control) {
    Group group = new Group();
    Scene scene = new Scene(group);
    Stage stage = new Stage();

    if(control.getScene() == null) {
        group.getChildren().setAll(control);
        stage.setScene(scene);
        stage.show();
    }

    VirtualFlow<?>flow = (VirtualFlow<?>) control.lookup("#virtual-flow");
    return flow;
}

public void setEditable(ListView contactsList){
        //this needs to be done since we need to run our code after the text field was rendered
        //so we need to invoke our code after this happens, if not it will throw a null pointer...
        Platform.runLater(() -> {
            //this is one of the most important guys because javafx api says that
            //TextFieldListCell.forListView() allows editing of the cell content when the cell is double-clicked,
            // or when {@link ListView#edit(int)} is called.
            int rowIndex = contactsList.getSelectionModel().getSelectedIndex();
            contactsList.edit(rowIndex);
            ListCell rootCell = (ListCell) getCell(contactsList, rowIndex);
            TextField textField = (TextField) rootCell.getGraphic();
            textField.setEditable(editable);
        });
}

@Override
public void start(Stage primaryStage) throws Exception{
    List<String> contacts = new ArrayList<>(Arrays.asList("968787522","3424234234","2343234324"));
    ListView<String> contactsList = new ListView();
    contactsList.setItems(FXCollections.observableArrayList(contacts));
    contactsList.setEditable(true);

    //this gives me the ability to edit the row as text field but I want this text field to not be editable
    contactsList.setCellFactory(TextFieldListCell.forListView());
    contactsList.setOnEditStart(e -> {
        setEditable(contactsList);
    });

    StackPane pane = new StackPane();
    Button editBtn = new Button("Toggle edit");
    editBtn.setOnAction(event -> {
        editable = !editable;
        editBtn.setText("Editing = " + editable);
        //to cancel any editing that might be occuring
        contactsList.getSelectionModel().clearSelection();
    });
    pane.getChildren().addAll(contactsList,editBtn);
    primaryStage.setScene(new Scene(pane, 300, 275));
    primaryStage.show();
}

public static void main(String[] args) {
    launch(args);
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42984697" questionTitle="Rethrow exceptions while streaming">
<Answer><![CDATA[public class Rethrowing<T,E extends Throwable> implements Spliterator<T> {
    public static <E extends Throwable, T> Stream<T> translateExceptions(
        Stream<T> source, Class<E> catchType,
        Function<? super E, ? extends RuntimeException> translator) {

        return StreamSupport.stream(new Rethrowing<>(
            source.spliterator(), catchType, translator), source.isParallel());
    }
    private final Spliterator<T> source;
    private final Class<E> catchType;
    private final Function<? super E, ? extends RuntimeException> translator;

    public Rethrowing(Spliterator<T> sp, Class<E> catchType,
            Function<? super E, ? extends RuntimeException> translator) {
        this.source = sp;
        this.catchType = catchType;
        this.translator = translator;
    }
    @Override public boolean tryAdvance(Consumer<? super T> action) {
        try { return source.tryAdvance(action); }
        catch(Throwable t) {
            if(catchType.isInstance(t))
                throw translator.apply(catchType.cast(t));
            else throw t;
        }
    }
    @Override public int characteristics() {
        return source.characteristics();
    }
    @Override public long estimateSize() {
        return source.estimateSize();
    }
    @Override public Spliterator<T> trySplit() {
        Spliterator<T> split = source.trySplit();
        return split==null? null: new Rethrowing<>(split, catchType, translator);
    }
}]]></Answer>
<Answer><![CDATA[import org.junit.Test;

import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

/**
 * @author Beka Tsotsoria
 */
public class StreamExceptionRethrowingTest {

    @Test
    public void throwingIteratorMustBeConsumedWhenStreamIsCollected() throws Exception {
        ThrowingIterator itToBeConsumed = new ThrowingIterator();

        assertThatThrownBy(() -> streamFromIterator(itToBeConsumed)
            .collect(Collectors.toList()))
            .isInstanceOf(ExceptionA.class);

        assertThat(itToBeConsumed.consumed()).isTrue();
    }

    @Test
    public void throwingIteratorMustNotBeConsumedUntilNewStreamIsCollected() throws Exception {
        ThrowingIterator itNotToBeConsumed = new ThrowingIterator();
        RethrowingIterator rethrowingIterator = new RethrowingIterator(streamFromIterator(itNotToBeConsumed).iterator());

        assertThat(itNotToBeConsumed.consumed()).isFalse();

        Stream<String> stream2 = streamFromIterator(rethrowingIterator);

        assertThat(itNotToBeConsumed.consumed()).isFalse();

        assertThatThrownBy(() -> stream2
            .collect(Collectors.toList()))
            .hasCauseInstanceOf(ExceptionA.class)
            .isInstanceOf(ExceptionB.class);

        assertThat(itNotToBeConsumed.consumed()).isTrue();
    }

    @Test
    public void streamIteratorMustNotBeConsumedUntilNewStreamIsCollected() throws Exception {
        Stream<String> stream = Stream.of("dummy")
            .map(d -> {
                throw new ExceptionA();
            });

        Stream<String> stream2 = streamFromIterator(new RethrowingIterator(stream.iterator()));
        // No exceptions so far, i.e. stream.iterator() was not consumed

        assertThatThrownBy(() -> stream2
            .collect(Collectors.toList()))
            .hasCauseInstanceOf(ExceptionA.class)
            .isInstanceOf(ExceptionB.class);
    }

    private Stream<String> streamFromIterator(Iterator<String> it) {
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.NONNULL), false);
    }

    static class ThrowingIterator implements Iterator<String> {

        private boolean hasNextCalled;
        private boolean nextCalled;

        @Override
        public boolean hasNext() {
            hasNextCalled = true;
            throw new ExceptionA();
        }

        @Override
        public String next() {
            nextCalled = true;
            throw new ExceptionA();
        }

        public boolean consumed() {
            return hasNextCalled || nextCalled;
        }
    }

    static class RethrowingIterator implements Iterator<String> {

        private Iterator<String> it;

        public RethrowingIterator(Iterator<String> it) {
            this.it = it;
        }

        @Override
        public boolean hasNext() {
            try {
                return it.hasNext();
            } catch (ExceptionA e) {
                throw new ExceptionB(e);
            }
        }

        @Override
        public String next() {
            try {
                return it.next();
            } catch (ExceptionA e) {
                throw new ExceptionB(e);
            }
        }
    }


    static class ExceptionA extends RuntimeException {

    }

    static class ExceptionB extends RuntimeException {

        public ExceptionB(Throwable cause) {
            super(cause);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42960107" questionTitle="Nested Paths to JavaFX TreeView">
<Answer><![CDATA[import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.stage.Stage;

public class TreeFromPaths extends Application {

    private final List<String> paths = Arrays.asList(
            "input1",
            "input2.sub1",
            "input2.sub2",
            "input2.sub2.subsub1",
            "input2.sub3",
            "input3",
            "input3.sub1",
            "input3.sub1.subsub1",
            "input3.sub1.subsub1.subsubsub1",
            "input3.sub2"
    );

    private <S,T> TreeView<T> createTree(
            List<S> paths, 
            Function<S, ? extends Iterable<T>> pathSplitter, 
            T rootValue) {

        TreeItem<T> root = new TreeItem<>(rootValue);
        populateTree(paths, pathSplitter, root);
        TreeView<T> tree = new TreeView<>(root);
        tree.setShowRoot(false);
        return tree;
    }

    private <S,T> void populateTree(
            List<S> paths, 
            Function<S, ? extends Iterable<T>> pathSplitter, 
            TreeItem<T> root) {

        for (S path : paths) {
            TreeItem<T> current = root ;
            for (T component : pathSplitter.apply(path)) {
                current = getOrCreateChild(current, component);
            }
        }
    }

    private <T> TreeItem<T> getOrCreateChild(TreeItem<T> parent, T value) {
        for (TreeItem<T> child : parent.getChildren()) {
            if (value.equals(child.getValue())) {
                return child ;
            }
        }
        TreeItem<T> newChild = new TreeItem<>(value);
        parent.getChildren().add(newChild);
        return newChild ;
    }

    @Override
    public void start(Stage primaryStage) {

        Function<String, List<String>> pathSplitter = 
            path -> Arrays.asList(path.split("\\."));

        TreeView<String> treeView = createTree(paths, pathSplitter, "root");

        primaryStage.setScene(new Scene(treeView, 400, 400));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[private static TreeItem<String> getItem(Map<String, TreeItem<String>> items, TreeItem<String> root, String itemPath) {
    TreeItem<String> result = items.get(itemPath);

    if (result == null) {
        // new item needs to be created

        int index = itemPath.lastIndexOf('.');

        result = new TreeItem<>(itemPath.substring(index + 1));
        items.put(itemPath, result);

        if (index == -1) {
            // no more subpaths => connect to root
            root.getChildren().add(result);
        } else {
            // find/create parent
            TreeItem<String> parent = getItem(items, root, itemPath.substring(0, index));

            parent.getChildren().add(result);
        }
    }

    return result;

}

@Override
public void start(Stage primaryStage) throws Exception {
    List<String> paths = Arrays.asList(
            "input1",
            "input2.sub1",
            "input2.sub2",
            "input2.sub2.subsub1",
            "input2.sub3",
            "input3",
            "input3.sub1",
            "input3.sub1.subsub1",
            "input3.sub1.subsub1.subsubsub1",
            "input3.sub2");

    TreeItem<String> root = new TreeItem<>();
    Map<String, TreeItem<String>> items = new HashMap<>();

    for (String path : paths) {
        getItem(items, root, path);
    }

    TreeView<String> treeView = new TreeView<>(root);
    treeView.setShowRoot(false);
    Scene scene = new Scene(treeView);
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42856471" questionTitle="Correct sizing of Webview embedded in Tabelcell">
<Answer><![CDATA[public class WebviewCellFactory<S,T> implements Callback<TableColumn<S,T>, TableCell<S,T>> {
    @Override
    public TableCell<S, T> call(TableColumn<S, T> column) {
        return new TableCell<S, T>() {
            @Override
            protected void updateItem(T item, boolean empty) {
                super.updateItem(item, empty);
                if (item == null || empty) {
                    setText(null);
                    setGraphic(null);
                    setStyle("");
                } else {
                    WebView webview = new WebView();
                    WebEngine engine = webview.getEngine();
                    webview.setPrefHeight(-1);   // <- Absolute must at this position (before calling the Javascript)
                    webview.setBlendMode(BlendMode.DARKEN);

                    setGraphic(webview);
                    engine.loadContent("<body topmargin=0 leftmargin=0 style=\"background-color: transparent;\">"+item+"</body>");
                    engine.documentProperty().addListener((obj, prev, newv) -> {
                        String heightText = engine.executeScript(   // <- Some modification, which gives moreless the same result than the original
                                "var body = document.body,"
                                        + "html = document.documentElement;"
                                        + "Math.max( body.scrollHeight , body.offsetHeight, "
                                        + "html.clientHeight, html.scrollHeight , html.offsetHeight );"
                        ).toString();
                        Double height = Double.parseDouble(heightText.replace("px", "")) + 10 ;  // <- Why are this 15.0 required??
                        webview.setPrefHeight(height);
                        this.setPrefHeight(height);
                    });
                }
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[public class TableViewSampleHTML extends Application {

private final ObservableList<MyData> data = FXCollections.observableArrayList(new MyData(1L), new MyData(14L), new MyData(2L), new MyData(3L), new MyData(15L));

public static void main(final String[] args) {
    launch(args);
}

@Override
public void start(final Stage stage) {
    final Scene scene = new Scene(new Group(), 400, 800);

    TableView<MyData> table = new TableView<>();

    table.setPrefWidth(400);
    table.setPrefHeight(800);

    final TableColumn<MyData, Long> nameCol = new TableColumn("So So");
    final TableColumn<MyData, Long> col2 = new TableColumn("la la");
    nameCol.setPrefWidth(200);
    col2.setCellValueFactory(new PropertyValueFactory<>("i"));
    nameCol.setCellValueFactory(new PropertyValueFactory<>("i"));
    nameCol.widthProperty().addListener((ob,oldV,newV) -> {table.refresh();} );

    // Allow to display Textflow in Column
    nameCol.setCellFactory(new Callback<TableColumn<MyData, Long>, TableCell<MyData, Long>>() {

        @Override
        public TableCell<MyData, Long> call(TableColumn<MyData, Long> column) {

            return new TableCell<MyData, Long>() {

                @Override
                protected void updateItem(Long item, boolean empty) {
                    super.updateItem(item, empty);

                    if (item == null || empty) {

                        setText(null);
                        setGraphic(null);
                        setStyle("");

                    } else {
                        WebView webview = new WebView();
                        WebEngine engine = webview.getEngine();

                        webview.setPrefHeight(-1);   // <- Absolute must at this position (before calling the Javascript)
                        setGraphic(webview);

                        String textHTML = new String(new char[item.intValue()]).replace("\0", " <b> bold </b> normal, ");
                        textHTML = "<body>" 
                                + textHTML + "</body>";
                        engine.loadContent(textHTML);


                        engine.documentProperty().addListener((obj, prev, newv) -> {

                        String heightText = engine.executeScript(   // <- Some modification, which gives moreless the same result than the original
                                "var body = document.body,"
                                + "html = document.documentElement;"
                                + "Math.max( body.scrollHeight , body.offsetHeight, "
                                + "html.clientHeight, html.scrollHeight , html.offsetHeight );"
                        ).toString();

                        System.out.println("heighttext: " + heightText);
                        Double height = Double.parseDouble(heightText.replace("px", "")) + 15.0;  // <- Why are this 15.0 required??
                        webview.setPrefHeight(height);
                        this.setPrefHeight(height);
                        });
                    }

                }
            };
        }
    });

    table.setItems(data);
    table.getColumns().addAll(nameCol);
    table.getColumns().addAll(col2);

    ((Group) scene.getRoot()).getChildren().addAll(table);

    stage.setScene(scene);
    stage.show();
}

public static class MyData {

    private Long i;

    public MyData(Long i) {
        this.i = i;
    }

    public Long getI() {
        return i;
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42819623" questionTitle="Showing a stage from the Main class in JavaFX">
<Answer><![CDATA[public void start(Stage primaryStage) throws Exception{

    Parent root = FXMLLoader.load(getClass().getResource("real.fxml"));
    primaryStage.setTitle("LoL Ready To Win");
    primaryStage.setResizable(false);
    primaryStage.setScene(new Scene(root));

    try {

        input = new FileInputStream("config.properties");
        prop.load(input);

        if(prop.getProperty("name") != null){
            primaryStage.show();
        }else if(prop.getProperty("name") == null){

            try {
                Stage stage = new Stage();

                FXMLLoader loader = new FXMLLoader(getClass().getResource("summ.fxml"));
                Parent root1 = loader.load();

                stage.setTitle("Insert Title Here");
                stage.setResizable(false);
                stage.setScene(new Scene(root1));

                stage.showAndWait();

                // if you need the input:
                SummController summController = loader.getController();
                String name = summController.getName();
                // do something with name...

                primaryStage.show();

            }catch(IOException e){
                e.printStackTrace();
            }
        }


    } catch (IOException ex) {
        ex.printStackTrace();
    } finally {
        if (input != null) {
            try {
                input.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // ...
}]]></Answer>
<Answer><![CDATA[public void start(Stage primaryStage) {
    Parent root = FXMLLoader.load(getClass().getResource("real.fxml"));
    primaryStage.setTitle("LoL Ready To Win");
    primaryStage.setResizable(false);
    primaryStage.setScene(new Scene(root));

    try {

        input = new FileInputStream("config.properties");
        prop.load(input);

        if(prop.getProperty("name") == null){               
            try {
                Stage stage = new Stage();
                Parent root1 = FXMLLoader.load(getClass().getResource("summ.fxml"));
                stage.setTitle("Insert Title Here");
                stage.setResizable(false);
                stage.setScene(new Scene(root1));
                stage.showAndWait();

                input = new FileInputStream("config.properties");
                prop.load(input);
            }catch(IOException e){
                e.printStackTrace();
            }
        }

        primaryStage.show();

    } catch (IOException ex) {
        ex.printStackTrace();
    } finally {
        if (input != null) {
            try {
                input.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42818440" questionTitle="Catching java.lang.NoClassDefFoundError on Non-MACOS JRE">
<Answer><![CDATA[if(System.getProperty("os.name").toUpperCase().startsWith("MAC")) {
System.setProperty("com.apple.mrj.application.apple.menu.about.name", "My App Name");
System.setProperty("apple.awt.application.name", "My App Short name");
//Need for macos global menubar
System.setProperty("apple.laf.useScreenMenuBar", "true");

try {
    Class application = Class.forName("com.apple.eawt.Application");
    Method getApplication = application.getMethod("getApplication");
    Object instance = getApplication.invoke(application);

    Class[] params = new Class[1];
    params[0] = Image.class;
    Method setIcon = application.getMethod("setDockIconImage",params);
    setIcon.invoke(instance,Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("images/icon.png")));

} catch (ClassNotFoundException | NoSuchMethodException |
        SecurityException | IllegalAccessException |
        IllegalArgumentException | InvocationTargetException exp) {
    exp.printStackTrace(System.err);
}
}]]></Answer>
<Answer><![CDATA[package java.awt;

public class Desktop {

    /* ... */

    /**
     * Adds sub-types of {@link AppEventListener} to listen for notifications
     * from the native system.
     *
     * @param listener
     * @see AppForegroundListener
     * @see AppHiddenListener
     * @see AppReOpenedListener
     * @see AppScreenSleepListener
     * @see AppSystemSleepListener
     * @see AppUserSessionListener
     */

    public void addAppEventListener(final AppEventListener listener) {}

    /**
     * Requests user attention to this application (usually through bouncing the Dock icon).
     * Critical requests will continue to bounce the Dock icon until the app is activated.
     *
     */
    public void requestUserAttention(final boolean critical) {}

    /**
     * Attaches the contents of the provided PopupMenu to the application's Dock icon.
     */
    public void setDockMenu(final PopupMenu menu) {}

    /**
     * Changes this application's Dock icon to the provided image.
     */
    public void setDockIconImage(final Image image) {}


    /**
     * Affixes a small system provided badge to this application's Dock icon. Usually a number.
     */
    public void setDockIconBadge(final String badge) {}

    /**
     * Displays or hides a progress bar or other indicator in
     * the dock.
     *
     * @see DockProgressState.NORMAL
     * @see DockProgressState.PAUSED
     * @see DockProgressState.ERROR
     *
     * @see #setDockProgressValue
     */
    public void setDockProgressState(int state) {}

    /**
     * Sets the progress bar's current value to {@code n}.
     */
    public void setDockProgressValue(int n) {}

    /**
     * Tests whether a feature is supported on the current platform.
     */

    public boolean isSupportedFeature(Feature f) {}

    /* ... */
}]]></Answer>
<Answer><![CDATA[public class MacSetup implements Runnable {
    @Override
    public void run() {
        System.setProperty("com.apple.mrj.application.apple.menu.about.name", "My app name");
        System.setProperty("apple.awt.application.name", "My app name");
        //Need for macos global menubar
        System.setProperty("apple.laf.useScreenMenuBar", "true");
        com.apple.eawt.Application app = com.apple.eawt.Application.getApplication();
        app.setDockIconImage(Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("images/icon.png")));
        app.setAboutHandler(new com.apple.eawt.AboutHandler() {
            @Override
            public void handleAbout(com.apple.eawt.AppEvent.AboutEvent aboutEvent) {
                AboutDialog a = new AboutDialog();
                a.setTitle("About");
                a.pack();
                a.setResizable(false);
                centerDialogInScreen(a);
                a.setVisible(true);
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42817884" questionTitle="java 8 how to get distinct list on more than one property">
<Answer><![CDATA[public class ItemWrapper {

    Item item;

    ItemWrapper(Item item) {
        this.item = item;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ItemWrapper)) return false;
        ItemWrapper other = (ItemWrapper) obj;
        return  Objects.equals(item.name, other.item.name) ||
                item.price == other.item.price;
    }

    @Override
    public int hashCode() {
        return 1;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

class Class {

  public static <T> Predicate<T> distinctByKey(Function<? super T, Object> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
  }

  private static List<Pojo> getList() {
    return Arrays.asList(
      new Pojo("123", 100),
      new Pojo("123", 100),
      new Pojo("123", 100),
      new Pojo("456", 200)
    );
  }

  private static class NameAndPricePojoKey {
    final String name;
    final int price;

    public NameAndPricePojoKey(final Pojo pojo) {
      this.name = pojo.getName();
      this.price = pojo.getPrice();
    }

    @Override
    public boolean equals(final Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;

      final NameAndPricePojoKey that = (NameAndPricePojoKey) o;

      if (price != that.price) return false;
      return name != null ? name.equals(that.name) : that.name == null;

    }

    @Override
    public int hashCode() {
      int result = name != null ? name.hashCode() : 0;
      result = 31 * result + price;
      return result;
    }
  }

  public static void main(String[] args) {

    System.out.println(getList().stream()
      // extract a key for each Pojo in here. 
      .filter(distinctByKey(NameAndPricePojoKey::new))
      .collect(Collectors.toList()));
  }

}

class Pojo {
  private String name;
  private Integer price;
  private Object otherField1;
  private Object otherField2;

  public Pojo(final String name, final Integer price) {
    this.name = name;
    this.price = price;
  }

  public String getName() {
    return name;
  }

  public void setName(final String name) {
    this.name = name;
  }

  public Integer getPrice() {
    return price;
  }

  public void setPrice(final Integer price) {
    this.price = price;
  }

  public Object getOtherField1() {
    return otherField1;
  }

  public void setOtherField1(final Object otherField1) {
    this.otherField1 = otherField1;
  }

  public Object getOtherField2() {
    return otherField2;
  }

  public void setOtherField2(final Object otherField2) {
    this.otherField2 = otherField2;
  }

  @Override
  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    final Pojo pojo = (Pojo) o;

    if (name != null ? !name.equals(pojo.name) : pojo.name != null) return false;
    if (price != null ? !price.equals(pojo.price) : pojo.price != null) return false;
    if (otherField1 != null ? !otherField1.equals(pojo.otherField1) : pojo.otherField1 != null) return false;
    return otherField2 != null ? otherField2.equals(pojo.otherField2) : pojo.otherField2 == null;

  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (price != null ? price.hashCode() : 0);
    result = 31 * result + (otherField1 != null ? otherField1.hashCode() : 0);
    result = 31 * result + (otherField2 != null ? otherField2.hashCode() : 0);
    return result;
  }

  @Override
  public String toString() {
    final StringBuilder sb = new StringBuilder("Pojo{");
    sb.append("name='").append(name).append('\'');
    sb.append(", price=").append(price);
    sb.append(", otherField1=").append(otherField1);
    sb.append(", otherField2=").append(otherField2);
    sb.append('}');
    return sb.toString();
  }
}]]></Answer>
<Answer><![CDATA[public static <T> List<T> distinctList(List<T> list, Function<? super T, ?>... keyExtractors) {

    return list
        .stream()
        .filter(distinctByKeys(keyExtractors))
        .collect(Collectors.toList());
}

private static <T> Predicate<T> distinctByKeys(Function<? super T, ?>... keyExtractors) {

    final Map<List<?>, Boolean> seen = new ConcurrentHashMap<>();

    return t -> {

        final List<?> keys = Arrays.stream(keyExtractors)
            .map(ke -> ke.apply(t))
            .collect(Collectors.toList());

        return seen.putIfAbsent(keys, Boolean.TRUE) == null;

    };

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42795543" questionTitle="JavaFX animation stops after first cycle">
<Answer><![CDATA[Pane pane = new Pane();

    Text text = new Text(500, 300, "0");
    int[] counter =
    {
        0
    };
    text.setFont(Font.font("Comic Sans MS", FontWeight.BOLD, FontPosture.REGULAR, 100));

    Animation animation = new Timeline(new KeyFrame(Duration.millis(1000), e
            ->
    {
        text.setText(Integer.toString(counter[0]++ % 4));
    }));
    animation.setCycleCount(Timeline.INDEFINITE);
    animation.play();

    pane.getChildren().addAll(text);

    Scene scene = new Scene(pane);
    primaryStage.setScene(scene);
    primaryStage.show();]]></Answer>
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline; 
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class GeneralTesting extends Application{
    private Text text;
    private int counter = 1;
    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Pane pane = new Pane();

        text = new Text(500, 300, "0");

        text.setFont(Font.font("Comic Sans MS", FontWeight.BOLD, FontPosture.REGULAR, 100));

        Animation animation = new Timeline(new KeyFrame(Duration.millis(1000), e -> {
            counter++; 
            changeText();
        }));

        animation.setCycleCount(Timeline.INDEFINITE);
        animation.play();

        pane.getChildren().addAll(text);

        Scene scene = new Scene(pane);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public void changeText(){
        if (counter > 5){
            counter = 0;
        }
        text.setText(String.valueOf(counter));
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42749841" questionTitle="Using lambda expressions with non-functional interfaces in Java">
<Answer><![CDATA[public interface OnAnimationEnd {
    void onAnimationEnd(Animation animation);
}

public interface OnAnimationStart {
    void onAnimationStart(Animation animation);
}

public class AnimationListeners {
    public static Animation.AnimationListener adapt(OnAnimationStart oas) {
        return new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                oas.onAnimationStart(animation);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {
            }
        });
    }

    // same for the end
}]]></Answer>
<Answer><![CDATA[class Animation {}

// an analogue of the Animation.AnimationListener class
interface AnimationListener {
    void onAnimationStart(Animation animation);
    void onAnimationEnd(Animation animation);
}

class AnimationListenerBuilder {

    // do nothing by default (avoiding a NPE from the build method)
    private Consumer<Animation> onAnimationStartCallback = animation -> {};
    private Consumer<Animation> onAnimationEndCallback = animation -> {};

    public AnimationListenerBuilder setOnAnimationStartCallback(Consumer<Animation> supplier) {
        onAnimationStartCallback = supplier;
        return this;
    }

    public AnimationListenerBuilder setOnAnimationEndCallback(Consumer<Animation> supplier) {
        onAnimationEndCallback = supplier;
        return this;
    }

    private AnimationListener build() {
        return new AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {
                onAnimationStartCallback.accept(animation);
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                onAnimationEndCallback.accept(animation);
            }

        };
    }

    public static void main(String[] args) {

        AnimationListenerBuilder builder = new AnimationListenerBuilder();

        AnimationListener listener = builder
                .setOnAnimationEndCallback(animation -> {})
                .setOnAnimationEndCallback(animation -> {})
                .build();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42732049" questionTitle="How to run some code repeatedly after an interval that can changes?">
<Answer><![CDATA[public class Worker extends Thread {

private static final Logger logger = Logger.getLogger(Worker.class);

private volatile int delayInSec = 1;

private CountDownLatch latch;

private final int STARTED = 0;
private final int STOPPED = 1;
private volatile int state = STOPPED;

public Worker(){}


@Override
public void run() {

    logger.debug("enter to execution method");

    while (!isInterrupted()) {

        // stop if needed (it's additional feature)
        if (state == STOPPED) {
            logger.debug("stopped and locked");
            try {
                latch = new CountDownLatch(1);
                latch.await();
            } catch (InterruptedException e) {
                logger.warning("got interruption while waiting for action ", e);
                break;
            }
            logger.debug("awake");
        }

        // do your stuff here

        try {
            // then delay
            logger.debug("go to sleep for %s sec.",delayInSec);
            latch = new CountDownLatch(1);
            latch.await(delayInSec, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            logger.warning("got interruption while waiting for action ", e);
            break;
        }


    }

    logger.debug("exit from execution method");

}


public void startJob(){
    state = STARTED;
    logger.debug("started");
    if (latch!=null)
       latch.countDown();
}

public void stopJob(){  
    state =  STOPPED;
    logger.debug("stopped");
}


public void shutdown(){
    logger.debug("shutdown");
    interrupt();
}

public void changeDelay(int delayInSec) {
    logger.debug("set new delay %s", delayInSec);
    this.delayInSec = delayInSec;       
}


}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Line line = new Line(25, 125, 125, 125);
    Rotate rotate = new Rotate(0, 125, 125);
    line.getTransforms().add(rotate);

    ToggleButton btn = new ToggleButton();
    btn.textProperty().bind(Bindings.when(btn.selectedProperty()).then("5 Hz").otherwise("2 Hz"));
    StackPane.setAlignment(btn, Pos.BOTTOM_LEFT);

    // rotate by one 60th of a full rotation each time
    Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(1), evt -> rotate.setAngle((rotate.getAngle() + (360d / 60d)) % 360)));
    timeline.setCycleCount(Animation.INDEFINITE);

    // rate depends on button state
    timeline.rateProperty().bind(Bindings.when(btn.selectedProperty()).then(5d).otherwise(2d));

    Pane linePane = new Pane(line);
    linePane.setMinSize(250, 250);
    linePane.setMaxSize(250, 250);
    StackPane root = new StackPane();
    root.getChildren().addAll(linePane, btn);

    Scene scene = new Scene(root, 300, 300);

    primaryStage.setScene(scene);
    timeline.play();

    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42700678" questionTitle="How to make logic operations with 2d array java?">
<Answer><![CDATA[public class Inequality implements Criterion {

    public enum Operation { LESS_THAN, GREATER_THAN }

    private final Operation operation ;

    private final String variable ;

    private final int value ;

    public Criterion(Operation op, String variable, int value) {
        this.op = op ;
        this.variable = variable ;
        this.value = value ;
    }

    @Override
    public  boolean matches(Map<String, Integer> data) {
        if (! data.containsKey(variable) ) {
            return false ; // or throw exception...
        }
        int dataValue = data.get(variable);
        switch (operation) {
            case LESS_THAN: return dataValue < value ;
            case GREATER_THAN: return dataValue > value ;
            default: // throw exception ...
        }
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args)
{
    // TODO code application logic here
    String[] linesFromFile = {"1, 4, 1, 4",               
                              "2, 5, 2, 4",
                              "3, 2, 3, 5",
                              "4, 3, 4, 2"};

    List<String> saveTrueDataHere = new ArrayList();

    for(int i = 0; i < linesFromFile.length; i++)
    {
        System.out.println(linesFromFile[i] + ": " + compareItemsInLine(linesFromFile[i]));
        if(compareItemsInLine(linesFromFile[i]))
        {
            saveTrueDataHere.add(linesFromFile[i]);
        }
    }

    System.out.println("Number of true items saved: " + saveTrueDataHere.size());
    //Print the items that returned true.
    for(String item : saveTrueDataHere)
    {
        System.out.println(item);
    }
}  

static boolean compareItemsInLine(String line)
{
    String items[] = line.split(", ");

    //                         v1                                v2                                 v3
    return Integer.parseInt(items[0]) > 2 && Integer.parseInt(items[1]) < 3 || Integer.parseInt(items[2]) < 4;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42696798" questionTitle="Java 8 - Get the 'parent' object of a list element">
<Answer><![CDATA[class A {
    private List<B> children;

    public void addChild(B b) {
        if (b != null) {
            this.children.add(b);
            b.setParent(this);
        }
    }
}

class B {
    private A parent;

    public void setParent(A a) {
        if (a != null) {
            this.parent = a;
        }
    }
}]]></Answer>
<Answer><![CDATA[public class A {
   private String name;
   private List<B> bs;

   public A(String name) {
       this.name = name;
       this.bs = new ArrayList<>();
   }

   public void addB(B b) {
       bs.add(b, this);
   }
   public List<B> getBs() {
       return bs;
   }    
}

public class B {
    private String name;
    private A referenceToA;

    public B(String name, A referenceToA) {
        this.name = name;
        this.referenceToA = referenceToA;
    }

    public String toString() {
        return name;
    }

    public A getReferenceToA()
    {
        return referenceToA;
    }
}]]></Answer>
<Answer><![CDATA[class A {
    private final String name;
    private final List<B> bs = new ArrayList<>();

    public A(String name) {
        this.name = name;
    }

    public B addB(String name) {
        bs.add(new B(this, name));
    }
}

class B {
    final A parent;
    final String name;

    B(A parent, String name) {
        this.parent = parent;
        this.name = name;
    }

    public A getA() { return parent; }]]></Answer>
<Answer><![CDATA[public class B {
    private String name;
    private A a;

    public B(String name) {
        this.name = name;
    }

    public String toString() {
        return name;
    }

    public void setA(A a) {
        this.a = a;
    }

    public A getA() {
        return this.a;
    }
}]]></Answer>
<Answer><![CDATA[class A {

    private final String name;
    private final List<B> bs;

    public A(String name) {
        this.name = name;
        bs = new ArrayList<>();
    }

    public B addB(String name) {
        B b = new B(name);
        bs.add(b);
        return b;
    }

    public List<B> getBs() {
        return Collections.unmodifiableList(bs);
    }


    class B {

        private final String name;

        public B(String name) {
            this.name = name;
        }

        public A getA() {
            return A.this;
        }

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42656068" questionTitle="How to map a for-loop with nested ifs into Java 8 stream when there is assignment of global variable">
<Answer><![CDATA[final DateFormat sourceFormat = new SimpleDateFormat("yyyy.MM.dd");
final Date beforeDate = sourceFormat.parse("2001.01.01");

((Records) obj).getRecordsList()
        .stream()
        .filter(rec -> rec.getTrackListing().size() > 10)
        .filter(rec -> {
            try {
                return sourceFormat.parse(rec.getReleaseDate()).before(beforeDate));
            } catch (ParseException e) {
                System.err.println("PARSE EXCEPTION. Unable to parse record.getReleaseDate()");
                e.printStackTrace();
                return null;
            }
        })
        .filter(Objects::nonNull)
        .map(rec -> {
            Release release = new Release();
            release.setName(rec.getName());
            release.setTrackCount(rec.getTrackListing().size());
            return release;
        })
        .collect(Collectors.toList());]]></Answer>
<Answer><![CDATA[// see 3.
final Date beforeDate = sourceFormat.parse("2001.01.01");

records.getRecordsList().stream()       
    .filter(r -> r.getTrackListing().size() > 10)
    .filter(r - {
       // if the parsedDate is invalid we don't want to process, see 1. and 2.
       Date parsedDate;
       try {
          parsedDate = sourceFormat.parse(r.getReleaseDate());
       } catch (ParseException e) {
          System.err.println("...");
          e.printStackTrace();
          parsedDate = null;
       }

       return parsedDate != null && parsedDate.before(beforeDate);
    })
    .map(r -> {
       // map the records to an release
       Release release = new Release();
       release.setName(r.getName());
       release.setTrackCount(r.getTrackListing().size());
       return release;
    })
    .collect(Collectors.toList()));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42580223" questionTitle="Handling multiple events at the same time with JavaFx">
<Answer><![CDATA[@Override
public void initialize(URL url, ResourceBundle rb)
{
     //Handles mouse events
     EventHandler<MouseEvent> mouseHandler = new EventHandler<MouseEvent>() { 
         @Override
         public void handle(MouseEvent mouseEvent) {
             System.out.println(mouseEvent.getEventType() + "\n"
                    + "X : Y - " + mouseEvent.getX() + " : " + mouseEvent.getY() + "\n"
                    + "SceneX : SceneY - " + mouseEvent.getSceneX() + " : " + mouseEvent.getSceneY() + "\n"
                    + "ScreenX : ScreenY - " + mouseEvent.getScreenX() + " : " + mouseEvent.getScreenY());
         }
     };

   //Creates 10 rectangles and set the Mouse events.
   List<Rectangle> rContainer = new ArrayList();
   for(int i = 0; i < 10; i++)
   {
       Rectangle rectangle = new Rectangle();
       rectangle.setX(50);
       rectangle.setY(50);
       rectangle.setWidth(200);
       rectangle.setHeight(100);
       rectangle.setOnMouseClicked(mouseHandler);
       rectangle.setOnMouseDragEntered(mouseHandler);
       rectangle.setOnMouseEntered(mouseHandler);
       rectangle.setFill(Color.BLUE);
       rContainer.add(rectangle);
   }

   //You code will be different here. Here you need to add the arraylist to your root. My root is an AnchorPane with id apMain in FXML
   apMain.getChildren().addAll(rContainer);
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Rectangle rect = new Rectangle(100, 100);
    Rectangle rect2 = new Rectangle(200, 200, 100, 100);

    rect.setOnDragDetected(evt -> {
        // start full drag
        rect.startFullDrag();
    });
    rect2.setOnDragDetected(evt -> {
        // start full drag
        rect2.startFullDrag();
    });

    // print something when mouse enters the rects during a drag event.
    rect.setOnMouseDragEntered(evt -> System.out.println("enter"));
    rect2.setOnMouseDragEntered(evt -> System.out.println("enter"));

    Pane root = new Pane(rect, rect2);
    Scene scene = new Scene(root);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42569204" questionTitle="Is it possible to reload the same FXML/Controller instance?">
<Answer><![CDATA[package application.skin;

import java.util.function.ToDoubleFunction;

import javafx.beans.binding.Bindings;
import javafx.collections.ListChangeListener.Change;
import javafx.scene.Node;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.SkinBase;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;

public class NavigationSkin extends SkinBase<TabPane> {


    private final ListView<Tab> navigator ;

    public NavigationSkin(TabPane control) {
        super(control);

        navigator = new ListView<Tab>();

        navigator.setCellFactory(lv -> {
            ListCell<Tab> cell = new ListCell<>();
            cell.itemProperty().addListener((obs, oldTab, newTab) -> {
                cell.textProperty().unbind();
                cell.graphicProperty().unbind();
                if (newTab == null) {
                    cell.setText(null);
                    cell.setGraphic(null);
                } else {
                    cell.textProperty().bind(newTab.textProperty());
                    cell.graphicProperty().bind(newTab.graphicProperty());
                }
            });
            return cell ;
        });

        navigator.setItems(control.getTabs());  

        navigator.getSelectionModel().selectedItemProperty().addListener(
                (obs, oldItem, newItem) -> control.getSelectionModel().select(newItem));

        navigator.getSelectionModel().select(control.getSelectionModel().getSelectedItem());

        control.getSelectionModel().selectedItemProperty().addListener((obs, oldItem, newItem) -> {
            for (Tab t : control.getTabs()) {
                t.getContent().setVisible(t == control.getSelectionModel().getSelectedItem());
            }
            navigator.getSelectionModel().select(newItem);
        });

        getChildren().add(navigator);
        for (Tab t : control.getTabs()) {
            getChildren().add(t.getContent());
            t.getContent().setVisible(t == control.getSelectionModel().getSelectedItem());
        }


        control.getTabs().addListener((Change<? extends Tab> c) -> {
            while (c.next()) {
                if (c.wasRemoved()) {
                    getChildren().subList(c.getFrom()+1, c.getFrom()+c.getRemovedSize()+1).clear();
                }
                if (c.wasAdded()) {
                    for (int i = 0 ; i < c.getAddedSize() ; i++) {
                        getChildren().add(c.getFrom() + i + 1, c.getAddedSubList().get(i).getContent());
                    }
                }
            }
            getSkinnable().requestLayout();
        });
    }


    @Override
    protected void layoutChildren(double contentX, double contentY, double contentWidth, double contentHeight) {
        double navPrefWidth = navigator.prefWidth(-1);
        navigator.resizeRelocate(contentX, contentY, navPrefWidth, contentHeight);
        for (Tab t : getSkinnable().getTabs()) {
            t.getContent().resizeRelocate(navPrefWidth, 0, contentWidth - navPrefWidth, contentHeight);
        }
    }

    @Override
    protected double computeMaxHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeHeight(n -> n.maxHeight(width - leftInset - rightInset));
    }

    @Override
    protected double computeMaxWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeWidth(n -> n.maxWidth(height - topInset - bottomInset)) ;
    }

    @Override
    protected double computeMinHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeHeight(n -> n.minHeight(-1));
    }

    @Override
    protected double computeMinWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeWidth(n -> n.minWidth(-1)) ;
    }   

    @Override
    protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeHeight(n -> n.prefHeight(-1));
    }

    @Override
    protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
        return computeWidth(n -> n.prefWidth(height - topInset - bottomInset)) ;
    }


    private double computeWidth(ToDoubleFunction<Node> width) {
        double navWidth = width.applyAsDouble(navigator);
        double max = 0 ;
        for (Tab tab : getSkinnable().getTabs()) {
            double tabWidth = width.applyAsDouble(tab.getContent());
            max = Math.max(max, tabWidth);
        }
        return navWidth + max ;
    }

    private double computeHeight(ToDoubleFunction<Node> height) {
        double max = height.applyAsDouble(navigator) ;
        for (Tab tab : getSkinnable().getTabs()) {
            max = Math.max(max, height.applyAsDouble(tab.getContent()));
        }
        return max ;
    }
}]]></Answer>
<Answer><![CDATA[<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" stylesheets="@root.css" xmlns="http://javafx.com/javafx/8.0.91" xmlns:fx="http://javafx.com/fxml/1" fx:controller="sample.MainController">
   <left>
      <ListView fx:id="listView" prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER" />
   </left>
   <center>
      <BorderPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <bottom>
            <HBox prefHeight="100.0" prefWidth="200.0" BorderPane.alignment="CENTER">
               <children>
                  <Button mnemonicParsing="false" text="Cancel" />
                  <Button mnemonicParsing="false" text="Save Changes" />
               </children>
            </HBox>
         </bottom>
         <center>
            <TabPane fx:id="tabPane" prefHeight="200.0" prefWidth="200.0" tabClosingPolicy="UNAVAILABLE" BorderPane.alignment="CENTER">
              <tabs>
                <Tab>
                     <content>
                        <fx:include source="settings1.fxml" />
                     </content>
                </Tab>
                  <Tab>
                      <content>
                          <fx:include source="settings2.fxml" />
                      </content>
                  </Tab>
                  <Tab>
                      <content>
                          <fx:include source="settings3.fxml" />
                      </content>
                  </Tab>
                  <Tab>
                      <content>
                          <fx:include source="settings4.fxml" />
                      </content>
                  </Tab>
              </tabs>
            </TabPane>
         </center>
      </BorderPane>
   </center>
</BorderPane>]]></Answer>
<Answer><![CDATA[public class MainController {

    @FXML
    private BorderPane root ;
    @FXML
    private ListView<String> selector ;

    private Parent userInfo ;
    private Parent prefs;
    private Parent appearance;

    // need controllers to get data later...

    private UserInfoController userInfoController ;
    private PreferencesController prefsController ;
    private AppearanceController appearanceController ;

    public void initialize() throws IOException {

        FXMLLoader userInfoLoader = new FXMLLoader(getClass().getResource("userInfo.fxml));
        userInfo = userInfoLoader.load();
        userInfoController = userInfoLoader.getController();

        FXMLLoader prefsLoader = new FXMLLoader(getClass().getResource("preferences.fxml));
        prefs = prefsLoader.load();
        prefsController = prefsLoader.getController();

        FXMLLoader appearanceLoader = new FXMLLoader(getClass().getResource("appearance.fxml));
        appearance = appearanceLoader.load();
        appearanceController = appearanceLoader.getController();

        // configure controllers with data if needed...

        selector.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if ("User Information".equals(newSelection)) {
                root.setCenter(userInfo);
            } else if ("Preferences".equals(newSelection)) {
                root.setCenter(prefs); 
            } else if ("Appearance".equals(newSelection)) {
                root.setCenter(prefs);
            } else {
                root.setCenter(null);
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42562180" questionTitle="How to create regex for this year and the previous year?">
<Answer><![CDATA[while (!startDate.isAfter(endDate)) {

        StringBuilder pattern = new StringBuilder().append("reqId");
        pattern.append(":");

        LocalDate endOfMonth = startDate.withDayOfMonth(startDate.lengthOfMonth());

        LocalDate stDate = null;
        LocalDate eDate = null;

        if(actualStartDate.getMonthValue() == startDate.getMonthValue()){
            stDate=actualStartDate;
        }else{
            stDate =  startDate;
        }

        if(endOfMonth.getMonthValue() != endDate.getMonthValue()){
            eDate  =  endOfMonth ;
        }else{
            eDate  = endDate  ;
        }
        pattern.append(startDate.getYear());
        int monthValue = stDate.getMonthValue();

        if(monthValue>9)
             pattern.append(monthValue);
         else
             pattern.append("0").append(monthValue);


        if(actualStartDate.getMonthValue()!=startDate.getMonthValue() && startDate.getMonthValue() != endDate.getMonthValue()){
        }else{

            if(startDate.getDayOfMonth() == stDate.getDayOfMonth() && endOfMonth.getDayOfMonth() == eDate.getDayOfMonth()){

        }else{  
            pattern.append("(");
            int x = stDate.getDayOfMonth();
            for(int i = stDate.getDayOfMonth(); i < eDate.getDayOfMonth(); i++){

                 if(x>9)
                     pattern.append(x);
                 else
                     pattern.append("0").append(x);

                pattern.append("|");
                x++;
            }
            if(eDate.getDayOfMonth()>9)
             pattern.append(eDate.getDayOfMonth());
                else
             pattern.append("0").append(eDate.getDayOfMonth());

            pattern.append(")");

        }
        }
        pattern.append(".*");   

        System.out.println(pattern.toString());
        regexList.add(pattern.toString());
        startDate = startDate.plusMonths(1);


    String regexPattern = org.springframework.util.StringUtils.collectionToDelimitedString(regexList,"|");]]></Answer>
<Answer><![CDATA[public class DateRegEx {

    public static void main(String[] args) {
        LocalDate today = LocalDate.now();
        LocalDate _6MonthsAgo = today.minus(6, ChronoUnit.MONTHS);

        LocalDate start = _6MonthsAgo.minusDays(1);
        LocalDate end = today.minusDays(1);

        List<String> regexPattern = Stream.iterate(start, date -> date.plusMonths(1))
            .limit(ChronoUnit.MONTHS.between(start, end.plusMonths(1)))
            .map(DateRegEx::makePattern)
            .collect(Collectors.toList());
        System.out.println(regexPattern);
    }

    private static String makePattern(LocalDate someDate) {
        StringBuilder regexPattern = new StringBuilder("id");
        regexPattern.append(":");

        regexPattern.append(someDate.getYear());

        if (someDate.getMonthValue() > 9)
            regexPattern.append(someDate.getMonthValue());
        else
            regexPattern.append("0").append(someDate.getMonthValue());

        regexPattern.append(".*");
        return regexPattern.toString();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42551099" questionTitle="Binding mysql data into Combobox in javafx">
<Answer><![CDATA[public class PopulateComboBoxDemo extends Application {

    private ComboBox<String> people = new  ComboBox<>();
    private List<String> ids = new ArrayList<>();

    @Override
    public void start(Stage primaryStage) { 
        this.populateData();

        BorderPane root = new BorderPane(); 
        root.setCenter(people);     
        Scene scene = new Scene(root, 300, 250);

        people.setOnAction(e -> {
            int index = people.getSelectionModel().getSelectedIndex();
            //here is the id_value
            String id_value = ids.get(index);
            System.out.println("The id of " + people.getItems().get(index) + " is : " + id_value);
            //
            //.........
            //
        });     
        primaryStage.setScene(scene);
        primaryStage.show();
    }   

    private void populateData() {
        this.people.getItems().clear();
        this.ids.clear();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/database","user","password");
            String sql = "select name, id from person";
            PreparedStatement st = con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            int index = 0;
            while(rs.next()) {
                this.people.getItems().add(index, rs.getString("name"));
                this.ids.add(index, String.valueOf(rs.getInt("id")));
                index++;
            }
            con.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(PopulateComboBoxDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }   
    public static void main(String[] args) {
        launch(args);
    }   
}]]></Answer>
<Answer><![CDATA[List<People> PeopleList = em.createQuery("SELECT p FROM People p").getResultList();
    ObservableList<People> peopleData = FXCollections.observableList(PeopleList);
    PeopleList.add(null);

 yourCombo.setCellFactory((comboBox) -> {
        return new ListCell<People>() {
            @Override
            protected void updateItem(People item, boolean empty) {
                super.updateItem(item, empty);

                if (item == null || empty) {
                    setText("Select");
                    yourCombo.getSelectionModel().clearSelection();
                } else {
                    setText(item.getName();
                }
            }
        };
    });


        yourCombo.setConverter(new StringConverter<People>() {
        @Override
        public String toString(People people) {
            if (people == null) {
                return "Select";
            } else {
                return people.getName();
            }
        }

        @Override
        public People fromString(String nameString) {
            return null; // No conversion fromString needed.
        }
    });



    yourCombo.setItems(peopleData);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42534898" questionTitle="JavaFX - Making one of two overlapped component MouseClick transparent">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class Main extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        Rectangle backComponent = new Rectangle(200, 200, Color.ORANGE);
        Rectangle frontComponent = new Rectangle(180, 180, Color.GREY);

        StackPane root = new StackPane(backComponent, frontComponent);

        frontComponent.setOnMouseClicked((mouseClicked) -> {
            if (mouseClicked.getButton() == MouseButton.SECONDARY) {
                boolean isInBackComponent = backComponent.contains(
                        backComponent.sceneToLocal(
                                mouseClicked.getSceneX(), mouseClicked.getSceneY()
                        )
                );

                if (isInBackComponent) {
                    backComponent.fireEvent(mouseClicked);
                    return;
                }
            }

            if (mouseClicked.getButton() == MouseButton.PRIMARY) {
                System.out.println("FrontComponent left click");
            }
        });

        backComponent.setOnMouseClicked((mouseClicked) -> {
            if (mouseClicked.getButton() == MouseButton.SECONDARY) {
                System.out.println("BackComponent right click");
            }
        });

        stage.setScene(new Scene(root, 500, 500));
        stage.show();
    }

    public static void main(String[] args) { launch(args); }
}]]></Answer>
<Answer><![CDATA[// --- MouseEvents Handlers --------------------------------------------------------
    frontContainer.setOnMouseClicked((mouseClicked) -> {
        if (mouseClicked.getButton() == MouseButton.PRIMARY)
            System.out.println("FrontComponent right click");
        if (mouseClicked.getButton() == MouseButton.SECONDARY)
            System.out.println("FrontComponent left click");
    });

    frontContainer.setOnDragDetected((mouseDrag) -> {
        // Does something very important for a DragNDrop feature that
        // depends on Right Mouse Click
    });

    backComponent.setOnMouseClicked((mouseClicked) -> {
        if (mouseClicked.getButton() == MouseButton.SECONDARY)
            System.out.println("BackComponent left click");
    });

    root.addEventFilter(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {

        @Override
        public void handle(MouseEvent event) {
            System.out.println("click FILTERED");
            if (event.getButton() == MouseButton.SECONDARY && !dispatchFlag) {
                if (event.getX() >= backContainer.getLayoutX()
                        && backContainer.getLayoutX() + backComponent.getWidth() >= event.getX()) {
                    System.out.println("It is behind me !");

                    MouseEvent monEvent = new MouseEvent(event.getSource(), backContainer, MouseEvent.MOUSE_CLICKED,
                            event.getSceneX(), event.getY(), event.getScreenX(), event.getScreenY(),
                            event.getButton(), event.getClickCount(), false, false, false, false,
                            event.isPrimaryButtonDown(), event.isMiddleButtonDown(), event.isSecondaryButtonDown(),
                            event.isSynthesized(), event.isPopupTrigger(), event.isStillSincePress(),
                            event.getPickResult());
                    event.consume();
                    dispatchFlag = true;
                    Event.fireEvent(backComponent, monEvent);
                    System.out.println("Event dispatched !");

                }

            }

            dispatchFlag = false;

        }
    });

    // ------------------------------------------------------------------------------------]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42505876" questionTitle="JavaFX:how to resize the stage when using webview">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class WebViewTest extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        final WebView view = new WebView();
        view.getEngine().setUserStyleSheetLocation(
                getClass().getResource("no-overflow.css").toExternalForm()
        );
        final WebEngine webEngine = view.getEngine();

        webEngine.getLoadWorker().runningProperty().addListener((observable, oldValue, newValue) -> {
            System.out.println("Running: " + newValue);
            if (!newValue) {
                String heightText = webEngine.executeScript(
                        "document.height"
                ).toString();
                double height = Double.valueOf(heightText.replace("px", ""));

                String widthText = webEngine.executeScript(
                        "document.width"
                ).toString();
                double width = Double.valueOf(widthText.replace("px", ""));
                System.out.println(width + "*" + height);

                view.setMinSize(width, height);
                view.setPrefSize(width, height);
                view.setMaxSize(width, height);

                stage.sizeToScene();

                System.out.println(view.getLayoutBounds());
            }
        });

        webEngine.load("http://www.baidu.com");

        Scene scene = new Scene(view);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {

 final WebView view = new WebView();
    final WebEngine webEngine = view.getEngine();


    Scene scene = new Scene(view, 600, 600);
    primaryStage.setScene(scene);
    primaryStage.show();

    Platform.runLater(() -> {
        webEngine.getLoadWorker().progressProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
                if (newValue.doubleValue() == 1D) {
                    String heightText = webEngine.executeScript("document.height").toString();
                    double height = Double.valueOf(heightText.replace("px", ""));

                    String widthText = webEngine.executeScript("document.width").toString();
                    double width = Double.valueOf(widthText.replace("px", ""));

                    System.out.println(width + "*" + height);

                    primaryStage.setWidth(width+50);
                    primaryStage.setHeight(height+50);

                    primaryStage.hide(); 
                    primaryStage.show();
                }
            }
        });
        webEngine.load("http://baidu.com/");
    });
}

public static void main(String[] args) {
    launch(args);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42416738" questionTitle="displaying a tooltip in javafx brings its stage into the foreground">
<Answer><![CDATA[public class Blubb extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Button button_1 = new Button("Button #1");
        button_1.setTooltip(new Tooltip("Blubb #1"));

        StackPane primary = new StackPane(new BorderPane(button_1));
        primaryStage.setScene(new Scene(primary, 320, 240));
        addStageFocusListener(primaryStage, primary);
        primaryStage.show();

        Button button_2 = new Button("Button #2");
        button_2.setTooltip(new Tooltip("Blubb #2"));

        StackPane second = new StackPane(new BorderPane(button_2));
        Stage secondStage = new Stage();
        addStageFocusListener(secondStage, second);
        secondStage.setScene(new Scene(second, 320, 240));
        secondStage.show();
    }

    public void addStageFocusListener(Stage stage, StackPane stackPane) {
        stage.focusedProperty().addListener(new ChangeListener<Boolean>(){
            public final StackPane preventTooltip = new StackPane();
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                if(stage.isFocused()) {
                    if(stackPane.getChildren().contains(preventTooltip)) {
                        stackPane.getChildren().remove(preventTooltip);
                    }
                } else {
                    stackPane.getChildren().add(preventTooltip);
                }
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[public class Blubb extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    public static void installTooltip(Node n, Tooltip tp)
    {
        Window w = n.getScene().getWindow();
        w.focusedProperty().addListener((val, before, after) -> {
            if (after)
                Tooltip.install(n, tp);
            else
                Tooltip.uninstall(n, tp);
        });

        if (w.isFocused())
            Tooltip.install(n, tp);
        else
            Tooltip.uninstall(n, tp);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Tooltip tp = new Tooltip("Blubb");
        Button btn = new Button("Click");

        Scene scene = new Scene(new BorderPane(btn), 320, 240);
        primaryStage.setScene(scene);
        //primaryStage.show();

        Stage secondStage = new Stage();
        secondStage.setScene(new Scene(new BorderPane(new Button("Click")), 320, 240));
        //secondStage.initOwner(primaryStage);
        secondStage.show();
        primaryStage.show();

        installTooltip(btn, tp);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42410529" questionTitle="synchronous media player javafx">
<Answer><![CDATA[import java.io.File;
import java.io.IOException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;

public class Main {

    public static void main(String[] args) {

        try {
            int loops = 20;

            File waveFile = new File(yourWaveFilePath);

            AudioInputStream stream = AudioSystem.getAudioInputStream(waveFile);
            AudioFormat format = stream.getFormat();

            // reading complete audio file into memory
            byte[] frames = new byte[format.getFrameSize() * (int) stream.getFrameLength()];
            stream.read(frames, 0, frames.length);

            DataLine.Info lineInfo = new DataLine.Info(SourceDataLine.class, format);
            SourceDataLine line = (SourceDataLine) AudioSystem.getLine(lineInfo);
            line.open(format);
            line.start();

            FloatControl balance = (FloatControl) line.getControl(FloatControl.Type.BALANCE);
            FloatControl pan = (FloatControl) line.getControl(FloatControl.Type.PAN);

            for (int i = 0; i < loops; i++) {
                // switching balance and pan with every iteration
                if (i % 2 == 0) {
                    balance.setValue(balance.getMinimum());
                    pan.setValue(pan.getMinimum());
                } else {
                    balance.setValue(balance.getMaximum());
                    pan.setValue(pan.getMaximum());
                }

                // playing complete audio file
                line.write(frames, 0, frames.length);

                System.out.println("iteration: " + i + ", balance: " + balance.getValue() + ", pan: " + pan.getValue());
            } 

            line.drain();
            line.close();
            stream.close();

        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            e.printStackTrace();
        }
    }

}]]></Answer>
<Answer><![CDATA[import java.io.IOException;
import java.net.URL;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

import javafx.beans.property.ReadOnlyBooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.media.AudioClip;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

/**
 *
 * this class is to optimize sound pattern playing
 *
 * reasoning:
 * - audio clips are for short repetitive files that don't need live changes to balance
 * - media players are for long files that will have the ability to swing with the visual patted
 * by updating the balance whenever needed (every few updates)
 */
public class AudioPlayer
{
    public enum Controller{
        MEDIA_PLAYER, AUDIO_CLIP;
    }

    /**
     * this class is to help other classes keep track of this particular state of the AudioPlayer
     */
    public class ControllerProperty extends SimpleObjectProperty<Controller>{
        SimpleBooleanProperty isMediaPlayerProperty = new SimpleBooleanProperty();

        @Override
        public void set(Controller newValue) {
            super.set(newValue);
            if (newValue == Controller.MEDIA_PLAYER)
                isMediaPlayerProperty.set(true);
            else
                isMediaPlayerProperty.set(false);
        }

        public ReadOnlyBooleanProperty isMediaPlayerProperty() {
            return isMediaPlayerProperty;
        }
    }
    // different controllers used
    private Media media;
    private MediaPlayer mediaPlayer;
    private AudioClip audioClip;

    // controllerProperty property indicator
    private ControllerProperty controllerProperty = new ControllerProperty();

    private boolean mediaDonePlaying = true;
    private double durationMillis;

    /**
     * Constructor. This will be the place where you can
     * @param srcUrl
     */
    public AudioPlayer(String srcUrl) {
        boolean formatSupported = true;
        try {
            durationMillis = getLength(srcUrl);
        } catch (IOException | LineUnavailableException e) {
            e.printStackTrace();
        } catch (UnsupportedAudioFileException e) {
            formatSupported = false;
        }
        // if file is long or format unsupported (not one of these: AudioSystem.getAudioFileTypes())
        if (durationMillis > 400 | !formatSupported){
            media = new Media(srcUrl);
            mediaPlayer = new MediaPlayer(media);
            controllerProperty.set(Controller.MEDIA_PLAYER);
            mediaPlayer.setOnEndOfMedia(() -> mediaDonePlaying = true);
        }
        else {
            audioClip = new AudioClip(srcUrl);
            controllerProperty.set(Controller.AUDIO_CLIP);
        }
    }

    /**
     * gets the audio duration of the provided source in milliseconds
     * @param path url string representation of the path
     * @return the length in milliseconds
     * @throws IOException
     * @throws UnsupportedAudioFileException
     * @throws LineUnavailableException
     */
    public static double getLength(String path) throws IOException, UnsupportedAudioFileException, LineUnavailableException
    {
        AudioInputStream stream;
        stream = AudioSystem.getAudioInputStream(new URL(path));
        AudioFormat format = stream.getFormat();
        if (format.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {
            format = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, format
                .getSampleRate(), format.getSampleSizeInBits() * 2, format
                .getChannels(), format.getFrameSize() * 2, format
                .getFrameRate(), true); // big endian
            stream = AudioSystem.getAudioInputStream(format, stream);
        }
        DataLine.Info info = new DataLine.Info(Clip.class, stream.getFormat(),
            ((int) stream.getFrameLength() * format.getFrameSize()));
        Clip clip = (Clip) AudioSystem.getLine(info);
        clip.close();
        return clip.getBufferSize()
            / (clip.getFormat().getFrameSize() * clip.getFormat()
            .getFrameRate());
    }

    public void stop(){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    audioClip.stop();
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null){
                    mediaPlayer.stop();
                    mediaDonePlaying = true;
                }
                break;
        }
    }

    public void play(){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    if(!audioClip.isPlaying()){
                        audioClip.play();
                    }
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null){
                    mediaPlayer.play();
                    mediaDonePlaying = false;
                }
                break;
        }
    }

    public void pause(){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    audioClip.stop();
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null)
                    mediaPlayer.pause();
                break;
        }
    }

    /**
     * sets the balance of the player, if the controller is an {@link AudioClip}, the balance is 
     * updated at the next play cycle, if the controller is a {@link MediaPlayer} the balance is 
     * updated at the next time the {@link MediaPlayer} has Status.READY (read 
     * {@link MediaPlayer#setBalance(double)} for more details)
     * @param balance
     */
    public void setBalance(double balance){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    audioClip.setBalance(balance);
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null)
                    mediaPlayer.setBalance(balance);
                break;
        }
    }

    public String getSource(){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    return audioClip.getSource();
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null)
                    return media.getSource();
                break;
        }
        return null;
    }

    /**
     * @return if the file is done
     */
    public boolean isDonePlaying(){
        switch (controllerProperty.get())
        {
            case AUDIO_CLIP:
                if (audioClip != null)
                    return !audioClip.isPlaying();
                break;

            case MEDIA_PLAYER:
                if (mediaPlayer != null && media != null)
                    return mediaDonePlaying;
                break;
        }
        throw new IllegalStateException("Internal Error");
    }

    public ControllerProperty controllerProperty() {
        return controllerProperty;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42334889" questionTitle="Is there a better way to process user text in this way?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.Stage;

/**
 *
 * @author blj0011
 */
public class JavaFXApplication35 extends Application {

    @Override
    public void start(Stage primaryStage) {        

        //Make each string char a text object
        String text = "Hello World!";
        List<Text> characters = new ArrayList();
        for(int i = 0; i < text.length(); i++)
        {
            characters.add(new Text(text.charAt(i) + ""));
        }

        //create text area and set on key release listener
        TextArea textarea = new TextArea();
        textarea.setOnKeyReleased(new EventHandler<KeyEvent>(){
            @Override
            public void handle(KeyEvent event) {                
                for(int i = 0; i < characters.size(); i++)
                {        
                    //handle when index i is less than the number of characters typed in the text area
                    if(i < textarea.getText().length())
                    {
                        //if the characters at the given index are equal, set the text object at that index to green
                        if(textarea.getText().charAt(i) == characters.get(i).getText().charAt(0))
                        {
                            characters.get(i).setFill(Color.GREEN);//If chars at given index are equal set to green: exception - space
                            if(textarea.getText().charAt(i)== '_')//Your text charters can not be char underscore by default. If so this will screw up.
                            {//if underscore is type make the space red even though it equals the red underscore
                                characters.get(i).setText("_"); 
                                characters.get(i).setFill(Color.RED);
                            }
                            else if(characters.get(i).getText().equals("_") && characters.get(i).getFill().equals(Color.RED)) 
                            {//if the text object was changed to underscore and the textarea char is now a space, change the text object back to space
                                if(textarea.getText().charAt(i) == ' ')
                                {
                                    characters.get(i).setText(" ");
                                }                                
                            }
                        }                        
                        else//if the characters at the given index are not equal, set the text object at that index to red
                        {                            
                            if(characters.get(i).getText().equals(" "))
                            {
                                characters.get(i).setText("_");
                            }
                            characters.get(i).setFill(Color.RED);
                        }
                    }
                    else//handle when index i is greater than or equally to the number of characters typed in the text area
                    {
                        characters.get(i).setFill(Color.BLACK);//set the text object at given index to black if the hasn't been enough charaters type to reach this index
                        if(characters.get(i).getText().equals("_"))
                        {
                            characters.get(i).setText(" ");
                        }
                    }
                }
            }
        });


        HBox hbox = new HBox();//holds text objects
        hbox.getChildren().addAll(characters);//add text objects to hbox   
        VBox root = new VBox();//holds hbox and textarea
        root.getChildren().addAll(hbox, textarea);//add hbox. add textarea

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[package sample;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{
        primaryStage.setTitle("Hello World");
        Scene scene = new Scene(new Group(), 300, 275);

        //Create a FlowPane that will contain many Text.
        FlowPane flowLabel = new FlowPane(Orientation.HORIZONTAL);
        flowLabel.setBackground(new Background(new BackgroundFill(Color.BEIGE, CornerRadii.EMPTY, Insets.EMPTY)));
        flowLabel.setColumnHalignment(HPos.LEFT);

        //This is the label text. The text that the user must insert
        final String text = "Hello world!";

        //Create a Text object for each character
        final Text[] characters = new Text[text.length()];
        for(int i = 0; i < text.length(); i++) {
            Character c = text.charAt(i);
            characters[i] = new Text(c.toString());
            flowLabel.getChildren().add(characters[i]);
        }

        //Create the text field and add a listener to do something when the text change.
        TextField field = new TextField();
        field.textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                //Do the magic
                String fieldText = newValue;
                if(text.startsWith(fieldText)) {
                    for(int i = 0; i < text.length(); i++) {
                        if(i < fieldText.length()) {
                            characters[i].setFill(Color.GREEN);
                        } else {
                            characters[i].setFill(Color.BLACK);
                        }
                    }
                } else {
                    for(int i = 0; i < text.length(); i++) {
                        characters[i].setFill(Color.RED);
                    }
                }
            }
        });

        FlowPane pane = new FlowPane(Orientation.HORIZONTAL);
        pane.setVgap(8);
        pane.getChildren().add(flowLabel);
        pane.getChildren().add(field);

        ((Group)scene.getRoot()).getChildren().add(pane);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42321541" questionTitle="JavaFx: drawing a swing-like lowered etched Border possible?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class LoweredEtchedBorderDemo extends Application {

    @Override
    public void start(Stage stage) {
        Label label = new Label("Testing");
        label.setPadding(new Insets(10));

        // uncomment to see the area that the content node is taking up within the border.
        //label.setStyle("-fx-background-color: palegreen;");

        BorderPane borderPane = new BorderPane(new StackPane(label));

        // uncomment these two lines if you would like the border to resize to fit available space.
        borderPane.setMinSize(Region.USE_COMPUTED_SIZE, Region.USE_COMPUTED_SIZE);
        borderPane.setMaxSize(Region.USE_COMPUTED_SIZE, Region.USE_COMPUTED_SIZE);

        VBox layout = new VBox(borderPane);
        layout.setPadding(new Insets( 10));
        layout.setStyle("-fx-base: lightgrey;");
        VBox.setVgrow(borderPane, Priority.ALWAYS);

        Scene scene = new Scene(layout);

        stage.setScene(scene);
        stage.show();
    }

    private class BorderPane extends Region {
        // clip the bordered content within the bordered area.
        Rectangle clipRect = new Rectangle(getWidth(), getHeight());

        public BorderPane(Node content) {
            super();
            getChildren().add(content);

            getStylesheets().add(getClass().getResource(
                    "border-pane.css"
            ).toExternalForm());
            getStyleClass().add("border-pane");

            // by default size the border to the preferred size of the content.
            setMinSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);
            setMaxSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);

            content.setClip(clipRect);
        }

        @Override protected void layoutChildren() {
            final double width = getWidth();
            double height = getHeight();
            double top = getInsets().getTop();
            double right = getInsets().getRight();
            double left = getInsets().getLeft();
            double bottom = getInsets().getBottom();
            double contentWidth = width - left - right;
            double contentHeight = height - top - bottom;

            Node child = getManagedChildren().get(0);
            layoutInArea(child, left, top,
                    contentWidth, contentHeight,
                    0, null,
                    HPos.LEFT,
                    VPos.TOP);

            clipRect.setWidth(contentWidth);
            clipRect.setHeight(contentHeight);
        }
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[public class LoweredEtchedBorderLabelDemo extends Application {

    @Override
    public void start(Stage primaryStage) {
        LEBLabel text = new LEBLabel("Testing", 200, 30);

        StackPane root = new StackPane();
        root.getChildren().add(text);
        root.setStyle("-fx-background-color:lightgrey");

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Lowered-Etched-Border Demo");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    //Lowered Etched Borderd Label
    private class LEBLabel extends Label {
        private HBox[] borders = new HBox[3];
        private String border_styles[] = {"-fx-border-width:0 1 1 0; -fx-border-color: white",
                                          "-fx-border-width:1; -fx-border-color:grey",
                                          "-fx-border-width:1 0 0 1; -fx-border-color:white"};

        public LEBLabel(String text, double width, double height) {
            super(text);
            for(int i = 0; i < borders.length; i++) {
                borders[i] = new HBox();
                borders[i].setStyle(border_styles[i]);

                //decrement of border-size for inner-border, prevents from the overlapping of border
                borders[i].setMaxSize(width - (1.5 *i), height - (1.5 * i));
                borders[i].setMinSize(width - (1.5 *i), height - (1.5 * i));

                borders[i].setSpacing(0);
            }
            this.setContentDisplay(ContentDisplay.CENTER);
            this.borders[1].getChildren().add(borders[2]);
            this.borders[0].getChildren().add(borders[1]);
            this.setGraphic(borders[0]);
        }       
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42278353" questionTitle="Progress Bar while downloading image in javafx">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.DoubleExpression;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.Arrays;
import java.util.stream.Collectors;

public class ImagesLoadProgress extends Application {

    private static final String IMAGE_PATH_PREFIX =
            "http://icons.iconarchive.com/icons/custom-icon-design/flatastic-10/128/";

    private static final String[] IMAGES_FILENAMES = {
            "Bear-icon.png",
            "Bow-icon.png",
            "Sport-american-football-icon.png",
            "Sport-baseball-icon.png"
    };

    @Override
    public void start(Stage stage) throws Exception {
        Image[] images =
                Arrays.stream(IMAGES_FILENAMES)
                .map(filename -> new Image(IMAGE_PATH_PREFIX + filename, true))
                .toArray(Image[]::new);

        DoubleExpression totalImageDownloadProgress;
        if (images.length > 0) {
            totalImageDownloadProgress = new SimpleDoubleProperty(0);
            for (Image image: images) {
                totalImageDownloadProgress = totalImageDownloadProgress.add(image.progressProperty());
            }
            totalImageDownloadProgress = totalImageDownloadProgress.divide(IMAGES_FILENAMES.length);
        } else {
            totalImageDownloadProgress = new SimpleDoubleProperty(1);
        }


        ProgressBar bar = new ProgressBar();
        bar.progressProperty().bind(totalImageDownloadProgress);

        VBox layout = new VBox(5, bar);

        Arrays.stream(images)
                .map(this::createImageView)
                .collect(Collectors.toCollection(layout::getChildren));

        stage.setScene(new Scene(layout));
        stage.show();
    }

    private ImageView createImageView(Image image) {
        ImageView imageView = new ImageView(image);
        imageView.setFitWidth(128);
        imageView.setFitHeight(128);

        return imageView;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[final Task<ArrayList<Image>> task = new Task<ArrayList<Image>>() {
            @Override protected ArrayList<Image> call() throws Exception {

                int id = Data_model.getInstance().currentid();

                All_photos photos = (All_photos) new parse_object <All_photos> (All_photos.class).ParseUri("https://api.edmunds.com/api/media/v2/styles/"+id+"/photos?api_key=id&fmt=json");

                ArrayList<String> list_href = new SlideShowHelper().get_href(photos);

                ArrayList<Image> list = new ArrayList<Image>();

                int i = 1;

                            for ( String st:list_href)
                            {

                                System.out.println(st);
                                list.add(new Image("https://media.ed.edmunds-media.com"+st+"",true));
                                updateProgress(i, list_href.size());
                                Thread.sleep(400);
                                i++;


                            }
                            return list;
            }


             @Override protected void succeeded() {

                 super.succeeded();

                 updateProgress(10, 10);

                 img_slideshow.setImage(Images.get(0));

                 int count1 =count+1;

                 lbl_slideshow.setText(""+count1+" / "+Images.size()+"");

                 progress_sd.setVisible(false);  

                 btn_sd_back.setVisible(true);
                 btn_sd_next.setVisible(true);


             }


         };

        task.addEventHandler(WorkerStateEvent.WORKER_STATE_SUCCEEDED,new EventHandler<WorkerStateEvent>() {

            public void handle(WorkerStateEvent t) {
                Images = task.getValue();

            }
        });

    new Thread(task).start();


    //progress_sd.visibleProperty().bind(task.runningProperty());

    progress_sd.progressProperty().bind(task.progressProperty());

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42258465" questionTitle="how to draw a straight line in javafx that updates itself when the user moves the mouse?">
<Answer><![CDATA[public class JavaFX_DrawOnCanvas extends Application {

    private Pair<Double, Double> initialTouch;
    private Canvas layer = new Canvas();

    @Override
    public void start(Stage primaryStage) {
        StackPane root = new StackPane();

        Canvas canvas = new Canvas(400, 400);
        final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();
        initDraw(graphicsContext);
        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED,
                new EventHandler<MouseEvent>(){

                    @Override
                    public void handle(MouseEvent event) {
                        Canvas newLayer = new Canvas(400, 400);
                        GraphicsContext context = newLayer.getGraphicsContext2D();
                        initDraw(context);

                        layer = newLayer;
                        root.getChildren().add(0, newLayer);
                        initialTouch = new Pair<>(event.getSceneX(), event.getSceneY());
                    }
                });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED,
                new EventHandler<MouseEvent>(){

                    @Override
                    public void handle(MouseEvent event) {
                        GraphicsContext context = layer.getGraphicsContext2D();
                        context.clearRect(0, 0, layer.getWidth(), layer.getHeight());
                        context.strokeLine(initialTouch.getKey(), initialTouch.getValue(), event.getSceneX(), event.getSceneY());
                    }
                });

        root.getChildren().add(canvas);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void initDraw(GraphicsContext gc){
        double canvasWidth = gc.getCanvas().getWidth();
        double canvasHeight = gc.getCanvas().getHeight();

        gc.setFill(Color.LIGHTGRAY);
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(5);

        gc.fill();
        gc.strokeRect(
                0,              //x of the upper left corner
                0,              //y of the upper left corner
                canvasWidth,    //width of the rectangle
                canvasHeight);  //height of the rectangle

        gc.setFill(Color.RED);
        gc.setStroke(Color.BLUE);
        gc.setLineWidth(1);

    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[public class JavaFX_DrawOnCanvas extends Application {

    private double from_x = 0;
    private double from_y = 0;
    private double to_x = 0;
    private double to_y = 0;
    private int line_no = 1;

    @Override
    public void start(Stage primaryStage) {

        StackPane root = new StackPane();
        Canvas canvas = new Canvas(400, 400);
        final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();
        this.initDraw(graphicsContext);

        canvas.setOnMousePressed((event) -> this.setFromPos(event));
        canvas.setOnMouseDragged((event) -> {
            root.getChildren().remove(0);
            final Canvas temp_canvas = new Canvas(400, 400);
            final GraphicsContext gc = temp_canvas.getGraphicsContext2D();
            this.setToPos(event);
            this.drawLine(gc);
            root.getChildren().add(0,temp_canvas);
        });         
        canvas.setOnMouseReleased((event) -> {
            final Canvas new_line = new Canvas(400, 400);
            final GraphicsContext gc = new_line.getGraphicsContext2D();
            this.setToPos(event);
            this.drawLine(gc);
            //final new stright line
            root.getChildren().add(line_no++,new_line);             
        });

        root.getChildren().addAll( new Canvas(), canvas);
        Scene scene = new Scene(root, 400, 400);

        primaryStage.setTitle("java-buddy.blogspot.com");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private void drawLine(GraphicsContext gc) {
        gc.setFill(Color.RED);
        gc.setStroke(Color.BLUE);
        gc.setLineWidth(1);
        gc.strokeLine(from_x, from_y, to_x, to_y);      
    }

    private void initDraw(GraphicsContext gc){
        double canvasWidth = gc.getCanvas().getWidth();
        double canvasHeight = gc.getCanvas().getHeight();

        gc.setFill(Color.LIGHTGRAY);
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(5);

        gc.fill();
        gc.strokeRect(
                0,              //x of the upper left corner
                0,              //y of the upper left corner
                canvasWidth,    //width of the rectangle
                canvasHeight);  //height of the rectangle
    }

    private void setFromPos(MouseEvent event) {
        this.from_x = event.getSceneX();
        this.from_y = event.getSceneY();
    }

    private void setToPos(MouseEvent event) {
        this.to_x = event.getSceneX();
        this.to_y = event.getSceneY();
    }   
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42250756" questionTitle="use if-else statement in java-8 lambda expression">
<Answer><![CDATA[java.lang.Character cha = new java.lang.Character(',');

final StringBuilder ncourseIdBuilder = new StringBuilder();
final StringBuilder pastCourseIdBuilder = new StringBuilder();
equivalentCourses.stream().forEach((equivalentCourse) -> {
    if (equivalentCourse.getNcourse() != null) {
        ncourseIdBuilder.append(equivalentCourse.getNcourse().getId()).append(",");
    } else if (equivalentCourse.getPastCourse() != null) {
        pastCourseIdBuilder.append(equivalentCourse.getPastCourse().getId()).append(",");
    }
});

String ncourseIds = ncourseIdBuilder.toString();
String pastCourseIds = pastCourseIdBuilder.toString();

if (!ncourseIds.isEmpty() && cha.equals(ncourseIds.charAt(ncourseIds.length() - 1))) {
    ncourseIds = ncourseIds.substring(0, ncourseIds.length() - 1);
}
if (!pastCourseIds.isEmpty() && cha.equals(pastCourseIds.charAt(pastCourseIds.length() - 1))) {
    pastCourseIds = pastCourseIds.substring(0, pastCourseIds.length() - 1);
}]]></Answer>
<Answer><![CDATA[public Map<Classifier, String> booleanGrouping() throws Exception {
    List<String> strings = new ArrayList<>();
    strings.add("ala");
    strings.add("ela");
    strings.add("jan");
    // our ifs:
    /*
        if(!string.endsWith("n")){
        }else if(string.startsWith("e")){}

        final map should contains two elements
        endsWithN -> ["jan"]
        startsWithE -> ["ela"]
        NOT_MATCH -> ["ala"]

     */
    return strings.stream()
            .collect(
                    Collectors.groupingBy(Classifier::apply) // using function Obj -> Bool not predicate
            ).entrySet()
            .stream()
            .collect(
                    Collectors.toMap(
                            e -> e.getKey(),
                            e -> e.getValue().stream().collect(Collectors.joining(""))
                    )
            );
}

enum Classifier implements Predicate<String> {
    ENDS_WITH_N {
        @Override
        public boolean test(String s) {
            return s.endsWith("n");
        }
    },
    STARTS_WITH_E {
        @Override
        public boolean test(String s) {
            return s.startsWith("e");
        }
    }, NOT_MATCH {
        @Override
        public boolean test(String s) {
            return false;
        }
    };

    public static Classifier apply(String s) {
        return Arrays.stream(Classifier.values())
                .filter(c -> c.test(s))
                .findFirst().orElse(NOT_MATCH);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42250622" questionTitle="Disable @Alternative classes">
<Answer><![CDATA[public class EnvironmentAlternativesExtension implements Extension {

    private EnvironmentType currentEnvironment = PRODUCTION;

    public <T> void processAnotated(@Observes ProcessAnnotatedType<T> event) {
        EnvironmentAlternative alternative = 
            event.getAnnotatedType().getJavaClass()
                 .getAnnotation(EnvironmentAlternative.class);
        if (alternative != null && !containsCurrentEnvironment(alternative.value())) {
            event.veto();
        }
    }

    private boolean containsCurrentEnvironment(EnvironmentType[] environments) {
        for (EnvironmentType environment : environments) {
            if (environment == currentEnvironment) {
                return true;
            }
        }
        return false;
    }
}]]></Answer>
<Answer><![CDATA[<build>
    <resources>
        <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
            <includes>
                <include>**/*.*</include>
            </includes>
       </resource>
   </resources>
</build>

<profiles>
    <profile>
        <id>default</id>
        <properties>
            <MyBean></MyBean>
        </properties>
    </profile>
    <profile>
        <id>alternative</id>
        <properties>
            <MyBean><![CDATA[<class>com.MyBean</class>]]]]><![CDATA[></MyBean>
        </properties>
    </profile>
</profiles>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42193899" questionTitle="Select and Move Canvas image with MouseEvent and MouseClicked in JavaFX">
<Answer><![CDATA[public class JavaFXTest extends Application {
    double mouse_x = 0.0;
    double mouse_y = 0.0;
    double circle_x = 10;
    double circle_y = 14;
    double height = 40;
    double width = 40;
    boolean circle_selected = false;

    @Override
    public void start(Stage primaryStage) {
        Group root = new Group();
        Canvas canvas = new Canvas(300,100);
        this.createCircle(canvas);

        canvas.setOnMouseClicked(e-> this.select(e));
        canvas.setOnMouseMoved(e -> { if(this.circle_selected) this.move(e, canvas); });

        root.getChildren().add(canvas);
        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    //checks whether the mouse location is within the circle or not
    private void select(MouseEvent e) {
        double temp_mouse_x = e.getSceneX();
        double temp_mouse_y = e.getSceneY();
        double x_max = this.circle_x + this.width;
        double y_max = this.circle_y + this.height;
        boolean selected = temp_mouse_x >= this.circle_x && temp_mouse_x <= x_max // x-area
                    &&
                      temp_mouse_y >= this.circle_y && temp_mouse_y <= y_max; //y-area              

        if(circle_selected && selected) { 
            //deselect the circle if already selected
            circle_selected = false;
        }else {
            circle_selected = selected;
        }
        this.mouse_x = temp_mouse_x;
        this.mouse_y = temp_mouse_y;
    }

    //move circle
    public void move(MouseEvent e, Canvas canvas) {
            double change_x = e.getSceneX() - this.mouse_x;
            this.circle_x += change_x;
            canvas.getGraphicsContext2D().clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
            this.createCircle(canvas);
            this.mouse_x = e.getSceneX();
            this.mouse_y = e.getSceneY();
    }

    public void createCircle(Canvas canvas) {
        GraphicsContext gc = canvas.getGraphicsContext2D();

        //outer circle
        Stop[] stops = new Stop[]{new Stop(0, Color.LIGHTSKYBLUE), new Stop(1, Color.BLUE)};
        LinearGradient gradient = new LinearGradient(0.5, 0, 0.5, 1, true, CycleMethod.NO_CYCLE, stops);
        gc.setFill(gradient);
        gc.fillOval(this.circle_x, this.circle_y, this.width, this.height);
        gc.translate(0, 0);
        gc.fill();
        gc.stroke();

        // Inner circle
        stops = new Stop[]{new Stop(0, Color.BLUE), new Stop(1, Color.LIGHTSKYBLUE)};
        gradient = new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE, stops);
        gc.setFill(gradient);
        gc.fillOval(this.circle_x + 3, this.circle_y + 3, this.width - 6, this.height - 6);
        gc.fill();
        gc.stroke();    
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
     Group root = new Group();
     Canvas background = new Canvas(300,100);

     Canvas circle = new Canvas(60,60);
     GraphicsContext circleContext = circle.getGraphicsContext2D();

     Stop[] stops;
     LinearGradient gradient;

     // outer circle
     stops = new Stop[]{new Stop(0, Color.LIGHTSKYBLUE), new Stop(1, Color.BLUE)};
     gradient = new LinearGradient(0.5, 0, 0.5, 1, true, CycleMethod.NO_CYCLE, stops);
     circleContext.setFill(gradient);
     circleContext.fillOval(10, 14, 40, 40);
     circleContext.fill();
     circleContext.stroke();

     // Inner circle
     stops = new Stop[]{new Stop(0, Color.BLUE), new Stop(1, Color.LIGHTSKYBLUE)};
     gradient = new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE, stops);
     circleContext.setFill(gradient);
     circleContext.fillOval(13, 17, 34, 34);
     circleContext.fill();
     circleContext.stroke();

     circle.setOnMouseDragged(e -> {
         double offsetX = e.getSceneX() - circle.getTranslateX() - circle.getWidth() / 2;
         circle.setTranslateX(circle.getTranslateX() + offsetX);
     });

     root.getChildren().addAll(background, circle);
     Scene scene = new Scene(root);
     primaryStage.setScene(scene);
     primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42169630" questionTitle="Using java8 Streams merge internal lists within a list">
<Answer><![CDATA[static List<List<Integer>> mergeCollections(List<List<Integer>> input) {
    List<List<Integer>> result = Collections.emptyList();

    for (List<Integer> listInner : input) {
        List<Integer> merged = Stream.concat(
                // read current results and select only those which contain
                // numbers from current list
                result.stream()
                      .filter(list -> list.stream().anyMatch(listInner::contains))
                      // flatten them into single stream
                      .flatMap(List::stream),
                // concatenate current list, remove repeating numbers and collect
                listInner.stream()).distinct().collect(Collectors.toList());

        // Now we need to remove used lists from the result and add the newly created 
        // merged list
        result = Stream.concat(
                result.stream()
                      // filter out used lists
                      .filter(list -> list.stream().noneMatch(merged::contains)),
                Stream.of(merged)).collect(Collectors.toList());
    }
    return result;
}]]></Answer>
<Answer><![CDATA[public class Combiner {

    public static void main(String[] args) {
        List<List<Integer>> mainList = new ArrayList<>();
        mainList.add(Arrays.asList(1, 2));
        mainList.add(Arrays.asList(4, 5));
        mainList.add(Arrays.asList(7, 8));
        mainList.add(Arrays.asList(6, 19));

        mainList.add(Arrays.asList(2, 3, 5, 7));

        System.out.println(combineList(new ArrayList<>(mainList)));
        List<List<Integer>> result = mergeCollections(new ArrayList<>(mainList));
        System.out.println(result);

    }

    public static <T> List<List<T>> combineList(List<List<T>> argList) {
        List<List<T>> result = new ArrayList<>();
        for (List<T> list : argList) {
            //Copy the given list
            List<T> addedList = new ArrayList<>(list);
            result.add(addedList);
            for (List<T> otherList : argList) {
                if (list.equals(otherList)) continue;
                //If at least one element is shared between the two lists
                if (list.stream().anyMatch(otherList::contains)) {
                    //Add all elements that are exclusive to the second list
                    addedList.addAll(otherList.stream().map(t -> addedList.contains(t) ? null : t)
                            .filter(t -> t != null).collect(Collectors.toList()));
                }
            }
        }
        List<List<T>> del = new ArrayList<>();
        for (int i = 0; i < result.size(); i++) {
            for (int j = i + 1; j < result.size(); j++) {
                List<T> list = result.get(j);
                if (listEqualsUnOrdered(list, result.get(i))) {
                    //Modified this
                    del.add(result.get(i));
                }
            }
            //Can't use listIterator here because of iterating starting at j + 1
            result.removeAll(del);
        }
        //Recursion
        if (!result.equals(argList)) {
            result = combineList(result);
        }
        return result;
    }

    private static <T> boolean listEqualsUnOrdered(List<T> list1, List<T> list2) {
        if (list1.size() != list2.size()) return false;
        List<T> testOne = new ArrayList<>(list1);
        testOne.removeAll(list2);
        boolean testOnePassed = (testOne.size() == 0);
        List<T> testTwo = new ArrayList<>(list2);
        testTwo.removeAll(list1);
        if (testTwo.size() == 0 && testOnePassed) return true;
        return false;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42149834" questionTitle="Javafx: Updating a phone number textfield with hashtags and numbers live">
<Answer><![CDATA[private TextField createPhoneField() {
    TextField phoneField = new TextField();
    phoneField.setPrefColumnCount(12);

    TextFormatter<String> formatter =
        new TextFormatter<>(this::addPhoneNumberMask);
    phoneField.setTextFormatter(formatter);

    return phoneField;
}

private TextFormatter.Change addPhoneNumberMask(
                                TextFormatter.Change change) {

    // Ignore cursor movements, unless the text is empty (in which case
    // we're initializing the field).
    if (!change.isContentChange() &&
        !change.getControlNewText().isEmpty()) {

        return change;
    }

    String text = change.getControlNewText();
    int start = change.getRangeStart();
    int end = change.getRangeEnd();

    int anchor = change.getAnchor();
    int caret = change.getCaretPosition();

    StringBuilder newText = new StringBuilder(text);

    int dash;
    while ((dash = newText.lastIndexOf("-")) >= start) {
        newText.deleteCharAt(dash);
        if (caret > dash) {
            caret--;
        }
        if (anchor > dash) {
            anchor--;
        }
    }

    while (newText.length() < 3) {
        newText.append('#');
    }
    if (newText.length() == 3 || newText.charAt(3) != '-') {
        newText.insert(3, '-');
        if (caret > 3 || (caret == 3 && end <= 3 && change.isDeleted())) {
            caret++;
        }
        if (anchor > 3 || (anchor == 3 && end <= 3 && change.isDeleted())) {
            anchor++;
        }
    }

    while (newText.length() < 7) {
        newText.append('#');
    }
    if (newText.length() == 7 || newText.charAt(7) != '-') {
        newText.insert(7, '-');
        if (caret > 7 || (caret == 7 && end <= 7 && change.isDeleted())) {
            caret++;
        }
        if (anchor > 7 || (anchor == 7 && end <= 7 && change.isDeleted())) {
            anchor++;
        }
    }

    while (newText.length() < 12) {
        newText.append('#');
    }

    if (newText.length() > 12) {
        newText.delete(12, newText.length());
    }

    text = newText.toString();
    anchor = Math.min(anchor, 12);
    caret = Math.min(caret, 12);

    change.setText(text);
    change.setRange(0, change.getControlText().length());
    change.setAnchor(anchor);
    change.setCaretPosition(caret);

    return change;
}]]></Answer>
<Answer><![CDATA[phoneField.textProperty().addListener((observable, oldValue, newValue) -> {
    Pattern p = Pattern.compile("\\d+");
    Matcher m = p.matcher(newValue);
    StringBuilder result = new StringBuilder();
    String finalString = "";
    try {
        while (m.find()) {
            result.append(m.group());
        }
        int size = result.length();
        for (int i = 0; i < size; i++) {
            if (i == 3 || i == 6) finalString += "-";
            finalString += result.charAt(i);
        }
        for (int i = size; i < 9; i++) {
            if (i == 3 || i == 6) finalString += "-";
            finalString += "#";
        }
    } catch (Exception e) {
        finalString = "INVALID NUMBER";
    }
    phoneField.setText(finalString);
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42130908" questionTitle="Cumulative Sum multiple object attribute Stream">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class DoubleSummation {

    public static void main(String[] args) {
        List<Obj> list = new ArrayList<>();
        list.add(new Obj("9-2015",100,20,10,5));
        list.add(new Obj("10-2015",220,40,20,55));
        list.add(new Obj("11-2015",300,60,30,45));
        list.add(new Obj("12-2015",330,30,50,6));
        list.add(new Obj("1-2016",100,10,10,4));

        Double sumMemberCount = list.stream().mapToDouble(o->o.membercount).sum();
        Double sumNonmembercount = list.stream().mapToDouble(o->o.nonmembercount).sum();
        Double sumMemberpayment = list.stream().mapToDouble(o->o.memberpayment).sum();
        Double sumNonmemberpayment = list.stream().mapToDouble(o->o.nonmemberpayment).sum();

        System.out.println(sumMemberCount);
        System.out.println(sumNonmembercount);
        System.out.println(sumMemberpayment);
        System.out.println(sumNonmemberpayment);
    }
}

class Obj{

    String year;
    long membercount;
    long nonmembercount;
    double memberpayment;
    double nonmemberpayment;

    public Obj(String year, long membercount, long nonmembercount, double memberpayment, double nonmemberpayment) {
        this.year = year;
        this.membercount = membercount;
        this.nonmembercount = nonmembercount;
        this.memberpayment = memberpayment;
        this.nonmemberpayment = nonmemberpayment;
    }

}]]></Answer>
<Answer><![CDATA[// test data
List<Obj> list=Arrays.asList(
    new Obj("9-2015", 100, 20, 10, 5),
    new Obj("10-2015", 220, 40, 20, 55),
    new Obj("11-2015", 300, 60, 30, 45),
    new Obj("12-2015", 330, 30, 50, 6),
    new Obj("1-2016", 100, 10, 10, 4));

// creating an array as need for the operation, it will contain the
// result afterwards, whereas the source list is not modified
Obj[] array = list.toArray(new Obj[0]);

// the actual operation
Arrays.parallelPrefix(array, (a,b) -> new Obj(b.year,
    a.membercount + b.membercount,
    a.nonmembercount + b.nonmembercount,
    a.memberpayment + b.memberpayment,
    a.nonmemberpayment + b.nonmemberpayment
));

// just print the result
Arrays.asList(array).forEach(System.out::println);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42084983" questionTitle="What is the BigInteger property in JavaFX?">
<Answer><![CDATA[public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        BorderPane root = new BorderPane();

        ObjectProperty<BigInteger> bigIntProp = new SimpleObjectProperty<>();
        bigIntProp.addListener((obs, oldval, newval) -> System.out.println(newval));

        TextArea ta = new TextArea();

        bigIntProp.bind(Bindings.createObjectBinding(() ->
                        (!ta.getText().isEmpty()) ? new BigInteger(ta.getText()) : BigInteger.ZERO
                , ta.textProperty()));
        root.setCenter(ta);

        primaryStage.setScene(new Scene(root, 300, 275));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.math.BigInteger;
import javafx.beans.property.SimpleObjectProperty;
/**
 * 
 * This class provides a full implementation of a {@link Property} wrapping an
 * arbitrary {@code BigInteger}.
 */
public class SimpleBigIntegerProperty extends SimpleObjectProperty<BigInteger>{

    private static final Object DEFAULT_BEAN = null;
    private static final String DEFAULT_NAME = "";

    private final Object bean;
    private final String name;
    /**
     * {@inheritDoc}
     */
    @Override
    public Object getBean() {
        return bean;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getName() {
        return name;
    }

    /**
     * The constructor of {@code BigIntegerProperty}
     */
    public SimpleBigIntegerProperty() {
        this(DEFAULT_BEAN, DEFAULT_NAME);
    }
    /**
     * The constructor of {@code BigIntegerProperty}
     * 
     * @param initialValue
     *            the initial value of the wrapped value
     */
    public SimpleBigIntegerProperty(BigInteger initialValue) {
        this(DEFAULT_BEAN, DEFAULT_NAME, initialValue);
    }

    /**
     * The constructor of {@code BigIntegerProperty}
     * 
     * @param bean
     *            the bean of this {@code BigIntegerProperty}
     * @param name
     *            the name of this {@code BigIntegerProperty}
     */
    public SimpleBigIntegerProperty(Object bean, String name) {
        this.bean = bean;
        this.name = (name == null) ? DEFAULT_NAME : name;
    }

    /**
     * The constructor of {@code BigIntegerProperty}
     * 
     * @param bean
     *            the bean of this {@code BigIntegerProperty}
     * @param name
     *            the name of this {@code BigIntegerProperty}
     * @param initialValue
     *            the initial value of the wrapped value
     */
    public SimpleBigIntegerProperty(Object bean, String name, BigInteger initialValue) {
        super(initialValue);
        this.bean = bean;
        this.name = (name == null) ? DEFAULT_NAME : name;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="42024442" questionTitle="JavaFX: Adding CTRL-click functionality to checkboxes of nested CheckBoxTreeItem[s]">
<Answer><![CDATA[public class MyCheckBoxCell extends TreeCell<String> {

    private final CheckBox checkBox = new CheckBox();

    private BooleanProperty currentSelectedBinding ;

    // only need this if you are using the indeterminateProperty() of your
    // CheckBoxTreeItems
    private BooleanProperty currentIndeterminateBinding ;

    public MyCheckBoxCell() {

        // add extra event handling to the check box here...

    }

    @Override
    protected void updateItem(String item, boolean empty) {

        super.updateItem(item, empty);

        if (empty) {
            setText(null);
            setGraphic(null);
        } else {
            setText(item);
            setGraphic(checkBox);
            if (currentSelectedBinding != null) {
                checkBox.selectedProperty().unbindBidirectional(currentSelectedBinding);
            }
            if (currentIndeterminateBinding != null) {
                checkBox.indeterminateProperty().unbindBidirectional(currentIndeterminateBinding);
            }
            if (getTreeItem() instanceof CheckBoxTreeItem) {
                CheckBoxTreeItem cbti = (CheckBoxTreeItem<?>) getTreeItem();
                currentSelectedBinding = cbti.selectedProperty();
                checkBox.selectedProperty().bindBidirectional(currentSelectedBinding);
                currentIndeterminateBinding = cbti.indeterminateProperty();
                checkBox.indeterminateProperty().bindBidirectional(currentIndeterminateBinding);
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.BooleanProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.CheckBox;
import javafx.scene.control.CheckBoxTreeItem;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.util.Callback;
import javafx.util.StringConverter;

public class MyTreeCell<T> extends TreeCell<T> {
    private final CheckBox checkBox;
    private ObservableValue<Boolean> booleanProperty;
    private BooleanProperty indeterminateProperty;

    public MyTreeCell() {
        this.getStyleClass().add("check-box-tree-cell");
        this.checkBox = new CheckBox();
        this.checkBox.setAllowIndeterminate(false);

        // by default the graphic is null until the cell stops being empty
        setGraphic(null);
    }

    // --- checkbox
    public final CheckBox getCheckBox() { return checkBox; }

    // --- selected state callback property
    private ObjectProperty<Callback<TreeItem<T>, ObservableValue<Boolean>>>
            selectedStateCallback =
            new SimpleObjectProperty<>(
                    this, "selectedStateCallback");

    public final ObjectProperty<Callback<TreeItem<T>, ObservableValue<Boolean>>> selectedStateCallbackProperty() {
        return selectedStateCallback;
    }

    public final void setSelectedStateCallback(Callback<TreeItem<T>, ObservableValue<Boolean>> value) {
        selectedStateCallbackProperty().set(value);
    }

    public final Callback<TreeItem<T>, ObservableValue<Boolean>> getSelectedStateCallback() {
        return selectedStateCallbackProperty().get();
    }

    @Override public void updateItem(T item, boolean empty) {
        super.updateItem(item, empty);

        if (empty) {
            setText(null);
            setGraphic(null);
        } else {    
            TreeItem<T> treeItem = getTreeItem();

            // update the node content
            setText((treeItem == null ? "" : treeItem.getValue().toString()));
            checkBox.setGraphic(treeItem == null ? null : treeItem.getGraphic());
            setGraphic(checkBox);

            // uninstall bindings
            if (booleanProperty != null) {
                checkBox.selectedProperty().unbindBidirectional((BooleanProperty)booleanProperty);
            }
            if (indeterminateProperty != null) {
                checkBox.indeterminateProperty().unbindBidirectional(indeterminateProperty);
            }

            // install new bindings.
            // We special case things when the TreeItem is a CheckBoxTreeItem
            if (treeItem instanceof CheckBoxTreeItem) {
                CheckBoxTreeItem<T> cbti = (CheckBoxTreeItem<T>) treeItem;
                booleanProperty = cbti.selectedProperty();
                checkBox.selectedProperty().bindBidirectional((BooleanProperty)booleanProperty);

                indeterminateProperty = cbti.indeterminateProperty();
                checkBox.indeterminateProperty().bindBidirectional(indeterminateProperty);
            } else {
                Callback<TreeItem<T>, ObservableValue<Boolean>> callback = getSelectedStateCallback();
                if (callback == null) {
                    throw new NullPointerException(
                            "The CheckBoxTreeCell selectedStateCallbackProperty can not be null");
                }

                booleanProperty = callback.call(treeItem);
                if (booleanProperty != null) {
                    checkBox.selectedProperty().bindBidirectional((BooleanProperty)booleanProperty);
                }
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41993887" questionTitle="Can you apply animations from Javascript to Java-FX Objects using Nashorn?">
<Answer><![CDATA[// Usage: jjs -fx textanimation.js

// JavaFX classes used
var BorderPane = Java.type("javafx.scene.layout.BorderPane")
var Button = Java.type("javafx.scene.control.Button")
var Duration = Java.type("javafx.util.Duration")
var FadeTransitionBuilder = Java.type("javafx.animation.FadeTransitionBuilder")
var Scene = Java.type("javafx.scene.Scene")
var Text = Java.type("javafx.scene.text.Text")
var TranslateTransitionBuilder = Java.type("javafx.animation.TranslateTransitionBuilder")

function start(stage) {
    //target node
    var text = new Text("Title")

    //fade-in animation
    var fadeIn = new Button("Fade In")
    fadeIn.onAction = function(e) {
         var fade1 = FadeTransitionBuilder
                .create()
                .node(text)
                .duration(Duration.millis(900))
                .fromValue(0)
                .toValue(1)
                .build()
         fade1.play()
    }

    //fade-out animation
    var fadeOut = new Button("Fade Out")
    fadeOut.onAction = function(e) {
         var fade2 = FadeTransitionBuilder
                .create()
                .node(text)
                .duration(Duration.millis(900))
                .fromValue(1)
                .toValue(0)
                .build()
         fade2.play()
    }

    //slide-down animation
    var slideDown = new Button("Slide-Down")
    slideDown.onAction = function(event) {
         var slide = TranslateTransitionBuilder.create()
                .node(text).duration(Duration.millis(900))
                .fromY(-400)
                .toY(0)
                .build()
         slide.play()
    }

    var root = new BorderPane()
    root.setCenter(text)
    root.setRight(fadeOut)
    root.setLeft(fadeIn)
    root.setBottom(slideDown)

    var scene = new Scene(root, 300, 250)

    stage.title = "Animation Demo"
    stage.scene = scene
    stage.show()
}]]></Answer>
<Answer><![CDATA[public class AnimateText extends Application {  
    @Override
    public void start(Stage primaryStage) {
        //target node
        Text text = new Text("Title");

        //fade-in animation
        Button fadeIn = new Button("Fade In");
        fadeIn.setOnAction(e -> {
            @SuppressWarnings("deprecation")
            FadeTransition fade1 = FadeTransitionBuilder
                    .create()
                    .node(text)
                    .duration(Duration.millis(900))
                    .fromValue(0)
                    .toValue(1)
                    .build();
            fade1.play();
        });

        //fade-out animation
        Button fadeOut = new Button("Fade Out");
        fadeOut.setOnAction(e -> {
            @SuppressWarnings("deprecation")
            FadeTransition fade2 = FadeTransitionBuilder
                    .create()
                    .node(text)
                    .duration(Duration.millis(900))
                    .fromValue(1)
                    .toValue(0)
                    .build();
            fade2.play();
        });

        //slide-down animation
        Button slideDown = new Button("Slide-Down");
        slideDown.setOnAction((ActionEvent event) -> {
            @SuppressWarnings("deprecation")
            TranslateTransition slide = TranslateTransitionBuilder.create()
                    .node(text).duration(Duration.millis(900))
                    .fromY(-400)
                    .toY(0)
                    .build();
            slide.play();
        });


        BorderPane root = new BorderPane();
        root.setCenter(text);
        root.setRight(fadeOut);
        root.setLeft(fadeIn);
        root.setBottom(slideDown);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Animation Demo");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }   
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41955874" questionTitle="JavaFX: Disable all components while a process is running and show progress indicator">
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {

        BorderPane root = new BorderPane();
        Scene scene = new Scene(root, 400, 400);
        scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());

        Service<Void> serv = new Service<Void>() {

            @Override
            protected Task<Void> createTask() {
                return new Task<Void>() {

                    @Override
                    protected Void call() throws Exception {
                        int maxWork = 10;
                        for (int i = 0; i < maxWork; i++) {
                            Thread.sleep(1000);
                            updateProgress(i + 1, maxWork);
                        }

                        return null;
                    }

                    @Override
                    protected void succeeded() {
                        super.succeeded();
                        updateProgress(1, 1);
                    }

                    @Override
                    protected void cancelled() {
                        super.cancelled();
                        updateProgress(1, 1);
                    }

                    @Override
                    protected void failed() {
                        super.failed();
                        updateProgress(1, 1);
                    }

                };
            }
        };

        ProgressIndicator pi = new ProgressIndicator();
        pi.progressProperty().bind(serv.progressProperty());


        Button bStart = new Button("Start");
        bStart.setOnAction(e -> {
            serv.reset();
            serv.start();
        });

        root.setCenter(bStart);
        root.setBottom(pi);

        primaryStage.setScene(scene);
        primaryStage.show();

        pi.getScene().getRoot().disableProperty().bind(serv.runningProperty());
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class ProgressExample extends Application {

    public StackPane layout, main, progress;

    public StackPane createProgressPane() {
        ProgressIndicator indicator = new ProgressIndicator();
        indicator.setMaxHeight(50);
        indicator.setMaxWidth(50);

        StackPane pane = new StackPane();
        pane.setAlignment(Pos.CENTER);
        pane.setStyle("-fx-background-color: rgba(160,160,160,0.7)");
        pane.getChildren().add(indicator);

        Task<Void> task = new Task<Void>(){
            protected Void call() throws Exception {
                // Your process here.
                // Any changes to UI components must be inside Platform.runLater() or else it will hang.
                Thread.sleep(2000);

                Platform.runLater(() -> {
                    layout.getChildren().remove(pane);
                });
                return null;
            }
        };
        new Thread(task).start();
        return pane;
    }

    public StackPane createMainPane() {
        Label label = new Label("Hello World!");
        label.setFont(Font.font("Tahoma", FontWeight.SEMI_BOLD, 16));

        Button start = new Button("Start Process");
        start.setOnAction(action -> {
            progress = createProgressPane();
            layout.getChildren().add(progress);
        });

        VBox vbox = new VBox(10);
        vbox.setAlignment(Pos.CENTER);
        vbox.getChildren().addAll(label, start);
        vbox.setPadding(new Insets(10,10,10,10));

        StackPane pane = new StackPane();
        pane.getChildren().add(vbox);
        return pane;
    }

    public void start(Stage stage) throws Exception {
        main = createMainPane();

        layout = new StackPane();
        layout.getChildren().add(main);

        Scene scene = new Scene(layout, 900, 550);
        stage.setScene(scene);
        stage.setTitle("Progress Example");
        stage.setOnCloseRequest(e -> {
            Platform.exit();
            System.exit(0);
        });
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41946327" questionTitle="How to convert Array to HashMap using Java 8 Stream">
<Answer><![CDATA[class Pair<K,V> {
    final K k;
    final V v;
    Pair( K ak, V av) {
        k=ak;
        v=av;
    }
    static <A,B> Pair<A,B> p(A a, B b) {
        return new Pair(a,b);
    }
}

public class JavaTest8 {

    <K,V> Map<K,V> toMap( Pair<K,V>... pairs ) {
        return Arrays.stream(pairs).collect(Collectors.toMap(p->p.k, p->p.v));
    }

    public static void main(String[] args) {
        // Usage
        Map<String,Integer> sti = toMap( p("A",1), p("B",2) );
        Map<Integer,Boolean> itb = toMap( p(1,true), p(42,false) );
    }
}]]></Answer>
<Answer><![CDATA[public static <K, V> Map<K, V> toMap(final Object... entries) {
    // Requirements:
    // entries must be K1, V1, K2, V2, .... ( even length )
    if (entries.length % 2 == 1) {
        throw new IllegalArgumentException("Invalid entries");
    }

    final Map<K, V> map = new HashMap<>((int) (entries.length / 2 * 1.25 + 1));
    IntStream.range(0, entries.length / 2).forEach(i -> map.put((K) entries[i * 2], (V) entries[i * 2 + 1]));
    return map;

    // OR: 
    //    return IntStream.range(0, entries.length / 2).boxed().reduce(new HashMap<K, V>(), (m, i) -> {
    //        m.put((K) entries[i * 2], (V) entries[i * 2 + 1]);
    //        return m;
    //    }, (a, b) -> {
    //        a.putAll(b);
    //        return b;
    //    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41898355" questionTitle="Lock handler for arbitrary keys">
<Answer><![CDATA[private ConcurrentHashMap<String, ReentrantLock> caches = new ConcurrentHashMap<>();

public void processWithLock(String key) {
    ReentrantLock lock = findAndGetLock(key);
    lock.lock();
    try {
        // do you work here

    } finally {
        unlockAndClear(key, lock);
    }
}

private void unlockAndClear(String key, ReentrantLock lock) {
    // *** Step 1: Release the lock.
    lock.unlock();
    // *** Step 2: Attempt to remove the lock
    // This is done by calling compute method, if given lock is present in
    // cache. if current lock object in cache is same instance as 'lock'
    // then remove it from cache. If not, some other thread is succeeded in
    // putting new lock object and hence we can leave the removal of lock object to that
    // thread.
    caches.computeIfPresent(key, (k, current) -> lock == current ? null : current);

}

private ReentrantLock findAndGetLock(String key) {
    // Merge method given us the access to the previously( if available) and
    // newer lock object together.
    return caches.merge(key, new ReentrantLock(), (older, newer) -> nonNull(older) ? older : newer);
}]]></Answer>
<Answer><![CDATA[// This will create a ConcurrentHashMap with an initial table size of 16   
// bins by default, you may provide an initialCapacity and loadFactor
// if too much or not enough to get the expected table size in order
// increase or reduce the concurrency level of your map
// NB: We don't care much of the type of the value so I arbitrarily
// used Void but it could be any type like simply Object
private final ConcurrentMap<Key, Void> lockMap = new ConcurrentHashMap<>();

public void handle(Key lockKey) {
    // Execute the method process through the remapping Function
    lockMap.compute(
        lockKey,
        (key, value) -> {
            // Execute the process method under the protection of the
            // lock of the bin of hashes corresponding to the key
            someWorkExecutor.process(key);
            // Returns null to keep the Map empty
            return null;
        }
    );
}]]></Answer>
<Answer><![CDATA[public void handle(Key key) throws InterruptedException {
    CountDownLatch latch = new CountDownLatch(1);

    // try to acquire the lock by inserting our latch as a
    // mapping for key        
    while(true) {
        CountDownLatch existing = lockMap.putIfAbsent(key, latch);
        if (existing != null) {
            // there is an existing key, wait on it
            existing.await();
        } else {
            break;
        }
    }

    try {
        externalSystem.process(key);
    } finally {
        lockMap.remove(key);
        latch.countDown();
    }
}]]></Answer>
<Answer><![CDATA[public class MyHandler {

    private static class LockHolder {
        ReentrantLock lock = new ReentrantLock();
        int refcount = 0;
        void lock(){
            lock.lock();
        }
    } 

    private final SomeWorkExecutor someWorkExecutor;
    private final Lock mapLock = new ReentrantLock();
    private final HashMap<Key, LockHolder> lockMap = new HashMap<>();

    public void handle(Key key) {

        // lock the map
        mapLock.lock();
        LockHolder holder = lockMap.computeIfAbsent(key, k -> new LockHolder());
        // the lock in holder is either unlocked (newly created by us), or an existing lock, let's increment refcount
        holder.refcount++;
        mapLock.unlock();

        holder.lock();

        try {
            someWorkExecutor.process(key);
        } finally {
            mapLock.lock()
            keyLock.unlock();
            if (--holder.refcount == 0) {
              // no more users, remove lock holder
              map.remove(key);
            }
            mapLock.unlock();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41889221" questionTitle="How to shift buttons in the GridPane?">
<Answer><![CDATA[fifty.setOnAction(e->{
        fifty.setDisable(false);
        int counter = 2;
        ArrayList<String> variants = new ArrayList<>(Arrays.asList("a","b","c","d"));
        variants.remove(trueAnswerIndex);
        String variant;
        int n = 2;

        while(counter>0){
            variant = variants.get(randInt(0,n));
            switch(variant){
                case "a":
                    a.setVisible(false);
                    variants.remove("a");
                    break;
                case "b":
                    b.setVisible(false);
                    variants.remove("b");
                    break;
                case "c":
                    c.setVisible(false);
                    variants.remove("c");
                    break;
                case "d":
                    d.setVisible(false);
                    variants.remove("d");
                    break;
            }
            counter--;
            n--;
        }
    });]]></Answer>
<Answer><![CDATA[public class JavaFXTest extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        Group root = new Group();
        GridPane pane = new GridPane();

        for (int i = 0; i < 2; i++) {
            RowConstraints rc = new RowConstraints();
            rc.setPrefHeight(100);

            ColumnConstraints cc = new ColumnConstraints();
            cc.setPercentWidth(100);

            pane.getRowConstraints().add(rc);
            pane.getColumnConstraints().add(cc);
        }

        Button b1 = new Button("1");
        b1.setPrefSize(100, 100);

        Button b2 = new Button("2");
        b2.setPrefSize(100, 100);

        Button b3 = new Button("3");
        b3.setPrefSize(100, 100);

        Button b4 = new Button("4");
        b4.setPrefSize(100, 100);

        b1.setOnAction(e -> {
            b2.setVisible(false);
        });

        b2.setOnAction(e -> {
            b3.setVisible(false);
        });

        b3.setOnAction(e -> {
            b4.setVisible(false);
        });

        b4.setOnAction(e -> {
            b1.setVisible(false);
        });

        pane.add(b1, 0, 0);
        pane.add(b2, 1, 0);
        pane.add(b3, 0, 1);
        pane.add(b4, 1, 1);

        root.getChildren().add(pane);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41850272" questionTitle="Update TextFlow from another class JavaFx">
<Answer><![CDATA[public void recevoirMessage() {
    output = new ByteArrayOutputStream();
    try {
        socket = serverSocket.accept();
    } catch (IOException ex) {
        System.out.println("Can't accept client connection. ");
    }
    try {
        in = socket.getInputStream();
    } catch (IOException ex) {
        System.out.println("Can't get socket input stream. ");
    }
    byte[] bytes = new byte[16*1024];
    try {
        while ((count = in.read(bytes)) > 0) {}
    } catch (IOException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    System.out.println("Message reçus");
    String recu = "Message : "+new String(bytes);
    System.out.println(recu);

    //inserted here
    Platform.runLater(new Runnable() {
            @Override public void run() {
                //HERE I WANT TO UPDATE MY TEXTFLOW
                textProperty.setValue(new String(bytes));
            }
        });


    try {
        in.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }   
}]]></Answer>
<Answer><![CDATA[public void recevoirMessage() {
output = new ByteArrayOutputStream();
try {
    socket = serverSocket.accept();
} catch (IOException ex) {
    System.out.println("Can't accept client connection. ");
}
try {
    in = socket.getInputStream();
} catch (IOException ex) {
    System.out.println("Can't get socket input stream. ");
}
byte[] bytes = new byte[16*1024];
try {
    while ((count = in.read(bytes)) > 0) {}
} catch (IOException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
}
System.out.println("Message reçus");
String recu = "Message : "+new String(bytes);
System.out.println(recu);

//inserted here
Platform.runLater(new Runnable() {
        @Override public void run() {
            //HERE I WANT TO UPDATE MY TEXTFLOW
        }
    });


try {
    in.close();
} catch (IOException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41813388" questionTitle="JavaFX ListView Cell bidirectional binding between graphic and itemProperty in cell constructor">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    ObservableList<Model> myModels = FXCollections.observableArrayList(
            IntStream.range(0, 100).mapToObj(i -> new Model("MyModel " + i)).collect(Collectors.toList())
    );

    ListView<Model> modelListView = new ListView<>();
    modelListView.setCellFactory(c -> new MyListCell());
    modelListView.setItems(myModels);

    StackPane root = new StackPane();
    root.getChildren().addAll(modelListView);

    Scene scene = new Scene(root, 300, 250);

    primaryStage.setTitle("Custom list cell");
    primaryStage.setScene(scene);
    primaryStage.show();
}

private class MyListCell extends ListCell<Model> {

    private HBox content = new HBox();
    private TextField textField = new TextField();
    private Button actionButton = new Button("Action");

    private final ChangeListener<String> textListener = (ObservableValue<? extends String> observable, String oldValue, String newValue) -> {
        checkIfDisableButton(newValue);
    };

    public MyListCell() {
        content.getChildren().addAll(textField, actionButton);
        content.setSpacing(10);
        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
        setGraphic(content);
    }

    @Override
    protected void updateItem(Model item, boolean empty) {
        if (getItem() != null) { // get old item
            //remove all bidirectional bindings and listeners
            textField.textProperty().unbindBidirectional(getItem().nameProperty());
            getItem().nameProperty().removeListener(textListener);
        }
        super.updateItem(item, empty);
        //new item
        if (item == null || empty) {
            setText(null);
            setGraphic(null);
        } else {
            setGraphic(content);
            checkIfDisableButton(item.getName());
            item.nameProperty().addListener(textListener);
            textField.textProperty().bindBidirectional(item.nameProperty());
            actionButton.setOnAction(e -> {
                System.out.println(item.getName());
            });
        }
    }

    private void checkIfDisableButton(String value) {
        actionButton.setDisable("MyModel 2".equals(value));
    }
}

private class Model {

    StringProperty name = new SimpleStringProperty();

    public Model(String name) {
        this.name.set(name);
    }

    public String getName() {
        return name.get();
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public StringProperty nameProperty() {
        return this.name;
    }

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    ObservableList<Model> myModels = FXCollections.observableArrayList(model -> new Observable[]{model.nameProperty()});

    ListView<Model> modelListView = new ListView<>();
    modelListView.setCellFactory(c -> {
        MyListCell cell = new MyListCell();
        //TODO is there a way to replace this listener with something less verbose?
        cell.getTextField().textProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue!=null){
                cell.getItem().setName(newValue);
            }
        });

        return cell;
    });
    modelListView.setItems(myModels);
    myModels.add(new Model());

    Button addButton = new Button("Add");
    addButton.setOnAction(event -> myModels.add(new Model()));

    StackPane root = new StackPane();
    root.getChildren().addAll(new HBox(20, modelListView, addButton));
    primaryStage.setTitle("ListView with bidirectional binding");
    primaryStage.setScene(new Scene(root, 600, 500));
    primaryStage.show();
}

private class Model {
    private StringProperty name = new SimpleStringProperty(this, "name", "");
    private ReadOnlyStringWrapper computedName = new ReadOnlyStringWrapper(this, "computedName");

    public Model() {
        computedName.bind(Bindings.createStringBinding(() -> name.get().toUpperCase(), name));
    }

    public String getName() {
        return name.get();
    }

    public StringProperty nameProperty() {
        return name;
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getComputedName() {
        return computedName.get();
    }

    public ReadOnlyStringWrapper computedNameProperty() {
        return computedName;
    }
}

private class MyListCell extends ListCell<Model> {
    private HBox content = new HBox(10);
    private TextField textField = new TextField();
    private Label label = new Label();

    public MyListCell() {
        content.getChildren().addAll(textField, label);
    }

    @Override
    protected void updateItem(Model item, boolean empty) {
        super.updateItem(item, empty);
        if (item == null || empty) {
            setGraphic(null);
        } else {
            setGraphic(content);
            textField.textProperty().set(item.getName());
            label.textProperty().set(item.getComputedName());
        }
    }

    public TextField getTextField() {
        return textField;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41755798" questionTitle="JAVA javaFX menuBar, multiple items, one method (scene Builder)">
<Answer><![CDATA[@FXML void openWindow(ActionEvent event){
    try 
    {
        MenuItem tempMenuItem = (MenuItem)event.getSource();                   
        System.out.println(tempMenuItem.getId());


        switch(tempMenuItem.getId())
        {
            case "yourFirstID":
                //open your first window here
                break;
            case "yourSecondID":
                //open your second window here
                break;
        }
    } 
    catch (IOException ex) 
    {
         //catch errors here
    }
}]]></Answer>
<Answer><![CDATA[public class MyController {

    @FXML
    private void openCustomersWindow() {
        openWindow("/path/to/customers.fxml");
    }

    @FXML
    private void openOrdersWindow() {
        openWindow("/path/to/orders.fxml");
    }

    // ...

    private void openWindow(String resource) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(resource));
            Scene scene = new Scene(loader.load());
            Stage newWindow = new Stage();
            newWindow.setScene(scene);
            newWindow.show();
        } catch (Exception exc) {
            // handle errors....
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41724666" questionTitle="Java: Print table of data">
<Answer><![CDATA[FileInputStream pdfStream;
try {
   pdfStream = new FileInputStream("file.pdf");
} catch (FileNotFoundException ffne) {
   ffne.printStackTrace();
}
if (pdfStream == null) {
    return;
}

DocFlavor pdfInFormat = DocFlavor.INPUT_STREAM.PDF;
Doc myDoc = new SimpleDoc(pdfStream, pdfInFormat, null);  
PrintRequestAttributeSet aset = 
        new HashPrintRequestAttributeSet();
PrintService service = 
  PrintServiceLookup.lookupDefaultPrintService(psInFormat, aset);
if (service != null) {
   DocPrintJob job = service.createPrintJob();
   try {
        job.print(myDoc, aset);
   } catch (PrintException pe) {
        pe.printStackTrace();
   }
}]]></Answer>
<Answer><![CDATA[try {
        byte[] pdfData = createLogDocument(items);

        if (pdfData.length != 0) {

            DocFlavor pdfInFormat = DocFlavor.BYTE_ARRAY.PDF;

            Doc myDoc = new SimpleDoc(pdfData, pdfInFormat, null);

            PrintRequestAttributeSet set = new HashPrintRequestAttributeSet();

            PrintService[] services = PrintServiceLookup.lookupPrintServices(pdfInFormat, set);

            if (services.length > 0) {
                PrintService service = ServiceUI.printDialog(null, 50, 50, services, services[0], null, set);

                if (service != null) {
                    DocPrintJob job = service.createPrintJob();
                    job.print(myDoc, set);
                }

            }
        }

    } catch (DocumentException e) {
        e.printStackTrace();
    } catch (PrintException e) {
        e.printStackTrace();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41686444" questionTitle="Use of regular expressions and iteration index in Java 8 streams">
<Answer><![CDATA[import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TestStream {
    public void main(String[] argc) throws IOException{
        Stream<String> lineStream = streamFile("testFile.txt");  // Stream Input text
        List<String> transactionList = new ArrayList<>(); // Prepare result list
        Map<Boolean, List<String>> transactionstream = lineStream.collect(Collectors.partitioningBy(s -> s.matches("^[0-3]?[0-9]/[0-3]?[0-9]/(?:[0-9]{2})?[0-9]{2}\\s")));
        transactionstream.forEach((success, transactionContent) -> {
            if(!success)
                return;
            String concat = transactionContent.stream().collect(Collectors.joining());
            transactionList.add(concat);
        });
    }

    public Stream<String> streamFile(final String filename) throws IOException {
        Stream<String> stream = Files.lines(Paths.get(filename));
        return stream;
    }
}]]></Answer>
<Answer><![CDATA[static ArrayList<String> printMatchers(){
        String fileName = "/Users/dhananjayraparla/Desktop/GitHub/Groovy/BankStatementViewer/src/main/resources/Statements.txt";
        Pattern date = Pattern.compile("^[0-9][0-9]/[0-9][0-9]/[0-9][0-9]");
        Pattern amount = Pattern.compile("-?\\d{0,3},?\\d{0,3}\\.\\d{2}$");
        //read file into stream, try-with-resources
        String previous=new String();
        List<String> lines = null;
        try {
            lines = Files.readAllLines(Paths.get(fileName));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        ArrayList<String> filteredList = new ArrayList<>();
        for (int i = 0; i < lines.size(); i++) {

            Matcher dt = date.matcher(lines.get(i));
            Matcher amt = amount.matcher(lines.get(i));

            if ( dt.find() && amt.find() ){
                    System.out.println( lines.get(i) );
                    filteredList.add( lines.get(i) );
            } 
            else if (i<lines.size()-2) {
                String temp1 = lines.get(i)+" "+lines.get(i+1);
                Matcher dt2 = date.matcher(temp1);
                Matcher amt2 = amount.matcher(temp1);

                String temp2 = lines.get(i)+" "+lines.get(i+1)+" "+lines.get(i+2);
                Matcher dt3 = date.matcher(temp2);
                Matcher amt3 = amount.matcher(temp2);
                if (dt2.find() && amt2.find()) {
                    System.out.println(temp1);
                    filteredList.add(temp1);
                } else if (dt3.find() && amt3.find()) {
                    System.out.println(temp2);
                    filteredList.add(temp2);
                } 
            }
        }
        try {
            Path out = Paths.get("/Users/dhananjayraparla/Desktop/GitHub/Groovy/BankStatementViewer/src/main/resources/filteredTransactionList.txt");
            Files.write(out,filteredList,Charset.defaultCharset());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return filteredList;

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41622027" questionTitle="Performance for Java Stream.concat VS Collection.addAll">
<Answer><![CDATA[import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamBenchmark {
    private Set<String> s1;
    private Set<String> s2;

    private long createStreamsTime;
    private long concatCollectTime;
    private long collectAddAllTime;

    public void setUp(final int howMany, final int distinct) {
        final Set<String> valuesForA = new HashSet<>(howMany);
        final Set<String> valuesForB = new HashSet<>(howMany);
        if (-1 == distinct) {
            for (int i = 0; i < howMany; ++i) {
                valuesForA.add(Integer.toString(i));
                valuesForB.add(Integer.toString(howMany + i));
            }
        } else {
            Random r = new Random();
            for (int i = 0; i < howMany; ++i) {
                int j = r.nextInt(distinct);
                valuesForA.add(Integer.toString(i));
                valuesForB.add(Integer.toString(distinct + j));
            }
        }
        s1 = valuesForA;
        s2 = valuesForB;
    }

    public void run(final int streamLength, final int distinctElements, final int times, boolean discard) {
        long startTime;
        setUp(streamLength, distinctElements);
        createStreamsTime = 0l;
        concatCollectTime = 0l;
        collectAddAllTime = 0l;
        for (int r = 0; r < times; r++) {
            startTime = System.nanoTime();
            Stream<String> st1 = s1.stream();
            Stream<String> st2 = s2.stream();
            createStreamsTime += System.nanoTime() - startTime;
            startTime = System.nanoTime();
            Set<String> set1 = Stream.concat(st1, st2).collect(Collectors.toSet());
            concatCollectTime += System.nanoTime() - startTime;
            st1 = s1.stream();
            st2 = s2.stream();
            startTime = System.nanoTime();
            Set<String> set2 = st1.collect(Collectors.toSet());
            set2.addAll(st2.collect(Collectors.toSet()));
            collectAddAllTime += System.nanoTime() - startTime;
        }
        if (!discard) {
            // System.out.println("Create streams "+streamLength+" elements,
            // "+distinctElements+" distinct: "+createStreamsTime+" nanos");
            System.out.println("Concat-collect " + streamLength + " elements, " + (distinctElements == -1 ? "all" : String.valueOf(100 * distinctElements / streamLength) + "%") + " distinct: " + concatCollectTime + " nanos");
            System.out.println("Collect-addAll " + streamLength + " elements, " + (distinctElements == -1 ? "all" : String.valueOf(100 * distinctElements / streamLength) + "%") + " distinct: " + collectAddAllTime + " nanos");
            System.out.println("");
        }
    }

    public static void main(String args[]) {
        StreamBenchmark test = new StreamBenchmark();
        final int times = 5;
        test.run(100000, -1, 1, true);
        test.run(10000, -1, times, false);
        test.run(100000, -1, times, false);
        test.run(1000000, -1, times, false);
        test.run(5000000, -1, times, false);
        test.run(10000, 5000, times, false);
        test.run(100000, 50000, times, false);
        test.run(1000000, 500000, times, false);
        test.run(5000000, 2500000, times, false);
        test.run(10000, 1000, times, false);
        test.run(100000, 10000, times, false);
        test.run(1000000, 100000, times, false);
        test.run(5000000, 500000, times, false);
        test.run(10000, 100, times, false);
        test.run(100000, 1000, times, false);
        test.run(1000000, 10000, times, false);
        test.run(5000000, 50000, times, false);
    }
}]]></Answer>
<Answer><![CDATA[package stackoverflow;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.infra.Blackhole;

@State(Scope.Benchmark)
@Warmup(iterations = 2)
@Fork(1)
@Measurement(iterations = 10)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@BenchmarkMode({ Mode.AverageTime})
public class StreamBenchmark {
  private Set<String> s1;
  private Set<String> s2;

  @Setup
  public void setUp() {
    final Set<String> valuesForA = new HashSet<>();
    final Set<String> valuesForB = new HashSet<>();
    for (int i = 0; i < 1000; ++i) {
      valuesForA.add(Integer.toString(i));
      valuesForB.add(Integer.toString(1000 + i));
    }
    s1 = valuesForA;
    s2 = valuesForB;
  }

  @Benchmark
  public void stream_concat_then_collect_using_toSet(final Blackhole blackhole) {
    final Set<String> set = Stream.concat(s1.stream(), s2.stream()).collect(Collectors.toSet());
    blackhole.consume(set);
  }

  @Benchmark
  public void s1_collect_using_toSet_then_addAll_using_toSet(final Blackhole blackhole) {
    final Set<String> set = s1.stream().collect(Collectors.toSet());
    set.addAll(s2.stream().collect(Collectors.toSet()));
    blackhole.consume(set);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41575933" questionTitle="JavaFX Fire TextField ActionEvent manually | programmatically">
<Answer><![CDATA[public class PersonEditor {

     private TextField firstNameTextField ;
     private TextField lastNameTextField ;
     private TextField emailTextField ;

     private Button okButton ;


     public PersonEditor(Person person) {

         // create controls, do layout, etc etc...

         // map textfields to an action on the person:
         Map<TextField, Consumer<String>> actions = new HashMap<>();
         actions.put(firstNameTextField, person::setFirstName);             
         actions.put(lastNameTextField, person::setLastName);             
         actions.put(emailTextField, person::setEmail);

         // set individual event handlers on each text field:
         actions.entrySet().forEach(entry -> {
             TextField tf = entry.getKey();
             tf.setOnAction(e -> entry.getValue().accept(tf.getText()));
         });

         // event handler for button:
         okButton.setOnAction(e -> {
             // invoke action on each text field:
             actions.entrySet().forEach(entry -> entry.getValue().accept(entry.getKey().getText()));
             // do other stuff if needed...
         }

    }

}]]></Answer>
<Answer><![CDATA[public class Controller {

    @FXML private VBox root;
    private List<TextField> all = new ArrayList<>();

    public Controller(){}
    @FXML
    public void initialize(){
        EventHandler<ActionEvent> customEvent = e -> {
            if(e.getSource().getClass() == Button.class){
                all.forEach(t -> t.fireEvent(new ActionEvent()));
            }else {
                System.out.println(((TextField) e.getSource()).getText());
            }
        };

        for(int i=0; i < 10; i++){
            TextField tf = new TextField(Integer.toString(i));
            tf.setOnAction(customEvent);
            all.add(tf);
            root.getChildren().add(tf);
        }
        Button btn = new Button();
        btn.setOnAction(customEvent);
        root.getChildren().add(btn);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41567871" questionTitle="JavaFX - ListView doesnot populated data from fxml">
<Answer><![CDATA[package customlistview;

    import java.io.IOException;
    import java.net.URL;
    import java.util.ResourceBundle;
    import java.util.logging.Level;
    import java.util.logging.Logger;
    import javafx.collections.FXCollections;
    import javafx.collections.ObservableList;
    import javafx.event.ActionEvent;
    import javafx.fxml.FXML;
    import javafx.fxml.FXMLLoader;
    import javafx.fxml.Initializable;
    import javafx.scene.control.ListCell;
    import javafx.scene.control.ListView;
    import javafx.util.Callback;
    import javafx.scene.layout.Pane;

    /**
     *
     * @author hemant-pc
     */
    public class ListViewExample implements Initializable {

        @FXML
        private ListView listView;

        @FXML
        Pane pane;

        public ListViewExample() {
        }

        @Override
        public void initialize(URL url, ResourceBundle rb) {
            try {
                ObservableList<Pane> list = FXCollections.observableArrayList();
                for (int i = 1; i <= 10; i++) {
                    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("ListItem.fxml"));
                    Pane listItem = fxmlLoader.load();
                    ListItemController controller = fxmlLoader.getController();
                    controller.setText("List Item " + i);
                    list.add(listItem);
                }
                listView.getItems().addAll(list);
            } catch (IOException ex) {
                Logger.getLogger(ListViewExample.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }]]></Answer>
<Answer><![CDATA[public class Data extends HBox {

    public Data() {
        // load fxml here
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Tracker/UI/listCellItem.fxml"));
        loader.setController(this);
        loader.setRoot(this);
        try {
            loader.load();
        } catch (IOException ex) {
            throw new IllegalStateException(ex);
        }
    }

    @FXML
    private ImageView imageListCell;

    @FXML
    private Label labelListCell;

    public void setInfo(String string) {
        labelListCell.setText(string);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41550272" questionTitle="JavaFX + Spring (JDBC &amp; @SpringBootApplication &amp; @Autowired &amp; @Transactional)">
<Answer><![CDATA[.   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.4.3.RELEASE)

2017-01-10 09:41:48.902  INFO 1860 --- [JavaFX-Launcher] o.s.boot.SpringApplication               : Starting application on alwihasolaptop with PID 1860 (started by alwi in C:\alwi\Workspace_SPZ\GCodeClient)
2017-01-10 09:41:48.905  INFO 1860 --- [JavaFX-Launcher] o.s.boot.SpringApplication               : No active profile set, falling back to default profiles: default
2017-01-10 09:41:48.965  INFO 1860 --- [JavaFX-Launcher] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@18660f3: startup date [Tue Jan 10 09:41:48 CET 2017]; root of context hierarchy
2017-01-10 09:41:49.917  INFO 1860 --- [JavaFX-Launcher] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-01-10 09:41:49.927  INFO 1860 --- [JavaFX-Launcher] o.s.boot.SpringApplication               : Started application in 1.384 seconds (JVM running for 1.969)
Created entry id=73
Created entry id=74
Created entry id=75
Created entry id=76
Created entry id=77
Created entry id=78
java.lang.RuntimeException: Testing data upload procedure break.
    at tmp.dao.EntryDao.db_transaction_test(EntryDao.java:53)
    at tmp.dao.EntryDao$$FastClassBySpringCGLIB$$a857b433.invoke(<generated>)
    at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
    at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:721)
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
    at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656)
    at tmp.dao.EntryDao$$EnhancerBySpringCGLIB$$84e8651e.db_transaction_test(<generated>)
    at tmp.SpringTransactional.start(SpringTransactional.java:45)
    at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$162(LauncherImpl.java:863)
    at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$175(PlatformImpl.java:326)
    at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
    at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
    at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
    at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
    at java.lang.Thread.run(Thread.java:745)
Created entry id=73
Created entry id=74
Created entry id=75
Created entry id=76
Created entry id=77
Created entry id=78
2017-01-10 09:41:50.545  INFO 1860 --- [lication Thread] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@18660f3: startup date [Tue Jan 10 09:41:48 CET 2017]; root of context hierarchy
java.lang.RuntimeException: Testing data upload procedure break.
    at tmp.SpringTransactional.db_transaction_test(SpringTransactional.java:71)
    at tmp.SpringTransactional.start(SpringTransactional.java:52)
    at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$162(LauncherImpl.java:863)
    at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$175(PlatformImpl.java:326)
    at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
    at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
    at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
    at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
    at java.lang.Thread.run(Thread.java:745)
2017-01-10 09:41:50.546  INFO 1860 --- [lication Thread] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown

Process finished with exit code 0]]></Answer>
<Answer><![CDATA[@SpringBootApplication
public class SpringTransactional extends Application {
    private Pane viewPane;

    private ConfigurableApplicationContext springContext;

    @Autowired
    private DAO dao ;

    // ...

     @Override
    public void start(Stage primaryStage) {
        viewPane = assembleView(primaryStage);

        try {
            dao.db_transaction_test();
        } catch (RuntimeException e) {
            e.printStackTrace();
        }

        Platform.exit();
    }  

    // ...
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41517073" questionTitle="How to modify the attributes of a single cell on a tableview">
<Answer><![CDATA[import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javafx.application.Application;
import javafx.beans.Observable;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.BooleanBinding;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener.Change;
import javafx.collections.ObservableList;
import javafx.collections.ObservableSet;
import javafx.css.PseudoClass;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.stage.Stage;
import javafx.util.StringConverter;

public class HighlightDuplicateTableCells extends Application {

    // create an observable list that fires events if the dataProperty of any elements change:

    private final ObservableList<Item> items = 
            FXCollections.observableArrayList(item -> new Observable[]{item.dataProperty()});

    // collection of strings that are duplicated in the data properties of all the items:

    private final ObservableSet<String> duplicateData = FXCollections.observableSet();

    private static final PseudoClass DUPLICATE_PC = PseudoClass.getPseudoClass("duplicate");

    private final StringConverter<String> identityStringConverter = new StringConverter<String>() {

        @Override
        public String toString(String object) {
            return object;
        }

        @Override
        public String fromString(String string) {
            return string;
        }

    };

    @Override
    public void start(Stage primaryStage) {

        // listener to maintain collection of duplicates:
        items.addListener((Change<? extends Item> change) -> updateDuplicateData());

        TableView<Item> table = new TableView<>();
        table.setEditable(true);
        table.setItems(items);

        TableColumn<Item, Number> idColumn = new TableColumn<>("Id");
        idColumn.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()));

        TableColumn<Item, String> dataColumn = new TableColumn<>("Data");
        dataColumn.setCellValueFactory(cellData -> cellData.getValue().dataProperty());

        dataColumn.setCellFactory(tc -> {

            TextFieldTableCell<Item, String> cell = new TextFieldTableCell<Item, String>(identityStringConverter) {

                // boolean binding that indicates if the current item is contained in the duplicateData set:
                private BooleanBinding duplicate = Bindings.createBooleanBinding(
                        () -> duplicateData.contains(getItem()),
                        duplicateData, itemProperty());

                // anonymous constructor just updates CSS pseudoclass if above binding changes:
                {
                    duplicate.addListener((obs, wasDuplicate, isNowDuplicate) -> 
                        pseudoClassStateChanged(DUPLICATE_PC, isNowDuplicate));
                }
            };

            return cell ;
        });

        table.getColumns().add(idColumn);
        table.getColumns().add(dataColumn);

        // note best to minimize changes to items.
        // creating a temp list and using items.setAll(...) achieves this:

        List<Item> tmp = new ArrayList<>();
        for (int i = 1 ; i <= 70; i++) {
            char c = (char)('@' + (i % 60));
            String data = Character.toString(c) ;
            tmp.add(new Item(i, data));
        }

        items.setAll(tmp);

        Scene scene = new Scene(table, 600, 600);
        scene.getStylesheets().add("duplicate-cell-example.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void updateDuplicateData() {

        // TODO: may not be most efficient implementation

        // all data:
        List<String> data = items.stream().map(Item::getData).collect(Collectors.toList());
        // unique data:
        Set<String> uniqueData = new HashSet<>(data);
        // remove unique values from data:
        uniqueData.forEach(data::remove);
        // remaining values are duplicates: replace contents of duplicateData with these:
        duplicateData.clear();
        duplicateData.addAll(data);
    }

    public static class Item {
        private final int id ;
        private final StringProperty data = new SimpleStringProperty();

        public Item(int id, String data) {
            this.id = id ;
            setData(data);
        }

        public final StringProperty dataProperty() {
            return this.data;
        }


        public final String getData() {
            return this.dataProperty().get();
        }


        public final void setData(final String data) {
            this.dataProperty().set(data);
        }

        public int getId() {
            return id ;
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[private final ObservableMap<String, Integer> valueOccuranceCounts = FXCollections.observableHashMap();

private final ChangeListener<String> changeListener = (observable, oldValue, newValue) -> {
    valueOccuranceCounts.computeIfPresent(oldValue, REMOVE_UPDATER);
    valueOccuranceCounts.merge(newValue, 1, ADD_MERGER);
};

private static final BiFunction<Integer, Integer, Integer> ADD_MERGER = (oldValue, newValue) -> oldValue + 1;
private static final BiFunction<String, Integer, Integer> REMOVE_UPDATER = (key, value) -> {
    int newCount = value - 1;
    // remove mapping, if the value would become 0
    return newCount == 0 ? null : newCount;
};

private final ListChangeListener<Item> listChangeListener = (ListChangeListener.Change<? extends Item> c) -> {
    while (c.next()) {
        if (c.wasRemoved()) {
            for (Item r : c.getRemoved()) {
                // decrease count and remove listener
                this.valueOccuranceCounts.computeIfPresent(r.getData(), REMOVE_UPDATER);
                r.dataProperty().removeListener(this.changeListener);
            }
        }
        if (c.wasAdded()) {
            for (Item a : c.getAddedSubList()) {
                // increase count and add listener
                this.valueOccuranceCounts.merge(a.getData(), 1, ADD_MERGER);
                a.dataProperty().addListener(this.changeListener);
            }
        }
    }
};

private final ObservableList<Item> items;

{
    items = FXCollections.observableArrayList();
    items.addListener(listChangeListener);
}

private static final PseudoClass DUPLICATE = PseudoClass.getPseudoClass("duplicate");
private static final String FIRST_COLUMN_CLASS = "first-column";

@Override
public void start(Stage primaryStage) throws Exception {
    TableView<Item> tableView = new TableView<>(items);
//    tableView.getSelectionModel().setCellSelectionEnabled(true);
    tableView.setEditable(true);

    TableColumn<Item, String> column = new TableColumn<>("data");
    column.setCellValueFactory(cellData -> cellData.getValue().dataProperty());

    column.setCellFactory(col -> new TextFieldTableCell<Item, String>() {

        // boolean binding that indicates if the current item is contained in the duplicateData set:
        private final BooleanBinding duplicate = Bindings.createBooleanBinding(
                () -> valueOccuranceCounts.getOrDefault(getItem(), 1) >= 2,
                valueOccuranceCounts, itemProperty());

        // anonymous constructor just updates CSS pseudoclass if above binding changes:
        {
            duplicate.addListener((observable, oldValue, newValue)
                    -> pseudoClassStateChanged(DUPLICATE, newValue));
        }
    });

    TableColumn<Item, Number> idColumn = new TableColumn<>("id");
    idColumn.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()));

    tableView.getColumns().addAll(idColumn, column);
    tableView.getColumns().addListener((Observable observable) -> {
        // keep style class marking the cells of the column as
        // belonging to the first column up to date 
        if (tableView.getColumns().get(0) == column) {
            if (!column.getStyleClass().contains(FIRST_COLUMN_CLASS)) {
                column.getStyleClass().add(FIRST_COLUMN_CLASS);
            }
        } else {
            column.getStyleClass().remove(FIRST_COLUMN_CLASS);
        }
    });

    // note best to minimize changes to items.
    // creating a temp list and using items.setAll(...) achieves this:
    final int count = 70;
    List<Item> tmp = Arrays.asList(new Item[count]);
    for (int i = 0; i < count; i++) {
        tmp.set(i, new Item(Integer.toString(i % 60)));
    }

    items.setAll(tmp);

    Scene scene = new Scene(tableView);
    scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
    primaryStage.setScene(scene);
    primaryStage.show();
}

public static class Item {

    private static int counter = 0;

    private final StringProperty data;
    private final int id = counter++;

    public Item(String data) {
        this.data = new SimpleStringProperty(data);
    }

    public final StringProperty dataProperty() {
        return this.data;
    }

    public final String getData() {
        return this.dataProperty().get();
    }

    public final void setData(final String data) {
        this.dataProperty().set(data);
    }

    public int getId() {
        return id ;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41513553" questionTitle="JavaFX : TextField max and min value by listener">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.stage.Stage;

public class Main5 extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        TextField textField = new TextField();
        textField.setTextFormatter(new TextFormatter<Integer>(change -> {
            if (!change.getText().isEmpty()) {
                return change.getText().matches("\\d+") && change.getControlNewText().length() <= 5 ? change : null;
            }

            return change;
        }));

        primaryStage.setScene(new Scene(textField));
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[public class RestrictedNumberFieldDemo extends Application {

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage primaryStage) {
        TextField numField = new TextField();
        numField.setTextFormatter(new TextFormatter<Integer>(change -> {
            // Deletion should always be possible.
            if (change.isDeleted()) {
                return change;
            }

            // How would the text look like after the change?
            String txt = change.getControlNewText();

            // There shouldn't be leading zeros.
            if (txt.matches("0\\d+")) {
                return null;
            }

            // Try parsing and check if the result is in [0, 64].
            try {
                int n = Integer.parseInt(txt);
                return 0 <= n && n <= 64 ? change : null;
            } catch (NumberFormatException e) {
                return null;
            }
        }));

        primaryStage.setScene(new Scene(numField));
        primaryStage.show();
    }

}]]></Answer>
<Answer><![CDATA[txtSeuil.textProperty().addListener(new ChangeListener<String>() {

    private boolean validating = false;

    @Override
    public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
        if (!validating) {
            validating = true;
            String newText = newValue;
            boolean modify = false;
            if (!newValue.matches("\\d*")) {
                newText = newValue.replaceAll("[^\\d*{1,2}]", "");
                modify = true;
            }
            if (newText.length() > maxLength || newText.length() < minLength) {
                newText = newText.substring(0, maxLength);
                modify = true;
            }
            if (modify) {
                txtSeuil.setText(newText);
            }
            validating = false;
        }
    }
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41464473" questionTitle="BiFunction&lt;&gt; with Enum">
<Answer><![CDATA[enum Animal implements BiFunction<String, Object, String> {
    CAT,
    DOG,
    BEAR {
        @Override
        public String apply(String s, Object o) {
            return "This is a Bear!!!";
        }
    };

    @Override
    public String apply(String s, Object o) {
        return "(" + name() + ":" + s + o.toString() + ")";
    }
}

public void test() {
    for (Animal animal : Animal.values()) {
        System.out.println(animal.apply("hello", "Hello"));
    }
}]]></Answer>
<Answer><![CDATA[enum Animal implements BiFunction<String, Object, String> {
    CAT,
    DOG,
    BEAR((s, o) -> "This is a Bear!!!");

    private final BiFunction<String, Object, String> function;

    private Animal(final BiFunction<String, Object, String> function) {
        this.function = function;
    }

    private Animal() {
        super((s, o) -> "(" + name() + ":" + s + o.toString() + ")");
    }
}

public void test() {
    Animal
        .values()
        .stream(animal -> animal.apply("hello", "Hello"))
        .forEach(System.out::println)
    ;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41462622" questionTitle="Keep Tooltip open as long as mouse is over it">
<Answer><![CDATA[public class DelayedTooltip extends Tooltip {

    private int duration = 0;
    private BooleanProperty isHoveringPrimary = new SimpleBooleanProperty(false);
    private BooleanProperty isHoveringSecondary = new SimpleBooleanProperty(false);

    public void setDuration(int d) {
        duration = d;
    }

    public BooleanProperty isHoveringPrimaryProperty()
    {
        return isHoveringPrimary;
    }

    public BooleanProperty isHoveringSecondaryProperty()
    {
        return isHoveringSecondary;
    }

    public void isHoveringTargetPrimary(Node node){
        node.setOnMouseEntered(e -> isHoveringPrimary.set(true));
        node.setOnMouseExited(e -> isHoveringPrimary.set(false));
    }

       //Usually you will use the tooltip here so enter tooltip.getGraphic() for the node.
    public void isHoveringTargetSecondary(Node node){
        node.setOnMouseEntered(e -> isHoveringTooltip.set(true)):
        node.setOnMouseExited(e -> isHoveringTooltip.set(false));
    }

    @Override
    public void hide() {
        if(isHoveringPrimary.get()==true || isHoveringTooltip.get()==true)
        {
            Timeline timeline = new Timeline();
            KeyFrame key = new KeyFrame(Duration.millis(duration));
            timeline.getKeyFrames().add(key);
            timeline.setOnFinished(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent t) {
                    DelayedTooltip.super.hide();
                }
            });
            timeline.play();
        }
        else
        {
            DelayedTooltip.super.hide();
        }
    }
}]]></Answer>
<Answer><![CDATA[public class HoveringTooltip extends Tooltip {

    private Timer timer = new Timer();
    private Map<Object, Boolean> mapHoveringTarget2Hovering = new ConcurrentHashMap<>();
    private final int duration;

    public HoveringTooltip(int duration) {
        super.setAutoHide(false);
        this.duration = duration;
    }

    public void addHoveringTarget(Node object) {

        mapHoveringTarget2Hovering.put(object, false);
        object.setOnMouseEntered(e -> {
            onMouseEntered(object);
        });
        object.setOnMouseExited(e -> {
            onMouseExited(object);
        });
    }

    public void addHoveringTarget(Scene object) {

        mapHoveringTarget2Hovering.put(object, false);
        object.setOnMouseEntered(e -> {
            onMouseEntered(object);
        });
        object.setOnMouseExited(e -> {
            onMouseExited(object);
        });
    }

    @Override
    public void hide() {

        // super.hide();
    }

    public boolean isHovering() {

        return isHoveringProperty().get();
    }

    public BooleanProperty isHoveringProperty() {

        synchronized(mapHoveringTarget2Hovering) {
            for(Entry<Object, Boolean> e : mapHoveringTarget2Hovering.entrySet()) {
                if(e.getValue()) {
                    // if one hovering target is hovering, return true
                    return new ReadOnlyBooleanWrapper(true);
                }
            }
            // no hovering on any target, return false
            return new ReadOnlyBooleanWrapper(false);
        }
    }

    private synchronized void onMouseEntered(Object object) {

        // System.err.println("Mouse entered for " + object + ", canelling timer");
        // stop a potentially running hide timer
        timer.cancel();
        mapHoveringTarget2Hovering.put(object, true);
    }

    private synchronized void onMouseExited(Object object) {

        // System.err.println("Mouse exit for " + object + ", starting timer");
        mapHoveringTarget2Hovering.put(object, false);
        startTimer();
    }

    private void startTimer() {

        timer.cancel();
        timer = new Timer();
        timer.schedule(new TimerTask() {

            @Override
            public void run() {

                Platform.runLater(new Runnable() {

                    @Override
                    public void run() {

                        if(!isHovering())
                            HoveringTooltip.super.hide();
                    }
                });
            }
        }, duration);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.scene.control.Tooltip;
import javafx.util.Duration;

import java.lang.reflect.Field;

/**
 * @author rdeardorff
 */
public class TooltipDelay {

    public static void hackTooltipActivationTimer( Tooltip tooltip, int delay ) {
        hackTooltipTiming( tooltip, delay, "activationTimer" );
    }

    public static void hackTooltipHideTimer( Tooltip tooltip, int delay ) {
        hackTooltipTiming( tooltip, delay, "hideTimer" );
    }

    private static void hackTooltipTiming( Tooltip tooltip, int delay, String property ) {
        try {
            Field fieldBehavior = tooltip.getClass().getDeclaredField( "BEHAVIOR" );
            fieldBehavior.setAccessible( true );
            Object objBehavior = fieldBehavior.get( tooltip );

            Field fieldTimer = objBehavior.getClass().getDeclaredField( property );
            fieldTimer.setAccessible( true );
            Timeline objTimer = (Timeline) fieldTimer.get( objBehavior );

            objTimer.getKeyFrames().clear();
            objTimer.getKeyFrames().add( new KeyFrame( new Duration( delay ) ) );
        }
        catch ( Exception e ) {
            e.printStackTrace();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41429711" questionTitle="JavaFX continuous form dynamically add new row with content in gridpane">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Main extends Application {
    public static void main(String[] args) {
        Application.launch(args);
    }

    private ObservableList<Car> cars = FXCollections.observableArrayList();

    @Override
    public void start(Stage primaryStage) {

        Car initialCar = new Car(null,null);

        cars.add(initialCar);

        ListView<Car> carsListView = new ListView<>();
        carsListView.setCellFactory(c -> new CarListCell());
        carsListView.setItems(cars);

        StackPane root = new StackPane();
        root.getChildren().addAll(carsListView, new Button("Save"));

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Cars list view");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private class CarListCell extends ListCell<Car> {

        private HBox content = new HBox();
        private ChoiceBox<CAR_TYPE> cb_car = new ChoiceBox<>();
        private ChoiceBox<CAR_COLOR> cb_color = new ChoiceBox<>();
        private Button add = new Button("+");
        private Button sub = new Button("-");

        public CarListCell() {

            cb_car.setItems(FXCollections.observableArrayList(CAR_TYPE.values()));
            cb_color.setItems(FXCollections.observableArrayList(CAR_COLOR.values()));

            HBox.setHgrow(cb_car, Priority.ALWAYS);
            HBox.setHgrow(cb_color, Priority.ALWAYS);

            content.getChildren().addAll(cb_car, cb_color, add, sub);
            content.setSpacing(10);
            setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            setGraphic(content);
        }

        @Override
        protected void updateItem(Car item, boolean empty) {
            super.updateItem(item, empty);
            if (item == null || empty) {
                setText(null);
                setGraphic(null);
            } else {
                setGraphic(content);
                cb_car.setValue(item.getType());
                cb_color.setValue(item.getColor());
                add.setOnAction(e -> {
                    Car newCar = new Car(cb_car.getValue(), cb_color.getValue());
                    cars.add(newCar);
                });
                sub.setOnAction(e -> {
                    cars.remove(item);
                });
            }
        }

    }

    private enum CAR_TYPE {
        CAR1, CAR2, CAR3;
    }

    private enum CAR_COLOR {
        BLUE, RED, GREEN;
    }

    private class Car {

        private CAR_TYPE type;
        private CAR_COLOR color;

        public Car(CAR_TYPE type, CAR_COLOR color) {
            this.type = type;
            this.color = color;
        }

        public CAR_TYPE getType() {
            return type;
        }

        public void setType(CAR_TYPE type) {
            this.type = type;
        }

        public CAR_COLOR getColor() {
            return color;
        }

        public void setColor(CAR_COLOR color) {
            this.color = color;
        }
    }
}]]></Answer>
<Answer><![CDATA[private ObservableList<Car> cars = FXCollections.observableArrayList();

@Override
public void start(Stage primaryStage) {
    cars.addAll(new Car(CAR_TYPE.CAR1), new Car(CAR_TYPE.CAR2), new Car(CAR_TYPE.CAR3));

    ListView<Car> carsListView = new ListView<>();
    carsListView.setCellFactory(c -> new CarListCell());
    carsListView.setItems(cars);

    StackPane root = new StackPane();
    root.getChildren().add(carsListView);

    Scene scene = new Scene(root, 300, 250);

    primaryStage.setTitle("Cars list view");
    primaryStage.setScene(scene);
    primaryStage.show();
}

private class CarListCell extends ListCell<Car> {

    private HBox content = new HBox();
    private ChoiceBox<CAR_TYPE> cb = new ChoiceBox<>();
    private Button add = new Button("+");
    private Button sub = new Button("-");

    public CarListCell() {
        cb.setItems(FXCollections.observableArrayList(CAR_TYPE.values()));
        cb.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(cb, Priority.ALWAYS);
        content.getChildren().addAll(cb, add, sub);
        content.setSpacing(10);
        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
        setGraphic(content);
    }

    @Override
    protected void updateItem(Car item, boolean empty) {
        super.updateItem(item, empty);
        if (item == null || empty) {
            setText(null);
            setGraphic(null);
        } else {
            setGraphic(content);
            cb.setValue(item.getType());
            add.setOnAction(e -> {
                Car newCar = new Car(cb.getValue());
                cars.add(newCar);
            });
            sub.setOnAction(e -> {
                cars.remove(item);
            });
        }
    }

}

private enum CAR_TYPE {
    CAR1, CAR2, CAR3;
}

private class Car {

    private CAR_TYPE type;

    public Car(CAR_TYPE type) {
        this.type = type;
    }

    public CAR_TYPE getType() {
        return type;
    }

    public void setType(CAR_TYPE type) {
        this.type = type;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41428853" questionTitle="how to fill an object based on a query param string?">
<Answer><![CDATA[String s = "//RULE countryname=Brazil&useryear<=2017&usermonth<=01&userdayofmonth<=15 200\n";
Pattern p = Pattern.compile("((countryname)=([\\w-]+)|(useryear)<=(\\d+)|(usermonth)<=(\\d+)|(userdayofmonth)<=(\\d+))");
Matcher m = p.matcher(s);

while(m.find()){
    String type = "";
    String value = "";
    boolean first = true;

    for(int i = 2; i<=m.groupCount(); i++){
        String group = m.group(i);
        if(first && group != null){
            type = group;
            first = false;
        }else if(group != null){
            value = group;
            break;
        }
    }

    System.out.println("Type: " + type + " Value: " + value);
}]]></Answer>
<Answer><![CDATA[package gnu;

import java.util.*;
import java.util.stream.Collectors;
import java.util.AbstractMap.SimpleImmutableEntry;
import static java.util.stream.Collectors.toList;

public class Main {

    public static void main(String[] strg) {

        String str = "//RULE countryname=Brazil&useryear<=2017&usermonth<=01&userdayofmonth<=15 200";
        str = str.substring(str.indexOf(" ")+1, str.lastIndexOf(" "));
        try {
            ParseParams parse = new ParseParams();
            Map<String, List<String>> map = parse.parseParams(str);
            map.entrySet().forEach(entry -> {
                System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
            });
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }
}

class ParseParams {

    Map<String, List<String>> parseParams(String url) {

        return Arrays.stream(url.split("&"))
                .map(this::splitQueryParameter)
                .collect(Collectors.groupingBy(SimpleImmutableEntry::getKey, LinkedHashMap::new, Collectors.mapping(Map.Entry::getValue, toList())));
    }

    private SimpleImmutableEntry<String, String> splitQueryParameter(String it) {
        final int idx = it.indexOf("=");
        String key = idx > 0 ? it.substring(0, idx) : it;
        String value = idx > 0 && it.length() > idx + 1 ? it.substring(idx + 1) : null;
        if (key.contains("<")) {
            key = key.replace("<", "");
        }
        return new SimpleImmutableEntry<>(key, value);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41412359" questionTitle="Java8 - idiomatic way to process a Stream&lt;Callable&lt;...&gt;&gt; in parallel delivering to a sequential consumer?">
<Answer><![CDATA[public static void main(String[] args) {
            testInfititeCallableStream();
        }
        private static void testInfititeCallableStream() {
            ExecutorService service = Executors.newFixedThreadPool(100);
            Consumer<Future<String>> consumeResult = (Future<String> future)->{
                try {
                    System.out.println(future.get());
                } catch (InterruptedException | ExecutionException  e) {
                    e.printStackTrace();
                } 
            };
        getCallableStream().parallel().map(callable -> service.submit(callable)).forEach(consumeResult);   

        }
    private static Stream<Callable<String>> getCallableStream() {
            Random randomWait = new Random();
            return Stream.<Callable<String>>generate(() -> 
new Callable<String>() {
                public String call() throws Exception {
                    //wait for testing
                    long time = System.currentTimeMillis();
                    TimeUnit.MILLISECONDS.sleep(randomWait.nextInt(5000));
                    return time + ":" +UUID.randomUUID().toString();
                };
            }).limit(Integer.MAX_VALUE);
        }]]></Answer>
<Answer><![CDATA[public class ExecutorServiceSpliterator<T> extends AbstractSpliterator<Future<T>>{
    private final Spliterator<? extends Callable<T>> srcSpliterator;
    private final ExecutorService service;
    private final int chunkSize;
    private final Queue<Future<T>> futures = new LinkedList<>();

    private ExecutorServiceSpliterator(Spliterator<? extends Callable<T>> srcSpliterator) {
        this(srcSpliterator, Executors.newFixedThreadPool(8), 30); //default
    }

    private ExecutorServiceSpliterator(Spliterator<? extends Callable<T>> srcSpliterator, ExecutorService service, int chunkSize) {
        super(Long.MAX_VALUE, srcSpliterator.characteristics() & ~SIZED & ~CONCURRENT);
        this.srcSpliterator = srcSpliterator;
        this.service = service;
        this.chunkSize = chunkSize;
    }

    public static <T> Stream<T> pipeParallelized(Stream<? extends Callable<T>> srcStream){
        return getStream(new ExecutorServiceSpliterator<>(srcStream.spliterator()));
    }

    public static <T> Stream<T> pipeParallelized(Stream<? extends Callable<T>> srcStream, ExecutorService service, int chunkSize){
        return getStream(new ExecutorServiceSpliterator<>(srcStream.spliterator(), service, chunkSize));
    }

    private static <T> Stream<T> getStream(ExecutorServiceSpliterator<T> serviceSpliterator){
        return StreamSupport.stream(serviceSpliterator, false)
            .map(future -> {
                try {               
                    return future.get();
                } catch (InterruptedException | ExecutionException ex) {    
                    throw new RuntimeException(ex);
                }
            }
        );
    }

    @Override
    public boolean tryAdvance(Consumer<? super Future<T>> action) {
        boolean didAdvance = true;
        while((didAdvance = srcSpliterator.tryAdvance(c -> futures.add(service.submit(c))))
                && futures.size() < chunkSize);
        if(!didAdvance){
            service.shutdown();
        }

        if(!futures.isEmpty()){
            Future<T> future = futures.remove();
            action.accept(future);
            return true; 
        }
        return false;
    }           

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41400222" questionTitle="JavaFX WebView html loader not loading images">
<Answer><![CDATA[Platform.runLater( () -> {
        WebView webView = new WebView();
        WebEngine webEngine = webView.getEngine();

        webEngine.getLoadWorker().stateProperty().addListener(new ChangeListener<Worker.State>() {
            public void changed(ObservableValue ov, Worker.State oldState, Worker.State newState) {
                if (newState == Worker.State.SUCCEEDED) {
                     NodeList nodeList = doc.getElementsByTagName("img");
                    for (int i = 0; i < nodeList.getLength(); i++) {
                        HTMLImageElement n = (HTMLImageElement)nodeList.item(i);
                        String path = n.getSrc();
                        if( path.startsWith("file://")) {
                            path = path.substring(7,path.length());
                        } else if( path.startsWith("jar:")) {
                            path = path.substring(4,path.length());
                        }

                        URL m = YOURCLASS.class.getResource(path);
                        if( m != null ) {
                            n.setSrc(m.toExternalForm());
                        }
                    }
                }
            }
        });
        webEngine.load( url );
    }]]></Answer>
<Answer><![CDATA[package htmltest;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class HTMLTest extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        WebView webView = new WebView();
        webView.getEngine().load(getClass().getClassLoader().getResource("htmltest/html/test.html").toExternalForm());
        Scene scene = new Scene(webView, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41379056" questionTitle="How to iterate over every n elements with java?">
<Answer><![CDATA[class SomeClass {

    private final int BUFFER_SIZE = 5;    

    public static void main(String[] args) {
        Map<String, Long> info = new HashMap<>();

        LongStream.range(0, 30).boxed().forEach(i -> info.put("key" + i, i)); // for test

        IntStream.range(0, info.size() / BUFFER_SIZE)
                .boxed()
                .parallel()
                .map(i -> Arrays.copyOfRange(info.keySet().toArray(), BUFFER_SIZE * i, BUFFER_SIZE * (i + 1)))
                .map(Arrays::asList)
                .map(keys -> info.entrySet().stream()
                        .filter(x -> keys.contains(x.getKey()))
                        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)))
                .forEach(SomeClass::calculate);
    }

    public static boolean calculate(Map<String, Long> info) {
        System.out.println("calculation for " + info.toString());
        return true;
    }
}]]></Answer>
<Answer><![CDATA[private static <T> Stream<Stream<T>> createBatchStreams(final Iterator<T> iter, final int maxBatchSize) {
    final Stream.Builder<Stream<T>> resultBuilder = Stream.builder();
    {
        // NOTE: This logic could also be encapsulated in a Collector class
        // in order to make it less imperative style
        Stream.Builder<T> currentBatchBuilder = Stream.builder();
        int currentBatchSize = 0;

        while (iter.hasNext()) {
            final T next = iter.next();
            if (currentBatchSize == maxBatchSize) {
                resultBuilder.add(currentBatchBuilder.build());
                // Start building a new batch
                currentBatchBuilder = Stream.builder();
                currentBatchSize = 0;
            }
            currentBatchBuilder.add(next);
            currentBatchSize++;
        }
        // Check if there is a non-empty Stream to add (e.g. if there was a
        // final batch which was smaller than the others)
        if (currentBatchSize > 0) {
            resultBuilder.add(currentBatchBuilder.build());
        }
    }
    return resultBuilder.build();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41348390" questionTitle="JavaFX and addListener function">
<Answer><![CDATA[private final ObjectProperty<Seat> reservedSeat = new SimpleObjectProperty<>();

Pane theater1(Pane pane, String theater) {
    double x = 20;
    double y = 40;
    int no = 1;


    for (String row : theater.split("\n")) {
        int count = 0;
        for (int c : row.toCharArray()) {
            switch (c) {
                case 'x': 
                    while (count-- > 0) {
                        Seat seat = new Seat(no++);
                        seat.setLayoutX(x); 
                        x+=26;
                        seat.setLayoutY(y);
                        pane.getChildren().add(seat);

                        seat.reservedProperty().addListener((obs, wasReserved, isNowReserved) -> {
                            if (isNowReserved) {
                                if (reservedSeat.get() != null) {
                                    reservedSeat.get().setReserved(false);
                                }
                                reservedSeat.set(seat);
                            } else {
                                reservedSeat.set(null);
                            }
                        });

                    }
                    count = 0;
                    break;
                case '0': case '1': case '2': case '3': case '4': case '5': case'6': case '7': case '8': case '9':
                    count = 10 * count + (c - '0');
                    break;
                case '_':
                    x+=26;
                    break;
                case '.':
                    x+=13;
                    break;
                default: System.out.println("Unknown char: '"+(char)c+"'");
            }
        }
        y+=36;
        x = 20;
    }
    return pane;
}]]></Answer>
<Answer><![CDATA[public class SeatRadioSkin extends SkinBase<RadioButton> {

    private final Circle circle;
    private final Label text;
    private final EventHandler<MouseEvent> downHandler = evt -> {
        if (evt.getButton() == MouseButton.PRIMARY) {
            RadioButton btn = getSkinnable();

            if (!btn.isFocused() && btn.isFocusTraversable()) {
                btn.requestFocus();
            }

            if (!btn.isArmed()) {
                btn.arm();
            }
        }
    };

    private final EventHandler<MouseEvent> upHandler = evt -> {
        if (evt.getButton() == MouseButton.PRIMARY) {
            RadioButton btn = getSkinnable();

            if (btn.isArmed()) {
                btn.disarm();
                btn.fire();
            }
        }
    };

    public SeatRadioSkin(RadioButton button) {
        super(button);
        circle = new Circle();
        circle.setManaged(false);
        circle.getStyleClass().setAll("seat");

        text = new Label();
        text.setManaged(false);
        text.textProperty().bind(button.textProperty());
        text.getStyleClass().setAll("text");

        getChildren().setAll(circle, text);
        button.getStyleClass().setAll("seat-radio-button");
        button.addEventHandler(MouseEvent.MOUSE_PRESSED, downHandler);
        button.addEventHandler(MouseEvent.MOUSE_RELEASED, upHandler);
        // todo: more event handlers
    }

    @Override
    protected void layoutChildren(double contentX, double contentY, double contentWidth, double contentHeight) {
        circle.setRadius(Math.min(contentWidth, contentHeight) / 2);
        layoutInArea(circle, contentX, contentY, contentWidth, contentHeight, -1, HPos.CENTER, VPos.CENTER);
        text.resize(contentWidth, contentHeight);
        layoutInArea(text, contentX, contentY, contentWidth, contentHeight, -1, HPos.CENTER, VPos.CENTER);
    }

    @Override
    public void dispose() {
        text.textProperty().unbind();
        RadioButton btn = getSkinnable();

        btn.removeEventHandler(MouseEvent.MOUSE_PRESSED, downHandler);
        btn.removeEventHandler(MouseEvent.MOUSE_RELEASED, upHandler);

        // todo: remove additional event handlers

        super.dispose();
    }

    private double prefSize(double widthOffset, double heightOffset) {
        RadioButton btn = getSkinnable();
        double w = Math.max(30, btn.getPrefWidth()) + widthOffset;
        double h = Math.max(30, btn.getPrefHeight()) + heightOffset;
        return Math.min(w, h);
    }

    @Override
    protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
        return prefSize(leftInset + rightInset, topInset + bottomInset);
    }

    @Override
    protected double computePrefWidth(double height, double topInset, double rightInset, double bottomInset, double leftInset) {
        return prefSize(leftInset + rightInset, topInset + bottomInset);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41299769" questionTitle="Tornadofx tableview sync two tables">
<Answer><![CDATA[class PersonList : View() {
    val ctrl: PersonController by inject()
    val selectedPerson = PersonModel()

    override val root = vbox {
        tableview(ctrl.persons) {
            column("First Name", Person::firstNameProperty)
            column("Last Name", Person::lastNameProperty)
            columnResizePolicy = SmartResize.POLICY
            bindSelected(selectedPerson)
            subscribe<SyncPersonEvent> { event ->
                if (!items.contains(event.person)) {
                    items.add(event.index, event.person)
                }
                if (selectedItem != event.person) {
                    requestFocus()
                    selectionModel.select(event.person)
                }
            }
        }
        hbox {
            button("Sync") {
                setOnAction {
                    selectedPerson.item?.apply {
                        fire(SyncPersonEvent(this, ctrl.persons.indexOf(this)))
                    }
                }

            }
        }
    }
}]]></Answer>
<Answer><![CDATA[package org.nield.demo.app


import javafx.beans.property.SimpleStringProperty
import javafx.collections.FXCollections
import javafx.collections.ObservableList
import rx.javafx.kt.actionEvents
import rx.javafx.kt.addTo
import rx.javafx.kt.onChangedObservable
import rx.javafx.sources.CompositeObservable
import rx.lang.kotlin.toObservable
import tornadofx.*

class MyApp: App(MainView::class)

class MainView : View() {
    val personList: PersonList by inject()
    val anotherPersonList: AnotherPersonList by inject()

    override val root = hbox {
        this += personList
        this += anotherPersonList
    }
}

class PersonList : View() {

    val ctrl: PersonController by inject()

    override val root = vbox {
        val table = tableview(ctrl.persons) {
            column("First Name", Person::firstNameProperty)
            column("Last Name", Person::lastNameProperty)

            //broadcast selections
            selectionModel.selectedIndices.onChangedObservable()
                    .addTo(ctrl.selectedLeft)

            columnResizePolicy = SmartResize.POLICY
        }
        button("SYNC").actionEvents()
                .flatMap {
                    ctrl.selectedRight.toObservable()
                            .take(1)
                            .flatMap { it.toObservable() }
                }.subscribe {
                    table.selectionModel.select(it)
                }
    }
}

class AnotherPersonList : View() {
    val ctrl: PersonController by inject()

    override val root = vbox {
        val table = tableview(ctrl.newPersons) {
            column("First Name", Person::firstNameProperty)
            column("Last Name", Person::lastNameProperty)

            //broadcast selections
            selectionModel.selectedIndices.onChangedObservable()
                    .addTo(ctrl.selectedRight)


            columnResizePolicy = SmartResize.POLICY
        }

        button("SYNC").actionEvents()
                .flatMap {
                    ctrl.selectedLeft.toObservable()
                            .take(1)
                            .flatMap { it.toObservable() }
                }.subscribe {
                    table.selectionModel.select(it)
                }
    }
}

class Person(firstName: String = "", lastName: String = "") {
    val firstNameProperty = SimpleStringProperty(firstName)
    var firstName by firstNameProperty
    val lastNameProperty = SimpleStringProperty(lastName)
    var lastName by lastNameProperty
}

class PersonController : Controller(){
    val selectedLeft = CompositeObservable<ObservableList<Int>> { it.replay(1).autoConnect().apply { subscribe() } }
    val selectedRight = CompositeObservable<ObservableList<Int>>  { it.replay(1).autoConnect().apply { subscribe() } }


    val persons = FXCollections.observableArrayList<Person>()
    val newPersons = FXCollections.observableArrayList<Person>()

    init {

        persons += Person("Dead", "Stark")
        persons += Person("Tyrion", "Lannister")
        persons += Person("Arya", "Stark")
        persons += Person("Daenerys", "Targaryen")

        newPersons += Person("Ned", "Stark")
        newPersons += Person("Tyrion", "Janitor")
        newPersons += Person("Arya", "Stark")
        newPersons += Person("Taenerys", "Dargaryen")
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41267435" questionTitle="How can I redirect System.in to JavaFX TextField?">
<Answer><![CDATA[public class ToradexSSHCommunicator {

String user;
String password;
String ip;
int port;

InputStream fromChannel;
OutputStream toChannel;

/** logger for error output feed */
private static final Logger LOGGER = Logger.getLogger(ToradexSSHCommunicator.class);

public ToradexSSHCommunicator(String user, String password, String ip, int port) {
    this.user = user;
    this.password = password;
    this.ip = ip;
    this.port = port;
}

public void startup() {
    Session session = null;
    ChannelShell channel = null;
    boolean isConnected = false;

    JSch jsch = new JSch();
    while (!isConnected) {
        try {
            session = jsch.getSession(user, ip, port);

            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");

            LOGGER.info("Establishing Toradex Connection...");
            session.setTimeout(1000);
            session.connect();
            LOGGER.info("Toradex connection established.");

            LOGGER.info("Creating Toradex channel...");
            channel = (ChannelShell) session.openChannel("shell");
            LOGGER.info("Toradex channel created.");

            fromChannel = channel.getInputStream();
            toChannel = channel.getOutputStream();

            channel.connect();
            isConnected = true;

        }
        catch (JSchException e) {
            LOGGER.error("Toradex connection error.....RECONNECTING", e);
            session.disconnect();
        }
        catch (IOException e) {
            LOGGER.error("Toradex connection error.....RECONNECTING", e);
            session.disconnect();
        }
    }

}

public InputStream getFromChannel() {
    return fromChannel;
}

public OutputStream getToChannel() {
    return toChannel;
    }
}]]></Answer>
<Answer><![CDATA[import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class StdInFromTextField extends Application {

    @Override
    public void start(Stage primaryStage) {

        TextField textField = new TextField();

        BlockingQueue<Integer> stdInQueue = new LinkedBlockingQueue<>();

        System.setIn(new InputStream() {

            @Override
            public int read() throws IOException {
                try {
                    int c = stdInQueue.take().intValue();
                    return c;
                } catch (InterruptedException exc) {
                    Thread.currentThread().interrupt();
                    return -1 ;
                }
            }
        });

        textField.setOnAction(e -> {
            for (char c : textField.getText().toCharArray()) {
                stdInQueue.add(new Integer(c));
            }
            stdInQueue.add(new Integer('\n'));
            textField.clear();
        });

        // for testing:
        Thread readThread = new Thread(() -> {
            try {
                int i ;
                while ((i = System.in.read()) != -1) {
                    System.out.print((char)i);
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
        });
        readThread.setDaemon(true);
        readThread.start();

        primaryStage.setScene(new Scene(new StackPane(textField), 300, 120));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41184893" questionTitle="Delete oldest objects from HashMap to reach certain size?">
<Answer><![CDATA[import java.util.LinkedHashMap;
import java.util.Map;

public class RemoveOldHashMap<K, V> {
    private final LinkedHashMap<K, V> map;
    /** Size of this cache in units. Not necessarily the number of elements. */
    private int size;
    private int maxSize;
    private int putCount;
    private int createCount;
    private int evictionCount;
    private int hitCount;
    private int missCount;
    /**
     * @param maxSize for caches that do not override {@link #sizeOf}, this is
     *     the maximum number of entries in the cache. For all other caches,
     *     this is the maximum sum of the sizes of the entries in this cache.
     */
    public RemoveOldHashMap(int maxSize) {
        if (maxSize <= 0) {
            throw new IllegalArgumentException("maxSize <= 0");
        }
        this.maxSize = maxSize;
        this.map = new LinkedHashMap<K, V>(0, 0.75f, false); // false for "interaction order"
    }
    /**
     * Returns the value for {@code key} if it exists in the cache or can be
     * created by {@code #create}. If a value was returned, it is moved to the
     * head of the queue. This returns null if a value is not cached and cannot
     * be created.
     */
    public synchronized final V get(K key) {
        if (key == null) {
            throw new NullPointerException("key == null");
        }

        for (K k : map.keySet()) {
            System.out.println("k = " + k);
        }

        V result = map.get(key);

        for (K k : map.keySet()) {
            System.out.println("k = " + k);
        }

        if (result != null) {
            hitCount++;
            return result;
        }
        missCount++;
        // TODO: release the lock while calling this potentially slow user code
        result = create(key);
        if (result != null) {
            createCount++;
            size += safeSizeOf(key, result);
            map.put(key, result);
            trimToSize(maxSize);
        }
        return result;
    }
    /**
     * Caches {@code value} for {@code key}. The value is moved to the head of
     * the queue.
     *
     * @return the previous value mapped by {@code key}. Although that entry is
     *     no longer cached, it has not been passed to {@link #entryEvicted}.
     */
    public synchronized final V put(K key, V value) {
        if (key == null || value == null) {
            throw new NullPointerException("key == null || value == null");
        }
        putCount++;
        size += safeSizeOf(key, value);
        V previous = map.put(key, value);
        if (previous != null) {
            size -= safeSizeOf(key, previous);
        }
        trimToSize(maxSize);
        return previous;
    }
    private void trimToSize(int maxSize) {
        while (size > maxSize && !map.isEmpty()) {
            Map.Entry<K, V> toEvict = map.entrySet().iterator().next();
            if (toEvict == null) {
                break; // map is empty; if size is not 0 then throw an error below
            }
            K key = toEvict.getKey();
            V value = toEvict.getValue();
            map.remove(key);
            size -= safeSizeOf(key, value);
            evictionCount++;
            // TODO: release the lock while calling this potentially slow user code
            entryEvicted(key, value);
        }
        if (size < 0 || (map.isEmpty() && size != 0)) {
            throw new IllegalStateException(getClass().getName()
                    + ".sizeOf() is reporting inconsistent results!");
        }
    }
    /**
     * Removes the entry for {@code key} if it exists.
     *
     * @return the previous value mapped by {@code key}. Although that entry is
     *     no longer cached, it has not been passed to {@link #entryEvicted}.
     */
    public synchronized final V remove(K key) {
        if (key == null) {
            throw new NullPointerException("key == null");
        }
        V previous = map.remove(key);
        if (previous != null) {
            size -= safeSizeOf(key, previous);
        }
        return previous;
    }
    /**
     * Called for entries that have reached the tail of the least recently used
     * queue and are be removed. The default implementation does nothing.
     */
    protected void entryEvicted(K key, V value) {}
    /**
     * Called after a cache miss to compute a value for the corresponding key.
     * Returns the computed value or null if no value can be computed. The
     * default implementation returns null.
     */
    protected V create(K key) {
        return null;
    }
    private int safeSizeOf(K key, V value) {
        int result = sizeOf(key, value);
        if (result < 0) {
            throw new IllegalStateException("Negative size: " + key + "=" + value);
        }
        return result;
    }
    /**
     * Returns the size of the entry for {@code key} and {@code value} in
     * user-defined units.  The default implementation returns 1 so that size
     * is the number of entries and max size is the maximum number of entries.
     *
     * <p>An entry's size must not change while it is in the cache.
     */
    protected int sizeOf(K key, V value) {
        return 1;
    }
    /**
     * Clear the cache, calling {@link #entryEvicted} on each removed entry.
     */
    public synchronized final void evictAll() {
        trimToSize(-1); // -1 will evict 0-sized elements
    }
    /**
     * For caches that do not override {@link #sizeOf}, this returns the number
     * of entries in the cache. For all other caches, this returns the sum of
     * the sizes of the entries in this cache.
     */
    public synchronized final int size() {
        return size;
    }
    /**
     * For caches that do not override {@link #sizeOf}, this returns the maximum
     * number of entries in the cache. For all other caches, this returns the
     * maximum sum of the sizes of the entries in this cache.
     */
    public synchronized final int maxSize() {
        return maxSize;
    }
    /**
     * Returns the number of times {@link #get} returned a value.
     */
    public synchronized final int hitCount() {
        return hitCount;
    }
    /**
     * Returns the number of times {@link #get} returned null or required a new
     * value to be created.
     */
    public synchronized final int missCount() {
        return missCount;
    }
    /**
     * Returns the number of times {@link #create(Object)} returned a value.
     */
    public synchronized final int createCount() {
        return createCount;
    }
    /**
     * Returns the number of times {@link #put} was called.
     */
    public synchronized final int putCount() {
        return putCount;
    }
    /**
     * Returns the number of values that have been evicted.
     */
    public synchronized final int evictionCount() {
        return evictionCount;
    }
    /**
     * Returns a copy of the current contents of the cache, ordered from least
     * recently accessed to most recently accessed.
     */
    public synchronized final Map<K, V> snapshot() {
        return new LinkedHashMap<K, V>(map);
    }
    @Override public synchronized final String toString() {
        int accesses = hitCount + missCount;
        int hitPercent = accesses != 0 ? (100 * hitCount / accesses) : 0;
        return String.format("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]",
                maxSize, hitCount, missCount, hitPercent);
    }
}]]></Answer>
<Answer><![CDATA[public static void main(final String args[]) throws Exception {
    final int maxSize = 4;
    final LinkedHashMap<String, String> cache = new LinkedHashMap<String, String>() {
        @Override
        protected boolean removeEldestEntry(final Map.Entry eldest) {
            return size() > maxSize;
        }
    };

    cache.put("A", "A");
    System.out.println(cache);
    cache.put("B", "A");
    System.out.println(cache);
    cache.put("C", "A");
    System.out.println(cache);
    cache.put("D", "A");
    System.out.println(cache);
    cache.put("E", "A");
    System.out.println(cache);
    cache.put("F", "A");
    System.out.println(cache);
    cache.put("G", "A");
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41175632" questionTitle="JavaFX autoresize &amp; auto-position">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Region region1 = new Region();
    VBox.setVgrow(region1, Priority.ALWAYS);
    region1.setStyle("-fx-background-color: blue;");

    Region region2 = new Region();
    VBox.setVgrow(region2, Priority.ALWAYS);
    region2.setStyle("-fx-background-color: lime;");

    Region regionOverlay = new Region();
    regionOverlay.setStyle("-fx-background-color: red;");
    regionOverlay.setManaged(false);

    VBox root = new VBox(region1, region2, regionOverlay);
    root.layoutBoundsProperty().addListener((observable, oldValue, newValue) -> {
        regionOverlay.setPrefSize(newValue.getWidth() - 20, newValue.getHeight() / 3);
        regionOverlay.setLayoutX(10);
        regionOverlay.setLayoutY(newValue.getHeight() / 2);
        regionOverlay.autosize();
    });

    root.setPrefSize(400, 400);

    Scene scene = new Scene(root);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.RowConstraints;
import javafx.stage.Stage;

public class CalendarExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        GridPane calendar = new GridPane();

        // headers:
        for (DayOfWeek dayOfWeek = DayOfWeek.MONDAY ; dayOfWeek.getValue() <= DayOfWeek.FRIDAY.getValue(); 
                dayOfWeek = DayOfWeek.of(dayOfWeek.getValue() + 1) ) {

            Label label = new Label(dayOfWeek.toString());
            label.setAlignment(Pos.CENTER);
            label.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
            label.setStyle("-fx-background-color: black, darkgray; -fx-background-insets: 0, 0 0 1 1 ;"); 
            calendar.add(label, dayOfWeek.getValue(), 0);
        }

        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm");

        int rowCount = 0 ;

        for (LocalTime time = LocalTime.of(8, 0); time.isBefore(LocalTime.of(17, 0)); time=time.plusMinutes(30)) {
            rowCount++ ;
            Label label = new Label(timeFormatter.format(time));
            label.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
            label.setAlignment(Pos.CENTER);
            String color = rowCount % 2 == 0 ? "darkgray" : "lightgray" ;
            label.setStyle("-fx-background-color: black, "+color+"; -fx-background-insets: 0, 0 0 1 1;");           
            calendar.add(label, 0, rowCount);
        }

        // cells:

        for (int x = 1 ; x <= 5; x++) {
            for (int y = 1 ; y <= rowCount; y++) {
                Region region = new Region();
                String color = y % 2 == 0 ? "darkgray" : "lightgray" ;
                region.setStyle("-fx-background-color: black, "+color+"; -fx-background-insets: 0, 0 0 1 1 ;");
                calendar.add(region, x, y);
            }
        }

        // Column constraints:
        for (int x = 0 ; x <= 5 ; x++) {
            ColumnConstraints cc = new ColumnConstraints();
            cc.setPercentWidth(100.0 / 6);
            cc.setFillWidth(true);
            calendar.getColumnConstraints().add(cc);
        }

        // row constraints:
        for (int y = 0 ; y <= rowCount; y++) {
            RowConstraints rc = new RowConstraints();
            rc.setPercentHeight(100.0 / (rowCount+1));
            rc.setFillHeight(true);
            calendar.getRowConstraints().add(rc);
        }

        // Example appointment block:

        DayOfWeek appointmentDay = DayOfWeek.FRIDAY ;
        LocalTime startTime = LocalTime.of(10, 0);
        LocalTime endTime = LocalTime.of(13, 0);

        String appointmentText = "Fridays need really long coffee breaks";
        Label appointment = new Label(appointmentText);
        appointment.setTooltip(new Tooltip(appointmentText));
        appointment.setWrapText(true);
        appointment.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);

        appointment.setStyle("-fx-background: red; -fx-background-color: -fx-background; " );
        GridPane.setMargin(appointment, new Insets(2, 5, 2, 2));


        Scene scene = new Scene(calendar, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41149311" questionTitle="java 8 groupingBy">
<Answer><![CDATA[package grpBy;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


class Pair {
    Subject sub1;
    Student student;

    public Pair(Student student, Subject sub1 ) {
        this.sub1 = sub1;
        this.student = student;
    }



    public String getSub1() {
        return sub1.name;
    }

    public String getStudent() {
        return student.name;
    }

    static Pair of(Student stu, Subject sub) {
        return new Pair( stu, sub);
    }



}
public class Test2 {




    public static void main(String[] args) {

          Subject maths = new Subject("maths", 1);
          Subject chemi = new Subject("chemi", 1);
          Subject phy = new Subject("phy", 1);
          Subject bio = new Subject("bio", 1);
          List<Subject> s1 = new ArrayList<>();
          s1.add(maths);
          s1.add(chemi);

          List<Subject> s2 = new ArrayList<>();
          s2.add(maths);
          s2.add(phy);     

          List<Subject> s3 = new ArrayList<>();
          s3.add(bio);
          s3.add(phy);     

          Student jack = new Student(1, "jack", s1);
          Student jil = new Student(2, "jil", s2);
          Student john = new Student(3, "john", s3);

          List<Student> students = new ArrayList();
          students.add(jack);
          students.add(jil);
          students.add(john);

        Map<String, List<String>> m = students.stream().
                flatMap(student -> student.subjects.stream().map(subject -> Pair.of(student, subject))).
                collect(Collectors.groupingBy(e -> e.getSub1(),
                                              Collectors.mapping(e -> e.getStudent(),
                                                                 Collectors.toList())));

        System.out.println(m);
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {

        //3 apple, 2 banana, others 1
        List<Item> items = Arrays.asList(
                new Item("apple", 10, new BigDecimal("9.99")),
                new Item("banana", 20, new BigDecimal("19.99")),
                new Item("orang", 10, new BigDecimal("29.99")),
                new Item("watermelon", 10, new BigDecimal("29.99")),
                new Item("papaya", 20, new BigDecimal("9.99")),
                new Item("apple", 10, new BigDecimal("9.99")),
                new Item("banana", 10, new BigDecimal("19.99")),
                new Item("apple", 20, new BigDecimal("9.99"))
                );

        //group by price
        Map<BigDecimal, List<Item>> groupByPriceMap =
            items.stream().collect(Collectors.groupingBy(Item::getPrice));

        System.out.println(groupByPriceMap);

        // group by price, uses 'mapping' to convert List<Item> to Set<String>
        Map<BigDecimal, Set<String>> result =
                items.stream().collect(
                        Collectors.groupingBy(Item::getPrice,
                                Collectors.mapping(Item::getName, Collectors.toSet())
                        )
                );

        System.out.println(result);

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41129914" questionTitle="Javafx AreaChart low efficiency - how to make scrolling smoother?">
<Answer><![CDATA[import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Pos;
import javafx.scene.CacheHint;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Program2 extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        try {
            StackPane p = new StackPane();
            primaryStage.setTitle("Chart Application");
            Label loader = new Label("Loading...");
            loader.setGraphic(new ImageView(new Image("https://media.giphy.com/media/FmcNeI0PnsAKs/giphy.gif")));
            loader.setFont(new javafx.scene.text.Font(35));
            p.setStyle("-fx-background: #FFFFFF;");
            p.getChildren().add(loader);
            StackPane.setAlignment(loader, Pos.CENTER);

            Scene scene = new Scene(p, 600, 600);
            primaryStage.setScene(scene);
            primaryStage.setMaximized(true);

            Task<ArrayList<ImageView>> loadInitial = new Task<ArrayList<ImageView>>() {
                @Override
                public ArrayList<ImageView> call() {
                    ArrayList<ImageView> images = new ArrayList<ImageView>();

                    for (int i = 0; i < 10; i++) {
                        XYSeries data = new XYSeries(1);
                        XYSeries data2 = new XYSeries(2);
                        XYSeries data3 = new XYSeries(3);

                        System.out.println("Calcuating values for graph" + (i + 1));
                        for (int j = 0; j < 2500; j += i + 2) {
                            data.add(j, -0.2);
                            data.add(j, 1);
                            data.add(j + 1, 1);
                            data.add(j + 1, -0.2);
                        }

                        for (int j = 0; j < 2500; j += i + 1) {
                            data2.add(j, -0.2);
                            data2.add(j, 1.5);
                            data2.add(j + 0.01, 1.5);
                            data2.add(j + 0.01, -0.2);
                        }

                        for (int j = 2; j < 2500; j += i + 1) {
                            data3.add(j, -0.2);
                            data3.add(j, 1.2);
                            data3.add(j + 0.01, 1.2);
                            data3.add(j + 0.01, -0.2);
                        }
                        System.out.println("Finished values for graph" + (i + 1));

                        XYSeriesCollection dataset = new XYSeriesCollection();
                        dataset.addSeries(data);
                        dataset.addSeries(data2);
                        dataset.addSeries(data3);

                        JFreeChart chart = ChartFactory.createXYAreaChart("", "", "", dataset, PlotOrientation.VERTICAL, false, false, false);
                        chart.setBackgroundPaint(Color.WHITE);
                        chart.setBorderVisible(false);
                        chart.setAntiAlias(true);

                        XYPlot plot = (XYPlot) chart.getPlot();

                        ValueAxis range = plot.getRangeAxis();
                        range.setLowerMargin(0);
                        range.setUpperMargin(0);
                        range.setVisible(false);

                        ValueAxis domainAxis = plot.getDomainAxis();
                        domainAxis.setLowerMargin(0);
                        domainAxis.setUpperMargin(0);

                        double maxX = 0;

                        for(Object temp : dataset.getSeries()) {
                            double max = ((XYSeries) temp).getMaxX();
                            if(maxX < max)
                                maxX = max;
                        }

                        Long L = Math.round(maxX);
                        int maxVal = Integer.valueOf(L.intValue());
                        int width = maxVal * 16; //Works out length to nice scale.
                                                 //If you want all values to be the same use 40,000 (commented out)

                        if(width > 250000)
                            width = 250000; //Lags out after this

                        System.out.println("Buffering graph" + (i + 1));
                        BufferedImage capture = chart.createBufferedImage(width, 50);
                        //BufferedImage capture = chart.createBufferedImage(40000, 50);
                        System.out.println("Finished buffering graph" + (i + 1));
                        ImageView imageView = new ImageView();
                        Image chartImg = SwingFXUtils.toFXImage(capture, null);
                        imageView.setImage(chartImg);
                        imageView.setCache(true);
                        imageView.setCacheHint(CacheHint.SPEED);

                        images.add(imageView);
                    }

                    System.out.println("Finished all processes. Loading graphs");
                    return images;
                }
            };

            loadInitial.setOnSucceeded(e -> {
                VBox images = new VBox();
                ArrayList<ImageView> result = loadInitial.getValue();
                for(ImageView image : result) {
                    images.getChildren().add(image);
                }

                ScrollPane scrollPane = new ScrollPane(images);
                scrollPane.setStyle("-fx-background: #FFFFFF;");

                scene.setRoot(scrollPane);
            });

            new Thread(loadInitial).start();

            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.scene.chart.AreaChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.paint.Color;
import org.controlsfx.control.GridCell;

public class ChartGridCell extends GridCell<ChartGridCell.CellData> {
    private final AreaChart<Number,Number> chart;

    public static class CellData {

        private final int idx;
        private final Color c1;
        private final Color c2;
        private final Color c1t;
        private final Color c2t;

        public CellData(int idx, Color c1, Color c2) {
            this.idx = idx;
            this.c1 = c1;
            this.c2 = c2;
            c1t = new Color(c1.getRed(), c1.getGreen(), c1.getBlue(), 0.2);
            c2t = new Color(c2.getRed(), c2.getGreen(), c2.getBlue(), 0.2);
        }

        public int getIdx() {
            return idx;
        }

        public Color getC1() {
            return c1;
        }

        public Color getC2() {
            return c2;
        }

        public Color getC1t() {
            return c1t;
        }

        public Color getC2t() {
            return c2t;
        }
    }

    /**
     * Creates a default ColorGridCell instance.
     */
    public ChartGridCell() {
        getStyleClass().add("chart-grid-cell"); //$NON-NLS-1$

        final NumberAxis xAxis = new NumberAxis(1, 31, 1);
        final NumberAxis yAxis = new NumberAxis(0, 28, 1);

        xAxis.setAutoRanging(false);
        xAxis.setMinorTickVisible(false);
        xAxis.setTickMarkVisible(false);
        xAxis.setTickLabelsVisible(false);
        xAxis.setPrefSize(0, 0);
        yAxis.setAutoRanging(false);
        yAxis.setMinorTickVisible(false);
        yAxis.setTickMarkVisible(false);
        yAxis.setTickLabelsVisible(false);
        yAxis.setPrefSize(0, 0);

        chart = new AreaChart<>(xAxis,yAxis);
        chart.setHorizontalGridLinesVisible(false);
        chart.setVerticalGridLinesVisible(false);
        chart.setLegendVisible(false);
        chart.setVerticalZeroLineVisible(false);
        chart.setHorizontalZeroLineVisible(false);
        chart.setAnimated(false);

        XYChart.Series seriesApril= new XYChart.Series();
        seriesApril.setName("April");
        seriesApril.getData().add(new XYChart.Data(1, 4));
        seriesApril.getData().add(new XYChart.Data(3, 10));
        seriesApril.getData().add(new XYChart.Data(6, 15));
        seriesApril.getData().add(new XYChart.Data(9, 8));
        seriesApril.getData().add(new XYChart.Data(12, 5));
        seriesApril.getData().add(new XYChart.Data(15, 18));
        seriesApril.getData().add(new XYChart.Data(18, 15));
        seriesApril.getData().add(new XYChart.Data(21, 13));
        seriesApril.getData().add(new XYChart.Data(24, 19));
        seriesApril.getData().add(new XYChart.Data(27, 21));
        seriesApril.getData().add(new XYChart.Data(30, 21));
        seriesApril.getData().add(new XYChart.Data(31, 19));

        XYChart.Series seriesMay = new XYChart.Series();
        seriesMay.setName("May");
        seriesMay.getData().add(new XYChart.Data(1, 20));
        seriesMay.getData().add(new XYChart.Data(3, 15));
        seriesMay.getData().add(new XYChart.Data(6, 13));
        seriesMay.getData().add(new XYChart.Data(9, 12));
        seriesMay.getData().add(new XYChart.Data(12, 14));
        seriesMay.getData().add(new XYChart.Data(15, 18));
        seriesMay.getData().add(new XYChart.Data(18, 25));
        seriesMay.getData().add(new XYChart.Data(21, 25));
        seriesMay.getData().add(new XYChart.Data(24, 23));
        seriesMay.getData().add(new XYChart.Data(27, 26));
        seriesMay.getData().add(new XYChart.Data(31, 26));

        chart.getData().addAll(seriesApril, seriesMay);
    }

    @Override protected void updateItem(ChartGridCell.CellData item, boolean empty) {
        super.updateItem(item, empty);

        if (empty) {
            setGraphic(null);
        } else {
            chart.setTitle(item.getIdx() + ": " + toRGBCode(item.getC1()));
            chart.setStyle(
                    "CHART_COLOR_1: " + toRGBCode(item.getC1()) + "; " +
                            "CHART_COLOR_1_TRANS_20: " + toRGBCode(item.getC1t()) + ";" +
                            "CHART_COLOR_2: " + toRGBCode(item.getC2()) + "; " +
                            "CHART_COLOR_2_TRANS_20: " + toRGBCode(item.getC2t()) + ";"
            );
            setGraphic(chart);
        }
    }

    private String toRGBCode( Color color ) {
        return String.format( "#%02X%02X%02X%02X",
                (int)( color.getRed() * 255 ),
                (int)( color.getGreen() * 255 ),
                (int)( color.getBlue() * 255 ),
                (int)( color.getOpacity() * 255 )
        );
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41097246" questionTitle="JavaFX Apply css to TableRows only if they are :enabled">
<Answer><![CDATA[PseudoClass enableRowClass = PseudoClass.getPseudoClass("enabled-row");

setRowFactory(tv -> {
                TableRow<Media> row = new TableRow<>();

                // use EasyBind to access the valueProperty of the itemProperty
                // of the cell:
                row.disableProperty().bind(
                        // start at itemProperty of row
                        EasyBind.select(row.itemProperty())
                                // map to fileExistsProperty[a boolean] of item, if item
                                // non-null
                                .selectObject(Media::fileExistsProperty)
                                // map to BooleanBinding checking if false
                                .map(x -> x.booleanValue() == false)
                                // value to use if item was null
                                .orElse(false));

  //This line of code is the idea of the `Harshita Sethi` modified a little bit to not use a changelistener
  row.pseudoClassStateChanged(enableRowClass, !row.disabledProperty().get());

    return row;
 });]]></Answer>
<Answer><![CDATA[PseudoClass enableRowClass = PseudoClass.getPseudoClass("enabled-row");
// A row factory that returns a row that disables itself whenever the
// item it displays has a value less than 5:
table.setRowFactory(tv -> {
    TableRow<Item> row = new TableRow<>();
    row.disableProperty().bind(
            Bindings.selectInteger(row.itemProperty(), "value")
                    .lessThan(5));


    row.itemProperty().addListener(new ChangeListener<Item>() {
        @Override
        public void changed(ObservableValue<? extends Item> observable, Item oldValue, Item newValue) {
            try {
                //Applying pseudoclass to only those rows which are enabled.
                // The condition is the reverse of the condition used to disable a row.
                row.pseudoClassStateChanged(enableRowClass, newValue.getValue() >= 5);
            } catch (NullPointerException e) {
            }
        }
    });
    return row;
});]]></Answer>
<Answer><![CDATA[.table-row-cell{

     -fx-background-color:red;

     }

     .table-row-cell:disabled{

     -fx-background-color:red; //Here you can define a fixed style 
                               //  or similar to the normal state

     }

     .table-row-cell:focused:disabled .text{

       -fx-fill: red; // Here you define the color of the text

     }

     .table-row-cell:hover{

     -fx-background-color:blue;

     }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41085912" questionTitle="JavaFX BorderPane right side all height">
<Answer><![CDATA[private static void setBackground(Region region, Color color) {
    region.setBackground(new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY)));
}

@Override
public void start(Stage primaryStage) {
    GridPane gridPane = new GridPane();
    RowConstraints rConstranits1 = new RowConstraints();
    rConstranits1.setVgrow(Priority.NEVER);
    RowConstraints rConstranits2 = new RowConstraints();
    rConstranits2.setVgrow(Priority.ALWAYS);
    RowConstraints rConstranits3 = new RowConstraints();
    rConstranits3.setVgrow(Priority.NEVER);

    ColumnConstraints cConstraints1 = new ColumnConstraints();
    cConstraints1.setHgrow(Priority.NEVER);
    ColumnConstraints cConstraints2 = new ColumnConstraints();
    cConstraints2.setHgrow(Priority.ALWAYS);
    ColumnConstraints cConstraints3 = new ColumnConstraints();
    cConstraints3.setHgrow(Priority.NEVER);

    gridPane.getColumnConstraints().addAll(cConstraints1, cConstraints2, cConstraints3);
    gridPane.getRowConstraints().addAll(rConstranits1, rConstranits2, rConstranits3);

    Region top = new Region();
    top.setPrefSize(300, 100);
    setBackground(top, Color.RED);

    Region bottom = new Region();
    bottom.setPrefSize(400, 50);
    setBackground(bottom, Color.YELLOW);

    Region center = new Region();
    setBackground(center, Color.BLUE);

    Region right = new Region();
    setBackground(right, Color.LIME);
    right.setPrefSize(200, 500);

    Region left = new Region();
    setBackground(left, Color.BROWN);
    left.setPrefSize(200, 400);

    gridPane.add(right, 2, 0, 1, 3);
    cConstraints3.maxWidthProperty().bind(right.prefWidthProperty());
    cConstraints3.minWidthProperty().bind(right.prefWidthProperty());
    gridPane.add(top, 0, 0, 2, 1);
    rConstranits1.minHeightProperty().bind(top.prefHeightProperty());
    rConstranits1.maxHeightProperty().bind(top.prefHeightProperty());
    gridPane.add(bottom, 0, 2, 2, 1);
    rConstranits3.minHeightProperty().bind(bottom.prefHeightProperty());
    rConstranits3.maxHeightProperty().bind(bottom.prefHeightProperty());
    gridPane.add(center, 1, 1);
    gridPane.add(left, 0, 1);
    cConstraints1.minWidthProperty().bind(left.prefWidthProperty());
    cConstraints1.maxWidthProperty().bind(left.prefWidthProperty());

    Scene scene = new Scene(gridPane);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[private static void setBackground(Region region, Color color) {
    region.setBackground(new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY)));
}

@Override
public void start(Stage primaryStage) {

    BorderPane outer = new BorderPane();
    BorderPane inner = new BorderPane();

    Region top = new Region();
    top.setPrefSize(300, 300);
    setBackground(top, Color.RED);

    Region bottom = new Region();
    bottom.setPrefSize(400, 200);
    setBackground(bottom, Color.YELLOW);

    Region right = new Region();
    setBackground(right, Color.BLUE);
    right.setPrefSize(200, 500);

    inner.setCenter(top);
    inner.setBottom(bottom);

    outer.setCenter(inner);
    outer.setRight(right);

    Scene s = new Scene(outer);
    primaryStage.setScene(s);
    primaryStage.show();

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41050085" questionTitle="JavaFX Spinner change is slow with click and hold of mouse button">
<Answer><![CDATA[private static final PseudoClass PRESSED = PseudoClass.getPseudoClass("pressed");

@Override
public void start(Stage primaryStage) {
    Spinner<Integer> spinner = new Spinner(Integer.MIN_VALUE, Integer.MAX_VALUE, 0);

    class IncrementHandler implements EventHandler<MouseEvent> {

        private Spinner spinner;
        private boolean increment;
        private long startTimestamp;

        private static final long DELAY = 1000l * 1000L * 750L; // 0.75 sec
        private Node button;

        private final AnimationTimer timer = new AnimationTimer() {

            @Override
            public void handle(long now) {
                if (now - startTimestamp >= DELAY) {
                    // trigger updates every frame once the initial delay is over
                    if (increment) {
                        spinner.increment();
                    } else {
                        spinner.decrement();
                    }
                }
            }
        };

        @Override
        public void handle(MouseEvent event) {
            if (event.getButton() == MouseButton.PRIMARY) {
                Spinner source = (Spinner) event.getSource();
                Node node = event.getPickResult().getIntersectedNode();

                Boolean increment = null;
                // find which kind of button was pressed and if one was pressed
                while (increment == null && node != source) {
                    if (node.getStyleClass().contains("increment-arrow-button")) {
                        increment = Boolean.TRUE;
                    } else if (node.getStyleClass().contains("decrement-arrow-button")) {
                        increment = Boolean.FALSE;
                    } else {
                        node = node.getParent();
                    }
                }
                if (increment != null) {
                    event.consume();
                    source.requestFocus();
                    spinner = source;
                    this.increment = increment;

                    // timestamp to calculate the delay
                    startTimestamp = System.nanoTime();

                    button = node;

                    // update for css styling
                    node.pseudoClassStateChanged(PRESSED, true);

                    // first value update
                    timer.handle(startTimestamp + DELAY);

                    // trigger timer for more updates later
                    timer.start();
                }
            }
        }

        public void stop() {
            timer.stop();
            button.pseudoClassStateChanged(PRESSED, false);
            button = null;
            spinner = null;
        }
    }

    IncrementHandler handler = new IncrementHandler();
    spinner.addEventFilter(MouseEvent.MOUSE_PRESSED, handler);
    spinner.addEventFilter(MouseEvent.MOUSE_RELEASED, evt -> {
        if (evt.getButton() == MouseButton.PRIMARY) {
            handler.stop();
        }
    });

    Scene scene = new Scene(spinner);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[private int currentFrame = 0;
private int previousFrame = 0;        

@Override
public void handle(long now)
{
    if (now - startTimestamp >= initialDelay)
        {
        // Single or holded mouse click
        if (currentFrame == previousFrame || currentFrame % 10 == 0)
        {
            if (increment)
            {
                spinner.increment();
            }
            else
            {
                spinner.decrement();
            }
        }
    }

    ++currentFrame;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41026018" questionTitle="Javafx : swap rectangle shapes along with sawping array elements">
<Answer><![CDATA[import javafx.animation.PathTransition;
import javafx.application.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class Sorter extends Application {
    final Pane root = new Pane();

    final PathTransition[] pathtransition = new PathTransition[2];

    final Lock lock = new ReentrantLock();
    final Condition[] swapComplete  = { lock.newCondition(), lock.newCondition() };

    final int[] data = {5, 8, 0, 3, 1};

    @Override
    public void start(Stage stage) {
        Label[] labels = createLabels(data);
        root.getChildren().addAll(labels);
        root.setStyle("-fx-background-color: oldlace;");

        Scene scene = new Scene(root, 600, 250);
        stage.setScene(scene);
        stage.show();

        sort(data, labels);
    }

    private void sort(int[] a, Label[] rect) {
        // Selection Sort
        Thread thread = new Thread(
                () -> {
                    int min;
                    for (int i = 0; i < a.length; i++) {

                        min = i;
                        for (int j = i + 1; j < a.length; j++) {
                            if (a[j] < a[min]) {
                                min = j;

                            }
                        }
                        if (min != i) {
                            int temp = a[i];
                            a[i] = a[min];
                            a[min] = temp;
                            final int finalMin = min;
                            final int finalI = i;

                            FutureTask<Void> future = new FutureTask<>(
                                    () -> {
                                        swap(
                                                0,
                                                rect[finalI],
                                                60,
                                                rect[finalMin].getLayoutX() - rect[finalI].getLayoutX(),
                                                Duration.seconds(1)
                                        );
                                        swap(
                                                1,
                                                rect[finalMin],
                                                -60,
                                                rect[finalI].getLayoutX() - rect[finalMin].getLayoutX(),
                                                Duration.seconds(4)
                                        );

                                        return null;
                                    }
                            );

                            lock.lock();
                            try {
                                Platform.runLater(future);
                                future.get();
                                for (Condition condition: swapComplete) {
                                    condition.await();
                                }
                            } catch (InterruptedException e) {
                                Thread.interrupted();
                                break;
                            } catch (ExecutionException e) {
                                e.printStackTrace();
                                break;
                            } finally {
                                lock.unlock();
                            }

                            Label temporary = rect[i];
                            rect[i] = rect[min];
                            rect[min] = temporary;
                        }
                        System.out.println(a[i]);
                    }
                }
        );
        thread.setDaemon(true);
        thread.start();
    }

    private Label[] createLabels(int[] a) {
        Label[] rect = new Label[a.length];

        for (int i = 0; i < a.length; i++) {
            createLabel(i, a, rect);
        }

        return rect;
    }

    private void createLabel(int i, int[] a, Label[] rect) {
        rect[i] = new Label(Integer.toString(a[i]));
        rect[i].setMinSize(40, 40);
        rect[i].setMaxSize(40, 40);
        rect[i].setAlignment(Pos.CENTER);
        rect[i].setStyle(
                "-fx-background-radius: 10; " +
                "-fx-background-color: orange; " +
                "-fx-font-family: Verdana; " +
                "-fx-font-size: 12pt; " +
                "-fx-font-weight: bold;"
        );
        rect[i].relocate(100 * i + 80, 100);
    }


    void swap(int transitionIdx, Region node, double dy, double dx, Duration duration) {
        double cx = node.getWidth() / 2;
        double cy = node.getHeight() / 2;

        Path path1 = new Path(
                new MoveTo(cx, cy),
                new LineTo(cx, cy + dy),
                new LineTo(dx + cx, cy + dy),
                new LineTo(dx + cx, cy)
        );

        pathtransition[transitionIdx] = new PathTransition(duration, path1, node);

        pathtransition[transitionIdx].setOnFinished(event -> {
            node.setLayoutX(node.getLayoutX() + node.getTranslateX());
            node.setLayoutY(node.getLayoutY() + node.getTranslateY());
            node.setTranslateX(0);
            node.setTranslateY(0);

            lock.lock();
            try {
                swapComplete[transitionIdx].signal();
            } finally {
                lock.unlock();
            }
        });

        pathtransition[transitionIdx].play();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[private static class AnimationElements {

    private final PathTransition transition;
    private final MoveTo start;
    private final LineTo horizontalMove;

    public AnimationElements(double height) {
        this.start = new MoveTo();
        this.horizontalMove = new LineTo();
        horizontalMove.setAbsolute(false);

        LineTo l1 = new LineTo(0, height);
        l1.setAbsolute(false);
        LineTo l2 = new LineTo(0, -height);
        l2.setAbsolute(false);

        this.transition = new PathTransition(Duration.seconds(4), new Path(start, l1, horizontalMove, l2));
    }

    public void init(Node movedNode, Node moveEnd) {
        // init animation according to positions of the Nodes to move
        double sx = movedNode.getTranslateX();
        double dx = moveEnd.getTranslateX() - sx;
        start.setX(sx + movedNode.getLayoutBounds().getWidth() / 2);
        start.setY(movedNode.getTranslateY() + movedNode.getLayoutBounds().getHeight() / 2);
        horizontalMove.setX(dx/*+movedNode.getLayoutBounds().getWidth()/2*/);
        transition.setNode(movedNode);
    }

    public PathTransition getTransition() {
        return transition;
    }

}

private static class Swap {

    private final int index1;
    private final int index2;

    public Swap(int index1, int index2) {
        this.index1 = index1;
        this.index2 = index2;
    }

    public void init(AnimationElements animation1, AnimationElements animation2, Node[] sortNodes) {
        // initialize both positions
        Node n1 = sortNodes[index1];
        Node n2 = sortNodes[index2];
        animation1.init(n1, n2);
        animation2.init(n2, n1);

        // swap order to be correct for the next swap
        sortNodes[index2] = n1;
        sortNodes[index1] = n2;
    }
}

@Override
public void start(Stage primaryStage) {
    // create list of swaps to execute; could be generated by sorting algorithm
    List<Swap> swaps = Arrays.asList(new Swap(0, 1), new Swap(1, 2), new Swap(3, 4), new Swap(0, 4));

    AnimationElements animationElements1 = new AnimationElements(100);
    AnimationElements animationElements2 = new AnimationElements(-100);

    // both swap animations happen simultaniously
    ParallelTransition animation = new ParallelTransition(animationElements1.getTransition(), animationElements2.getTransition());

    Color[] colors = new Color[]{
        Color.RED,
        Color.BLUE,
        Color.LIME,
        Color.YELLOW,
        Color.ORANGE
    };
    Node[] nodes = new Node[5];
    for (int i = 0; i < nodes.length; i++) {
        Rectangle rect = new Rectangle(100, 20, colors[i]);
        rect.setTranslateY(200);
        rect.setTranslateX(i * 100);
        nodes[i] = rect;
    }

    Iterator<Swap> iterator = swaps.iterator();
    animation.setOnFinished(evt -> {
        if (iterator.hasNext()) {
            // continue with next swap
            iterator.next().init(animationElements1, animationElements2, nodes);
            animation.play();
        }
    });
    if (iterator.hasNext()) {
        // execute first swap
        iterator.next().init(animationElements1, animationElements2, nodes);
        animation.play();
    }

    Pane root = new Pane(nodes);

    Scene scene = new Scene(root, 500, 400);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="41015673" questionTitle="handle derived property in JavaFX">
<Answer><![CDATA[public static class User {

    private final StringProperty name;
    private final ObjectProperty<LocalDate> birthday;

    private ReadOnlyIntegerWrapper age = null;

    public StringProperty nameProperty() { return name; }
    public ObjectProperty<LocalDate> birthdayProperty() { return birthday; }

    public ReadOnlyIntegerProperty ageProperty() {
        if (age == null) {
            age = new ReadOnlyIntegerWrapper();
            age.bind(Bindings.createIntegerBinding(() -> calculateAge(), birthday));
        }

        return age.getReadOnlyProperty();
    }

    private User(String name, LocalDate bDay) {
        this.name = new SimpleStringProperty(name);
        birthday = new SimpleObjectProperty<LocalDate>(bDay);
    }

    public String getName() { return name.get(); }

    public LocalDate getBirthday() {return birthday.get(); }

    public int getAge() {
        return (age != null) ? age.get() : calculateAge();
    }

    private final int calculateAge() {
        return Period.between(this.getBirthday(), LocalDate.now()).getYears();
    }
}]]></Answer>
<Answer><![CDATA[public class User {

    private final ObjectProperty<LocalDate> birthday ;

    public ObjectProperty<LocalDate> birthdayProperty() {
        return birthday ;
    }

    public final LocalDate getBirthday() {
        return birthdayProperty().get();
    }

    public final void setBirthday(LocalDate birthday) {
        birthdayProperty().set(birthday);
    }

    private final DoubleBinding age = Bindings.createDoubleBinding(
        () -> Period.between(this.getBirthday(), LocalDate.now()).getYears(),
        birthday);

    public DoubleBinding age() {
        return age ;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40985584" questionTitle="How to test Java 8 in Travis CI?">
<Answer><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.com.simplepass</groupId>
    <artifactId>mapPointManager</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>mapPointManager</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.3</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </build>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.5.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>]]></Answer>
<Answer><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>br.com.simplepass</groupId>
  <artifactId>mapPointManager</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>mapPointManager</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- I just added those two lines -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.5.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40979589" questionTitle="changing hbox nodes position">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.stage.Stage;

public class LayoutExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();

        GridPane gridPane = new GridPane();


        Button backButton = new Button("Back");
        Button deleteButton = new Button("Delete");
        Button showAllButton = new Button("Show All");

        gridPane.add(backButton, 0, 0);
        gridPane.add(deleteButton, 1, 0);
        gridPane.add(showAllButton, 2, 0);

        ColumnConstraints leftCol = new ColumnConstraints();
        leftCol.setHgrow(Priority.ALWAYS);

        gridPane.getColumnConstraints().addAll(leftCol, new ColumnConstraints(), new ColumnConstraints());

        gridPane.setPadding(new Insets(2));
        root.setBottom(gridPane);
        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[AnchorPane holder = new AnchorPane();

Button delete_button = new Button("Delete");
Button showAll_button = new Button("Show All");
Button back_button = new Button("Back");

// Add buttons to holder
holder.getChildren().add(delete_button);
holder.getChildren().add(showAll_button);
holder.getChildren().add(back_button);

// Delete top left
AnchorPane.setTopAnchor (delete_button, 0.0);
AnchorPane.setLeftAnchor(delete_button, 0.0);

// Show all top right
AnchorPane.setTopAnchor  (showAll_button, 0.0);
AnchorPane.setRightAnchor(showAll_button, 0.0);

// Back bottom right
AnchorPane.setBottomAnchor(back_button, 0.0);
AnchorPane.setRightAnchor (back_button, 0.0);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40970368" questionTitle="Replace TabPane with separate scenes (JAVAFX)">
<Answer><![CDATA[public class MainController {

    @FXML private Tab1Controller tab1Controller;
    @FXML private Tab2Controller tab2Controller;
    @FXML private Tab3Controller tab3Controller;

    @FXML private Node tab1;
    @FXML private Node tab2;
    @FXML private Node tab3;

    @FXML private StackPane container;

    public void initialize() {
        tab1Controller.init(this);
        tab2Controller.init(this);
        tab3Controller.init(this);
    }

    public void setTab2LabelText(String text) {
        tab3Controller.lbl3.setText(text);
        tab2Controller.lbl2.setText(text);
    }

    public void toTab2() {
        container.getChildren().setAll(tab2);
    }
}]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" prefHeight="380.0" prefWidth="387.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ask.FXMLDocumentController">
   <children>
      <Pane fx:id="p3" prefHeight="380.0" prefWidth="387.0" visible="false">
         <children>
            <Label layoutX="184.0" layoutY="181.0" text="p3" />
            <Button fx:id="p3previous" layoutX="152.0" layoutY="225.0" mnemonicParsing="false" text="previous" />
         </children>
      </Pane>
      <Pane fx:id="p2" prefHeight="380.0" prefWidth="387.0" visible="false">
         <children>
            <Label layoutX="184.0" layoutY="181.0" text="p2" />
            <Button fx:id="p2previous" layoutX="78.0" layoutY="255.0" mnemonicParsing="false" text="previous" />
            <Button fx:id="p2next" layoutX="239.0" layoutY="255.0" mnemonicParsing="false" text="next" />
         </children>
      </Pane>
      <Pane fx:id="p1" prefHeight="380.0" prefWidth="387.0">
         <children>
            <Button fx:id="p1next" layoutX="167.0" layoutY="210.0" mnemonicParsing="false" text="next" />
            <Label layoutX="184.0" layoutY="181.0" text="p1" />
         </children>
      </Pane>
   </children>
</AnchorPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40935699" questionTitle="Error when no constructor method and error when constructor method">
<Answer><![CDATA[public class Toidubaas {

    public  SimpleIntegerProperty rbCal = new SimpleIntegerProperty();
    public  SimpleIntegerProperty rbProt = new SimpleIntegerProperty();
    public  SimpleIntegerProperty rbCarb = new SimpleIntegerProperty();
    public  SimpleIntegerProperty rbFat = new SimpleIntegerProperty();
    public  SimpleStringProperty rbMeal = new SimpleStringProperty();

    //Empty Constructor (only need this if standardized to first approach)
    public Toidubaas() {}

    //Parameterized Constructor (only need this if standardized to second approach) 
    public Toidubaas(String sbMeal, Integer sbCal, Integer sbProt, Integer sbCarb, Integer sbFat) {

        rbMeal.set(sbMeal);
        rbCal.set(sbCal);
        rbProt.set(sbProt);
        rbCarb.set(sbCarb);
        rbFat.set(sbFat);    
    }

    //Getters/Setters
    ...
}]]></Answer>
<Answer><![CDATA[String query = "INSERT OR IGNORE INTO Toiduinfo (Toidu, Kalorid, Valgud, Süsivesikud, Rasvad) VALUES(?, ?, ?, ?, ?)";

try (PreparedStatement prep = con.prepareStatement(query)) {
    String toidu = lisaToit.getText();
    int kalorid = Integer.parseInt(lisaKcal.getText());
    int valgud = Integer.parseInt(lisaValk.getText());
    int süsivesikud = Integer.parseInt(lisaSysi.getText());
    int rasvad = Integer.parseInt(lisaRasv.getText());

    prep.setString(1, toidu);
    prep.setInt(2, kalorid);
    prep.setInt(3, valgud);
    prep.setInt(4, süsivesikud);
    prep.setInt(5, rasvad);

    if (prep.executeUpdate() > 0) {
        // object filled with data from input data
        Toidubaas newToidubaas = new Toidubaas(toidu,
                                               kalorid,
                                               valgud,
                                               süsivesikud,
                                               rasvad);

        // add new item to table here
        toidudata.add(newToidubaas);
    }
    clearForm();
} catch (Exception er) {
    System.out.println(er.getMessage());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40917005" questionTitle="How to implement selection of Nodes in JavaFX">
<Answer><![CDATA[public class SelectionHandler {
    private Clipboard clipboard;

    private EventHandler<MouseEvent> mousePressedEventHandler;

    public SelectionHandler(final Parent root) {
        this.clipboard = new Clipboard();
        this.mousePressedEventHandler = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                SelectionHandler.this.doOnMousePressed(root, event);
                event.consume();
            }
        };
    }

    public EventHandler<MouseEvent> getMousePressedEventHandler() {
        return mousePressedEventHandler;
    }

    private void doOnMousePressed(Parent root, MouseEvent event) {
        Node target = (Node) event.getTarget();
        if(target.equals(root))
            clipboard.unselectAll();
        if(root.getChildrenUnmodifiable().contains(target) && target instanceof SelectableNode) {
            SelectableNode selectableTarget = (SelectableNode) target;
            if(!clipboard.getSelectedItems().contains(selectableTarget))
                clipboard.unselectAll();
            clipboard.select(selectableTarget, true);
        }
    }

    /**
     * This class is based on jfxtras-labs
     *  <a href="https://github.com/JFXtras/jfxtras-labs/blob/8.0/src/main/java/jfxtras/labs/scene/control/window/Clipboard.java">Clipboard</a>
     *  and 
     *  <a href="https://github.com/JFXtras/jfxtras-labs/blob/8.0/src/main/java/jfxtras/labs/util/WindowUtil.java">WindowUtil</a>
     */
    private class Clipboard {
        private ObservableList<SelectableNode> selectedItems = FXCollections.observableArrayList();

        public ObservableList<SelectableNode> getSelectedItems() {
            return selectedItems;
        }

        public boolean select(SelectableNode n, boolean selected) {
            if(n.requestSelection(selected)) {
                if (selected) {
                    selectedItems.add(n);
                } else {
                    selectedItems.remove(n);
                }
                n.notifySelection(selected);
                return true;
            } else {
                return false;
            }
        }

        public void unselectAll() {
            List<SelectableNode> unselectList = new ArrayList<>();
            unselectList.addAll(selectedItems);

            for (SelectableNode sN : unselectList) {
                select(sN, false);
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[public class MyCircle implements EventHandler<MouseEvent>{
    private static double frameX = 0;
    private static double frameY = 0;
    private final Circle circle = new Circle();
    private static final List<Circle> CIRCLES = new ArrayList<>();

    public void setCircle(int radius, int x, int y){
        circle.setRadius(radius);
        position(x,y);
        circle.setStrokeWidth(3);
        circle.setStroke(Color.valueOf("white"));
        CIRCLES.add(circle);
    }

    public void setFrame(double x, double y){
        frameX = x;
        frameY = y;
    }

    public Circle getCircle(){
        return circle;
    }

    public void position(double x, double y){
        if ( x < frameX && x > 0)
            circle.setCenterX(x);
        if ( y < frameY && y > 0)
            circle.setCenterY(y);
    }

    public void selected(){
        CIRCLES.stream().forEach((c) -> {
            c.setStroke(Color.valueOf("white"));
        });
        circle.setStroke(Color.valueOf("orange"));
    }

    public void unselected() {
        circle.setStroke(Color.valueOf("white"));
    }

    @Override
    public void handle(MouseEvent event) {
        if (event.getEventType() == MouseEvent.MOUSE_PRESSED){
            selected();
        }
        else if (event.getEventType() == MouseEvent.MOUSE_DRAGGED){
            position(event.getX(), event.getY());
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.*;
import javafx.css.PseudoClass;
import javafx.scene.control.*;
import javafx.scene.shape.Circle;

class Bulb extends Circle implements Toggle {
    private ObjectProperty<ToggleGroup> toggleGroup = new SimpleObjectProperty<>();

    Bulb() {
        super(30);
        getStyleClass().add("bulb");
    }

    @Override
    public void setSelected(boolean selected) {
        this.selected.set(selected);
    }

    @Override
    public boolean isSelected() {
        return selected.get();
    }

    @Override
    public BooleanProperty selectedProperty() {
        return selected;
    }

    public BooleanProperty selected =
            new BooleanPropertyBase(false) {
                @Override protected void invalidated() {
                    pseudoClassStateChanged(ON_PSEUDO_CLASS, get());
                }

                @Override public Object getBean() {
                    return Bulb.this;
                }

                @Override public String getName() {
                    return "on";
                }
            };

    private static final PseudoClass
            ON_PSEUDO_CLASS = PseudoClass.getPseudoClass("on");

    @Override
    public ToggleGroup getToggleGroup() {
        return toggleGroup.get();
    }

    @Override
    public void setToggleGroup(ToggleGroup toggleGroup) {
        this.toggleGroup.set(toggleGroup);
    }

    @Override
    public ObjectProperty<ToggleGroup> toggleGroupProperty() {
        return toggleGroup;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40900718" questionTitle="JVM consumes all of my RAM for 40 lines of code">
<Answer><![CDATA[new AnimationTimer() { //This is how I reduced the number of times gc.drawImage is called

        long lastupdate = 0 ;

        public void handle(long currentNanoTime) {

            double t = (currentNanoTime - startNanoTime) / 1000000000.0 ;

            double x = 232 + 128 * Math.cos(t);
            double y = 232 + 128 * Math.sin(t);

            //background image clears canvas

            if(currentNanoTime - lastupdate >= 33333333) {
                gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
                gc.drawImage(space, 0, 0);
                gc.drawImage(sun, 196, 196);
                gc.drawImage(earth, x, y);

                lastupdate = currentNanoTime;
            }


        }
    }.start();]]></Answer>
<Answer><![CDATA[import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.effect.BoxBlur;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import javafx.util.Duration;

import static javafx.animation.Animation.INDEFINITE;

public class Animation extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("orbit");

        Group root = new Group();
        Scene scene = new Scene(root, 800, 800, Color.BLACK);
        primaryStage.setScene(scene);

        Circle sun = new Circle(50, Color.web("yellow", 1.0));
        sun.setCenterX(400);
        sun.setCenterY(400);
        sun.setEffect(new BoxBlur(10, 10, 3));

        Circle earth = new Circle(10, Color.web("blue"));
        earth.setEffect(new BoxBlur(4, 4, 3));

        root.getChildren().add(sun);
        root.getChildren().add(earth);

        Path path = new Path();
        ArcTo arcTo = new ArcTo();
        arcTo.setX(20);
        arcTo.setY(401);
        arcTo.setSweepFlag(true);
        arcTo.setLargeArcFlag(true);
        arcTo.setRadiusX(400);
        arcTo.setRadiusY(400);
        arcTo.setXAxisRotation(0);

        path.getElements().add(new MoveTo(20, 400));
        path.getElements().add(arcTo);
        path.getElements().add(new ClosePath());
        path.setVisible(false);

        PathTransition pt = new PathTransition(Duration.seconds(10), path, earth);
        pt.setInterpolator(Interpolator.LINEAR); // No acceleration/deceleration
        pt.setOrientation(PathTransition.OrientationType.ORTHOGONAL_TO_TANGENT);
        pt.setCycleCount(INDEFINITE);
        pt.play();

        primaryStage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40897365" questionTitle="Background color transition on a JavaFX 8 Node/Region/Pane">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {

    Label label = new Label("Bla bla bla bla");

    Button btn = new Button("flash");
    VBox box = new VBox(10, label, btn);
    box.setPadding(new Insets(10));

    btn.setOnAction((ActionEvent event) -> {

        //**************************
        //this animation changes the background color
        //of the VBox from red with opacity=1 
        //to red with opacity=0
        //**************************
        final Animation animation = new Transition() {

            {
                setCycleDuration(Duration.millis(1000));
                setInterpolator(Interpolator.EASE_OUT);
            }

            @Override
            protected void interpolate(double frac) {
                Color vColor = new Color(1, 0, 0, 1 - frac);
                box.setBackground(new Background(new BackgroundFill(vColor, CornerRadii.EMPTY, Insets.EMPTY)));
            }
        };
        animation.play();

    });

    Scene scene = new Scene(box, 100, 100);

    primaryStage.setScene(scene);
    primaryStage.show();

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Label label = new Label("Bla bla bla bla");

    DropShadow shadow = new DropShadow();
    shadow.setColor(Color.RED);
    shadow.setSpread(0.75);

    Timeline shadowAnimation = new Timeline(
            new KeyFrame(Duration.ZERO, new KeyValue(shadow.radiusProperty(), 0d)),
            new KeyFrame(Duration.seconds(0.15), new KeyValue(shadow.radiusProperty(), 20d)));
    shadowAnimation.setAutoReverse(true);
    shadowAnimation.setCycleCount(2);

    Button btn = new Button("flash");
    btn.setOnAction((ActionEvent event) -> {
        Node target = label;
        target.setEffect(shadow);
        shadowAnimation.setOnFinished(evt -> target.setEffect(null));
        shadowAnimation.play();
    });

    VBox box = new VBox(10, label, btn);
    box.setPadding(new Insets(10));

    Scene scene = new Scene(box, 100, 100);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public static void AnimateBackgroundColor(Control control, Color fromColor,Color toColor,int duration)
{

    Rectangle rect = new Rectangle();
    rect.setFill(fromColor);

    FillTransition tr = new FillTransition();
    tr.setShape(rect);
    tr.setDuration(Duration.millis(duration));
    tr.setFromValue(fromColor);
    tr.setToValue(toColor);

    tr.setInterpolator(new Interpolator() {
        @Override
        protected double curve(double t) {
            control.setBackground(new Background(new BackgroundFill(rect.getFill(), CornerRadii.EMPTY, Insets.EMPTY)));
            return t;
        }
    });

    tr.play();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40856530" questionTitle="In libGDX is there a JavaFX's PathTransition equivalent?">
<Answer><![CDATA[package tech.otter.gdxsandbox.demos;

import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.CatmullRomSpline;
import com.badlogic.gdx.math.Path;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Action;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;

public class PathDemo extends Demo {
    private ShapeRenderer sr;
    private Stage stage;

    public PathDemo() {
        super("Action Demo");
        stage = new Stage();
    }

    @Override
    public void show() {
        sr = new ShapeRenderer();
        Actor ourCircle = new SimpleCircleActor(sr, 10f);
        stage.addActor(ourCircle);

        ourCircle.addAction(new PathAction(5f, 50f, 50f, 100f, 60f, 300f, 200f, 100f, 400f));
    }

    @Override
    public void render(float delta) {
        sr.setAutoShapeType(true);
        sr.begin();
        sr.set(ShapeRenderer.ShapeType.Filled);
        stage.act(delta);
        stage.draw();
        sr.end();
    }

    @Override
    public void dispose() {
        stage.dispose();
        sr.dispose();
    }

    private class SimpleCircleActor extends Actor {
        private ShapeRenderer renderer;
        private float radius;

        public SimpleCircleActor(ShapeRenderer renderer, float radius) {
            this.renderer = renderer;
            this.radius = radius;
        }

        /**
         * Assumes something outside is setting the ShapeRenderer type/begin/end.
         * Don't do this at home, kids.
         */
        @Override
        public void draw(Batch batch, float delta) {
            renderer.circle(this.getX(), this.getY(), this.radius);
        }
    }

    private class PathAction extends Action {
        private Path<Vector2> path;
        private float current;
        private float duration;
        public PathAction(float duration, float... coordinates) {
            this.duration = duration;
            this.current = 0;

            Vector2[] dataSet = new Vector2[coordinates.length / 2];
            for(int i = 0; i < dataSet.length; i++) {
                dataSet[i] = new Vector2(coordinates[2*i], coordinates[2*i+1]);
            }
            this.path = new CatmullRomSpline<Vector2>(dataSet, true);
        }
        @Override
        public boolean act(float delta) {
            if(duration == current) return true; // The action has already completed.

            if(current + delta >= duration) {
                current = duration;
            } else {
                current += delta;
            }

            Vector2 out = new Vector2(); // Get our position on the path.
            this.path.valueAt(out, current / duration);
            this.actor.setPosition(out.x, out.y);

            return duration == current; // Return whether we are now complete.
        }
    }
}]]></Answer>
<Answer><![CDATA[import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.actions.SequenceAction;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author jmart
 */
public class PathActionMaker {

    private final float[][] points;
    private float speed = 0;
    private final float rotationSpeed = 600;
    private float[] screenSize;

    /**
     *
     * @param points - all the path points that must be traversed
     * @param duration - how long it should take to traverse the path points
     * @param screenSize - the size of the screen
     */
    public PathActionMaker(float[][] points, float duration, float[] screenSize) {
        this.points = points;
        this.speed = getSpeed(points, duration);
        this.screenSize = screenSize;
    }

    /**
     *
     * @param speed - the speed at which the Actor should move traverse through
     * all the points
     * @param points - all the path points that must be traversed
     * @param screenSize - the size of the screen
     */
    public PathActionMaker(float speed, float[][] points, float[] screenSize) {
        this.points = points;
        this.speed = speed;
        this.screenSize = screenSize;
    }

    /**
     * The offsets are used to allow centering of an actor on the provided
     * points.
     *
     * @param xOffset
     * @param yOffset
     * @param offScreenIndent number of pixels to move the actor out of screen
     * when entering and leaving
     * @return
     */
    public SequenceAction getAction(float xOffset, float yOffset, float offScreenIndent) {
        float[] prev = null;
        float prevTheta = 0;
        int i = 0;
        SequenceAction seqAction = Actions.sequence();
        boolean firstRotation = true;
        float[][] fixedPoints = getOffSetFixedPoints(points, xOffset, yOffset, offScreenIndent);
        for (float[] point : fixedPoints) {
            float[] p = point;
            if (prev == null) {
                seqAction.addAction(Actions.moveTo(p[0], p[1]));
            } else {
                float dist = MathUtils.getDistance(prev[0], prev[1], p[0], p[1]);
                float time = dist / speed;
                float theta = MathUtils.angle(prev[0], prev[1], p[0], p[1]) + 90;
                if (theta > 360) {
                    theta -= 360;
                }
                float dTheta = Math.abs(prevTheta - theta);
                float rotateDuration = dTheta / rotationSpeed;
                // the first rotation should be immediate.
                if (firstRotation) {
                    firstRotation = false;
                    seqAction.addAction(Actions.parallel(
                            Actions.moveTo(p[0], p[1], time),
                            Actions.rotateTo(theta)));//...rotation duration is 0, aka immediate
                } else {
                    seqAction.addAction(Actions.parallel(
                            Actions.moveTo(p[0], p[1], time),
                            Actions.rotateTo(theta, rotateDuration)));
                }
                prevTheta = theta;
            }
            prev = p;
        }
        return seqAction;
    }

    public float[][] getOffSetFixedPoints(float[][] points, float xOffset, float yOffset, float offScreenIndent) {
        List<Float[]> list = new ArrayList<>();

        //apply offset indent at beginning of path
        float[] p1 = points[0];
        float[] p2 = points[1];
        float slope = (p1[1] - p2[1]) / (p1[0] - p2[0]);
        float c = p1[1] - slope * p1[0];

        if (p1[0] == 0) {
            float x = -offScreenIndent;
            float y = slope * x + c;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p1[0] == screenSize[0]) {
            float x = screenSize[0] + offScreenIndent;
            float y = slope * x + c;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p1[1] == 0) {
            float y = -offScreenIndent;
            float x = (y - c) / slope;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p1[1] == screenSize[1]) {
            float y = screenSize[1] + offScreenIndent;
            float x = (y - c) / slope;
            list.add(new Float[]{x - xOffset, y - yOffset});
        }

        //apply the remaining points
        for (float[] point : points) {
            float[] p = {point[0] - xOffset, point[1] - yOffset};
            addPointToList(p, list);
        }

        //apply offscreen indent at end of path
        float[] p4 = points[points.length - 1];
        float[] p3 = points[points.length - 2];
        slope = (p3[1] - p4[1]) / (p3[0] - p4[0]);
        c = p3[1] - slope * p3[0];

        if (p4[0] <= 0) {
            float x = -offScreenIndent;
            float y = slope * x + c;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p4[0] >= screenSize[0]) {
            float x = screenSize[0] + offScreenIndent;
            float y = slope * x + c;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p4[1] <= 0) {
            float y = -offScreenIndent;
            float x = (y - c) / slope;
            list.add(new Float[]{x - xOffset, y - yOffset});
        } else if (p4[1] >= screenSize[1]) {
            float y = screenSize[1] + offScreenIndent;
            float x = (y - c) / slope;
            list.add(new Float[]{x - xOffset, y - yOffset});
        }

        //convert list to float[][]
        float[][] rv = new float[list.size()][];
        int i = 0;
        for (Float[] p : list) {
            float[] j = new float[2];
            j[0] = p[0];
            j[1] = p[1];
            rv[i++] = j;
        }
        return rv;
    }

    private static void addPointToList(float[] point, List<Float[]> list) {
        list.add(new Float[]{point[0], point[1]});
    }

    private float getSpeed(float[][] points, float duration) {
        //speed = distance/time
        float distance = MathUtils.getDistance(points);
        return distance / duration;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40830859" questionTitle="How to unite two polygons so that output is polygon not path (javafx)?">
<Answer><![CDATA[import java.util.ArrayList;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;



public class JavaFXApplication31 extends Application {

    @Override
    public void start(Stage primaryStage) {

        Polygon p1 = new Polygon();
        p1.getPoints().addAll(new Double[]{
            60.0, 60.0,
            80.0, 70.0,
            70.0, 80.0 });

        Polygon p2 = new Polygon();
        p2.getPoints().addAll(new Double[]{
            40.0, 40.0,
            60.0, 50.0,
            50.0, 60.0 });        

        AnchorPane root = new AnchorPane();


        Button btn = new Button();
        btn.setText("Click me!'");
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                System.out.println("Polygon unioned!");
                Shape union = Polygon.union(p1, p2);
                union.setFill(Color.BLUE);
                root.getChildren().add(union);
            }
        });

        Button btn2 = new Button();
        btn2.setText("New Polygon union!'");
        btn2.setLayoutX(100);
        btn2.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                Polygon p3 = createNewPolygonUnion(p1, p2);
                p3.setFill(Color.RED);
                root.getChildren().add(p3);
            }
        });

        root.getChildren().addAll(p1, p2, btn, btn2);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }


    Polygon createNewPolygonUnion(Polygon one, Polygon two)
    {
        Polygon p3 = new Polygon();

        ArrayList<Double> onePoints = new ArrayList();
        ArrayList<Double> twoPoints = new ArrayList();
        ArrayList<Double> threePoints = new ArrayList();

        for(int i = 0; i < one.getPoints().size(); i++)
        {
            onePoints.add(one.getPoints().get(i));   
            twoPoints.add(two.getPoints().get(i));            
        }

        for(int i = 0; i < onePoints.size(); i++)
        {
            threePoints.add(onePoints.get(i) + twoPoints.get(i));
        }

        p3.getPoints().addAll(threePoints);

        return p3;
    }
}]]></Answer>
<Answer><![CDATA[//createing both polygon objects p1 and p2
Polygon p1 = new Polygon();
p1.getPoints().addAll(new Double[]{
            0.0, 0.0,
            20.0, 10.0,
            10.0, 20.0 });

Polygon p2 = new Polygon();
p2.getPoints().addAll(new Double[]{
            10.0, 0.0,
            25.0, 10.0,
            5.0, 20.0 });

// Taking the union that results in a Path object
Path p3 = (Path) Polygon.union(p1, p2);

// Array of points for the new polygon
Double[] points = new Double[(p3.getElements().size() - 1)*2];

int i = 0;
// going through all the path elements in the path and adding the x and y coordinates to points
for(PathElement el : p3.getElements()){
    if(el instanceof MoveTo){
        MoveTo mt = (MoveTo) el;
        points[i] = mt.getX();
        points[i+1] = mt.getY();
    }
    if(el instanceof LineTo){
        LineTo lt = (LineTo) el;
        points[i] = lt.getX();
        points[i+1] = lt.getY();
    }
    i += 2;
}

// creating new Polygon with these points
Polygon newPolygon = new Polygon();
newPolygon.getPoints().addAll(points);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40793022" questionTitle="How to get and pass a value from a class to another?">
<Answer><![CDATA[public class Start extends Application {

  public static void main(String[] args)  {
      Application.launch(Start.class,"myClass");
  }

  @Override
  public void start(Stage primaryStage) throws Exception {
    Label label = new Label("Name:");
    TextField textField = new TextField();
    HBox hBox = new HBox();
    hBox.getChildren().addAll(label,textField);
    hBox.setSpacing(10);
    Scene scene = new Scene(hBox,300,200);
    primaryStage.setScene(scene);
    primaryStage.setTitle("Hello");
    primaryStage.show();

    textField.textProperty().addListener(new ChangeListener<String>() {
        @Override
        public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
          //Handle the change in the text value here
        }
    });
  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class PassParameter extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        Label label = new Label("Name:");
        TextField textField = new TextField();
        HBox hBox = new HBox(10, label,textField);
        hBox.setAlignment(Pos.CENTER);
        Button button = new Button("Show User Input In Console");
        // On click, print the text from the TextField in the console
        button.setOnAction( e -> System.out.println(textField.getText()));
        VBox vBox = new VBox(10, hBox, button);
        vBox.setAlignment(Pos.CENTER);
        Scene scene = new Scene(vBox,300,200);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Hello");
        primaryStage.show();
    }

    public static void main(String[] args) {
        Application.launch();
    }
}]]></Answer>
<Answer><![CDATA[public class HelloScreen {
    private TextField textField ;
    private VBox view ;

    public HelloScreen() {
        Label label = new Label("Name:");
        textField = new TextField();
        HBox hBox = new HBox(10, label,textField);
        hBox.setAlignment(Pos.CENTER);
        Button button = new Button("Show User Input In Console");

        // On click, close the window:
        button.setOnAction( e -> view.getScene().getWindow().hide());

        view = new VBox(10, hBox, button);
        view.setAlignment(Pos.CENTER);
    }

    public String getMessage() {
        return textField.getText();
    }

    public Parent getView() {
        return view ;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40792408" questionTitle="creating user input grid-- JavaFX">
<Answer><![CDATA[createGraph.setOnAction((ActionEvent event) -> 
    {
        int size = Integer.parseInt(number.getText());
        //GridPane.setRowSpan(rowX, numb);
        //GridPane.setColumnSpan(colY, numb);
        Button [][] board = new Button [size][size];


        for (int row = 0; row < size; row++)
        {
            for (int col = 0; col < size; col++)
            {

               Button button = new Button();
              // GridPane.setConstraints(button, 3, 3); 


               board[row][col] = button;



                //GridPane.setRowIndex(board[row][col], row);


                //GridPane.setColumnIndex(board[row][col], col);

                if ( row + col % 2 == 0 ) { //creates color pattern
                    button.setStyle("-fx-background-color: red;");
                } else if (row + col % 2 == 1) {
                    button.setStyle("-fx-background-color: black;");
                }


                gridPane.add(button, col, row);



            }
        }
    });
pane.getChildren().add(gridPane); //this line of code was out of place and breaking everything
//ScrollPane scrollPane = new ScrollPane(gridPane);
pane.setAlignment(Pos.CENTER);
pane.getChildren().addAll(layoutInput,number,createGraph);`]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    GridPane grid = new GridPane();

    TextField number = new TextField();
    TextFormatter<Integer> formatter = new TextFormatter<>(new IntegerStringConverter());
    number.setTextFormatter(formatter);

    Button btn = new Button("Fill");
    btn.setOnAction((ActionEvent event) -> {
        Integer i = formatter.getValue();
        if (i == null) {
            return;
        }

        final int n = i;
        grid.getChildren().clear();

        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                Button button = new Button();
                button.setPrefSize(30, 30);
                button.setStyle("-fx-background-color:" + ((c + r) % 2 == 0 ? "red;" : "black;"));
                grid.add(button, c, r);
            }
        }
    });

    Scene scene = new Scene(new VBox(new HBox(number, btn), grid), 500, 500);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40777560" questionTitle="Auto scroll in javaFX">
<Answer><![CDATA[public void start(Stage stage) {
    TextField textField = new TextField();
    textField.setPrefSize(50, 30);

    Button button = new Button("Send");
    button.setPrefSize(80, 30);

    VBox container = new VBox();

    ListView<String> listView = new ListView();
    listView.setFocusTraversable(false);
    listView.setCellFactory(lv -> new ListCell<String>() {

        private final Text text;

        {
            text = new Text();
            setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            setGraphic(text);

            // bind wrapping width to available size
            text.wrappingWidthProperty().bind(Bindings.createDoubleBinding(() -> {
                Insets padding = getPadding();
                return getWidth() - padding.getLeft() - padding.getRight();
            }, widthProperty(), paddingProperty()));

        }

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            if (empty) {
                text.setText(null);
            } else {
                text.setText(item);
            }
        }

    });

    container.setPadding(new Insets(10));
    container.getChildren().addAll(listView, new HBox(textField, button));
    VBox.setVgrow(listView, Priority.ALWAYS);

    HBox.setHgrow(textField, Priority.ALWAYS);
    HBox.setHgrow(button, Priority.NEVER);

    EventHandler<ActionEvent> handler = e -> {
        // add new message
        listView.getItems().add(textField.getText());

        textField.clear();
        textField.requestFocus();

        // scroll to newly added item
        listView.scrollTo(listView.getItems().size()-1);
    };

    textField.setOnAction(handler);
    button.setOnAction(handler);

    Scene scene = new Scene(container, 400, 300);
    stage.setScene(scene);
    stage.setTitle("ChatBox");
    stage.show();
}]]></Answer>
<Answer><![CDATA[package com.grs.stackOverFlow.pack161124;

import javafx.application.Application;
import javafx.beans.value.ObservableValue;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.stage.Stage;

public class ChatBox extends Application{
    final ScrollPane sp = new ScrollPane();
    public static void main(String[] args){
        launch(args);
    }
    public void start(Stage stage){
        TextFlow textFlow = new TextFlow();
        //textFlow.setPadding(new Insets(10));
        textFlow.setLineSpacing(10);
        //textFlow.setPrefSize(300,300);
        TextField textField = new TextField();
        textField.setPrefSize(50,30);
        Button button = new Button("Send");
        button.setPrefSize(80,30);
        VBox container = new VBox();
        VBox box = new VBox();
        box.getChildren().addAll(sp,textFlow);
        container.setPadding(new Insets(10));
        container.getChildren().addAll(box, new HBox(textField, button));
        VBox.setVgrow(sp, Priority.ALWAYS);
        VBox.setVgrow(textFlow, Priority.ALWAYS);
        textField.prefWidthProperty().bind(container.widthProperty().subtract(button.prefWidthProperty()));

        // On Enter press
        textField.setOnKeyPressed(e -> {
            if(e.getCode() == KeyCode.ENTER) {
                button.fire();
            }
        });

        button.setOnAction(e -> {
            Text text;
            if(textFlow.getChildren().size()==0){
                text = new Text(textField.getText());
            } else {
                // Add new line if not the first child
                text = new Text("\n" + textField.getText());
            }
            textFlow.getChildren().add(text);
            textField.clear();
            textField.requestFocus();
        });
        VBox vb = new VBox();
        vb.getChildren().addAll(textFlow);
        sp.setVmax(440);
        sp.setPrefSize(400, 300);
        sp.setContent(vb);
        sp.vvalueProperty().bind((ObservableValue<? extends Number>) vb.heightProperty());
        //sp.setPannable(true);
        Scene scene = new Scene(container, 400, 300);
        stage.setScene(scene);
        stage.setTitle("ChatBox");
        stage.show();
    }
}

[![enter image description here][1]][1]]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40733816" questionTitle="How to connect two points in javaFX in two-axis chart">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    NumberAxis xAxis1 = new NumberAxis();
    NumberAxis yAxis1 = new NumberAxis();
    LineChart<Number, Number> chart = new LineChart<Number, Number>(xAxis1, yAxis1);

    double p1x = 0;
    double p1y = 0;
    double p2x = 5;
    double p2y = 5;
    double p3x = 3;
    double p3y = 5;

    Series<Number, Number> series1 = new Series<>();
    series1.getData().add(new Data<>(p1x, p1y));
    series1.getData().add(new Data<>(p2x, p2y));
    chart.getData().add(series1);

    Series<Number, Number> series2 = new Series<>();
    series2.getData().add(new Data<>(p2x, p2y));
    series2.getData().add(new Data<>(p3x, p3y));
    chart.getData().add(series2);

    primaryStage.setScene(new Scene(chart));
    primaryStage.show();

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    NumberAxis xAxis1 = new NumberAxis();
    NumberAxis yAxis1 = new NumberAxis();
    LineChart<Number, Number> chart = new LineChart<Number, Number>(xAxis1, yAxis1);

    Random random = new Random();

    ArrayList<Series<Number, Number>> seriesContainer = new ArrayList();

    for(int i = 0; i < 10; i++)
    {
        Series<Number, Number> series1 = new Series<>();
        series1.getData().add(new XYChart.Data<>(random.nextDouble() * 100, random.nextDouble() * 100));
        series1.getData().add(new XYChart.Data<>(random.nextDouble() * 100, random.nextDouble() * 100));
        seriesContainer.add(series1);            
    }
    chart.getData().addAll(seriesContainer);    

    primaryStage.setScene(new Scene(chart));
    primaryStage.show();

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40729795" questionTitle="JavaFX Area Chart 100% line">
<Answer><![CDATA[public class Horse extends Application {

    public static void main(String args[]) {
        launch(args);
    }

    private Line line;
    private NumberAxis yAxis;
    private Region plotArea;
    private Pane chartContent;

    @Override
    public void start(Stage primaryStage) throws Exception {
        final CategoryAxis xAxis = new CategoryAxis();
        yAxis = new NumberAxis();
        final AreaChart<String, Number> chart = new AreaChart<String, Number>(xAxis, yAxis);
        Series<String, Number> series = new Series<>();
        series.getData().add(new Data<>("foo", 50));
        series.getData().add(new Data<>("bar", 25));
        series.getData().add(new Data<>("baz", 125));

        chart.getData().add(series);

        plotArea = (Region) chart.lookup(".chart-plot-background");
        chartContent = (Pane) chart.lookup(".chart-content");
        line = new Line();
        chartContent.getChildren().add(line);
        primaryStage.setScene(new Scene(chart));
        primaryStage.show();

        chart.boundsInParentProperty().addListener((obs, oldValue, newValue) -> {
            update();
        });
        plotArea.boundsInLocalProperty().addListener((obs, oldValue, newValue) -> {
            update();
        });
        update();

    }

    private void update() {
        double location = yAxis.getDisplayPosition(100);
        Point2D a = plotArea.localToScene(new Point2D(0, location));
        Point2D b = plotArea.localToScene(new Point2D(plotArea.getWidth(), location));

        Point2D aTrans = chartContent.sceneToLocal(a);
        Point2D bTrans = chartContent.sceneToLocal(b);

        line.setStartX(aTrans.getX());
        line.setStartY(aTrans.getY());
        line.setEndX(bTrans.getX());
        line.setEndY(bTrans.getY());
    }

}]]></Answer>
<Answer><![CDATA[import java.util.Random;
import java.util.stream.Collectors;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart.Data;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

public class LineChartWithHorizontal extends Application {

    @Override
    public void start(Stage primaryStage) {
        LineChart<String, Number> chart = new LineChart<String, Number>(new CategoryAxis(), new NumberAxis()) {

//          Line line = new Line();
//          
//          @Override
//          protected void layoutPlotChildren() {
//              super.layoutPlotChildren();
//              getPlotChildren().remove(line);
//              line.setStartX(0);
//              line.setEndX(600);
//              double y = getYAxis().getDisplayPosition(100.0);
//              line.setStartY(y);
//              line.setEndY(y);
//              getPlotChildren().add(line);
//          }

            @Override
            protected void layoutPlotChildren() {
                super.layoutPlotChildren();
                ObservableList<Node> removeable = FXCollections.observableArrayList();
                removeable.addAll(getPlotChildren().stream().filter(node -> node instanceof Line).collect(Collectors.toList()));
                getPlotChildren().removeAll(removeable);
                double y = getYAxis().getDisplayPosition(100.0);
                System.out.println(y);
                Line line = new Line();
                line.setStartX(0.0);
                line.setStartY(y);
                line.setEndX(600.0);
                line.setEndY(y);
                getPlotChildren().add(line);
            }
        };

        Random rng = new Random();
        for (int i = 1 ; i <= 4; i++) {
            Series<String, Number> s = new Series<>();
            s.setName("Data "+i);
            chart.getData().add(s);
        }
        for (int i = 1 ; i <= 6; i++) {
            for (int s = 0 ; s < 4 ; s++) {
                chart.getData().get(s).getData().add(new Data<>("Item "+i, rng.nextDouble()*200));
            }
        }

        primaryStage.setScene(new Scene(chart, 600, 600));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40722003" questionTitle="Allow deselection of RadioButton with a ToggleGroup">
<Answer><![CDATA[public class RadioButtonTest extends Application {
    @Override
    public void start(Stage primaryStage) {
        Pane root = createPane();
        primaryStage.setScene(new Scene(root));
        primaryStage.show();
    }

    private Pane createPane() {
        VBox pane = new VBox();
        ToggleGroup tg = new ToggleGroup();
        RadioButton b1 = new RadioButton("one");
        RadioButton b2 = new RadioButton("two");
        tg.getToggles().addAll(b1, b2);

        RadioButtonSelectionHandler b1Selection = new RadioButtonSelectionHandler(b1);
        b1.setOnMousePressed(b1Selection.getMousePressed());
        b1.setOnMouseReleased(b1Selection.getMouseReleased());

        RadioButtonSelectionHandler b2Selection = new RadioButtonSelectionHandler(b2);
        b2.setOnMousePressed(b2Selection.getMousePressed());
        b2.setOnMouseReleased(b2Selection.getMouseReleased());

        pane.getChildren().addAll(b1, b2);
        pane.setPrefHeight(200);
        pane.setPrefWidth(200);
        return pane;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class UnselectableRadioGroup extends Application {
    /**
     * Custom radioBox with behaviour of ToggleButton. 
     */
    public static class MyRadioButton extends RadioButton {

        /**
         * Overridden to revert to ToggleButton behaviour.
         */
        @Override
        public void fire() {
            if (!isDisabled()) {
                setSelected(!isSelected());
                fireEvent(new ActionEvent());
            }
        }

        public MyRadioButton(String text) {
            super(text);
        }

    }

    private EventHandler<MouseEvent> mouseHandler;

    private void addListeners(RadioButton nv) {
        if (mouseHandler == null) {
            mouseHandler = e -> {
                e.consume();
                nv.getToggleGroup().selectToggle(null);
            };
        }
        nv.addEventFilter(MouseEvent.MOUSE_RELEASED, mouseHandler);
    }

    private void removeListeners(RadioButton ov) {
        ov.removeEventFilter(MouseEvent.MOUSE_RELEASED, mouseHandler);
    }

    private Parent getContent() {
        // dynamic un/register event handlers
        ObservableList<RadioButton> radios = FXCollections.observableArrayList(
                new RadioButton("one"), new RadioButton("other"), new RadioButton("third")
                );
        ToggleGroup group = new ToggleGroup();
        group.getToggles().addAll(radios);

        group.selectedToggleProperty().addListener((src, ov, nv) -> {
            if (ov instanceof RadioButton) {
                removeListeners((RadioButton) ov);
            }
            if (nv instanceof RadioButton) {
                addListeners((RadioButton) nv);
            }
        });

        VBox radioBox = new VBox(10);
        radioBox.getChildren().addAll(radios);

        // RadioButton reverted to ToggleButton
        ObservableList<MyRadioButton> toggles = FXCollections.observableArrayList(
                new MyRadioButton("one"), new MyRadioButton("other"), new MyRadioButton("third")
                );
        ToggleGroup myGroup = new ToggleGroup();
        myGroup.getToggles().addAll(toggles);
        VBox myRadioBox = new VBox(10);
        myRadioBox.getChildren().addAll(toggles);

        HBox content = new HBox(10, radioBox, myRadioBox);
        BorderPane pane = new BorderPane(content);
        return pane;
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Scene scene = new Scene(getContent());
        primaryStage.setScene(scene);
        //primaryStage.setTitle(FXUtils.version());
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40721669" questionTitle="How to refresh ListView in JavaFX">
<Answer><![CDATA[@FXML ListView lv1, lv2;

ArrayList options = new ArrayList();
ObservableList<String> items;

ObservableList<String> items2;


//This is used to get the selected item from lv1 and add it to lv2
@FXML
private void handleButtonAction(ActionEvent event) {
    items2.add(lv1.getSelectionModel().getSelectedItem().toString());             
}

//This is used to get all items from lv1 and add them to lv2
@FXML 
private void handleGetAllButtonAction(ActionEvent event)
{
    for(String entry : items)
    {
       items2.add(entry);
    }
}

@Override
public void initialize(URL url, ResourceBundle rb) {
    // TODO

   options.add("hello");
   options.add("bye");
   options.add("hola");
   items = FXCollections.observableArrayList(options);
   items2 = FXCollections.observableArrayList();

   System.out.println(items.size());
   lv1.setItems(items);
   lv2.setItems(items2);

}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class MoveItemsBetweenListViews extends Application {

    private ObservableList<String> sourceItems;
    private ObservableList<String> targetItems;



    @Override
    public void start(Stage primaryStage) {
        sourceItems = FXCollections.observableArrayList("One", "Two", "Three", "Four");
        targetItems = FXCollections.observableArrayList();

        ListView<String> sourceListView = new ListView<>(sourceItems);
        ListView<String> targetListView = new ListView<>(targetItems);

        Button moveAllButton = new Button(">>");
        Button moveSelectedButton = new Button(">");

        moveAllButton.setOnAction(e -> moveItems(sourceItems));
        moveSelectedButton.setOnAction(e -> moveItems(sourceListView.getSelectionModel().getSelectedItems()));

        VBox buttons = new VBox(10, moveAllButton, moveSelectedButton);
        buttons.setAlignment(Pos.CENTER);

        BorderPane root = new BorderPane(buttons, null, targetListView, null, sourceListView);
        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void moveItems(List<String> itemsToMove) {
        List<String> movingItems = new ArrayList<>(itemsToMove);
        sourceItems.removeAll(movingItems);
        targetItems.addAll(movingItems);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40719095" questionTitle="Embed native video view in gluon app">
<Answer><![CDATA[package my.application;

import ch.cnlab.disentis.util.Constants;
import org.robovm.apple.foundation.*;
import org.robovm.apple.uikit.UIApplication;
import org.robovm.apple.uikit.UIDocumentInteractionController;
import org.robovm.apple.uikit.UIDocumentInteractionControllerDelegateAdapter;
import org.robovm.apple.uikit.UIViewController;

import java.io.File;
import java.util.logging.Logger;

public class NativeVideoServiceIOS extends PathHelperIOS implements NativeVideoService {
    private static final Logger LOG = Logger.getLogger(NativeVideoServiceIOS.class.getName());

    public NativeVideoServiceIOS() {
        LOG.warning("Initialized Native Video Service with path: " + this.pathBase);
    }

    @Override
    public void triggerPlatformApp(String filename) {
        String fullfile = pathBase.getAbsolutePath() + filename;
        NSURL url = new NSURL(NSURLScheme.File, "", fullfile);
        UIDocumentInteractionController popup = new UIDocumentInteractionController(url);
        popup.setDelegate(new UIDocumentInteractionControllerDelegateAdapter() {
            @Override
            public UIViewController getViewControllerForPreview(UIDocumentInteractionController controller) {
                return UIApplication.getSharedApplication()
                        .getWindows().first().getRootViewController();
            }
        });
        popup.presentPreview(true);
    }

}]]></Answer>
<Answer><![CDATA[package com.gluonhq.charm.down.plugins.android;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.graphics.SurfaceTexture;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Surface;
import android.view.TextureView;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import com.gluonhq.charm.down.plugins.VideoService;
import java.io.IOException;
import javafxports.android.FXActivity;

public class AndroidVideoService implements VideoService, TextureView.SurfaceTextureListener {
    private static final String TAG = AndroidVideoService.class.getName();
    private MediaPlayer mMediaPlayer;
    private String videoName;

    private final RelativeLayout relativeLayout;
    private final TextureView textureView;
    private final DisplayMetrics displayMetrics;

    public AndroidVideoService() {
        displayMetrics = new DisplayMetrics();
        WindowManager windowManager = (WindowManager) FXActivity.getInstance().getSystemService(Context.WINDOW_SERVICE);
        windowManager.getDefaultDisplay().getMetrics(displayMetrics);

        relativeLayout = new RelativeLayout(FXActivity.getInstance());

        textureView = new TextureView(FXActivity.getInstance());
        textureView.setSurfaceTextureListener(this);
        relativeLayout.addView(textureView);
    }

    @Override
    public void play(String videoName) {
        this.videoName = videoName;
        stop();
        FXActivity.getInstance().runOnUiThread(() -> {
            FXActivity.getViewGroup().addView(relativeLayout);
        });
    }

    @Override
    public void stop() {
        if (mMediaPlayer != null) {
            mMediaPlayer.stop();
            mMediaPlayer.release();
            mMediaPlayer = null;
        }
        if (relativeLayout != null) {
            FXActivity.getInstance().runOnUiThread(() -> {
                FXActivity.getViewGroup().removeView(relativeLayout);
            });
        }
    }

    @Override
    public void pause() {
        if (mMediaPlayer != null) {
            mMediaPlayer.pause();
        }
    }

    @Override
    public void resume() {
        if (mMediaPlayer != null) { 
            mMediaPlayer.start();
        }
    }

    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture st, int i, int i1) {
        Surface surface = new Surface(st);
        try {
            AssetFileDescriptor afd = FXActivity.getInstance().getAssets().openFd(videoName);
            calculateVideoSize(afd);
            mMediaPlayer = new MediaPlayer();
            mMediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            mMediaPlayer.setSurface(surface);
            mMediaPlayer.setLooping(true);
            mMediaPlayer.prepareAsync();
            mMediaPlayer.setOnPreparedListener(mediaPlayer -> mediaPlayer.start());

        } catch (IllegalArgumentException | SecurityException | IllegalStateException | IOException e) {
            Log.d(TAG, e.getMessage());
        }
    }

    @Override public void onSurfaceTextureSizeChanged(SurfaceTexture st, int i, int i1) { }
    @Override public boolean onSurfaceTextureDestroyed(SurfaceTexture st) { return true; }
    @Override public void onSurfaceTextureUpdated(SurfaceTexture st) { }

    private void calculateVideoSize(AssetFileDescriptor afd) {
        try {
            MediaMetadataRetriever metaRetriever = new MediaMetadataRetriever();
            metaRetriever.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            String height = metaRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
            String width = metaRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
            double factor = Double.parseDouble(width) > 0 ? Double.parseDouble(height) / Double.parseDouble(width) : 1d;
            // 95% screen width
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams((int) (0.95 * displayMetrics.widthPixels), 
                    (int) (0.95 * displayMetrics.widthPixels * factor));
            lp.addRule(RelativeLayout.CENTER_IN_PARENT);
            textureView.setLayoutParams(lp);
        } catch (NumberFormatException e) {
            Log.d(TAG, e.getMessage());
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40670704" questionTitle="Chunking a text file using Java 8 streams">
<Answer><![CDATA[public static Stream<String> fileInChunks(
        String filePath, int chunkSize) throws IOException {

    FileChannel ch=FileChannel.open(Paths.get(filePath), StandardOpenOption.READ);
    CharsetDecoder dec = Charset.defaultCharset().newDecoder();
    long size = (long)(ch.size()*dec.averageCharsPerByte());
    Reader r = Channels.newReader(ch, dec, chunkSize);
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<String>(
            (size+chunkSize-1)/chunkSize, Spliterator.ORDERED|Spliterator.NONNULL) {
        CharBuffer buf=CharBuffer.allocate(chunkSize);
        public boolean tryAdvance(Consumer<? super String> processor) {
            CharBuffer buf=this.buf;
            if(buf==null) return false;
            boolean more=true;
            while(buf.hasRemaining() && more) try {
                if(r.read(buf)<0) more=false;
            } catch(IOException ex) { throw new UncheckedIOException(ex); }
            if(more) {
                buf.flip();
                int oldLimit=buf.limit();
                for(int p=oldLimit-1; p>0; p--)
                    if(buf.charAt(p)=='\n' || buf.charAt(p)=='\r') {
                        buf.limit(p+1);
                        break;
                    }
                processor.accept(buf.toString());
                buf.position(buf.limit()).limit(oldLimit);
                buf.compact();
                return true;
            }
            this.buf=null;
            if(buf.position()>0) {
                buf.flip();
                processor.accept(buf.toString());
                return true;
            }
            return false;
        }
    }, false);
}]]></Answer>
<Answer><![CDATA[package com.grs.stackOverFlow.pack01;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

    public class FileUtils {
        private static long processed=1;

        public static void main(String[] args) throws IOException {
            readFileInChunks("src/com/grs/stackOverFlow/pack01/demo.txt", 3, System.out::println);
        }

        public static void readFileInChunks(String filePath, int chunkSize, Consumer<StringBuilder> processor) throws IOException {

            List<String> lines = Files.readAllLines(Paths.get(filePath));
            String firstLine=lines.get(0);

            long splitCount=lines.size()<chunkSize?1:lines.size()/chunkSize;

            for(int i=1;i<=splitCount;i++){
                Optional<String> result=lines.stream()
                     .skip(processed)
                     .limit(chunkSize)
                     .reduce((a,b) -> {processed++; return a+ "\n"+ b;});
                //reduce increments processed one less time as it starts with 2 element at a time
                processed++;
                processor.accept(new StringBuilder("chunk no. = " + i +  "\n" + firstLine+ "\n"+ result.orElse("") ));
            }

        }

    }]]></Answer>
<Answer><![CDATA[private static final class ToChunksCollector<T> implements Collector<T, List<StringBuilder>, List<StringBuilder>> {

    private final int chunkSize;

    public ToChunksCollector(int chunkSize) {
        this.chunkSize = chunkSize;
    }

    @Override
    public Supplier<List<StringBuilder>> supplier() {
        return ArrayList::new;
    }

    @Override
    public BiConsumer<List<StringBuilder>, T> accumulator() {
        return (list, line) -> {
            if (list.size() == 0) {
                list.add(new StringBuilder());
            }
            StringBuilder lastBuilder = list.get(list.size() - 1);
            String[] linesInCurrentBuilder = lastBuilder.toString().split("\n");
            // no more room
            if (linesInCurrentBuilder.length == chunkSize) {
                String lastLine = linesInCurrentBuilder[chunkSize - 1];
                StringBuilder builder = new StringBuilder();
                builder.append(lastLine).append("\n");
                list.add(builder);
            } else {
                lastBuilder.append(line).append("\n");
            }
        };
    }

    @Override
    public BinaryOperator<List<StringBuilder>> combiner() {
        return (list1, list2) -> {
            list1.addAll(list2);
            return list1;
        };
    }

    @Override
    public Function<List<StringBuilder>, List<StringBuilder>> finisher() {
        return Function.identity();
    }

    // TODO add the relevant characterics
    @Override
    public Set<java.util.stream.Collector.Characteristics> characteristics() {
        return EnumSet.noneOf(Characteristics.class);
    }

}]]></Answer>
<Answer><![CDATA[public static Stream<String> readFileInChunks(String filePath, int chunkSize) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(filePath));

    Iterator<String> iter = new Iterator<String>() {
        String nextChunk = null;

        @Override
        public boolean hasNext() {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < chunkSize; i++) {
                try {
                    String nextLine = br.readLine();
                    if (nextLine == null) break;
                    sb.append(nextLine).append("\n");
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            }
            if (sb.length() == 0) {
                nextChunk = null;
                return false;
            } else {
                nextChunk = sb.toString();
                return true;
            }
        }

        @Override
        public String next() {
            if (nextChunk != null || hasNext()) {
                String chunk = nextChunk;
                nextChunk = null;
                return chunk;
            } else {
                throw new NoSuchElementException();
            }
        }
    };
    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
            iter, Spliterator.ORDERED | Spliterator.NONNULL), false)
            .onClose(() -> {
                try {
                    br.close();
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40660267" questionTitle="In my ArrayList of Arraylists, why are the all the actions on individual elements effecting all other indexes?">
<Answer><![CDATA[import java.util.ArrayList;

public class BookThingy {

    public static void main(String[] args) {
        ArrayList<ArrayList<PageContents>> book = new ArrayList<>(); //A list of lists
        ArrayList<PageContents> page = new ArrayList<>(); //A List of objects

        book.add(page); //Add new(first) page in book.
        PageContents pageContents1 = new PageContents(); //Create a new line
        pageContents1.setLine("This is Line 1 on Page 1"); //Edit the line
        book.get(0).add(pageContents1); //Add the new (first) line to the first page of the book.

        System.out.println("Page1 size: " + book.get(0).size() + "pages");
        System.out.println("Page1: " + book.get(0).get(0).getLine());

        System.out.println("Page2 size: " + book.get(1).size() + "pages");

        if(book.get(1).isEmpty())  //Should book.get(1) should be empty
        {
            System.out.println("Page2: EMPTY");
        }
        else
        {
            System.out.println("Page2: " + book.get(1).get(0).getLine());
        }
    }

    public static class PageContents {
        private String line;

        public String getLine() {
            return line;
        }

        public void setLine(String line) {
            this.line = line;
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;

class PageContents
{
    String Line;

    public String getLine()
    {
        return Line;
    }

    public void setLine(String line)
    {
        Line = line;
    }

}

public class MainClass
{
    public static void main(String[] args)
    {
        ArrayList<ArrayList<PageContents>> book = new ArrayList<>(); 
        ArrayList<PageContents> page1 = new ArrayList<>();

        // Add new(first) page in book.
        PageContents pageContents1 = new PageContents();
        pageContents1.setLine("This is Line 1 on Page 1"); 
        page1.add(pageContents1); 
        book.add(page1);

        ArrayList<PageContents> page2 = new ArrayList<>();
        PageContents pageContents2 = new PageContents();
        pageContents2.setLine("This is Line 1 on Page 2");
        page2.add(pageContents2);
        book.add(page2);

        System.out.println("Page1 size: " + book.get(0).size() + "pages");
        System.out.println("Page1: " + book.get(0).get(0).getLine());

        System.out.println("Page2 size: " + book.get(1).size() + "pages");

        if (book.get(1).isEmpty())
        {
            System.out.println("Page2: EMPTY");
        } else {
            System.out.println("Page2: " + book.get(1).get(0).getLine());
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40621512" questionTitle="How do I convert this program into java 8 functional style using streams?">
<Answer><![CDATA[public static void permuteSubsequence(String s) {
    int[] permutable = IntStream.range(0, s.length())
        .filter(i->Character.toLowerCase(s.charAt(i))!=Character.toUpperCase(s.charAt(i)))
        .toArray();
    if(permutable.length == 0) {
        System.out.println(s);
        return;
    }
    String lower = s.toLowerCase(), upper = s.toUpperCase();
    if(s.length()!=lower.length() || s.length()!=upper.length())
        throw new UnsupportedOperationException("non trivial case mapping");
    LongStream.range(0, 1L<<Math.min(permutable.length, 62))
        .mapToObj(l -> {
            StringBuilder sb=new StringBuilder(lower);
            BitSet.valueOf(new long[] { l }).stream()
                  .map(bit -> permutable[bit])
                  .forEach(ix -> sb.setCharAt(ix, upper.charAt(ix)));
            return sb.toString();
        })
        .forEach(System.out::println);
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.function.Function.identity;
import static java.util.stream.Collectors.toList;

public static List<String> permuteUCLCStream(String a)
{
    String s = a.toLowerCase();
    int l = a.length();
    Stream<String> result = IntStream
            .rangeClosed(0, l)
            .mapToObj(i -> IntStream
                    .rangeClosed(i + 1, l)
                    .mapToObj(j -> s.substring(0, i) + s.substring(i, j).toUpperCase() + s.substring(j, l)))
            .flatMap(identity());
    List<String> arr = Stream.concat(Stream.of(a), result).sorted().collect(toList());
    Collections.reverse(arr);
    return arr;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40619578" questionTitle="JavaFX - Extra horizontal space in drawing arrows after rotation">
<Answer><![CDATA[private static final double[] POLYGON_POINTS = {
    -5, -4,
    -5, 4,
    5, 0
};

private static void makeArrow(Pane parent, Circle start, Circle end, double t) {
    Polygon arrow = new Polygon(POLYGON_POINTS);
    arrow.setFill(null);
    arrow.setStroke(Color.BLACK);
    double dx = end.getCenterX() - start.getCenterX();
    double dy = end.getCenterY() - start.getCenterY();

    double d = Math.hypot(dx, dy);

    double sin = dy / d;
    double cos = dx / d;

    // matrix:
    //  [  cos     -sin     0    t * dx + start.getCenterX() ]        
    //  [  sin      cos     0    t * dy + start.getCenterY() ]        
    //  [   0        0      1                   0            ]        
    //  [   0        0      0                   1            ]
    Affine affine = new Affine(cos, -sin, t * dx + start.getCenterX(), sin, cos, t * dy + start.getCenterY());

    arrow.getTransforms().add(affine);
    parent.getChildren().add(arrow);
}

@Override
public void start(Stage primaryStage) {
    Circle end = new Circle(200, 20, 5);
    Circle start = new Circle(20, 200, 5);
    Line line = new Line(start.getCenterX(), start.getCenterY(), end.getCenterX(), end.getCenterY());

    Pane root = new Pane(line, start, end);

    makeArrow(root, start, end, 0.5);

    Scene scene = new Scene(root, 400, 400);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            Pane root = createPane();
            root.setTranslateX(200);
            root.setTranslateY(200);
            Scene scene = new Scene(root,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private Pane createPane() {
        BorderPane root = new BorderPane();
        ArrowFactory arrowfactory = new ArrowFactory();
        double lineLength = 100;
        double centerX = 0;
        double centerY = 0;
        root.getChildren().addAll(
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 0),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 30),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 45),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 60),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 90),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 135),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 180),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 225),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 270),
            arrowfactory.createLineAndArrow(centerX, centerY, lineLength, 315)
            );
        return root;
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40588033" questionTitle="JavaFX cover and uncover Button text in a Button field">
<Answer><![CDATA[private static boolean checkMine(boolean[][] mines, int row, int column) {
    return row >= 0 && column >= 0 && row < mines.length && column < mines[row].length && mines[row][column];
}

@Override
public void start(Stage primaryStage) {
    GridPane field = new GridPane();

    boolean[][] mines = new boolean[][]{
        new boolean[]{false, false, false},
        new boolean[]{false, true, false},
        new boolean[]{false, false, false}
    };

    EventHandler<ActionEvent> handler = event -> {
        ToggleButton source = (ToggleButton) event.getSource();

        // find column/row indices in GridPane
        Integer row = GridPane.getRowIndex(source);
        Integer column = GridPane.getColumnIndex(source);
        int r = row == null ? 0 : row;
        int c = column == null ? 0 : column;

        boolean mine = mines[r][c];

        if (mine) {
            source.setText("X");
            System.out.println("you loose");
            // TODO: Represent lost state in GUI
        } else {
            int mineCount = 0;

            // count surrounding mines
            for (int i = -1; i < 2; i++) {
                for (int j = -1; j < 2; j++) {
                    if (checkMine(mines, r + i, c + j)) {
                        mineCount++;
                    }
                }
            }
            if (mineCount > 0) {
                source.setText(Integer.toString(mineCount));
            }
        }
        source.setDisable(true);
        // keep activated look
        source.setOpacity(1);
    };

    for (int i = 0; i < mines.length; i++) {
        boolean[] row = mines[i];
        for (int j = 0; j < row.length; j++) {
            ToggleButton toggleButton = new ToggleButton();
            toggleButton.setPrefSize(30, 30);
            toggleButton.setOnAction(handler);
            field.add(toggleButton, j, i);
        }
    }

    Scene scene = new Scene(field);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import application.MineSweeperField.State;
import javafx.css.PseudoClass;
import javafx.scene.control.Button;

public class MineSweepButton extends Button {

    static PseudoClass unrevealedPseudo = PseudoClass.getPseudoClass("unrevealed");
    static PseudoClass revealedPseudo = PseudoClass.getPseudoClass("revealed");
    static PseudoClass flaggedPseudo = PseudoClass.getPseudoClass("flagged");

    public MineSweepButton(MineSweeperField field) {

        this.getStyleClass().add("minesweep-button");

        this.pseudoClassStateChanged(unrevealedPseudo, true);

        field.stateProperty().addListener((obs, oldVal, newVal) -> changePseudoClass(newVal));
        changePseudoClass(field.getState());
    }

    private void changePseudoClass(State state) {
        this.pseudoClassStateChanged(unrevealedPseudo, false);
        this.pseudoClassStateChanged(revealedPseudo, false);
        this.pseudoClassStateChanged(flaggedPseudo, false);

        switch (state) {
        case FLAGGED:
            this.pseudoClassStateChanged(flaggedPseudo, true);
            break;
        case REVEALED:
            this.pseudoClassStateChanged(revealedPseudo, true);
            break;
        case UNREVEALED:
            this.pseudoClassStateChanged(unrevealedPseudo, true);
            break;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40571199" questionTitle="Creating tray icon using JavaFX">
<Answer><![CDATA[import javafx.application.*;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.*;

import javax.imageio.ImageIO;
import java.io.IOException;
import java.net.URL;
import java.text.*;
import java.util.*;

// Java 8 code
public class JavaFXTrayIconSample extends Application {

    // one icon location is shared between the application tray icon and task bar icon.
    // you could also use multiple icons to allow for clean display of tray icons on hi-dpi devices.
    private static final String iconImageLoc =
            "http://icons.iconarchive.com/icons/scafer31000/bubble-circle-3/16/GameCenter-icon.png";

    // application stage is stored so that it can be shown and hidden based on system tray icon operations.
    private Stage stage;

    // a timer allowing the tray icon to provide a periodic notification event.
    private Timer notificationTimer = new Timer();

    // format used to display the current time in a tray icon notification.
    private DateFormat timeFormat = SimpleDateFormat.getTimeInstance();

    // sets up the javafx application.
    // a tray icon is setup for the icon, but the main stage remains invisible until the user
    // interacts with the tray icon.
    @Override public void start(final Stage stage) {
        // stores a reference to the stage.
        this.stage = stage;

        // instructs the javafx system not to exit implicitly when the last application window is shut.
        Platform.setImplicitExit(false);

        // sets up the tray icon (using awt code run on the swing thread).
        javax.swing.SwingUtilities.invokeLater(this::addAppToTray);

        // out stage will be translucent, so give it a transparent style.
        stage.initStyle(StageStyle.TRANSPARENT);

        // create the layout for the javafx stage.
        StackPane layout = new StackPane(createContent());
        layout.setStyle(
                "-fx-background-color: rgba(255, 255, 255, 0.5);"
        );
        layout.setPrefSize(300, 200);

        // this dummy app just hides itself when the app screen is clicked.
        // a real app might have some interactive UI and a separate icon which hides the app window.
        layout.setOnMouseClicked(event -> stage.hide());

        // a scene with a transparent fill is necessary to implement the translucent app window.
        Scene scene = new Scene(layout);
        scene.setFill(Color.TRANSPARENT);

        stage.setScene(scene);
    }

    /**
     * For this dummy app, the (JavaFX scenegraph) content, just says "hello, world".
     * A real app, might load an FXML or something like that.
     *
     * @return the main window application content.
     */
    private Node createContent() {
        Label hello = new Label("hello, world");
        hello.setStyle("-fx-font-size: 40px; -fx-text-fill: forestgreen;");
        Label instructions = new Label("(click to hide)");
        instructions.setStyle("-fx-font-size: 12px; -fx-text-fill: orange;");

        VBox content = new VBox(10, hello, instructions);
        content.setAlignment(Pos.CENTER);

        return content;
    }

    /**
     * Sets up a system tray icon for the application.
     */
    private void addAppToTray() {
        try {
            // ensure awt toolkit is initialized.
            java.awt.Toolkit.getDefaultToolkit();

            // app requires system tray support, just exit if there is no support.
            if (!java.awt.SystemTray.isSupported()) {
                System.out.println("No system tray support, application exiting.");
                Platform.exit();
            }

            // set up a system tray icon.
            java.awt.SystemTray tray = java.awt.SystemTray.getSystemTray();
            URL imageLoc = new URL(
                    iconImageLoc
            );
            java.awt.Image image = ImageIO.read(imageLoc);
            java.awt.TrayIcon trayIcon = new java.awt.TrayIcon(image);

            // if the user double-clicks on the tray icon, show the main app stage.
            trayIcon.addActionListener(event -> Platform.runLater(this::showStage));

            // if the user selects the default menu item (which includes the app name),
            // show the main app stage.
            java.awt.MenuItem openItem = new java.awt.MenuItem("hello, world");
            openItem.addActionListener(event -> Platform.runLater(this::showStage));

            // the convention for tray icons seems to be to set the default icon for opening
            // the application stage in a bold font.
            java.awt.Font defaultFont = java.awt.Font.decode(null);
            java.awt.Font boldFont = defaultFont.deriveFont(java.awt.Font.BOLD);
            openItem.setFont(boldFont);

            // to really exit the application, the user must go to the system tray icon
            // and select the exit option, this will shutdown JavaFX and remove the
            // tray icon (removing the tray icon will also shut down AWT).
            java.awt.MenuItem exitItem = new java.awt.MenuItem("Exit");
            exitItem.addActionListener(event -> {
                notificationTimer.cancel();
                Platform.exit();
                tray.remove(trayIcon);
            });

            // setup the popup menu for the application.
            final java.awt.PopupMenu popup = new java.awt.PopupMenu();
            popup.add(openItem);
            popup.addSeparator();
            popup.add(exitItem);
            trayIcon.setPopupMenu(popup);

            // create a timer which periodically displays a notification message.
            notificationTimer.schedule(
                    new TimerTask() {
                        @Override
                        public void run() {
                            javax.swing.SwingUtilities.invokeLater(() ->
                                trayIcon.displayMessage(
                                        "hello",
                                        "The time is now " + timeFormat.format(new Date()),
                                        java.awt.TrayIcon.MessageType.INFO
                                )
                            );
                        }
                    },
                    5_000,
                    60_000
            );

            // add the application tray icon to the system tray.
            tray.add(trayIcon);
        } catch (java.awt.AWTException | IOException e) {
            System.out.println("Unable to init system tray");
            e.printStackTrace();
        }
    }

    /**
     * Shows the application stage and ensures that it is brought ot the front of all stages.
     */
    private void showStage() {
        if (stage != null) {
            stage.show();
            stage.toFront();
        }
    }

    public static void main(String[] args) throws IOException, java.awt.AWTException {
        // Just launches the JavaFX application.
        // Due to way the application is coded, the application will remain running
        // until the user selects the Exit menu option from the tray icon.
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[//Check the SystemTray is supported
    if (!SystemTray.isSupported()) {
        System.out.println("SystemTray is not supported");
        return;
    }
    final PopupMenu popup = new PopupMenu();

    URL url = System.class.getResource("/images/new.png");
    Image image = Toolkit.getDefaultToolkit().getImage(url);

    final TrayIcon trayIcon = new TrayIcon(image);

    final SystemTray tray = SystemTray.getSystemTray();

    // Create a pop-up menu components
    MenuItem aboutItem = new MenuItem("About");
    CheckboxMenuItem cb1 = new CheckboxMenuItem("Set auto size");
    CheckboxMenuItem cb2 = new CheckboxMenuItem("Set tooltip");
    Menu displayMenu = new Menu("Display");
    MenuItem errorItem = new MenuItem("Error");
    MenuItem warningItem = new MenuItem("Warning");
    MenuItem infoItem = new MenuItem("Info");
    MenuItem noneItem = new MenuItem("None");
    MenuItem exitItem = new MenuItem("Exit");

    //Add components to pop-up menu
    popup.add(aboutItem);
    popup.addSeparator();
    popup.add(cb1);
    popup.add(cb2);
    popup.addSeparator();
    popup.add(displayMenu);
    displayMenu.add(errorItem);
    displayMenu.add(warningItem);
    displayMenu.add(infoItem);
    displayMenu.add(noneItem);
    popup.add(exitItem);

    trayIcon.setPopupMenu(popup);

    try {
        tray.add(trayIcon);
    } catch (AWTException e) {
        System.out.println("TrayIcon could not be added.");
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40561927" questionTitle="Textfield copy action on long hold (copy popup)">
<Answer><![CDATA[TextView tv;

    @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            tv = (TextView) findViewById(R.id.tv1);
            registerForContextMenu(tv);
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)
    {
        super.onCreateContextMenu(menu, v, menuInfo);
        menu.setHeaderTitle("Select The Action");
        menu.add(0, v.getId(), 0, "Copy");//groupId, itemId, order, title
    }
    @Override
    public boolean onContextItemSelected(MenuItem item){
        if(item.getTitle()=="Copy"){
            String text = tv.getText().toString();
            Log.e("onContextItemSelected",text);
        }

        return true;
    }]]></Answer>
<Answer><![CDATA[public class BasicView extends View {

    public BasicView(String name) {
        super(name);

        TextField textField = new TextField();

        addPressAndHoldHandler(textField, Duration.seconds(1), event -> {
            Bounds bounds = textField.localToScreen(textField.getBoundsInLocal());
            textField.fireEvent(new ContextMenuEvent(ContextMenuEvent.CONTEXT_MENU_REQUESTED, 
                    0, 0, bounds.getMinX() + 10, bounds.getMaxY() + 10, false, null));
        });

        setCenter(new VBox(15.0, new Label("Push and hold for ContextMenu"), textField));
    }

    private void addPressAndHoldHandler(Node node, Duration holdTime, EventHandler<MouseEvent> handler) {
        class Wrapper<T> { 
            T content; 
        }

        Wrapper<MouseEvent> eventWrapper = new Wrapper<>();

        PauseTransition holdTimer = new PauseTransition(holdTime);
        holdTimer.setOnFinished(event -> handler.handle(eventWrapper.content));

        node.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            eventWrapper.content = event;
            holdTimer.playFromStart();
        });
        node.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> holdTimer.stop());
        node.addEventHandler(MouseEvent.DRAG_DETECTED, event -> holdTimer.stop());
    }

    @Override
    protected void updateAppBar(AppBar appBar) {
        appBar.setTitleText("Push and Hold");
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40527363" questionTitle="Howto select and edit TabelCell in TableView with mouseclick on a MenuItem of ContextMenu - JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.stage.Stage;

public class EditableTableMCVE extends Application {
    @Override
    public void start(Stage stage) {
        int numOfCols = 10;

        ObservableList<ObservableList<String>> tableData = FXCollections.observableArrayList();

        // Generate dummy data.
        for (int i = 0; i < 100; i++) {
            ObservableList<String> row = FXCollections.observableArrayList();

            for (int j = 0; j < numOfCols; j++)
                row.add("Row" + i + "Col" + j);

            tableData.add(row);
        }

        TableView<ObservableList<String>> table = new TableView<ObservableList<String>>();
        table.setEditable(true);

        // Add columns to the table.
        for (int i = 0; i < numOfCols; i++) {
            // We make all cells in column on index 1 editable.
            if (i == 1) {
                table.getColumns().add(addEditableColumn(i, "Column " + i));
            } else {
                table.getColumns().add(addColumn(i, "Column " + i));
            }
        }

        table.getItems().addAll(tableData);

        MenuItem editItem = new MenuItem("Edit");
        editItem.setOnAction(e -> {
            // We need to get the index of the selected row and the TableColumn
            // on the column index we want to edit.
            int selectedRowIndex = table.getSelectionModel().getSelectedIndex();
            table.edit(selectedRowIndex, table.getColumns().get(1));
        });
        ContextMenu menu = new ContextMenu(editItem);
        table.setContextMenu(menu);

        Scene scene = new Scene(table);

        stage.setScene(scene);
        stage.show();
    }

    /**
     * Returns a simple column.
     */
    private TableColumn<ObservableList<String>, String> addColumn(int index, String name) {
        TableColumn<ObservableList<String>, String> col = new TableColumn<ObservableList<String>, String>(name);
        col.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().get(index)));
        return col;
    }

    /**
     * Returns an editable column.
     */
    private TableColumn<ObservableList<String>, String> addEditableColumn(int index, String name) {
        TableColumn<ObservableList<String>, String> col = new TableColumn<ObservableList<String>, String>(name);
        col.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().get(index)));

        col.setCellFactory(TextFieldTableCell.forTableColumn());
        col.setOnEditCommit(new EventHandler<CellEditEvent<ObservableList<String>, String>>() {
            @Override
            public void handle(CellEditEvent<ObservableList<String>, String> t) {
                ((ObservableList<String>) t.getTableView().getItems().get(t.getTablePosition().getRow())).set(index,
                        t.getNewValue());
            }
        });
        return col;
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
<Answer><![CDATA[public class ContextTextFieldTableCell<S, T> extends TextFieldTableCell<S, T> {

    private void init() {
        MenuItem editItem = new MenuItem("edit");
        ContextMenu contextMenu = new ContextMenu(editItem);
        setContextMenu(contextMenu);
        setEditable(false);
        setOnContextMenuRequested(evt -> {
            editItem.setDisable(!(getTableColumn().isEditable() && getTableView().isEditable()));
        });
        editItem.setOnAction(evt -> {
            setEditable(true);
            getTableView().edit(getIndex(), getTableColumn());
        });
    }

    public ContextTextFieldTableCell() {
    }

    public ContextTextFieldTableCell(StringConverter<T> converter) {
        super(converter);
        init();
    }

    @Override
    public void cancelEdit() {
        super.cancelEdit();
        setEditable(false);
    }

    @Override
    public void commitEdit(T newValue) {
        super.commitEdit(newValue);
        setEditable(false);
    }

    public static <T> Callback<TableColumn<T, String>, TableCell<T, String>> cellFactory() {
        return cellFactory(new DefaultStringConverter());
    }

    public static <S, T> Callback<TableColumn<S, T>, TableCell<S, T>> cellFactory(final StringConverter<T> converter) {
        if (converter == null) {
            throw new IllegalArgumentException();
        }
        return column -> new ContextTextFieldTableCell<>(converter);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40499042" questionTitle="How to perform multiple actions for a Button depending on ComboBox selection in JavaFX">
<Answer><![CDATA[public class ButtonHandlerClass implements EventHandler<ActionEvent> {

   ComboBox<String> comboBox;

   /**
   *Constructor
   */
   public ButtonHandlerClass(ComboBox comboBox){

     this.comboBox = comboBox;

  }

 @Override
  public void handle(ActionEvent e) {
     String selectedItem = queryDropDown.getSelectionModel().getSelectedItem();
            System.out.println(selectedItem);
            // ...code  

  }

 }

}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {

    VBox vbox = new VBox();
    ComboBox<String> comboBox = new ComboBox();
    ObservableList<String> options = FXCollections.observableArrayList("one", "two", "three");
    comboBox.setItems(options);
    Button btn = new Button();
    btn.setText("Say 'Hello World'");
    btn.setOnAction((ActionEvent event) -> {
        if(comboBox.getValue() != null)
        {
            String tempString = comboBox.getSelectionModel().getSelectedItem();
            System.out.print(tempString);
            switch(tempString)
            {
                case "one":
                    btn.setText("one is selected in combobox");
                    break;
                case "two":
                    btn.setText("two is selected in combobox");
                    break;
                case "three":
                    btn.setText("three is selected in combobox");
                    break;
                default:
                    btn.setText("Nothing is selected in combobox");
            }
        }
    });

    StackPane root = new StackPane();
    vbox.getChildren().addAll(btn, comboBox);
    root.getChildren().addAll(vbox);

    Scene scene = new Scene(root, 300, 250);

    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
}

/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    launch(args);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40485398" questionTitle="Retry logic with CompletableFuture">
<Answer><![CDATA[public class RetriableTask
{
    protected static final int MAX_RETRIES = 10;
    protected int retries = 0;
    protected int n = 0;
    protected CompletableFuture<Integer> future = new CompletableFuture<Integer>();

    public RetriableTask(int number) {
        n = number;
    }

    public CompletableFuture<Integer> executeAsync() {
        // Create a failure within variable timeout
        Duration timeoutInMilliseconds = Duration.ofMillis(1*(int)Math.pow(2, retries));
        CompletableFuture<Integer> timeoutFuture = Utils.failAfter(timeoutInMilliseconds);

        // Create a dummy future and complete only if (n > 5 && retries > 5) so we can test for both completion and timeouts. 
        // In real application this should be a real future
        final CompletableFuture<Integer> taskFuture = new CompletableFuture<>();
        if (n > 5 && retries > 5)
            taskFuture.complete(retries * n);

        // Attach the failure future to the task future, and perform a check on completion
        taskFuture.applyToEither(timeoutFuture, Function.identity())
            .whenCompleteAsync((result, exception) -> {
                if (exception == null) {
                    future.complete(result);
                } else {
                    retries++;
                    if (retries >= MAX_RETRIES) {
                        future.completeExceptionally(exception);
                    } else {
                        executeAsync();
                    }
                }
            });

        // Return the future    
        return future;
    }
}]]></Answer>
<Answer><![CDATA[Callable<Result> callable = new Callable<Result>() {
    public Result call() throws Exception {
        return executeMycustomActionHere();
    }
};

Retryer<Boolean> retryer = RetryerBuilder.<Result>newBuilder()
        .retryIfResult(Predicates.<Result>isNull())
        .retryIfExceptionOfType(IOException.class)
        .retryIfRuntimeException()
        .withStopStrategy(StopStrategies.stopAfterAttempt(MAX_RETRIES))
        .build();

CompletableFuture.supplyAsync( () -> {
    try {
        retryer.call(callable);
    } catch (RetryException e) {
        e.printStackTrace();
    } catch (ExecutionException e) {
       e.printStackTrace();
    }
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40474802" questionTitle="CompletableFuture injection from the inside">
<Answer><![CDATA[public CompletableFuture<Boolean> getFutureOfMyLongRunningTask() {
    CompletableFuture<Boolean> future = CompletableFuture.supplyAsync(() -> {
        // First stage processing here ...
        if (somecondition failed)
            return false; // Task failed!

        return true; // OK
    }).thenApplyAsync((Boolean result) -> {
        if (!result) // check of previous stage fail
            return false;

        // Second stage processing here ...

        if (!some condition satisfied) {
            // This is where I want the injection to happen. 
            // This stage should be suspended and a new stage should be
            // injected between this point and the next stage.
        }

        return true; // OK
    }).thenApplyAsync((Boolean result) -> {
        if (!result) // check of previous stage fail
            return false;

        // Third stage processing here ...

        return true; // OK
    });

    // This is the result we have to wait for.
    return future;
}]]></Answer>
<Answer><![CDATA[public CompletableFuture<Boolean> getFutureOfMyLongRunningTask() {
    CompletableFuture<Boolean> future = CompletableFuture.supplyAsync(() -> {
        // ... Some processing here ...
        if (somecondition failed)
            return false; // Task failed!

        return true; // OK
    }).thenComposeAsync((Boolean result) -> {
        if (!result) // check of previous stage fail
            return CompletableFuture.completedFuture(false);

        // ... Some processing here ...

        if (!some condition satisfied) {
            return runSomeOtherQuery()
        }

        return CompletableFuture.completedFuture(true); // OK
    }).thenApplyAsync((Boolean result) -> {
        if (!result) // check of previous stage fail
            return false;

        // ... Some processing here ...

        return true; // OK
    });

    // This is the result we have to wait for.
    return future;
}


public CompletableFuture<Boolean> runSomeOtherQuery() {
    ....
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40472668" questionTitle="Numeric TextField for Integers in JavaFX 8 with TextFormatter and/or UnaryOperator">
<Answer><![CDATA[TextField txtpoint = new TextField();
    txtpoint.textProperty().addListener(new ChangeListener<String>() {
        @Override
        public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
            if (!newValue.isEmpty()) {
                try {
                    long pointI = Integer.parseInt(newValue);
                    txtpoint.setText(String.valueOf(pointI));
                } catch (Exception e) {
                    txtpoint.clear();
                    txtpoint.setText(getNumber(oldValue));
                }
            }
        }
    });


private String getNumber(String value) {
    String n = "";
    try {
        return String.valueOf(Integer.parseInt(value));
    } catch (Exception e) {
        String[] array = value.split("");
        for (String tab : array) {
            try {
                System.out.println(tab);
                n = n.concat(String.valueOf(Integer.parseInt(String.valueOf(tab))));
            } catch (Exception ex) {
                System.out.println("not nomber");
            }
        }
        return n;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.UnaryOperator;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.TextFormatter.Change;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.StringConverter;
import javafx.util.converter.IntegerStringConverter;

public class IntegerFieldExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        TextField integerField = new TextField();
        UnaryOperator<Change> integerFilter = change -> {
            String newText = change.getControlNewText();
            if (newText.matches("-?([1-9][0-9]*)?")) { 
                return change;
            } else if ("-".equals(change.getText()) ) {
                if (change.getControlText().startsWith("-")) {
                    change.setText("");
                    change.setRange(0, 1);
                    change.setCaretPosition(change.getCaretPosition()-2);
                    change.setAnchor(change.getAnchor()-2);
                    return change ;
                } else {
                    change.setRange(0, 0);
                    return change ;
                }
            }
            return null;
        };

        // modified version of standard converter that evaluates an empty string 
        // as zero instead of null:
        StringConverter<Integer> converter = new IntegerStringConverter() {
            @Override
            public Integer fromString(String s) {
                if (s.isEmpty()) return 0 ;
                return super.fromString(s);
            }
        };

        TextFormatter<Integer> textFormatter = 
                new TextFormatter<Integer>(converter, 0, integerFilter);
        integerField.setTextFormatter(textFormatter);

        // demo listener:
        textFormatter.valueProperty().addListener((obs, oldValue, newValue) -> System.out.println(newValue));

        VBox root = new VBox(5, integerField, new Button("Click Me"));
        root.setAlignment(Pos.CENTER);
        Scene scene = new Scene(root, 300, 120);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40370897" questionTitle="Using JavaFX scene builder to fill fx id with buttons in an array">
<Answer><![CDATA[public class Helper {

    private static final String MARK_CLASS = "array-store-mark";
    private static final String MARK_CLASS_SELECTOR = "." + MARK_CLASS;
    private static final String INDICES_KEY = "arrayStoreIndices";

    public static void setIndices(Node node, String indices) {
        if (node == null || indices == null) {
            throw new IllegalArgumentException();
        }
        String[] parts = indices.split("\\s+");
        int[] is = new int[]{Integer.parseInt(parts[0]), Integer.parseInt(parts[1])};

        // add css class
        node.getStyleClass().add(MARK_CLASS);

        // add index data
        node.getProperties().put(INDICES_KEY, is);
    }

    public static <T extends Node> T[][] getAsArray(Node parent, Class<T> nodeClass) {
        if (parent == null) {
            throw new IllegalArgumentException();
        }
        int max1 = 0;
        int max2 = 0;

        // find nodes by class
        Set<Node> marked = parent.lookupAll(MARK_CLASS_SELECTOR);

        // find array size
        for (Node n : marked) {
            n.getStyleClass().remove(MARK_CLASS);
            if (nodeClass.isAssignableFrom(n.getClass())) {
                int[] is = (int[]) n.getProperties().get(INDICES_KEY);
                if (max1 < is[0]) {
                    max1 = is[0];
                }
                if (max2 < is[1]) {
                    max2 = is[1];
                }
            }
        }

        T[][] result = (T[][]) Array.newInstance(nodeClass, max1+1, max2+1);

        // put data in array
        for (Node n : marked) {
            int[] is = (int[]) n.getProperties().remove(INDICES_KEY);

            if (nodeClass.isAssignableFrom(n.getClass())) {
                result[is[0]][is[1]] = (T) n;
            }
        }

        return result;
    }

}]]></Answer>
<Answer><![CDATA[<fx:define>
          <!-- create buttons and store them in a list -->
           <ArrayList fx:id="array">
              <Button fx:id="Button_0_0" /> //first row , first column
              <Button fx:id="Button_0_1" />
              <Button fx:id="Button_0_2" />
              <ArrayList fx:id="buttonsArray">
                  <Button fx:id="Button_1_0" /> //second row , first column
                  <Button fx:id="Button_1_1" />
                  <Button fx:id="Button_1_2" />
              </ArrayList>
           </ArrayList>
        </fx:define>


         <!-- add buttons in the list to scene graph -->
         <fx:reference source="Button_0_0" />
         <fx:reference source="Button_0_1" />
         <fx:reference source="Button_0_2" />
         <fx:reference source="Button_1_0" />
         <fx:reference source="Button_1_1" />
         <fx:reference source="Button_1_2" />]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40306370" questionTitle="Changing text color with a slider">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.RadioButton;
import javafx.scene.control.Slider;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Oblig5 extends Application {

    public static void main(String[] args) {

        launch(args);

    }

    public void start(Stage primaryStage) {
        // Create panes
        BorderPane bPane = new BorderPane();
        VBox vBox = new VBox();
        bPane.setLeft(vBox);

        Text text = new Text("Oblig 5");
        text.setFont(Font.font("Times New Roman", FontWeight.NORMAL, FontPosture.REGULAR, 40));
        bPane.setCenter(text);

        RadioButton rbRed = new RadioButton("Red");
        RadioButton rbGreen = new RadioButton("Green");
        RadioButton rbBlue = new RadioButton("Blue");


        ToggleGroup group = new ToggleGroup();
        rbRed.setToggleGroup(group);
        rbGreen.setToggleGroup(group);
        rbBlue.setToggleGroup(group);

        vBox.getChildren().addAll(rbRed, rbGreen, rbBlue);

        Slider slider = new Slider(0, 255, 135);
        slider.setShowTickLabels(true);
        slider.setShowTickMarks(true);
        bPane.setBottom(slider);
        BorderPane.setAlignment(slider, Pos.CENTER);

        // Create a handler for the updating text fill:
        ChangeListener<Object> updateListener = (obs, oldValue, newValue) -> {
            int colorValue = (int) slider.getValue() ;
            int red   =   rbRed.isSelected() ? colorValue : 0 ;
            int green = rbGreen.isSelected() ? colorValue : 0 ;
            int blue  =  rbBlue.isSelected() ? colorValue : 0 ;
            text.setFill(Color.rgb(red, green, blue));
        };
        slider.valueProperty().addListener(updateListener);
        group.selectedToggleProperty().addListener(updateListener);

        // Create a scene and place it in the stage
        Scene scene = new Scene(bPane, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Oblig 5");
        primaryStage.show();

    }


}]]></Answer>
<Answer><![CDATA[// create radio buttons and add color at full brightness
RadioButton rbRed = new RadioButton("Red");
rbRed.setUserData(Color.RED);
RadioButton rbGreen = new RadioButton("Green");
rbGreen.setUserData(Color.LIME);
RadioButton rbBlue = new RadioButton("Blue");
rbBlue.setUserData(Color.BLUE);

ToggleGroup group = new ToggleGroup();
rbRed.setToggleGroup(group);
rbGreen.setToggleGroup(group);
rbBlue.setToggleGroup(group);

group.selectToggle(rbRed);

...

// create binding based on toggle user data and slider value
text.fillProperty().bind(Bindings.createObjectBinding(() -> {
    Color color = (Color) group.getSelectedToggle().getUserData();

    // use color determined by toggle with brightness adjusted based on slider value
    return color.deriveColor(0, 1, slider.getValue() / slider.getMax(), 1);
}, slider.valueProperty(), group.selectedToggleProperty()));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40295341" questionTitle="How can I write my code more efficiently for use with different types of JavaFX GUI components?">
<Answer><![CDATA[@Override
public void initialize(URL location, ResourceBundle resources) {
combobox.setOnMouseEntered(this);
    combobox.setOnMouseExited(this);
    textfield.setOnMouseEntered(this);
    textfield.setOnMouseExited(this);
    button.setOnMouseEntered(this);
    button.setOnMouseExited(this);

}

@Override
public void handle(MouseEvent event) {
    switch (event.getEventType().getName()){
        case "MOUSE_ENTERED":
            label.setCursor(Cursor.HAND);
            label.setText("Hovered!");
            break;
        case "MOUSE_EXITED":
            label.setCursor(Cursor.MOVE);
            label.setText("Bored");
            break;
    }
}]]></Answer>
<Answer><![CDATA[private static void registerListeners(final Label label, Node... nodes) {
    final EventHandler<MouseEvent> enteredHandler = new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent mouseEvent) {
            label.setCursor(Cursor.HAND);
            label.setText("Hovered!");
        }
    };

    final EventHandler<MouseEvent> exitedHandler = new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent mouseEvent) {
            label.setCursor(Cursor.MOVE);
            label.setText("Bored");
        }
    };

    // add listeners to all nodes
    for (Node n : nodes) {
         n.setOnMouseEntered(enteredHandler);
         n.setOnMouseExited(exitedHandler);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40234070" questionTitle="How do I display a popup while I'm on the primary stage">
<Answer><![CDATA[Dialog dialogQtPrescription = new Dialog();   
dialogQtPrescription.setTitle("yourTitle");
dialogQtPrescription.setHeaderText("yourHeadertext");
dialogQtPrescription.initModality(Modality.WINDOW_MODAL);
dialogQtPrescription.initOwner(mainStage);
dialogQtPrescription.initStyle(StageStyle.UTILITY);

GridPane gridDialogPrescription = new GridPane();
gridDialogPrescription.setHgap(10);
gridDialogPrescription.setVgap(10);
gridDialogPrescription.add(new Label(bundle.getString("quantityPrescription.title")), 0, 0);
TextField txtQtPrescr = new TextField();
ButtonType buttonTypeNo = new ButtonType("no");
ButtonType buttonTypeYes = new ButtonType("yes");
ButtonType buttonTypeCancel = new ButtonType("Cancel", ButtonData.CANCEL_CLOSE);
dialogQtPrescription.getDialogPane().getButtonTypes().addAll(buttonTypeNo,buttonTypeYes, buttonTypeCancel);

txtQtPrescr.setPrefWidth(100);

gridDialogPrescription.add(txtQtPrescr, 1, 0);
dialogQtPrescription.getDialogPane().setContent(gridDialogPrescription);

Optional<ButtonType> result = dialogQtPrescription.showAndWait();]]></Answer>
<Answer><![CDATA[public void popup() {
        final Stage dialog = new Stage();
        dialog.setTitle("Confirmation");
        Button yes = new Button("Yes");
        Button no = new Button("No");

        Label displayLabel = new Label("What do you want to do ?");
        displayLabel.setFont(Font.font(null, FontWeight.BOLD, 14));

        dialog.initModality(Modality.NONE);
        dialog.initOwner((Stage) tableview.getScene().getWindow());

        HBox dialogHbox = new HBox(20);
        dialogHbox.setAlignment(Pos.CENTER);

        VBox dialogVbox1 = new VBox(20);
        dialogVbox1.setAlignment(Pos.CENTER_LEFT);

        VBox dialogVbox2 = new VBox(20);
        dialogVbox2.setAlignment(Pos.CENTER_RIGHT);

        dialogHbox.getChildren().add(displayLabel);
        dialogVbox1.getChildren().add(yes);
        dialogVbox2.getChildren().add(no);

        yes.addEventHandler(MouseEvent.MOUSE_CLICKED,
                new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent e) {
                        // inside here you can use the minimize or close the previous stage//
                        dialog.close();
                    }
                });
        no.addEventHandler(MouseEvent.MOUSE_CLICKED,
                new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent e) {
                        dialog.close();
                    }
                });

        dialogHbox.getChildren().addAll(dialogVbox1, dialogVbox2);
        Scene dialogScene = new Scene(dialogHbox, 500, 40);
        dialogScene.getStylesheets().add("//style sheet of your choice");
        dialog.setScene(dialogScene);
        dialog.show();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40220465" questionTitle="Spring Zuul: Dynamically disable a route to a service">
<Answer><![CDATA[public class BlackListFilter extends ZuulFilter {

    @Override
    public String filterType() {
        return "pre";
    }
    ...
    @Override
    public Object run() {
        RequestContext ctx = RequestContext.getCurrentContext();
        String uri = ctx.getRequest().getRequestURI();
        String appId = uri.split("/")[1];
        if (blackList.contains(appId)) {
            ctx.setSendZuulResponse(false);
            LOG.info("Request '{}' from {}:{} is blocked",
                    uri, ctx.getRequest().getRemoteHost(), ctx.getRequest().getRemotePort());
        }
        return null;
    }

}]]></Answer>
<Answer><![CDATA[@Configuration
@EnableConfigurationProperties( { ZuulProperties.class } )
public class ZuulConfig {

public static ApplicationRouteLocator simpleRouteLocator;

@Autowired
private ZuulProperties zuulProperties;

@Autowired
private ServerProperties server;

@Bean
@Primary
public RouteLocator routeLocator() {
    logger.info( "zuulProperties are: {}", zuulProperties );
    simpleRouteLocator = new ApplicationRouteLocator( this.server.getServletPrefix(),
            this.zuulProperties );


    ConfigurationManager.getConfigInstance().addConfigurationListener( configurationListener );

    return simpleRouteLocator;
}


private ConfigurationListener configurationListener =
        new ConfigurationListener() {

            @Override
            public void configurationChanged( ConfigurationEvent ce ) {

                            // zuulProperties.getRoutes() do something
                            // zuulProperties.getIgnoredPatterns() do something
                            simpleRouteLocator.refresh();
                        }



                }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40188206" questionTitle="select node alphabetically on keypress in javafx">
<Answer><![CDATA[private static Node[] fromStrings(ToggleGroup group, String... strings) {
    Node[] result = new Node[strings.length];

    for (int i = 0; i < strings.length; i++) {
        ToggleButton button = new ToggleButton(strings[i]);
        button.setPrefSize(100, 50);
        button.setTextAlignment(TextAlignment.CENTER);
        button.setToggleGroup(group);
        result[i] = button;
    }

    return result;
}

@Override
public void start(Stage primaryStage) {
    GridPane root = new GridPane();
    final ToggleGroup group = new ToggleGroup();
    root.addRow(0, fromStrings(group, "If", "VVS1", "VVS2", "VS1", "VS2", "SI1", "SI2", "SI2-", "SI3", "SI3-"));
    root.addRow(1, fromStrings(group, "I1", "I1-", "I2", "I2-", "I3", "I4", "I5", "I6", "I7", "I8"));

    root.setFocusTraversable(true);
    root.setOnKeyTyped(new EventHandler<KeyEvent>() {

        @Override
        public void handle(KeyEvent event) {
            String s = event.getCharacter().toUpperCase();
            // move focus to the next matching element
            if (s.length() == 1) {
                event.consume();
                List<Toggle> toggles = group.getToggles();
                int selectedIndex = toggles.indexOf(group.getSelectedToggle());
                int size = toggles.size();

                // search next matching node starting directly after the
                // selected position
                for (int i = selectedIndex + 1; i < size; i++) {
                    Toggle l = toggles.get(i);
                    if (((Labeled)l).getText().toUpperCase().startsWith(s)) {
                        group.selectToggle(l);
                        return;
                    }
                }
                for (int i = 0; i < selectedIndex; i++) {
                    Toggle l = toggles.get(i);
                    if (((Labeled)l).getText().toUpperCase().startsWith(s)) {
                        group.selectToggle(l);
                        return;
                    }
                }
            }
        }
    });

    Scene scene = new Scene(root);
    root.requestFocus();

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public void initialize(URL location, ResourceBundle resources) {
        HashMap<String, ToggleButton> lstCalc = new HashMap<>();
        for (Toggle t : grpClarity.getToggles()) {
            ToggleButton chk = (ToggleButton) t;
            lstCalc.put(chk.getText(), chk);
        }
        acnCalc.setOnKeyPressed(new EventHandler<KeyEvent>() {
                @Override
                public void handle(KeyEvent ke) {
                 if (ke.getCode().equals(KeyCode.I)) {
                      if (lstCalc.get("If").isFocused()) {
                          lstCalc.get("I1").requestFocus();
                      } else if (lstCalc.get("I1").isFocused()) {
                         lstCalc.get("I1-").requestFocus();
                     } else if (lstCalc.get("I1-").isFocused()) {
                         lstCalc.get("I2").requestFocus();
                     } else if (lstCalc.get("I2").isFocused()) {
                         lstCalc.get("I2-").requestFocus();
                     } else if (lstCalc.get("I2-").isFocused()) {
                         lstCalc.get("I3").requestFocus();
                     } else if (lstCalc.get("I3").isFocused()) {
                         lstCalc.get("I4").requestFocus();
                     } else if (lstCalc.get("I4").isFocused()) {
                         lstCalc.get("I5").requestFocus();
                     } else if (lstCalc.get("I5").isFocused()) {
                         lstCalc.get("I6").requestFocus();
                     } else if (lstCalc.get("I6").isFocused()) {
                         lstCalc.get("I7").requestFocus();
                     } else if (lstCalc.get("I7").isFocused()) {
                         lstCalc.get("I8").requestFocus();
                     } 
                     else {
                         lstCalc.get("If").requestFocus();
                     }
               }
               if (ke.getCode().equals(KeyCode.S)) {
                     if (lstCalc.get("SI1").isFocused()) {
                         lstCalc.get("SI2").requestFocus();
                     } else if (lstCalc.get("SI2").isFocused()) {
                         lstCalc.get("SI2-").requestFocus();
                     } else if (lstCalc.get("SI2-").isFocused()) {
                         lstCalc.get("SI3").requestFocus();
                     } else if (lstCalc.get("SI3").isFocused()) {
                         lstCalc.get("SI3-").requestFocus();
                     }
                     else {
                         lstCalc.get("SI1").requestFocus();
                     }
               }
               if (ke.getCode().equals(KeyCode.V)) {
                     if (lstCalc.get("VVS1").isFocused()) {
                         lstCalc.get("VVS2").requestFocus();
                     } else if (lstCalc.get("VVS2").isFocused()) {
                         lstCalc.get("VS1").requestFocus();
                     } else if (lstCalc.get("VS1").isFocused()) {
                         lstCalc.get("VS2").requestFocus();
                     } 
                     else {
                         lstCalc.get("VVS1").requestFocus();
                     }
               }
           }
     }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40187245" questionTitle="Binding an enum's toString() to a Label">
<Answer><![CDATA[private final Random random = new Random();

@Override
public void start(Stage primaryStage) {
    ComboBox<Mode> combo = new ComboBox<>();
    combo.getItems().setAll(Mode.values());
    Label label = new Label();

    // use "state" property from combo box
    // (you could replace combo.valueProperty() with your own property)
    label.textProperty().bind(Bindings.selectString(combo.valueProperty(), "property"));

    Scene scene = new Scene(new VBox(combo, label), 200, 200);
    scene.setOnMouseClicked(evt -> {
        // change property values at random
        Mode.defaultMode.propertyProperty().set(random.nextBoolean() ? "a" : "b");
        Mode.alternativeMode.propertyProperty().set(random.nextBoolean() ? "c" : "d");
    });

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.FlowPane;
import javafx.stage.Stage;

public class Example extends Application {

    private ObjectProperty<Mode> appState = new SimpleObjectProperty<>(Mode.DEFAULT);

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Button btn = new Button("Toggle mode");
        btn.setOnMouseClicked((event) -> appState.setValue(appState.get() == Mode.DEFAULT ? Mode.ALTERNATIVE : Mode.DEFAULT));

        Label lbl = new Label();
        lbl.textProperty().bind(appState.asString());

        FlowPane pane = new FlowPane();
        pane.getChildren().addAll(btn, lbl);

        primaryStage.setScene(new Scene(pane));
        primaryStage.show();
    }

    public enum Mode {
        DEFAULT("Default mode"),
        ALTERNATIVE("Alternative mode");

        private String description;

        private Mode(String description) {
            this.description = description;
        }

        @Override
        public String toString() {
            return description;
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40179415" questionTitle="Exception in Application start method and FXML Scene Builder Error &quot;Operation has been failed.Make sure that chosen file is a valid FXML Document&quot;">
<Answer><![CDATA[package application;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.stage.Stage;
import javafx.scene.Parent;
import javafx.scene.Scene;

    public class Main extends Application {

                @Override
                public void start(Stage primaryStage) {
                    try {
                        Parent root = FXMLLoader.load(getClass().getResource("/application/MyDocmnt.fxml"));
                        Scene scene = new Scene(root);
                        primaryStage.setTitle("My Title");
                        primaryStage.setScene(scene);
                        primaryStage.show();
                    } catch(Exception e) {
                        e.printStackTrace();
                    }
                }

        public static void main(String[] args) {
             launch(args);
        }

    }]]></Answer>
<Answer><![CDATA[package application;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

    public class Main extends Application{

            public static void main(String[] args) {
                 launch(args);
            }

            @Override
            public void start(Stage primaryStage) throws Exception {

                Parent root = FXMLLoader.load(getClass().getResource("MyDocmnt.fxml"));
                Scene scene = new Scene(root);
                primaryStage.setTitle("My Tittle");
                primaryStage.setScene(scene);
                primaryStage.show();

            } 
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40172644" questionTitle="Firing an event every 10 miliseconds under a certain condition Javafx">
<Answer><![CDATA[public void startTimer(){

   AnimationTimer timer = new AnimationTimer() {
           int seconds;
        @Override
        public void handle(long now) {

               //every time 10 seconds have passed
               //note that 1 second=1000 milliseconds=1.000.000 nanoseconds
               //now->variable which represents nano seconds
               if(now%10000000 == 0){

                  endX = e.getX();
                  endY = e.getY();
                 Bounds viewBounds = mapScroll.getViewportBounds();
                 double startEndX = startX - endX;
                 double startEndY = startY - endY;

                 Bounds contentBounds = mapScroll.getContent().getLayoutBounds();

                 double hChange = startEndX / (contentBounds.getWidth() - viewBounds.getWidth());
                 double vChange = startEndY / (contentBounds.getHeight() - viewBounds.getHeight());
                 mapScroll.setHvalue(mapScroll.getHvalue() + hChange);
                 mapScroll.setVvalue(mapScroll.getVvalue() + vChange);

                 startX = endX;
                 startY = endY;

              }
            }
        }
    }

     timer.start();

}]]></Answer>
<Answer><![CDATA[final LongProperty timeOfLastExecute = new SimpleLongProperty(System.currentTimeMillis());

mapScroll.addEventFilter(MouseEvent.MOUSE_DRAGGED, e -> {
        if(System.currentTimeMillis() - timeOfLastExecute.get() > 10) {
            endX = e.getX();
            endY = e.getY();
            Bounds viewBounds = mapScroll.getViewportBounds();
            double startEndX = startX - endX;
            double startEndY = startY - endY;

            Bounds contentBounds = mapScroll.getContent().getLayoutBounds();

            double hChange = startEndX / (contentBounds.getWidth() - viewBounds.getWidth());
            double vChange = startEndY / (contentBounds.getHeight() - viewBounds.getHeight());
            mapScroll.setHvalue(mapScroll.getHvalue() + hChange);
            mapScroll.setVvalue(mapScroll.getVvalue() + vChange);

            startX = endX;
            startY = endY;
            timeOfLastExecute.set(System.currentTimeMillis());
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40147719" questionTitle="How to make Loading Scene before application window in javaFx?">
<Answer><![CDATA[public class FirstPreloader extends Preloader {
    ProgressBar bar;
    Stage stage;

    private Scene createPreloaderScene() {
        bar = new ProgressBar();
        BorderPane p = new BorderPane();
        p.setCenter(bar);
        return new Scene(p, 300, 150);        
    }

    public void start(Stage stage) throws Exception {
        this.stage = stage;
        stage.setScene(createPreloaderScene());        
        stage.show();
    }

    @Override
    public void handleProgressNotification(ProgressNotification pn) {
        bar.setProgress(pn.getProgress());
    }

    @Override
    public void handleStateChangeNotification(StateChangeNotification evt) {
        if (evt.getType() == StateChangeNotification.Type.BEFORE_START) {
            stage.hide();
        }
    }    
}]]></Answer>
<Answer><![CDATA[public void initAppScreen(final Stage mainStage) {

        loadingWindow = new LoadingWindow().getInitWindow();

        applicationContext = new ClassPathXmlApplicationContext("hibernate-config.xml");

        initSample();

        Platform.runLater(new Runnable() {
            public void run() {

                Scene root = new Scene(new AppWindow().getAppWindow());
                mainStage.setScene(root);

                mainStage.setTitle("My Application Title");
                mainStage.getIcons().add(new Image("/images/logo.png"));
                mainStage.setOnCloseRequest(event -> System.exit(0));

                mainStage.setWidth(APP_WINDOW_WIDTH);
                mainStage.setHeight(APP_WINDOW_HEIGHT);
                mainStage.setMinWidth(APP_WINDOW_WIDTH);
                mainStage.setMinHeight(APP_WINDOW_HEIGHT);

                Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
                mainStage.setX((screenBounds.getWidth() - APP_WINDOW_WIDTH) / 2);
                mainStage.setY((screenBounds.getHeight() - APP_WINDOW_HEIGHT) / 2);

                mainStage.show();
                loadingWindow.dispose();
            }
        });

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40110175" questionTitle="How to run Javafx stage/scene in Swing Application?">
<Answer><![CDATA[JFrame frame = new JFrame();
                    frame.setUndecorated(true);
                    final JFXPanel fxPanel = new JFXPanel();
                    frame.add(fxPanel);
                    frame.setSize(FRAMEWIDTH, FRAMEHEIGHT);
                    frame.setVisible(true);
                    frame.setResizable(false);


                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {

                            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/AdminViewSwing.fxml"));
                            try {
                                Parent root = loader.load();
                                Scene scene = new Scene(root, FRAMEWIDTH, FRAMEHEIGHT);
                                fxPanel.setScene(scene);
                                AdminController controller = loader.getController();
                                controller.setMainApp();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    });]]></Answer>
<Answer><![CDATA[case ADMIN:

    // I'm assuming this code is on the AWT Event Dispatch thread

    JFrame window = new JFrame();
    JFXPanel jfxPanel = new JFXPanel();
    Platform.runLater(() -> {

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/AdminView.fxml"));
            Parent root = loader.load();
            jfxPanel.setScene(new Scene(root, SCENEWIDTH, SCENEHEIGHT));
            // Give the controller access to the main app
            AdminController controller = loader.getController();
            controller.setMainApp();

            SwingUtilities.invokeLater(() -> {
                window.add(jfxPanel);
                window.pack();
                window.setVisible(true);
            });

        } catch (Exception e) {
            e.printStackTrace();
        }

    });

break;]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40104750" questionTitle="Last digit in a exponent b">
<Answer><![CDATA[import java.util.Scanner;

    public class LastDigit{

       public static void main(String []args){
        Scanner p = new Scanner(System.in);
        System.out.println("Enter a:");
        int a = p.nextInt();
        System.out.println("Enter b:");
        int b = p.nextInt();
        switch (a%10){
            case 0:case 1:case 5: case 6:
                System.out.println("Last digit is: "+a%10);    //if a ends with 0,1,5 or 6 a^b ends with 0,1,5 or 6 regardless what b is
                 break; 
            case 4:
                if(b%2==1){
                   System.out.println("Last digit is: "+4);     // if a ends with a 4 a^b ends with 4 if b is odd or ends with 6 if b is even                   
                }
               else{
                   System.out.println("Last digit is: "+6);
                }
                 break; 
            case 9:                                             
                if(b%2==1){
                    System.out.println("Last digit is: "+9);    // see case 4
                }
                else{
                   System.out.println("Last digit is: "+1);
                }
                 break; 
            case 2:
                if(b%4==1){                                         // if a ends with 2 a^b ends with 2,4,8 or 6 depending on what b%4 is
                   System.out.println("Last digit is: "+2);
                }
                if(b%4==2){
                    System.out.println("Last digit is: "+4);
                }
                if(b%4==3){
                    System.out.println("Last digit is: "+8);
                }
                else{
                     System.out.println("Last digit is: "+6);
                }
                 break; 
            case 3:
                if(b%4==1){                                         // if a ends wizh 3 a^b ends with 3,9,7 or 1 depending on what b%4 is
                  System.out.println("Last digit is: "+3);
                }
                if(b%4==2){
                  System.out.println("Last digit is: "+9);
                }
                if(b%4==3){
                  System.out.println("Last digit is: "+7);
                }
                else{
                  System.out.println("Last digit is: "+1);
                }
                break; 
            case 7:
                if(b%4==1){
                    System.out.println("Last digit is: "+7);
                }
                if(b%4==2){
                    System.out.println("Last digit is: "+9);
                }
                if(b%4==3){
                    System.out.println("Last digit is: "+3);
                }
                else{
                    System.out.println("Last digit is: "+1);
                }
                 break; 
            case 8: 
                if(b%4==1){
                    System.out.println("Last digit is: "+8);
                 }
                 if(b%4==2){
                    System.out.println("Last digit is: "+4);
                 }
                 if(b%4==3){
                    System.out.println("Last digit is: "+2);
                 }
                 else{
                     System.out.println("Last digit is: "+6);
                }
                 break;                 
        };
       }
    }]]></Answer>
<Answer><![CDATA[public static void main(String[] args) throws java.lang.Exception {
    Scanner p = new Scanner(System.in);
    for(int test = p.nextInt();test>0;test-- ){

        int a = p.nextInt();
        int b = p.nextInt();
        System.out.println(LastDigit(a,b));

    }
}

public static int LastDigit(int a, int b) {
    int k,f=1;
    if(b==0)
        return 1;
    else {
        k =b%4;
        if(k==0)
            b=4;
        else
            b=k;
        for(int i=0;i<b;i++)
            f=f*a;

        return(f%10);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40104688" questionTitle="JavaFX - Center Child Stage to Parent Stage">
<Answer><![CDATA[//Let's say we want to center the new window in the parent window

ChangeListener<Number> widthListener = (observable, oldValue, newValue) -> {
        double stageWidth = newValue.doubleValue();
        stage.setX(parentStage.getX() + parentStage.getWidth() / 2 - stageWidth / 2);
};
ChangeListener<Number> heightListener = (observable, oldValue, newValue) -> {
        double stageHeight = newValue.doubleValue();
        stage.setY(parentStage.getY() + parentStage.getHeight() / 2 - stageHeight / 2);   
};

stage.widthProperty().addListener(widthListener);
stage.heightProperty().addListener(heightListener);

//Once the window is visible, remove the listeners
stage.setOnShown(e -> {
    stage.widthProperty().removeListener(widthListener);
    stage.heightProperty().removeListener(heightListener);
});

stage.show();]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Button btnMain = new Button("show");
    btnMain.setOnAction(evt -> {
        Stage stage = new Stage();
        Button btn = new Button("Close");
        btn.setOnAction((ActionEvent event) -> {
            stage.close();
        });

        StackPane root = new StackPane();
        root.getChildren().add(btn);

        Bounds mainBounds = primaryStage.getScene().getRoot().getLayoutBounds();
        Scene scene = new Scene(root, 400, 400);

        stage.setScene(scene);

        // layout new scene
        scene.getRoot().applyCss();
        scene.getRoot().layout();

        Bounds rootBounds = scene.getRoot().getLayoutBounds();
        stage.setX(primaryStage.getX() + (mainBounds.getWidth() - rootBounds.getWidth()) / 2);
        stage.setY(primaryStage.getY() + (mainBounds.getHeight() - rootBounds.getHeight()) / 2);
        stage.showAndWait();
        System.out.println("done");
    });
    Scene mainScene = new Scene(new StackPane(btnMain), 600, 600);
    primaryStage.setScene(mainScene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();
            Scene scene = new Scene(root, 400, 400);

            Button button = new Button("Open another Stage");
            button.setOnAction(e -> {

                Stage popUpStage = new Stage();

                // Here add the FXML content to the Scene
                Scene popUpScene = new Scene(new Button());
                popUpStage.setScene(popUpScene);

                // Calculate the center position of the parent Stage
                double centerXPosition = primaryStage.getX() + primaryStage.getWidth()/2d;
                double centerYPosition = primaryStage.getY() + primaryStage.getHeight()/2d;

                // Hide the pop-up stage before it is shown and becomes relocated
                popUpStage.setOnShowing(ev -> popUpStage.hide());

                // Relocate the pop-up Stage
                popUpStage.setOnShown(ev -> {
                    popUpStage.setX(centerXPosition - popUpStage.getWidth()/2d);
                    popUpStage.setY(centerYPosition - popUpStage.getHeight()/2d);
                    popUpStage.show();
                });

                popUpStage.showAndWait();
            });

            root.setCenter(button);


            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="40031632" questionTitle="Custom JavaFX Dialog">
<Answer><![CDATA[public class LoginDialog extends Dialog<SomeDataType> {

    public LoginDialog(Data data) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("fxml/LoginDialog.fxml"));
            Parent root = loader.load();
            LoginDialogController controller = loader.<LoginDialogController>getController();
            controller.setModel(new LoginModel(data));
            getDialogPane().setContent(root);

            setResultConverter(buttonType -> {
                SomeDataType someData = ... ;
                return someData ;
            });

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}]]></Answer>
<Answer><![CDATA[public void popup() {
        final Stage dialog = new Stage();
        dialog.setTitle("Confirmation");
        Button yes = new Button("Yes");
        Button no = new Button("No");

        Label displayLabel = new Label("What do you want to do ?");
        displayLabel.setFont(Font.font(null, FontWeight.BOLD, 14));

        dialog.initModality(Modality.NONE);
        dialog.initOwner((Stage) tableview.getScene().getWindow());

        HBox dialogHbox = new HBox(20);
        dialogHbox.setAlignment(Pos.CENTER);

        VBox dialogVbox1 = new VBox(20);
        dialogVbox1.setAlignment(Pos.CENTER_LEFT);

        VBox dialogVbox2 = new VBox(20);
        dialogVbox2.setAlignment(Pos.CENTER_RIGHT);

        dialogHbox.getChildren().add(displayLabel);
        dialogVbox1.getChildren().add(yes);
        dialogVbox2.getChildren().add(no);

        yes.addEventHandler(MouseEvent.MOUSE_CLICKED,
                new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent e) {
                        // inside here you can use the minimize or close the previous stage//
                        dialog.close();
                    }
                });
        no.addEventHandler(MouseEvent.MOUSE_CLICKED,
                new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent e) {
                        dialog.close();
                    }
                });

        dialogHbox.getChildren().addAll(dialogVbox1, dialogVbox2);
        Scene dialogScene = new Scene(dialogHbox, 500, 40);
        dialogScene.getStylesheets().add("//style sheet of your choice");
        dialog.setScene(dialogScene);
        dialog.show();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39980133" questionTitle="Java 8 extending stream&lt;T&gt;">
<Answer><![CDATA[public interface MyStream<T> {

    Stream<T> stream();

    static <T> MyStream<T> of(Stream<T> stream) {
        return () -> stream;
    }

    default <U> MyStream<U> stream(Function<Stream<T>, Stream<U>> stream) {
        return of(stream.apply(stream()));
    }

    //Watch out with Double cast. Check the type in method or restrict it via generic
    default MyStream<T> biggerThanFour() {
        return of(stream().filter(i -> ((Double) i > 4)));
    }

    //Watch out with Double cast. Check the type in method or restrict it via generic
    //Another method
    default MyStream<T> biggerThanFourteen() {
        return of(stream().filter(i -> ((Double) i > 14)));
    }
}]]></Answer>
<Answer><![CDATA[public class MyStream<T> implements Stream<T> {

    private final Stream<T> delegate;

    public MyStream(Stream<T> delegate) {
        this.delegate = delegate;
    }

    @Override
    public Stream<T> filter(Predicate<? super T> predicate) {
        return delegate.filter(predicate);
    }

    @Override
    public void forEach(Consumer<? super T> action) {
        delegate.forEach(action);
    }

    MyStream<T> biggerThanFour() {
        return new MyStream<>(delegate.filter(i -> ((Double) i > 4)));
    }

    // all other methods from the interface
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39952739" questionTitle="Reading chunks of a text file with a Java 8 Stream">
<Answer><![CDATA[public static Stream<String> lines(Path path, String delimiter) throws IOException {
    Stream<String> lines = Files.lines(path);
    Iterator<String> iterator = lines.iterator();
    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<String>() {
        String nextLine;

        @Override
        public boolean hasNext() {
            if (nextLine != null) {
                return true;
            }
            while (iterator.hasNext()) {
                String line = iterator.next();
                if (!delimiter.equals(line)) {
                    nextLine = line;
                    return true;
                }
            }
            lines.close();
            return false;
        }

        @Override
        public String next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            StringBuilder sb = new StringBuilder(nextLine);
            nextLine = null;
            while (iterator.hasNext()) {
                String line = iterator.next();
                if (delimiter.equals(line)) {
                    break;
                }
                sb.append('\n').append(line);
            }
            return sb.toString();
        }
    }, Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.IMMUTABLE), false);
}]]></Answer>
<Answer><![CDATA[public class ChunkSpliterator extends Spliterators.AbstractSpliterator<List<String>> {
    private final Spliterator<String> source;
    private final Predicate<String> delimiter;
    private final Consumer<String> getChunk;
    private List<String> current;

    ChunkSpliterator(Spliterator<String> lineSpliterator, Predicate<String> mark) {
        super(lineSpliterator.estimateSize(), ORDERED|NONNULL);
        source=lineSpliterator;
        delimiter=mark;
        getChunk=s -> {
            if(current==null) current=new ArrayList<>();
            current.add(s);
        };
    }
    public boolean tryAdvance(Consumer<? super List<String>> action) {
        while(current==null || !delimiter.test(current.get(current.size()-1)))
            if(!source.tryAdvance(getChunk)) return lastChunk(action);
        current.remove(current.size()-1);
        action.accept(current);
        current=null;
        return true;
    }
    private boolean lastChunk(Consumer<? super List<String>> action) {
        if(current==null) return false;
        action.accept(current);
        current=null;
        return true;
    }

    public static Stream<List<String>> toChunks(
        Stream<String> lines, Predicate<String> splitAt, boolean parallel) {
        return StreamSupport.stream(
            new ChunkSpliterator(lines.spliterator(), splitAt),
            parallel);
    }
}]]></Answer>
<Answer><![CDATA[Path path = Paths.get("... .txt");
    try {
        List<StringBuilder> glist = Files.lines(path, StandardCharsets.UTF_8)
                .collect(() -> new ArrayList<StringBuilder>(),
                        (list, line) -> {
                            if (list.isEmpty() || list.get(list.size() - 1).toString().endsWith("$$$$\n")) {
                                list.add(new StringBuilder());
                            }
                            list.get(list.size() - 1).append(line).append('\n');
                        },
                        (list1, list2) -> {
                            if (!list1.isEmpty() && !list1.get(list1.size() - 1).toString().endsWith("$$$$\n")
                                    && !list2.isEmpty()) {
                                // Merge last of list1 and first of list2:
                                list1.get(list1.size() - 1).append(list2.remove(0).toString());
                            }
                            list1.addAll(list2);
                        });
        glist.forEach(sb -> System.out.printf("------------------%n%s%n", sb));
    } catch (IOException ex) {
        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39870529" questionTitle="Performing an operation between two HashMaps by using STREAM API">
<Answer><![CDATA[public static <T, U> Map<T, List<Double>> merge(Map<T, Map<U, Double>> m1, Map<T, Map<U, Double>> m2) {
    Map<T, List<Double>> result = new HashMap<>();
    m1.forEach((k, v) -> {
        Map<U, Double> v2 = m2.get(k);
        if (v2 != null) {
            // both outer maps contain the same key
            ArrayList<Double> list = new ArrayList<>();
            v.forEach((innerK, innerV) -> {
                Double d = v2.get(innerK);
                if (d != null) {
                    // matching key in both inner maps
                    list.add(innerV - d);
                }
            });
            // list.trimToSize();
            result.put(k, list);
        }
    });
    return result;
}]]></Answer>
<Answer><![CDATA[public static <T, S> Map<T, List<Double>> method(
        Map<T, Map<S, Double>> map1,
        Map<T, Map<S, Double>> map2)
{
    Set<T> commonKeys = intersection(map1.keySet(), map2.keySet());

    return commonKeys.stream().collect(Collectors.toMap(
            Function.identity(),
            key -> {
                Map<S, Double> inner1 = map1.get(key);
                Map<S, Double> inner2 = map2.get(key);

                Set<S> innerCommonKeys = intersection(
                        inner1.keySet(),
                        inner2.keySet());

                        return innerCommonKeys.stream().map(innerKey ->
                                inner1.get(innerKey) - inner2.get(innerKey))
                                .collect(Collectors.toList());
            }));
}

private static <T> Set<T> intersection(Set<T> set1, Set<T> set2) {
    Set<T> intersection = new HashSet<T>(set1);
    intersection.retainAll(set2);
    return intersection;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39827911" questionTitle="JavaFx 8 - Scaling / zooming ScrollPane relative to mouse position">
<Answer><![CDATA[@Override
public void initialize(URL location, ResourceBundle resources) {

    anchorpane.setOnScroll(event -> {
        double zoom_fac = 1.05;

        if(delta_y < 0) {
            zoom_fac = 2.0 - zoom_fac;
        }

        Scale newScale = new Scale();
        newScale.setPivotX(event.getX);
        newScale.setPivotY(event.getY);
        newScale.setX( content_group.getScaleX() * zoom_fac );
        newScale.setY( content_group.getScaleY() * zoom_fac );

        content_group.getTransforms().add(newScale);

        event.consume();
    });
}]]></Answer>
<Answer><![CDATA[import javafx.geometry.Bounds;
import javafx.geometry.Point2D;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;

public class ZoomableScrollPane extends ScrollPane {
    private double scaleValue = 0.7;
    private double zoomIntensity = 0.02;
    private Node target;
    private Node zoomNode;

    public ZoomableScrollPane(Node target) {
        super();
        this.target = target;
        this.zoomNode = new Group(target);
        setContent(outerNode(zoomNode));

        setPannable(true);
        setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        setFitToHeight(true); //center
        setFitToWidth(true); //center

        updateScale();
    }

    private Node outerNode(Node node) {
        Node outerNode = centeredNode(node);
        outerNode.setOnScroll(e -> {
            e.consume();
            onScroll(e.getTextDeltaY(), new Point2D(e.getX(), e.getY()));
        });
        return outerNode;
    }

    private Node centeredNode(Node node) {
        VBox vBox = new VBox(node);
        vBox.setAlignment(Pos.CENTER);
        return vBox;
    }

    private void updateScale() {
        target.setScaleX(scaleValue);
        target.setScaleY(scaleValue);
    }

    private void onScroll(double wheelDelta, Point2D mousePoint) {
        double zoomFactor = Math.exp(wheelDelta * zoomIntensity);

        Bounds innerBounds = zoomNode.getLayoutBounds();
        Bounds viewportBounds = getViewportBounds();

        // calculate pixel offsets from [0, 1] range
        double valX = this.getHvalue() * (innerBounds.getWidth() - viewportBounds.getWidth());
        double valY = this.getVvalue() * (innerBounds.getHeight() - viewportBounds.getHeight());

        scaleValue = scaleValue * zoomFactor;
        updateScale();
        this.layout(); // refresh ScrollPane scroll positions & target bounds

        // convert target coordinates to zoomTarget coordinates
        Point2D posInZoomTarget = target.parentToLocal(zoomNode.parentToLocal(mousePoint));

        // calculate adjustment of scroll position (pixels)
        Point2D adjustment = target.getLocalToParentTransform().deltaTransform(posInZoomTarget.multiply(zoomFactor - 1));

        // convert back to [0, 1] range
        // (too large/small values are automatically corrected by ScrollPane)
        Bounds updatedInnerBounds = zoomNode.getBoundsInLocal();
        this.setHvalue((valX + adjustment.getX()) / (updatedInnerBounds.getWidth() - viewportBounds.getWidth()));
        this.setVvalue((valY + adjustment.getY()) / (updatedInnerBounds.getHeight() - viewportBounds.getHeight()));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39796527" questionTitle="Compile dynamically java class web project">
<Answer><![CDATA[public void DynamicJarCodeTest() throws Exception {
    try {
        StringBuilder sourceCode = new StringBuilder();
        sourceCode.append("package org.dvare.dynamic;\n");
        sourceCode.append("import org.apache.commons.math3.Field;\n");
        sourceCode.append("public class SourceClass {\n");
        sourceCode.append("   public String test() { \n");
        sourceCode.append("   return \"inside test method\";\n");
        sourceCode.append("   }\n");
        sourceCode.append("}");


        DynamicCompiler dynamicCompiler = new DynamicCompiler();
        dynamicCompiler.setSeparateContext(true);
        dynamicCompiler.setUpdateContextClassLoader(false);

        dynamicCompiler.addJar(getClass().getClassLoader().getResource("commons-math3.jar"));
        dynamicCompiler.addSource("org.dvare.dynamic.SourceClass", sourceCode.toString());
        dynamicCompiler.build();

        Class aClass = Class.forName("org.apache.commons.math3.Field", false, dynamicCompiler.getClassLoader());
        Assert.assertNotNull(aClass);

        Class bClass = Class.forName("org.dvare.dynamic.SourceClass", false, dynamicCompiler.getClassLoader());
        Assert.assertNotNull(bClass);


    } catch (DynamicCompilerException e) {
        System.out.println(e.getErrorList());
    } catch (Exception e) {
        e.printStackTrace();
    }

}]]></Answer>
<Answer><![CDATA[public static Class<?> compile(ClassLoader parent, String className, String sourceCodeInText) throws Exception {
        SourceCode sourceCode = new SourceCode(className, sourceCodeInText);
        CompiledCode compiledCode = new CompiledCode(className);
        Iterable<? extends JavaFileObject> compilationUnits = Arrays.asList(sourceCode);
        DynamicClassLoader cl = new DynamicClassLoader(parent);
        ExtendedStandardJavaFileManager fileManager = new ExtendedStandard(
                javac.getStandardFileManager(null, null, null), compiledCode, cl);

        // set the classpath
        List<String> options = new ArrayList<String>();

        options.add("-classpath");
        StringBuilder sb = new StringBuilder();
        Enumeration<URL> resources = parent.getResources("/");
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            sb.append(url.getFile()).append(File.pathSeparator);
        }

        options.add(sb.toString());

        // execute the compiler
        Boolean call = javac.getTask(null, fileManager, null, options, null, compilationUnits).call();
        if (call) {
            return cl.loadClass(className);
        }
        return null;
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39792291" questionTitle="How to divide 1 completablefuture to many completablefuture in stream?">
<Answer><![CDATA[public static <T> Stream<T> flattenStreamOfFutures(Stream<CompletableFuture<? extends T>> stream, boolean parallel) {
    return StreamSupport.stream(new CompletableFutureSpliterator<T>(stream), parallel);
}

public static <T> Stream<T> flattenStreamOfFuturesOfStream(Stream<CompletableFuture<? extends Stream<T>>> stream,
                                                           boolean parallel) {
    return flattenStreamOfFutures(stream, parallel).flatMap(Function.identity());
}

public static class CompletableFutureSpliterator<T> implements Spliterator<T> {
    private List<CompletableFuture<? extends T>> futures;

    CompletableFutureSpliterator(Stream<CompletableFuture<? extends T>> stream) {
        futures = stream.collect(Collectors.toList());
    }

    CompletableFutureSpliterator(CompletableFuture<T>[] futures) {
        this.futures = new ArrayList<>(Arrays.asList(futures));
    }

    CompletableFutureSpliterator(final List<CompletableFuture<? extends T>> futures) {
        this.futures = new ArrayList<>(futures);
    }

    @Override
    public boolean tryAdvance(final Consumer<? super T> action) {
        if (futures.isEmpty())
            return false;
        CompletableFuture.anyOf(futures.stream().toArray(CompletableFuture[]::new)).join();
        // now at least one of the futures has finished, get its value and remove it
        ListIterator<CompletableFuture<? extends T>> it = futures.listIterator(futures.size());
        while (it.hasPrevious()) {
            final CompletableFuture<? extends T> future = it.previous();
            if (future.isDone()) {
                it.remove();
                action.accept(future.join());
                return true;
            }
        }
        throw new IllegalStateException("Should not reach here");
    }

    @Override
    public Spliterator<T> trySplit() {
        if (futures.size() > 1) {
            int middle = futures.size() >>> 1;
            // relies on the constructor copying the list, as it gets modified in place
            Spliterator<T> result = new CompletableFutureSpliterator<>(futures.subList(0, middle));
            futures = futures.subList(middle, futures.size());
            return result;
        }
        return null;
    }

    @Override
    public long estimateSize() {
        return futures.size();
    }

    @Override
    public int characteristics() {
        return IMMUTABLE | SIZED | SUBSIZED;
    }
}]]></Answer>
<Answer><![CDATA[public static <T> CompletableFuture<Stream<T>> flatMapCF(Stream<CompletableFuture<T>> stream){
    return CompletableFuture.supplyAsync( ()->
        stream.map(CompletableFuture::join)
    );
}


Stream<CompletableFuture<Page>> pagesCFS = IntStream
        .range(0, 10)
        .mapToObj(i -> getPage(i));

CompletableFuture<Stream<Page>> pageCF = flatMapCF(pagesCFS);

CompletableFuture<Stream<Document>> docCF= 
   pageCF.thenCompose(a ->
        flatMapCF(a.flatMap(
                b -> b.getDocsId()
                        .stream()
                        .map(c -> getDocument(c))
        )));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39782952" questionTitle="JavaFX Table Cell back ground Color">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

public class TableMCVE extends Application {
    @Override
    public void start(Stage stage) {

        ObservableList<ObservableList<String>> tableData = FXCollections.observableArrayList();
        tableData.add(FXCollections.observableArrayList("Row1Col1", "Row1Col2"));
        tableData.add(FXCollections.observableArrayList("Row2Col1", "Row2Col2"));
        tableData.add(FXCollections.observableArrayList("Row3Col1", "Row3Col2"));

        TableView<ObservableList<String>> table = new TableView<ObservableList<String>>();

        TableColumn<ObservableList<String>, String> col1 = new TableColumn<ObservableList<String>, String>("Col1");
        col1.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().get(0)));

        // Set the cell factory of the column with a custom TableCell to modify its behavior.
        col1.setCellFactory(e -> new TableCell<ObservableList<String>, String>() {
            @Override
            public void updateItem(String item, boolean empty) {
                // Always invoke super constructor.
                super.updateItem(item, empty);

                if (item == null || empty) {
                    setText(null);
                } else {
                    setText(item);

                    // If index is two we set the background color explicitly.
                    if (getIndex() == 2) {
                        this.setStyle("-fx-background-color: green;");
                    }
                }
            }
        });

        TableColumn<ObservableList<String>, String> col2 = new TableColumn<ObservableList<String>, String>("Col2");
        col2.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().get(1)));

        // Set the cell factory of the column with a custom TableCell to modify its behavior.
        col2.setCellFactory(e -> new TableCell<ObservableList<String>, String>() {
            @Override
            public void updateItem(String item, boolean empty) {
                // Always invoke super constructor.
                super.updateItem(item, empty);

                if (item == null || empty) {
                    setText(null);
                } else {
                    setText(item);

                    // If index is zero we set the background color explicitly.
                    if (getIndex() == 0) {
                        this.setStyle("-fx-background-color: blue;");
                    }
                }
            }
        });

        table.getColumns().addAll(col1, col2);
        table.getItems().addAll(tableData);

        stage.setScene(new Scene(table));
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
<Answer><![CDATA[TableView<Item<String>> tableView = new TableView<>();
// sample item class contains a single property with the same type as the type parameter (String in this case)
tableView.getItems().addAll(
        new Item<>("1"),
        new Item<>("2"),
        new Item<>("4"),
        new Item<>("5"),
        new Item<>("6"),
        new Item<>("7"),
        new Item<>("8"),
        new Item<>("9")
);

// create columns
TableColumn<Item<String>, String> column1 = new TableColumn<>("value");
TableColumn<Item<String>, Void> column2 = new TableColumn<>();
tableView.getColumns().addAll(column1, column2);

// create list of colors (CSS)
final List<String> colors = Arrays.asList(
        "blue",
        "green",
        "red",
        "violet",
        "yellow",
        ...
);

Callback factory = new Callback<TableColumn<Item<String>, Object>, TableCell<Item<String>, Object>>() {

    private int columns = tableView.getColumns().size();

    @Override
    public TableCell<Item<String>, Object> call(TableColumn<Item<String>, Object> param) {
        return new TableCell<Item<String>, Object>() {

            private int columnIndex = param.getTableView().getColumns().indexOf(param);

            @Override
            public void updateIndex(int i) {
                super.updateIndex(i);
                // select color based on index of row/column
                if (i >= 0) {
                    // select color repeating the color, if we run out of colors
                    String color = colors.get((i * columns + columnIndex) % colors.size());
                    this.setStyle("-fx-my-cell-background: " + color + ";");
                    System.out.println(getStyle());
                }
            }

            @Override
            protected void updateItem(Object item, boolean empty) {
                super.updateItem(item, empty);

                // assign item's toString value as text
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(item.toString());
                }
            }

        };
    }

};

column1.setCellValueFactory(new PropertyValueFactory<>("value"));
column1.setCellFactory(factory);
column2.setCellFactory(factory);

Scene scene = new Scene(tableView);
scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39739476" questionTitle="Use JavaFX chart API to draw chart image">
<Answer><![CDATA[public class JavaFXPlotter {

    public static File toLineChart(String title, String seriesName, List<Integer> times, List<Integer> data) {

        File chartFile = new File("D:\\charttest.png");

        // results: {completed, successful}
        Boolean[] results = new Boolean[] { false, false };

        SwingUtilities.invokeLater(() -> {

            // Initialize FX Toolkit
            new JFXPanel();

            Platform.runLater(() -> {
                final NumberAxis xAxis = new NumberAxis();
                final NumberAxis yAxis = new NumberAxis();

                final LineChart<Number, Number> lineChart = new LineChart<Number, Number>(xAxis, yAxis);

                lineChart.setTitle(title);

                XYChart.Series<Number, Number> series = new XYChart.Series<>();
                series.setName(seriesName);

                for (int i = 0; i < times.size(); i++)
                    series.getData().add(new XYChart.Data<Number, Number>(times.get(i), data.get(i)));

                lineChart.getData().add(series);

                Scene scene = new Scene(lineChart, 800, 600);

                WritableImage image = scene.snapshot(null);

                try {
                    ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", chartFile);
                    results[1] = true;
                } catch (Exception e) {
                    results[0] = true;
                } finally {
                    results[0] = true;
                }
            });
        });

        while (!results[0]) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return (results[1]) ? chartFile : null;
    }


}]]></Answer>
<Answer><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.chart.*;
import javafx.scene.Group;
import javafx.scene.image.WritableImage;
import javax.imageio.ImageIO;

public class PieChartSample extends Application {

    private static String[] arguments; 

    @Override public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Imported Fruits");
        stage.setWidth(500);
        stage.setHeight(500);

        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();

//               
        final PieChart chart = new PieChart(pieChartData);
        chart.setTitle("Imported Fruits");
        for(int i = 0; i < arguments.length; i+=2)
        {
            System.out.println(arguments[i] + " " + arguments[i+1]);
            chart.getData().add(new PieChart.Data(arguments[i], Double.parseDouble(arguments[i+1])));
        }

        ((Group) scene.getRoot()).getChildren().add(chart);

        saveAsPng(scene);
        System.out.println("Done!");
        System.exit(0);
        //stage.setScene(scene);
        //stage.show();
    }

    public static void main(String[] args) {
        arguments = args;
        launch(args);
    }

    static void saveAsPng(Scene scene){
        try 
        {
            WritableImage image = scene.snapshot(null);

            File file = new File("tempPieChart.png");

            ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(PieChartSample.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39692625" questionTitle="JavaFX Transparent Cursor using WritableImage">
<Answer><![CDATA[public class CursorSimulator {

    private final FadeTransition fade;

    public CursorSimulator(Image image, Scene scene, ObservableList<Node> rootChildrenWriteable, double hotspotX, double hotspotY) {
        ImageView imageView = new ImageView(image);
        imageView.setManaged(false);
        imageView.setMouseTransparent(true);

        fade = new FadeTransition(Duration.seconds(2), imageView);
        fade.setFromValue(0);
        fade.setToValue(1);

        // keep image on top
        rootChildrenWriteable.addListener((Observable o) -> {
            if (imageView.getParent() != null
                    && rootChildrenWriteable.get(rootChildrenWriteable.size() - 1) != imageView) {
                // move image to top, after changes are done...
                Platform.runLater(() -> imageView.toFront());
            }
        });
        scene.addEventFilter(MouseEvent.MOUSE_ENTERED, evt -> {
            rootChildrenWriteable.add(imageView);
        });
        scene.addEventFilter(MouseEvent.MOUSE_EXITED, evt -> {
            rootChildrenWriteable.remove(imageView);
        });
        scene.addEventFilter(MouseEvent.MOUSE_MOVED, evt -> {
            imageView.setLayoutX(evt.getX() - hotspotX);
            imageView.setLayoutY(evt.getY() - hotspotY);
        });
        scene.setCursor(Cursor.NONE);
    }

    public void fadeOut() {
        fade.setRate(-1);
        if (fade.getStatus() != Animation.Status.RUNNING) {
            fade.playFrom(fade.getTotalDuration());
        }
    }

    public void fadeIn() {
        fade.setRate(1);
        if (fade.getStatus() != Animation.Status.RUNNING) {
            fade.playFromStart();
        }
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Platform;
import javafx.beans.Observable;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;

/**
 * This class allows you to set as a Cursor in a JavaFX Scene,whatever you want
 * ,even a video!. <br>
 * <br>
 * <b>What you have to do is create a basic layout,for example:</b><br>
 * #-->A BorderPane which contains a MediaView,<br>
 * #-->A StackPane which contains an animated ImageView,<br>
 * #-->A Pane which contains an animated Rectangle or something more complex
 * etc..)<br>
 * 
 * <br>
 * <br>
 * The options are unlimited!
 * 
 * @author GOXR3PLUS
 * @param <T>
 * @Version 1.0
 */
public class JFXCustomCursor {

    private SimpleIntegerProperty hotSpotX = new SimpleIntegerProperty();
    private SimpleIntegerProperty hotSpotY = new SimpleIntegerProperty();

    private Scene scene;
    private Pane sceneRoot;
    private Pane content;
    private EventHandler<MouseEvent> eventHandler1;
    private EventHandler<MouseEvent> eventHandler2;
    private EventHandler<MouseEvent> eventHandler3;

    /**
     * Constructor
     * 
     * @param scene
     *            The Scene of your Stage
     * @param sceneRoot
     *            The Root of your Stage Scene
     * @param content
     *            The content of the JFXCustomCursor class
     * @param hotspotX
     *            Represents the location of the cursor inside the content on X
     *            axis
     * @param hotspotY
     *            Represents the location of the cursor inside the content on Y
     *            axis
     */
    public JFXCustomCursor(Scene scene, Pane sceneRoot, Pane content, int hotspotX, int hotspotY) {

        // Go
        setRoot(scene, sceneRoot, content, hotspotX, hotspotY);

    }

    /**
     * This method changes the content of the JFXCustomCursor
     * 
     * @param scene
     *            The Scene of your Stage
     * @param sceneRoot
     *            The Root of your Stage Scene
     * @param content
     *            The content of the JFXCustomCursor class
     * @param hotspotX
     *            Represents the location of the cursor inside the content on X
     *            axis
     * @param hotspotY
     *            Represents the location of the cursor inside the content on Y
     *            axis
     */
    public void setRoot(Scene scene, Pane sceneRoot, Pane content, int hotSpotX, int hotSpotY) {

        // Keep them in case of unRegister-reRegister
        unRegister(); // has to be called before the below happens
        this.scene = scene;
        this.sceneRoot = sceneRoot;
        this.content = content;

        // hot spots
        this.hotSpotX.set(hotSpotX);
        this.hotSpotX.set(hotSpotY);

        // cursor container
        content.setManaged(false);
        content.setMouseTransparent(true);

        // Keep the Content on the top of Scene
        ObservableList<Node> observable = sceneRoot.getChildren();
        observable.addListener((Observable osb) -> {
            if (content.getParent() != null && observable.get(observable.size() - 1) != content) {
                // move the cursor on the top
                Platform.runLater(content::toFront);
            }
        });

        if (!observable.contains(content))
            observable.add(content);

        // Add the event handlers
        eventHandler1 = evt -> {
            if (!sceneRoot.getChildren().contains(content))
                observable.add(content);
        };
        eventHandler2 = evt -> observable.remove(content);

        eventHandler3 = evt -> {
            content.setLayoutX(evt.getX() - hotSpotX);
            content.setLayoutY(evt.getY() - hotSpotY);
        };

        scene.addEventFilter(MouseEvent.MOUSE_ENTERED, eventHandler1);
        scene.addEventFilter(MouseEvent.MOUSE_EXITED, eventHandler2);
        scene.addEventFilter(MouseEvent.MOUSE_MOVED, eventHandler3);

    }

    /**
     * Unregisters the CustomCursor from the Scene completely
     */
    public void unRegister() {
        if (scene != null) {
            sceneRoot.getChildren().remove(content);
            scene.removeEventFilter(MouseEvent.MOUSE_ENTERED, eventHandler1);
            scene.removeEventFilter(MouseEvent.MOUSE_EXITED, eventHandler2);
            scene.removeEventFilter(MouseEvent.MOUSE_MOVED, eventHandler3);
        }
    }

    /**
     * Re register the CustomCursor to the Scene,<b>this method is
     * experimental(use with caution!)</b>
     */
    public void reRegister() {
        if (scene != null)
            setRoot(scene, sceneRoot, content, hotSpotX.get(), hotSpotY.get());
    }

    public SimpleIntegerProperty hotSpotXProperty() {
        return hotSpotX;
    }

    public SimpleIntegerProperty hotSpotYProperty() {
        return hotSpotY;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39554562" questionTitle="Count the no. of times a word can be created using the given input string">
<Answer><![CDATA[public static void main(String[] args)  {

    String strInput  = br.readLine();//read the string 
    int count = 0;
    int h = 0,e = 0,l= 0,o = 0;

    for (int i=0; i< strInput.length();i++){

        if(strInput.charAt(i)=='h'){ h++;}
        else if(strInput.charAt(i)=='l'){l++;}
        else if(strInput.charAt(i)=='e'){e++;}
        else if(strInput.charAt(i)=='o'){o++;}

         //this test should be made with every loop 
        if((h>=1) && (e>=1) && (l>=2) && (o>=1)){
            count++;
            h--;
            e--;
            o--;
            l=l-2;
        }
    }
    System.out.println(count);
}]]></Answer>
<Answer><![CDATA[import java.util.HashMap;
import java.util.Map;

public class Test {

    static String word = "hello";
    static String strInput;

    public static void main(String[] args)  {

        strInput  = "hoe4olelltohlemllhlhoslelo";//read the string

        Map<Character, Integer> charMap = mapNumOfChars();
        int count = 0;
        boolean done= false;
        while(!done) {

            for(Character c : charMap.keySet()) {

                if(! hasTheNeededNumOfChars(c, charMap.get(c), 0)) {

                    done= true;
                }
            }

            if(!done ) {

                //remove from input string all chars that have been "used"
                removeAllCharsUsed();
                count++;
            }
        }

        System.out.println(count);
    }

    /**
     *Recursively search for num occurrences of c.
     *@param c
     *  char to search
     *@param num
     *  number of char occurrences
     *@param startFrom
     *  start searching from index
     *@return
     */
    private static boolean hasTheNeededNumOfChars(char c, int num, int startFrom) {

        int charIndex = strInput.indexOf(c, startFrom);

        //no occurances of char found
        if (charIndex < 0) {
            return false;
        }

        //if char found is last, or only one char occurrence needed
        //no need to continue checking
        if((charIndex == (strInput.length() -1)) || (num == 1) ) {

            return true;

        }else {

            //look for the remaining number of occurrences num-1
            //starting from index charIndex
            return hasTheNeededNumOfChars(c,num-1, charIndex+1);
        }
    }

    private static void removeAllCharsUsed() {

        for (char c : word.toCharArray()) {

            strInput = strInput.replaceFirst(String.valueOf(c),"");
        }
    }

    //taken from GhostCat solution
    private static Map<Character, Integer> mapNumOfChars() {

        Map<Character, Integer> charMap = new HashMap<>();

        for (char charToCount : word.toCharArray()) {

            if (!charMap.containsKey(charToCount)) {
                // unknown char, so we need a counter for it
                charMap.put(charToCount, new Integer(0));
            }
            int currentCounter = charMap.get(charToCount);
            charMap.put(charToCount, ++currentCounter);
        }

        return charMap;
    }
}]]></Answer>
<Answer><![CDATA[private static int timesCanBePrinted(String targetWord, String letters) {

        Map<Character, Integer> targetWordMap = new HashMap<>();
        Map<Character, Integer> lettersWordMap = new HashMap<>();

        //initializing targetWordMap
        //so for hello for example our map will be like this
        //{h:1,e:1,l:2,o:1}
        initializeMapWithCharacterCount(targetWord, targetWordMap);
        initializeMapWithCharacterCount(letters, lettersWordMap);

        int timesCanBePrinted = Integer.MAX_VALUE;

        Map<Character, Integer> result = createMapWithNumberOfTimesWeCanUseEachCharacter(targetWordMap, lettersWordMap);

        //now we will look for the character that we can print less times
        //this chacater will determine the number of times we can print the target
        //word
        for (Map.Entry<Character, Integer> resultCountKV : result.entrySet()) {
            if(resultCountKV.getValue()<timesCanBePrinted){
                timesCanBePrinted = resultCountKV.getValue();
            }
        }


        return timesCanBePrinted;
    }

    /**
     * 
     * create the map containing the number of times we can
     * print a given character from the target word, with 
     * the current input
     * 
     * @param targetWordMap
     * @param lettersWordMap
     * @return a map containing containing the number of times we can
     * print a given character 
     */
    private static Map<Character, Integer> createMapWithNumberOfTimesWeCanUseEachCharacter(Map<Character, Integer> targetWordMap,
            Map<Character, Integer> lettersWordMap) {
        Map<Character, Integer> result= new HashMap<>();

        for (Map.Entry<Character, Integer> neededLetterCount : targetWordMap.entrySet()) {
            int totalTimesWeCanUseThisCharacter = 0;
            if(lettersWordMap.containsKey(neededLetterCount.getKey())){
                totalTimesWeCanUseThisCharacter = lettersWordMap.get(neededLetterCount.getKey())/neededLetterCount.getValue();
            }
            result.put(neededLetterCount.getKey(), totalTimesWeCanUseThisCharacter);
        }

        return result;
    }


        /**
         * initializes targetWordMap
         * so for hello for example our map will be like this
         *  {h:1,e:1,l:2,o:1} 
         * 
         * @param targetWord
         * @param targetWordMap
         */
    private static void initializeMapWithCharacterCount(String targetWord, Map<Character, Integer> targetWordMap) {
        for(int i = 0;i<targetWord.length();i++){
            if(targetWordMap.containsKey(targetWord.charAt(i))){
                targetWordMap.put(targetWord.charAt(i),targetWordMap.get(targetWord.charAt(i))+1);
            }
            else{
                targetWordMap.put(targetWord.charAt(i),1);
            }
        }
    }]]></Answer>
<Answer><![CDATA[int possibleCounts = 0;
String inputToCountOn = ....

Map<Character, Integer> numberOfUsedCharacters= new HashMap<>(numberOfRequiredCharsPerChar);

for (char availableChar : inputToCountOn()) {
  if (numberOfUsedCharacters.containsKey(availableChar)) {
    int currentCounter = numberOfUsedCharacters.get(availableChar);
    currentCounter--;
    if (currentCounter == 0) {
      numberOfUsedCharacters.remove(availableChar);
    } else {
      numberOfUsedCharacters.put(availableChar, currentCounter);
    }
    if (umberOfUsedCharacters.isEmpty()) {
      // that means: we fetched ALL chars we need to print the word ONCE
      possibleCounts++;
      // and reset our "counter" map
      numberOfUsedCharacters= new HashMap<>(numberOfRequiredCharsPerChar);
   }
}
... now you just print possibleCounts ...]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39553446" questionTitle="Algorithm to verify if a shape is inside another - javafx">
<Answer><![CDATA[import javafx.geometry.Point2D;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;

/*
 Check if a rectangle is contained with in a circle by checking 
 all rectangle corners.
 For the rectangle to be contained in a circle, all its corners should be
 in a distance smaller or equal to the circle's radius, from the circle's center. 
 Note:
 Requires some more testing. I tested only a few test cases.
 I am not familiar with javafx. This solution does not take into 
 calculation rectangle's arc or other attributes I may not be aware of.
 */
public class Test{

    //apply 
    public static void main(String[] args){

        Circle circle = new Circle(0 ,0, 100);
        Rectangle rec = new Rectangle(0, 0, 50 , 50);

        System.out.println("Is rectungle inside the circle ? "
                                     + isContained(circle,rec));
    }

    //check if rectangle is contained within a circle
    private static boolean isContained(Circle circle,Rectangle rec) {

        boolean isInside = true;

        //get circle center & radius
        Point2D center = new Point2D(circle.getCenterX(), circle.getCenterY());
        double radius= circle.getRadius();

        Point2D[] corners = getRectangleCorners(rec);

        for(Point2D corner : corners) {

            //if any corner falls outside the circle
            //the rectangle is not contained in the circle
            if(distanceBetween2Points(corner, center) > radius) {
                return false;
            }
        }
        return isInside;
    }

    //calculate distance between two points
    //(updated a per fabian's suggestion)
    private static double distanceBetween2Points
                            (Point2D corner, Point2D center) {
        return corner.distance(center);
    }

    private static Point2D[] getRectangleCorners(Rectangle rec) {

        Point2D[] corners = new Point2D[4];
        corners[0] = new Point2D(rec.getX(),                  rec.getY());
        corners[1] = new Point2D(rec.getX()+ rec.getWidth() , rec.getY());
        corners[2] = new Point2D(rec.getX()+ rec.getWidth(),  rec.getY()+ rec.getHeight());
        corners[3] = new Point2D(rec.getX(),                  rec.getY()+ rec.getHeight());

        return corners;
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    public static final int SIZE = 600;

    @Override
    public void start(Stage primaryStage) throws Exception {
        Pane rootPane = new Pane();

        List<Rectangle> rects = new ArrayList<>();
        for (int j = 0; j < 2; j++) {
            for(int i = 0; i < 5; i++) {
                Rectangle r = new Rectangle(i * 100, j == 0 ? 0 : 300, 100, 200);
                r.setFill(Color.BEIGE);
                r.setStroke(Color.BLACK);
                rects.add(r);
            }
        }
        rootPane.getChildren().addAll(rects);

        Circle circle = new Circle(350, 100, 200);
        circle.setStroke(Color.BLACK);
        circle.setFill(null);
        rootPane.getChildren().add(circle);

        List<Polygon> polys = new ArrayList<>();
        for(Rectangle rect : rects) {
            polys.add(rectangleToPolygon(rect));
        }
        List<Polygon> intersects = getTotalIntersections(polys, circle);
        System.out.println(intersects);

        primaryStage.setScene(new Scene(rootPane, SIZE, SIZE));
        primaryStage.show();
    }

    public List<Polygon> getTotalIntersections(List<Polygon> polys, Shape testShape) {
        List<Polygon> intersections = new ArrayList<>();
        for(Polygon poly : polys) {
            if(totalIntersects(poly, testShape)) {
                intersections.add(poly);
            }
        }
        return intersections;
    }

    public static Polygon rectangleToPolygon(Rectangle rect) {
        double[] points = {rect.getX(), rect.getY(),
                            rect.getX() + rect.getWidth(), rect.getY(),
                            rect.getX() + rect.getWidth(), rect.getY() + rect.getHeight(),
                            rect.getX(), rect.getY() + rect.getHeight()};
        return new Polygon(points);
    }

    public static void main(String[] args) {
        Main.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39533876" questionTitle="make anchorpane resizable with size of screen">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.chart.*?>
<?import javafx.scene.text.*?>
<?import javafx.geometry.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" prefHeight="600.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="sanad.Entry_Page">
   <children>
      <Accordion prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.topAnchor="0.0">
        <panes>
          <TitledPane animated="false" text="untitled 1">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
          <TitledPane animated="false" text="untitled 2">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
          <TitledPane animated="false" text="untitled 3">
            <content>
              <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
            </content>
          </TitledPane>
        </panes>
      </Accordion>
      <SplitPane dividerPositions="0.5" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="200.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <items>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
               <children>
                  <LineChart AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <xAxis>
                      <CategoryAxis side="BOTTOM" />
                    </xAxis>
                    <yAxis>
                      <NumberAxis side="LEFT" />
                    </yAxis>
                  </LineChart>
               </children>
            </AnchorPane>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
               <children>
                  <TableView prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <columns>
                      <TableColumn prefWidth="75.0" text="C1" />
                      <TableColumn prefWidth="75.0" text="C2" />
                    </columns>
                  </TableView>
               </children>
            </AnchorPane>
        </items>
      </SplitPane>
   </children>
</AnchorPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.text.*?>
<?import javafx.geometry.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<HBox id="AnchorPane" prefHeight="786.0" prefWidth="1024.0" xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1">
   <AnchorPane prefHeight="200.0" prefWidth="200.0" HBox.hgrow="ALWAYS">
      <children>
              <SplitPane dividerPositions="0.4845360824742268" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="741.0" prefWidth="487.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
                  <items>
                      <AnchorPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" />
                      <AnchorPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="0.0" minWidth="0.0" prefHeight="327.0" prefWidth="100.0" />
                  </items>
              </SplitPane>
      </children>
   </AnchorPane>
   <AnchorPane prefHeight="200.0" prefWidth="200.0" HBox.hgrow="ALWAYS">
      <children>
                <SplitPane dividerPositions="0.5720620842572062" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefHeight="741.0" prefWidth="508.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
                    <items>
                        <AnchorPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" nodeOrientation="LEFT_TO_RIGHT">
                            <children>
                                <TextField fx:id="formnumer_field" layoutX="8.0" layoutY="14.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="43.0" />
                                <TextField fx:id="sectornumber_field" layoutX="8.0" layoutY="48.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="43.0" />
                                <TextField fx:id="fathername_field" layoutX="8.0" layoutY="82.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="43.0" />
                                <ComboBox fx:id="fatherborn_year" layoutX="8.0" layoutY="116.0" prefHeight="25.0" prefWidth="70.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="226.0" />
                                <ComboBox fx:id="fatherborn_month" layoutX="85.0" layoutY="116.0" prefHeight="25.0" prefWidth="70.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="226.0" />
                                <ComboBox fx:id="fatherborn_day" layoutX="162.0" layoutY="116.0" prefHeight="25.0" prefWidth="80.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="226.0" />
                                <TextField fx:id="fathercurrentjob" layoutX="8.0" layoutY="145.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <TextField fx:id="fatherprevjob" layoutX="8.0" layoutY="179.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <TextField fx:id="mothername_field" layoutX="8.0" layoutY="215.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <TextField fx:id="mother_curr_job" layoutX="8.0" layoutY="278.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <ComboBox fx:id="motherborn_day" layoutX="162.0" layoutY="249.0" prefHeight="25.0" prefWidth="80.0" AnchorPane.rightAnchor="73.0" />
                                <ComboBox fx:id="motherborn_year" layoutX="8.0" layoutY="249.0" prefHeight="25.0" prefWidth="70.0" />
                                <TextField fx:id="mother_prev_job" layoutX="8.0" layoutY="312.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <ComboBox fx:id="motherborn_month" layoutX="85.0" layoutY="249.0" nodeOrientation="LEFT_TO_RIGHT" />
                                <TextField fx:id="homepartner_num" layoutX="8.0" layoutY="346.0" prefHeight="30.0" prefWidth="235.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <ComboBox fx:id="homepartner_year" layoutX="11.0" layoutY="382.0" />
                                <ComboBox fx:id="homepartner_month" layoutX="88.0" layoutY="382.0" />
                                <ComboBox fx:id="homepartner_day" layoutX="163.0" layoutY="382.0" />
                                <ComboBox fx:id="homepartner_name" layoutX="8.0" layoutY="416.0" AnchorPane.leftAnchor="8.0" AnchorPane.rightAnchor="72.0" />
                                <CheckBox fx:id="homepartner_gender1" layoutX="141.0" layoutY="456.0" mnemonicParsing="false" prefHeight="30.0" prefWidth="100.0" text="ذكر">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </CheckBox>
                                <CheckBox fx:id="homepartner_gender2" layoutX="8.0" layoutY="456.0" mnemonicParsing="false" prefHeight="30.0" prefWidth="100.0" text="أنثى">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </CheckBox>
                                <Label fx:id="current_cityaa" alignment="CENTER" layoutX="141.0" layoutY="490.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="100.0" text="المحافظة" AnchorPane.rightAnchor="74.0">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <TextField fx:id="current_city" layoutX="8.0" layoutY="490.0" AnchorPane.leftAnchor="8.0" />
                                <Label fx:id="current_cityaa1" alignment="CENTER" layoutX="141.0" layoutY="530.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="100.0" text="الحي" AnchorPane.rightAnchor="74.0">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <TextField fx:id="current_suberb" layoutX="8.0" layoutY="530.0" AnchorPane.leftAnchor="8.0" />
                                <TextField fx:id="prev_suberb" layoutX="11.0" layoutY="615.0" AnchorPane.leftAnchor="11.0" />
                                <Label fx:id="current_cityaa11" alignment="CENTER" layoutX="144.0" layoutY="615.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="100.0" text="الحي" AnchorPane.rightAnchor="71.0">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <Label fx:id="current_cityaa2" alignment="CENTER" layoutX="144.0" layoutY="575.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="100.0" text="المحافظة" AnchorPane.rightAnchor="71.0">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <TextField fx:id="prev_city" layoutX="11.0" layoutY="575.0" AnchorPane.leftAnchor="11.0" />
                            </children>
                        </AnchorPane>
                        <AnchorPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
                            <children>
                                <Label fx:id="formnumber" contentDisplay="RIGHT" layoutX="8.0" layoutY="14.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="174.0" text="رقم الاستمارة" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <Label fx:id="sectornumber" contentDisplay="RIGHT" layoutX="8.0" layoutY="48.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="174.0" text="رقم القطاع" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="fathername" contentDisplay="RIGHT" layoutX="8.0" layoutY="82.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="174.0" text="اسم الأب" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="fatherborn" contentDisplay="RIGHT" layoutX="20.0" layoutY="112.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="المواليد" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="currentjob" contentDisplay="RIGHT" layoutX="20.0" layoutY="142.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="العمل الحالي" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="previousjob" contentDisplay="RIGHT" layoutX="20.0" layoutY="172.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="العمل السابق" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="fatherborn1" contentDisplay="RIGHT" layoutX="20.0" layoutY="244.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="المواليد" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="currentjob1" contentDisplay="RIGHT" layoutX="20.0" layoutY="278.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="العمل الحالي" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="fathername1" contentDisplay="RIGHT" layoutX="8.0" layoutY="208.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="174.0" text="اسم الأم" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="previousjob1" contentDisplay="RIGHT" layoutX="20.0" layoutY="307.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="العمل السابق" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="homepartner_sex" contentDisplay="RIGHT" layoutX="20.0" layoutY="451.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="الجنس" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="homepartner_name" contentDisplay="RIGHT" layoutX="20.0" layoutY="414.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="الاسم" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="partner_born" contentDisplay="RIGHT" layoutX="20.0" layoutY="378.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="127.0" text="الميلاد" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label fx:id="home_partner" contentDisplay="RIGHT" layoutX="8.0" layoutY="341.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="174.0" text="عدد المستضافين" textAlignment="RIGHT" textOverrun="CENTER_ELLIPSIS">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                    <padding>
                                        <Insets left="50.0" />
                                    </padding>
                                </Label>
                                <Label alignment="CENTER" layoutX="8.0" layoutY="485.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="175.0" text="السكن الحالي">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                                <Label alignment="CENTER" layoutX="8.0" layoutY="570.0" nodeOrientation="RIGHT_TO_LEFT" prefHeight="30.0" prefWidth="175.0" text="السكن الحالي">
                                    <font>
                                        <Font size="14.0" />
                                    </font>
                                </Label>
                            </children>
                        </AnchorPane>
                    </items>
                </SplitPane>
              <Pane blendMode="RED" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minWidth="-Infinity" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
                  <padding>
                      <Insets top="10.0" />
                  </padding>
              </Pane>
      </children>
   </AnchorPane>
</HBox>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39500848" questionTitle="JavaFX TextArea appendText works in initialize but not elsewhere">
<Answer><![CDATA[@FXML
public void download() {
    String outputTemplate = templateField.getText();
    String url = urlField.getText();
    Runnable r  = () -> {
        System.out.println("Downloading from " + url);
        try {
            Process down = Runtime.getRuntime().exec("youtube-dl -o \"" + outputTemplate + "\" " + url);
            BufferedReader reader = new BufferedReader(new InputStreamReader(down.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line); //Prints as expected
                final String printText = line + "\n";

                // append the line on the application thread
                Platform.runLater(() -> output.appendText(printText));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    };
    // run task on different thread
    Thread t = new Thread(r);
    t.start();
}]]></Answer>
<Answer><![CDATA[@FXML
public void download() {
    Task<Void> task = new Task<Void>() {
        @Override
        protected Void call() {
            String outputTemplate = templateField.getText();
            String url = urlField.getText();
            System.out.println("Downloading from " + url);
            try {
                Process down = Runtime.getRuntime().exec("youtube-dl -o \"" + outputTemplate + "\" " + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(down.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println(line); // Prints as expected
                    output.appendText(line + "\n"); // Has no effect
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    };
    new Thread(task).start();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39460742" questionTitle="How to convert java 8 map, filter and streams to scala?">
<Answer><![CDATA[def withinDateRange(toCheck: LocalDate)(window: Window): Boolean =
    window.getStartTime.isBefore(toCheck) && window.getEndTime.isAfter(toCheck)

  // Nothing should ever be null in Scala. If it's possible you don't have any ConsumptionWindows you should either
  // model it as an empty list or an Option[List[ConsumptionWindow]]
  def existsEligibleTestWindow(windows: List[Window],
                               timeOfAccess: LocalDate): Boolean =
  windows.exists(withinDateRange(timeOfAccess))


  def getValidUsages(testWindows: TestWindows, timeOfAccess: LocalDate): Set[String] = {
    val isTV = existsEligibleTestWindow(testWindows.getTV, timeOfAccess)
    val isCableUse = existsEligibleTestWindow(testWindows.getCableUse, timeOfAccess)
    val isWifi = existsEligibleTestWindow(testWindows.getWifi, timeOfAccess)
    val tvOrMovie: Option[String] = if (isTV) Some("TV")
                                    else if (isCableUse || isWifi) Some("MOVIE")
                                    else None

    val byUsageId = testWindows.getUsageIds.collect { case (key, windows) if existsEligibleTestWindow(windows, timeOfAccess) => key }.toSet

    tvOrMovie.toSet ++ byUsageId
  }]]></Answer>
<Answer><![CDATA[def getValidUsages(itemId: String, sNo: long, timeOfAcess: Date): Set[String] = {
  var itemSet: Set[String] = Sets.newHashSet()
  val testWindows: TestWindows = items.get(itemId).getTestWindows()
  val isTV: Boolean  = existsEligibleTestWindow(testWindows.getTV(), timeOfAccess)

  isTV match {
    case true => itemSet.add(TV)
    case false => {
      val isCableUseable: Boolean = existsEligibleTestWindow(testWindows.getCableUse(), timeOfAcess)
      val isWifi: Boolean = existsEligibleTestWindow(testWindows.getWifi(), timeOfAccess)
      if(isCableUseable || isWifi) {
        itemSet.add(MOVIE)
      }
    }
  }

  if(testWindows.getUsageIds() != null) {
    itemSet.addAll(testWindows.getUsageIds()
                .stream.
                .filter(entry => existsEligibleTestWindow(entry._2, timeOfAccess))
                .map(filteredData => Map.Entry._1)
                .collect Collectors.toSet())
  }
  itemSet
}

def existsEligibleTestWindow(windows: List[TestWindow], timeOfAcess: Date): Boolean = {
  windows match {
    case null => false
    case _ => windows.stream.filter(data => withinDateRange(timeOfAcess), data).findAny().isPresent
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39459632" questionTitle="JavaFX Olympic Rings overlap in the correct order">
<Answer><![CDATA[package olympicrings;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Arc;

/**
 * This helper class knows how to paint the next olympic ring into a {@code Pane}.
 * It is not limited to 5 olympic rings, it can draw as many (or few) as desired.
 * The algorithm it follows is:
 * <ol>
 *   <li>Each ring consists of 2 arcs (half-circles) of the same color, of course.
 *       Imagine the line connecting the center of the previous ring to the center
 *       of the current: we place one arc on the LEFT of this line and one arc on
 *       the RIGHT. Let's call them arcs L and R. These need to be added to the
 *       children {@code Node}s of the {@code Pane} at the correct order.</li>
 *   <li>The placement of arc L depends on whether the current ring is at the top
 *       row or at the bottom:
 *       <ul>
 *           <li>TOP: It goes below arc L of the previous ring</li>
 *           <li>BOTTOM: It goes below arc R of the previous ring</li>
 *       </ul>
 *   </li>
 *   <li>Arc R is always placed last in the list of the children of the {@code Pane}.</li>
 *   <li>Advance the position of the next ring, taking into account the desired
 *       ring radius and stroke width.</li>
 * </ol>
 * <p>
 * Usage:
 * <pre><code>
 * OlympicRingsPaintingContext ctx = new OlympicRingsPaintingContext(thePane, 50, 10);
 * ctx.paintNextRing(Color.BLUE);
 * ...
 * </code></pre>
 */
public class OlympicRingsPaintingContext {

    /**
     * A handy constant containing the standard olympic colors. Could be used as follows
     * to paint the standard olympic rings:
     * <pre><code>
     * OlympicRingsPaintingContext ctx = new OlympicRingsPaintingContext(thePane, 50, 10);
     * OlympicRingsPaintingContext.STANDARD_OLYMPIC_COLORS.forEach(ctx::paintNextRing);
     * </code></pre>
     */
    public static final List<Color> STANDARD_OLYMPIC_COLORS = Collections.unmodifiableList(Arrays.asList(Color.BLUE, Color.YELLOW, Color.BLACK, Color.GREEN, Color.RED));

    private static final double[] TOP_START_ANGLES = new double[] {45, 225};
    private static final double[] BOTTOM_START_ANGLES = new double[] {315, 135};

    private Pane pane;
    private double radius;
    private double strokeWidth;
    private double curx;
    private double cury;
    private double topy;
    private double bottomy;
    private double startAngleL;
    private double startAngleR;
    private int prevIndexL;
    private int prevIndexR;

    public OlympicRingsPaintingContext(Pane pane, double radius, double strokeWidth) {
        this.pane = pane;
        this.radius = radius;
        this.strokeWidth = strokeWidth;
        topy = 2*radius;
        bottomy = 3*radius;
        curx = 2*radius;
        cury = topy;
        startAngleL = TOP_START_ANGLES[0];
        startAngleR = TOP_START_ANGLES[1];
        prevIndexL = 0;
        prevIndexR = 0;
    }

    public void paintNextRing(Color color) {
        addArcL(color);
        addArcR(color);
        advance();
    }

    private void addArcL(Color color) {
        Arc arcL = makeArc(startAngleL, color);
        if( cury == topy ) {
            pane.getChildren().add(prevIndexL, arcL);
        }
        else {
            pane.getChildren().add(prevIndexR, arcL);
            prevIndexL = prevIndexR;
        }
    }

    private void addArcR(Color color) {
        Arc arcR = makeArc(startAngleR, color);
        pane.getChildren().add(arcR);
        prevIndexR = pane.getChildren().size() - 1;
    }

    private Arc makeArc(double startAngle, Color color) {
        Arc arc = new Arc(curx, cury, radius, radius, startAngle, 180);
        arc.setFill(null);
        arc.setStroke(color);
        arc.setStrokeWidth(strokeWidth);
        return arc;
    }

    private void advance() {
        curx += radius + strokeWidth;
        if( cury == topy ) {
            cury = bottomy;
            startAngleL = BOTTOM_START_ANGLES[0];
            startAngleR = BOTTOM_START_ANGLES[1];
        }
        else {
            cury = topy;
            startAngleL = TOP_START_ANGLES[0];
            startAngleR = TOP_START_ANGLES[1];
        }
    }
}]]></Answer>
<Answer><![CDATA[private static Arc createArc(double radius,
                             double centerX, double centerY,
                             double fromAngle, double toAngle,
                             Paint stroke,
                             double strokeWidth) {
    Arc arc = new Arc(centerX, centerY, radius, radius, fromAngle, toAngle - fromAngle);
    arc.setFill(null);
    arc.setStroke(stroke);
    arc.setStrokeWidth(strokeWidth);

    return arc;
}

@Override
public void start(Stage primaryStage) {
    Pane pane = new Pane(
            createArc(50, 60, 60, 90, 315, Color.BLUE, 10), // part of the blue ring containing part covered by yellow
            createArc(50, 110, 110, 0, 360, Color.YELLOW, 10),
            createArc(50, 60, 60, -45, 90, Color.BLUE, 10) // part covering the yellow ring
    );

    Scene scene = new Scene(pane);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39403009" questionTitle="ReactFX - &quot;lazy&quot; real-time search text area">
<Answer><![CDATA[import java.time.Duration;
import java.util.function.Function;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

import org.reactfx.EventStream;
import org.reactfx.EventStreams;

public class AutoSearch extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        TextArea area = new TextArea();

        EventStream<KeyEvent> enterPresses = EventStreams.eventsOf(area, KeyEvent.KEY_PRESSED)
                .filter(k -> k.getCode() == KeyCode.ENTER)
                .hook(KeyEvent::consume);

        EventStream<?> searchImpulse = enterPresses.withDefaultEvent(null) // emit an event even before Enter is pressed
                .flatMap(x -> {
                    EventStream<?> edits = EventStreams.changesOf(area.textProperty())
                                                       .successionEnds(Duration.ofSeconds(1));
                    return ((x == null) ? edits : edits.withDefaultEvent(null))
                            .map(Function.identity()); // just to get the proper type of the result
                });

        searchImpulse.subscribe(x -> System.out.println("Search now!"));

        stage.setScene(new Scene(area));
        stage.show();
    }

}]]></Answer>
<Answer><![CDATA[import java.time.Duration;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

import org.reactfx.EventStream;
import org.reactfx.EventStreams;

public class AutoSearch2 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        TextArea area = new TextArea();

        EventStream<KeyEvent> enterPressed = EventStreams.eventsOf(area, KeyEvent.KEY_PRESSED)
                .filter(k -> k.getCode() == KeyCode.ENTER)
                .hook(KeyEvent::consume);

        EventStream<Long> enterCount = enterPressed.accumulate(0L, (n, k) -> n + 1)
                                                   .withDefaultEvent(0L);

        EventStream<Long> delayedEdits = enterCount.emitOnEach(EventStreams.changesOf(area.textProperty()))
                                                   .successionEnds(Duration.ofSeconds(1));

        // check that the delayed edit event still has the current value of the Enter counter
        EventStream<?> validEdits = enterCount.emitBothOnEach(delayedEdits)
                                              .filter(cd -> cd.test((current, delayed) -> delayed == current));

        EventStream<?> searchImpulse = EventStreams.merge(enterPressed, validEdits);

        searchImpulse.subscribe(x -> System.out.println("Search now!"));

        stage.setScene(new Scene(area));
        stage.show();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39378901" questionTitle="How to center javafx scene graph &quot;camera&quot;">
<Answer><![CDATA[import javafx.animation.Interpolator;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Test extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage stage) {
        BorderPane root = new BorderPane();
        root.setStyle("-fx-background-color: Black");
        Pane graph = new Pane();
        root.setCenter(graph);
        // graph.setLayoutX(250);
        // graph.setLayoutY(250);

        Circle circle = new Circle(250, 250, 5);
        circle.setFill(Color.ORANGE);
        graph.getChildren().add(circle);

        Circle circle2 = new Circle(250, 250, 5);
        circle2.setFill(Color.AQUA);
        graph.getChildren().add(circle2);

        TranslateTransition t = new TranslateTransition(Duration.millis(1000), circle);
        t.setFromX(0);
        t.setToX(100);
        t.setFromY(0);
        t.setToY(0);

        t.setInterpolator(Interpolator.LINEAR);
        t.play();

        stage.setTitle("Circle Test");
        stage.setScene((new Scene(root, 500, 500)));
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.Interpolator;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class NewClass extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage stage) {
        BorderPane root = new BorderPane();
        root.setStyle("-fx-background-color: #efefef");
        Group graph = new Group();
        root.getChildren().add(graph);
        graph.setLayoutX(250);
        graph.setLayoutY(250);

        Circle circle = new Circle(0, 0, 5);
        circle.setFill(Color.ORANGE);
        graph.getChildren().add(circle);

        Circle circle2 = new Circle(0, 0, 5);
        circle2.setFill(Color.AQUA);
        graph.getChildren().add(circle2);

        TranslateTransition t = new TranslateTransition(Duration.millis(1000), circle);
        t.setFromX(0);
        t.setToX(100);
        t.setFromY(0);
        t.setToY(0);

        t.setInterpolator(Interpolator.LINEAR);
        t.setCycleCount(5);
        t.play();

        stage.setTitle("Circle Test");
        stage.setScene((new Scene(root, 500, 500)));
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39356067" questionTitle="How to programatically start an EJB Timer from outside the Thread">
<Answer><![CDATA[public class MyLifeCycleEventExample
    implements ServletContextListener
{
    ServletContext servletContext;

        /* Methods from the ServletContextListener */
    public void contextInitialized(ServletContextEvent sce)
    {
        servletContext = sce.getServletContext();
            try
    {
      Context context = new InitialContext();
      TimerDemoHome timerDemoHome =
          (TimerDemoHome)PortableRemoteObject.narrow(
              context.lookup("java:comp/env/TimerDemo"),
              TimerDemoHome.class);
      TimerDemo timerDemo;

      // Use one of the create() methods below to
      // create a new instance
      timerDemo = timerDemoHome.create();
      Date firstDate= new java.util.Date();

      // Call any of the Remote methods below to access
      // the EJB this code does not check whether the timer
      // has already been scheduled.
      // You should check this for duplicate timers
      timerDemo.initializeTimer( firstDate, 1800000, "MyTimer" );

      timerDemo.getTimerInfo();
      //Cancel Timer
      //timerDemo.cancelTimer("MyTimer");

    }
    catch(Throwable ex)
    {
      ex.printStackTrace();
    }

    }

    public void contextDestroyed(ServletContextEvent sce)
    {
    }

          protected void log(String msg)
    {
          System.out.println("[" + getClass().getName() +
                             "] " + msg);
    }

}]]></Answer>
<Answer><![CDATA[import javax.ejb.Asynchronous;
import javax.ejb.Schedule;
import javax.ejb.Stateless;

/**
 *
 * @author s.kadakov
 */
@Stateless
public class TimerBean {

    @Schedule(hour = "*/12", minute = "0", second = "0")
    public void longTermJob() {
        // do something
    }

    @Asynchronous
    public void fireJob() {
        longTermJob();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39300397" questionTitle="JavaFX TreeView setRoot results in Exception">
<Answer><![CDATA[import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.application.Application;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.stage.Stage;

public class Main extends Application implements Initializable {

    @FXML
    private TreeView<String> managertree;

    TreeItem<String> rootItem = new TreeItem<>("Manager");

    @Override
    public void start(Stage stage) throws IOException {

        //Load FXML file
        Parent root = FXMLLoader.load(getClass().getResource("MainLayout.fxml"));

        //...
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.setTitle("jLog");
        rootItem.setExpanded(true);
        for (int i = 1; i < 6; i++) {
            TreeItem<String> item = new TreeItem<String>("Managing Logs " + i);
            rootItem.getChildren().add(item);
        }

        //Show the Stage
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        System.out.println("Main Controller initialized.....");

        managertree.setRoot(rootItem);
        managertree.setShowRoot(false);

    }

}]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.layout.StackPane?>

<AnchorPane id="AnchorPane" prefHeight="400.0" prefWidth="600.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/2.2" fx:controller="jlog.controllers.Main">
  <children>
    <AnchorPane id="AnchorPane" layoutX="0.0" layoutY="0.0" prefHeight="36.0">
      <children>
        <MenuBar prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
          <menus>
            <Menu mnemonicParsing="false" text="File">
              <items>
                <MenuItem mnemonicParsing="false" text="Close" />
              </items>
            </Menu>
            <Menu mnemonicParsing="false" text="Edit">
              <items>
                <MenuItem mnemonicParsing="false" text="Delete" />
              </items>
            </Menu>
            <Menu mnemonicParsing="false" text="Help">
              <items>
                <MenuItem mnemonicParsing="false" text="About" />
              </items>
            </Menu>
          </menus>
        </MenuBar>
      </children>
    </AnchorPane>
    <AnchorPane prefHeight="364.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="36.0" />
    <SplitPane dividerPositions="0.2826086956521739" focusTraversable="true" prefHeight="364.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="36.0">
      <items>
        <AnchorPane id="manager" minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
          <children>
            <TreeView id="managertree" fx:id="managerTree" disable="false" editable="true" prefHeight="362.0" prefWidth="114.0" showRoot="true" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
          </children>
        </AnchorPane>
        <AnchorPane fx:id="rawlog" minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" />
      </items>
    </SplitPane>
  </children>
</AnchorPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39299724" questionTitle="JavaFX: Service and GUI">
<Answer><![CDATA[Service process = new Service() {
    @Override
    protected Task createTask() {
        return new Task() {
            @Override
            protected ObjectX call() throws Exception {

                updateMessage("Some message that may change with execution");
                updateProgress( workDone, totalWork ); 
                return ObjectX;
            }
        };
    }
};

process.setOnSucceeded( e -> {

    ObjectX processValue = (ObjectX)process.getValue();

    // TODO, . . . 
    // You can modify any GUI element from here...
    // ...with the values you got from the service
});

process.start();]]></Answer>
<Answer><![CDATA[import javafx.concurrent.Service;
import javafx.concurrent.Task;

public class ExampleService extends Service<Boolean> {

    /**
     * Constructor
     */
    public ExampleService() {

        // succeeded?
        this.setOnSucceeded(s -> {
            // ...
        });

        // failed
        this.setOnFailed(f -> {
            // ...
        });

        // cancelled?
        this.setOnCancelled(c -> {
            // ...
        });
    }

    @Override
    protected Task<Boolean> createTask() {
        return new Task<Boolean>(){

            @Override
            protected Boolean call() throws Exception {

                boolean result = false;


                //your code
                //.......
                //updateProgress(current,total)

                return result;
            }

        };
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39238801" questionTitle="JavaFX printing rows into TextFields">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    TableView<Item> table = new TableView<>();

    Callback<TableColumn<Item, String>, TableCell<Item, String>> factory = column -> new TableCell<Item, String>() {
        private final TextField textField;

        {
            textField = new TextField();
            textField.textProperty().addListener((observable, oldValue, newValue) -> {
                // write to property 
                WritableValue<String> property = (WritableValue<String>) getTableColumn().getCellObservableValue(getIndex());
                property.setValue(newValue);
            });
        }

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);

            if (empty) {
                setGraphic(null);
            } else {
                setGraphic(textField);
                if (!Objects.equals(textField.getText(), item)) {
                    // only modify if TextField wasn't source of the change
                    // to prevent carret movement
                    textField.setText(item);
                }
            }
        }

    };

    TableColumn<Item, String> formulaColumn = new TableColumn<>("baseFormula");
    formulaColumn.setCellValueFactory(cd -> cd.getValue().baseFormulaProperty());
    formulaColumn.setCellFactory(factory);

    TableColumn<Item, String> ptColumn = new TableColumn<>("basePt");
    ptColumn.setCellValueFactory(cd -> cd.getValue().basePtProperty());
    ptColumn.setCellFactory(factory);

    table.getColumns().addAll(formulaColumn, ptColumn);

    String[][] data = {
        {"Hello", "World"},
        {"Hello2", "World2"},
        {"Hello3", "World3"},
        {"Hello4", "World4"},
        {"Hello5", "World5"},
        {"Hello6", "World6"}
    };

    for (String[] d : data) {
        table.getItems().add(new Item(d[0], d[1]));
    }

    Button btn = new Button("print");
    btn.setOnAction(evt -> System.out.println(table.getItems()));

    Scene scene = new Scene(new VBox(table, btn));

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[ResultSet rs = null;//reference it to your rs
        TableView<String[]> tv = new TableView<String[]>();
        final int columnCount = rs.getMetaData().getColumnCount();
        for(int i =1; i <= columnCount; i++){
            TableColumn<String[], String> tc = new TableColumn<String[], String>();
            tc.setText(rs.getMetaData().getColumnName(i));
            final int k = i-1;
            tc.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<
                    String[],String>, ObservableValue<String>>() {
                @Override
                public ObservableValue<String> call(CellDataFeatures<String[],
                        String> param) {
                    return new SimpleStringProperty(param.getValue()[k]);
                }
            });
            tc.setCellFactory(new Callback<TableColumn<String[],String>,
                    TableCell<String[],String>>() {
                @Override
                public TableCell<String[], String> call(TableColumn<String[],
                        String> param) {
                    return new TableCell<String[], String>(){
                        @Override
                        protected void updateItem(String arg0, boolean arg1) {
                            super.updateItem(arg0, arg1);
                            if(arg1){
                                setText("");
                                return;
                            }else{
                                setText(arg0);
                            }

                        }
                    };
                }
            });
        }
        while(rs.next()){
            String[] s = new String[columnCount];
            for(int i = 1; i <= columnCount; i++){
                s[i -1] = rs.getString(i);
            }
            tv.getItems().add(s);
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39229767" questionTitle="Is it possible to &quot;merge&quot; elements of Java8 streams?">
<Answer><![CDATA[Stream<Integer> stream = Stream.of(0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1);

    Stream<Integer> flatMap = stream.flatMap(new Function<Integer, Stream<Integer>>() {
        Integer prev = null;
        int count;
        public java.util.stream.Stream<Integer> apply(Integer i) {
            if ( i.equals(prev)) {
                count++;
                return Stream.empty();
            } else {
                int c = count;
                count = 1;
                prev = i;
                if ( c > 0 ) {
                    return Stream.of(c);
                } else {
                    return Stream.empty();
                }
            }
        };
    });

    flatMap.forEach(i -> {
        System.out.println(i);
    });]]></Answer>
<Answer><![CDATA[import java.util.Spliterator;
import java.util.function.LongConsumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class UniqCountSpliterator implements Spliterator.OfLong {
    private Spliterator wrapped;
    private long count;
    private Object previous;
    private Object current;

    public UniqCountSpliterator(Spliterator wrapped) {
        this.wrapped = wrapped;
    }

    public LongStream stream() {
        return StreamSupport.longStream(this, false);
    }

    @Override
    public OfLong trySplit() {
        return null;
    }

    @Override
    public long estimateSize() {
        return Long.MAX_VALUE;
    }

    @Override
    public int characteristics() {
        return NONNULL | IMMUTABLE;
    }

    @Override
    public boolean tryAdvance(LongConsumer action) {
        while (wrapped.tryAdvance(next -> current = next) && (null == previous || current.equals(previous))) {
            count++;
            previous = current;
        }
        if (previous == null) {
            return false;
        }
        action.accept(count);
        count = 1;
        previous = null;
        return true;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39190916" questionTitle="ToggleButton to keep previous color after deselection">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    ToggleButton b1 = new ToggleButton(),
            b2 = new ToggleButton(),
            b3 = new ToggleButton();

    b1.setStyle("-fx-original-background: black;");
    b2.setStyle("-fx-original-background: red;");
    b3.setStyle("-fx-original-background: yellow;");

    VBox root = new VBox(b1, b2, b3);
    root.getStyleClass().add("toggle-container");
    root.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
    Scene scene = new Scene(root);

    // alternative place to add the stylesheet
    // scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());

    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[private class StyleData {

        private String selected = "";
        private String deselected = "";

        public StyleData(String selected, String deselected) {
            this.selected = selected;
            this.deselected = deselected;
        }

        /**
         * @return the selected
         */
        public String getSelected() {
            return selected;
        }

        /**
         * @param selected the selected to set
         */
        public void setSelected(String selected) {
            this.selected = selected;
        }

        /**
         * @return the deselected
         */
        public String getDeselected() {
            return deselected;
        }

        /**
         * @param deselected the deselected to set
         */
        public void setDeselected(String deselected) {
            this.deselected = deselected;
        }

    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO

        String style1 = "-fx-border-color: black; -fx-background-color: black; -fx-base: gray; -fx-border-width: 1";
        String style2 = "-fx-border-color: black; -fx-background-color: gray; -fx-base: gray; -fx-border-width: 1";
        btn.setUserData(new StyleData(style1, style2));
        btn.setStyle(((StyleData) btn.getUserData()).getDeselected());
        btn.selectedProperty().addListener(new ChangeListener<Boolean>() {

            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                if (newValue) {
                    btn.setStyle(((StyleData) btn.getUserData()).getSelected());
                } else {
                    btn.setStyle(((StyleData) btn.getUserData()).getDeselected());
                }
            }
        });
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39142664" questionTitle="JavaFX TableView editable cell + change style after edit">
<Answer><![CDATA[public class TextFieldTableCellEditable<S,EditableString> extends TextFieldTableCell<S,EditableString> {

    public static <S,EditableString> Callback<TableColumn<S,EditableString>, TableCell<S,EditableString>> forTableColumn(
            final StringConverter<EditableString> converter) {
        return list -> new TextFieldTableCellEditable<S, EditableString>(converter);
    }

    public TextFieldTableCellEditable(StringConverter<EditableString> converter) {
        this.getStyleClass().add("text-field-table-cell");
        setConverter(converter);
    }


    @Override
    public final void updateItem(EditableString item, boolean empty) {

        super.updateItem(item, empty);
        if (item != null && ((sample.EditableString)item).isEdited()) {
            setText(item.toString());
            setStyle("-fx-font-weight: bold;");
        } else if (item != null && !((sample.EditableString)item).isEdited()){
            setStyle("");
            setText(item.toString());
        } else {
            setStyle("");
            setText(null);
        }
    }

    @Override
    public void commitEdit(EditableString newValue) {
        EditableString currentItem = getItem();
        if (currentItem == null || newValue == null || !Objects.equals(((sample.EditableString)newValue).getValue(), ((sample.EditableString)currentItem).getValue())) {
            super.commitEdit(newValue);
        } else {
            // if the string is the same, keep the old value
            super.commitEdit(currentItem);
        }
    }

}]]></Answer>
<Answer><![CDATA[StringConverter<EditableString> converter = new StringConverter<EditableString>() {

    @Override
    public String toString(EditableString object) {
        return object == null ? null : object.getValue();
    }

    @Override
    public EditableString fromString(String string) {
        return string == null ? null : new EditableString(true, string);
    }

};

TableColumn<LPAttributesTableObject, EditableString> column = (TableColumn) lpAttributesTable.getColumns().get(1);

column.setCellFactory(t -> new TextFieldTableCell<LPAttributesTableObject, EditableString>(converter) {

    @Override
    public void updateItem(EditableString item, boolean empty) {
        super.updateItem(item, empty);

        if (item != null && item.isEdited()) {
            setStyle("-fx-font-weight: bold;");
        } else {
            setStyle("");
        }
    }

    @Override
    public void commitEdit(EditableString newValue) {
        EditableString currentItem = getItem();
        if (currentItem == null || newValue == null || !Objects.equals(newValue.getValue(), currentItem.getValue())) {
            super.commitEdit(newValue);
        } else {
            // if the string is the same, keep the old value
            super.commitEdit(currentItem);
        }
    }

});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39126331" questionTitle="How do you create an animated LineChart in JavaFX?">
<Answer><![CDATA[private final ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
private ScheduledFuture future;

private Random random = new Random();

private int[] getData() {
    int[] result = new int[10];
    for (int i = 0; i < result.length; i++) {
        result[i] = random.nextInt(10);
    }
    return result;
}

private static void dataToSeries(int[] data, XYChart.Series<Number, Number> series) {
    int len = data.length;

    int size = series.getData().size();
    if (size > len) {
        series.getData().subList(len, series.getData().size()).clear();
    } else if (size < len) {
        for (; size < len; size++) {
            series.getData().add(new XYChart.Data<>(0, size));
        }
    }

    for (int i = 0; i < len; i++) {
        series.getData().get(i).setXValue(data[i]);
    }
}

@Override
public void start(Stage primaryStage) {
    ToggleButton btn = new ToggleButton("updating");
    btn.setSelected(false);

    XYChart.Series<Number, Number> series = new XYChart.Series<>();

    LineChart<Number, Number> chart = new LineChart<>(new NumberAxis(), new NumberAxis(), FXCollections.observableArrayList(series));
    chart.setAnimated(false);

    Runnable dataGetter = () -> {
        try {
            // simulate some delay caused by the io operation
            Thread.sleep(100);
        } catch (InterruptedException ex) {
        }
        int[] data = getData();
        Platform.runLater(() -> {
            // update ui
            dataToSeries(data, series);
        });
    };

    btn.selectedProperty().addListener((a, b, newValue) -> {
        if (newValue) {
            // update every second
            future = service.scheduleWithFixedDelay(dataGetter, 0, 1, TimeUnit.SECONDS);
        } else {
            // stop updates
            future.cancel(true);
            future = null;
        }
    });

    VBox root = new VBox(10, chart, btn);

    Scene scene = new Scene(root);

    primaryStage.setScene(scene);
    primaryStage.show();
}

@Override
public void stop() throws Exception {
    service.shutdownNow();
}]]></Answer>
<Answer><![CDATA[@FXML
private LineChart<Number, Number> lineChart;

@FXML
private NumberAxis xAxis;

@FXML
private NumberAxis yAxis;

@Override
public void initialize(URL location, ResourceBundle resources) {
    lineChart.setTitle("Stock Monitoring, 2010");
    ObservableList<XYChart.Series<Number,Number>> dataChart =
            FXCollections.observableArrayList(
                    new LineChart.Series("Serie 1",FXCollections.observableArrayList(
                            new XYChart.Data<>(1,2),
                            new XYChart.Data<>(5,3),
                            new XYChart.Data<>(9,3),
                            new XYChart.Data<>(2,7),
                            new XYChart.Data<>(6,9),
                            new XYChart.Data<>(1,2)
                    )),
                    new LineChart.Series<>("Series 2",FXCollections.observableArrayList(
                            new XYChart.Data<>(5,7),
                            new XYChart.Data<>(3,4),
                            new XYChart.Data<>(8,2),
                            new XYChart.Data<>(6,9),
                            new XYChart.Data<>(1,3),
                            new XYChart.Data<>(9,7)
                    )));

    lineChart.setData(dataChart);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="39042159" questionTitle="JavaFX : ChangeListener to get the resolution of screen on mouse released">
<Answer><![CDATA[ChangeListener<Number> resizeListener = new ChangeListener<Number>() {
            Timer timer = null; // used to schedule the saving task
            final long delay = 200; // the delay between 2 changes
            TimerTask task = null; // the task : saves resolution values

            @Override
            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
                // cancels the old task as a new one has been queried
                // at every change, we cancel the old task and start a new one
                if(task != null) task.cancel();
                // reset of the timer
                if(timer == null) timer = new Timer();

                task = new TimerTask() {
                    @Override
                    public void run() {
                            ConfigBusiness.getInstance().setScreenWidth(scene.getWidth());
                            ConfigBusiness.getInstance().setScreenHeight(scene.getHeight());
                            // stopping the timer once values are set
                            timer.cancel();
                            timer = null;
                            // stopping the task once values are set
                            task.cancel();
                            task = null;
                        }
                    };

                timer.schedule(task, delay);
            }
        };

        scene.widthProperty().addListener(resizeListener);
        scene.heightProperty().addListener(resizeListener);]]></Answer>
<Answer><![CDATA[public int initialX;
 public int initialY;
 public double screenWidth = Screen.getPrimary().getBounds().getWidth() ;
 public double screenHeight = Screen.getPrimary().getBounds().getHeight();

   setOnMousePressed(m -> {
                if (m.getButton() == MouseButton.PRIMARY) {
                    if (m.getClickCount() == 1) { // one Click
                        setCursor(Cursor.MOVE);
                        if (window.getWidth() < screenWidth ) {
                            initialX = (int) (window.getX() - m.getScreenX());
                            initialY = (int) (window.getY() - m.getScreenY());
                        } else
                            setFullScreen(false);
                    } else if (m.getClickCount() == 2) // two clicks
                        setFullScreen(true);

                }

            });

            setOnMouseDragged(m -> {
                if (window.getWidth() < screenWidth  && m.getButton() == MouseButton.PRIMARY) {
                    window.setX(m.getScreenX() + initialX);
                    window.setY(m.getScreenY() + initialY);
                }
            });

            setOnMouseReleased(m -> setCursor(Cursor.DEFAULT));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38972426" questionTitle="add a form into pop up stage (Customize Stage content)">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Button button = new Button("Show Popup");
        button.setOnAction(e -> btnAddeNewClicked());
        Scene scene = new Scene(new StackPane(button), 200, 200);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public void  btnAddeNewClicked(){

        final TextField name = new TextField() ;
        final TextField addr = new TextField() ;
        final TextField wp = new TextField() ;
        final Label labelUsername = new Label("Username");
        final Label labelAddress = new Label("Address");
        final Label labelWebPage = new Label("Web Page");
        final Button btn = new Button("Add");

        GridPane gridPane = new GridPane();
        gridPane.setVgap(10);
        gridPane.setHgap(10);
        gridPane.setPadding(new Insets(10));

        gridPane.add(labelUsername, 0, 0);
        gridPane.add(name, 1, 0);
        gridPane.add(labelAddress, 0, 1);
        gridPane.add(addr, 1, 1);
        gridPane.add(labelWebPage, 0, 2);
        gridPane.add(wp, 1, 2);
        gridPane.add(btn, 0, 3, 2, 1);
        GridPane.setHalignment(btn, HPos.CENTER);

        Stage dialog = new Stage();
        dialog.initStyle(StageStyle.UTILITY);
        Scene scene = new Scene(gridPane);
        dialog.setScene(scene);
        dialog.show();
    }
}]]></Answer>
<Answer><![CDATA[final TextField name = new TextField() ;
final TextField addr = new TextField() ;
final TextField wp = new TextField() ;
final TextField state = new TextField() ;
final TextField loginName = new TextField() ;
final Label labelUsername = new Label();
final Label labelAddress = new Label();
final Label labelWebPage = new Label();
final Label labelState = new Label();
final Label labelloginName = new Label();
final Button btn = new Button("Add");

VBox root = new VBox();
root.getChildren().addAll(name,
                          addr,
                          wp,
                          state,
                          loginName,
                          labelUsername,
                          labelAddress,
                          labelWebPage,
                          labelState,
                          labelloginName,
                          btn);

Stage dialog = new Stage();
dialog.initStyle(StageStyle.UTILITY);
Scene scene = new Scene(root);
dialog.setScene(scene);
dialog.show();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38956213" questionTitle="&quot;Transpose&quot; a multi-map to a list of maps">
<Answer><![CDATA[Map<String, List<String>> multiMap = ...;
List<Map<String, String>> result = new ArrayList<>();

// find an entry with a non-null value, and get the size of the
// list
OptionalInt sizeOfLists =
    multiMap.values()
            .stream()
            .filter(Objects::nonNull)
            .mapToInt(List::size)
            .findAny();

// for each index, create a person and put each key and the
// corresponding value at that index in that map
sizeOfLists.ifPresent(size -> {
    for (int i = 0; i < size; i++) {
        int index = i;
        Map<String, String> person = new HashMap<>();
        result.add(person);
        multiMap.entrySet()
                .stream()
                .filter(entry -> entry.getValue() != null)
                .forEach(entry -> person.put(entry.getKey(), entry.getValue().get(index)));
    }
});]]></Answer>
<Answer><![CDATA[Multimap<String, String> map = ArrayListMultimap.create();
    map.put("MiddleName", null);
    map.putAll("EmailAddress", ImmutableList.of("toni@gmail.com", "mary@gmail.com", "paul@gmail.com"));

    // that's the key with the "biggest" collection within the map
    int biggest = map.asMap().entrySet().stream().collect(Collectors.reducing(0, entry -> entry.getValue().size(), Integer::max));

    Multimap<String, String> newMap = ArrayListMultimap.create();

    // "padding" the collection when required
    map.keySet().stream().forEach(key -> {
        int currentSize = map.get(key).size();
        newMap.putAll(key, map.get(key));
        if (currentSize < biggest) {
            newMap.putAll(key, Collections.nCopies(biggest - currentSize, (String) null));
        }
    });

    System.out.println(newMap); // {MiddleName=[null, null, null], EmailAddress=[toni@gmail.com, mary@gmail.com, paul@gmail.com]}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38937588" questionTitle="JavaFX / FXML: Vertical button alongside the entire window">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.text.Font?>

<GridPane hgap="20.0" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" vgap="5.0" xmlns="http://javafx.com/javafx/8.0.60" xmlns:fx="http://javafx.com/fxml/1">
  <columnConstraints>
    <ColumnConstraints halignment="CENTER" hgrow="NEVER" maxWidth="100.0" minWidth="50.0" prefWidth="100.0" />
    <ColumnConstraints hgrow="NEVER" maxWidth="1.7976931348623157E308" minWidth="500.0" prefWidth="500.0" />
  </columnConstraints>
  <rowConstraints>
    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
  </rowConstraints>
   <children>
      <Label text="Label" GridPane.columnIndex="1" />
      <Label text="Label" GridPane.columnIndex="1" GridPane.rowIndex="1" />
      <Label text="Label" GridPane.columnIndex="1" GridPane.rowIndex="2" />
      <AnchorPane GridPane.hgrow="ALWAYS" GridPane.rowSpan="3" GridPane.vgrow="ALWAYS">
         <children>
            <Button contentDisplay="TOP" mnemonicParsing="false" textOverrun="CLIP" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
               <font>
                  <Font size="11.0" />
               </font>
               <graphic>
                  <Label minWidth="-Infinity" rotate="90.0" text="Some Text">
                     <font>
                        <Font size="15.0" />
                     </font>
                  </Label>
               </graphic>
            </Button>
         </children>
      </AnchorPane>
   </children>
</GridPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>

<GridPane styleClass="root" xmlns="http://javafx.com/javafx/8.0.65" xmlns:fx="http://javafx.com/fxml/1">
   <columnConstraints>
      <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" />
      <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
   </columnConstraints>
   <rowConstraints>
      <RowConstraints minHeight="50.0" vgrow="SOMETIMES" />
      <RowConstraints minHeight="50.0" prefHeight="30.0" vgrow="SOMETIMES" />
      <RowConstraints minHeight="50.0" prefHeight="30.0" vgrow="SOMETIMES" />
   </rowConstraints>
   <children>
      <Button mnemonicParsing="false" text="Button" GridPane.rowSpan="3" />
      <VBox style="-fx-background-color: white;" GridPane.columnIndex="1" GridPane.hgrow="ALWAYS" GridPane.rowIndex="1" GridPane.vgrow="ALWAYS" />
      <VBox style="-fx-background-color: white;" GridPane.columnIndex="1" GridPane.hgrow="ALWAYS" />
      <VBox style="-fx-background-color: white;" GridPane.columnIndex="1" GridPane.hgrow="ALWAYS" GridPane.rowIndex="2" />
   </children>
</GridPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38914933" questionTitle="How to cause permutation event by manipulating ObservableList?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javafx.collections.ModifiableObservableListBase;

public class PermutatingObservableList<E> extends ModifiableObservableListBase<E> {


    private final List<E> source ;

    public PermutatingObservableList(List<E> source) {
        this.source = source ;
    }

    public void permute(int[] permutation) {
        checkPermutation(permutation);
        beginChange();
        List<E> temp = new ArrayList<>(source);
        for (int i = 0 ; i < size() ; i++) {
            source.set(i, temp.get(permutation[i]));
        }
        nextPermutation(0, size(), permutation);
        endChange();
    }

    public void pairwiseSwap() {
        int[] permutation = new int[size()];
        for (int i = 0; i+1 < permutation.length ; i+=2) {
            permutation[i] = i+1 ;
            permutation[i+1] = i ;
        }
        if (permutation.length % 2 == 1) {
            permutation[permutation.length - 1] = permutation.length - 1 ;
        }
        permute(permutation);
    }

    private void checkPermutation(int[] permutation) {
        boolean valid = permutation.length == size();
        Set<Integer> values = IntStream.range(0, size()).boxed().collect(Collectors.toSet());
        for (int i=0; i<permutation.length && valid ; i++) {
            valid = values.remove(new Integer(permutation[i]));
        }
        if (! valid) {
            throw new IllegalArgumentException("Invalid permuation: "+Arrays.toString(permutation)+"\n"
                    +"Permutation must be same length as list and must contain each of the values "
                    + "0-"+(size()-1)+" exactly once");
        }
    }

    @Override
    public E get(int index) {
        return source.get(index);
    }

    @Override
    public int size() {
        return source.size();
    }

    @Override
    protected void doAdd(int index, E element) {
        source.add(index, element);
    }

    @Override
    protected E doSet(int index, E element) {
        return source.set(index, element);
    }

    @Override
    protected E doRemove(int index) {
        return source.remove(index);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;

import java.util.Collections;

public class PermutationTest {

    public static void main(String[] args) {

        ObservableList<String> list = 
                         FXCollections.observableArrayList("Z", "Y", "X");
        list.addListener(new ListChangeListener<String>() {
            @Override
            public void onChanged(Change<? extends String> c) {
                c.next();
                System.out.println(c.wasPermutated());
            }
        });
        Collections.sort(list);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38810914" questionTitle="Find if hours ranges overlap regardless of the date">
<Answer><![CDATA[// package name and imports omitted

public class Interval {

    private final LocalDateTime start;
    private final LocalDateTime end;

    private final boolean inclusiveStart;
    private final boolean inclusiveEnd;

    public Interval(LocalDateTime start, boolean inclusiveStart, 
                      LocalDateTime end, boolean inclusiveEnd) {

        this.start = start;
        this.end = end;

        this.inclusiveStart = inclusiveStart;
        this.inclusiveEnd = inclusiveEnd;
    }

    public boolean overlaps(Interval other) {

        // intervals share at least one point in time
        if(    ( this.start.equals(other.getEnd())
                 && this.inclusiveStart
                 && other.isInclusiveEnd() )

            || ( this.end.equals(other.getStart()) 
                 && this.inclusiveEnd 
                 && other.isInclusiveStart() )
           ) 
           return true;


        // intervals intersect
        if(    ( this.end.isAfter(other.getStart()) && this.start.isBefore(other.getStart()) )    
            || ( other.getEnd().isAfter(this.start) && other.getStart().isBefore(this.start) )
           )
            return true;


        // this interval contains the other interval
        if(   
                ( ( this.start.equals(other.getStart()) && other.isInclusiveStart() ) 
                  || this.start.isAfter(other.getStart()) )
                && 
                ( ( this.end.equals(other.getEnd()) && other.isInclusiveEnd() ) 
                  || this.end.isBefore(other.getEnd()) )
           )
            return true;


        // the other interval contains this interval 
        if(
                ( ( other.getStart().equals(this.start) && this.inclusiveStart )
                  || other.getStart().isAfter(this.start) )
                && 
                ( ( other.end.equals(this.end) && this.inclusiveEnd ) 
                  || 
                  other.getEnd().isBefore(this.end) )
           )
           return true;


        return false;
    }

    // getters/setters omitted  
}]]></Answer>
<Answer><![CDATA[package so38810914;

import java.time.LocalTime;
import static java.util.Objects.*;

public class Question {

    public static class LocalTimeRange {

        private final LocalTime from;
        private final LocalTime to;

        public LocalTimeRange(LocalTime from, LocalTime to) {
            requireNonNull(from, "from must not be null");
            requireNonNull(to, "to must not be null");
            this.from = from;
            this.to = to;
        }

        public boolean overlaps(LocalTimeRange other) {
            requireNonNull(other, "other must not be null");
            return isBetween(other.from, this.from, this.to)
                    || isBetween(other.to, this.from, this.to)
                    || isBetween(this.from, other.from, other.to)
                    || isBetween(this.to, other.from, other.to);
        }

        private static boolean isBetween(LocalTime t, LocalTime from, LocalTime to) {
            if (from.isBefore(to)) { // same day
                return from.isBefore(t) && t.isBefore(to);
            } else { // spans to the next day.
                return from.isBefore(t) || t.isBefore(to);
            }
        }
    }

    public static void main(String[] args) {
        test( 0,  1,     2,  3,    false);
        test( 2,  3,     0,  1,    false);
        test( 0,  3,     1,  2,    true);
        test( 1,  2,     0,  3,    true);
        test( 0,  2,     1,  3,    true);
        test(12, 18,    15, 21,    true);
        test(18,  6,    21,  3,    true);
        test(21,  3,     0,  6,    true);
        test(21,  0,     3,  6,    false);

    }

    private static void test(int from1, int to1, int from2, int to2, boolean overlap) {
        LocalTimeRange range1 = new LocalTimeRange(LocalTime.of(from1, 0), LocalTime.of(to1, 0));
        LocalTimeRange range2 = new LocalTimeRange(LocalTime.of(from2, 0), LocalTime.of(to2, 0));
        boolean test = (range1.overlaps(range2)) == overlap;
        System.out.printf("[%2d-%2d] - [%2d-%2d] -> %-5b: %s%n", from1, to1, from2, to2, overlap, test?"OK":"Not OK");
    }
}]]></Answer>
<Answer><![CDATA[package com.example.jodatimedemo;

import org.joda.time.Instant;
import org.joda.time.Interval;

public class JodaTimeDemoMain {

    public static void main(String[] args) {
        try {
            Interval int1 = new Interval(
                    Instant.parse("2016-08-01T22:00:00"), 
                    Instant.parse("2016-08-02T02:00:00"));
            Interval int2 = new Interval(
                    Instant.parse("2016-08-02T01:00:00"), 
                    Instant.parse("2016-08-02T08:00:00"));
            System.out.printf(
                    "The two intervals %s.%n", 
                    int1.overlaps(int2) ? "overlap" : "do not overlap"); 
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38760184" questionTitle="JavaFX ComboBox background color per selected item">
<Answer><![CDATA[ComboBox<Item> comboBox = new ComboBox<>(FXCollections.observableArrayList(
        new Item("Summer", Color.RED),
        new Item("Winter", Color.CYAN),
        new Item("Spring", Color.LIME),
        new Item("Autumn", Color.BROWN)
));

comboBox.setCellFactory(lv -> new ListCell<Item>(){

    @Override
    protected void updateItem(Item item, boolean empty) {
        super.updateItem(item, empty);

        if (empty || item == null) {
            setBackground(Background.EMPTY);
            setText("");
        } else {
            setBackground(new Background(new BackgroundFill(item.getColor(),
                                                            CornerRadii.EMPTY,
                                                            Insets.EMPTY)));
            setText(item.getValue());
        }
    }

});

comboBox.setButtonCell(comboBox.getCellFactory().call(null));]]></Answer>
<Answer><![CDATA[public class Main extends Application {

Random r = new Random();
private class Item {
    Color c;
    String s;
    public Item(Color a,String b){
        c = a;
        s = b;
    }

    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return s;
    }
}

private void addAll(List<String> items){
    for(String s : items){
        box.getItems().add(new Item(Color.WHITE,s));
    }
}

ComboBox<Item> box;

@Override
public void start(Stage primaryStage) {

    Pane p;

    try {
        p = new StackPane();
        box = new ComboBox<Item>();
        box.setMinWidth(100);
        addAll(Font.getFontNames());
        box.setCellFactory(new Callback<ListView<Item>, ListCell<Item>>() {

            @Override
            public ListCell<Item> call(ListView<Item> param) {
                // TODO Auto-generated method stub
                return new ListCell<Item>(){


                    @Override
                    public void updateSelected(boolean selected) {
                        super.updateSelected(selected);
                        if(selected){
                            getItem().c = Color.rgb(r.nextInt(205),
                                    r.nextInt(205), r.nextInt(205), 1);

                        }
                        setStyle("-fx-text-fill: black; -fx-background-color: #" +
                                getItem().c.toString().substring(2)+";");
                    }

                    @Override
                    protected void updateItem(Item item, boolean empty) {
                        // TODO Auto-generated method stub
                        super.updateItem(item, empty);
                        if(empty){
                            return;
                        }
                        setText(item.toString());
                        setStyle("-fx-text-fill: black; -fx-background-color: #" +
                                getItem().c.toString().substring(2)+";");
                    }

                };
            }
        });
        p.getChildren().add(box);
        p.setPrefSize(500, 500);
        Scene scene = new Scene(p);
        scene.getStylesheets().add(getClass().
                getResource("application.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();

    } catch(Exception e) {
        e.printStackTrace();
    }
}]]></Answer>
<Answer><![CDATA[ComboBox<String> combo = new ComboBox<>();
combo.setItems(FXCollections.observableArrayList("First", "Second", "Third", "Fourth"));

combo.buttonCellProperty().bind(Bindings.createObjectBinding(() -> {

    int indexOf = combo.getItems().indexOf(combo.getValue());

    Color color = Color.TRANSPARENT;

    switch (indexOf) {
    case 0: color = Color.GREEN; break;
    case 1: color = Color.RED; break;
    default: break;
    }

    final Color finalColor = color;

    // Get the arrow button of the combo-box
    StackPane arrowButton = (StackPane) combo.lookup(".arrow-button");


    return new ListCell<String>() {

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);

            if (empty || item == null) {
                setBackground(Background.EMPTY);
                setText("");
            } else {
                setBackground(new Background(new BackgroundFill(finalColor, CornerRadii.EMPTY, Insets.EMPTY)));
                setText(item);
            }

            // Set the background of the arrow also
            if (arrowButton != null)
                arrowButton.setBackground(getBackground());
        }

    };
}, combo.valueProperty()));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38470551" questionTitle="How to separate my gui in javafx?">
<Answer><![CDATA[public class HelloController
{
    private static final Logger log = LoggerFactory.getLogger(HelloController.class);

    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private Label messageLabel;

    public void sayHello() {

        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();

        StringBuilder builder = new StringBuilder();

        if (!StringUtils.isEmpty(firstName)) {
            builder.append(firstName);
        }

        if (!StringUtils.isEmpty(lastName)) {
            if (builder.length() > 0) {
                builder.append(" ");
            }
            builder.append(lastName);
        }

        if (builder.length() > 0) {
            String name = builder.toString();
            log.debug("Saying hello to " + name);
            messageLabel.setText("Hello " + name);
        } else {
            log.debug("Neither first name nor last name was set, saying hello to anonymous person");
            messageLabel.setText("Hello mysterious person");
        }
    }

}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    public static void main(String args[]){
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {       

        CardModel model = new CardModel();
        CardView scene = new CardView(stage);       
        CardController controller= new CardController(model,scene);

        stage.setTitle("Title");
        stage.setMaximized(true);
        stage.setMinWidth(500);
        stage.setMinHeight(550);
        stage.setScene(scene);
        stage.show();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38443372" questionTitle="How is set the Pivot for Shapes in JavaFX after Rotate Transformation?">
<Answer><![CDATA[btn.setOnAction(new EventHandler<ActionEvent>() {

    @Override
    public void handle(ActionEvent event) {
        try {

            Point2D targetAbsolute = new Point2D(150, 50);
            Point2D targetLocal = rotate.inverseTransform(targetAbsolute);
            double newX = targetLocal.getX() ;
            double newY = targetLocal.getY() ;

            double deltaX = newX - rect1.getX();
            double deltaY = newY - rect1.getY();

            rect1.setX(newX);
            rect1.setY(newY);
            rect1.setWidth(rect1.getWidth() - deltaX);
            rect1.setHeight(rect1.getHeight() - deltaY);

        } catch (NonInvertibleTransformException ex) {
            Logger.getLogger(RotateTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
});]]></Answer>
<Answer><![CDATA[@Override
            public void handle(ActionEvent event) {
                try {
                    Point2D p1s = new Point2D(150, 50); //target for upper left corner in transformed system
                    Point2D p2s = rotate.transform(rect1.getX()+rect1.getWidth(), rect1.getY()+rect1.getHeight());//bottom right corner in transformed system

                    Rotate rotTemp=new Rotate(rotate.getAngle(), (p1s.getX() + p2s.getX() )/ 2., (p1s.getY() + p2s.getY() )/ 2.);

                Point2D q1 = rotTemp.inverseTransform(p1s);
                Point2D q2 = rotTemp.inverseTransform(p2s);

                rect1.setX(q1.getX());
                rect1.setY(q1.getY());
                rect1.setWidth(q2.getX()-q1.getX());
                rect1.setHeight(q2.getY()-q1.getY());
                rotate.setPivotX(rotTemp.getPivotX());
                rotate.setPivotY(rotTemp.getPivotY());
            } catch (NonInvertibleTransformException ex) {
                Logger.getLogger(RotateTest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38419634" questionTitle="javafxports how to call android native Media Player">
<Answer><![CDATA[package com.gluonhq.nativeaudio;

import android.content.res.AssetFileDescriptor;
import android.media.AudioManager;
import android.media.MediaPlayer;
import java.io.IOException;
import javafxports.android.FXActivity;

public class AndroidNativeAudio implements NativeAudioService {

    private MediaPlayer mp;
    private int currentPosition;

    public AndroidNativeAudio() { }

    @Override
    public void play() {
        currentPosition = 0;
        try {
            if (mp != null) {
                stop();
            }
            mp = new MediaPlayer();
            AssetFileDescriptor afd = FXActivity.getInstance().getAssets().openFd("audio.mp3");

            mp.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            mp.setAudioStreamType(AudioManager.STREAM_RING);
            mp.setOnCompletionListener(mp -> stop());
            mp.prepare();
            mp.start();
        } catch (IOException e) {
            System.out.println("Error playing audio resource " + e);
        }
    }

    @Override
    public void stop() {
        if (mp != null) {
            if (mp.isPlaying()) {
                mp.stop();
            }
            mp.release();
            mp = null;
        }
    }

    @Override
    public void pause() {
        if (mp != null) {
            mp.pause();
            currentPosition = mp.getCurrentPosition();
        }
    }

    @Override
    public void resume() {
        if (mp != null) {
            mp.start();
            mp.seekTo(currentPosition);
        }
    }
}]]></Answer>
<Answer><![CDATA[package my.application;

import my.application.Constants;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.ReadOnlyObjectWrapper;
import org.robovm.apple.avfoundation.AVAudioPlayer;
import org.robovm.apple.foundation.NSErrorException;
import org.robovm.apple.foundation.NSURL;
import org.robovm.apple.foundation.NSURLScheme;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;

public class NativeAudioServiceIOS extends PathHelperIOS implements NativeAudioService {
    private static final Logger LOG = Logger.getLogger(NativeAudioServiceIOS.class.getName());
    private static final String DIR_NAME = Constants.OBJECTS_BASE_PATH;

    private final ReadOnlyObjectWrapper<Status> status = new ReadOnlyObjectWrapper<>(this, "status", Status.STOP);
    private String filename = null;
    private AVAudioPlayer player = null;

    public NativeAudioServiceIOS() {
        super();
    }

    @Override
    public void init(String filename) throws NativeServiceException {
        this.filename = filename.startsWith("/") ? filename.substring(1) : filename;
        LOG.warning("Called with file: " + filename);
        status.set(Status.STOP);

        try {
            if(!filename.startsWith("/")) filename = "/" + filename;
            File fullfile = new File(pathBase.getAbsolutePath() + filename);
            if(fullfile.exists()) {
                NSURL fullurl = new NSURL(NSURLScheme.File, "", fullfile.getAbsolutePath());
                LOG.log(Level.SEVERE, "Loading URL: " + fullurl);

                // Create audio player object and initialize with URL to sound
                player = new AVAudioPlayer(fullurl);
                LOG.log(Level.SEVERE, "Player initialized: " + player);

                status.set(Status.STOP);
            } else {
                LOG.log(Level.WARNING, String.format("Audiofile doesn't exist: %s (%s / %s)",
                        fullfile.getAbsolutePath(),
                        pathBase.getAbsolutePath(),
                        filename));
                player = null;
                status.set(Status.ERROR);
            }
        } catch(NSErrorException error) {
            LOG.log(Level.SEVERE, "Audio Setup Failed: " + error.toString(), error);
            status.set(Status.ERROR);
        }
    }

    @Override
    public void play() throws NativeServiceException {
        if(player == null) return;

        player.play();
        status.set(Status.PLAY);
    }

    @Override
    public void pause() throws NativeServiceException {
        if(player == null) return;

        player.pause();
        status.set(Status.PAUSE);
    }

    @Override
    public void resume() throws NativeServiceException {
        if(player == null) return;

        player.play();
        status.set(Status.PLAY);
    }

    @Override
    public void stop() throws NativeServiceException {
        if(player == null) return;

        player.stop();
        player.setCurrentTime(0.0);
        status.set(Status.STOP);
    }

    @Override
    public ReadOnlyObjectProperty<Status> statusProperty() {
        return status.getReadOnlyProperty();
    }

    @Override
    public Status getStatus() {
        return status.get();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38406903" questionTitle="Placing text in a circle in javafx">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Characters extends Application {

    @Override
    public void start(Stage primaryStage) {

        // Create the pane
        // GridPane pane = new GridPane();
        Pane pane = new Pane();
        pane.setPrefSize(600, 600);

        // pane.setAlignment(Pos.CENTER);

        // Font class instance
        Font font = Font.font("Times New Roman", FontWeight.BOLD, FontPosture.REGULAR, 35);

        // Welcome to Java string
        String welcome = "Welcome to Java";
        double rotation = 90;
        double offset = pane.getPrefWidth() / 2;
        double radius = 100;
        double x = offset + Math.cos(rotation) * radius;
        double y = offset + Math.sin(rotation) * radius;

        // Loop
        for (int i = 0; i < welcome.length(); i++) {
            x = offset + Math.cos(Math.toRadians(rotation)) * radius;
            y = offset + Math.sin(Math.toRadians(rotation)) * radius;
            System.out.println("Y: " + y);
            System.out.println("X: " + x);
            Text text = new Text(x, y, welcome.charAt(i) + "");
            System.out.println("Actual X" + text.getX());
            System.out.println("Actual Y" + text.getY());

            text.setFont(font);
            text.setRotate(rotation);
            pane.getChildren().add(text);
            rotation += 22.5;
        }

        // Create the scene for the application
        // Scene scene = new Scene(pane, 500, 500);
        Scene scene = new Scene(pane);
        primaryStage.setTitle("Characters around circle");
        primaryStage.setScene(scene);
        // Display
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.collections.*;
import javafx.scene.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class BezierTextPlotter extends Application {

  private static final String CIRCLE_TEXT = "  Welcome to Java  ";

  @Override
  public void start(final Stage stage) throws Exception {

    final Text text = new Text(CIRCLE_TEXT);
    text.setStyle("-fx-font-size: 40px");

    Circle circle = new Circle(200, 200, 100);

    final ObservableList<Text> parts = FXCollections.observableArrayList();
    final ObservableList<PathTransition> transitions
            = FXCollections.observableArrayList();

    for (char character : text.textProperty().get().toCharArray()) {
      Text c = new Text(character + "");
      c.setEffect(text.getEffect());
      c.setStyle(text.getStyle());
      parts.add(c);
      transitions.add(createPathTransition(circle, c));
    }

    AnchorPane ap = new AnchorPane();
    ap.getChildren().addAll(parts);

    for (int i = 0; i < parts.size(); i++) {
      final Transition t = transitions.get(i);
      t.stop();
      t.jumpTo(Duration.seconds(10).multiply((i + 0.5) * 1.0 / parts.size()));

      AnimationTimer timer = new AnimationTimer() {
        int frameCounter = 0;

        @Override
        public void handle(long l) {
          frameCounter++;
          if (frameCounter == 1) {
            t.stop();
            stop();
          }
        }
      };
      timer.start();
      t.play();
    }

    stage.setTitle("Circle Text Sample");
    stage.setScene(new Scene(ap, 400, 400, Color.ALICEBLUE));
    stage.show();
  }

  private PathTransition createPathTransition(Shape shape, Text text) {
    final PathTransition trans
            = new PathTransition(Duration.seconds(10), shape, text);
    trans.setAutoReverse(false);
    trans.setCycleCount(PathTransition.INDEFINITE);
    trans.setOrientation(PathTransition.OrientationType.ORTHOGONAL_TO_TANGENT);
    trans.setInterpolator(Interpolator.LINEAR);

    return trans;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    launch(args);
  }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    //Create the pane
    GridPane pane = new GridPane();
    pane.setAlignment(Pos.CENTER);

    Group textGroup = new Group();

    //Font class instance
    Font font = Font.font("Times New Roman", FontWeight.BOLD, FontPosture.REGULAR, 35);

    //Welcome to Java string
    String welcome = "Welcome to Java";
    double rotation = 90;

    double radius = 100d;

    //Loop
    for (char c : welcome.toCharArray()) {
        // ignore whitespace, otherwise add rotated char
        if (!Character.isWhitespace(c)) {
            Text text = new Text(Character.toString(c));
            text.setFont(font);

            Rotate rotationMatrix = new Rotate(rotation, 0, radius);
            text.getTransforms().add(rotationMatrix);

            textGroup.getChildren().add(text);
        }
        rotation += 22.5;
    }

    pane.getChildren().add(textGroup);

    //Create the scene for the application
    Scene scene = new Scene(pane, 500, 500);


    primaryStage.setTitle("Characters around circle");
    primaryStage.setScene(scene);

    //Display
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38378060" questionTitle="Grouping Double using java 8 by arbitrary interval to Map">
<Answer><![CDATA[import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Random;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;

public class Test {

  public static void main(String... args) {
    Random r = new Random();
    List<Double> data = r.doubles(10).map(d -> r.nextInt(30) * d).peek(System.out::println).boxed()
        .collect(Collectors.toList());
    NavigableSet<Integer> groups = group();
    Map<Integer, List<Double>> groupped = data.stream()
        .collect(Collectors.groupingBy(d -> groups.floor(d.intValue()), TreeMap::new, Collectors.toList()));
    System.out.println(groupped);
  }

  public static NavigableSet<Integer> group() {
    NavigableSet<Integer> groups = new TreeSet<>();
    groups.add(0);
    groups.add(6);
    groups.add(11);
    groups.add(16);
    groups.add(21);
    groups.add(26);
    return groups;
  }
}]]></Answer>
<Answer><![CDATA[TreeSet<Double> groups = new TreeSet<>();
groups.add( 5d);                      // [-Inf,    5]
groups.add(10d);                      // ]   5,   10]
groups.add(15d);                      // ]  10,   15]
groups.add(20d);                      // ]  15,   20]
groups.add(25d);                      // ]  20,   25]
groups.add(30d);                      // ]  25,   30]
groups.add(Double.POSITIVE_INFINITY); // ]  30, +Inf]

Random rnd = new Random();
for (double value = 0d; value <= 30d; value += 5d) {
    double down = Math.nextDown(value);
    double up = Math.nextUp(value);
    System.out.printf("%-18s -> %4s     %-4s -> %4s     %-18s -> %4s%n",
                      down, groups.ceiling(down),
                      value, groups.ceiling(value),
                      up, groups.ceiling(up));
}
for (int i = 0; i < 10; i++) {
    double value = rnd.nextDouble() * 30d;
    double group = groups.ceiling(value);
    System.out.printf("%-18s -> %4s%n", value, group);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38301244" questionTitle="Creating a dynamic GridPane (add and remove rows)">
<Answer><![CDATA[public class Main extends Application {

    private SimpleBooleanProperty expanded = new SimpleBooleanProperty(true);

    @Override
    public void start(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();
            Scene scene = new Scene(root,400,400);


            VBox vbox = new VBox();


            GridPane grid = new GridPane();
            // Just to see that the lines are actually added
            grid.setGridLinesVisible(true);
            grid.setPrefWidth(200);

            grid.getRowConstraints().add(new RowConstraints(30));
            grid.getRowConstraints().add(new RowConstraints(30));

            grid.addRow(2, new Label("I am fixed!"));
            grid.getRowConstraints().add(new RowConstraints(30));



            Button showOrHideButton = new Button();
            showOrHideButton.setOnAction((e) -> {
                expanded.set(expanded.not().get());
            });


            vbox.getChildren().addAll(showOrHideButton, grid);

            expanded.addListener((obs, oldVal, newVal) -> {
                if(newVal) {
                    grid.getRowConstraints().get(0).setMaxHeight(30);
                    grid.getRowConstraints().get(1).setMaxHeight(30);
                    showOrHideButton.setText("Hide");
                } else {
                    grid.getRowConstraints().get(0).setMaxHeight(0);
                    grid.getRowConstraints().get(1).setMaxHeight(0);
                    showOrHideButton.setText("Show");
                }
            });

            expanded.set(false);


            root.setCenter(vbox);

            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@FXML
private void add_act(ActionEvent event) {
    SimpleBooleanProperty expanded = new SimpleBooleanProperty(true);

        // Just to see that the lines are actually added
        grid.setGridLinesVisible(true);

        grid.getRowConstraints().add(new RowConstraints(30)); //add 1 row
        grid.getRowConstraints().add(new RowConstraints(30)); //add 1 row

        grid.addRow(2, new Label("I am fixed!")); //on index 2 write label

        show.setOnAction((e) -> {
            expanded.set(expanded.not().get());
        });

}

@FXML
private void hide_act(ActionEvent event) {
    SimpleBooleanProperty expanded = new SimpleBooleanProperty(true);

        // Just to see that the lines are actually added
        grid.getRowConstraints().get(0).setMaxHeight(0);
        grid.getRowConstraints().get(1).setMaxHeight(0);

        show.setOnAction((e) -> {
            expanded.set(expanded.not().get());
        });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38248442" questionTitle="Insert the same object several time in FXML file (JavaFX)">
<Answer><![CDATA[<Tab>
    <GridPane>
        <columnConstraints>
            <ColumnConstraints />
        </columnConstraints>
        <rowConstraints>
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
        <RowConstraints />
        </rowConstraints>
        <children>
            <!-- I add my Text elements from JavaFX code -->
        </children>
    </GridPane>
</Tab>
<Tab>
    <GridPane>
        <columnConstraints>
            <ColumnConstraints />
        </columnConstraints>
        <rowConstraints>
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
        <RowConstraints />
        </rowConstraints>
        <children>
            <!-- I add my Text elements from JavaFX code -->
        </children>
    </GridPane>
</Tab>]]></Answer>
<Answer><![CDATA[<Tab xmlns:fx="http://javafx.com/fxml/1" fx:controller="mypackage.SubController">
    <GridPane>
        <columnConstraints>
            <ColumnConstraints />
        </columnConstraints>
        <rowConstraints>
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
            <RowConstraints />
        <RowConstraints />
        </rowConstraints>
        <children>
            <Text fx:id="text1" GridPane.rowIndex="1" />
            <Text fx:id="text2" GridPane.rowIndex="2" />
            <Text fx:id="text3" GridPane.rowIndex="3" />
            <Text fx:id="text4" GridPane.rowIndex="4" />
        </children>
    </GridPane>
</Tab>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38090353" questionTitle="(javafx) How automatically width of tableview column depending on the content">
<Answer><![CDATA[/**
 * Resizes all visible columns to fit its content. Note that this does nothing if a column's 
 * prefWidth is != 80.
 * 
 * @param table
 */
public static void doAutoSize(TableView<?> table) {
    // good enough to find an arbitrary column header
    // due to sub-optimal api
    TableColumnHeader header = (TableColumnHeader) table.lookup(".column-header");
    if (header != null) {
        table.getVisibleLeafColumns().stream().forEach(column -> doColumnAutoSize(header, column));
    }
}

public static void doColumnAutoSize(TableColumnHeader columnHeader, TableColumn column) {
    // use your preferred reflection utility method 
    FXUtils.invokeGetMethodValue(TableColumnHeader.class, columnHeader, "doColumnAutoSize", 
            new Class[] {TableColumnBase.class, Integer.TYPE}, 
            new Object[] {column, -1});
}]]></Answer>
<Answer><![CDATA[import com.sun.javafx.scene.control.skin.NestedTableColumnHeader;
import com.sun.javafx.scene.control.skin.TableColumnHeader;
import com.sun.javafx.scene.control.skin.TableHeaderRow;
import com.sun.javafx.scene.control.skin.TableViewSkin;
import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

import java.lang.reflect.Method;

// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
public class TableViewPlus extends TableView
{
  private boolean flSkinPropertyListenerAdded = false;

  // ---------------------------------------------------------------------------------------------------------------------
  public TableViewPlus()
  {
    super();

    this.setEditable(false);
  }

  // ---------------------------------------------------------------------------------------------------------------------
  public TableViewPlus(final ObservableList toItems)
  {
    super(toItems);

    this.setEditable(false);
  }

  // ---------------------------------------------------------------------------------------------------------------------
  public void resizeColumnsToFit()
  {
    if (this.getSkin() != null)
    {
      this.resizeColumnsPlatformCheck();
    }
    else if (!this.flSkinPropertyListenerAdded)
    {
      this.flSkinPropertyListenerAdded = true;

      // From https://stackoverflow.com/questions/38718926/how-to-get-tableheaderrow-from-tableview-nowadays-in-javafx
      // Add listener to detect when the skin has been initialized and therefore this.getSkin() != null.
      this.skinProperty().addListener((a, b, newSkin) -> this.resizeColumnsPlatformCheck());
    }

  }

  // ---------------------------------------------------------------------------------------------------------------------
  private void resizeColumnsPlatformCheck()
  {
    if (Platform.isFxApplicationThread())
    {
      this.resizeAllColumnsUsingReflection();
    }
    else
    {
      Platform.runLater(this::resizeAllColumnsUsingReflection);
    }
  }

  // ---------------------------------------------------------------------------------------------------------------------
  // From https://stackoverflow.com/questions/38090353/javafx-how-automatically-width-of-tableview-column-depending-on-the-content
  // Geesh. . . .
  private void resizeAllColumnsUsingReflection()
  {
    final TableViewSkin<?> loSkin = (TableViewSkin<?>) this.getSkin();
    // The skin is not applied till after being rendered. Which is happening with the About dialog.
    if (loSkin == null)
    {
      System.err.println("Skin is null");
      return;
    }

    final TableHeaderRow loHeaderRow = loSkin.getTableHeaderRow();
    final NestedTableColumnHeader loRootHeader = loHeaderRow.getRootHeader();
    for (final TableColumnHeader loColumnHeader : loRootHeader.getColumnHeaders())
    {
      try
      {
        final TableColumn<?, ?> loColumn = (TableColumn<?, ?>) loColumnHeader.getTableColumn();
        if (loColumn != null)
        {
          final Method loMethod = loSkin.getClass().getDeclaredMethod("resizeColumnToFitContent", TableColumn.class, int.class);
          loMethod.setAccessible(true);
          loMethod.invoke(loSkin, loColumn, 30);
        }
      }
      catch (final Throwable loErr)
      {
        loErr.printStackTrace(System.err);
      }
    }

  }

  // ---------------------------------------------------------------------------------------------------------------------
}
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38021036" questionTitle="Manipulating data from 2 maps to create a 3rd map">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Test {
    public static void main(String[] args) {
        Map<String, List<Mystruct>> map1 = new HashMap<String, List<Mystruct>>();
        Map<String, List<Mystruct>> map2 = new HashMap<String, List<Mystruct>>();

        List<Mystruct> list1 = new ArrayList<Mystruct>();
        List<Mystruct> list2 = new ArrayList<Mystruct>();

        Mystruct struct1 = new Mystruct("1PM", 10);
        Mystruct struct2 = new Mystruct("2PM", 6);
        Mystruct struct3 = new Mystruct("3PM", 8);
        list1.add(struct1);
        list1.add(struct2);
        list1.add(struct3);

        Mystruct struct4 = new Mystruct("1PM", 5);
        Mystruct struct5 = new Mystruct("2PM", 2);
        Mystruct struct6 = new Mystruct("3PM", 1);
        list2.add(struct4);
        list2.add(struct5);
        list2.add(struct6);

        map1.put("Cat", list1);
        map2.put("Cat", list2);

        List<Mystruct> list3 = null;
        List<Mystruct> list4 = null;

        Map<String, List<Mystruct>> map3 = new HashMap<String, List<Mystruct>>();
        for (String key : map1.keySet()) 
        {
            if(map2.get(key)!=null)
            {
                list3=map1.get(key);
                list4=map2.get(key);

                List<Mystruct> structList = new ArrayList<Mystruct>();

                for(Mystruct outerStruct:list3)
                {
                    for(Mystruct innerStruct:list4)
                    {
                        if(outerStruct.getTimeStamp().equals(innerStruct.getTimeStamp()))
                        {
                            Mystruct structToStore=new Mystruct();
                            structToStore.setTimeStamp(outerStruct.getTimeStamp());
                            structToStore.setNumber(outerStruct.getNumber()/innerStruct.getNumber());
                            structList.add(structToStore);
                        }

                    }
                }
                map3.put(key, structList);
            }
        }

        System.out.println(map3.toString());

    }

}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
    Map<String, List<myStruct>> map1 = new HashMap<>();
    Map<String, List<myStruct>> map2 = new HashMap<>();

    myStruct one = new myStruct("1pm", 10);
    myStruct two = new myStruct("1pm", 5);
    myStruct thr = new myStruct("2pm", 6);
    myStruct fou = new myStruct("2pm", 2);
    myStruct fiv = new myStruct("3pm", 8);
    myStruct six = new myStruct("3pm", 1);

    map1.put("Cat", Arrays.asList(one, thr, fiv));
    map2.put("Cat", Arrays.asList(two, fou, six));

    Map<String, List<myStruct>> map3 = new HashMap<>(map1);

    List<myStruct> tmp;

    for (Map.Entry<String, List<myStruct>> e : map1.entrySet()) {
         tmp = e.getValue()
                .stream()
                .map(struct -> new myStruct(struct.time, map2.get(e.getKey())
                                                                   .stream()
                                                                   .filter(x -> x.time.equals(struct.time))
                                                                   .mapToInt(x -> struct.number / x.number)
                                                                   .findFirst().getAsInt()))
                .collect(Collectors.toList());

         map3.put(e.getKey(), tmp);
    }

    System.out.println(map3); // {Cat=[<1pm, 2>, <2pm, 3>, <3pm, 8>]}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="38004190" questionTitle="Switching scenes don't retain maximized screen in JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Screen;
import javafx.stage.Stage;

public class NewFXMain extends Application {

@Override
public void start(Stage primaryStage) {

    // get screensize of monitor
    Rectangle2D screenSize = Screen.getPrimary().getVisualBounds();

    // init buttons
    Button btn1 = new Button("switch to next scene >>");
    Button btn2 = new Button("<< switch to previous scene");

    // first rootNode
    StackPane root1 = new StackPane();
    root1.getChildren().add(btn1);
    Scene scene1 = new Scene(root1, screenSize.getWidth(), screenSize.getHeight());

    // second rootNode
    StackPane root2 = new StackPane();
    root2.getChildren().add(btn2);
    Scene scene2 = new Scene(root2, screenSize.getWidth(), screenSize.getHeight());

    // button actions
    btn1.setOnAction((ActionEvent event) -> {
        primaryStage.setScene(scene2);
    });
    btn2.setOnAction((ActionEvent event) -> {
        primaryStage.setScene(scene1);
    });

    primaryStage.setMaximized(true); // keep this since otherwise the titlebar is bit overlapped
    primaryStage.setScene(scene1);
    primaryStage.show();
}

public static void main(String[] args) {
    launch(args);
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class NewFXMainFixed extends Application {

    @Override
    public void start(Stage primaryStage) {
        // init buttons
        Button btn1 = new Button("switch to next scene >>");
        Button btn2 = new Button("<< switch to previous scene");

        // first scene
        StackPane root1 = new StackPane();
        root1.getChildren().add(btn1);

        // second scene
        StackPane root2 = new StackPane();
        root2.getChildren().add(btn2);

        // button actions
        btn1.setOnAction((ActionEvent event) -> 
                primaryStage.getScene().setRoot(root2)
        );
        btn2.setOnAction((ActionEvent event) -> 
                primaryStage.getScene().setRoot(root1)
        );

        Scene scene = new Scene(root1);
        primaryStage.setMaximized(true);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37931670" questionTitle="Whats the equivalent of JPanel in JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;

/**
 * @see https://stackoverflow.com/a/37935114/230513
 */
public class BorderTest extends Application {

    private static final Border black = new Border(new BorderStroke(Color.BLACK,
        BorderStrokeStyle.SOLID, new CornerRadii(8), new BorderWidths(2)));
    private static final Border red = new Border(new BorderStroke(Color.RED,
        BorderStrokeStyle.SOLID, new CornerRadii(8), new BorderWidths(2)));
    private static final Border blue = new Border(new BorderStroke(Color.BLUE,
        BorderStrokeStyle.SOLID, new CornerRadii(8), new BorderWidths(2)));
    private static final Color yellow = Color.YELLOW.deriveColor(0, .9, 1, 1);

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Test");

        GridPane root = new GridPane();
        root.setPadding(new Insets(16));
        root.setVgap(16);
        root.setBorder(black);
        root.setBackground(new Background(new BackgroundFill(
            Color.LIGHTGRAY, CornerRadii.EMPTY, Insets.EMPTY)));

        BorderPane top = new BorderPane();
        top.setPadding(new Insets(16));
        top.setBorder(red);
        top.setLeft(createLabel("Label 1", yellow, 16));
        Label topCenter = createLabel("Label 2", yellow, 64);
        topCenter.setContentDisplay(ContentDisplay.CENTER);
        BorderPane.setMargin(topCenter, new Insets(16));
        top.setCenter(topCenter);
        top.setRight(createLabel("Label 3", yellow, 16));
        root.add(top, 0, 0);

        BorderPane bot = new BorderPane();
        bot.setPadding(new Insets(16));
        bot.setBorder(blue);
        bot.setCenter(createLabel("Label 4", Color.GREEN, 24));
        root.add(bot, 0, 1);

        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Label createLabel(String text, Color color, int size) {
        Rectangle r = new Rectangle(3 * size, 2 * size);
        r.setFill(Color.TRANSPARENT);
        r.setStroke(color);
        r.setStrokeWidth(3);
        Label l = new Label(text, r);
        l.setContentDisplay(ContentDisplay.TOP);
        l.setTextFill(color);
        l.setFont(new Font(16));
        return l;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/**
 * ZetCode JavaFX tutorial
 *
 * This program positions three shapes
 * using absolute coordinates.
 *
 * Author: Jan Bodnar
 * Website: zetcode.com
 * Last modified: June 2015
 */

public class AbsoluteLayoutEx extends Application {

    @Override
    public void start(Stage stage) {

        initUI(stage);
    }

    private void initUI(Stage stage) {

        Pane root = new Pane();

        Rectangle rect = new Rectangle(25, 25, 50, 50);
        rect.setFill(Color.CADETBLUE);

        Line line = new Line(90, 40, 230, 40);
        line.setStroke(Color.BLACK);

        Circle circle = new Circle(130, 130, 30);
        circle.setFill(Color.CHOCOLATE);

        root.getChildren().addAll(rect, line, circle);

        Scene scene = new Scene(root, 250, 220, Color.WHITESMOKE);

        stage.setTitle("Absolute layout");
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37930153" questionTitle="How to change ListView cell's text color in JavaFX using css">
<Answer><![CDATA[public  ArrayList<Employee> search(String unit, String name) {
    ArrayList<Employee> temp= new ArrayList<>();
    String sql="SELECT * FROM employees WHERE unit like ? AND name=?";

    try (PreparedStatement pStmnt = conn.prepareStatement(sql)) {

        if("all units".equals(unit))
            pStmnt.setString(1, "%");
        else
            pStmnt.setString(1, unit);

        pStmnt.setString(2, name);
        ResultSet rs=pStmnt.executeQuery();
        while(rs.next())
        {
            temp.add(new Employee(rs.getString("name"), rs.getInt("active")==1);
        }
    } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    temp.sort(Comparator.comparing(Employee::getName));
    return temp;
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.*;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

public class ActivityListViewer extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        ListView<Activity> activityListView = new ListView<>(
                FXCollections.observableArrayList(
                        new Activity("Fetch super suit from drycleaner", false),
                        new Activity("Interview governor with Jimmy", false),
                        new Activity("Rescue stranded kitten", true),
                        new Activity("Dinner date with Lois", false)
                )
        );

        activityListView.setCellFactory(param -> new ListCell<Activity>() {
            static final String ACTIVE_CLASS = "active";
            @Override
            protected void updateItem(Activity item, boolean empty) {
                super.updateItem(item, empty);

                if (empty || item == null || item.getName() == null) {
                    setText(null);
                    getStyleClass().remove(ACTIVE_CLASS);
                } else {
                    if (item.isActive()) {
                        setText(item.getName() + " - active");
                    } else {
                        setText(item.getName());
                    }

                    if (item.isActive() && !getStyleClass().contains(ACTIVE_CLASS)) {
                        getStyleClass().add(ACTIVE_CLASS);
                    } else {
                        getStyleClass().remove(ACTIVE_CLASS);
                    }
                }
            }
        });

        activityListView.setPrefHeight(150);

        Scene scene = new Scene(activityListView);
        scene.getStylesheets().add(
                this.getClass().getResource("activity.css").toExternalForm()
        );

        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

class Activity {
    private final StringProperty nameProperty;
    private final BooleanProperty activeProperty;

    public Activity(String name, boolean active) {
        this.nameProperty = new SimpleStringProperty(name);
        this.activeProperty = new SimpleBooleanProperty(active);
    }

    public String getName() {
        return nameProperty.get();
    }

    public StringProperty nameProperty() {
        return nameProperty;
    }

    public boolean isActive() {
        return activeProperty.getValue() != null
                ? activeProperty.getValue()
                : false;
    }

    public BooleanProperty activeProperty() {
        return activeProperty;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37831534" questionTitle="Find out global jndi name from within bean">
<Answer><![CDATA[import javax.annotation.PostConstruct;
import javax.ejb.Singleton;
import javax.ejb.Startup;

import org.apache.log4j.Logger;

@Singleton
@Startup
public class MyBean {

    @Resource(lookup = "java:app/AppName")
    String appName;

    private static final Logger log = Logger.getLogger(MyBean.class);

    @PostConstruct
    private void postConstruct() {
        log.info("MyBean available for application " + appName);
        // and log further application specific info
    }

}]]></Answer>
<Answer><![CDATA[import java.net.URL;
import java.util.*;
import javax.ejb.Stateless;
import javax.naming.*;
import net.sf.extcos.ComponentQuery;
import net.sf.extcos.ComponentScanner;

public class ServiceLocator {

public <T extends Object> T lookup(Class<T> interfaceLocal) {
    try {
        return (T) getInitialContext().lookup(buildJNDIWildfly(interfaceLocal));
    } catch (NamingException e) {
        throw new RuntimeException(e);
    }
}

public <T> String buildJNDIWildfly(final Class<T> interfaceLocal) {
    Class<? extends T> clazz = getImplementorOf(interfaceLocal, getPackagesToScan());
    if (clazz != null) {
        URL url = getUrlOfClass(clazz);
        String module = getModuleName(url);
        return "global/" + module + "/" + clazz.getSimpleName() + "!" + interfaceLocal.getName();
    }
    return null;
}

public String[] getPackagesToScan() {
    // important to reduce range of search
    return new String[] { "my.package.of.ejbs" };
}

public static URL getUrlOfClass(Class<?> clazz) {
    if (clazz == null) {
        throw new NullPointerException();
    }
    String resourceName = clazz.getName().replace('.', '/') + ".class";
    ClassLoader classLoader = clazz.getClassLoader();
    if (classLoader == null) {
        classLoader = ClassLoader.getSystemClassLoader();
    }
    return classLoader.getResource(resourceName);
}

public <T> Class<? extends T> getImplementorOf(final Class<T> interfaceLocal, final String... packagesToScan) {
    // https://sourceforge.net/projects/extcos
    final Set<Class<?>> classes = new HashSet<Class<?>>();
    ComponentScanner scanner = new ComponentScanner();
    scanner.getClasses(new ComponentQuery() {
        @Override
        protected void query() {
            select().from(packagesToScan).andStore(
                    thoseBeing(and(annotatedWith(Stateless.class), implementorOf(interfaceLocal))).into(classes))
                    .returning(none());
        }
    });
    if (classes.size() > 0) {
        return (Class<? extends T>) classes.iterator().next();
    } else {
        return null;
    }
}

private String getModuleName(URL urlOfClass) {
    if (urlOfClass != null) {
        // Ex:
        // vfs:/opt/jboss-eap-6.4/standalone/deployments/myEar.ear/my-module.jar/my/interface/local/MyInterface.class
        String filePath = urlOfClass.getFile();
        int earPosition = filePath.lastIndexOf(".ear");
        int jarPosition = filePath.lastIndexOf(".jar");
        String earName = null;
        String moduleName = null;
        if (earPosition >= 0) {
            earName = filePath.substring(filePath.lastIndexOf('/', earPosition) + 1, earPosition);
        }
        if (jarPosition >= 0) {
            moduleName = filePath.substring(filePath.lastIndexOf('/', jarPosition) + 1, jarPosition);
            if (earName != null) {
                moduleName = earName + "/" + moduleName;
            }
        }
        return moduleName;
    }

    return null;
}

private InitialContext getInitialContext() {
    try {

        Hashtable<String, String> props = new Hashtable<String, String>();
        props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
        return new InitialContext(props);
    } catch (NamingException e) {
        throw new RuntimeException(e);
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37810745" questionTitle="TableView and Spinner in JavaFX">
<Answer><![CDATA[public static class Item {

    private final IntegerProperty itemCount = new SimpleIntegerProperty();
    private final IntegerProperty itemMaxCount = new SimpleIntegerProperty();

    @Override
    public String toString() {
        return Integer.toString(getItemCount());
    }

    public Item(int disp, int max) {
        this.itemCount.setValue(disp);
        this.itemMaxCount.setValue(max);
    }

    public final int getItemCount() {
        return this.itemCount.get();
    }

    public final void setItemCount(int value) {
        this.itemCount.set(value);
    }

    public final IntegerProperty itemCountProperty() {
        return this.itemCount;
    }

    public final int getItemMaxCount() {
        return this.itemMaxCount.get();
    }

    public final void setItemMaxCount(int value) {
        this.itemMaxCount.set(value);
    }

    public final IntegerProperty itemMaxCountProperty() {
        return this.itemMaxCount;
    }

}

@Override
public void start(Stage primaryStage) {
    TableView<Item> tv = new TableView<>(FXCollections.observableArrayList(
            new Item(1, 10),
            new Item(0, 9),
            new Item(1, 8),
            new Item(0, 7),
            new Item(1, 42),
            new Item(0, 4),
            new Item(1, 2),
            new Item(0, 99),
            new Item(1, 77),
            new Item(0, 44),
            new Item(1, 11),
            new Item(0, 2),
            new Item(1, 2),
            new Item(0, 3),
            new Item(1, 5),
            new Item(0, 6)
    ));

    TableColumn<Item, Item> countColumn = new TableColumn<>("count");
    countColumn.setCellValueFactory(cd -> Bindings.createObjectBinding(() -> cd.getValue()));

    countColumn.setCellFactory(new Callback<TableColumn<Item, Item>, TableCell<Item, Item>>() {
        @Override
        public TableCell<Item, Item> call(TableColumn<Item, Item> param) {
            TableCell<Item, Item> cell = new TableCell<Item, Item>() {

                private final Spinner<Integer> count;

                private final SpinnerValueFactory.IntegerSpinnerValueFactory valueFactory;
                private final ChangeListener<Number> valueChangeListener;

                {
                    valueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 0);
                    count = new Spinner<>(valueFactory);
                    count.setVisible(false);
                    setGraphic(count);
                    valueChangeListener = (ObservableValue<? extends Number> observable, Number oldValue, Number newValue) -> {
                        valueFactory.setValue(newValue.intValue());
                    };
                    count.valueProperty().addListener((obs, oldValue, newValue) -> {
                        if (getItem() != null) {
                            // write new value to table item
                            getItem().setItemCount(newValue);
                        }
                    });
                }

                @Override
                public void updateItem(Item item, boolean empty) {

                    // unbind old values
                    valueFactory.maxProperty().unbind();
                    if (getItem() != null) {
                        getItem().itemCountProperty().removeListener(valueChangeListener);
                    }

                    super.updateItem(item, empty);

                    // update according to new item
                    if (empty || item == null) {
                        count.setVisible(false);
                    } else {
                        valueFactory.maxProperty().bind(item.itemMaxCountProperty());
                        valueFactory.setValue(item.getItemCount());
                        item.itemCountProperty().addListener(valueChangeListener);
                        count.setVisible(true);
                    }

                }
            };

            return cell;
        }
    });

    tv.getColumns().add(countColumn);

    Button btn = new Button("Print");
    btn.setOnAction((ActionEvent event) -> {
        System.out.println(tv.getItems());
    });

    StackPane root = new StackPane();
    root.getChildren().add(btn);

    Scene scene = new Scene(new VBox(10, tv, btn));

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[TableColumn<Strumento, Spinner> SpinnerCol = new TableColumn<Strumento, Spinner>("Quantity");

        SpinnerCol.setMinWidth(500);
        SpinnerCol.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Strumento, Spinner>, ObservableValue<Spinner>>() {

            @Override
            public ObservableValue<Spinner> call(
                    TableColumn.CellDataFeatures<Strumento, Spinner> arg0) {
                Strumento strumentoObject = arg0.getValue();

                Spinner<Integer> quantita = new Spinner<Integer>(0, 10, 1);
                quantita.valueProperty().addListener(
                        (obs, oldValue, newValue) -> {
                            System.out.println("New value: " + newValue);

                             strumentoObject.setSpinnerValue(newValue);



                        }
                );

                return new SimpleObjectProperty<Spinner>(quantita);

            }

        });
        table.getColumns().add(SpinnerCol);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37798019" questionTitle="javafx TableView with dynamic ContextMenu on rows">
<Answer><![CDATA[class FileManager {


    private GuiController gCtrl;

    protected Menu playToSub = new Menu("Play to...");
    Map<String, MenuItem> playToItems = new HashMap<String, MenuItem>();

    public FileManager(GuiController guiController) {

        gCtrl = guiController;

        gCtrl.fileName.setCellValueFactory(new PropertyValueFactory<FileTableItem, String>("Name"));
        gCtrl.fileType.setCellValueFactory(new PropertyValueFactory<FileTableItem, String>("Type"));
        gCtrl.fileSize.setCellValueFactory(new PropertyValueFactory<FileTableItem, String>("Size"));
        gCtrl.fileTime.setCellValueFactory(new PropertyValueFactory<FileTableItem, String>("modifiedTime"));

        gCtrl.filesTable.setRowFactory(tv -> {
            TableRow<FileTableItem> row = new TableRow<>();
            row.emptyProperty().addListener((obs, wasEmpty, isEmpty) -> {
                if (!isEmpty) {
                    FileTableItem file = row.getItem();
                    ContextMenu contextMenu = new ContextMenu();

                    if (file.isPlayable()) {
                        row.setOnMouseClicked(event -> {
                            if (event.getClickCount() == 2) {
                                gCtrl.mainApp.playFile = file.getName();
                                gCtrl.playMedia(file.getAbsolutePath());
                            }
                        });

                        MenuItem playMenuItem = new MenuItem("Play");
                        playMenuItem.setOnAction(event -> {
                            gCtrl.mainApp.playFile = file.getName();
                            gCtrl.playMedia(file.getAbsolutePath());
                        });
                        contextMenu.getItems().add(playMenuItem);
                    }

                    if (file.canWrite()) {
                        MenuItem deleteMenuItem = new MenuItem("Delete");
                        deleteMenuItem.setOnAction(event -> {
                            row.getItem().delete();
                        });
                        contextMenu.getItems().add(deleteMenuItem);
                    }
                    row.setContextMenu(contextMenu);
                }
            });
            row.setOnContextMenuRequested((event) -> {

                /// Here, just before showing the context menu we can decide what to show in it
                /// In this particular case it's OK, but it may be time expensive in general
                if(! row.isEmpty()) {
                    if(gCtrl.mainApp.playDevices.size() > 0) {
                        if(! row.getContextMenu().getItems().contains(playToSub)) {
                            row.getContextMenu().getItems().add(1, playToSub);
                        }
                    }
                    else {
                        if(row.getContextMenu().getItems().contains(playToSub)) {
                            row.getContextMenu().getItems().remove(playToSub);
                        }
                    }
                }
            });
            return row;
        });
        gCtrl.filesTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
    }

    /// addPlayToMenuItem and removePlayToMenuItem are run from Gui Controller
    /// which in turn is notified by events in UPNP module
    /// The playTo sub menu items are managed here
    public void addPlayToMenuItem(String uuid, String name, URL iconUrl) {
        MenuItem playToItem = new PlayToMenuItem(uuid, name, iconUrl);
        playToItems.put(uuid, playToItem);
        playToSub.getItems().add(playToItem);
    }

    public void removePlayToMenuItem(String uuid) {
        if(playToItems.containsKey(uuid)) {
            playToSub.getItems().remove(playToItems.get(uuid));
            playToItems.remove(uuid);
        }
    }

    public class PlayToMenuItem extends MenuItem {
        PlayToMenuItem(String uuid, String name, URL iconUrl) {
            super();
            if (iconUrl != null) {
                Image icon = new Image(iconUrl.toString());
                ImageView imgView = new ImageView(icon);
                imgView.setFitWidth(12);
                imgView.setPreserveRatio(true);
                imgView.setSmooth(true);
                imgView.setCache(true);
                setGraphic(imgView);
            }
            setText(name);
            setOnAction(event -> {
                gCtrl.mainApp.playFile =    gCtrl.filesTable.getSelectionModel().getSelectedItem().getName();
                gCtrl.mainApp.startRemotePlay(uuid);
            });
        }
    }

    /// Other class methods and members

}]]></Answer>
<Answer><![CDATA[import javafx.animation.PauseTransition;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.util.Duration;

public class DynamicContextMenuInTable extends Application {

    private int deviceCount = 0 ;

    private void addDeviceToItem(Item item) {
        Device newDevice = new Device("Device "+(++deviceCount));
        item.getDevices().add(newDevice);
    }

    private void removeDeviceFromItem(Item item) {
        if (! item.getDevices().isEmpty()) {
            item.getDevices().remove(item.getDevices().size() - 1);
        }
    }

    @Override
    public void start(Stage primaryStage) {
        TableView<Item> table = new TableView<>();
        TableColumn<Item, String> itemCol = new TableColumn<>("Item");
        itemCol.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getName()));
        table.getColumns().add(itemCol);

        table.setRowFactory(tv -> {
            TableRow<Item> row = new TableRow<>();
            ContextMenu menu = new ContextMenu();

            MenuItem delete = new MenuItem("Delete");
            delete.setOnAction(e -> table.getItems().remove(row.getItem()));

            menu.getItems().add(delete);

            ListChangeListener<Device> deviceListListener = c -> 
                updateContextMenu(row.getItem(), menu);

            row.itemProperty().addListener((obs, oldItem, newItem) -> {
                if (oldItem != null) {
                    oldItem.getDevices().removeListener(deviceListListener);
                }
                if (newItem != null) {
                    newItem.getDevices().addListener(deviceListListener);
                    updateContextMenu(row.getItem(), menu);
                }
            });

            row.emptyProperty().addListener((obs, wasEmpty, isNowEmpty) -> 
                row.setContextMenu(isNowEmpty ? null : menu));

            return row ;
        });

        CheckBox delay = new CheckBox("Delay");

        Button addDeviceButton = new Button("Add device");
        addDeviceButton.disableProperty().bind(table.getSelectionModel().selectedItemProperty().isNull());
        addDeviceButton.setOnAction(e -> {
            Item selectedItem = table.getSelectionModel().getSelectedItem();
            if (delay.isSelected()) {
                PauseTransition pause = new PauseTransition(Duration.seconds(2));
                pause.setOnFinished(evt -> {
                    addDeviceToItem(selectedItem);
                });
                pause.play();
            } else {
                addDeviceToItem(selectedItem);
            }
        });

        Button removeDeviceButton = new Button("Remove device");
        removeDeviceButton.disableProperty().bind(table.getSelectionModel().selectedItemProperty().isNull());
        removeDeviceButton.setOnAction(e -> {
            Item selectedItem = table.getSelectionModel().getSelectedItem() ;
            if (delay.isSelected()) {
                PauseTransition pause = new PauseTransition(Duration.seconds(2));
                pause.setOnFinished(evt -> removeDeviceFromItem(selectedItem));
                pause.play();
            } else {
                removeDeviceFromItem(selectedItem);
            }
        });

        HBox buttons = new HBox(5, addDeviceButton, removeDeviceButton, delay);
        BorderPane.setMargin(buttons, new Insets(5));
        BorderPane root = new BorderPane(table, buttons, null, null, null);

        for (int i = 1 ; i <= 20; i++) {
            table.getItems().add(new Item("Item "+i));
        }

        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void updateContextMenu(Item item, ContextMenu menu) {
        if (menu.getItems().size() > 1) {
            menu.getItems().subList(1, menu.getItems().size()).clear();
        }
        for (Device device : item.getDevices()) {
            MenuItem menuItem = new MenuItem("Play on "+device.getName());
            menuItem.setOnAction(e -> System.out.println("Play "+item.getName()+" on "+device.getName()));
            menu.getItems().add(menuItem);
        }
    }

    public static class Device {
        private final String name ;

        public Device(String name) {
            this.name = name ;
        }

        public String getName() {
            return name ;
        }

        @Override
        public String toString() {
            return getName();
        }
    }

    public static class Item {
        private final ObservableList<Device> devices = FXCollections.observableArrayList() ;

        private final String name ;

        public Item(String name) {
            this.name = name ;
        }

        public ObservableList<Device> getDevices() {
            return devices ;
        }

        public String getName() {
            return name ;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37791163" questionTitle="JavaFX PrintAPI wrong PaperSource">
<Answer><![CDATA[private void printImage(Node node) {
    PrinterJob job = PrinterJob.createPrinterJob();
    if (job != null) {
        JobSettings js = job.getJobSettings();
        PaperSource papersource = js.getPaperSource();
        System.out.println("PaperSource=" + papersource);
        PrinterAttributes pa = printer.getPrinterAttributes();
        Set<PaperSource> s = pa.getSupportedPaperSources();
        System.out.println("# of papersources=" + s.size());
        if (s != null) {
            for (PaperSource newPaperSource : s) {
                System.out.println("newpapersource= " + newPaperSource);

                //Here is where you would put the tray name that is appropriate
                //in the contains section
                if(newPaperSource.toString().contains("Tray 2"))
                    js.setPaperSource(newPaperSource);
            }
        }
        job.getJobSettings().setJobName("Whatever You want");
        ObjectProperty<PaperSource> sources = job.getJobSettings().paperSourceProperty();
        System.out.println(sources.toString());
        boolean success = job.printPage(node);
        if (success) {
            System.out.println("PRINTING FINISHED");
            job.endJob();
            //Stage mainStage = (Stage) root.getScene().getWindow();
            //mainStage.close();
        }
    }
}]]></Answer>
<Answer><![CDATA[/**
 * Prints the current page displayed within the internal browser, not necessarily the {@link #presentationProperty()}.
 * If no printers are installed on the system, an awareness is displayed.
 */
public final void print() {
    final PrinterJob job = PrinterJob.createPrinterJob();

    if (job != null) {
        if (job.showPrintDialog(null)) {
            if(this.getPresentation().getArchive() != null) {
                final String extension = ".".concat(this.getPresentation().getArchiveExtension());
                final int indexOfExtension = this.getPresentation().getArchive().getName().indexOf(extension);
                final String jobName = this.getPresentation().getArchive().getName().substring(0, indexOfExtension);
                job.getJobSettings().setJobName(jobName);
            }

            job.getJobSettings().setPrintQuality(PrintQuality.HIGH);
            job.getJobSettings().setPageLayout(job.getPrinter().createPageLayout(Paper.A4, PageOrientation.LANDSCAPE, 0, 0, 0, 0));

            this.internalBrowser.getEngine().print(job);
            job.endJob();
        } else {
            job.cancelJob();
        }
    } else {
        DialogHelper.showError("No printer", "There is no printer installed on your system.");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37768326" questionTitle="Group by function in JavaFX table">
<Answer><![CDATA[import java.util.Collections;
import java.util.Comparator;
import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.property.SimpleObjectProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class GroupByTable extends Application {

    public enum Color { GREEN, BLUE, RED }
    public enum Shape { RECTANGLE, CIRCLE, TRIANGLE }
    public enum Size { SMALL, MEDIUM, LARGE }


    private Label groupByLabel;
    private Comparator<Item> groupingComparator ;


    @Override
    public void start(Stage primaryStage) {
        TableView<Item> table = new TableView<>();

        table.getColumns().add(column("Size", Item::getSize));
        table.getColumns().add(column("Color", Item::getColor));
        table.getColumns().add(column("Shape", Item::getShape));

        groupByLabel = new Label("Grouping");

        groupByLabel.setOnDragOver(e -> {
            if (groupingComparator != null && "grouping".equals(e.getDragboard().getString())) {
                e.acceptTransferModes(TransferMode.COPY);
            }
        });

        groupByLabel.setOnDragDropped(e -> {
            if (groupingComparator != null && "grouping".equals(e.getDragboard().getString())) {
                table.getItems().sort(groupingComparator);
                e.setDropCompleted(true);
            }
        });

        for (Color color : Color.values()) {
            for (Size size : Size.values()) {
                for (Shape shape : Shape.values()) {
                    table.getItems().add(new Item(color, shape, size));
                }
            }
        }

        Collections.shuffle(table.getItems());

        BorderPane root = new BorderPane(table);
        BorderPane.setAlignment(groupByLabel, Pos.CENTER);
        BorderPane.setMargin(groupByLabel, new Insets(20));

        root.setTop(groupByLabel);

        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private <T extends Comparable<T>> TableColumn<Item,T> column(String title, Function<Item,T> property) {
        TableColumn<Item,T> col = new TableColumn<>();
        col.setCellValueFactory(cellData -> new SimpleObjectProperty<>(property.apply(cellData.getValue())));

        Label graphic = new Label(title);
        graphic.setOnDragDetected(e -> {
            groupingComparator = Comparator.comparing(property);
            Dragboard dragboard = graphic.startDragAndDrop(TransferMode.COPY);
            ClipboardContent cc = new ClipboardContent();
            cc.putString("grouping");
            dragboard.setContent(cc);
        });
        graphic.setOnDragDone(e -> {
            groupingComparator = null ;
        });

        col.setGraphic(graphic);

        return col ;
    }

    public static class Item {
        private final Color color ;
        private final Shape shape ;
        private final Size size ;
        public Item(Color color, Shape shape, Size size) {
            super();
            this.color = color;
            this.shape = shape;
            this.size = size;
        }
        public Color getColor() {
            return color;
        }
        public Shape getShape() {
            return shape;
        }
        public Size getSize() {
            return size;
        }

        @Override
        public String toString() {
            return String.format("%s %s %s", size, color, shape);
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    List<Employee> employees = Arrays.<Employee>asList(
            new Employee("Ethan Williams", "ethan.williams@example.com", "A"),
            new Employee("Emma Jones", "emma.jones@example.com", "B"),
            new Employee("Michael Brown", "michael.brown@example.com", "A"),
            new Employee("Anna Black", "anna.black@example.com", "C"),
            new Employee("Rodger York", "roger.york@example.com", "B"),
            new Employee("Susan Collins", "susan.collins@example.com", "A"));

    final TreeItem<Employee> root =
            new TreeItem<>(new Employee("Sales Department", "", ""), null);

    Label dropLabel;

    BreadCrumbBar breadcrum;

    private Comparator<Employee> groupingComparator;

    private ArrayList<String> comperatorList = new ArrayList<>();

    Map<String, Function<Employee, Comparable>> gettersMap = new HashMap<>();

    private TreeTableView<Employee> treeTableView;

    @Override
    public void start(Stage stage) throws Exception{


        stage.setTitle("Tree Table View Sample");
        final Scene scene = new Scene(new Group(), 400, 400);
        scene.setFill(Color.LIGHTGRAY);
        Group sceneRoot = (Group) scene.getRoot();


        root.setExpanded(true);
        employees.stream().forEach((employee) -> {
            root.getChildren().add(new TreeItem<>(employee));
        });

        gettersMap.put("Employee", Employee::getName);
        gettersMap.put("Email", Employee::getEmail);
        gettersMap.put("Test", Employee::getTest);

        TreeTableColumn<Employee, String> empColumn = column("Employee", Employee::getName);
        empColumn.setPrefWidth(150);
        empColumn.setCellValueFactory(
                (TreeTableColumn.CellDataFeatures<Employee, String> param) ->
                        new ReadOnlyStringWrapper(param.getValue().getValue().getName())
        );

        TreeTableColumn<Employee, String> emailColumn = column("Email", Employee::getEmail);
        emailColumn.setPrefWidth(190);
        emailColumn.setCellValueFactory(
                (TreeTableColumn.CellDataFeatures<Employee, String> param) ->
                        new ReadOnlyStringWrapper(param.getValue().getValue().getEmail())
        );

        TreeTableColumn<Employee, String> testColumn = column("Test", Employee::getTest);
        testColumn.setPrefWidth(190);
        testColumn.setCellValueFactory(
                (TreeTableColumn.CellDataFeatures<Employee, String> param) ->
                        new ReadOnlyStringWrapper(param.getValue().getValue().getTest())
        );

        treeTableView = new TreeTableView<Employee>(root);
        treeTableView.getColumns().setAll(empColumn, emailColumn, testColumn);

        breadcrum = new BreadCrumbBar<>();

        breadcrum.setOnCrumbAction(new EventHandler<BreadCrumbBar.BreadCrumbActionEvent<String>>() {
            @Override
            public void handle(BreadCrumbBar.BreadCrumbActionEvent<String> event) {
            }
        });

        dropLabel = new Label("Use the shift key when you select a column to group");

        dropLabel.setOnDragOver(e -> {
            if (groupingComparator != null && "Group".equals(e.getDragboard().getString())) {
                e.acceptTransferModes(TransferMode.COPY);
            }
        });

        dropLabel.setOnDragDropped(e -> {
            if (groupingComparator != null && "Group".equals(e.getDragboard().getString())) {

                comperatorList.add(((Label) e.getGestureSource()).getText());

                String selectedColumn = ((Label)e.getGestureSource()).getText();

                if(breadcrum.selectedCrumbProperty().get() == null) {

                    TreeItem<String> root = new TreeItem<String>(selectedColumn);

                    breadcrum.selectedCrumbProperty().set(root);
                }
                else
                {
                    TreeItem<String> root = (TreeItem<String>) breadcrum.selectedCrumbProperty().get();

                    TreeItem<String> child = new TreeItem<String>(selectedColumn);
                    root.getChildren().add(child);

                    breadcrum.selectedCrumbProperty().set(child);
                }

                try {

                    String comperatorString = "";

                    for (String temp : comperatorList)
                    {
                        comperatorString += temp + ";";
                    }

                    comperatorString = comperatorString.substring(0, comperatorString.length()-1);

                    Comparator<Employee> comparator = getComparator(comperatorString);

                    ArrayList<Employee> allItems = new ArrayList<Employee>();
                    getChildren(root, allItems);

                    Collections.sort(allItems, comparator);

                    ArrayList<String> compareValues = new ArrayList<String>();

                    ArrayList<TreeItem<Employee>> parents = new ArrayList<TreeItem<Employee>>();
                    parents.add(0, this.root);

                    this.root.getChildren().removeAll(this.root.getChildren());

                    for(Employee item: allItems)
                    {
                        for(int i =0; i < comperatorList.size(); i++)
                        {
                           Method getMethod = item.getClass().getMethod("get" + this.comperatorList.get(i), null);

                            String result = (String) getMethod.invoke(item);

                            if((compareValues.size() <= i  || !result.equals(compareValues.get(i))))
                            {
                                TreeItem<Employee> newItem = new TreeItem<Employee>(new Employee());
                                newItem.setExpanded(true);

                                parents.add(i+1, newItem);

                                parents.get(i).getChildren().add(newItem);

                                compareValues.add(i, result);
                            }

                            //Add leafs to tree
                            if(i == comperatorList.size() -1 || (i == 0 && comperatorList.size() == 0))
                            {
                                parents.get(i+1).getChildren().add(new TreeItem<Employee>(item));
                            }


                        }
                    }

                    treeTableView.setRoot(root);

                }
                catch (Exception ex)
                {
                    System.out.print(ex.getStackTrace());
                }

                e.setDropCompleted(true);

            }
        });
        VBox boxRoot = new VBox();

        boxRoot.getChildren().add(dropLabel);
        boxRoot.getChildren().add(breadcrum);
        boxRoot.getChildren().add(treeTableView);

        treeTableView.setShowRoot(false);
        treeTableView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        treeTableView.getSelectionModel().setCellSelectionEnabled(true);

        sceneRoot.getChildren().add(boxRoot);
        stage.setScene(scene);
        stage.show();
    }


    public ArrayList<Employee> getChildren(TreeItem<Employee> root, ArrayList<Employee> allItems)
    {
        for(TreeItem<Employee> employeeItem :root.getChildren())
        {
            if(employeeItem.isLeaf())
            {
                allItems.add(employeeItem.getValue());
            }
            else
            {
                getChildren(employeeItem, allItems);
            }

        }

        return allItems;
    }

    public Comparator<Employee> getComparator(String order){
        String[] keys = order.split(";");
        Comparator<Employee> result = Comparator.comparing(gettersMap.get(keys[0]));
        for (int i = 1; i<keys.length; i++){
            result = result.thenComparing(gettersMap.get(keys[i]));
        }
        return result;
    }

    private <T extends Comparable<T>> TreeTableColumn<Employee,T> column(String title, Function<Employee,T> property) {
        TreeTableColumn<Employee,T> col = new TreeTableColumn<>();
        //col.setCellValueFactory(cellData -> new SimpleObjectProperty<>(property.apply(cellData.getValue())));

        Label graphic = new Label(title);
        graphic.setOnDragDetected(e -> {
            groupingComparator = Comparator.comparing(property);
            Dragboard dragboard = graphic.startDragAndDrop(TransferMode.COPY);
            ClipboardContent cc = new ClipboardContent();
            cc.putString("Group");
            dragboard.setContent(cc);
        });
        graphic.setOnDragDone(e -> {
            groupingComparator = null ;
        });

        col.setGraphic(graphic);

        return col ;
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37726573" questionTitle="How to set multiple buttons and add them to a gridPane">
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            GridPane root = new GridPane();
            Scene scene = new Scene(root, 400, 400);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());

            Button b = new Button();
            b.setOnAction(new EventHandler<ActionEvent>() {

                @Override
                public void handle(ActionEvent event) {
                }
            });

            GridHelper.addToGrid(root, new Button("0"), 2, 5);
            GridHelper.addToGrid(root, new Button("1"), 2, 2);
            GridHelper.addToGrid(root, new Button("2"), 3, 2);
            GridHelper.addToGrid(root, new Button("3"), 4, 2);
            GridHelper.addToGrid(root, new Button("4"), 2, 3);
            GridHelper.addToGrid(root, new Button("5"), 3, 3);
            GridHelper.addToGrid(root, new Button("6"), 4, 3);
            GridHelper.addToGrid(root, new Button("7"), 2, 4);
            GridHelper.addToGrid(root, new Button("8"), 3, 4);
            GridHelper.addToGrid(root, new Button("9"), 4, 4);

            GridHelper.addToGrid(root, new Button("C"), 3, 5, e -> System.out.println("C"));
            GridHelper.addToGrid(root, new Button("+"), 5, 2, e -> System.out.println("+"));
            GridHelper.addToGrid(root, new Button("-"), 5, 3);
            GridHelper.addToGrid(root, new Button("*"), 5, 4);
            GridHelper.addToGrid(root, new Button("/"), 5, 5);
            GridHelper.addToGrid(root, new Button("="), 4, 5);

            root.setPadding(new Insets(5, 5, 5, 5));

            primaryStage.setScene(scene);
            primaryStage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class GridHelper {

        static void addToGrid(GridPane grid, Node c, int col, int r) {
            grid.add(c, col, r);
        }

        static void addToGrid(GridPane grid, Node c, int col, int r, EventHandler<ActionEvent> event) {
            grid.add(c, col, r);
            addButtonEvent(c, event);
        }

        static void addToGrid(GridPane grid, Node c, int col, int r, int cs, int rs) {
            grid.add(c, col, r, cs, rs);
        }

        static void addToGrid(GridPane grid, Node c, int col, int r, int cs, int rs, EventHandler<ActionEvent> event) {
            grid.add(c, col, r, cs, rs);
            addButtonEvent(c, event);
        }

        static void addButtonEvent(Node button, EventHandler<ActionEvent> event) {
            if (button instanceof Button)
                ((Button) button).setOnAction(event);
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class MainController implements Initializable {

    int z1=0,y2=0,x=0; 

    @FXML
    GridPane gp;

    public void initialize(URL arg0, ResourceBundle arg1) {
        // TODO Auto-generated method stub
        while(z1<4){    //add 4 buttons
            addButton();
            z1++;
        }   
    }   

    private void addButton() {
        // TODO Auto-generated method stub
        final Button temp1=new Button("Button "+ y2);
        final int numberButton=y2;
        temp1.setId(""+y2);
        temp1.setText("whatever u want!!");
        temp1.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                // TODO Auto-generated method stub
                System.out.println("id("+temp1.getId()+")="+numberButton);
            }
        });
        gp.add(temp1, x, 0);  //x is column index and 0 is row index
        x++;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37660783" questionTitle="JavaFx TableView - saving edits on focus lost doesn't work if focus is given to same column">
<Answer><![CDATA[public class EditingCell<S,T> extends TableCell<S,T> {

    private final BiConsumer<S,T> updater ;

    public EditingCell(BiConsumer<S,T> updater) {
        this.updater = updater ;
    }

    // ....

    // not really sure what this method is for:
    public void commit(T val) {
        S rowValue = getTableView().getItems().get(getIndex());
        updater.accept(rowValue, val);
    }

    // wouldn't this be better?
    @Override
    public void commitEdit(T newValue) {
        super.commitEdit(newValue);
        S rowValue = getTableView().getItems().get(getIndex());
        updater.accept(rowValue, val);
    }

    // ...
}]]></Answer>
<Answer><![CDATA[public void commit(Object val) {

        // Get the table
        TableView<S> t = this.getTableView();

        // Get the selected row/column
        S selectedRow = t.getItems().get(this.getTableRow().getIndex());
        TableColumn<S, ?> selectedColumn = t.getColumns().get(t.getColumns().indexOf(this.getTableColumn()));

        // Get current property name
        String propertyName = ((PropertyValueFactory) selectedColumn.getCellValueFactory()).getProperty();

        // Create a method name conforming to java standards ( setProperty )
        propertyName = ("" + propertyName.charAt(0)).toUpperCase() + propertyName.substring(1);

        // Try to run the update
        try {

            // Type specific checks - could be done inside each setProperty() method
            if(val instanceof Double) {
                Method method = selectedRow.getClass().getMethod("set" + propertyName, double.class);
                method.invoke(selectedRow, (double) val);
            }
            if(val instanceof String) {
                Method method = selectedRow.getClass().getMethod("set" + propertyName, String.class);
                method.invoke(selectedRow, (String) val);
            }
            if(val instanceof Integer) {
                Method method = selectedRow.getClass().getMethod("set" + propertyName, int.class);
                method.invoke(selectedRow, (int) val);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        // CommitEdit for good luck
        commitEdit((T) val);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37639902" questionTitle="JavaFX/ScalaFX &amp; Clipboard: Cannot copy files?">
<Answer><![CDATA[package myapp.clipboard

import java.awt.datatransfer._

case class FilesTransferable(files: Iterable[String]) extends Transferable {
  val clipboardString: String = "copy\n" + files.map(path => s"file://$path").mkString("\n")
  val dataFlavor = new DataFlavor("x-special/gnome-copied-files")
  def getTransferDataFlavors(): Array[DataFlavor] = {
    Seq(dataFlavor).toArray
  }
  def isDataFlavorSupported(flavor: DataFlavor): Boolean = {
    dataFlavor.equals(flavor)
  }
  @throws(classOf[UnsupportedFlavorException])
  @throws(classOf[java.io.IOException])
  def getTransferData(flavor: DataFlavor): Object = {
    if(flavor.getRepresentationClass() == classOf[java.io.InputStream]) {
      new java.io.ByteArrayInputStream(clipboardString.getBytes())
    } else {
      return null;
    }
  }
}]]></Answer>
<Answer><![CDATA[package hellodraganddrop;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.input.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.Stage;

/**
 * Demonstrates a drag-and-drop feature.
 */
public class HelloDragAndDrop extends Application {

    @Override public void start(Stage stage) {
        stage.setTitle("Hello Drag And Drop");

        Group root = new Group();
        Scene scene = new Scene(root, 400, 200);
        scene.setFill(Color.LIGHTGREEN);

        final Text source = new Text(50, 100, "DRAG ME");
        source.setScaleX(2.0);
        source.setScaleY(2.0);

        final Text target = new Text(250, 100, "DROP HERE");
        target.setScaleX(2.0);
        target.setScaleY(2.0);

        source.setOnDragDetected(new EventHandler <MouseEvent>() {
            public void handle(MouseEvent event) {
                /* drag was detected, start drag-and-drop gesture*/
                System.out.println("onDragDetected");

                /* allow any transfer mode */
                Dragboard db = source.startDragAndDrop(TransferMode.ANY);

                /* put a string on dragboard */
                ClipboardContent content = new ClipboardContent();
                content.putString(source.getText());
                db.setContent(content);

                event.consume();
            }
        });

        target.setOnDragOver(new EventHandler <DragEvent>() {
            public void handle(DragEvent event) {
                /* data is dragged over the target */
                System.out.println("onDragOver");

                /* accept it only if it is  not dragged from the same node 
                 * and if it has a string data */
                if (event.getGestureSource() != target &&
                        event.getDragboard().hasString()) {
                    /* allow for both copying and moving, whatever user chooses */
                    event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
                }

                event.consume();
            }
        });

        target.setOnDragEntered(new EventHandler <DragEvent>() {
            public void handle(DragEvent event) {
                /* the drag-and-drop gesture entered the target */
                System.out.println("onDragEntered");
                /* show to the user that it is an actual gesture target */
                if (event.getGestureSource() != target &&
                        event.getDragboard().hasString()) {
                    target.setFill(Color.GREEN);
                }

                event.consume();
            }
        });

        target.setOnDragExited(new EventHandler <DragEvent>() {
            public void handle(DragEvent event) {
                /* mouse moved away, remove the graphical cues */
                target.setFill(Color.BLACK);

                event.consume();
            }
        });

        target.setOnDragDropped(new EventHandler <DragEvent>() {
            public void handle(DragEvent event) {
                /* data dropped */
                System.out.println("onDragDropped");
                /* if there is a string data on dragboard, read it and use it */
                Dragboard db = event.getDragboard();
                boolean success = false;
                if (db.hasString()) {
                    target.setText(db.getString());
                    success = true;
                }
                /* let the source know whether the string was successfully 
                 * transferred and used */
                event.setDropCompleted(success);

                event.consume();
            }
        });

        source.setOnDragDone(new EventHandler <DragEvent>() {
            public void handle(DragEvent event) {
                /* the drag-and-drop gesture ended */
                System.out.println("onDragDone");
                /* if the data was successfully moved, clear it */
                if (event.getTransferMode() == TransferMode.MOVE) {
                    source.setText("");
                }

                event.consume();
            }
        });

        root.getChildren().add(source);
        root.getChildren().add(target);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        Application.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37612141" questionTitle="Adding dynamic columns and rows data to TableView in java fxml">
<Answer><![CDATA[import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class FXMLDocumentController {

    @FXML
    private TableView<ObservableList<String>> tableView;
    String headers[] = null;
    String items[] = null;

    // Employee ee;
    List<String> columns = new ArrayList<String>();
    List<String> rows = new ArrayList<String>();
    ObservableList<ObservableList<String>> csvData = FXCollections.observableArrayList();

    @FXML
    private void initialize() {
        Insert();
    }

    public void Insert() {

        File f = new File(
                "C:\\Users\\admin\\Desktop\\Project\\shipforecast\\Data\\Recieve\\ShipId-1432530905282-1.csv");
        if (f.exists() && !f.isDirectory()) {

            try (
                FileReader fin = new FileReader(f);
                BufferedReader in = new BufferedReader(fin);
            ) {
                String l;
                int i = 0;

                while ((l = in.readLine()) != null) {

                    if (i < 1) {
                        headers = l.split(",");

                        for (String w : headers) {
                            columns.add(w);

                        }
                        for (int ii = 0; ii < columns.size(); ii++) {
                            final int finalIdx = ii;
                            TableColumn<ObservableList<String>, String> column = new TableColumn<>(columns.get(ii));

                            // column.setText("hghjghjg");
                            column.setCellValueFactory(
                                    param -> new ReadOnlyObjectWrapper<>(param.getValue().get(finalIdx)));

                            /*
                             * System.out.println(new
                             * ReadOnlyObjectWrapper<>(param.getValue().get(
                             * finalIdx)));
                             */

                            tableView.getColumns().add(column);
                        }

                        // tableView.getColumns().addAll(tableColumns);
                    } else {
                        ObservableList<String> row = FXCollections.observableArrayList();
                        row.clear();
                        items = l.split(",");
                        for (String item : items) {
                            System.out.println(item);
                            row.add(item);
                        }
                        csvData.add(row);
                    }
                    i++;

                }

                tableView.setItems(csvData);

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File Not Found");
        }

    }
}]]></Answer>
<Answer><![CDATA[public class FXMLDocumentController implements Initializable {

@FXML private TableView tableView;
 List<String> columns = new ArrayList<String>();

@Override
public void initialize(URL url, ResourceBundle rb) {
    // TODO
    try {

        CsvReader products = new CsvReader("C:\\Users\\admin\\Desktop\\Project\\shipforecast\\Data\\Recieve\\ShipId-1432530905282-1.csv");

        products.readHeaders();

                   String s[]=products.getHeaders();
                   //int count=0;

                   for(int i=0;i<s.length;i++)
                   {
                       columns.add(s[i]);
                   }
                   System.out.println(columns.size());
                   TableColumn [] tableColumns = new TableColumn[columns.size()];     
                  int columnIndex = 0;
                  for(int  k=0 ; k<columns.size(); k++) {
                  final int j = k;
                 TableColumn col = new TableColumn(columns.get(k));




    col.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                   
       public ObservableValue<String> call(TableColumn.CellDataFeatures<ObservableList, String> param) {                                                                                             
            return new SimpleStringProperty(param.getValue().get(j).toString());                       
        }                   
    });
    tableView.getColumns().addAll(col);
}
while (products.readRecord())
        {
                     ObservableList<String> row = FXCollections.observableArrayList();    
                    for(int x=0;x<s.length;x++)
                    {

                        int count=0;
                    //System.out.println(s[x]);
            String Valid = products.get(s[x]);
                            row.addAll(Valid);



        }

                    tableView.getItems().add(row);
                    }

}   catch (Exception ex) {    
       ex.printStackTrace();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37571577" questionTitle="javafx TableView how to edit a TextField on external TextArea control and return the result to the field properly">
<Answer><![CDATA[import java.util.function.Consumer;
import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.property.Property;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.Window;

public class ExternalEditingTable extends Application {

    private void showEditingWindow(Window owner, String currentValue, Consumer<String> commitHandler) {
        Stage stage = new Stage();
        stage.initOwner(owner);
        stage.initModality(Modality.APPLICATION_MODAL);

        TextArea textArea = new TextArea(currentValue);

        Button okButton = new Button("OK");
        okButton.setDefaultButton(true);
        okButton.setOnAction(e -> {
            commitHandler.accept(textArea.getText());
            stage.hide();
        });

        Button cancelButton = new Button("Cancel");
        cancelButton.setCancelButton(true);
        cancelButton.setOnAction(e -> stage.hide());

        HBox buttons = new HBox(5, okButton, cancelButton);
        buttons.setAlignment(Pos.CENTER);
        buttons.setPadding(new Insets(5));

        BorderPane root = new BorderPane(textArea, null, null, buttons, null);
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    @Override
    public void start(Stage primaryStage) {
        TableView<Item> table = new TableView<>();
        table.setEditable(true);

        TableColumn<Item, String> nameCol = column("Item", Item::nameProperty);

        // just use standard editing approach as data is "small":
        nameCol.setCellFactory(TextFieldTableCell.forTableColumn());

        TableColumn<Item, String> descriptionCol = column("Description", Item::descriptionProperty);

        // set up this column to show an editing window when double-clicked:
        descriptionCol.setCellFactory(tc -> {

            TableCell<Item, String> cell = new TableCell<Item, String>() {
                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    setText(empty ? null : item);
                }
            };

            cell.setOnMouseClicked(e -> {
                if (e.getClickCount() == 2 && ! cell.isEmpty()) {
                    showEditingWindow(table.getScene().getWindow(), cell.getItem(), newValue -> {
                        Item item = table.getItems().get(cell.getIndex());
                        item.setDescription(newValue);
                    });
                }
            });

            return cell ;
        });

        table.getColumns().add(nameCol);
        table.getColumns().add(descriptionCol);

        for (int i = 1 ; i <= 20 ; i++) {
            table.getItems().add(new Item("Item "+i, "This is a long and\nwordy description of item "+i));
        }

        Scene scene = new Scene(table, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private static <S,T> TableColumn<S,T> column(String title, Function<S, Property<T>> prop) {
        TableColumn<S,T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> prop.apply(cellData.getValue()));
        return col ;
    }

    public static class Item {
        private final StringProperty description = new SimpleStringProperty() ;
        private final StringProperty name = new SimpleStringProperty() ;

        public Item(String name, String description) {
            setName(name);
            setDescription(description);
        }

        public final StringProperty descriptionProperty() {
            return this.description;
        }


        public final String getDescription() {
            return this.descriptionProperty().get();
        }


        public final void setDescription(final String description) {
            this.descriptionProperty().set(description);
        }


        public final StringProperty nameProperty() {
            return this.name;
        }


        public final String getName() {
            return this.nameProperty().get();
        }


        public final void setName(final String name) {
            this.nameProperty().set(name);
        }



    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[TableView<StringProperty> tv = new TableView(FXCollections.observableArrayList(
        new SimpleStringProperty("ajds bnas röu bngöspui rgöin röeisnpnhn reishn reinnb ökb rhkbhkbn afeae"),
        new SimpleStringProperty("aap nja öaw njeaj nanja nja njja n"))
);

TableColumn<StringProperty, String> col = new TableColumn<>();

tv.getColumns().add(col);
tv.setEditable(true);

col.setCellValueFactory(cd -> cd.getValue());
col.setCellFactory(column -> new TableCell<StringProperty, String>() {

    private final Text text;

    private Stage editingStage;

    {
        text = new Text();
        text.wrappingWidthProperty().bind(column.widthProperty());
        setGraphic(text);
    }

    @Override
    public void cancelEdit() {
        super.cancelEdit();
        closeStage();
    }

    private void closeStage() {
        if (editingStage != null && editingStage.isShowing()) {
            editingStage.setOnHidden(null);
            editingStage.hide();
            editingStage = null;
        }
    }

    @Override
    public void commitEdit(String newValue) {
        super.commitEdit(newValue);
        closeStage();
    }

    @Override
    public void startEdit() {
        super.startEdit();

        // create editing ui
        Button cancel = new Button("Cancel");
        cancel.setCancelButton(true);
        cancel.setOnAction(evt -> cancelEdit());

        TextArea editor = new TextArea(getItem());

        Button commit = new Button("OK");
        commit.setOnAction(evt -> commitEdit(editor.getText()));

        VBox vbox = new VBox(10, editor, commit, cancel);

        // display editing window
        Scene scene = new Scene(vbox);
        editingStage = new Stage();
        editingStage.initModality(Modality.WINDOW_MODAL);
        editingStage.initOwner(getScene().getWindow());
        editingStage.setScene(scene);

        editingStage.setOnHidden(evt -> this.cancelEdit());
        editingStage.show();
    }

    @Override
    protected void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);

        cancelEdit();
        text.setText(item);
    }

});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37541279" questionTitle="JavaFX - centered Text in Scene">
<Answer><![CDATA[public class Main extends Application {

    @Override
    public void start(Stage primaryStage) {
        try {
            StackPane root = new StackPane();
            Text text2 = new Text("I will be aligned TOPLEFT");
            Text text = new Text(" Level 2 \n\n" + "Press ENTER to start a new game");
            text.setTextAlignment(TextAlignment.CENTER);
            root.getChildren().addAll(text2, text);
            StackPane.setAlignment(text2, Pos.TOP_LEFT);
            StackPane.setAlignment(text, Pos.CENTER);


            Scene scene = new Scene(root, 400, 400);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
/**
 * @see http://stackoverflow.com/a/37541777/230513
 */
public class Test extends Application {

    @Override
    public void start(Stage primaryStage) {
        Text waitingForKey = new Text("Level 2 \n\n" + "Press ENTER to start a new game");
        waitingForKey.setTextAlignment(TextAlignment.CENTER);
        waitingForKey.setFont(new Font(18));
        waitingForKey.setFill(Color.ALICEBLUE);
        StackPane root = new StackPane();
        root.getChildren().add(waitingForKey);
        Scene scene = new Scene(root, 320, 240, Color.BLACK);
        primaryStage.setTitle("Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37538617" questionTitle="JAVAFX TableView CELL should display text in multiline in single cell with multi color. possible?">
<Answer><![CDATA[column.setCellFactory(tv -> new TableCell<MyItemType, String>() {

    private final VBox lines;

    {
        lines = new VBox();
        lines.getStyleClass().add("address");
        setGraphic(lines);
    }

    @Override
    protected void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);

        lines.getChildren().clear();

        if (!empty && item != null) {
            int lineNo = 1;
            for (String line : item.split("\n")) {
                Text text = new Text(line);
                text.getStyleClass().add("line-" + (lineNo++));
                lines.getChildren().add(text);
            }
        }
    }

});]]></Answer>
<Answer><![CDATA[import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class MainApp extends Application implements Initializable {

    @FXML private TableView<Person> personTable;
    @FXML private TableColumn<Person, String> fullnameCol, addressCol;
    ObservableList<Person> persons = FXCollections.observableArrayList();

    public static void main(String [] args) {
        launch(args);
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        Person p1 = new Person("John Doe", "Charlotte ,\n403 St. Tryon Street");
        Person p2 = new Person("Riyad Mahrez", "xxxxx, \n007 St.YYYY");
        persons.addAll(p1, p2);
        fullnameCol.setCellValueFactory(new PropertyValueFactory<Person, String>("fullname"));
        addressCol.setCellValueFactory(new PropertyValueFactory<Person, String>("address"));

        addressCol.setCellFactory(column->{
            return new TableCell<Person, String>() {
                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if(item==null || empty) {
                        setGraphic(null);
                    } else {
                        VBox vbox = new VBox();
                        List<String> textList = Arrays.asList(item.split("\n"));
                        String[] colors = {"#3E50B4", "#FF3F80", "#727272"};
                        int colorCount = colors.length;
                        for(int i=0;i<textList.size();i++) {
                            Label lbl = new Label(textList.get(i));
                            lbl.setStyle("-fx-text-fill: "+colors[i%colorCount]);
                            vbox.getChildren().add(lbl);
                        }
                        setGraphic(vbox);
                    }
                }
            };
        });
        personTable.setItems(persons);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("TableViewExample.fxml"));
        loader.setController(this);
        Parent parent = loader.load();
        Scene scene = new Scene(parent);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37524662" questionTitle="How to concatenate observable lists in JavaFX?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;

/**
 * @see https://stackoverflow.com/a/37527245/230513
 */
public class ObservableListAggregate {

    public static void main(String[] args) {
        ObservableList<Integer> list1 = FXCollections.observableArrayList();
        ObservableList<Integer> list2 = FXCollections.observableArrayList();
        Aggregate<ObservableList<Integer>> aggregate = new Aggregate(list1, list2);
        aggregate.addListener(new ListChangeListener<ObservableList<Integer>>() {
            @Override
            public void onChanged(ListChangeListener.Change<? extends ObservableList<Integer>> c) {
                System.out.println("changed " + c);
            }
        });
        list1.add(42);
    }

    private static class Aggregate<T> {

        List<ObservableList<T>> lists = new ArrayList<>();

        public Aggregate(ObservableList<T>... lists) {
            for (ObservableList<T> list : lists) {
                this.lists.add(list);
            }
        }

        public final void addListener(ListChangeListener<? super T> listener) {
            for (ObservableList<T> list : lists) {
                list.addListener(listener);
            }
        }

        public final void removeListener(ListChangeListener<? super T> listener) {
            for (ObservableList<T> list : lists) {
                list.removeListener(listener);
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[/**
 * This class aggregates several other Observed Lists (sublists), observes changes on those sublists and applies those same changes to the
 * aggregated list.
 * Inspired by:
 * - http://stackoverflow.com/questions/25705847/listchangelistener-waspermutated-block
 * - http://stackoverflow.com/questions/37524662/how-to-concatenate-observable-lists-in-javafx
 * - https://github.com/lestard/advanced-bindings/blob/master/src/main/java/eu/lestard/advanced_bindings/api/CollectionBindings.java
 * Posted result on: http://stackoverflow.com/questions/37524662/how-to-concatenate-observable-lists-in-javafx
 */
public class AggregatedObservableArrayList<T> {

    protected final List<ObservableList<T>> lists = new ArrayList<>();
    final private List<Integer> sizes = new ArrayList<>();
    final private List<InternalListModificationListener> listeners = new ArrayList<>();
    final protected ObservableList<T> aggregatedList = FXCollections.observableArrayList();

    public AggregatedObservableArrayList() {

    }

    /**
     * The Aggregated Observable List. This list is unmodifiable, because sorting this list would mess up the entire bookkeeping we do here.
     *
     * @return an unmodifiable view of the aggregatedList
     */
    public ObservableList<T> getAggregatedList() {
        return FXCollections.unmodifiableObservableList(aggregatedList);
    }

    public void appendList(@NotNull ObservableList<T> list) {
        assert !lists.contains(list) : "List is already contained: " + list;
        lists.add(list);
        final InternalListModificationListener listener = new InternalListModificationListener(list);
        list.addListener(listener);
        //System.out.println("list = " + list + " puttingInMap=" + list.hashCode());
        sizes.add(list.size());
        aggregatedList.addAll(list);
        listeners.add(listener);
        assert lists.size() == sizes.size() && lists.size() == listeners.size() :
              "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size() + " or not equal to listeners.size=" + listeners.size();
    }

    public void prependList(@NotNull ObservableList<T> list) {
        assert !lists.contains(list) : "List is already contained: " + list;
        lists.add(0, list);
        final InternalListModificationListener listener = new InternalListModificationListener(list);
        list.addListener(listener);
        //System.out.println("list = " + list + " puttingInMap=" + list.hashCode());
        sizes.add(0, list.size());
        aggregatedList.addAll(0, list);
        listeners.add(0, listener);
        assert lists.size() == sizes.size() && lists.size() == listeners.size() :
              "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size() + " or not equal to listeners.size=" + listeners.size();
    }

    public void removeList(@NotNull ObservableList<T> list) {
        assert lists.size() == sizes.size() && lists.size() == listeners.size() :
              "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size() + " or not equal to listeners.size=" + listeners.size();
        final int index = lists.indexOf(list);
        if (index < 0) {
            throw new IllegalArgumentException("Cannot remove a list that is not contained: " + list + " lists=" + lists);
        }
        final int startIndex = getStartIndex(list);
        final int endIndex = getEndIndex(list, startIndex);
        // we want to find the start index of this list inside the aggregated List. End index will be start + size - 1.
        lists.remove(list);
        sizes.remove(index);
        final InternalListModificationListener listener = listeners.remove(index);
        list.removeListener(listener);
        aggregatedList.remove(startIndex, endIndex + 1); // end + 1 because end is exclusive
        assert lists.size() == sizes.size() && lists.size() == listeners.size() :
              "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size() + " or not equal to listeners.size=" + listeners.size();
    }

    /**
     * Get the start index of this list inside the aggregated List.
     * This is a private function. we can safely asume, that the list is in the map.
     *
     * @param list the list in question
     * @return the start index of this list in the aggregated List
     */
    private int getStartIndex(@NotNull ObservableList<T> list) {
        int startIndex = 0;
        //System.out.println("=== searching startIndex of " + list);
        assert lists.size() == sizes.size() : "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size();
        final int listIndex = lists.indexOf(list);
        for (int i = 0; i < listIndex; i++) {
            final Integer size = sizes.get(i);
            startIndex += size;
            //System.out.println(" startIndex = " + startIndex + " added=" + size);
        }
        //System.out.println("startIndex = " + startIndex);
        return startIndex;
    }

    /**
     * Get the end index of this list inside the aggregated List.
     * This is a private function. we can safely asume, that the list is in the map.
     *
     * @param list       the list in question
     * @param startIndex the start of the list (retrieve with {@link #getStartIndex(ObservableList)}
     * @return the end index of this list in the aggregated List
     */
    private int getEndIndex(@NotNull ObservableList<T> list, int startIndex) {
        assert lists.size() == sizes.size() : "lists.size=" + lists.size() + " not equal to sizes.size=" + sizes.size();
        final int index = lists.indexOf(list);
        return startIndex + sizes.get(index) - 1;
    }

    private class InternalListModificationListener implements ListChangeListener<T> {

        @NotNull
        private final ObservableList<T> list;

        public InternalListModificationListener(@NotNull ObservableList<T> list) {
            this.list = list;
        }

        /**
         * Called after a change has been made to an ObservableList.
         *
         * @param change an object representing the change that was done
         * @see Change
         */
        @Override
        public void onChanged(Change<? extends T> change) {
            final ObservableList<? extends T> changedList = change.getList();
            final int startIndex = getStartIndex(list);
            final int index = lists.indexOf(list);
            final int newSize = changedList.size();
            //System.out.println("onChanged for list=" + list + " aggregate=" + aggregatedList);
            while (change.next()) {
                final int from = change.getFrom();
                final int to = change.getTo();
                //System.out.println(" startIndex=" + startIndex + " from=" + from + " to=" + to);
                if (change.wasPermutated()) {
                    final ArrayList<T> copy = new ArrayList<>(aggregatedList.subList(startIndex + from, startIndex + to));
                    //System.out.println("  permutating sublist=" + copy);
                    for (int oldIndex = from; oldIndex < to; oldIndex++) {
                        int newIndex = change.getPermutation(oldIndex);
                        copy.set(newIndex - from, aggregatedList.get(startIndex + oldIndex));
                    }
                    //System.out.println("  permutating done sublist=" + copy);
                    aggregatedList.subList(startIndex + from, startIndex + to).clear();
                    aggregatedList.addAll(startIndex + from, copy);
                } else if (change.wasUpdated()) {
                    // do nothing
                } else {
                    if (change.wasRemoved()) {
                        List<? extends T> removed = change.getRemoved();
                        //System.out.println("  removed= " + removed);
                        // IMPORTANT! FROM == TO when removing items.
                        aggregatedList.remove(startIndex + from, startIndex + from + removed.size());
                    }
                    if (change.wasAdded()) {
                        List<? extends T> added = change.getAddedSubList();
                        //System.out.println("  added= " + added);
                        //add those elements to your data
                        aggregatedList.addAll(startIndex + from, added);
                    }
                }
            }
            // update the size of the list in the map
            //System.out.println("list = " + list + " puttingInMap=" + list.hashCode());
            sizes.set(index, newSize);
            //System.out.println("listSizesMap = " + sizes);
        }

    }

    public String dump(Function<T, Object> function) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        aggregatedList.forEach(el -> sb.append(function.apply(el)).append(","));
        final int length = sb.length();
        sb.replace(length - 1, length, "");
        sb.append("]");
        return sb.toString();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37479217" questionTitle="Java 8, how can I implement a switch statement using streams?">
<Answer><![CDATA[try {
        Path file = Paths.get("G:\\tmp", "img.ini");
        Stream<String> lines = Files.lines(file);

        lines.filter(line->{
            if("pos".equalsIgnoreCase(line.split("=")[0])){
                //process pos line here
                System.out.println("pos"+line);
                return false;
            }
            return true;
        }).filter(line->{
            System.out.println("2"+line);
            if("Collapsed".equalsIgnoreCase(line.split("=")[0])){
                //process Collapsed line here
                System.out.println("Collapsed"+line);
                return false;
            }
            return true;
        }).filter(line->{
            System.out.println("3"+line);
            if("Size".equalsIgnoreCase(line.split("=")[0])){
                //process Size line here
                System.out.println("Size"+line);
                return false;
            }
            return true;
        }).forEach(line->{
            //settings = new Settings();
        });;
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }]]></Answer>
<Answer><![CDATA[public static Stream<MatchResult> findAll(Scanner s, Pattern pattern) {
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<MatchResult>(
            1000, Spliterator.ORDERED|Spliterator.NONNULL) {
        public boolean tryAdvance(Consumer<? super MatchResult> action) {
            if(s.findWithinHorizon(pattern, 0)!=null) {
                action.accept(s.match());
                return true;
            }
            else return false;
        }
    }, false);
}
public static Stream<MatchResult> results(Matcher m) {
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<MatchResult>(
            m.regionEnd()-m.regionStart(), Spliterator.ORDERED|Spliterator.NONNULL) {
        public boolean tryAdvance(Consumer<? super MatchResult> action) {
            if(m.find()) {
                action.accept(m.toMatchResult());
                return true;
            }
            else return false;
        }
    }, false);
}]]></Answer>
<Answer><![CDATA[public class Main {
    public static void main(String[] args) throws IOException {
        Path path = Paths.get("D:\\Development\\workspace\\Application\\src\\main\\resources\\init.txt");
        String content = new String(Files.readAllBytes(path));

        Map<String, Config> configMap = Stream.of(content.split("\\n\\r"))
            .map(config -> Arrays.asList(config.split("\\r")))
            .collect(HashMap<String, Config>::new, (map, list) -> {
                String header = list.get(0);
                String pos = list.get(1);
                String size = list.get(2);
                String collapsed = list.get(3);
                map.put(header, new Config(pos.substring(pos.indexOf("=") + 1), size.substring(size.indexOf("=") + 1), collapsed.substring(collapsed.indexOf("=") + 1)));
            }, (m, u) -> {});

        System.out.println(configMap);
    }
}

class Config {
    public String pos;
    public String size;
    public String collapsed;

    public Config(String pos, String size, String collapsed) {
        this.pos = pos;
        this.size = size;
        this.collapsed = collapsed;
    }

    @Override
    public String toString() {
        return "Config{" +  "pos='" + pos + '\'' + ", size='" + size + '\'' + 
               ", collapsed='" + collapsed + '\'' + '}';
    }
}]]></Answer>
<Answer><![CDATA[private static <T> Predicate<T> testAndConsume(Predicate<T> pred, Consumer<T> cons) {
    return t -> {
        boolean result = pred.test(t);
        if (result) cons.accept(t);
        return result;
    };
}

public static class SwitchConsumer<T> {
    Predicate<T> conditionalConsumer;
    private SwitchConsumer(Predicate<T> pred) {
        conditionalConsumer = pred;
    }

    public static <C> SwitchConsumer<C> inCase(Predicate<C> pred, Consumer<C> cons) {
        return new SwitchConsumer<>(testAndConsume(pred, cons));
    }

    public SwitchConsumer<T> elseIf(Predicate<T> pred, Consumer<T> cons) {
        return new SwitchConsumer<>(conditionalConsumer.or(testAndConsume(pred,cons)));
    }

    public Consumer<T> elseDefault(Consumer<T> cons) {
        return testAndConsume(conditionalConsumer.negate(),cons)::test;   // ::test converts Predicate to Consumer
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37472448" questionTitle="JavaFX - Bind stage size to the root node's preferred size">
<Answer><![CDATA[public class SampleApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        final Label lbl1 = new Label("content");
        final TitledPane tp1 = new TitledPane("First TP", lbl1);

        final Label lbl2 = new Label("more content");
        final TitledPane tp2 = new TitledPane("Second TP", lbl2);

        final VBox rootPane = new VBox(tp1, tp2);

        tp1.heightProperty().addListener((InvalidationListener) observable -> {
            updateWindowHeight(rootPane);
        });

        tp2.heightProperty().addListener((InvalidationListener) observable -> {
            updateWindowHeight(rootPane);
        });

        final Scene scene = new Scene(rootPane);
        primaryStage.setScene(scene);
        primaryStage.sizeToScene();
        primaryStage.setResizable(false);
        primaryStage.show();
    }

    private void updateWindowHeight(final VBox rootPane) {
        final Scene scene = rootPane.getScene();
        if (scene == null) 
            return;
        final Window window = scene.getWindow();
        if (window == null)
            return;
        final double rootPrefHeight = rootPane.prefHeight(-1);
        final double decorationHeight = window.getHeight() - scene.getHeight(); // window decorations
        window.setHeight(rootPrefHeight + decorationHeight);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(final Stage primaryStage) {
        try {
            // ScrollPane will be the root
            ScrollPane sp = new ScrollPane();

            // Don't show the ScrollBars
            sp.setHbarPolicy(ScrollBarPolicy.NEVER);
            sp.setVbarPolicy(ScrollBarPolicy.NEVER);

            // TitledPane will be the content of the root
            TitledPane tp = new TitledPane();
            sp.setContent(tp);

            // Set the layout bounds of the TitledPane
            tp.setMinHeight(400);
            tp.setMinWidth(400);
            tp.setMaxHeight(900);
            tp.setMaxWidth(900);

            // Fill the TitledPane with some Buttons and containers to test the growing and shrinking progress
            final VBox vboxTPContentVertical = new VBox();
            final VBox vboxTexts = new VBox();
            final HBox hboxTexts = new HBox();

            HBox hboxButtons = new HBox();
            vboxTPContentVertical.getChildren().addAll(hboxButtons, hboxTexts, vboxTexts);


            Button b1 = new Button("Add row");
            b1.setOnAction((event) -> vboxTexts.getChildren().addAll(new Text("Row1"), new Text("Row2")));

            Button b2 = new Button("Add column");
            b2.setOnAction((event) -> hboxTexts.getChildren().addAll(new Text("Col1"), new Text("Col2")));

            Button b3 = new Button("Remove row");
            b3.setOnAction((event) -> {
                vboxTexts.getChildren().remove(0);
                vboxTexts.getChildren().remove(0);
            });

            Button b4 = new Button("Remove column");
            b4.setOnAction((event) -> {
                hboxTexts.getChildren().remove(0);
                hboxTexts.getChildren().remove(0);
            });

            hboxButtons.getChildren().addAll(b1, b2, b3, b4);
            tp.setContent(vboxTPContentVertical);

            // Set the ScrollPane as root
            Scene scene = new Scene(sp, 400, 400);

            // Now just listen to the heightProperty and widthProperty of the TitledPane
            tp.heightProperty().addListener((obs, oldVal, newVal) -> primaryStage.setHeight(to.doubleValue()));
            tp.widthProperty().addListener((obs, oldVal, newVal) -> primaryStage.setWidth(to.doubleValue()));

            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37378973" questionTitle="Implement tags bar in JavaFX">
<Answer><![CDATA[public class TagBar extends HBox {

    private final ObservableList<String> tags;
    private final TextField inputTextField;

    public ObservableList<String> getTags() {
        return tags;
    }

    public TagBar() {
        getStyleClass().setAll("tag-bar");
        getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        tags = FXCollections.observableArrayList();
        inputTextField = new TextField();
        inputTextField.setOnAction(evt -> {
            String text = inputTextField.getText();
            if (!text.isEmpty() && !tags.contains(text)) {
                tags.add(text);
                inputTextField.clear();
            }
        });

        inputTextField.prefHeightProperty().bind(this.heightProperty());
        HBox.setHgrow(inputTextField, Priority.ALWAYS);
        inputTextField.setBackground(null);

        tags.addListener((ListChangeListener.Change<? extends String> change) -> {
            while (change.next()) {
                if (change.wasPermutated()) {
                    ArrayList<Node> newSublist = new ArrayList<>(change.getTo() - change.getFrom());
                    for (int i = change.getFrom(), end = change.getTo(); i < end; i++) {
                        newSublist.add(null);
                    }
                    for (int i = change.getFrom(), end = change.getTo(); i < end; i++) {
                        newSublist.set(change.getPermutation(i), getChildren().get(i));
                    }
                    getChildren().subList(change.getFrom(), change.getTo()).clear();
                    getChildren().addAll(change.getFrom(), newSublist);
                } else {
                    if (change.wasRemoved()) {
                        getChildren().subList(change.getFrom(), change.getFrom() + change.getRemovedSize()).clear();
                    }
                    if (change.wasAdded()) {
                        getChildren().addAll(change.getFrom(), change.getAddedSubList().stream().map(Tag::new).collect(Collectors.toList()));
                    }
                }
            }
        });
        getChildren().add(inputTextField);
    }

    private class Tag extends HBox {

        public Tag(String tag) {
            getStyleClass().setAll("tag");
            Button removeButton = new Button("X");
            removeButton.setOnAction((evt) -> tags.remove(tag));
            Text text = new Text(tag);
            HBox.setMargin(text, new Insets(0, 0, 0, 5));
            getChildren().addAll(text, removeButton);
        }
    }

}]]></Answer>
<Answer><![CDATA[import ....

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{

        BorderPane root = new BorderPane();
        HBox tagsPane = new HBox(10);
        tagsPane.setStyle("-fx-border-color: #F1F1F1;" +
                "          -fx-border-width: 1px;" +
                "          -fx-border-radius: 10;" +
                "          -fx-border-insets: 5");
        root.setBottom(tagsPane);

        TextField textField = new TextField();
        textField.setPromptText("Tag name - ENTER to add");
        textField.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ENTER) {
                tagButton(tagsPane, textField.getText());
                textField.clear();
            }
        });

        root.setTop(textField);

        primaryStage.setTitle("Hello World");
        primaryStage.setScene(new Scene(root, 450, 275));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }

    //little image as 15x15 for example
    Image toUse = new Image("sample/delete.png");

    //box is the pane where this buttons will be placed
    public void tagButton(HBox box,String tag){
        ImageView closeImg = new ImageView(toUse);
        Button result = new Button(tag,closeImg);
        result.setPrefHeight(20);
        result.setContentDisplay(ContentDisplay.RIGHT);

        result.setOnAction(event -> box.getChildren().remove(result));
        box.getChildren().add(result);
}]]></Answer>
<Answer><![CDATA[public class CloseTag extends HBox implements Comparable<CloseTag> {

    private Label     label;
    private Label     closeIcon;

    public CloseTag(String text) {
        setStyle("-fx-padding:8;");

        Text icon = GlyphsDude.createIcon(FontAwesomeIcon.TIMES_CIRCLE);
        closeIcon = new Label(null, icon);

        label = new Label(text, new StackPane(closeIcon));
        label.setContentDisplay(ContentDisplay.RIGHT);
        getChildren().add(label);
    }

    public void setOnCloseAction(EventHandler<? super MouseEvent> action) {
        closeIcon.setOnMouseClicked(action);
    }

    public String getText() {
        return label.getText();
    }

    @Override
    public int compareTo(CloseTag other) {
        return getText().compareTo(other.getText());
    }
}



public class TagPane extends FlowPane {

    private TextField textField;

    public TagPane() {
        setStyle("-fx-padding:8;" + "-fx-hgap:10;");
        setOnMouseClicked(evt -> onMouseClickedd(evt));

        textField = new TextField();
        textField.setOnKeyPressed(evt -> onKeyPressed(evt, textField));
    }

    private void onMouseClickedd(MouseEvent mouseEvent) {
        if (mouseEvent.getTarget() != this || textField.getParent() != null ) {
            return;
        }

        getChildren().add(textField);
        textField.requestFocus();
    }

    private void onKeyPressed(KeyEvent evt, TextField textField) {
        if (evt.getCode() == KeyCode.ENTER || evt.getCode() == KeyCode.TAB) {
            createTag(textField.getText());
            textField.clear();
        }
    }

    private void createTag(String text) {
        CloseTag tag = new CloseTag(text);
        tag.setOnCloseAction(evt -> removeTag(tag));
        getChildren().remove(textField);
        getChildren().add(tag);
    }

    private void removeTag(CloseTag tag) {
        getChildren().remove(tag);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37332881" questionTitle="JavaFX changing row color by database Value">
<Answer><![CDATA[Callback<TableColumn<CustomerObj, String>, TableCell<CustomerObj, String>> cellFactory
                    = new Callback<TableColumn<CustomerObj, String>, TableCell<CustomerObj, String>>() {
            public TableCell call(TableColumn p) {
                TableCell cell = new TableCell<CustomerObj, String>() {
                    @Override
                    public void updateItem(String item, boolean empty) {
                        super.updateItem(item, empty);
                        if (!empty) {
                            CustomerObj obj = this.getTableView().getItems().get(getIndex());    

                            setText(obj.getType());                        
                            switch (obj.getType()) {
                                case "good":
                                    setStyle("-fx-background-color: rgba(71, 209, 71, .7)");
                                    break;
                                case "problem":
                                    setStyle("-fx-background-color: rgba(255, 51, 51, .7)");
                                    break;
                                case "ViP":
                                    setStyle("-fx-background-color: rgba(255, 219, 25 .7)");
                                    break;
                                default:  
                                    break;
                            }


                        } else {
                            setText(null);
                        }
                    }

                    private String getString() {
                        return getItem() == null ? "" : getItem().toString();
                    }
                };

                return cell;
            }
        };
        colType.setCellFactory(cellFactory);]]></Answer>
<Answer><![CDATA[public static class Item {

    // property only assigned once
    private final StringProperty type;

    public Item(String type) {
        this.type = new SimpleStringProperty(type);
    }

    // getter for value wrapped in property
    public final String getType() {
        return this.type.get();
    }

    // setter for value wrapped in property
    public final void setType(String value) {
        this.type.set(value);
    }

    // property getter
    public final StringProperty typeProperty() {
        return this.type;
    }
}

public static Color typeToColor(String type) {
    if (type == null) {
        return Color.WHITESMOKE;
    }
    switch (type) {
        case "bad":
            return Color.RED;
        case "good":
            return Color.LIME;
        default:
            return Color.WHITESMOKE;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37311481" questionTitle="Optionally invoke side effects in a pure function">
<Answer><![CDATA[class Method {
    void beforeStart() {};
    void afterStep1(String result) {};
    void afterStep2(String result) {};
    void afterStep3(String result) {};
    void afterStep4(String result) {};

    final Result execute(String param1, String param2) {
        beforeStart();
        String s1 = step1(param1, param2);
        afterStep1(s1);
        String s2 = step2(s1);
        afterStep2(s2);
        String s3 = step3(s2);
        afterStep3(s3);
        String s4 = step4(s3);
        afterStep4(s4);
        return new Result(s4);
    }
}]]></Answer>
<Answer><![CDATA[public class MethodPipeline<T, I, R> {
    private final MethodPipeline<T, ?, I> prev;
    private final int kind;
    private final Function<? extends I, ? extends R> f;
    private final Runnable r;
    private final Consumer<? extends R> c;
    private MethodPipeline(Function<? extends I, ? extends R> l, MethodPipeline<? extends T, ?, ? extends I> prev) {
        kind = 0;
        f = l;
        r = null;
        c = null;
        this.prev = prev;
    }
    private MethodPipeline(Runnable l, MethodPipeline<? extends T, ?, ? extends I> prev) {
        kind = 1;
        f = null;
        r = l;
        c = null;
        this.prev = prev;
    }
    private MethodPipeline(Consumer<? extends R> l, MethodPipeline<? extends T, ?, ? extends I> prev) {
        kind = 2;
        f = null;
        r = null;
        c = l;
        this.prev = prev;
    }
    //...various public consructor
    public <R1> MethodPipeline<T, R, R1> then(Function<? extends R, ? extends R1> convertor) {
        return new MethodPipeline<>(convertor, this);
    }
    public MethodPipeline<T, I, R> sideEffect(Runnable sideEffect) {
        return new MethodPipeline<>(sideEffect, this);
    }
    public MethodPipeline<T, I, R> sideEffect(Consumer<? extnds R> sideEffect) {
        return new MethodPipeline<>( sideEffect, this);
    }
    public R run(T param, boolean sideEffect) {
        I v = prev.run(param);
        switch (kind) {
        case 0:
            return f.apply(v);
        case 1:
            if (sideEffect)
                r.run();
            return v;
        case 2:
            if (sideEffect)
                c.accept(v);
            return v;
        }
    }
}]]></Answer>
<Answer><![CDATA[package foo;

import java.util.function.BiConsumer;
import java.util.function.BooleanSupplier;
import java.util.function.Consumer;

public class SideEffects{
  public static void main(String args[]){
    System.out.println("Calling logic as a pure function");
    String result = logic("param1", "param2", null, null, null, null, null);
    System.out.println("Result is "+result);
    System.out.println();

    System.out.println("Calling logic as a regular function");
    result = logic("param1", "param2",
        (level,msg)->{System.out.println("LOG ["+level+"]["+msg+"]");},
        (status)->{System.out.println("Current status set to: "+status); },
        (obj)->{System.out.println("Called notify message on object: "+obj.toString());},
        ()->{boolean dbLookupResult = false; return dbLookupResult;},
        (info)->{System.out.println("Info written to file [["+info+"]]");}
        );
    System.out.println("Result is "+result);
  }

  public static String logic(String param1, String param2,
      BiConsumer<String, String> log,
      Consumer<String> setStatus,
      Consumer<Object> notify,
      BooleanSupplier eStop,
      Consumer<String> saveFile){
  if (setStatus != null){ setStatus.accept("running"); }
  String s1 = param1+"::"+param2;
  if (log != null){ log.accept("INFO", "About to do Step 2, this could take awhile"); }
  String s2 = s1+"::step2";
  if (log != null){ log.accept("INFO", "Completed step 2"); }
  String s3 = s2+"::step3";
  if (notify != null) { notify.accept("randomobjectnotify"); }
  if (eStop != null && eStop.getAsBoolean()){
    if (setStatus != null){ setStatus.accept("stopped"); }
    return "stoppedresult";
  }
  String s4 = s3+"::step4";
  if (setStatus != null){ setStatus.accept("completed"); }
  if (saveFile!= null){ saveFile.accept("Logic completed for params "+param1+"::"+param2); }
  return s4;
  }
}]]></Answer>
<Answer><![CDATA[public static Result pureMethod(String param1, String param2,
        Logger logger, ObjIntConsumer<String> statusUpdater, IntPredicate cont) {
    statusUpdater.accept(null, 0);
    String s1 = step1(param1, param2);
    statusUpdater.accept(s1, 1);
    if(!cont.test(1)) return null;
    logger.log("About to do step 2, this could take while");
    String s2 = step2(s1);
    statusUpdater.accept(s2, 2);
    if(!cont.test(2)) return null;
    logger.log("Completed step 2");
    String s3 = step3(s2);
    statusUpdater.accept(s3, 3);
    if(!cont.test(3)) return null;
    String s4 = step4(s3);
    statusUpdater.accept(s4, 4);
    return new Result(s4);
}
public static Result pureMethod(String param1, String param2) {
    Logger logger=Logger.getAnonymousLogger();
    logger.setLevel(Level.OFF);
    return pureMethod(param1, param2, logger, (s,i)->{}, i->true);
}
public Result nonPureMethod(String param1, String param2) {
    return pureMethod(param1, param2, this.logger,
        (s,i)-> { switch (i) {
            case 0: this.current_status = "running"; break;
            case 3: this.notifyOtherObject(s); break;
            case 4: this.current_status = "completed"; this.saveFile(s); break;
        }}, i -> {
            if(i==3 && this.UserPressedEmergencyStop) {
                this.current_status = "stopped";
                return false;
            }
            else return true;
        });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37249012" questionTitle="Java execute 3 methods at same time inside custom method and grab values from run methods">
<Answer><![CDATA[private List<Result> fetchData() {
    final List<Result> results = new ArrayList<Result>();
    List<Thread> threads = new ArrayList<Thread>();
    for(int i = 0; i < 3; i++){
        Thread t = new Thread() {
            public void run() {
                Result result = getResult();
                synchronized(results) {
                    results.add(result);
                }
            }
        };
        t.start();
        threads.add(t);
    }
    for(Thread t:threads) {
        t.join();
    }
    return results;
}]]></Answer>
<Answer><![CDATA[ExecutorService service = Executors.newFixedThreadPool(3);

    List<MyCallable> futureList = new ArrayList<MyCallable>();

    MyCallable1 myCallable1 = new MyCallable1(); // your first thread
    MyCallable2 myCallable2 = new MyCallable2(); // your second thread
    MyCallable3 myCallable1 = new MyCallable3(); // your third thread
    futureList.add(myCallable1);
    futureList.add(myCallable2);
    futureList.add(myCallable3);

    System.out.println("Start");
    try{
        List<Future<Long>> futures = service.invokeAll(futureList);  
        for(Future<Long> future : futures){
            try{
                System.out.println("future.isDone = " + future.isDone());
                System.out.println("future: call ="+future.get());
            }
            catch(Exception err1){
                err1.printStackTrace();
            }
        }
    }catch(Exception err){
        err.printStackTrace();
    }
    service.shutdown();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37117475" questionTitle="Attach back-cover to a card image">
<Answer><![CDATA[public class QuickFlip extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        BooleanProperty showFront = new SimpleBooleanProperty(true);

        Node card = createCard(showFront,
                new Image("http://www.ohmz.net/wp-content/uploads/2012/05/Game-of-Throne-Magic-trading-cards-2.jpg"),
                new Image("https://upload.wikimedia.org/wikipedia/en/a/aa/Magic_the_gathering-card_back.jpg")
                );

        stage.setScene(createScene(card));
        stage.show();

        // first 90° -> show front
        RotateTransition rotator1 = createRotator(card, 0, 90);

        // from 90° to 270° show backside
        rotator1.setOnFinished(evt -> showFront.set(false));
        RotateTransition rotator2 = createRotator(card, 90, 270);

        // from 270° to 360° show front again
        rotator2.setOnFinished(evt -> showFront.set(true));
        RotateTransition rotator3 = createRotator(card, 270, 360);

        SequentialTransition rotator = new SequentialTransition(card, rotator1, rotator2, rotator3);
        rotator.setCycleCount(10);
        rotator.play();
    }

    private Scene createScene(Node card) {
        StackPane root = new StackPane();
        root.getChildren().addAll(card);

        Scene scene = new Scene(root, 600, 700, true, SceneAntialiasing.BALANCED);
        scene.setCamera(new PerspectiveCamera());

        return scene;
    }

    private Node createCard(BooleanProperty showFront, Image front, Image back) {
        ImageView imageView = new ImageView();

        imageView.setFitHeight(front.getHeight());
        imageView.setFitWidth(front.getWidth());

        // show front/back depending on value of the showFront property
        imageView.imageProperty().bind(Bindings.when(showFront).then(front).otherwise(back));

        // mirror image, when backside is shown to prevent wrong orientation
        imageView.scaleXProperty().bind(Bindings.when(showFront).then(1d).otherwise(-1d));
        return imageView;
    }

    private RotateTransition createRotator(Node card, double fromAngle, double toAngle) {
        // animation length proportional to the rotation angle
        RotateTransition rotator = new RotateTransition(Duration.millis(Math.abs(10000 * (fromAngle - toAngle) / 360)), card);
        rotator.setAxis(Rotate.Y_AXIS);
        rotator.setFromAngle(fromAngle);
        rotator.setToAngle(toAngle);
        rotator.setInterpolator(Interpolator.LINEAR);

        return rotator;
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.image.*;
import javafx.scene.layout.StackPane;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class QuickFlip2 extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        ImageView card = new ImageView();

        stage.setScene(createScene(card));
        stage.show();

        Animation rotator = createRotator(card);
        rotator.play();
    }

    private Scene createScene(Node card) {
        StackPane root = new StackPane();
        root.getChildren().add(card);

        Scene scene = new Scene(root, 600, 700, true, SceneAntialiasing.BALANCED);
        scene.setCamera(new PerspectiveCamera());

        return scene;
    }

    private Animation createRotator(ImageView card) {
        RotateTransition rotator = new RotateTransition(Duration.millis(10000), card);
        rotator.setAxis(Rotate.Y_AXIS);
        rotator.setFromAngle(0);
        rotator.setToAngle(360);
        rotator.setInterpolator(Interpolator.LINEAR);
        rotator.setCycleCount(10);

        Image front = new Image(
            "http://www.ohmz.net/wp-content/uploads/2012/05/Game-of-Throne-Magic-trading-cards-2.jpg",
            false);
        Image back = new Image(
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Card_back_05a.svg/329px-Card_back_05a.svg.png",
            front.getWidth(), front.getHeight(), true, true);

        Timeline imageSwitcher = new Timeline(
            new KeyFrame(Duration.ZERO,
                new KeyValue(card.imageProperty(), front, Interpolator.DISCRETE)),
            new KeyFrame(Duration.millis(2500),
                new KeyValue(card.imageProperty(), back, Interpolator.DISCRETE)),
            new KeyFrame(Duration.millis(7500),
                new KeyValue(card.imageProperty(), front, Interpolator.DISCRETE)),
            new KeyFrame(Duration.millis(10000),
                new KeyValue(card.imageProperty(), front, Interpolator.DISCRETE))
        );
        imageSwitcher.setCycleCount(10);

        return new ParallelTransition(card, rotator, imageSwitcher);
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37093443" questionTitle="Execute multiple downloads and wait for all to complete">
<Answer><![CDATA[private static <VALUE> VALUE execute(
  final int nThreads,
  final Function<ExecutorService, VALUE> function
) {
  ExecutorService executorService = Executors.newFixedThreadPool(nThreads);
  try {
    return function.apply(executorService);
  } catch (final InterruptedException | ExecutionException exception) {
    exception.printStackTrace();
  } finally {
    executorService .shutdownNow(); // important to call this when you're done with the executor service.
  }
}

public static void main(final String... arguments) {
  // define variables
  final List<CompletableFuture<Path>> downloadTasks = execute(
    MAX_THREADS_FOR_DOWNLOADS,
    executor -> s3Paths
      .stream()
      .map(s3Path -> completableFuture.supplyAsync(
        () -> mys3Downloader.downloadAndGetPath(s3Path),
        executor
      ))
      .collect(Collectors.toList())
  );
  // use downloadTasks
}]]></Answer>
<Answer><![CDATA[ExecutorService executor = Executors.newFixedThreadPool(MAX_THREADS_FOR_DOWNLOADS);
try {
    List<CompletableFuture<Path>> downloadTasks = s3Paths
            .stream()
            .map(s3Path -> completableFuture.supplyAsync(() -> mys3Downloader.downloadAndGetPath(s3Path), executor))
            .collect(Collectors.toList());    

        // at this point, all requests are enqueued, and threads will be assigned as they become available      

        executor.shutdown();    // stops accepting requests, does not interrupt threads, 
                                // items in queue will still get threads when available

        // wait for all downloads to complete
        CompletableFuture.allOf(downloadTasks.toArray(new CompletableFuture[downloadTasks.size()])).join();

        // at this point, all downloads are finished, 
        // so it's safe to shut down executor completely

    } catch (InterruptedException | ExecutionException e) {
        e.printStackTrace();
    } finally {
        executor.shutdownNow(); // important to call this when you're done with the executor.
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37075261" questionTitle="How to set axis (triad) at fixed position on screen in JavaFX?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;

/**
 * @see http://stackoverflow.com/a/37685167/230513
 * @see http://stackoverflow.com/a/37370840/230513
 */
public class TriadBox extends Application {

    private static final double SIZE = 300;
    private final Content content = Content.create(SIZE);

    private static final class Content {

        private static final double WIDTH = 3;
        private final Group group = new Group();
        private final Group cube = new Group();
        private final Group axes = new Group();
        private final Rotate rx = new Rotate(0, Rotate.X_AXIS);
        private final Rotate ry = new Rotate(0, Rotate.Y_AXIS);
        private final Rotate rz = new Rotate(0, Rotate.Z_AXIS);
        private final Box xAxis;
        private final Box yAxis;
        private final Box zAxis;
        private final Box box;

        private static Content create(double size) {
            Content c = new Content(size);
            c.cube.getChildren().add(c.box);
            c.cube.getTransforms().addAll(c.rz, c.ry, c.rx);
            c.axes.getChildren().addAll(c.xAxis, c.yAxis, c.zAxis);
            c.axes.setTranslateX(-size / 2);
            c.axes.setTranslateY(size / 2);
            c.group.getChildren().addAll(c.cube, c.axes);
            return c;
        }

        private Content(double size) {
            xAxis = createBox(size*2, WIDTH, WIDTH);
            yAxis = createBox(WIDTH, size*2, WIDTH);
            zAxis = createBox(WIDTH, WIDTH, size*2);
            double edge = 3 * SIZE / 4;
            box = new Box(edge, edge, edge);
            box.setMaterial(new PhongMaterial(Color.CORAL));
        }

        private Box createBox(double w, double h, double d) {
            Box b = new Box(w, h, d);
            b.setMaterial(new PhongMaterial(Color.AQUA));
            return b;
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("JavaFX 3D");
        Scene scene = new Scene(content.group, SIZE * 2, SIZE * 2, true);
        primaryStage.setScene(scene);
        scene.setFill(Color.BLACK);
        scene.setOnMouseMoved((final MouseEvent e) -> {
            content.rx.setAngle(e.getSceneY() * 360 / scene.getHeight());
            content.ry.setAngle(e.getSceneX() * 360 / scene.getWidth());
        });
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(SIZE * 6);
        camera.setTranslateZ(-3 * SIZE);
        scene.setCamera(camera);
        scene.setOnScroll((final ScrollEvent e) -> {
            camera.setTranslateZ(camera.getTranslateZ() + e.getDeltaY());
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;

/**
 * @see https://stackoverflow.com/a/37714700/230513
 * @see https://stackoverflow.com/a/37685167/230513
 * @see https://stackoverflow.com/a/37370840/230513
 */
public class TriadBox extends Application {

    private static final double SIZE = 300;
    private final Content content = Content.create(SIZE);

    private static final class Content {

        private static final double WIDTH = 3;
        private final Group group = new Group();
        private final Rotate rx = new Rotate(0, Rotate.X_AXIS);
        private final Rotate ry = new Rotate(0, Rotate.Y_AXIS);
        private final Rotate rz = new Rotate(0, Rotate.Z_AXIS);
        private final Box xAxis;
        private final Box yAxis;
        private final Box zAxis;
        private final Box box;

        private static Content create(double size) {
            Content c = new Content(size);
            c.group.getChildren().addAll(c.box, c.xAxis, c.yAxis, c.zAxis);
            c.group.getTransforms().addAll(c.rz, c.ry, c.rx);
            return c;
        }

        private Content(double size) {
            xAxis = createBox(size * 2, WIDTH, WIDTH);
            xAxis.setTranslateY(size / 2);
            xAxis.setTranslateZ(size / 2);
            yAxis = createBox(WIDTH, size * 2, WIDTH);
            yAxis.setTranslateX(-size / 2);
            yAxis.setTranslateZ(size / 2);
            zAxis = createBox(WIDTH, WIDTH, size * 2);
            zAxis.setTranslateX(-size / 2);
            zAxis.setTranslateY(size / 2);
            double edge = 3 * size / 4;
            box = new Box(edge, edge, edge);
            box.setMaterial(new PhongMaterial(Color.CORAL));
        }

        private Box createBox(double w, double h, double d) {
            Box b = new Box(w, h, d);
            b.setMaterial(new PhongMaterial(Color.AQUA));
            return b;
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("JavaFX 3D");
        Scene scene = new Scene(content.group, SIZE * 2, SIZE * 2, true);
        primaryStage.setScene(scene);
        scene.setFill(Color.BLACK);
        scene.setOnMouseMoved((final MouseEvent e) -> {
            if (e.isShiftDown()) {
                content.rz.setAngle(e.getSceneX() * 360 / scene.getWidth());
            } else {
                content.rx.setAngle(e.getSceneY() * 360 / scene.getHeight());
                content.ry.setAngle(e.getSceneX() * 360 / scene.getWidth());
            }
        });
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(SIZE * 6);
        camera.setTranslateZ(-3.5 * SIZE);
        scene.setCamera(camera);
        scene.setOnScroll((final ScrollEvent e) -> {
            camera.setTranslateZ(camera.getTranslateZ() + e.getDeltaY());
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;

/**
 * @see http://stackoverflow.com/a/37734966/230513
 * @see http://stackoverflow.com/a/37714700/230513
 * @see http://stackoverflow.com/a/37685167/230513
 * @see http://stackoverflow.com/a/37370840/230513
 */
public class TriadBox extends Application {

    private static final double SIZE = 300;
    private final Content content = Content.create(SIZE);

    private static final class Content {

        private static final double WIDTH = 3;
        private final Group group = new Group();
        private final Rotate rx = new Rotate(0, Rotate.X_AXIS);
        private final Rotate ry = new Rotate(0, Rotate.Y_AXIS);
        private final Rotate rz = new Rotate(0, Rotate.Z_AXIS);
        private final Box xAxis;
        private final Box yAxis;
        private final Box zAxis;
        private final Box box;

        private static Content create(double size) {
            Content c = new Content(size);
            c.group.getChildren().addAll(c.box, c.xAxis, c.yAxis, c.zAxis);
            c.group.getTransforms().addAll(c.rz, c.ry, c.rx);
            return c;
        }

        private Content(double size) {
            xAxis = createBox(size * 2, WIDTH, WIDTH);
            yAxis = createBox(WIDTH, size * 2, WIDTH);
            zAxis = createBox(WIDTH, WIDTH, size * 2);
            double edge = 3 * size / 4;
            box = new Box(edge, edge, edge);
            box.setMaterial(new PhongMaterial(Color.CORAL));
            box.setTranslateX(size / 2);
            box.setTranslateY(-size / 2);
            box.setTranslateZ(-size / 2);
        }

        private Box createBox(double w, double h, double d) {
            Box b = new Box(w, h, d);
            b.setMaterial(new PhongMaterial(Color.AQUA));
            return b;
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("JavaFX 3D");
        Scene scene = new Scene(content.group, SIZE * 2, SIZE * 2, true);
        primaryStage.setScene(scene);
        scene.setFill(Color.BLACK);
        scene.setOnMouseMoved((final MouseEvent e) -> {
            if (e.isShiftDown()) {
                content.rz.setAngle(e.getSceneX() * 360 / scene.getWidth());
            } else {
                content.rx.setAngle(e.getSceneY() * 360 / scene.getHeight());
                content.ry.setAngle(e.getSceneX() * 360 / scene.getWidth());
            }
        });
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(SIZE * 6);
        //camera.setTranslateX(SIZE / 2);
        camera.setTranslateY(-SIZE / 2);
        camera.setTranslateZ(-4.5 * SIZE);
        scene.setCamera(camera);
        scene.setOnScroll((final ScrollEvent e) -> {
            camera.setTranslateZ(camera.getTranslateZ() + e.getDeltaY());
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;

/**
 * @see https://stackoverflow.com/a/37743539/230513
 * @see https://stackoverflow.com/a/37370840/230513
 */
public class TriadBox extends Application {

    private static final double SIZE = 300;
    private final Content content = Content.create(SIZE);

    private static final class Content {

        private static final double WIDTH = 3;
        private final Group group = new Group();
        private final Group cube = new Group();
        private final Group axes = new Group();
        private final Rotate rx = new Rotate(0, Rotate.X_AXIS);
        private final Rotate ry = new Rotate(0, Rotate.Y_AXIS);
        private final Rotate rz = new Rotate(0, Rotate.Z_AXIS);
        private final Box xAxis;
        private final Box yAxis;
        private final Box zAxis;
        private final Box box;

        private static Content create(double size) {
            Content c = new Content(size);
            c.cube.getChildren().add(c.box);
            c.cube.getTransforms().addAll(c.rz, c.ry, c.rx);
            c.cube.setTranslateX(size / 2);
            c.axes.getChildren().addAll(c.xAxis, c.yAxis, c.zAxis);
            c.axes.getTransforms().addAll(c.rz, c.ry, c.rx);
            c.axes.setTranslateX(-size / 2);
            c.group.getChildren().addAll(c.cube, c.axes);
            return c;
        }

        private Content(double size) {
            xAxis = createBox(size, WIDTH, WIDTH);
            yAxis = createBox(WIDTH, size, WIDTH);
            zAxis = createBox(WIDTH, WIDTH, size);
            double edge = 3 * size / 5;
            box = new Box(edge, edge, edge);
            box.setMaterial(new PhongMaterial(Color.CORAL));
        }

        private Box createBox(double w, double h, double d) {
            Box b = new Box(w, h, d);
            b.setMaterial(new PhongMaterial(Color.AQUA));
            return b;
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("JavaFX 3D");
        Scene scene = new Scene(content.group, SIZE * 2, SIZE * 2, true);
        primaryStage.setScene(scene);
        scene.setFill(Color.BLACK);
        scene.setOnMouseMoved((final MouseEvent e) -> {
            if (e.isShiftDown()) {
                content.rz.setAngle(e.getSceneX() * 360 / scene.getWidth());
            } else {
                content.rx.setAngle(e.getSceneY() * 360 / scene.getHeight());
                content.ry.setAngle(e.getSceneX() * 360 / scene.getWidth());
            }
        });
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(SIZE * 6);
        camera.setTranslateZ(-4 * SIZE);
        scene.setCamera(camera);
        scene.setOnScroll((final ScrollEvent e) -> {
            camera.setTranslateZ(camera.getTranslateZ() + e.getDeltaY());
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Point3D;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Box;
import javafx.scene.shape.DrawMode;
import javafx.scene.shape.Sphere;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Transform;
import javafx.stage.Stage;

/**
 * @see https://stackoverflow.com/a/37755149/230513
 * @see https://stackoverflow.com/a/37743539/230513
 * @see https://stackoverflow.com/a/37370840/230513
 */
public class TriadBox extends Application {

    private static final double SIZE = 300;
    private final Content content = Content.create(SIZE);
    private double mousePosX, mousePosY, mouseOldX, mouseOldY, mouseDeltaX, mouseDeltaY;

    private static final class Content {

        private static final double WIDTH = 3;
        private final Xform group = new Xform();
        private final Group cube = new Group();
        private final Group axes = new Group();
        private final Box xAxis;
        private final Box yAxis;
        private final Box zAxis;
        private final Box box;
        private final Sphere sphere;

        private static Content create(double size) {
            Content c = new Content(size);
            c.cube.getChildren().addAll(c.box, c.sphere);
            c.axes.getChildren().addAll(c.xAxis, c.yAxis, c.zAxis);
            c.group.getChildren().addAll(c.cube, c.axes);
            return c;
        }

        private Content(double size) {
            double edge = 3 * size / 4;
            xAxis = createBox(edge, WIDTH, WIDTH, edge);
            yAxis = createBox(WIDTH, edge / 2, WIDTH, edge);
            zAxis = createBox(WIDTH, WIDTH, edge / 4, edge);
            box = new Box(edge, edge / 2, edge / 4);
            box.setDrawMode(DrawMode.LINE);
            sphere = new Sphere(8);
            PhongMaterial redMaterial = new PhongMaterial();
            redMaterial.setDiffuseColor(Color.CORAL.darker());
            redMaterial.setSpecularColor(Color.CORAL);
            sphere.setMaterial(redMaterial);
            sphere.setTranslateX(edge / 2);
            sphere.setTranslateY(-edge / 4);
            sphere.setTranslateZ(-edge / 8);
        }

        private Box createBox(double w, double h, double d, double edge) {
            Box b = new Box(w, h, d);
            b.setMaterial(new PhongMaterial(Color.AQUA));
            b.setTranslateX(-edge / 2 + w / 2);
            b.setTranslateY(edge / 4 - h / 2);
            b.setTranslateZ(edge / 8 - d / 2);
            return b;
        }
    }

    private static class Xform extends Group {

        private final Point3D px = new Point3D(1.0, 0.0, 0.0);
        private final Point3D py = new Point3D(0.0, 1.0, 0.0);
        private Rotate r;
        private Transform t = new Rotate();

        public void rx(double angle) {
            r = new Rotate(angle, px);
            this.t = t.createConcatenation(r);
            this.getTransforms().clear();
            this.getTransforms().addAll(t);
        }

        public void ry(double angle) {
            r = new Rotate(angle, py);
            this.t = t.createConcatenation(r);
            this.getTransforms().clear();
            this.getTransforms().addAll(t);
        }

        public void rz(double angle) {
            r = new Rotate(angle);
            this.t = t.createConcatenation(r);
            this.getTransforms().clear();
            this.getTransforms().addAll(t);
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("JavaFX 3D");
        Scene scene = new Scene(content.group, SIZE * 2, SIZE * 2, true);
        primaryStage.setScene(scene);
        scene.setFill(Color.BLACK);
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.setFarClip(SIZE * 6);
        camera.setTranslateZ(-2 * SIZE);
        scene.setCamera(camera);
        scene.setOnMousePressed((MouseEvent e) -> {
            mousePosX = e.getSceneX();
            mousePosY = e.getSceneY();
            mouseOldX = e.getSceneX();
            mouseOldY = e.getSceneY();
        });
        scene.setOnMouseDragged((MouseEvent e) -> {
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
            mousePosX = e.getSceneX();
            mousePosY = e.getSceneY();
            mouseDeltaX = (mousePosX - mouseOldX);
            mouseDeltaY = (mousePosY - mouseOldY);
            if (e.isShiftDown()) {
                content.group.rz(-mouseDeltaX * 180.0 / scene.getWidth());
            } else if (e.isPrimaryButtonDown()) {
                content.group.rx(+mouseDeltaY * 180.0 / scene.getHeight());
                content.group.ry(-mouseDeltaX * 180.0 / scene.getWidth());
            } else if (e.isSecondaryButtonDown()) {
                camera.setTranslateX(camera.getTranslateX() - mouseDeltaX * 0.1);
                camera.setTranslateY(camera.getTranslateY() - mouseDeltaY * 0.1);
                camera.setTranslateZ(camera.getTranslateZ() + mouseDeltaY);
            }
        });
        scene.setOnScroll((final ScrollEvent e) -> {
            camera.setTranslateZ(camera.getTranslateZ() + e.getDeltaY());
        });
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37068243" questionTitle="Share model with nested controller">
<Answer><![CDATA[public class NestedGUI extends Application {
    Model model = new Model();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        Parent root = null;
        try {
            FXMLLoader fxmlLoader = new FXMLLoader();
            fxmlLoader.setLocation(getClass().getClassLoader().getResource("Main.fxml"));

            fxmlLoader.setControllerFactory((Class<?> type) -> {
                try {
                    for (Constructor<?> c : type.getConstructors()) {
                        if (c.getParameterCount() == 1 && c.getParameterTypes()[0] == Model.class) {
                            return c.newInstance(model);
                        }
                    }
                    // default behavior: invoke no-arg constructor:
                    return type.newInstance();
                } catch (Exception exc) {
                    throw new RuntimeException(exc);
                }
            });

            root = (BorderPane) fxmlLoader.load();


        } catch (IOException e) {
            e.printStackTrace();
        }

        primaryStage.setScene(new Scene(root));
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<fx:root xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/2.2"
    type="javafx.scene.layout.VBox"
    maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity"
    minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" spacing="15.0"
>
    <children>
        <HBox spacing="10.0">
            <children>
                <Label minWidth="100.0" text="Root folder:" />
                <Label fx:id="label_rootFolder" />
            </children>
        </HBox>
        <TextArea prefHeight="200.0" prefWidth="200.0" />
        <HBox spacing="10.0">
            <children>
                <Label minWidth="100.0" text="Found files:" />
                <Label fx:id="label_filesFound" />
            </children>
        </HBox>
    </children>
    <padding>
        <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
    </padding>
</fx:root>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36995141" questionTitle="Restlet accepts JSON input from client and respond with POST">
<Answer><![CDATA[@Override
@Post("JSON")
public Representation post(Representation entity) throws ResourceException {
    JsonObjectBuilder response = Json.createObjectBuilder();

    try {
        if (entity.getMediaType().isCompatible(MediaType.APPLICATION_JSON)) {
            InputStream is = new FileInputStream(getClass().getResource("/input.json").getFile());

            try (JsonReader reader = Json.createReader(is)) {
                JsonObject obj = reader.readObject();

                // retrieve JSON contents
                int campaingID = obj.getInt("campaignID");
                int clientID = obj.getInt("clientID");
                int pmapID = obj.getInt("pmapID");
                String ward = obj.getString("ward");
                int age = obj.getInt("age");
                String attr1 = obj.getString("attr1");
                String attr2 = obj.getString("attr2");
                String attr3 = obj.getString("attr3");
                String attr4 = obj.getString("attr4");
                String attr5 = obj.getString("attr5");
                String attr6 = obj.getString("attr6");
            }

            // Do processing & execute your SQL query call here
            double result = sqlQueryCall(...);

            response.add("PMC", result);
        }
    } catch (Exception e) {
        getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);
    }

    return new StringRepresentation(response.build().toString());
}]]></Answer>
<Answer><![CDATA[public class JsonUtils {

    private static final Logger LOG = LoggerFactory.getLogger(JsonUtils.class);

    private JsonUtils() {
    }

    public static String toJson(Object object) {
        String jsonString = null;

        ObjectMapper mapper = new ObjectMapper();
        try {
            jsonString = mapper.writeValueAsString(object);
        } catch (JsonProcessingException e) {
            LOG.error(e.getMessage(), e);
        }

        return jsonString;
    }

    public static Map<String, Object> toMap(String jsonString) {
        Map<String, Object> map = new ConcurrentHashMap<>();

        ObjectMapper mapper = new ObjectMapper();

        try {
            map = mapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {
            });
        } catch (IOException e) {
            LOG.error(e.getMessage(), e);
        }

        return map;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36927201" questionTitle="JavaFX ContextMenu in a Functional Paradigm">
<Answer><![CDATA[import java.util.Optional;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class FunctionalContextMenu extends Application {

    @Override
    public void start(Stage primaryStage) {
        Pane root = new Pane();
        ContextMenu menu = new ContextMenu();
        MenuItem item1 = new MenuItem("Item 1");
        MenuItem item2 = new MenuItem("Item 2");
        menu.getItems().addAll(item1, item2);
        root.setOnContextMenuRequested(e -> {
            showMenu(menu, root, e.getScreenX(), e.getScreenY());
        });

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void showMenu(ContextMenu menu, Node anchor, double screenX, double screenY) {
        new Thread(() ->

            showAndWait(menu, anchor, screenX, screenY)
            .ifPresent(item -> System.out.println("You chose "+item.getText()))

        ).start();
    }

    private Optional<MenuItem> showAndWait(ContextMenu menu, Node anchor, double screenX, double screenY) {

        // executing this on the FX Application Thread would cause deadlock,
        // so guard against it:
        if (Platform.isFxApplicationThread()) {
            throw new IllegalStateException("showAndWait cannot be called from the FX Application Thread");
        }

        CountDownLatch latch = new CountDownLatch(1);
        AtomicReference<MenuItem> selectedItem = new AtomicReference<>();
        Platform.runLater(() -> {
            EventHandler<ActionEvent> handler = e -> selectedItem.set((MenuItem)e.getSource());
            menu.setOnHidden(e -> {
                for (MenuItem item : menu.getItems()) {
                    item.removeEventHandler(ActionEvent.ACTION, handler);
                }
                latch.countDown();
            });
            for (MenuItem item : menu.getItems()) {
                item.addEventHandler(ActionEvent.ACTION, handler);
            }
            menu.show(anchor, screenX, screenY);
        });
        try {
            latch.await();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return Optional.ofNullable(selectedItem.get());
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import com.sun.javafx.tk.Toolkit;
import javafx.scene.Node;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;

public class FunctionalContextMenu extends ContextMenu {

    /**
     * Create a new FunctionalContextMenu initialized with the given items
     *
     * @param items the initial menu items
     */
    public FunctionalContextMenu(MenuItem... items) {
        super(items);
    }

    /**
     * Shows the context menu and waits until the user clicks an item or
     * otherwise closes the menu. See
     * {@link #show(javafx.scene.Node, double, double)} for more details
     * regarding the display of the menu.
     *
     * @param anchor
     * @param screenX
     * @param screenY
     * @return the clicked menu item, or {@code null} if the menu was closed
     * without selecting a menu item
     */
    public MenuItem showAndWait(Node anchor, double screenX, double screenY) {
        super.show(anchor, screenX, screenY);

        Object lock = new Object();
        this.setOnAction(actionEvt -> Toolkit.getToolkit().exitNestedEventLoop(lock, actionEvt.getTarget()));
        this.setOnAutoHide(autohideEvt -> Toolkit.getToolkit().exitNestedEventLoop(lock, null));
        super.show(anchor, screenX, screenY);
        return (MenuItem) Toolkit.getToolkit().enterNestedEventLoop(lock);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36901847" questionTitle="How to implement a Java 8 Stream fluent API and lazily computed">
<Answer><![CDATA[@FunctionalInterface
public interface Queryable<T>{

  abstract boolean tryAdvance(Consumer<? super T> action); // <=> Spliterator::tryAdvance

  static <T> boolean truth(Consumer<T> c, T item){
    c.accept(item);
    return true;
  }

  public static <T> Queryable<T> of(Iterable<T> data) {
    final Iterator<T> dataSrc = data.iterator();
    return action -> dataSrc.hasNext() && truth(action, dataSrc.next());
  }

  public default void forEach(Consumer<? super T> action) {
    while (tryAdvance(action)) { }
  }

  public default <R> Queryable<R> map(Function<T, R> mapper) {
    return action -> tryAdvance(item -> action.accept(mapper.apply(item)));
  }
}]]></Answer>
<Answer><![CDATA[public <U> MyStream<U> map(Function<T, U> mapper) {
    return new MyStream<>(cons -> forEach(e -> cons.accept(mapper.apply(e))));
}

public MyStream<T> filter(Predicate<T> pred) {
    return new MyStream<>(cons -> forEach(e -> {
        if(pred.test(e))
            cons.accept(e);
    }));
}

public <U> MyStream<U> flatMap(Function<T, MyStream<U>> mapper) {
    return new MyStream<>(cons -> forEach(e -> mapper.apply(e).forEach(cons)));
}

public MyStream<T> peek(Consumer<T> action) {
    return new MyStream<>(cons -> forEach(e -> {
        action.accept(e);
        cons.accept(e);
    }));
}

public MyStream<T> skip(long n) {
    return new MyStream<>(cons -> {
        long[] count = {0};
        forEach(e -> {
            if(++count[0] > n)
                cons.accept(e);
        });
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36857191" questionTitle="Weekend filter for Java 8 LocalDateTime">
<Answer><![CDATA[package com.example.javatimestuff;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;

/**
 * Answers whether a given temporal value is between Friday 22:00 UTC
 * (inclusive) and Sunday 23:00 UTC (exclusive).
 *
 * @author Basil Bourque. 
 * 
 * © 2016 Basil Bourque
 * This source code may be used according to the terms of the ISC License (ISC). (Basically, do anything but sue me.)
 * https://opensource.org/licenses/ISC
 *
 */
public class WeekendFri2200ToSun2300UtcQuery implements TemporalQuery<Boolean> {

    static private final EnumSet<DayOfWeek> WEEKEND_DAYS = EnumSet.of ( DayOfWeek.FRIDAY , DayOfWeek.SATURDAY , DayOfWeek.SUNDAY );
    static private final OffsetTime START_OFFSET_TIME = OffsetTime.of ( LocalTime.of ( 22 , 0 ) , ZoneOffset.UTC );
    static private final OffsetTime STOP_OFFSET_TIME = OffsetTime.of ( LocalTime.of ( 23 , 0 ) , ZoneOffset.UTC );

    @Override
    public Boolean queryFrom ( TemporalAccessor ta ) {
        if (  ! ( ta instanceof java.time.chrono.ChronoZonedDateTime ) ) {
            throw new IllegalArgumentException ( "Expected a java.time.chrono.ChronoZonedDateTime such as `ZonedDateTime`. Message # b4a9d0f1-7dea-4125-b68a-509b32bf8d2d." );
        }

        java.time.chrono.ChronoZonedDateTime czdt = ( java.time.chrono.ChronoZonedDateTime ) ta;

        Instant instant = czdt.toInstant ();
        OffsetDateTime odt = OffsetDateTime.ofInstant ( instant , ZoneOffset.UTC );
        DayOfWeek dayOfWeek = odt.getDayOfWeek ();
        if (  ! WeekendFri2200ToSun2300UtcQuery.WEEKEND_DAYS.contains ( dayOfWeek ) ) {
            // If day is not one of our weekend days (Fri-Sat-Sun), then we know this moment is not within our weekend definition.
            return Boolean.FALSE;
        }
        // This moment may or may not be within our weekend. Very early Friday or very late Sunday is not a hit.
        OffsetDateTime weekendStart = odt.with ( DayOfWeek.FRIDAY ).toLocalDate ().atTime ( START_OFFSET_TIME );  // TODO: Soft-code with first element of WEEKEND_DAYS.
        OffsetDateTime weekendStop = odt.with ( DayOfWeek.SUNDAY ).toLocalDate ().atTime ( STOP_OFFSET_TIME );  // TODO: Soft-code with last element of WEEKEND_DAYS.

        // Half-Open -> Is equal to or is after the beginning, AND is before the ending.
        // Not Before -> Is equal to or is after the beginning.
        Boolean isWithinWeekend = (  ! odt.isBefore ( weekendStart ) ) && ( odt.isBefore ( weekendStop ) );

        return isWithinWeekend;
    }

    static public String description () {
        return "WeekendFri2200ToSun2300UtcQuery{ " + START_OFFSET_TIME + " | " + WEEKEND_DAYS + " | " + STOP_OFFSET_TIME + " }";
    }

}]]></Answer>
<Answer><![CDATA[public class TestWeekend {
    private static final int FRIDAY = 5;
    private static final int SATURDAY = 6;
    private static final int SUNDAY = 7;
    private static final Integer WEEKEND_START_FRIDAY_CUT_OFF_HOUR = 22;
    private static final Integer WEEKEND_END_SUNDAY_CUT_OFF_HOUR = 23;
    private static List<Integer> weekendDaysList = Arrays.asList(FRIDAY, SATURDAY, SUNDAY);

    public static void main(String []args) throws FileNotFoundException {
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,22,18,39)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,22,21,59)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,22,22,0)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,23,5,0)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,24,8,0)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,24,22,59)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,24,23,0)));
        System.out.println(" is weekend - "+isWeekend(LocalDateTime.of(2016,4,25,11,5)));
    }

    public static  boolean isWeekend(LocalDateTime dateTime) {
        System.out.print("Date - "+dateTime+" , ");
        if(weekendDaysList.contains(dateTime.getDayOfWeek().getValue()) ){
            if(SATURDAY ==  dateTime.getDayOfWeek().getValue()){
                return true;
            }
            if(FRIDAY == dateTime.getDayOfWeek().getValue() && dateTime.getHour() >=WEEKEND_START_FRIDAY_CUT_OFF_HOUR){
               return true;
            }else if(SUNDAY == dateTime.getDayOfWeek().getValue() && dateTime.getHour()  < WEEKEND_END_SUNDAY_CUT_OFF_HOUR ){
                return   true;
            }
        }
        //Checks if dateTime falls in between Friday's 22:00 GMT and Sunday's 23:00 GMT
         return false;
    }

 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36831753" questionTitle="TilePane with automatically stretching tiles in JavaFX">
<Answer><![CDATA[public class ButtonGrid extends Pane {

    private static final double DEFAULT_RATIO = 0.618033987;

    private int                 columnCount;
    private double              ratio;

    public ButtonGrid(int columnCount) {
        this(columnCount, DEFAULT_RATIO);
    }

    public ButtonGrid(int columnCount, double heightToWidthRatio) {
        getStyleClass().add("button-grid");
        this.columnCount = columnCount;
        ratio = heightToWidthRatio;
    }

    public void setColumnCount(int columnCount) {
        this.columnCount = columnCount;
    }

    public void setHeightToWidthRatio(double ratio) {
        this.ratio = ratio;
    }

    @Override
    public Orientation getContentBias() {
        return Orientation.HORIZONTAL;
    }

    @Override
    protected void layoutChildren() {
        double left = getInsets().getLeft();
        double top = getInsets().getTop();

        double tileWidth = calculateTileWidth(getWidth());
        double tileHeight = calculateTileHeight(getWidth());

        ObservableList<Node> children = getChildren();
        double currentX = left;
        double currentY = top;
        for (int idx = 0; idx < children.size(); idx++) {
            if (idx > 0 && idx % columnCount == 0) {
                currentX = left;
                currentY = currentY + tileHeight;
            }
            children.get(idx).resize(tileWidth, tileHeight);
            children.get(idx).relocate(currentX, currentY);
            currentX = currentX + tileWidth;
        }
    }

    @Override
    protected double computePrefWidth(double height) {
        double w = 0;
        for (int idx = 0; idx < columnCount; idx++) {
            Node node = getChildren().get(idx);
            w += node.prefWidth(-1);
        }
        return getInsets().getLeft() + w + getInsets().getRight();
    }

    @Override
    protected double computePrefHeight(double width) {
        double h = calculateTileHeight(width) * getRowCount();
        return getInsets().getTop() + h + getInsets().getBottom();
    }

    private double calculateTileHeight(double width) {
        return calculateTileWidth(width) * ratio;
    }

    private double calculateTileWidth(double width) {
        return (-getInsets().getLeft() + width - getInsets().getRight()) / columnCount;
    }

    private int getRowCount() {
        return getChildren().size() / columnCount;
    }
}]]></Answer>
<Answer><![CDATA[package flowgrid;

import javafx.collections.ObservableList;
import javafx.collections.ListChangeListener;

import javafx.scene.Node;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.Priority;
import javafx.geometry.HPos;
import javafx.geometry.VPos;

import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.NamedArg;

/**
 * This class subclasses the GridPane layout class.
 * It manages its child nodes by arranging them in rows of equal number of tiles.
 * Their order in the grid corresponds to their indexes in the list of children
 * in the following fashion (similarly to how FlowPane works):
 * 
 *      +---+---+---+---+
 *      | 0 | 1 | 2 | 3 |
 *      +---+---+---+---+
 *      | 4 | 5 | 6 | 7 |
 *      +---+---+---+---+
 *      | 8 | 9 | … |   |
 *      +---+---+---+---+
 *  
 * It observes its internal list of children and it automatically reflows them
 * if the number of columns changes or if you add/remove some children from the list.
 * All the tiles of the grid are of the same size and stretch accordingly with the control.
 */
public class FlowGridPane extends GridPane
{
   // Properties for managing the number of rows & columns.
   private IntegerProperty rowsCount;
   private IntegerProperty colsCount;

   public final IntegerProperty colsCountProperty() { return colsCount; }
   public final Integer getColsCount() { return colsCountProperty().get(); }
   public final void setColsCount(final Integer cols) {
      // Recreate column constraints so that they will resize properly.
      ObservableList<ColumnConstraints> constraints = getColumnConstraints();
      constraints.clear();
      for (int i=0; i < cols; ++i) {
         ColumnConstraints c = new ColumnConstraints();
         c.setHalignment(HPos.CENTER);
         c.setHgrow(Priority.ALWAYS);
         c.setMinWidth(60);
         constraints.add(c);
      }
      colsCountProperty().set(cols);
      reflowAll();
   }

   public final IntegerProperty rowsCountProperty() { return rowsCount; }
   public final Integer getRowsCount() { return rowsCountProperty().get(); }
   public final void setRowsCount(final Integer rows) {
      // Recreate column constraints so that they will resize properly.
      ObservableList<RowConstraints> constraints = getRowConstraints();
      constraints.clear();
      for (int i=0; i < rows; ++i) {
         RowConstraints r = new RowConstraints();
         r.setValignment(VPos.CENTER);
         r.setVgrow(Priority.ALWAYS);
         r.setMinHeight(20);
         constraints.add(r);
      }
      rowsCountProperty().set(rows);
      reflowAll();
   }

   /// Constructor. Takes the number of columns and rows of the grid (can be changed later).
   public FlowGridPane(@NamedArg("cols")int cols, @NamedArg("rows")int rows) {
      super();
      colsCount = new SimpleIntegerProperty();  setColsCount(cols);
      rowsCount = new SimpleIntegerProperty();  setRowsCount(rows);
      getChildren().addListener(new ListChangeListener<Node>() {
         public void onChanged(ListChangeListener.Change<? extends Node> change) {
            reflowAll();
         }
      } );
   }

   // Helper functions for coordinate conversions.
   private int coordsToOffset(int col, int row) { return row*colsCount.get() + col; }
   private int offsetToCol(int offset) { return offset%colsCount.get(); }
   private int offsetToRow(int offset) { return offset/colsCount.get(); }

   private void reflowAll() {
      ObservableList<Node> children = getChildren();
      for (Node child : children ) {
         int offs = children.indexOf(child);
         GridPane.setConstraints(child, offsetToCol(offs), offsetToRow(offs) );
      }
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36768137" questionTitle="How can i automatically center the content of a pane while scaling the window in JavaFX?">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.net.URL?>
<?import javafx.scene.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.text.Font?>

<BorderPane xmlns:fx="http://javafx.com/fxml/1" id="AnchorPane" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" fx:controller="ezmovie_prototype.controller_home">
    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>
    <top>
        <VBox fillWidth="true">
            <children>
                <HBox styleClass="search-bar">
                    <ImageView fitWidth="130" fitHeight="70" preserveRatio="true">
                        <Image url="@data/icons/logo.png" />
                    </ImageView>
                    <TextField maxHeight="-Infinity" maxWidth="920.0" minHeight="-Infinity" minWidth="760.0" prefHeight="40.0" prefWidth="920.0" promptText="Suche nach Film, Serien..." VBox.vgrow="SOMETIMES" >
                        <font>
                            <Font size="20.0" />
                        </font>
                        <HBox.margin>
                            <Insets top="30.0" />
                        </HBox.margin>
                    </TextField>
                    <Button fx:id="btnSuchen" maxHeight="-Infinity" maxWidth="160.0" minHeight="-Infinity" minWidth="160.0" mnemonicParsing="false" onAction="#test" prefHeight="40.0" prefWidth="160.0" style="-fx-background-color: #FFFFFF;" text="Suchen">
                        <HBox.margin>
                            <Insets left="20.0" top="30.0" />
                        </HBox.margin>
                        <font>
                            <Font name="System Bold" size="20.0" />
                        </font>
                    </Button>
                </HBox>
                <HBox styleClass="tool-bar" maxHeight="80">
                    <children>
                        <Button fx:id="btnHome" mnemonicParsing="false" onAction="#test" text="Home">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/home.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Button fx:id="btnFavoriten" mnemonicParsing="false" onAction="#test" text="Favoriten">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/favoriten.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Button fx:id="btnFilme" mnemonicParsing="false" onAction="#test" text="Filme">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/movies.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Button fx:id="btnSerien" mnemonicParsing="false" onAction="#test" text="Serien">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/series.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Button fx:id="btnListen" mnemonicParsing="false" onAction="#test" text="Listen">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/list.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Region VBox.vgrow="ALWAYS" prefWidth="9E10" prefHeight="1"></Region><!-- Just a empty placeholder for spacing -->
                        <Button fx:id="btnSettings" mnemonicParsing="false" onAction="#test" text="Settings">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/settings.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                        <Button fx:id="btnLogout" mnemonicParsing="false" onAction="#logout" text="Logout">
                            <graphic>
                                <ImageView fitHeight="30" preserveRatio="true">
                                    <image>
                                        <Image url="@data/icons/logout.png" />
                                    </image>
                                </ImageView>
                            </graphic>
                        </Button>
                    </children>
                </HBox>
            </children>
        </VBox>
    </top>
    <center>
        <VBox alignment="TOP_CENTER" fillWidth="false" >
            <children>
                <fx:include fx:id="film1" source="film.fxml" />
                <fx:include fx:id="film2" source="film.fxml" />
            </children>
        </VBox>
    </center>
</BorderPane>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.chart.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.effect.*?>
<?import javafx.scene.*?>
<?import javafx.scene.web.*?>
<?import java.lang.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.text.Font?>


<StackPane prefHeight="900.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ezmovie_prototype.controller_home">
   <children>
      <GridPane alignment="TOP_CENTER">
         <columnConstraints>
            <ColumnConstraints halignment="CENTER" hgrow="ALWAYS" prefWidth="1280.0" />
         </columnConstraints>
         <rowConstraints>
            <RowConstraints maxHeight="165.0" minHeight="165.0" prefHeight="165.0" vgrow="SOMETIMES" />
            <RowConstraints maxHeight="735.0" minHeight="735.0" prefHeight="735.0" vgrow="SOMETIMES" />
         </rowConstraints>
         <children>
            <GridPane alignment="TOP_CENTER" prefHeight="165.0" prefWidth="1280.0" GridPane.halignment="CENTER">
               <columnConstraints>
                  <ColumnConstraints halignment="CENTER" hgrow="ALWAYS" />
               </columnConstraints>
               <rowConstraints>
                  <RowConstraints maxHeight="100.0" minHeight="100.0" prefHeight="100.0" vgrow="SOMETIMES" />
                  <RowConstraints maxHeight="65.0" minHeight="65.0" prefHeight="65.0" vgrow="SOMETIMES" />
               </rowConstraints>
               <children>
                  <GridPane prefHeight="100.0" prefWidth="1080.0" style="-fx-background-color: #C60F25;" GridPane.halignment="CENTER">
                    <columnConstraints>
                        <ColumnConstraints fillWidth="false" hgrow="SOMETIMES" maxWidth="160.0" minWidth="160.0" percentWidth="0.0" prefWidth="160.0" />
                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="920.0" minWidth="920.0" percentWidth="0.0" prefWidth="920.0" />
                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="200.0" minWidth="200.0" prefWidth="200.0" />
                    </columnConstraints>
                    <rowConstraints>
                      <RowConstraints maxHeight="100.0" minHeight="100.0" prefHeight="100.0" vgrow="SOMETIMES" />
                    </rowConstraints>
                     <children>
                        <TextField maxHeight="-Infinity" maxWidth="920.0" minHeight="-Infinity" minWidth="760.0" nodeOrientation="LEFT_TO_RIGHT" prefHeight="40.0" prefWidth="920.0" promptText="Suche nach Film, Serien..." GridPane.columnIndex="1" GridPane.halignment="LEFT" GridPane.valignment="TOP">
                           <font>
                              <Font size="20.0" />
                           </font>
                           <GridPane.margin>
                              <Insets top="30.0" />
                           </GridPane.margin>
                        </TextField>
                        <Button fx:id="btnSuchen" maxHeight="-Infinity" maxWidth="160.0" minHeight="-Infinity" minWidth="160.0" mnemonicParsing="false" onAction="#test" prefHeight="40.0" prefWidth="160.0" style="-fx-background-color: #FFFFFF;" text="Suchen" GridPane.columnIndex="2" GridPane.halignment="LEFT" GridPane.valignment="TOP">
                           <GridPane.margin>
                              <Insets left="20.0" top="30.0" />
                           </GridPane.margin>
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                        </Button>
                        <Button maxHeight="70.0" maxWidth="130.0" minHeight="70.0" minWidth="130.0" mnemonicParsing="false" prefHeight="70.0" prefWidth="130.0" text="Button" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/logo.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                     </children>
                  </GridPane>
                  <GridPane prefHeight="65.0" prefWidth="1280.0" style="-fx-background-color: #585858;" GridPane.halignment="CENTER" GridPane.rowIndex="1">
                    <columnConstraints>
                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="90.0" prefWidth="90.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="100.0" prefWidth="100.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="100.0" prefWidth="100.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="100.0" prefWidth="100.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="100.0" prefWidth="100.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="580.0" minWidth="580.0" prefWidth="580.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="0.0" prefWidth="0.0" />
                        <ColumnConstraints hgrow="SOMETIMES" maxWidth="100.0" minWidth="100.0" prefWidth="100.0" />
                    </columnConstraints>
                    <rowConstraints>
                      <RowConstraints maxHeight="65.0" minHeight="65.0" prefHeight="65.0" vgrow="SOMETIMES" />
                    </rowConstraints>
                     <children>
                        <Button fx:id="btnHome" alignment="CENTER" contentDisplay="RIGHT" maxHeight="60.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/home.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                           <GridPane.margin>
                              <Insets />
                           </GridPane.margin>
                        </Button>
                        <Button fx:id="btnFavoriten" alignment="CENTER" contentDisplay="RIGHT" maxHeight="60.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="1" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/favoriten.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                        <Button fx:id="btnListen" alignment="CENTER" contentDisplay="RIGHT" maxHeight="0.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="4" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/list.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                        <Button fx:id="btnSerien" alignment="CENTER" contentDisplay="RIGHT" maxHeight="60.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/series.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                        <Button fx:id="btnFilme" alignment="CENTER" contentDisplay="RIGHT" maxHeight="60.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="2" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/movies.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                        <Button fx:id="btnLogout" alignment="CENTER" contentDisplay="RIGHT" maxHeight="0.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#logout" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="7" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/logout.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                        <Button fx:id="btnSettings" alignment="CENTER" contentDisplay="RIGHT" maxHeight="0.0" maxWidth="60.0" minHeight="60.0" minWidth="60.0" mnemonicParsing="false" onAction="#test" prefHeight="60.0" prefWidth="60.0" text="Home" GridPane.columnIndex="6" GridPane.halignment="CENTER" GridPane.valignment="CENTER">
                           <effect>
                              <ImageInput>
                                 <source>
                                    <Image url="file:/C:/Users/Administrator/workspace/ezmovie_prototype/data/icons/settings.png" />
                                 </source>
                              </ImageInput>
                           </effect>
                        </Button>
                     </children>
                  </GridPane>
               </children>
            </GridPane>
            <BorderPane prefHeight="715.0" prefWidth="1280.0" style="-fx-background-color: FFFFFF;" GridPane.halignment="CENTER" GridPane.rowIndex="1">
               <center>
                  <GridPane style="-fx-background-color: #FFFFFF;" BorderPane.alignment="CENTER">
                    <columnConstraints>
                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="9999.0" minWidth="1280.0" prefWidth="1280.0" />
                    </columnConstraints>
                    <rowConstraints>
                        <RowConstraints maxHeight="65.0" minHeight="65.0" prefHeight="65.0" vgrow="SOMETIMES" />
                      <RowConstraints maxHeight="280.0" minHeight="280.0" prefHeight="280.0" vgrow="SOMETIMES" />
                      <RowConstraints maxHeight="65.0" minHeight="65.0" prefHeight="65.0" vgrow="SOMETIMES" />
                      <RowConstraints maxHeight="280.0" minHeight="280.0" prefHeight="280.0" vgrow="SOMETIMES" />
                    </rowConstraints>
                     <children>
                        <BorderPane prefHeight="230.0" prefWidth="1130.0" style="-fx-border-color: #000000; -fx-border-radius: 10px;" GridPane.rowIndex="1">
                           <opaqueInsets>
                              <Insets bottom="10.0" top="10.0" />
                           </opaqueInsets>
                           <GridPane.margin>
                              <Insets bottom="10.0" left="20.0" right="20.0" top="10.0" />
                           </GridPane.margin>
                           <center>
                              <GridPane maxHeight="200.0" maxWidth="1200.0" minHeight="200.0" minWidth="1200.0" prefHeight="200.0" prefWidth="1200.0" BorderPane.alignment="CENTER">
                                <columnConstraints>
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                  <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                  <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                </columnConstraints>
                                <rowConstraints>
                                  <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                                </rowConstraints>
                                 <BorderPane.margin>
                                    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
                                 </BorderPane.margin>
                              </GridPane>
                           </center>
                           <bottom>
                              <ScrollBar BorderPane.alignment="CENTER">
                                 <BorderPane.margin>
                                    <Insets bottom="5.0" left="10.0" right="10.0" />
                                 </BorderPane.margin>
                              </ScrollBar>
                           </bottom>
                        </BorderPane>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Beliebte Filme" GridPane.halignment="LEFT" GridPane.valignment="TOP">
                           <GridPane.margin>
                              <Insets left="20.0" top="20.0" />
                           </GridPane.margin>
                           <font>
                              <Font name="System Bold" size="36.0" />
                           </font>
                        </Text>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Beliebte Filme" GridPane.halignment="LEFT" GridPane.rowIndex="2" GridPane.valignment="TOP">
                           <font>
                              <Font name="System Bold" size="36.0" />
                           </font>
                           <GridPane.margin>
                              <Insets left="20.0" top="20.0" />
                           </GridPane.margin>
                        </Text>
                        <BorderPane prefHeight="230.0" prefWidth="1130.0" style="-fx-border-color: #000000; -fx-border-radius: 10px;" GridPane.rowIndex="3">
                           <GridPane.margin>
                              <Insets bottom="10.0" left="20.0" right="20.0" top="10.0" />
                           </GridPane.margin>
                           <center>
                              <GridPane maxHeight="200.0" maxWidth="1200.0" minHeight="200.0" minWidth="1200.0" prefHeight="200.0" prefWidth="1200.0" BorderPane.alignment="CENTER">
                                <columnConstraints>
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                  <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                  <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                                </columnConstraints>
                                <rowConstraints>
                                  <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                                </rowConstraints>
                                 <BorderPane.margin>
                                    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
                                 </BorderPane.margin>
                              </GridPane>
                           </center>
                           <bottom>
                              <ScrollBar BorderPane.alignment="CENTER">
                                 <BorderPane.margin>
                                    <Insets bottom="5.0" left="10.0" right="10.0" />
                                 </BorderPane.margin>
                              </ScrollBar>
                           </bottom>
                        </BorderPane>
                     </children>
                  </GridPane>
               </center>
            </BorderPane>
         </children>
      </GridPane>
   </children>
</StackPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36634978" questionTitle="Is there a &quot;best&quot; way to invoke a class method from a static method?">
<Answer><![CDATA[public class Starter extends Application {

    @Override
    public void start(Stage primaryStage) {
        ViewController controller1 = new ViewController();
        ViewController controller2 = new ViewController();

        Synchronizer synchronizer = new Synchronizer();
        synchronizer.add(controller1);
        synchronizer.add(controller2);

        VBox box = new VBox(controller1.root, controller2.root);
        primaryStage.setScene(new Scene(box));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    public interface SyncTarget {

        Node getSyncNode();

        void triggerAction();

    }

public class Synchronizer {

    private ObservableList<SyncTarget> syncTargets;

    private EventHandler<Event>        eventHandler;

    public Synchronizer() {
        syncTargets = FXCollections.observableArrayList();
        eventHandler = e -> sync();

    }

    public void add(SyncTarget target) {
        syncTargets.add(target);
        target.getSyncNode().addEventHandler(ActionEvent.ANY, eventHandler);
    }

    public void remove(SyncTarget target) {
        syncTargets.remove(target);
        target.getSyncNode().removeEventHandler(ActionEvent.ANY, eventHandler);
    }

    public void sync() {
        for (SyncTarget target : syncTargets) {
            target.triggerAction();
        }
    }
}


    public class ViewController implements SyncTarget {

        private StackPane root;
        private Button    button;

        public ViewController() {
            button = new Button();
            root = new StackPane(button);
        }

        @Override
        public Node getSyncNode() {
            return button;
        }


        @Override
        public void triggerAction() {
            //action
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.event.*;
import javafx.fxml.*;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.stage.*;

import java.io.IOException;

class CustomerDialogController {
    @FXML
    private Label customerName;

    private EventHandler<Event> customEventHandler = event -> {
        // handle the event...
    };

    void initData(Customer customer) {
        customerName.setText(customer.getName());
    }

    public EventHandler<Event> getCustomEventHandler() {
        return customEventHandler;
    }
}

public class EventHandling {
    public Stage showCustomerDialog(Customer customer) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("customerDialog.fxml"));

        Stage stage = new Stage(StageStyle.DECORATED);
        stage.setScene(new Scene(loader.load()));

        CustomerDialogController controller = loader.getController();
        controller.initData(customer);

        stage.addEventHandler(Event.ANY, controller.getCustomEventHandler());
        stage.show();

        return stage;
    }    
}

class Customer {
    private String name;

    Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36587295" questionTitle="how to make use of google map javascript">
<Answer><![CDATA[<!DOCTYPE html>
<html>
<head>
<script
src="http://maps.googleapis.com/maps/api/js">
</script>

<script>
function initialize() {
  var mapProp = {
    center:new google.maps.LatLng(51.508742,-0.120850),
    zoom:5,
    mapTypeId:google.maps.MapTypeId.ROADMAP
  };
  var map=new google.maps.Map(document.getElementById("googleMap"), mapProp);
}
google.maps.event.addDomListener(window, 'load', initialize);
</script>
</head>

<body>
<div id="googleMap" style="width:500px;height:380px;"></div>

</body>
</html>]]></Answer>
<Answer><![CDATA[<script type="text/javascript">

    var map;
        function initialize() {
            var myLatlng = new google.maps.LatLng(24.18061975930,79.36565089010);
            var myOptions = {
                zoom:7,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            map = new google.maps.Map(document.getElementById("map"), myOptions);
            // marker refers to a global variable
            marker = new google.maps.Marker({
                position: myLatlng,
                map: map
            });

            google.maps.event.addListener(map, "click", function(event) {
                // get lat/lon of click
                var clickLat = event.latLng.lat();
                var clickLon = event.latLng.lng();

                // show in input box
                document.getElementById("lat").value = clickLat.toFixed(5);
                document.getElementById("lon").value = clickLon.toFixed(5);

                  var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(clickLat,clickLon),
                        map: map
                     });
            });
    }   

        window.onload = function () { initialize() };

    </script>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36585761" questionTitle="Store dynamic screen with multiple stages">
<Answer><![CDATA[public interface ScreenController {
        void setOnSwitchStage(EventHandler<ActionEvent> handler);
}

public class Screen1Controller implements Initializable, ScreenController {

    @FXML
    private Button btnSwitchScreen

    public Screen1Controller() {
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
    }

     @Override
    public void setOnSwitchStage(EventHandler<ActionEvent> handler) {
        btnSwitchScreen.setOnAction(handler);
    }
}

public class YourApp extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        Stage secondaryStage = new Stage();

        initScreen(primaryStage, secondaryStage, "screen1.fxml");
        initScreen(secondaryStage, primaryStage, "screen2.fxml");

        primaryStage.show();
    }

    private void initScreen(Stage parentStage, Stage nextStage, String resource) throws IOException {
    FXMLLoader loader = new FXMLLoader(getClass().getResource(resource));
    Scene scene = new Scene(loader.load());
    parentStage.setScene(scene);

    ScreenController screenController = loader.getController();
    screenController.setOnSwitchStage(evt -> {
        nextStage.show();
        parentStage.hide();
    });
}

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[static Stage primaryStage;

@FXML
private void goToScreen1(ActionEvent event) throws Exception{


    Stage stage = (Stage) showStage.getScene().getWindow();
    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/sample.fxml"));
    Parent root = fxmlLoader.load();

    if(primaryStage==null)
    primaryStage = new Stage();

    primaryStage.setResizable(true);
    primaryStage.setOpacity(0.0);
    primaryStage.show();

    primaryStage.setX(0);
    primaryStage.setY(0);
    primaryStage.setHeight(primScreenBounds.getHeight());
    primaryStage.setWidth(primScreenBounds.getWidth() / 2);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36552756" questionTitle="How to automatically include the execution of a parent's method in all child constructors?">
<Answer><![CDATA[public abstract class Parent {
    {
         // this is an initializer block that is inherited 
         // by all subclasses and runs for every constructor
         // in the hierarchy
        this.doSetup();
    }

    protected final void sayHi() { // final to avoid this to escape
        System.out.println("hi");
    }

    protected final void doSetup() { // final to avoid this to escape
        sayHi();
    }
}

public class Child1 extends Parent {

    public Child1() {
        // initilizer block automatically called
    }

    public Child1(String string) {
        // initilizer block automatically called
        System.out.println("another constructor");
    }
}]]></Answer>
<Answer><![CDATA[class Base {
    Base() {
        init();
    }

    protected void init() {
    }
}
class Child extends base {
    String a = "a";
    String b;
    String c = "c";
    String d;

    public Child() {
        // 1. Fields are nulled
        // 2. super() called
        // 2.1. init() called
        // 3. Field initialisations done (a, c)
        // 4. Rest of constructor:
        System.out.printf("EndConstr a: %s, b: %s, c: %s%n", a, b, c);
    }

    @Overridable
    protected void init() {
        System.out.printf("Init a: %s, b: %s, c: %s%n", a, b, c);
        c = "cc";
        d = "dd";
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36551431" questionTitle="Can you write two different Java FX scenes as two separate classes?">
<Answer><![CDATA[private Parent content;
private static VMCSManager instance;

public VMCSManager() {
    instance=this;
}

public static void main(String[] args) {    
    launch(args);
}

public static VMCSManager getInstance() {
    return instance;
}

@Override
public void start(Stage primaryStage) throws Exception {    
    initializePanel();  
    Scene scene = new Scene(content);
    stageStyle(primaryStage);
    primaryStage.setScene(scene);
    primaryStage.show();
}

private void initializePanel() throws IOException{
    FXMLLoader loader = new FXMLLoader();
    loader.setLocation(getClass().getResource("fxml/SimulatorDisplay.fxml"));
    content = loader.load(); 
}

public void openCustomerPanel() throws IOException{
    FXMLLoader loader = new FXMLLoader();
    loader.setLocation(getClass().getResource("fxml/CustomerDisplay.fxml"));
    content = loader.load(); 
    Scene scene = new Scene(content);
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public class SwitchSceneSample extends Application {
public static void main(String[] args) {
    launch(args);
}

Stage window;
Scene scene1, scene2;

@Override
public void start(Stage primaryStage) throws Exception {
    // I am using window as primaryStage
    window = primaryStage;
    // Label 1
    Label label1 = new Label("Welcome to the first scene!");
    // Label 2
    Label label2 = new Label("This is second scene!");
    // Button 1, by pressing this button primaryStage will be set as scene 2
    Button button1 = new Button("Go to scene 2");
    button1.setOnAction(e -> window.setScene(scene2));
    // Button 2, by pressing this button primaryStage will be set as scene 1
    Button button2 = new Button("Click to go scene 1");
    button2.setOnAction(e -> window.setScene(scene1));
    // Creating an object of the class'LayoutOne.java'
    LayoutOne l1 = new LayoutOne();
    // set my scene 1(by calling method called 'sceneView1()' from class 'LayoutOne.java')
    scene1 = new Scene(l1.sceneView1(label1, button1), 200, 200);
    // Set my scene 2 inside my main class
    StackPane layout2 = new StackPane();
    layout2.getChildren().addAll(label2, button2);
    scene2 = new Scene(layout2, 600, 300);
    // Making my 
    window.setScene(scene1);
    window.setTitle("Scene Switch Sample");
    window.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36549829" questionTitle="JavaFX Spinner empty text nullpointerexception">
<Answer><![CDATA[public IntegerSpinnerValueFactory(@NamedArg("min") int min,
                                      @NamedArg("max") int max,
                                      @NamedArg("initialValue") int initialValue,
                                      @NamedArg("amountToStepBy") int amountToStepBy) {
        setMin(min);
        setMax(max);
        setAmountToStepBy(amountToStepBy);
        setConverter(new IntegerStringConverter());

        valueProperty().addListener((o, oldValue, newValue) -> {
            // when the value is set, we need to react to ensure it is a
            // valid value (and if not, blow up appropriately)
            if (newValue < getMin()) { 
                setValue(getMin());
            } else if (newValue > getMax()) {
                setValue(getMax());
            }
        });
        setValue(initialValue >= min && initialValue <= max ? initialValue : min);
    }]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;
import javafx.stage.Stage;
import javafx.util.StringConverter;

public class Test extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage aPrimaryStage) throws Exception {
        IntegerSpinnerValueFactory valueFactory = new IntegerSpinnerValueFactory(0, 10);

        valueFactory.setConverter(new StringConverter<Integer>() {

            @Override
            public String toString(Integer object) {
                return object.toString() ;
            }

            @Override
            public Integer fromString(String string) {
                if (string.matches("-?\\d+")) {
                    return new Integer(string);
                }
                // default to 0:
                return 0 ;
            }

        });

        Spinner<Integer> spinner = new Spinner<>(valueFactory);
        spinner.setEditable(true);
        aPrimaryStage.setScene(new Scene(spinner));
        aPrimaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;
import javafx.stage.Stage;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

public class Spin extends Application {
    Spinner<Integer> spinner;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage aPrimaryStage) throws Exception {
        IntegerSpinnerValueFactory valueFactory = new IntegerSpinnerValueFactory(0, 10);
        spinner = new Spinner<>(valueFactory);
        spinner.setEditable(true);
        spinner.valueProperty().addListener((observableValue, oldValue, newValue) -> handleSpin(observableValue, oldValue, newValue));

        aPrimaryStage.setScene(new Scene(spinner));
        aPrimaryStage.show();
    }

    private void handleSpin(ObservableValue<?> observableValue, Number oldValue, Number newValue) {
        try {
            if (newValue == null) {
                spinner.getValueFactory().setValue((int)oldValue);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36515667" questionTitle="JavaFX filter implementation (How to handle multiple Boolean options)">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    CheckBox[] boxes = new CheckBox[]{new CheckBox("a"), new CheckBox("b"), new CheckBox("c")};
    List<Function<Boolean, String>> clausesConstructor = Arrays.asList(
            b -> b ? "a >= 1" : null,
            b -> b ? "b LIKE '%42'" : null,
            b -> b ? "c" : null
    );

    Button btn = new Button();
    btn.setText("Query");
    btn.setOnAction((ActionEvent event) -> {
        List<String> list = IntStream.range(0, boxes.length)
                .mapToObj(i -> clausesConstructor.get(i).apply(boxes[i].isSelected()))
                .filter(Objects::nonNull).collect(Collectors.toList());

        System.out.println(list.isEmpty() ? "SELECT * FROM table" : list.stream().collect(Collectors.joining(") AND (", "SELECT * FROM table WHERE (", ")")));
    });
    VBox vbox = new VBox(10);
    vbox.getChildren().addAll(boxes);
    vbox.getChildren().add(btn);
    Scene scene = new Scene(vbox);

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args)  {

        //each booleans represents an option (the state of one check box )
        //this example simulates 3 options 
        boolean option1 = true;
        boolean option2 = true;
        boolean option3 = true;

        //represent each boolean as binary (0 or 1 ) string
        String binString1 = (option1) ? "1" : "0";
        String binString2 = (option2) ? "1" : "0";
        String binString3 = (option3) ? "1" : "0";

        //add all strings to one word 
        String binaryAsString = binString1+binString2+binString3;

        //phrase it to int 
        // Use as radix 2 because it's binary
        int number = Integer.parseInt(binaryAsString, 2);

        //for 3 options (bits) you will get 8 different values, from 
        //0 (all false) to 7 (all true)
        System.out.println(option1 + " "+ option2 + " "+ option3 + " = "+ number);

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36514023" questionTitle="How can I count if a specific set of digits are present in an array">
<Answer><![CDATA[private static long digitProcessSystem(long N) {
long numberN = N;
String number = Long.toString(N);
String[] arr = number.split("");;
int arr2=new int[10];
int sum=0;
while(sum != 10){
    sum=0;
    // add N to number
    numberN += N;
    // Parse the new number
    number = Long.toString(numberN);
    // If it doesn´t have 10 digitis continue here yet
    if(number.length() < 10) continue;
    // split
    arr = number.split("");
    for(int i=0;i<arr.length;i++){
        arr2[arr]=1;
    }
    for(int i=0;i<10;i++){
        sum+=arr2[i];
    }
};
return numberN;
}]]></Answer>
<Answer><![CDATA[private static long digitProcessSystem(long N) {
    long numberN = N;
    String number = Long.toString(N);
    // calculate 10 digits number here yet
    if (number.length() < 10) {
        // using the smallest possible number with each digit
        // By using this number we are most likely allmost at the result
        // This will increase the performance for small digits heavily.
        long divider = 1023456789L / numberN;
        numberN *= divider;
    }
    number = Long.toString(numberN);
    String[] arr = number.split("");
    Set<String> input = new HashSet<>(Arrays.asList(arr));
    while(input.size() != 10){
        // add N to number
        numberN += N;
        // Parse the new number
        number = Long.toString(numberN);
        // split
        arr = number.split("");
        // clear set
        input.clear();
        // Add the new numbers to the set. If it has the size 10 now the loop will stop and return the number.
        input.addAll(Arrays.asList(arr));
    };
    return numberN;
}

public static void main(String[] args) {
    System.out.println(digitProcessSystem(123));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36478579" questionTitle="Java: The elegant way to add a line number to a file with lambda">
<Answer><![CDATA[public static <T> Stream<T> streamOf(Iterator<T> iterator) {
    return StreamSupport.stream(
            Spliterators.spliteratorUnknownSize(
                    iterator,
                    Spliterator.ORDERED),
            false);
}

public static <T> Stream<Tuple2<T, Long>> withIndex(
    Stream<T> stream, int startIndex) {

    Iterator<T> it = stream.iterator();
    return streamOf(new Iterator<Tuple2<T, Long>>() {

        private long index = startIndex;

        @Override
        public boolean hasNext() {
            return it.hasNext();
        }

        @Override
        public Tuple2<T, Long> next() {
            return new Tuple2<>(it.next(), index++);
        }
    });
}]]></Answer>
<Answer><![CDATA[static Stream<String> numberedLines(Path path, Charset cs) throws IOException {
    BufferedReader br = Files.newBufferedReader(path, cs);
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<String>(
            Long.MAX_VALUE, Spliterator.ORDERED|Spliterator.NONNULL) {
        int counter;
        public boolean tryAdvance(Consumer<? super String> action) {
            String line;
            try {
                line = br.readLine();
                if(line==null) return false;
                action.accept("Line " + counter++ + ": " + line.trim());
                return true;
            } catch (IOException ex) {
                throw new UncheckedIOException(ex);
            }
        }
    }, true).onClose(()->{ try { br.close(); }
        catch (IOException ex) { throw new UncheckedIOException(ex); }
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36457285" questionTitle="Java: how to check for boolean conditions in two-dimensional lists/arrays?">
<Answer><![CDATA[import com.google.common.base.Optional;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import org.junit.Assert;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

public class ValidationTest {

    @Test
    public void test() {
        // Here is the initial table, you can play with it.
        List<List<Boolean>> list = new ArrayList<List<Boolean>>() {{
            add(new ArrayList<Boolean>() {{
                add(false);
                add(false);
                add(false);
                add(false);
            }});
            add(new ArrayList<Boolean>() {{
                add(true);
                add(false);
                add(false);
                add(false);
            }});
            add(new ArrayList<Boolean>() {{
                add(true);
                add(true);
                add(true);
                add(true);
            }});
        }};
        boolean checkBooleanRule = this.checkBooleanRule(list);
        Assert.assertTrue("The table is invalid", checkBooleanRule);
    }

    private boolean checkRow(List<Boolean> row, final boolean value) {
        // If checking everything is true/false, let's just find if there is a False = !value
        return row.contains(!value);
    }

    private boolean checkBooleanRule(final List<List<Boolean>> inputList) {
        // Gets the row that brake the rule!
        Optional<List<Boolean>> invalidRow = Iterables.tryFind(inputList, new Predicate<List<Boolean>>() {
            @Override
            public boolean apply(List<Boolean> inputRow) {
                if (!checkRow(inputRow, true))
                    return false;
                if (!checkRow(inputRow, false))
                    return false;
                return (inputRow.get(0) ? checkRow(inputRow.subList(1, inputRow.size()), false) : true);
            }
        });
        // If Present, then, the Table is invalid! == There is a row with a false!
        return !invalidRow.isPresent();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;

import java.util.stream.Stream;

public class Main {

    public static void main(String[] args) {

        ArrayList<Boolean> array = new ArrayList<Boolean>();
        array.add(true);
        array.add(true);
        array.add(true);
        array.add(false);

        //the simplest to read way 
        Stream<Boolean> arrayChecker = array.stream().filter(a -> a == true);

       //Checks if the stream filter is equal to the array size. If so then all true 
        System.out.println(arrayChecker.count() == array.size() );

        //the better way thanks to @ccpizza
        Stream<Boolean> arrayChecker = array.stream().filter(Boolean::booleanValue);

        //Even better way
        array.stream().allMatch(Boolean::booleanValue);

       //so basic I missed it. Thanks to @Holger
       System.out.println(! array.contains(false));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36444839" questionTitle="grouping objects java 8">
<Answer><![CDATA[List<MyClass> inputs = Arrays.asList(
    new MyClass(1L, 100L),
    new MyClass(1L, 101L),
    new MyClass(1L, 102L),
    new MyClass(1L, 103L),
    new MyClass(2L, 200L),
    new MyClass(2L, 201L),
    new MyClass(2L, 202L),
    new MyClass(2L, 203L)
);

Map<Long, List<Long>> result = inputs
    .stream()
    .collect(
      Collectors.groupingBy(MyClass::getStackId,
        Collectors.mapping(
          MyClass::getQuestionId, 
          Collectors.toList()
        )
      )
    );]]></Answer>
<Answer><![CDATA[import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class RandomTest {

    class MyClass {
        private Long stackId;
        private Long questionId;

        public MyClass(Long stackId, Long questionId) {
            this.stackId = stackId;
            this.questionId = questionId;
        }

        public Long getStackId() {
            return stackId;
        }

        public Long getQuestionId() {
            return questionId;
        }
    }

    public class MyOtherClass {
        private Long stackId;
        private Set<Long> questionIds;

        public MyOtherClass(Long stackId, Set<Long> questionIds) {
            this.stackId = stackId;
            this.questionIds = questionIds;
        }

        public Long getStackId() {
            return stackId;
        }

        public Set<Long> getQuestionIds() {
            return questionIds;
        }
    }

    @Test
    public void test() {
        List<MyClass> classes = new ArrayList<>();
        List<MyOtherClass> otherClasses = new ArrayList<>();

        //populate the classes list
        for (int j = 1; j <= 25; j++) {
            for (int i = 0; i < 4; i++) {
                classes.add(new MyClass(0L + j, (100L*j) + i));
            }
        }

        //populate the otherClasses List
        classes.stream().collect(Collectors
                .groupingBy(MyClass::getStackId, Collectors.mapping(MyClass::getQuestionId, Collectors.toSet())))
                .entrySet().stream().forEach(
                longSetEntry -> otherClasses.add(new MyOtherClass(longSetEntry.getKey(), longSetEntry.getValue())));

        //print the otherClasses list
        otherClasses.forEach(myOtherClass -> {
            System.out.print(myOtherClass.getStackId() + ": [");
            myOtherClass.getQuestionIds().forEach(questionId-> System.out.print(questionId + ","));
            System.out.println("]");
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36393170" questionTitle="JavaFX layout based on percentage of window size">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.Region?>
<?import javafx.scene.layout.VBox?>

<VBox xmlns:fx="http://javafx.com/fxml" alignment="CENTER">
    <Region VBox.vgrow="ALWAYS"> 
        <maxHeight><Double fx:constant="MAX_VALUE" /></maxHeight>
    </Region>
    <Label text="Label 1"/> 
    <Region VBox.vgrow="ALWAYS"> 
        <maxHeight><Double fx:constant="MAX_VALUE" /></maxHeight>
    </Region>
    <Label text="Label 2"/> 
    <Region VBox.vgrow="ALWAYS"> 
        <maxHeight><Double fx:constant="MAX_VALUE" /></maxHeight>
    </Region>
    <Label text="Label 3"/> 
    <Region VBox.vgrow="ALWAYS"> 
        <maxHeight><Double fx:constant="MAX_VALUE" /></maxHeight>
    </Region>
</VBox>]]></Answer>
<Answer><![CDATA[import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.RowConstraints;

/**
 * a GridPane with Column and RowConstraints
 * @author wf
 *
 */
public class ConstrainedGridPane extends GridPane {


  /**
   * fix the columnSizes to the given column Width
   * @param colWidths
   */
  public void fixColumnSizes(int hGap,int... colWidths) {
    this.setHgap(hGap);
    // Setting columns size in percent
    for (int colWidth : colWidths) {
      ColumnConstraints column = new ColumnConstraints();
      column.setPercentWidth(colWidth);
      getColumnConstraints().add(column);
    }
  }

  /**
   * fix the rowSizes to the given rowHeights
   * @param rowHeights
   */
  public void fixRowSizes(int vGap,int... rowHeight) {
    this.setVgap(vGap);
    for (int rowWidth : rowHeight) {
      RowConstraints rowc = new RowConstraints();
      rowc.setPercentHeight(rowWidth);
      getRowConstraints().add(rowc);
    }

    // grid.setPrefSize(WINDOW_WIDTH, WINDOW_HEIGHT); // Default width and
    // height
    this.setMaxSize(Region.USE_COMPUTED_SIZE, Region.USE_COMPUTED_SIZE);
  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
import javafx.stage.Stage;

public class LayoutExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        GridPane root = new GridPane();
        int numRows = 4 ;
        for (int i = 0 ; i < numRows ; i++) {
            RowConstraints rc = new RowConstraints();
            rc.setPercentHeight(100.0 / numRows);
            rc.setValignment(VPos.BOTTOM);
            root.getRowConstraints().add(rc);
        }
        ColumnConstraints cc = new ColumnConstraints();
        cc.setHalignment(HPos.CENTER);
        cc.setPercentWidth(100);
        root.getColumnConstraints().add(cc);

        for (int row = 0; row < 3 ; row++) {
            Label label = new Label("Label "+(row+1));
            root.add(label, 0, row);
        }

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36308757" questionTitle="Making More Than One Circle in Java">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Circle;
import javafx.scene.paint.*;

public class TryingGraphicsStuff extends Application{
    @Override
    public void start(Stage stage) throws Exception {

            Circle[] circle = new Circle[3];          // create 3 circles
            VBox vBox = new VBox();                   // vbox will put circles in vertical row
            vBox.setAlignment(Pos.CENTER);            // center circles

            for(int i = 0; i < circle.length; i++){
                circle[i] = new Circle(50);           // initialize circles with radius of 50
                vBox.getChildren().add(circle[i]);
            }

            circle[0].setFill(Color.RED);
            circle[1].setFill(Color.YELLOW);
            circle[2].setFill(Color.GREEN);

            // add vbox to scene

            Scene scene = new Scene(vBox, 300, 800);
            stage.setTitle("Circle");
            stage.setScene(scene);
            stage.show();
    }
    public static void main (String [] args){
        Application.launch(args);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class CircleLayoutExample extends Application {

    @Override
    public void start(Stage primaryStage) {

        TabPane tabs = new TabPane();

        tabs.getTabs().add(createTab(new StackPane()));
        tabs.getTabs().add(createTab(new VBox()));
        tabs.getTabs().add(createTab(new Pane()));
        tabs.getTabs().add(createTab(new Group()));

        Scene scene = new Scene(tabs, 600, 600);
        primaryStage.setScene(scene);

        primaryStage.show();
    }

    private Tab createTab(Pane pane) {
        Circle c1 = new Circle(150, 150, 50, Color.RED);
        Circle c2 = new Circle(400, 400, 50, Color.YELLOW);

        pane.getChildren().addAll(c1, c2);

        Tab tab = new Tab(pane.getClass().getSimpleName());
        tab.setContent(pane);
        return tab ;
    }

    // annoyingly, Pane and Group do not have a common superclass with a getChildren()
    // method, so just reproduce the code...
    private Tab createTab(Group pane) {
        Circle c1 = new Circle(150, 150, 50, Color.RED);
        Circle c2 = new Circle(400, 400, 50, Color.YELLOW);

        pane.getChildren().addAll(c1, c2);

        Tab tab = new Tab(pane.getClass().getSimpleName());
        tab.setContent(pane);
        return tab ;
    }
    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36294446" questionTitle="Groovy's TimeCategory with LocalDate and LocalDateTime">
<Answer><![CDATA[import java.time.Duration
import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

class TimeCategory {
    static getDays(Integer self) { Duration.ofDays self }
    static getHours(Integer self) { Duration.ofHours self }
    static getMillis(Integer self) { Duration.ofMillis self }
    static getMinutes(Integer self) { Duration.ofMinutes self }
    static getNanos(Integer self) { Duration.ofNanos self }
    static getSeconds(Integer self) { Duration.ofSeconds self }
    static getWeeks(Integer self) { Duration.ofDays self * 7 }
    static getDay(Integer self) { Duration.ofDays self }
    static getHour(Integer self) { Duration.ofHours self }
    static getMilli(Integer self) { Duration.ofMillis self }
    static getMinute(Integer self) { Duration.ofMinutes self }
    static getNano(Integer self) { Duration.ofNanos self }
    static getSecond(Integer self) { Duration.ofSeconds self }
    static getWeek(Integer self) { Duration.ofDays self * 7 }
    static ZonedDateTime getAgo(Duration self) { ZonedDateTime.now() - self }
    static ZonedDateTime getUtc(ZonedDateTime self) { self.withZoneSameInstant(ZoneOffset.UTC) }
    static ZonedDateTime getLocal(ZonedDateTime self) { self.withZoneSameInstant(ZoneOffset.systemDefault()) }
    static ZonedDateTime getNow() { ZonedDateTime.now() }
    static Duration minus(ZonedDateTime self, ZonedDateTime other) { Duration.between(self, other) }
    static BigInteger getTotalNanos(Duration self) { self.seconds.toBigInteger() * 10 ** 9 + self.nano }
    static String toString(ZonedDateTime self, String pattern) { self.format(DateTimeFormatter.ofPattern(pattern)) }
    static Duration mod(Duration self, Duration other) {
        def (long seconds, int nanos) = (self.totalNanos % other.totalNanos).divideAndRemainder(10g.pow(9))
        Duration.ofSeconds(seconds) + nanos.nanos
    }

    static load() {
        Integer.mixin(TimeCategory)
        ZonedDateTime.mixin(TimeCategory)
        Duration.mixin(TimeCategory)
    }
}]]></Answer>
<Answer><![CDATA[import groovy.time.*
import java.time.*

LocalDate.metaClass {
    plus { Duration d ->
        delegate.plusYears(d.years)
                .plusMonths(d.months)
                .plusDays(d.days)
    }
}

LocalDateTime.metaClass {
    plus { Duration d ->
        delegate.plusYears(d.years)
                .plusMonths(d.months)
                .plusDays(d.days)
                .plusHours(d.hours)
                .plusMinutes(d.minutes)
                .plusSeconds(d.seconds)
    }
}

use(TimeCategory) {
    LocalDateTime.now() + 4.days
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36238062" questionTitle="EJB: custom authentication and authorisation">
<Answer><![CDATA[@Provider
@Priority(Priorities.AUTHENTICATION)
public class SecurityFilter implements ContainerRequestFilter {

    @Context
    private ResourceInfo resourceInfo;

    @Override
    public void filter(ContainerRequestContext context) throws IOException {
        // here we have access to headers:
        String authorizationHeader = context.getHeaderString("Authorization");

        // and, thanks to injected resourceInfo, to annotations:
        RolesAllowed annotation = resourceInfo
                .getResourceClass() // or getResourceMethod(), I've used both
                    .getAnnotation(RolesAllowed.class);
        // and, finally, to the roles (after a null-check)
        String[] roles = annotation.value();

        // then you can authenticate and authorize everything on your own using any method (I’ve used Basic Auth and JWT)
        // and, if something fails, you can abort the request:
        if (!isAuthenticated) {
            context.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());
        } else if (!isAuthorized) {
            context.abortWith(Response.status(Response.Status.FORBIDDEN).build());
        }           
    }
    ...
}]]></Answer>
<Answer><![CDATA[<security-domain name="dukes-forest" cache-type="default">
    <authentication>
        <login-module code="org.jboss.security.auth.spi.DatabaseServerLoginModule" flag="required">
            <module-option name="dsJndiName" value="java:jboss/ForestXADS"/>
            <module-option name="rolesQuery" value="select NAME as 'ROLES', 'Roles' as 'ROLEGROUP' from forest.GROUPS g inner join forest.PERSON_GROUPS pg on g.ID = pg.GROUPS_ID join forest.PERSON p on p.EMAIL = pg.EMAIL where p.EMAIL = ?"/>
            <module-option name="hashAlgorithm" value="MD5"/>
            <module-option name="hashEncoding" value="HEX"/>
            <module-option name="principalsQuery" value="select PASSWORD from forest.PERSON where EMAIL=?"/>
        </login-module>
    </authentication>
    <authorization>
        <policy-module code="org.jboss.security.auth.spi.DatabaseServerLoginModule" flag="required">
            <module-option name="dsJndiName" value="java:jboss/ForestXADS"/>
            <module-option name="rolesQuery" value="select NAME as 'ROLE', 'ROLES' as 'ROLEGROUP' from forest.GROUPS g inner join forest.PERSON_GROUPS pg on g.ID = pg.GROUPS_ID join forest.PERSON p on p.EMAIL = pg.EMAIL where p.EMAIL = ?"/>
            <module-option name="hashAlgorithm" value="MD5"/>
            <module-option name="hashEncoding" value="HEX"/>
            <module-option name="principalsQuery" value="select PASSWORD from forest.PERSON where EMAIL=?"/>
        </policy-module>
    </authorization>
</security-domain>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36189228" questionTitle="JavaFX Pagination: setPageCount(int) calls the page factory again but does not show the page">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.Spinner;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class TilesOnAGrid extends Application {

    StackPane currentPageContainer = null;

    Pagination pagination = new Pagination();

    double minColWidth = 300;
    double minRowHeight = 300;

    Spinner<Integer> totalSpinner = new Spinner<Integer>(0, 30, 12);
    Spinner<Integer> rowSpinner = new Spinner<Integer>(1, 5, 2);
    Spinner<Integer> colSpinner = new Spinner<Integer>(1, 5, 2);

    BorderPane root;

    CheckBox useResizeCheckBox;

    @Override
    public void start(Stage primaryStage) throws Exception {

        root = new BorderPane();

        pagination.setPageFactory(new Callback<Integer, Node>() {
            @Override
            public Node call(Integer index) {

                currentPageContainer = createPage(index);
                currentPageContainer.addEventHandler(MyEvent.UPDATE, new MyEventHandler());

                return currentPageContainer;

            }
        });

        root.heightProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());
        root.widthProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());
        pagination.currentPageIndexProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());
        pagination.pageCountProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());

        totalSpinner.valueProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());
        rowSpinner.valueProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());
        colSpinner.valueProperty().addListener((ChangeListener<Number>) (observable, oldValue, newValue) -> layoutItems());

        Label totalLabel = new Label("Total");
        Label rowsLabel = new Label("Rows");
        Label columnsLabel = new Label("Columns");

        useResizeCheckBox = new CheckBox("Use Resizing");
        useResizeCheckBox.selectedProperty().addListener((ChangeListener<Boolean>) (observable, oldValue, newValue) -> {

            rowSpinner.setVisible(!newValue);
            colSpinner.setVisible(!newValue);
            rowsLabel.setVisible(!newValue);
            columnsLabel.setVisible(!newValue);

            layoutItems();

        });

        HBox toolbar = new HBox();
        toolbar.setPadding(new Insets(5, 5, 5, 5));
        toolbar.setSpacing(5);
        toolbar.getChildren().addAll(useResizeCheckBox, totalLabel, totalSpinner, columnsLabel, colSpinner, rowsLabel, rowSpinner);

        root.setTop(toolbar);
        root.setCenter(pagination);

        Scene scene = new Scene(root, 800, 800);

        primaryStage.setScene(scene);
        primaryStage.show();

        layoutItems();

    }

    public int getRows() {

        if (useResizeCheckBox.isSelected()) {
            return (int) Math.ceil(root.getBoundsInParent().getHeight() / minRowHeight);
        } else {
            return rowSpinner.getValue();
        }

    }

    public int getCols() {

        if (useResizeCheckBox.isSelected()) {
            return (int) Math.ceil(root.getBoundsInParent().getWidth() / minColWidth);
        } else {
            return colSpinner.getValue();
        }

    }

    private void layoutItems() {

        int total = totalSpinner.getValue();
        int rows = getRows();
        int cols = getCols();

        int pages = (int) Math.ceil(total / (double) (rows * cols));

        pagination.setPageCount(pages);

        if (currentPageContainer != null) {
            MyEvent myEvent = new MyEvent(pagination.getCurrentPageIndex());
            currentPageContainer.fireEvent(myEvent);
        }
    }

    public StackPane createPage(Integer index) {

        StackPane page = new StackPane();

        page.getChildren().setAll(getGrid(index));

        return page;
    }

    public GridPane getGrid(Integer index) {

        GridPane grid = new GridPane();

        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(0, 10, 0, 10));

        int total = totalSpinner.getValue();
        int rows = getRows();
        int cols = getCols();

        int offset = rows * cols * index;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {

                offset++;

                StackPane container = new StackPane();

                Label label;
                if (offset <= total) {

                    container.setStyle("-fx-background-color:lightgrey");
                    label = new Label("Item Nr. " + offset);

                } else {

                    label = new Label("");

                }

                container.getChildren().add(label);

                GridPane.setRowIndex(container, row);
                GridPane.setColumnIndex(container, col);
                GridPane.setHgrow(container, Priority.ALWAYS);
                GridPane.setVgrow(container, Priority.ALWAYS);

                grid.getChildren().add(container);
            }
        }

        return grid;
    }

    static class MyEvent extends Event {

        public static final EventType<MyEvent> UPDATE = new EventType<>(Event.ANY, "UPDATE");

        int index = 1;

        public MyEvent(int index) {
            super(UPDATE);
            this.index = index;
        }

        public int getIndex() {
            return index;
        }

    }

    private class MyEventHandler implements EventHandler<MyEvent> {
        @Override
        public void handle(MyEvent event) {

            currentPageContainer.getChildren().setAll(getGrid(event.getIndex()));

        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class Main extends Application {

    private static final double CELL_HEIGHT = 60;
    private static final double CELL_WIDTH = 100;
    private static final double CELL_H_GAP = 10;
    private static final double CELL_V_GAP = 10;
    private static final int ITEM_COUNT = 100;

    private Pagination pagination;
    private int itemCount; // Count of items that fit on a page

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {

        StackPane root = new StackPane();

        pagination = new Pagination();
        pagination.setPageFactory(this::pageFactory);

        root.getChildren().add(pagination);

        Scene scene = new Scene(root, 500, 500);
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    private StackPane pageFactory( int pageIndex ) {
        TilePane page = new TilePane();
        StackPane pageContainer = new StackPane(page);
        pageContainer.setAlignment(Pos.CENTER);

        initPage(page);
        addListeners(pageContainer, page);
        fillPage(page, pageIndex);

        return pageContainer;
    }

    private void initPage( TilePane page ) {
        page.setHgap(CELL_H_GAP);
        page.setVgap(CELL_V_GAP);
        page.setBackground(new Background(new BackgroundFill(Color.BEIGE, null, null)));
    }

    private void addListeners ( StackPane pageContainer, TilePane page) {
        pageContainer.heightProperty().addListener( observable -> {
            if (pageContainer.getWidth() != 0 && pageContainer.getHeight() != 0) {
                onResize(pageContainer, page);
            }
        });
        pageContainer.widthProperty().addListener( observable -> {
            if (pageContainer.getWidth() != 0 && pageContainer.getHeight() != 0) {
                onResize(pageContainer, page);
            }
        });
    }

    private void onResize ( StackPane pageContainer, TilePane page ) {
        int itemCountHorizontal = 1;
        int itemCountVertical = 1;
        int itemCount;
        int pageCount;

        itemCountHorizontal += ( pageContainer.getWidth() - CELL_WIDTH - 1 ) / ( CELL_WIDTH + CELL_H_GAP );
        itemCountVertical += (pageContainer.getHeight() - CELL_HEIGHT - 1 ) / ( CELL_HEIGHT + CELL_V_GAP );
        itemCount = itemCountHorizontal * itemCountVertical;
        itemCount = ( itemCount == 0 ) ? 1 : itemCount;

        pageCount = ITEM_COUNT / itemCount + 1;

        page.setMinWidth( (CELL_WIDTH * itemCountHorizontal) + (CELL_H_GAP * (itemCountHorizontal-1)) );
        page.setMaxWidth( (CELL_WIDTH * itemCountHorizontal) + (CELL_H_GAP * (itemCountHorizontal-1)) );
        page.setMinHeight( (CELL_HEIGHT * itemCountVertical) + (CELL_V_GAP * (itemCountVertical-1)) );
        page.setMaxHeight( (CELL_HEIGHT * itemCountVertical) + (CELL_V_GAP * (itemCountVertical-1)) );

        if ( pagination.getPageCount() != pageCount ) {
            Platform.runLater( () -> {
                pagination.setPageCount(pageCount);
            });
        } else if ( this.itemCount != itemCount ){
            // If item count changed, rebuild the page
            this.itemCount = itemCount;
            page.getChildren().clear();
            fillPage(page, pagination.getCurrentPageIndex());
        }
    }

    private void fillPage ( TilePane page, int pageIndex ) {
        int startIndex = pageIndex * itemCount;
        int endIndex = Math.min( ITEM_COUNT, startIndex+itemCount );
        for ( int i = startIndex; i < endIndex; i++ ) {
            page.getChildren().add(cellFactory("C" + (i+1)));
        }
    }

    private Pane cellFactory( String cellText ) {
        StackPane cell = new StackPane();

        cell.setMaxHeight(CELL_HEIGHT);
        cell.setMinHeight(CELL_HEIGHT);
        cell.setMaxWidth(CELL_WIDTH);
        cell.setMinWidth(CELL_WIDTH);
        cell.setAlignment(Pos.CENTER);
        cell.setBackground(new Background(new BackgroundFill(Color.LIGHTGRAY, null, null)));

        cell.getChildren().add(new Label(cellText));

        return cell;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36188878" questionTitle="Why does a lambda need to capture the enclosing instance when referencing a final String field?">
<Answer><![CDATA[public class TestClass {
    public static void main(String[] args) {
        MyClass m = new MyClass();
        m.consumer.accept("bar2");
    }
}

class MyClass {
    final String foo;
    final Consumer<String> consumer;

    public MyClass() {
        consumer = getConsumer();
        // first call to illustrate the value that would have been captured
        consumer.accept("bar1");
        foo = "foo";
    }

    public Consumer<String> getConsumer() {
        return bar -> System.out.println(bar + foo);
    }
}]]></Answer>
<Answer><![CDATA[abstract class Base {
    Base() {
        // bad coding style don't do this in real code
        printValues();
    }
    void printValues() {
        System.out.println("var1 read: "+getVar1());
        System.out.println("var2 read: "+getVar2());
        System.out.println("var1 via lambda: "+supplier1().get());
        System.out.println("var2 via lambda: "+supplier2().get());
    }
    abstract String getVar1();
    abstract String getVar2();
    abstract Supplier<String> supplier1();
    abstract Supplier<String> supplier2();
}
public class ConstantInitialization extends Base {
    final String realConstant = "a constant";
    final String justFinalVar; { justFinalVar = "a final value"; }

    ConstantInitialization() {
        System.out.println("after initialization:");
        printValues();
    }
    @Override String getVar1() {
        return realConstant;
    }
    @Override String getVar2() {
        return justFinalVar;
    }
    @Override Supplier<String> supplier1() {
        return () -> realConstant;
    }
    @Override Supplier<String> supplier2() {
        return () -> justFinalVar;
    }
    public static void main(String[] args) {
        new ConstantInitialization();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36174838" questionTitle="How do I make Wildfly 10 / Resteasy indicate a serialization exception to the client">
<Answer><![CDATA[/**
 * Creates a new contact from the values provided and will return a JAX-RS response with either 200 ok, or 400 (BAD REQUEST)
 * in case of errors.
 */
@POST
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public Response createContact(Contact contact) {

    Response.ResponseBuilder builder = null;
    Long nextId = contactsRepository.keySet().size() + 1L;
    try {
        // Store the contact
        contact.setId(nextId);
        contactsRepository.put(nextId, contact);

        // Create an "ok" response with the persisted contact
        builder = Response.ok(contact);
    } catch (Exception e) {
        // Handle generic exceptions
        builder = Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage());
    }

    return builder.build();
}]]></Answer>
<Answer><![CDATA[package test;

import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Provider;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;

@Provider
public class MyObjectContextResolver implements ContextResolver<ObjectMapper> {
    private ObjectMapper objectMapper;

    public MyObjectContextResolver() {
        objectMapper = new ObjectMapper();

        objectMapper.configure(JsonGenerator.Feature.AUTO_CLOSE_TARGET, false);
        objectMapper.configure(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT, false);
    }

    @Override
    public ObjectMapper getContext(final Class<?> arg0) {
        return objectMapper;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36168429" questionTitle="JavaFX GridPane Dynamic Resizng of Child Nodes to Fill Assigned Area">
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();
            Scene scene = new Scene(root,400,400);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());

            ButtonPanel2 bp = new ButtonPanel2();
            root.setCenter(bp);

            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//end start

    public static void main(String[] args) {
        launch(args);
    }//end main
}//end class main


class ButtonPanel2 extends AnchorPane {

    GridPane grid;

    Button ba, bb, bc, bd;


    /**Construct a new button panel object.**/
    public ButtonPanel2(){
        //Create Grid and gaps
        grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);

        grid.prefWidthProperty().bind(this.widthProperty());
        grid.getStyleClass().add("test");

        //Init buttons
        ba = new Button("A");
        bb = new Button("B");
        bc = new Button("C");
        bd = new Button("D");


        ba.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        bb.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        bc.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        bd.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);

        //Add items to grid.
        //Node, colIndex, rowIndex, colSpan, rowSpan
        grid.add(ba,0,0,1,1);//
        grid.add(bb,1,0,2,1);//
        grid.add(bc,0,1,1,2);//
        grid.add(bd,1,1,2,2);//


        //Grid contstraints.
        RowConstraints row1 = new RowConstraints();
        row1.setPercentHeight(25);
        RowConstraints row2 = new RowConstraints();
        row2.setPercentHeight(75);

        ColumnConstraints col1 = new ColumnConstraints();
        col1.setPercentWidth(25);
        ColumnConstraints col2 = new ColumnConstraints();
        col2.setPercentWidth(75);

        grid.getRowConstraints().addAll(row1,row2);
        grid.getColumnConstraints().addAll(col1,col2);


        //anchor grid to parent container (anchor)
        AnchorPane.setTopAnchor(grid, 0.0);
        AnchorPane.setBottomAnchor(grid, 0.0);
        AnchorPane.setLeftAnchor(grid, 0.0);
        AnchorPane.setRightAnchor(grid, 0.0);

        this.getChildren().add(grid);

        this.getStyleClass().add("test");
    }//end buttonPanel2

}//end buttonPanel2]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>

<GridPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.40">
  <columnConstraints>
    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" percentWidth="40.0" prefWidth="100.0" />
    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
  </columnConstraints>
  <rowConstraints>
    <RowConstraints minHeight="10.0" percentHeight="40.0" prefHeight="30.0" vgrow="SOMETIMES" />
    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
  </rowConstraints>
   <children>
      <Button maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" mnemonicParsing="false" text="Button" />
      <Button maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" mnemonicParsing="false" text="Button" GridPane.columnIndex="1" />
      <Button maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" mnemonicParsing="false" text="Button" GridPane.rowIndex="1" />
      <Button maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" mnemonicParsing="false" text="Button" GridPane.columnIndex="1" GridPane.rowIndex="1" />
   </children>
</GridPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36167945" questionTitle="How to get distinct list of object with concat in Java 8">
<Answer><![CDATA[public class Main {

    static class A {
        String name;
        List<B> numbers;

        A(String name, List<B> numbers) {
            this.name = name;
            this.numbers = new ArrayList<>(numbers);
        }
    }

    static class B {
        Integer number;
    }

    static List<A> merge(List<A> list) {
        Map<String, List<B>> map = new LinkedHashMap<>();
        for (A a : list)
            map.computeIfAbsent(a.name, k -> new ArrayList<>()).addAll(a.numbers);
        return map.entrySet()
                  .stream()
                  .map(e -> new A(e.getKey(), e.getValue()))
                  .collect(Collectors.toList());
    }
}]]></Answer>
<Answer><![CDATA[import org.junit.Test;

import java.util.List;

import static com.shazam.shazamcrest.MatcherAssert.assertThat;
import static com.shazam.shazamcrest.matcher.Matchers.sameBeanAs;
import static java.util.Arrays.asList;
import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toList;

public class Main {

    class A {
        final String name;
        final List<B> numbers;
        A(String name, List<B> numbers) {
            this.name = name;
            this.numbers = numbers;
        }
    }

    class B {
        final Integer number;
        B(Integer number) {
            this.number = number;
        }
    }

    List<A> merge(List<A> input) {
        return input.stream()
                .collect(groupingBy(a -> a.name))
                .entrySet()
                .stream()
                .map(entry -> new A(
                        entry.getKey(),
                        entry.getValue().stream()
                                .flatMap(list -> list.numbers.stream())
                                .collect(toList())
                )).collect(toList());
    }

    @Test
    public void test() {
        List<A> input = asList(
                new A("abc", asList(new B(1), new B(2))),
                new A("xyz", asList(new B(3), new B(4))),
                new A("abc", asList(new B(3), new B(5)))
        );

        List<A> list = merge(input);

        assertThat(list, sameBeanAs(asList(
                new A("abc", asList(new B(1), new B(2), new B(3), new B(5))),
                new A("xyz", asList(new B(3), new B(4)))
        )));
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36164996" questionTitle="How to edit/open exact cell in the table">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;


public class JavaFXApplication7 extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<Person> tv = new TableView();
        TableColumn<Person, String> fCol = new TableColumn<>();
        TableColumn<Person, String> lCol = new TableColumn<>();
        TableColumn<Person, String> pCol = new TableColumn<>();
        TableColumn<Person, String> eCol = new TableColumn<>();

        tv.setEditable(true);
        tv.getColumns().addAll(fCol, lCol, pCol, eCol);

        fCol.setCellValueFactory(data -> data.getValue().firstName);
        lCol.setCellValueFactory(data -> data.getValue().lastName);
        pCol.setCellValueFactory(data -> data.getValue().phone);
        eCol.setCellValueFactory(data -> data.getValue().email);
        eCol.setCellFactory(tc -> new TextFieldTableCell<>());

        ObservableList<Person> items = FXCollections.observableArrayList();
        Person p = new Person();
        p.email.set("foo@bar.com");
        p.firstName.set("Tony");
        p.lastName.set("Stark");
        p.phone.set("(555) 555-1212");

        items.add(p);

        tv.setItems(items);

        StackPane root = new StackPane();
        root.getChildren().add(tv);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    public class Person {
        StringProperty firstName = new SimpleStringProperty();
        StringProperty lastName = new SimpleStringProperty();
        StringProperty phone = new SimpleStringProperty();
        StringProperty email = new SimpleStringProperty();



    }

}]]></Answer>
<Answer><![CDATA[TableView<Person> table = new TableView<>(FXCollections.observableArrayList(
        new Person("Darth Vader", "dad@empire.com"),
        new Person("James Bond", "bond007@mi6.gb")));
table.setEditable(true);

Callback<TableColumn<Person, String>, TableCell<Person, String>> cellFactory = col
        -> new TableCell<Person, String>() {

            {
                // make cell itself editable
                setEditable(true);
            }

            @Override
            public void startEdit() {
                super.startEdit();
                // open dialog for input when the user edits the cell
                TextInputDialog dialog = new TextInputDialog(getItem());
                dialog.setGraphic(null);
                dialog.setHeaderText("Set new " + col.getText() + ".");
                dialog.setTitle("Edit " + col.getText());
                Optional<String> opt = dialog.showAndWait();
                if (opt.isPresent()) {
                    commitEdit(opt.get());
                } else {
                    cancelEdit();
                }
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                setText(empty ? null : item);
            }

        };

TableColumn<Person, String> name = new TableColumn<>("name");
name.setCellValueFactory(p -> p.getValue().nameProperty());
name.setCellFactory(cellFactory);

TableColumn<Person, String> email = new TableColumn<>("email");
email.setCellValueFactory(p -> p.getValue().emailProperty());
email.setCellFactory(cellFactory);

table.getColumns().addAll(name, email);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36162262" questionTitle="Java 8 stream join and return multiple values">
<Answer><![CDATA[class Merge {

    public static Collector<Content, ?, Content> collector() {
        return Collector.of(Merge::new, Merge::accept, Merge::combiner, Merge::finisher);
    }

    private StringJoiner a = new StringJoiner(", ");
    private StringJoiner b = new StringJoiner(", ");
    private StringJoiner c = new StringJoiner(", ");

    private void accept(Content content) {
        a.add(content.getA());
        b.add(content.getB());
        c.add(content.getC());
    }

    private Merge combiner(Merge second) {
        a.merge(second.a);
        b.merge(second.b);
        c.merge(second.c);
        return this;
    }

    private Content finisher() {
        return new Content(a.toString(), b.toString(), c.toString());
    }
}]]></Answer>
<Answer><![CDATA[public interface TriFunction<T, U, V, R> {
    R apply(T t, U u, V v);
}

public static <T, A1, A2, A3, R1, R2, R3, R> Collector<T, ?, R> combining(Collector<? super T, A1, R1> c1, Collector<? super T, A2, R2> c2, Collector<? super T, A3, R3> c3, TriFunction<? super R1, ? super R2, ? super R3, ? extends R> finisher) {

    final class Box<A, B, C> {
        A a; B b; C c;
        Box(A a, B b, C c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }
    }

    EnumSet<Characteristics> c = EnumSet.noneOf(Characteristics.class);
    c.addAll(c1.characteristics());
    c.retainAll(c2.characteristics());
    c.retainAll(c3.characteristics());
    c.remove(Characteristics.IDENTITY_FINISH);

    return Collector.of(
            () -> new Box<>(c1.supplier().get(), c2.supplier().get(), c3.supplier().get()),
            (acc, v) -> {
                c1.accumulator().accept(acc.a, v);
                c2.accumulator().accept(acc.b, v);
                c3.accumulator().accept(acc.c, v);
            },
            (acc1, acc2) -> {
                acc1.a = c1.combiner().apply(acc1.a, acc2.a);
                acc1.b = c2.combiner().apply(acc1.b, acc2.b);
                acc1.c = c3.combiner().apply(acc1.c, acc2.c);
                return acc1;
            },
            acc -> finisher.apply(c1.finisher().apply(acc.a), c2.finisher().apply(acc.b), c3.finisher().apply(acc.c)),
            c.toArray(new Characteristics[c.size()])
           );
}]]></Answer>
<Answer><![CDATA[public static Content collectToContent(Stream<Content> stream) {
    return stream.collect(
        Collector.of(
            () -> new StringBuilder[] {
                    new StringBuilder(),
                    new StringBuilder(),
                    new StringBuilder() },
            (StringBuilder[] arr, Content elem) -> {
                arr[0].append(arr[0].length() == 0 ? 
                        elem.getA() : 
                        ", " + elem.getA());
                arr[1].append(arr[1].length() == 0 ? 
                        elem.getB() : 
                        ", " + elem.getB());
                arr[2].append(arr[2].length() == 0 ? 
                        elem.getC() : 
                        ", " + elem.getC());
            },
            (arr1, arr2) -> {
                arr1[0].append(arr1[0].length() == 0 ?
                        arr2[0].toString() :
                        arr2[0].length() == 0 ?
                                "" :
                                ", " + arr2[0].toString());
                arr1[1].append(arr1[1].length() == 0 ?
                        arr2[1].toString() :
                        arr2[1].length() == 0 ?
                                "" :
                                ", " + arr2[1].toString());
                arr1[2].append(arr1[2].length() == 0 ?
                        arr2[2].toString() :
                        arr2[2].length() == 0 ?
                                "" :
                                ", " + arr2[2].toString());
                return arr1;
            },
            arr -> new Content(
                    arr[0].toString(), 
                    arr[1].toString(), 
                    arr[2].toString())));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36112892" questionTitle="JavaFX ColorPicker show uncolor option">
<Answer><![CDATA[public class UnColorPicker extends Application {

    private final LinearGradient redLine = new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE, 
                            new Stop(0, Color.WHITE), new Stop(0.45, Color.WHITE), new Stop(0.46, Color.RED),
                            new Stop(0.54, Color.RED), new Stop(0.55, Color.WHITE), new Stop(1, Color.WHITE));

    @Override
    public void start(Stage primaryStage) {
        ColorPicker picker = new ColorPicker();
        StackPane root = new StackPane(picker);
        Scene scene = new Scene(root, 500, 400);

        primaryStage.setScene(scene);
        primaryStage.show();

        Rectangle rect = (Rectangle) root.lookup(".picker-color-rect");
        Label label = (Label) root.lookup(".color-picker-label");
        picker.showingProperty().addListener((obs, b, b1) -> {
            if (b1) {
                PopupWindow popupWindow = getPopupWindow();
                Node popup = popupWindow.getScene().getRoot().getChildrenUnmodifiable().get(0);
                StackPane hover = (StackPane) popup.lookup(".hover-square");
                Rectangle rectH = (Rectangle) hover.getChildren().get(0);
                Set<Node> squares = popup.lookupAll(".color-rect");
                squares.stream()
                        .skip(squares.size()-2)
                        .map(Rectangle.class::cast)
                        .findFirst()
                        .ifPresent(r -> {
                            r.getParent().setOnMousePressed(e -> {
                                // avoid CastException
                                r.setFill(Color.TRANSPARENT);
                                e.consume();
                            });
                            r.getParent().setOnMouseReleased(e -> {
                                Platform.runLater(() -> {
                                    rect.setFill(redLine);
                                    label.setText("Un-color");
                                });
                            });
                            r.setFill(redLine);
                            Tooltip.install(r.getParent(), new Tooltip("Un-color"));
                        });
                hover.visibleProperty().addListener((obs2, ov, nv) -> {
                    if (nv && rectH.getFill().equals(Color.TRANSPARENT)) {
                        Platform.runLater(() -> rectH.setFill(redLine));
                    }
                });
            }
        });
    }

    private PopupWindow getPopupWindow() {
        @SuppressWarnings("deprecation") 
        final Iterator<Window> windows = Window.impl_getWindows();
        while (windows.hasNext()) {
            final Window window = windows.next();
            if (window instanceof PopupWindow) {
                return (PopupWindow)window;
            }
        }
        return null;
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[@SuppressWarnings("restriction")
public class CustomColorPicker extends ColorPicker {

    final static LinearGradient RED_LINE = new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE, 
                                                        new Stop(0, Color.WHITE), new Stop(0.45, Color.WHITE), 
                                                        new Stop(0.46, Color.RED), new Stop(0.54, Color.RED), 
                                                        new Stop(0.55, Color.WHITE), new Stop(1, Color.WHITE));

    @Override 
    protected Skin<?> createDefaultSkin() {

        final CustomColorPickerSkin skin = new CustomColorPickerSkin(this);
        final Label lbl = (Label)skin.getDisplayNode();
        final StackPane pane = (StackPane)lbl.getGraphic();
        final Rectangle rect = (Rectangle)pane.getChildren().get(0);

        // set initial color to red line if transparent is shown
        if (getValue().equals(Color.TRANSPARENT))
            rect.setFill(RED_LINE);

        // set color to red line when transparent is selected
        rect.fillProperty().addListener((o, oldVal, newVal) -> {
            if (newVal != null && newVal.equals(Color.TRANSPARENT))
                rect.setFill(RED_LINE);     
        });

        return skin;
     }

    private class CustomColorPickerSkin extends ColorPickerSkin {

        private boolean initialized = false;

        public CustomColorPickerSkin(ColorPicker colorPicker) {
            super(colorPicker);
        }

        @Override 
        protected Node getPopupContent() {
            final ColorPalette popupContent = (ColorPalette)super.getPopupContent();

            // make sure listeners and geometry are only created once
            if (!initialized) {
                final VBox paletteBox = (VBox)popupContent.getChildrenUnmodifiable().get(0);
                final StackPane hoverSquare = (StackPane)popupContent.getChildrenUnmodifiable().get(1); // ColorSquare
                final Rectangle hoverRect = (Rectangle)hoverSquare.getChildren().get(0); // ColorSquare
                final GridPane grid = (GridPane)paletteBox.getChildren().get(0); // ColorPalette
                final StackPane colorSquare = (StackPane)grid.getChildren().get(grid.getChildren().size()-1); // ColorSquare
                final Rectangle colorRect = (Rectangle)colorSquare.getChildren().get(0);

                // set fill color of original color rectangle to transparent
                // (can't be set to red line gradient because ComboBoxBase<Color> tries to cast it to Color)
                colorRect.setFill(Color.TRANSPARENT);
                // put another rectangle with red line on top of it
                colorSquare.getChildren().add(new Rectangle(colorRect.getWidth(), colorRect.getHeight(), RED_LINE));
                // show red line gradient also in hover rectangle when the transparent color is selected
                hoverRect.fillProperty().addListener((o, oldVal, newVal) -> {
                    if (newVal.equals(Color.TRANSPARENT))
                        hoverRect.setFill(RED_LINE);
                });

                initialized = true;
            }

            return popupContent;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36032888" questionTitle="Using command line arguments in Java with JavaFX">
<Answer><![CDATA[public class Main extends Application {

 @Override
 public void start(Stage primaryStage) throws Exception{

    FXMLLoader loader=new FXMLLoader(getClass().getResource("hive.fxml"));
    Parent root = loader.load();
    MyController cont=load.getController();
    /*
      This depends on your controller and you have to decide 
      How your controller need the arguments
    */
    cont.setParameter(getParameters()); 

    primaryStage.setTitle("Hive-viewer");
    primaryStage.setScene(new Scene(root, 1600, 900));
    primaryStage.show();
 }


 public static void main(String[] args) {
    launch(args);
 }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
    private static String[] arguments;

    @Override
    public void start(Stage primaryStage) throws Exception{

        // e.g. access arguments here or pass them to controller
        for(String arg:arguments) {
            System.out.println(arg);
        }

        Parent root = FXMLLoader.load(getClass().getResource("hive.fxml"));
        primaryStage.setTitle("Hive-viewer");
        primaryStage.setScene(new Scene(root, 1600, 900));
        primaryStage.show();
    }


    public static void main(String[] args) {
        arguments = args;
        launch(args);
    }
  }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="36026042" questionTitle="Javafx click on a Circle and get it's reference">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        Circle circle = new Circle( 100,100,50);
        circle.setStroke(Color.BLUE);
        circle.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.3));

        Rectangle rectangle = new Rectangle( 0,0,100,100);
        rectangle.relocate(200, 200);
        rectangle.setStroke(Color.GREEN);
        rectangle.setFill(Color.GREEN.deriveColor(1, 1, 1, 0.3));

        Text text = new Text( "Example Text");
        text.relocate(300, 300);

        Pane root = new Pane();
        root.getChildren().addAll(circle, rectangle, text);

        MouseGestures mouseGestures = new MouseGestures();
        mouseGestures.makeDraggable(circle);
        mouseGestures.makeDraggable(rectangle);
        mouseGestures.makeDraggable(text);

        Scene scene = new Scene(root, 1024, 768);
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    public static class MouseGestures {

        class DragContext {
            double x;
            double y;
        }

        DragContext dragContext = new DragContext();

        public void makeDraggable( Node node) {

            node.setOnMousePressed( onMousePressedEventHandler);
            node.setOnMouseDragged( onMouseDraggedEventHandler);
            node.setOnMouseReleased(onMouseReleasedEventHandler);

        }

        EventHandler<MouseEvent> onMousePressedEventHandler = event -> {

            if( event.getSource() instanceof Circle) {

                Circle circle = (Circle) (event.getSource());

                dragContext.x = circle.getCenterX() - event.getSceneX();
                dragContext.y = circle.getCenterY() - event.getSceneY();

            } else {

                Node node = (Node) (event.getSource());

                dragContext.x = node.getTranslateX() - event.getSceneX();
                dragContext.y = node.getTranslateY() - event.getSceneY();

            }
        };

        EventHandler<MouseEvent> onMouseDraggedEventHandler = event -> {

            if( event.getSource() instanceof Circle) {

                Circle circle = (Circle) (event.getSource());

                circle.setCenterX( dragContext.x + event.getSceneX());
                circle.setCenterY( dragContext.y + event.getSceneY());

            } else {

                Node node = (Node) (event.getSource());

                node.setTranslateX( dragContext.x + event.getSceneX());
                node.setTranslateY( dragContext.y + event.getSceneY());

            }

        };

        EventHandler<MouseEvent> onMouseReleasedEventHandler = event -> {
        };

    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.css.PseudoClass;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

public class GridOfCircles extends Application {

    private static final PseudoClass SELECTED_P_C = PseudoClass.getPseudoClass("selected");

    private final int numColumns = 100 ;
    private final int numRows = 100 ;
    private final double radius = 4 ;
    private final double spacing = 2 ;

    private final ObjectProperty<Circle> selectedCircle = new SimpleObjectProperty<>(); 

    private final ObjectProperty<Point2D> selectedLocation = new SimpleObjectProperty<>();

    @Override
    public void start(Stage primaryStage) {

        selectedCircle.addListener((obs, oldSelection, newSelection) -> {
            if (oldSelection != null) {
                oldSelection.pseudoClassStateChanged(SELECTED_P_C, false);
            }
            if (newSelection != null) {
                newSelection.pseudoClassStateChanged(SELECTED_P_C, true);
            }
        });

        Pane grid = new Pane();

        for (int x = 0 ; x < numColumns; x++) {
            double gridX = x*(spacing + radius + radius) + spacing ;
            grid.getChildren().add(new Line(gridX, 0, gridX, numRows*(spacing + radius + radius)));
        }

        for (int y = 0; y < numRows ; y++) {
            double gridY = y*(spacing + radius + radius) + spacing ;
            grid.getChildren().add(new Line(0, gridY, numColumns*(spacing + radius + radius), gridY));
        }

        for (int x = 0 ; x < numColumns; x++) {
            for (int y = 0 ;y < numRows ; y++) {
                grid.getChildren().add(createCircle(x, y));
            }
        }


        Label label = new Label();
        label.textProperty().bind(Bindings.createStringBinding(() -> {
            Point2D loc = selectedLocation.get();
            if (loc == null) {
                return "" ;
            }
            return String.format("Location: [%.0f, %.0f]", loc.getX(), loc.getY());
        }, selectedLocation));

        BorderPane root = new BorderPane(new ScrollPane(grid));
        root.setTop(label);


        Scene scene = new Scene(root);
        scene.getStylesheets().add("grid.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Circle createCircle(int x, int y) {
        Circle circle = new Circle();
        circle.getStyleClass().add("intersection");
        circle.setCenterX(x * (spacing + radius + radius) + spacing);
        circle.setCenterY(y * (spacing + radius + radius) + spacing);
        circle.setRadius(radius);

        circle.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> {
            selectedCircle.set(circle);
            selectedLocation.set(new Point2D(x, y));
        });

        return circle ;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35997182" questionTitle="How to choose one of the largest elements in a collection">
<Answer><![CDATA[static <T> Collector<T, ?, Optional<T>> rndMax(Comparator<? super T> cmp) {
    class RndMax {
        T val;
        int cnt;

        void add(T t) {
            int c;
            if (cnt == 0 || (c = cmp.compare(t, val)) > 0) {
                cnt = 1;
                val = t;
            } else if (c == 0) {
                cnt++;
                if (ThreadLocalRandom.current().nextInt(cnt) == 0) {
                    val = t;
                }
            }
        }

        RndMax merge(RndMax other) {
            if (cnt == 0) {
                return other;
            }

            if (other.cnt == 0) {
                return this;
            }

            int c = cmp.compare(val, other.val);
            if (c < 0) {
                return other;
            } else if (c > 0) {
                return this;
            } else {
                cnt += other.cnt;
                if (ThreadLocalRandom.current().nextInt(cnt) < other.cnt) {
                    val = other.val;
                }
                return this;
            }
        }

        Optional<T> finish() {
            return cnt == 0 ? Optional.empty() : Optional.of(val);
        }
    }

    return Collector.of(RndMax::new, RndMax::add, RndMax::merge, RndMax::finish);
}]]></Answer>
<Answer><![CDATA[public static <T> Collector<T, ?, Optional<T>> random() {
  return Collector.of(
    () -> new Object() {
      T val;
      int cnt;
    },
    (this_, t) -> {
      this_.cnt++;
      if (ThreadLocalRandom.current().nextInt(this_.cnt) == 0) {
        this_.val = t;
      }
    },
    (this_, other) -> {
      this_.cnt += other.cnt;
      if (ThreadLocalRandom.current().nextInt(this_.cnt) < other.cnt) {
        this_.val = other.val;
      }
      return this_;
    },
    this_ -> this_.cnt == 0
      ? Optional.empty()
      : Optional.of(this_.val)
  );
}]]></Answer>
<Answer><![CDATA[public static <T> Collector<T, ?, Optional<T>> random() {
    class Rnd {

        T val;
        int cnt;

        void add(T t) {
            cnt++;
            if (ThreadLocalRandom.current().nextInt(cnt) == 0) {
                val = t;
            }
        }

        Rnd merge(Rnd other) {
            cnt += other.cnt;
            if (ThreadLocalRandom.current().nextInt(cnt) < other.cnt) {
                val = other.val;
            }
            return this;
        }

        Optional<T> finish() {
            return cnt == 0 ? Optional.empty() : Optional.of(val);
        }

    }

    return Collector.of(Rnd::new, Rnd::add, Rnd::merge, Rnd::finish);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35966710" questionTitle="Prime Factorization of a Positive Integer with Streams">
<Answer><![CDATA[public static IntStream primeFactors(int n) {
  int characteristics = Spliterator.ORDERED | Spliterator.SORTED | Spliterator.IMMUTABLE | Spliterator.NONNULL;
  Spliterator.OfInt spliterator = new Spliterators.AbstractIntSpliterator(Long.MAX_VALUE, characteristics) {
    int val = n;
    int div = 2;

    @Override
    public boolean tryAdvance(IntConsumer action) {
      while (div <= val) {
        if (val % div == 0) {
          action.accept(div);
          val /= div;
          return true;
        }
        div += div == 2 ? 1 : 2;
      }
      return false;
    }

    @Override
    public Comparator<? super Integer> getComparator() {
      return null;
    }
  };
  return StreamSupport.intStream(spliterator, false);
}]]></Answer>
<Answer><![CDATA[public static Map<Long, Integer> factorize(long num) { //NOW USING LONG
    Map<Long, Integer> factors = new LinkedHashMap<>(); //NOW USING MAP
    long lastRemainder = LongStream.rangeClosed(2, (long) Math.sqrt(num)) //NOW USING SQRT
            .filter(x -> (x== 2||x%2>0)&&(x==3||x%3>0)&&(x==5||x%5>0)) //ADDED THIS
            .reduce(num, (temp, factor) -> {
                if (factor <= temp / factor) { //ADDED THIS
                    int count = 0;
                    while (temp % factor == 0) {
                        temp /= factor;
                        count++;
                    }
                    if (count > 0)
                        factors.put(factor, count);
                }
                return temp;
            });
    if (lastRemainder != num && lastRemainder > 1) //ADDED THIS
        factors.put(lastRemainder, 1);
    return factors;
}]]></Answer>
<Answer><![CDATA[public class PrimeFactors  {
  private final int limit = 1_000_000;
  private BitSet sieve = new BitSet( limit+1 );
  public PrimeFactors(){
    sieve.set( 2, limit );
    long count = sieve.stream()
    .peek( x -> { if( (long)x*x < limit )
                    for( int i = x*x; i <= limit; i += x )
                      sieve.clear( i );
                })
    .count();
  }
  public FactorTimes[] factorsOf( int num ){
    FactorTimes[] fts = sieve.stream()
    .limit( num/2 )
    .filter( x -> num % x == 0 ) 
    .mapToObj( x -> { int n = 1;
                      int k = num/x;
                      while( k % x == 0 ){ k /= x; n++; }
                      return new  FactorTimes( x, n );
                    } )
    .toArray( FactorTimes[]::new );
    return fts;
  }
  public static void main( String[] args ){
    PrimeFactors pf = new PrimeFactors();
    for( FactorTimes ft: pf.factorsOf( 4504500 ) ){
      System.out.println( ft );
    }
  }
}

class FactorTimes {
  private int factor, multiplicity;
  public FactorTimes(int f, int m) {
    factor = f; multiplicity = m;
  }
  public int getFactor() { return factor; }
  public int getMultiplicity() { return multiplicity; }
  public String toString(){
    return multiplicity > 1 ? factor + "(" + multiplicity + ")"
                            : Integer.toString( factor ); }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35902708" questionTitle="GCM Push Notifications are not delivered to devices">
<Answer><![CDATA[try 
{
    // prepare JSON
    JSONObject jGcmData = new JSONObject();
    JSONObject jData = new JSONObject();

    jData.put("message", "{ \"data\": {\"score\": \"5x1\",\"time\": \"15:10\"},\"to\" : \""+deviceToken+"\"}");

    jGcmData.put("to", deviceToken);

    jGcmData.put("data", jData);

    // Create connection to send GCM Message request.
    URL url = new URL("https://android.googleapis.com/gcm/send");
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.setRequestProperty("Authorization", "key=" + apiKey);
    conn.setRequestProperty("Content-Type", "application/json");
    conn.setRequestMethod("POST");
    conn.setDoOutput(true);

    // Send GCM message content.
    OutputStream outputStream = conn.getOutputStream();
    outputStream.write(jGcmData.toString().getBytes());

    // Read GCM response.
    InputStream inputStream = conn.getInputStream();
    String resp = IOUtils.toString(inputStream);
    System.out.println(resp);
 } catch (IOException e) {
    System.out.println("Unable to send GCM message. "+e);
}]]></Answer>
<Answer><![CDATA[public class Main {

    public static void main(String[] args) {
    // write your code here

        try {

            String url = "https://gcm-http.googleapis.com/gcm/send";

            URL obj = new URL(url);
            HttpsURLConnectionImpl conn = (HttpsURLConnectionImpl) obj.openConnection();


            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);

            conn.setRequestMethod("POST");
            conn.setRequestProperty ("Authorization", "key=***");

            String title = "Short title";
            String body = "A body :D";
            String token = "****";
            String data =  "{ \"notification\": { \"title\": \"" + title +"\", \"body\": \"" + body + "\" }, \"to\" : \"" + token + "\", \"priority\" : \"high\" }";
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(data);
            out.close();

            String text = getText(new InputStreamReader(conn.getInputStream()));
            System.out.println(text);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getText(InputStreamReader in) throws IOException {
        StringBuilder sb=new StringBuilder();
        BufferedReader br = new BufferedReader(in);
        String read;
        while((read=br.readLine()) != null) {
            sb.append(read);
        }
        br.close();
        return sb.toString();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35884398" questionTitle="JavaFX TextField validation for integer input and also allow either K or k(for Thousand) or M or m(for Million) in last">
<Answer><![CDATA[import java.util.function.UnaryOperator;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.TextFormatter.Change;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class TextFieldFilteringExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        TextField textField = new TextField();

        textField.textProperty().addListener((obs, oldValue, newValue) -> {
           System.out.println("Text change from "+oldValue+" to "+newValue);
        });

        UnaryOperator<Change> filter = change -> {
            if (change.isAdded()) {
                String addedText = change.getText();
                if (addedText.matches("[0-9]*")) {
                    return change ;
                }
                // remove illegal characters:
                int length = addedText.length();
                addedText = addedText.replaceAll("[^0-9kKmM]", "");
                // replace "k" and "K" with "000":
                addedText = addedText.replaceAll("[kK]", "000");
                // replace "m" and "M" with "000000":
                addedText = addedText.replaceAll("[mM]", "000000");
                change.setText(addedText);

                // modify caret position if size of text changed:
                int delta = addedText.length() - length ;
                change.setCaretPosition(change.getCaretPosition() + delta);  
                change.setAnchor(change.getAnchor() + delta);
            }
            return change ;
        };

        textField.setTextFormatter(new TextFormatter<String>(filter));

        StackPane root = new StackPane(textField);
        root.setPadding(new Insets(20));
        primaryStage.setScene(new Scene(root));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[// regex for matching the input and extracting the parts
private static final Pattern NUMBER_PATTERN = Pattern.compile("([1-9](?:\\d*|\\d{0,2}(?:\\,\\d{3})*))([tbmk]?)", Pattern.CASE_INSENSITIVE);

// map from suffix to exponent for 10
private static final Map<Character, Byte> SUFFIX_EXPONENTS;

static {
    Map<Character, Byte> prefixes = new HashMap<>();
    prefixes.put('k', (byte) 3);
    prefixes.put('m', (byte) 6);
    prefixes.put('b', (byte) 9);
    prefixes.put('t', (byte) 12);
    SUFFIX_EXPONENTS = Collections.unmodifiableMap(prefixes);
}

private static BigInteger convert(String s) {
    if (s == null) {
        return null;
    }

    Matcher m = NUMBER_PATTERN.matcher(s);

    if (!m.matches()) {
        return null;
    }

    String numberString = m.group(1).replace(",", "");
    String suffix = m.group(2);

    BigInteger factor = suffix.isEmpty() ? BigInteger.ONE : BigInteger.TEN.pow(SUFFIX_EXPONENTS.get(Character.toLowerCase(suffix.charAt(0))));

    return new BigInteger(numberString).multiply(factor);
}

@Override
public void start(Stage primaryStage) throws Exception {
    TextField tf = new TextField();
    tf.getStyleClass().add("invalid");

    // property bound to the current number in the TextField or null, if invalid
    ObjectProperty<BigInteger> numberProperty = new SimpleObjectProperty<>();

    // Binding reevaluated on every change of the text property.
    // A listener could be used instead to change the text to the
    // previous value, if the new input is invalid.
    numberProperty.bind(Bindings.createObjectBinding(() -> convert(tf.getText()), tf.textProperty()));

    // change styleclass, if the string becomes (in)valid input
    numberProperty.addListener((observable, oldValue, newValue) -> {
        if (oldValue == null) {
            tf.getStyleClass().remove("invalid");
        } else if (newValue == null) {
            tf.getStyleClass().add("invalid");
        }
    });

    // handle user pressing enter
    tf.setOnAction(evt -> {
        BigInteger num = numberProperty.get();
        tf.setText(num == null ? null : num.toString());
    });

    Pane root = new StackPane(tf);

    Scene sc = new Scene(root, 300, 300);

    sc.getStylesheets().add(getClass().getResource("style.css").toExternalForm());

    primaryStage.setScene(sc);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public class TextFieldValidator {

    private static final String CURRENCY_SYMBOL   = DecimalFormatSymbols.getInstance().getCurrencySymbol();
    private static final char   DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance().getDecimalSeparator();

    private final Pattern       INPUT_PATTERN;

    public TextFieldValidator(@NamedArg("modus") ValidationModus modus, @NamedArg("maxCountOf") int maxCountOf) {
        this(modus.createPattern(maxCountOf));
    }

    public TextFieldValidator(@NamedArg("regex") String regex){
        this(Pattern.compile(regex));
    }

    public TextFieldValidator(Pattern pattern){ 
        INPUT_PATTERN = pattern;
    }

    public static TextFieldValidator maxFractionDigits(int maxCountOf) {
        return new TextFieldValidator(maxFractionPattern(maxCountOf));
    }

    public static TextFieldValidator maxIntegers(int maxCountOf) {
        return new TextFieldValidator(maxIntegerPattern(maxCountOf));
    }

    public static TextFieldValidator integersOnly() {
        return new TextFieldValidator(integersOnlyPattern());
    }

    public TextFormatter<Object> getFormatter() {
        return new TextFormatter<>(this::validateChange);
    }

    private Change validateChange(Change c) {
        if (validate(c.getControlNewText())) {
            return c;
        }
        return null;
    }

    public boolean validate(String input) {
        return INPUT_PATTERN.matcher(input).matches();
    }

    private static Pattern maxFractionPattern(int maxCountOf) {
        return Pattern.compile("\\d*(\\" + DECIMAL_SEPARATOR + "\\d{0," + maxCountOf+ "})?");
    }

    private static Pattern maxCurrencyFractionPattern(int maxCountOf) {
        return Pattern.compile("^\\" + CURRENCY_SYMBOL + "?\\s?\\d*(\\" + DECIMAL_SEPARATOR + "\\d{0," + maxCountOf+ "})?\\s?\\" +
                CURRENCY_SYMBOL + "?");
    }

    private static Pattern maxIntegerPattern(int maxCountOf) {
        return Pattern.compile("\\d{0," + maxCountOf+ "}");
    }

    private static Pattern integersOnlyPattern() {
        return Pattern.compile("\\d*");
    }

    public enum ValidationModus {

        MAX_CURRENCY_FRACTION_DIGITS {
            @Override
            public Pattern createPattern(int maxCountOf) {
                return maxCurrencyFractionPattern(maxCountOf);
            }
        },

        MAX_FRACTION_DIGITS {
            @Override
            public Pattern createPattern(int maxCountOf) {
                return maxFractionPattern(maxCountOf);
            }
        },
        MAX_INTEGERS {
            @Override
            public Pattern createPattern(int maxCountOf) {
                return maxIntegerPattern(maxCountOf);
            }
        },

        INTEGERS_ONLY {
            @Override
            public Pattern createPattern(int maxCountOf) {
                return integersOnlyPattern();
            }
        };

        public abstract Pattern createPattern(int maxCountOf);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35856668" questionTitle="MVC with multiple controllers">
<Answer><![CDATA[public class ModelInjectionControllerFactory implements Callback <Class<?>, Object> {

    private final Model model;

    public ModelInjectionControllerFactory(Model model) {
        this.model = model;
    }

    @Override
    public Object call(Class<?> param) {
        try {
            // create controller using default constructor
            Object controller = param.newInstance();

            // inject model, if needed
            if (controller instanceof ModelInjectionTarget) {
                ((ModelInjectionTarget) controller).injectModel(model);
            }
            return controller;
        } catch (IllegalAccessException | InstantiationException ex) {
            throw new IllegalArgumentException("Could not initialize "+ param.getSimpleName()+" using the default constructor", ex);
        }
    }

}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Manage your student");
        Model model = new Model();

        // the controller factory is just a function mapping a Class 
        // to a controller instance:

        Callback<Class<?>, Object> controllerFactory = type -> {
            try {
                for (Constructor<?> c : type.getConstructors()) {
                    // look for a constructor taking a single parameter of type Model:
                    if (c.getParameterCount()==1 && c.getParameterTypes()[0]==Model.class) {
                        return c.newInstance(model);
                    }
                }
                // no suitable constructor found, just use default:
                return type.newInstance();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        };

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("gui/screentab.fxml"));
            loader.setControllerFactory(controllerFactory);
            BorderPane root = (BorderPane)loader.load();
            Scene scene = new Scene(root,1000,600);
            scene.getStylesheets().add(getClass().getResource("gui/stylesheet1.css").toExternalForm());
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Model {

    private static final Model model;
    StudentiDAO dao;
    List<Studente> elencoStudenti;

    private Model(){
        dao = new StudentiDAO();
        elencoStudenti = new ArrayList<Studente>();
    }

    public static Model getInstance(){
        if(model == null){
            model = new Model();
        }

        return model;
    }

    public List<Studente> elencaStudenti(){
        elencoStudenti= dao.listaStudenti();
        return elencoStudenti;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35714741" questionTitle="Multiple FXML variables to 1 controller handle">
<Answer><![CDATA[package application;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

public class EmailButton extends Button {

    @FXML
    private Label nameLabel ;
    @FXML
    private Label addressLabel ;

    private final StringProperty name = new SimpleStringProperty();
    private final StringProperty emailAddress = new SimpleStringProperty();

    public EmailButton() throws IOException {

        FXMLLoader loader = new FXMLLoader(getClass().getResource("emailButton.fxml"));
        loader.setRoot(this);
        loader.setController(this);
        loader.load();
    }

    public void initialize() {
        nameLabel.textProperty().bind(name);
        addressLabel.textProperty().bind(emailAddress);
    }

    @FXML
    private void sendEmail() {
        try {
            Desktop desktop = Desktop.getDesktop();
            String message = "mailto:"+getEmailAddress()+"?subject=Music%20Bookings";
            URI uri = URI.create(message);
            desktop.mail(uri);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public StringProperty nameProperty() {
        return name ;
    }

    public final String getName() {
        return nameProperty().get();
    }

    public final void setName(String name) {
        nameProperty().set(name);
    }

    public StringProperty emailAddressProperty() {
        return emailAddress ;
    }

    public final String getEmailAddress() {
        return emailAddressProperty().get();
    }

    public final void setEmailAddress(String emailAddress) {
        emailAddressProperty().set(emailAddress);
    }
}]]></Answer>
<Answer><![CDATA[@FXML
private Button id1;
@FXML
private Button id2;
@FXML
private Button id3;
@FXML
private Button id4;
@FXML
private Button id5;
@FXML
private Button id6;
@FXML
private Button id7;
@FXML
private Button id8;
@FXML
private Button id9;

private Map<Button, String> emailVariables;

@Override
public void initialize(URL location, ResourceBundle resources)
{
    emailVariables = new HashMap<Button, String>();
    emailVariables.put(id1, "id1@example.com");
    emailVariables.put(id2, "id2@example.com");
    emailVariables.put(id3, "id3@example.com");
    emailVariables.put(id4, "id4@example.com");
    emailVariables.put(id5, "id5@example.com");
    emailVariables.put(id6, "id6@example.com");
    emailVariables.put(id7, "id7@example.com");
    emailVariables.put(id8, "id8@example.com");
    emailVariables.put(id9, "i91@example.com");
}

@FXML
protected void handleContactEmailButtonAction(ActionEvent event)
{

try
{
    Desktop desktop = Desktop.getDesktop();
    String message = "mailto:" + emailvariables.get((Button) event.getSource()) + "?subject=Music%20Bookings";
    URI uri = URI.create(message);
    desktop.mail(uri);

}
catch (Exception e)
{
    e.printStackTrace();
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35585035" questionTitle="What the easiest way to animate a Path as an object traverses it?">
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.CubicCurveTo;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.stage.Stage;
import javafx.util.Duration;

public class PathVisualization extends Application {

    private static double SCENE_WIDTH = 400;
    private static double SCENE_HEIGHT = 260;

    Canvas canvas;

    @Override
    public void start(Stage primaryStage) throws Exception {

        Pane root = new Pane();
        Path path = createPath();
        canvas = new Canvas(SCENE_WIDTH,SCENE_HEIGHT);

        root.getChildren().addAll(path, canvas);

        primaryStage.setScene(new Scene(root, SCENE_WIDTH, SCENE_HEIGHT));
        primaryStage.show();

        Animation animation = createPathAnimation(path, Duration.seconds(5));
        animation.play();
    }

    private Path createPath() {

        Path path = new Path();

        path.setStroke(Color.RED);
        path.setStrokeWidth(10);

        path.getElements().addAll(new MoveTo(20, 20), new CubicCurveTo(380, 0, 380, 120, 200, 120), new CubicCurveTo(0, 120, 0, 240, 380, 240), new LineTo(20,20));

        return path;
    }

    private Animation createPathAnimation(Path path, Duration duration) {

        GraphicsContext gc = canvas.getGraphicsContext2D();

        // move a node along a path. we want its position
        Circle pen = new Circle(0, 0, 4);

        // create path transition
        PathTransition pathTransition = new PathTransition( duration, path, pen);
        pathTransition.currentTimeProperty().addListener( new ChangeListener<Duration>() {

            Location oldLocation = null;

            /**
             * Draw a line from the old location to the new location
             */
            @Override
            public void changed(ObservableValue<? extends Duration> observable, Duration oldValue, Duration newValue) {

                // skip starting at 0/0
                if( oldValue == Duration.ZERO)
                    return;

                // get current location
                double x = pen.getTranslateX();
                double y = pen.getTranslateY();

                // initialize the location
                if( oldLocation == null) {
                    oldLocation = new Location();
                    oldLocation.x = x;
                    oldLocation.y = y;
                    return;
                }

                // draw line
                gc.setStroke(Color.BLUE);
                gc.setFill(Color.YELLOW);
                gc.setLineWidth(4);
                gc.strokeLine(oldLocation.x, oldLocation.y, x, y);

                // update old location with current one
                oldLocation.x = x;
                oldLocation.y = y;
            }
        });

        return pathTransition;
    }

    public static class Location {
        double x;
        double y;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[class DrawPathTransition(val path: Path) : Transition() {
    private val length = path.totalLength
    private val stroked = path.strokeDashArray.isNotEmpty()
    private val dashArray: List<Double> = if(stroked) ArrayList(path.strokeDashArray) else emptyList()
    private val dashSum = dashArray.sum()
    private val dashOffset = path.strokeDashOffset

    var duration: Duration
        get() = durationProperty.get()
        set(value) {
            durationProperty.set(value)
        }
    val durationProperty = SimpleObjectProperty(DEFAULT_DURATION)


    init {
        durationProperty.addListener({ _ -> cycleDuration = duration })

        if(stroked) {
            statusProperty().addListener({ _, _, status ->
                if(status == Animation.Status.STOPPED) {
                    path.strokeDashOffset = dashOffset
                    path.strokeDashArray.setAll(dashArray)
                }
            })
        }
    }

    override fun interpolate(frac: Double) {
        val l = length * frac
        if(stroked) {
            path.strokeDashOffset = l

            val n = ceil(l / dashSum).toInt()
            path.strokeDashArray.clear()
            path.strokeDashArray.addAll(0.0, l)
            (1..n).forEach { path.strokeDashArray.addAll(dashArray) }
            path.strokeDashArray.addAll(0.0, length - l)
        }
        else path.strokeDashOffset = length - l
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35308219" questionTitle="How to format a text field javafx">
<Answer><![CDATA[public class TimeTextField extends TextField 
{   
    public TimeTextField(String init) {
        super(init) ;
        focusedProperty().addListener((o, oldV, newV) -> changed(newV));
    }

    public TimeTextField() {
        this("12:00 PM");
    }

    private void changed(boolean focus) {
        if (!focus) {
            if (!validate()) { 
                setText("12:00 PM");
                selectAll();
                requestFocus();
                Toolkit.getDefaultToolkit().beep();
            }
        }
    }

    public boolean validate()  {
        return getText()
        .matches("(0?[1-9]|1[0-2]):[0-5][0-9](:[0-5][0-9])? ?[APap][mM]$");
    }    
}]]></Answer>
<Answer><![CDATA[public static void prepareTextField(TextField tf) {
    tf.setAlignment(Pos.CENTER);
    tf.setBackground(Background.EMPTY);
    tf.setBorder(Border.EMPTY);
    tf.setPadding(Insets.EMPTY);
    tf.setPrefColumnCount(2);
}

public static class IntRangeStringConverter extends StringConverter<Integer> {

    private final int min;
    private final int max;

    public IntRangeStringConverter(int min, int max) {
        this.min = min;
        this.max = max;
    }

    @Override
    public String toString(Integer object) {
        return String.format("%02d", object);
    }

    @Override
    public Integer fromString(String string) {
        int integer = Integer.parseInt(string);
        if (integer > max || integer < min) {
            throw new IllegalArgumentException();
        }

        return integer;
    }

}

public static Label createLabel() {
    Label label = new Label(":");
    label.setPrefWidth(3);
    return label;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35279377" questionTitle="JavaFX weird (Key)EventBehavior">
<Answer><![CDATA[public class TablePersonAddRowAndEdit extends Application {

    private PersonStandIn standIn = new PersonStandIn();
    private final ObservableList<Person> data =
            // Person from Tutorial - with Properties exposed!
            FXCollections.observableArrayList(
                    new Person("Jacob", "Smith", "jacob.smith@example.com"),
                    new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
                    new Person("Ethan", "Williams", "ethan.williams@example.com"),
                    new Person("Emma", "Jones", "emma.jones@example.com"),
                    new Person("Michael", "Brown", "michael.brown@example.com")
                    , standIn
                    );


    private Parent getContent() {

        TableView<Person> table = new TableView<>();
        table.setItems(data);
        table.setEditable(true);

        TableColumn<Person, String> firstName = new TableColumn<>("First Name");
        firstName.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        firstName.setCellFactory(v -> new MyTextFieldCell<>());
        ListChangeListener l = c -> {
            while (c.next()) {
                // true added only
                if (c.wasAdded() && ! c.wasRemoved()) {
                    // force the re-layout before starting the edit
                    table.layout();
                    table.edit(c.getFrom(), firstName);
                    return;
                }
            };
        };
        // install the listener to the items after the skin has registered
        // its own
        ChangeListener skinListener = (src, ov, nv) -> {
            table.getItems().removeListener(l);
            table.getItems().addListener(l);
        };
        table.skinProperty().addListener(skinListener);

        table.getColumns().addAll(firstName);

        Button add = new Button("AddAndEdit");
        add.setOnAction(e -> {
            int standInIndex = table.getItems().indexOf(standIn);
            int index = standInIndex < 0 ? table.getItems().size() : standInIndex;
            index =1;
            Person person = createNewItem("edit", index);
            table.getItems().add(index, person);

        });
        Button edit = new Button("Edit");
        edit.setOnAction(e -> {
            int index = 1;//table.getItems().size() -2;
            table.scrollTo(index);
            table.requestFocus();
            table.edit(index, firstName);
        });
        HBox buttons = new HBox(10, add, edit);
        BorderPane content = new BorderPane(table);
        content.setBottom(buttons);
        return content;
    }

    /**
     * A cell that can handle not-editable items. Has to update its
     * editability based on the rowItem. Must be done in updateItem
     * (tried a listener to the tableRow's item, wasn't good enough - doesn't
     * get notified reliably)
     * 
     */
    public static class MyTextFieldCell<S> extends TextFieldTableCell<S, String> {

        private Button button;

        public MyTextFieldCell() {
            super(new DefaultStringConverter());
            ContextMenu menu = new ContextMenu();
            menu.getItems().add(createMenuItem());
            setContextMenu(menu);
        }

        private boolean isStandIn() {
            return getTableRow() != null && getTableRow().getItem() instanceof StandIn;
        }

        /**
         * Update cell's editable based on the rowItem.
         */
        private void doUpdateEditable() {
            if (isEmpty() || isStandIn()) {
                setEditable(false);
            } else {
                setEditable(true);
            }
        }

        @Override
        public void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            doUpdateEditable();
            if (isStandIn()) {
                if (isEditing()) {
                    LOG.info("shouldn't be editing - has StandIn");
                }
                if (button == null) {
                    button = createButton();
                }
                setText(null);
                setGraphic(button);
            } 
        }

        private Button createButton() {
            Button b = new Button("Add");
            b.setOnAction(e -> {
                int index = getTableView().getItems().size() -1;
                getTableView().getItems().add(index, createNewItem("button", index));
            });
            return b;
        }

        private MenuItem createMenuItem() {
            MenuItem item = new MenuItem("Add");
            item.setOnAction(e -> {
                if (isStandIn()) return;
                int index = getIndex();
                getTableView().getItems().add(index, createNewItem("menu", index));
            });
            return item;
        }


        private S createNewItem(String text, int index) {
            return (S) new Person(text + index, text + index, text);
        }

    }

    private Person createNewItem(String text, int index) {
        return new Person(text + index, text + index, text);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(getContent()));
        primaryStage.setTitle(FXUtils.version());
        primaryStage.show();
    }

    /**
     * Marker-Interface to denote a class as not mutable.
     */
    public static interface StandIn {
    }

    public static class PersonStandIn extends Person implements StandIn{

         public PersonStandIn() {
            super("standIn", "", "");
        }

    }

    public static void main(String[] args) {
        launch(args);
    }

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger
            .getLogger(TablePersonAddRowAndEdit.class.getName());
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ObservableValueBase;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class TableViewWithAddAtEnd extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<String> table = new TableView<>();
        table.setEditable(true);

        TableColumn<String, String> column = new TableColumn<>("Data");
        column.setPrefWidth(150);
        table.getColumns().add(column);

        // use trivial wrapper for string data:
        column.setCellValueFactory(cellData -> new ObservableValueBase<String>() {
            @Override
            public String getValue() {
                return cellData.getValue();
            }
        });

        column.setCellFactory(col -> new EditingCellWithMenuEtc());

        column.setOnEditCommit(e -> 
            table.getItems().set(e.getTablePosition().getRow(), e.getNewValue()));

        for (int i = 1 ; i <= 20; i++) {
            table.getItems().add("Item "+i);
        }
        // blank for "add" button:
        table.getItems().add("");

        BorderPane root = new BorderPane(table);
        primaryStage.setScene(new Scene(root, 600, 600));
        primaryStage.show();

    }

    public static class EditingCellWithMenuEtc extends TableCell<String, String> {
        private TextField textField ;
        private Button button ;
        private ContextMenu contextMenu ;

        // The update relies on knowing both the item and the index
        // Since we don't know (or at least shouldn't rely on) the order
        // in which the item and index are updated, we just delegate
        // implementations of both updateItem and updateIndex to a general
        // method. This way doUpdate() is always called last with consistent
        // state, so we are guaranteed to be in a consistent state when the
        // cell is rendered, even if we are temporarily in an inconsistent 
        // state between the calls to updateItem and updateIndex.

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            doUpdate(item, getIndex(), empty);
        }

        @Override
        public void updateIndex(int index) {
            super.updateIndex(index);
            doUpdate(getItem(), index, isEmpty());
        }

        // update the cell. This updates the text, graphic, context menu
        // (empty cells and the special button cell don't have context menus)
        // and editable state (empty cells and the special button cell can't
        // be edited)
        private void doUpdate(String item, int index, boolean empty) {
            if (empty) {
                setText(null);
                setGraphic(null);
                setContextMenu(null);
                setEditable(false);
            } else {
                if (index == getTableView().getItems().size() - 1) {
                    setText(null);
                    setGraphic(getButton());
                    setContextMenu(null);
                    setEditable(false);
                } else if (isEditing()) {
                    setText(null);
                    getTextField().setText(item);
                    setGraphic(getTextField());
                    getTextField().requestFocus();
                    setContextMenu(null);
                    setEditable(true);
                } else {
                    setText(item);
                    setGraphic(null);
                    setContextMenu(getMenu());
                    setEditable(true);
                }
            }
        }

        @Override
        public void startEdit() {
            if (! isEditable() 
                    || ! getTableColumn().isEditable()
                    || ! getTableView().isEditable()) {
                return ;
            }
            super.startEdit();
            getTextField().setText(getItem());
            setText(null);
            setGraphic(getTextField());
            setContextMenu(null);
            textField.selectAll();
            textField.requestFocus();
        }

        @Override
        public void cancelEdit() {
            super.cancelEdit();
            setText(getItem());
            setGraphic(null);
            setContextMenu(getMenu());
        }

        @Override
        public void commitEdit(String newValue) {
            // note this fires onEditCommit handler on column:
            super.commitEdit(newValue);
            setText(getItem());
            setGraphic(null);
            setContextMenu(getMenu());
        }

        private void addNewItem(int index) {
            getTableView().getItems().add(index, "New Item");
            // force recomputation of cells:
            getTableView().layout();
            // start edit:
            getTableView().edit(index, getTableColumn());
        }

        private ContextMenu getMenu() {
            if (contextMenu == null) {
                createContextMenu();
            }
            return contextMenu ;
        }

        private void createContextMenu() {
            MenuItem addNew = new MenuItem("Add new");
            addNew.setOnAction(e -> addNewItem(getIndex() + 1));
            MenuItem edit = new MenuItem("Edit");
            // note we call TableView.edit(), not this.startEdit() to ensure 
            // table's editing state is kept consistent:
            edit.setOnAction(e -> getTableView().edit(getIndex(), getTableColumn()));
            contextMenu = new ContextMenu(addNew, edit);
        }

        private Button getButton() {
            if (button == null) {
                createButton();
            }
            return button ;
        }

        private void createButton() {
            button = new Button("Add");
            button.prefWidthProperty().bind(widthProperty());
            button.setOnAction(e -> addNewItem(getTableView().getItems().size() - 1));
        }

        private TextField getTextField() {
            if (textField == null) {
                createTextField();
            }
            return textField ;
        }

        private void createTextField() {
            textField = new TextField();
            // use setOnAction for enter, to avoid conflict with enter on cell:
            textField.setOnAction(e -> commitEdit(textField.getText()));
            // use key released for escape: note text fields do note consume
            // key releases they don't handle:
            textField.setOnKeyReleased(e -> {
                if (e.getCode() == KeyCode.ESCAPE) {
                    cancelEdit();
                }
            });
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35243773" questionTitle="How can I build map with region selection?">
<Answer><![CDATA[PixelReader reader1 = image1.getPixelReader();
PixelReader reader2 = image2.getPixelReader();
SimpleIntegerProperty region = new SimpleIntegerProperty(-1);
region.addListener((observable, oldValue, newValue) -> {
    if (newValue.intValue() < 0) {
        System.out.println("region left");
    } else {
        System.out.println("Region " + (newValue.intValue() + 1));
    }
});
canvas.setOnMouseMoved(event -> {
    int x = (int) event.getX();
    int y = (int) event.getY();
    if (x < image1.getWidth() && y < image1.getHeight() && reader1.getColor(x, y).getOpacity() != 0) {
        region.set(0);
    } else if (x < image2.getWidth() && y < image2.getHeight() && reader2.getColor(x, y).getOpacity() != 0) {
        region.set(1);
    } else {
        region.set(-1);
    }
});]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class LayersWithMouseEvents extends Application {

    @Override
    public void start(Stage primaryStage) {

        // root
        StackPane root = new StackPane();

        // create layers
        Pane region1Layer = new Pane();
        Pane region2Layer = new Pane();

        // add layers
        root.getChildren().addAll(region1Layer, region2Layer);

        // load images
        ImageView region1ImageView = new ImageView( new Image( getClass().getResource("region1.png").toExternalForm()));
        ImageView region2ImageView = new ImageView( new Image( getClass().getResource("region2.png").toExternalForm()));

        // add images
        region1Layer.getChildren().add(region1ImageView);
        region2Layer.getChildren().add(region2ImageView);

        // mouse handler
        region1Layer.setOnMousePressed(e -> System.out.println("Region 1: " + e));
        region2Layer.setOnMousePressed(e -> System.out.println("Region 2: " + e));

        // this is the magic that allows you to click on the separate layers, but ONLY(!) as long as the layer is transparent
        region1Layer.setPickOnBounds(false);
        region2Layer.setPickOnBounds(false);

        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35226823" questionTitle="How do streams stop?">
<Answer><![CDATA[static <T> Stream<T> generate(Supplier<T> s, long count) {
    return StreamSupport.stream(
               new Spliterators.AbstractSpliterator<T>(count, Spliterator.SIZED) {
        long remaining=count;

        public boolean tryAdvance(Consumer<? super T> action) {
            if(remaining<=0) return false;
            remaining--;
            action.accept(s.get());
            return true;
        }

        /** May improve the performance of most non-short-circuiting operations */
        @Override
        public void forEachRemaining(Consumer<? super T> action) {
            long toGo=remaining;
            remaining=0;
            for(; toGo>0; toGo--) action.accept(s.get());
        }
    }, false);
}]]></Answer>
<Answer><![CDATA[public class GuardedSpliterator<T> implements Spliterator<T> {

  final Supplier<? extends T> generator;

  final Predicate<T> termination;

  final boolean inclusive;

  public GuardedSpliterator(Supplier<? extends T> generator, Predicate<T> termination, boolean inclusive) {
    this.generator = generator;
    this.termination = termination;
    this.inclusive = inclusive;
  }

  @Override
  public boolean tryAdvance(Consumer<? super T> action) {
    T next = generator.get(); 
    boolean end = termination.test(next);
    if (inclusive || !end) {
      action.accept(next);
    }
    return !end;
  }

  @Override
  public Spliterator<T> trySplit() {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  @Override
  public long estimateSize() {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  @Override
  public int characteristics() {
    return Spliterator.ORDERED;
  }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35218917" questionTitle="Setting predicate for FilteredList in ComboBox affects input">
<Answer><![CDATA[class InputFilter implements ChangeListener<String> {
    private ComboBox<ComboBoxItem> box;
    private FilteredList<ComboBoxItem> items;

    public InputFilter(ComboBox<ComboBoxItem> box, FilteredList<ComboBoxItem> items) {
        this.box = box;
        this.items = items;
    }

    @Override
    public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
        String value = newValue;
        // If any item is selected we get the first word of that item.
        String selected = box.getSelectionModel().getSelectedItem() != null
                ? box.getSelectionModel().getSelectedItem().getText() : null;

        // If an item is selected and the value of in the editor is the same
        // as the selected item we don't filter the list.
        if (selected != null && value.equals(selected)) {
            items.setPredicate(item -> {
                return true;
            });
        } else {
            // This will most likely change the box editor contents
            items.setPredicate(item -> {
                if (item.getText().toUpperCase().startsWith(value.toUpperCase())) {
                    return true;
                } else {
                    return false;
                }
            });

            // Restore the original search text since it was changed
            box.getEditor().setText(value);
        }

        //box.show(); // <-- Uncomment this line for a neat look
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
    String value = newValue;
    // If any item is selected we get the first word of that item.
    String selected = box.getSelectionModel().getSelectedItem() != null
            ? box.getSelectionModel().getSelectedItem().getText() : null;

    box.getEditor().textProperty().removeListener(this); // new line #1

    // If an item is selected and the value of in the editor is the same
    // as the selected item we don't filter the list.
    if (selected != null && value.equals(selected)) {
        items.setPredicate(item -> {
            return true;
        });
    } else {
        items.setPredicate(item -> {
            if (item.getText().toUpperCase().startsWith(value.toUpperCase())) {
                return true;
            } else {
                return false;
            }
        });
        box.getEditor().setText(newValue); // new line #2
    }

    box.getEditor().textProperty().addListener(this); // new line #3
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35217936" questionTitle="Add CORS headers to response of j_security_check">
<Answer><![CDATA[@POST
@Path("login")
@PermitAll
public Response postLogin() {
    String user = request.getParameter("j_username");
    String password = request.getParameter("j_password");
    StringBuffer buf = request.getRequestURL();
    URI redir = null; 
    try {redir = new URI(buf.substring(0, buf.lastIndexOf("/login")) + "/session");} 
    catch (URISyntaxException e) {}
    try {
        request.login(user, password);
        return Response.seeOther(redir).build();
    } catch (ServletException e) {
        if (e.getMessage() != null && e.getMessage().equals("UT010030: User already logged in")) {
            Response.seeOther(redir).build();
        }
        return Response.status(Status.FORBIDDEN).build();
    }
}]]></Answer>
<Answer><![CDATA[<subsystem xmlns="urn:jboss:domain:undertow:3.0">
            <buffer-cache name="default"/>
            <server name="default-server">
                <http-listener name="default" redirect-socket="https" socket-binding="http"/>
                <host name="default-host" alias="localhost">
                    <location name="/" handler="welcome-content"/>
                    <filter-ref name="server-header"/>
                    <filter-ref name="x-powered-by-header"/>
                    <!--CORS headers -->
                    <filter-ref name="Access-Control-Allow-Origin"/>
                    <filter-ref name="Access-Control-Allow-Methods"/>
                    <filter-ref name="Access-Control-Allow-Headers"/>
                    <filter-ref name="Access-Control-Allow-Credentials"/>
                    <filter-ref name="Access-Control-Max-Age"/>
                </host>
            </server>
            <servlet-container name="default">
                <jsp-config/>
                <websockets/>
            </servlet-container>
            <handlers>
                <file name="welcome-content" path="${jboss.home.dir}/welcome-content"/>
            </handlers>
            <filters>
                <response-header name="server-header" header-value="WildFly/10" header-name="Server"/>
                <response-header name="x-powered-by-header" header-value="Undertow/1" header-name="X-Powered-By"/>
                <!-- CORS headers -->
                <response-header name="Access-Control-Allow-Origin" header-name="Access-Control-Allow-Origin" header-value="*"/>
                <response-header name="Access-Control-Allow-Methods" header-name="Access-Control-Allow-Methods" header-value="OPTIONS, GET, POST, PUT, DELETE"/>
                <response-header name="Access-Control-Allow-Headers" header-name="Access-Control-Allow-Headers" header-value="accept, authorization, content-type, x-requested-with"/>
                <response-header name="Access-Control-Allow-Credentials" header-name="Access-Control-Allow-Credentials" header-value="true"/>
                <response-header name="Access-Control-Max-Age" header-name="Access-Control-Max-Age" header-value="60"/>
            </filters>
        </subsystem>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35131428" questionTitle="ComboBox in a tableview cell in JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.ComboBoxTableCell;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class TableWithComboBoxExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<Contact> contactTable = new TableView<>();
        contactTable.setEditable(true);

        TableColumn<Contact, String> nameCol = new TableColumn<>("Name");
        nameCol.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
        nameCol.setCellFactory(TextFieldTableCell.forTableColumn());
        contactTable.getColumns().add(nameCol);


        TableColumn<Contact, String> categoryCol = new TableColumn<>("Category");
        categoryCol.setCellValueFactory(cellData -> cellData.getValue().categoryProperty());

        categoryCol.setCellFactory(ComboBoxTableCell.forTableColumn("Friends", "Family", "Work Contacts"));

        contactTable.getColumns().add(categoryCol);

        contactTable.getItems().addAll(
            new Contact("Bill Gates", "Work Contacts"),
            new Contact("Barack Obama", "Friends"),
            new Contact("Tim Cook", "Work Contacts")
        );

        Scene scene = new Scene(new BorderPane(contactTable), 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static class Contact {
        private final StringProperty name = new SimpleStringProperty();
        private final StringProperty category = new SimpleStringProperty();

        public Contact(String name, String category) {
            setName(name);
            setCategory(category);
        }

        public final StringProperty nameProperty() {
            return this.name;
        }


        public final String getName() {
            return this.nameProperty().get();
        }


        public final void setName(final String name) {
            this.nameProperty().set(name);
        }


        public final StringProperty categoryProperty() {
            return this.category;
        }


        public final String getCategory() {
            return this.categoryProperty().get();
        }


        public final void setCategory(final String category) {
            this.categoryProperty().set(category);
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[TableColumn<TableViewTest, StringProperty> column = new TableColumn<>("option");
    column.setCellValueFactory(i -> {
        final StringProperty value = i.getValue().optionProperty();
        // binding to constant value
        return Bindings.createObjectBinding(() -> value);
    });

    column.setCellFactory(col -> {
        TableCell<TableViewTest, StringProperty> c = new TableCell<>();
        final ComboBox<String> comboBox = new ComboBox<>(options);
        c.itemProperty().addListener((observable, oldValue, newValue) -> {
            if (oldValue != null) {
                comboBox.valueProperty().unbindBidirectional(oldValue);
            }
            if (newValue != null) {
                comboBox.valueProperty().bindBidirectional(newValue);
            }
        });
        c.graphicProperty().bind(Bindings.when(c.emptyProperty()).then((Node) null).otherwise(comboBox));
        return c;
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35111285" questionTitle="Shifting tiles in a puzzle game">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.stage.Stage;
import javafx.util.Duration;

public class PuzzleGame extends Application {

    private Image image = new Image("http://images.cdn.autocar.co.uk/sites/autocar.co.uk/files/styles/gallery_slide/public/ferrari-laferrari-zfye-059_1.jpg?itok=hfLNxUD9",600,600,false,true);

    private static double SCENE_WIDTH = 1024;
    private static double SCENE_HEIGHT = 768;

    public static int TILE_ROW_COUNT = 5;
    public static int TILE_COLUMN_COUNT = 5;
    public static double TILE_SIZE = 120;

    public static double offsetX = (SCENE_WIDTH - TILE_ROW_COUNT * TILE_SIZE) / 2;
    public static double offsetY = (SCENE_HEIGHT - TILE_COLUMN_COUNT * TILE_SIZE) / 2;

    List<Cell> cells = new ArrayList<>();

    @Override
    public void start(Stage primaryStage) {

        // create grid
        for (int x = 0; x < TILE_ROW_COUNT; x++) {
            for (int y = 0; y < TILE_COLUMN_COUNT; y++) {

                // create tile
                ImageView tile = new ImageView(image);
                Rectangle2D rect = new Rectangle2D(TILE_SIZE * x, TILE_SIZE * y, TILE_SIZE, TILE_SIZE);
                tile.setViewport(rect);

                // consider empty cell, let it remain empty
                if (x == (TILE_ROW_COUNT - 1) && y == (TILE_COLUMN_COUNT - 1)) {
                    tile = null;
                }

                cells.add(new Cell(x, y, tile));
            }
        }

        // shuffle cells
        shuffle();

        // create playfield
        Pane pane = new Pane();

        // put tiles on playfield, assign event handler
        for (int i = 0; i < cells.size(); i++) {

            Cell cell = cells.get(i);

            Node imageView = cell.getImageView();

            // consider empty cell
            if (imageView == null)
                continue;

            // click-handler: swap tiles, check if puzzle is solved
            imageView.addEventFilter(MouseEvent.MOUSE_CLICKED, mouseEvent -> {

                moveCell((Node) mouseEvent.getSource());

            });

            // position images on scene
            imageView.relocate(cell.getLayoutX(), cell.getLayoutY());

            pane.getChildren().add(cell.getImageView());
        }

        Scene scene = new Scene(pane, SCENE_WIDTH, SCENE_HEIGHT);
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    /**
     * Swap images of cells randomly
     */
    public void shuffle() {

        Random rnd = new Random();

        for (int i = 0; i < 1000; i++) {

            int a = rnd.nextInt(cells.size());
            int b = rnd.nextInt(cells.size());

            if (a == b)
                continue;

            // skip bottom right cell swap, we want the empty cell to remain there
            if( cells.get(a).isEmpty() || cells.get(b).isEmpty())
                continue;

            swap( cells.get(a), cells.get(b));

        }

    }

    public void swap( Cell cellA, Cell cellB) {

        ImageView tmp = cellA.getImageView();
        cellA.setImageView(cellB.getImageView());
        cellB.setImageView(tmp);

    }

    public boolean checkSolved() {

        boolean allSolved = true;

        for (Cell cell : cells) {

            if (!cell.isSolved()) {
                allSolved = false;
                break;
            }
        }

        System.out.println("Solved: " + allSolved);

        return allSolved;
    }

    public void moveCell(Node node) {

        // get current cell using the selected node (imageview)
        Cell currentCell = null;
        for (Cell tmpCell : cells) {
            if (tmpCell.getImageView() == node) {
                currentCell = tmpCell;
                break;
            }
        }

        if (currentCell == null)
            return;

        // get empty cell
        Cell emptyCell = null;

        for (Cell tmpCell : cells) {
            if (tmpCell.isEmpty()) {
                emptyCell = tmpCell;
                break;
            }
        }

        if (emptyCell == null)
            return;

        // check if cells are swappable: neighbor distance either x or y must be 1 for a valid move
        int steps = Math.abs(currentCell.x - emptyCell.x) + Math.abs(currentCell.y - emptyCell.y);
        if (steps != 1)
            return;

        System.out.println("Transition: " + currentCell + " -> " + emptyCell);

        // cells are swappable => create path transition
        Path path = new Path();
        path.getElements().add(new MoveToAbs(currentCell.getImageView(), currentCell.getLayoutX(), currentCell.getLayoutY()));
        path.getElements().add(new LineToAbs(currentCell.getImageView(), emptyCell.getLayoutX(), emptyCell.getLayoutY()));

        PathTransition pathTransition = new PathTransition();
        pathTransition.setDuration(Duration.millis(100));
        pathTransition.setNode(currentCell.getImageView());
        pathTransition.setPath(path);
        pathTransition.setOrientation(PathTransition.OrientationType.NONE);
        pathTransition.setCycleCount(1);
        pathTransition.setAutoReverse(false);

        final Cell cellA = currentCell;
        final Cell cellB = emptyCell;
        pathTransition.setOnFinished(actionEvent -> {

            swap( cellA, cellB);

            checkSolved();

        });

        pathTransition.play();

    }

    private static class Cell {

        int x;
        int y;

        ImageView initialImageView;
        ImageView currentImageView;

        public Cell(int x, int y, ImageView initialImageView) {
            super();
            this.x = x;
            this.y = y;
            this.initialImageView = initialImageView;
            this.currentImageView = initialImageView;
        }

        public double getLayoutX() {
            return x * TILE_SIZE + offsetX;
        }

        public double getLayoutY() {
            return y * TILE_SIZE + offsetY;
        }

        public ImageView getImageView() {
            return currentImageView;
        }

        public void setImageView(ImageView imageView) {
            this.currentImageView = imageView;
        }

        public boolean isEmpty() {
            return currentImageView == null;
        }

        public boolean isSolved() {
            return this.initialImageView == currentImageView;
        }

        public String toString() {
            return "[" + x + "," + y + "]";
        }

    }

    // absolute (layoutX/Y) transitions using the pathtransition for MoveTo
    public static class MoveToAbs extends MoveTo {

        public MoveToAbs(Node node) {
            super(node.getLayoutBounds().getWidth() / 2, node.getLayoutBounds().getHeight() / 2);
        }

        public MoveToAbs(Node node, double x, double y) {
            super(x - node.getLayoutX() + node.getLayoutBounds().getWidth() / 2, y - node.getLayoutY() + node.getLayoutBounds().getHeight() / 2);
        }

    }

    // absolute (layoutX/Y) transitions using the pathtransition for LineTo
    public static class LineToAbs extends LineTo {

        public LineToAbs(Node node, double x, double y) {
            super(x - node.getLayoutX() + node.getLayoutBounds().getWidth() / 2, y - node.getLayoutY() + node.getLayoutBounds().getHeight() / 2);
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[private static final int COLUMN_COUNT = 5;
private static final int ROW_COUNT = 5;

private static void fillGridPane(GridPane pane, ImageView[][] view, Image imag) {
    List<ImageView> images = new ArrayList<>(24);
    for (int i = 0; i < COLUMN_COUNT; i++) {
        for (int j = 0, end = i == (COLUMN_COUNT - 1) ? ROW_COUNT - 1 : ROW_COUNT; j < end; j++) {
            ImageView iv = new ImageView(imag);
            images.add(iv);
            view[i][j] = iv;
            Rectangle2D rect = new Rectangle2D(120 * i, 120 * j, 120, 120);
            iv.setViewport(rect);
        }
    }
    Collections.shuffle(images);
    Iterator<ImageView> iter = images.iterator();
    for (int i = 0; i < COLUMN_COUNT; i++) {
        for (int j = 0, end = i == (COLUMN_COUNT - 1) ? ROW_COUNT - 1 : ROW_COUNT; j < end; j++) {
            pane.add(iter.next(), i, j);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35103132" questionTitle="How to change the background colour of individual items in TreeView (JavaFX)?">
<Answer><![CDATA[private final static double FACTOR = -Math.log(5d) * 0.01;


    treeView.setCellFactory((t) -> new TreeCell<IntegerProperty>() {

        @Override
        protected void updateItem(IntegerProperty item, boolean empty) {
            super.updateItem(item, empty);
            if (empty || item == null) {
                textProperty().unbind();
                backgroundProperty().unbind();
                setText(null);
                setBackground(null);
            } else {
                textProperty().bind(item.asString());
                backgroundProperty().bind(Bindings.createObjectBinding(()
                        -> new Background(new BackgroundFill(
                                        Color.color(1, Math.exp(FACTOR * item.get()), 0, 1),
                                        CornerRadii.EMPTY, Insets.EMPTY)), item));
            }

        }

    });]]></Answer>
<Answer><![CDATA[import java.util.Random;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class TreeViewChangeBackgroundOnItem extends Application {

    private TreeView<Item> tree;

    @Override
    public void start(Stage primaryStage) {
        tree = new TreeView<>();
        tree.setRoot(new TreeItem<>(new Item(0)));
        tree.getRoot().setExpanded(true);
        Random rng = new Random();
        for (int i = 0 ; i < 10 ; i++) {
            tree.getRoot().getChildren().add(
                    new TreeItem<>(new Item(rng.nextInt(100))));
        }

        tree.setCellFactory(tv -> new TreeCell<Item>() {
            @Override
            protected void updateItem(Item item, boolean empty) {
                super.updateItem(item, empty);
                styleProperty().unbind();
                textProperty().unbind();
                if (empty) {
                    setText("");
                    setStyle("");
                } else {
                    textProperty().bind(item.valueProperty().asString("Value: %d"));
                    styleProperty().bind(Bindings.createStringBinding(() -> 
                        String.format("-fx-background: #ff%02x00;",
                                computeGreen(item.getValue())), 
                        item.valueProperty()));
                }
            }
        });

        Button inc = createAdjustButton("Increment", 1);

        Button dec = createAdjustButton("Decrement", -1);

        HBox buttons = new HBox(5, inc, dec);
        buttons.setAlignment(Pos.CENTER);
        buttons.setPadding(new Insets(10));

        BorderPane root = new BorderPane(tree, null, null, buttons, null);
        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private int computeGreen(int value) {
        int clamped = Math.max(0, Math.min(value, 100));
        return 255-255*clamped/100 ;
    }

    private Button createAdjustButton(String text, int delta) {
        Button button = new Button(text);
        button.setOnAction(e -> adjust(delta));
        button.disableProperty().bind(tree.getSelectionModel().selectedItemProperty().isNull());
        return button ;
    }

    private void adjust(int delta) {
        Item selected = tree.getSelectionModel().getSelectedItem().getValue();
        selected.setValue(selected.getValue()+delta);
    }

    public static class Item {
        private final IntegerProperty value = new SimpleIntegerProperty();

        public Item(int value) {
            setValue(value);
        }

        public final IntegerProperty valueProperty() {
            return this.value;
        }


        public final int getValue() {
            return this.valueProperty().get();
        }


        public final void setValue(final int value) {
            this.valueProperty().set(value);
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35081031" questionTitle="JavaFx ProgressIndicator while Loading Pane (GUI)">
<Answer><![CDATA[public class SampleController implements Initializable {
@FXML
private BorderPane borderPane;
ProgressIndicator myProgressIndicator;
Task<List<Tab>> myLongTask;
TabPane tabPane = new TabPane();

@Override
public void initialize(URL location, ResourceBundle resources)
{
        myLongTask = new Task<List<Tab>>()
        {
            @Override
            protected List<Tab> call() throws Exception
            {
            List<Tab> newTabs = new ArrayList<Tab>();
            final int count = 1000 - 1;
            for (int i = 1; i <= count; i++)
            {
                Tab newTab = new Tab("Number:" + i);
                newTabs.add(newTab);
            }
            return newTabs;
            }
        };

    myProgressIndicator = new ProgressIndicator();
    myProgressIndicator.progressProperty().bind(myLongTask.progressProperty());
    borderPane.setCenter(new Pane(myProgressIndicator));

    new Thread(myLongTask).start();

    myLongTask.setOnSucceeded(evt -> {
    final List<Tab> result = myLongTask.getValue();
    final int step = 5;
    final int size = result.size();

    AnimationTimer timer = new AnimationTimer() {
        int index = 0;
        @Override
        public void handle(long now) {
        tabPane.getTabs().addAll(result.subList(index, Math.min(size, index+step)));
        index += step;
        if (index >= size) {
            this.stop();
        }
        }
    };
        timer.start();
        borderPane.setCenter(new Pane(tabPane));
    });
}]]></Answer>
<Answer><![CDATA[Task<TabPane> myLongTask;

@Override
public void initialize(URL url, ResourceBundle rb) {

    myLongTask = new Task<TabPane>() {

        @Override
        protected TabPane call() throws Exception {
            TabPane tabPane = new TabPane();
            List<Tab> tabs = tabPane.getTabs();
            final int count = 1000 - 1;
            for (int i = 1; i <= count; i++) {
                Thread.sleep(10);
                Tab newTab = new Tab("Number:" + i);
                tabs.add(newTab);
                updateProgress(i, count);
            }
            return tabPane;
        }
    };
    myLongTask.setOnSucceeded(evt -> {
        // update ui with results
        tabPane = myLongTask.getValue();
        borderPane.setCenter(new Pane(tabPane));
    });

    // add progress indicator to show progress of myLongTask
    myProgressIndicator = new ProgressIndicator();
    myProgressIndicator.progressProperty().bind(myLongTask.progressProperty());
    borderPane.setCenter(new Pane(myProgressIndicator));

    new Thread(myLongTask).start();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35076034" questionTitle="Java 8 Collections Merging List">
<Answer><![CDATA[private static class Address {

    private String address;

    public Address(String address) {
        this.address = address;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return "Address{" +
               "address='" + address + '\'' +
               '}';
    }
}

private static class Employee {

    private String name;
    private List<Address> addresses;

    public Employee(String name, List<Address> addresses) {
        this.name = name;
        this.addresses = addresses;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Address> getAddresses() {
        return addresses;
    }

    public void setAddresses(List<Address> addresses) {
        this.addresses = addresses;
    }

    @Override
    public String toString() {
        return "Employee{" +
               "name='" + name + '\'' +
               ", addresses=" + addresses +
               '}';
    }
}

private static class MainDTO {

    private List<Employee> employees;

    public MainDTO(List<Employee> employees) {
        this.employees = employees;
    }

    public List<Employee> getEmployees() {
        return employees;
    }

    public void setEmployees(List<Employee> employees) {
        this.employees = employees;
    }

    @Override
    public String toString() {
        return "MainDTO{" +
               "employees=" + employees +
               '}';
    }
}

public static void main(String[] args) {
    List<Employee> employees = new ArrayList<>();
    employees.add(new Employee("emp1", Arrays.asList(new Address("KY"), new Address("NY"))));
    employees.add(new Employee("emp2", Arrays.asList(new Address("KY"), new Address("NY"))));
    employees.add(new Employee("emp1", Arrays.asList(new Address("MN"), new Address("FL"))));
    employees.add(new Employee("emp1", Arrays.asList(new Address("TN"), new Address("AZ"))));
    MainDTO dto = new MainDTO(employees);

    List<Employee> merged = dto.getEmployees().stream()
        .collect(Collectors.toMap(Employee::getName,
                                  e -> e,
                                  (l, r) ->
                                      new Employee(l.getName(),
                                                        Stream.concat(l.getAddresses().stream(), r.getAddresses().stream())
                                                              .collect(Collectors.toList())),
                                  LinkedHashMap::new))
        .values()
        .stream()
        .collect(Collectors.toList());

    System.out.println(merged);
}]]></Answer>
<Answer><![CDATA[public static void main(String[]args){
    final List<Map.Entry<String, List<String>>> inputData = new ArrayList<>();
    inputData.add(new AbstractMap.SimpleEntry<String, 
            List<String>>("emp1", Arrays.asList("KY","NY")));
    inputData.add(new AbstractMap.SimpleEntry<String, 
            List<String>>("emp2", Arrays.asList("KY","NY")));
    inputData.add(new AbstractMap.SimpleEntry<String, 
            List<String>>("emp1", Arrays.asList("MN","FL")));
    inputData.add(new AbstractMap.SimpleEntry<String, 
            List<String>>("emp1", Arrays.asList("MN","FL")));

    //If you do not care about duplicates - use List
    final Map<String,List<String>> possibleWithDuplicatesData = 
            inputData.stream()
            .collect(Collectors.toMap(Map.Entry::getKey,
                    entry -> new ArrayList<String>()));     
    inputData.stream()
    .filter(entry -> possibleWithDuplicatesData.containsKey(entry.getKey()))
    .forEach(entry->
    possibleWithDuplicatesData.get(entry.getKey()).addAll(entry.getValue()));

    //If you want to avoid duplicates - use Set
            final Map<String,Set<String>> noDuplicatesData = 
                    inputData.stream()
                    .collect(Collectors.toMap(Map.Entry::getKey,
                            entry -> new HashSet<String>()));       
            inputData.stream()
            .filter(entry -> noDuplicatesData.containsKey(entry.getKey()))
            .forEach(entry->
            noDuplicatesData.get(entry.getKey()).addAll(entry.getValue()));

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35012518" questionTitle="Resize JavaFX Label if overrun">
<Answer><![CDATA[@Override
public void start( Stage primaryStage )
{
    final Label label = new Label( "Lorem Ipsum is simply dummy long text of the printing and typesetting industry" );
    label.setFont( Font.font( 10 ) );
    System.out.println( "originalText = " + label.getText() );

    Platform.runLater( () -> 
        {
            Double fontSize = label.getFont().getSize();
            String clippedText = Utils.computeClippedText( label.getFont(), label.getText(), label.getWidth(), label.getTextOverrun(), label.getEllipsisString() );
            Font newFont = label.getFont();

            while ( !label.getText().equals( clippedText ) && fontSize > 0.5 )
            {
                System.out.println( "fontSize = " + fontSize + ", clippedText = " + clippedText );
                fontSize = fontSize - 0.05;
                newFont = Font.font( label.getFont().getFamily(), fontSize );
                clippedText = Utils.computeClippedText( newFont, label.getText(), label.getWidth(), label.getTextOverrun(), label.getEllipsisString() );
            }

            label.setFont( newFont );
    } );

    Scene scene = new Scene( new VBox(label), 350, 200 );
    primaryStage.setScene( scene );
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[fontVerkleinerung(lblXYZ);   //call resizing at beginning


 lblXYZ.styleProperty().addListener((observable, oldV, newV) -> {
    fontVerkleinerung(lblXYZ);   //check size again if resized
 }); 


private void fontVerkleinerung(Label label) {
    Platform.runLater(() -> {
        tpBounds = tPane.getBoundsInLocal();
        if (label.getBoundsInLocal().getWidth()>tpBounds.getWidth() && !fontSizeFits) {
            fontSize = fontSize-0.02;
            label.setStyle("-fx-font-size: "+fontSize+"em;");
        }

        if (label.getBoundsInLocal().getWidth()<=tpBounds.getWidth() && !fontSizeFits) {
            fontSizeFits = true;
        }
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="35000998" questionTitle="How do I turn a JSON file into a Java 8 Object Stream?">
<Answer><![CDATA[/**
 * @license APACHE LICENSE, VERSION 2.0 http://www.apache.org/licenses/LICENSE-2.0
 * @author Michael Witbrock
 */
package com.michaelwitbrock.jacksonstream;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class JsonArrayStreamDataSupplier<T> implements Iterator<T> {
    /*
    * This class wraps the Jackson streaming API for arrays (a common kind of 
    * large JSON file) in a Java 8 Stream. The initial motivation was that 
    * use of a default objectmapper to a Java array was crashing for me on
    * a very large JSON file (> 1GB).  And there didn't seem to be good example 
    * code for handling Jackson streams as Java 8 streams, which seems natural.
    */

    static ObjectMapper mapper = new ObjectMapper();
    JsonParser parser;
    boolean maybeHasNext = false;
    int count = 0;
    JsonFactory factory = new JsonFactory();
    private Class<T> type;

    public JsonArrayStreamDataSupplier(File dataFile, Class<T> type) {
        this.type = type;
        try {
            // Setup and get into a state to start iterating
            parser = factory.createParser(dataFile);
            parser.setCodec(mapper);
            JsonToken token = parser.nextToken();
            if (token == null) {
                throw new RuntimeException("Can't get any JSON Token from "
                        + dataFile.getAbsolutePath());
            }

            // the first token is supposed to be the start of array '['
            if (!JsonToken.START_ARRAY.equals(token)) {
                // return or throw exception
                maybeHasNext = false;
                throw new RuntimeException("Can't get any JSON Token fro array start from "
                        + dataFile.getAbsolutePath());
            }
        } catch (Exception e) {
            maybeHasNext = false;
        }
        maybeHasNext = true;
    }

    /*
    This method returns the stream, and is the only method other 
    than the constructor that should be used.
    */
    public Stream<T> getStream() {
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(this, 0), false);
    }

    /* The remaining methods are what enables this to be passed to the spliterator generator, 
       since they make it Iterable.
    */
    @Override
    public boolean hasNext() {
        if (!maybeHasNext) {
            return false; // didn't get started
        }
        try {
            return (parser.nextToken() == JsonToken.START_OBJECT);
        } catch (Exception e) {
            System.out.println("Ex" + e);
            return false;
        }
    }

    @Override
    public T next() {
        try {
            JsonNode n = parser.readValueAsTree();
            //Because we can't send T as a parameter to the mapper
            T node = mapper.convertValue(n, type);
            return node;
        } catch (IOException | IllegalArgumentException e) {
            System.out.println("Ex" + e);
            return null;
        }

    }


}]]></Answer>
<Answer><![CDATA[public class InputStreamJsonArrayStreamDataSupplier<T> implements Supplier<Stream<T>> {


private ObjectMapper mapper = new ObjectMapper();
private JsonParser jsonParser;
private Class<T> type;



public InputStreamJsonArrayStreamDataSupplier(Class<T> type) throws IOException {
    this.type = type;

    // Setup and get into a state to start iterating
    jsonParser = mapper.getFactory().createParser(data);
    jsonParser.setCodec(mapper);
    JsonToken token = jsonParser.nextToken();
    if (JsonToken.START_ARRAY.equals(token)) {
        // if it is started with START_ARRAY it's ok
        token = jsonParser.nextToken();
    }
    if (!JsonToken.START_OBJECT.equals(token)) {
        throw new RuntimeException("Can't get any JSON object from input " + data);
    }
}


public Stream<T> get() {
    try {
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize((Iterator<T>) jsonParser.readValuesAs(type), 0), false);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34978902" questionTitle="JavaFX: Make a button look like it's being clicked">
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.PauseTransition;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

public class PrgorammaticallyPressButton extends Application {

    @Override
    public void start(Stage primaryStage) {
        IntegerProperty count = new SimpleIntegerProperty();
        Label label = new Label();
        label.textProperty().bind(count.asString("Count: %d"));

        Button button = new Button("Increment");
        button.setOnAction(e -> count.set(count.get()+1));



        VBox root = new VBox(5, label, button);
        root.setAlignment(Pos.CENTER);
        Scene scene = new Scene(root, 350, 150);

        scene.addEventFilter(KeyEvent.KEY_PRESSED, e -> {
            if (e.getCode() == KeyCode.UP) {
                button.arm();
                PauseTransition pause = new PauseTransition(Duration.seconds(0.5));
                pause.setOnFinished(evt -> {
                    button.disarm();
                    button.fire();
                });
                pause.play();
            }
        });

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[logIn.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
            final Color startColor = Color.web("#000000");
            final Color endColor = Color.web("#FFFFFF");
            final ObjectProperty<Color> color = new SimpleObjectProperty<Color>(startColor);
              final Timeline timeline = new Timeline(
                      new KeyFrame(Duration.ZERO, new KeyValue(color, startColor)),
                      new KeyFrame(Duration.seconds(1), new KeyValue(color, endColor)));

              final StringBinding cssColorSpec = Bindings.createStringBinding(new Callable<String>() {
                  @Override
                  public String call() throws Exception {
                      return String.format("-fx-body-color: rgb(%d, %d, %d);", 
                              (int) (256*color.get().getRed()), 
                              (int) (256*color.get().getGreen()), 
                              (int) (256*color.get().getBlue()));
                  }
              }, color);
            logIn.styleProperty().bind(cssColorSpec);
             timeline.play();
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34975660" questionTitle="Collectors.groupingBy into list of objects?">
<Answer><![CDATA[class TimeEntry {
    private LocalDateTime start;
    private Duration duration;

    public TimeEntry(String start, String duration) {
        this.start = LocalDateTime.parse(start, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        this.duration = Duration.parse(duration);
    }

    public int getDay() {
        return start.get(ChronoField.DAY_OF_MONTH);
    }
    public int getHour() {
        return start.get(ChronoField.HOUR_OF_DAY);
    }
    public long getDuration() {
        return duration.toMinutes();
    }
    @Override
    public String toString() {
        return start.toString() + " " + duration.toString();
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    List<TimeEntry> timeEntries = Arrays.asList(
        new TimeEntry(LocalDateTime.parse("2016-01-22 10:00", formatter), Duration.ofMinutes(5)),
        new TimeEntry(LocalDateTime.parse("2016-01-23 08:00", formatter), Duration.ofMinutes(7)),
        new TimeEntry(LocalDateTime.parse("2016-01-23 08:43", formatter), Duration.ofMinutes(3))
    );

    Map<Integer, Map<Integer, List<TimeEntry>>> map = 
        timeEntries.stream()
                   .collect(groupingBy(TimeEntry::getDay, groupingBy(TimeEntry::getHour)));

    List<Day> output =
        map.entrySet()
           .stream()
           .map(e -> {
              String dayName = e.getValue().values().iterator().next().get(0).getDayName();
              List<Hour> hours =
                 e.getValue().entrySet()
                             .stream()
                             .map(he -> new Hour(he.getKey(), sumDuration(he.getValue(), TimeEntry::getDuration), he.getValue()))
                             .collect(toList());
              return new Day(e.getKey(), dayName, sumDuration(hours, Hour::getSumOfEntries), hours);
           })
           .collect(toList());

    System.out.println(output);
}

private static <T> Duration sumDuration(List<T> list, Function<T, Duration> function) {
    return list.stream().map(function::apply).reduce(Duration.ofMinutes(0), (d1, d2) -> d1.plus(d2));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34930070" questionTitle="Java/ javaFX Hangman help counting down missed attempts">
<Answer><![CDATA[public String letterMatch(char guess){
    sb = new StringBuffer(unGuessedWord);
    boolean letterCorrect = false;
    for (int i = 0; i < correctWord.length(); i++) {
        if(correctWord.charAt(i) == guess){
            sb.setCharAt(i, guess);
            letterCorrect= true;
            break;  
        }
    }
    if (!letterCorrect) { 
        lives--; 
        if(lives == dead) {
            System.out.println("YOUR DEAD!");
            //end the game code or method call here...
        }
    }
    unGuessedWord = new String(sb);
    return unGuessedWord;
}]]></Answer>
<Answer><![CDATA[public class HangmanGameState {

    private final StringProperty word = new SimpleStringProperty();

    public StringProperty wordProperty() {
        return word ;
    }

    public final String getWord() {
        return wordProperty().get();
    }

    public final void setWord(String word) {
        wordProperty().set(word);
    }

    private final ObservableList<Character> guesses = FXCollections.observableArrayList();

    public ObservableList<Character> getGuesses() {
        return guesses ;
    }


    // this value determined by wordProperty() and guesses, 
    // so we make it "read only":
    private final ReadOnlyIntegerWrapper wrongGuesses = new ReadOnlyIntegerWrapper();

    public final ReadOnlyIntegerProperty wrongGuessesProperty() {
        return wrongGuesses.getReadOnlyProperty();
    }

    public final int getWrongGuesses() {
        return wrongGuessesProperty().get();
    }

    public HangmanGameState() {

        // bind wrong guesses to other object state:
        wrongGuesses.bind(Bindings.createIntegerBinding(() -> 
            (int) guesses.stream()
                .map(c -> c.toString())
                .filter(word.get::contains)
                .count(),
            guesses, word);

    }

    public void restartGame(String newWord) {
        guesses.clear();
        word.set(newWord);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34925524" questionTitle="Java 8: convert lambda to a Method instance with clousure included">
<Answer><![CDATA[public static void main(String[] args) throws Exception {
  Function<String, String> sayHello = name -> "Hello, " + name;
  Method m = getMethodFromLambda(sayHello);
  registerFunction("World", m);
}

static void registerFunction(String name, Method method) throws Exception {
  String result = (String) method.invoke(null, name);
  System.out.println("result = " + result);
}

private static Method getMethodFromLambda(Function<String, String> lambda) throws Exception {
  Constructor<?> c = Method.class.getDeclaredConstructors()[0];
  c.setAccessible(true);
  Method m = (Method) c.newInstance(null, null, null, null, null, 0, 0, null, null, null, null);
  m.setAccessible(true); //sets override field to true

  //m.methodAccessor = new LambdaAccessor(...)
  Field ma = Method.class.getDeclaredField("methodAccessor");
  ma.setAccessible(true);
  ma.set(m, new LambdaAccessor(array -> lambda.apply((String) array[0])));

  return m;
}

static class LambdaAccessor implements MethodAccessor {
  private final Function<Object[], Object> lambda;
  public LambdaAccessor(Function<Object[], Object> lambda) {
    this.lambda = lambda;
  }

  @Override public Object invoke(Object o, Object[] os) {
    return lambda.apply(os);
  }
}]]></Answer>
<Answer><![CDATA[static Method lambdaToMethod(Serializable lambda) {
    for(Class<?> cl=lambda.getClass(); cl!=null; cl=cl.getSuperclass()) try {
        Method m=cl.getDeclaredMethod("writeReplace");
        m.setAccessible(true);
        try {
            SerializedLambda sl=(SerializedLambda)m.invoke(lambda);
            return LambdaToMethod.class.getDeclaredMethod(sl.getImplMethodName(),
                MethodType.fromMethodDescriptorString(sl.getImplMethodSignature(),
                    LambdaToMethod.class.getClassLoader()).parameterArray());
        } catch(ReflectiveOperationException ex) {
            throw new RuntimeException(ex);
        }
    } catch(NoSuchMethodException ex){}
    throw new AssertionError();
}
public static void main(String[] args)
{
    legacyCaller("a string", lambdaToMethod((Consumer<String>&Serializable)
        s -> System.out.println("first lambda called with "+s)));
    legacyCaller("a string", lambdaToMethod((Consumer<String>&Serializable)
        s -> System.out.println("second lambda called with "+s)));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34919636" questionTitle="Read files in a Task">
<Answer><![CDATA[private Path directory;

.....        
private Task<ObservableList<Integer>> createWorker() {

    return new Task<ObservableList<Integer>>() {
        @Override
        protected ObservableList<Integer> call() throws Exception {
            Stack<Path> stack = new Stack();
            stack.push(directory);
            int i = 0;
            while (!stack.empty()) {
                if (isCancelled()) {
                    break;
                }
                Path root = stack.pop();
                try (DirectoryStream<Path> stream = Files.newDirectoryStream(root);) {
                    for (Path path : stream) {
                        if (Files.isDirectory(path)) {
                            stack.push(path);
                        } else {

                            if (path.toString().endsWith(".pdf")) {
                                i++;
                                results.add(i);
                                updateProgress(i, 100);
                                updateValue(results);
                                Thread.sleep(5);
                            }
                        }
                    }
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }

            }
            return results;
        }

    };

}]]></Answer>
<Answer><![CDATA[import java.io.File;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;

public class Controller {
    @FXML
    private Button startButton;
    @FXML
    private ProgressBar myProzessBar;
    @FXML
    private Label label;


private Task<Boolean> myWorker;
private int countPDF;
private File directory;

@FXML
private void actionStart(ActionEvent event) {  
    String path = "C:\\root\\";
    directory = new File(path);
    if(!directory.isDirectory())
        return;
    countPDF = 0;
    myWorker = createWorker(directory);
    myWorker.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
        @Override
        public void handle(WorkerStateEvent event) {
            startButton.setDisable(false);
            label.textProperty().unbind();
            label.setText("Total " + countPDF);
        }
    });
    myProzessBar.progressProperty().unbind();
    myProzessBar.progressProperty().bind(myWorker.progressProperty());
    label.textProperty().bind(myWorker.messageProperty());
    new Thread(myWorker).start();
    startButton.setDisable(true);
}

@FXML
void initialize() {

}

private Task<Boolean> createWorker(File fileRoot) {    
    return new Task<Boolean>() {
        @Override
        protected Boolean call() throws Exception {

            File[] files = fileRoot.listFiles();
            for(File file : files) {
                if(file.isDirectory())
                // restart the method, but how can I do that
                else{
                    String fileName = file.getName();
                    if(fileName.endsWith(".pdf")){
                        updateMessage(++countPDF + "");
                        updateProgress(countPDF, 100);

                    }
                }
            }

            return true;
        }
    };
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34909365" questionTitle="Javafx Gridpanes content exceeds size">
<Answer><![CDATA[public class RowConstraintsExample extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            GridPane gp = new GridPane();
            gp.setGridLinesVisible(true);

            int minHeight = 50;
            int preferredHeight = 100;
            int maxHeight = 110;

            gp.setVgap(10);
            gp.add(new Pane(new Rectangle(100,100,Color.rgb(255, 0, 0, 0.5))), 0, 0);
            gp.add(new Pane(new Rectangle(100,200,Color.rgb(0,255,0,0.5))), 0, 1);

            gp.getRowConstraints().add(new RowConstraints(minHeight, preferredHeight, maxHeight));
            gp.getRowConstraints().add(new RowConstraints(minHeight, preferredHeight, maxHeight));

            for (Node node: gp.getChildren()) {
                Integer rowIndex = GridPane.getRowIndex(node);
                if (rowIndex != null) {
                    RowConstraints rowConstraints = gp.getRowConstraints().get(rowIndex);

                    if (node.getBoundsInLocal().getHeight() > rowConstraints.getPrefHeight()) {
                        node.setClip(new Rectangle(100, rowConstraints.getMaxHeight()));
                        GridPane.setVgrow(node, Priority.SOMETIMES);
                    }
                }
            }

            Scene scene = new Scene(gp,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.RowConstraints;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;


public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            GridPane gp = new GridPane();
            gp.setGridLinesVisible(true);

            gp.setVgap(10);
            gp.getRowConstraints().add(new RowConstraints(50,100,110));
            gp.getRowConstraints().add(new RowConstraints(50,100,110));

            Pane pane1 = new Pane(new Rectangle(100,100,Color.rgb(255, 0, 0, 0.5)));
            Pane pane2 = new Pane(new Rectangle(100,200,Color.rgb(0, 255, 0, 0.5)));

            Rectangle clipRectangle1 = new Rectangle();
            pane1.setClip(clipRectangle1);
            pane1.layoutBoundsProperty().addListener((observable, oldValue, newValue) -> {
                clipRectangle1.setWidth(newValue.getWidth());
                clipRectangle1.setHeight(newValue.getHeight());
            });   

            Rectangle clipRectangle2 = new Rectangle();
            pane2.setClip(clipRectangle2);
            pane2.layoutBoundsProperty().addListener((observable, oldValue, newValue) -> {
                clipRectangle2.setWidth(newValue.getWidth());
                clipRectangle2.setHeight(newValue.getHeight());
            });

            gp.add(pane1, 0, 0);
            gp.add(pane2, 0, 1);

            Scene scene = new Scene(gp,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34876710" questionTitle="Using Javafx, trying to resize boxes for a calculator">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class CalculatorGUI extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        TextField tf = new TextField();
        BorderPane root = new BorderPane();
        GridPane gp = new GridPane();
        gp.setAlignment(Pos.CENTER);
        gp.setHgap(10.0);
        gp.setVgap(10.0);
        root.setTop(tf);

        Button button1 = new Button("1");
        Button button2 = new Button("2");
        Button button3 = new Button("3");
        Button button4 = new Button("4");
        Button button5 = new Button("5");
        Button button6 = new Button("6");
        Button button7 = new Button("7");
        Button button8 = new Button("8");
        Button button9 = new Button("9");
        Button button0 = new Button("0");
        Button buttonDOT = new Button(".");
        Button buttonDIV = new Button("/");
        Button buttonMUL = new Button("*");
        Button buttonSUB = new Button("-");
        Button buttonADD = new Button("+");
        Button buttonEQU = new Button("=");
        setButtonSize(button1);
        setButtonSize(button2);
        setButtonSize(button3);
        setButtonSize(button4);
        setButtonSize(button5);
        setButtonSize(button6);
        setButtonSize(button7);
        setButtonSize(button8);
        setButtonSize(button9);
        setButtonSize(button0);
        setButtonSize(buttonDOT);
        setButtonSize(buttonDIV);
        setButtonSize(buttonMUL);
        setButtonSize(buttonSUB);
        setButtonSize(buttonADD);
        setButtonSize(buttonEQU);

        gp.add(button7, 0, 0);
        gp.add(button8, 1, 0);
        gp.add(button9, 2, 0);
        gp.add(buttonDIV, 3, 0);

        gp.add(button4, 0, 1);
        gp.add(button5, 1, 1);
        gp.add(button6, 2, 1);
        gp.add(buttonMUL, 3, 1);

        gp.add(button1, 0, 2);
        gp.add(button2, 1, 2);
        gp.add(button3, 2, 2);
        gp.add(buttonSUB, 3, 2);

        gp.add(button0, 0, 3);
        gp.add(buttonDOT, 1, 3);
        gp.add(buttonEQU, 2, 3);
        gp.add(buttonADD, 3, 3);

        root.setCenter(gp);

        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
    }

    public void setButtonSize(Button button){
        button.setPrefHeight(35.0);
        button.setPrefWidth(35.0);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.control.TextField;
import javafx.scene.control.Button;

import javafx.scene.layout.Priority;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.application.Application;


public class CalculatorGUI extends Application{

public static void main(String[] args) {
    launch(args);
}

@Override
public void start(Stage primaryStage) throws Exception {
    TextField tf = new TextField();
    BorderPane root = new BorderPane();
    GridPane gp = new GridPane();
    Button btn;
    root.setTop(tf);

    RowConstraints rc = new RowConstraints();
    rc.setVgrow(Priority.ALWAYS);
    rc.setFillHeight(true);
    gp.getRowConstraints().addAll(rc,rc,rc,rc);
    ColumnConstraints cc = new ColumnConstraints();
    cc.setHgrow(Priority.ALWAYS);
    cc.setFillWidth(true);
    gp.getColumnConstraints().addAll(cc,cc,cc,cc);


    gp.add(btn = new Button("7"), 0, 0);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("8"), 1, 0);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("9"), 2, 0);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("/"), 3, 0);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);

    gp.add(btn = new Button("4"), 0, 1);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("5"), 1, 1);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("6"), 2, 1);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("*"), 3, 1);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);

    gp.add(btn = new Button("1"), 0, 2);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("2"), 1, 2);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("3"), 2, 2);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("-"), 3, 2);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);

    gp.add(btn = new Button("0"), 0, 3);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("."), 1, 3);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("="), 2, 3);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
    gp.add(btn = new Button("+"), 3, 3);
    btn.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);


    root.setCenter(gp);

    primaryStage.setScene(new Scene(root, 300, 250));
    primaryStage.show();
  }

  }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34873673" questionTitle="Load fxml as background process - Javafx">
<Answer><![CDATA[new Thread(new Task() {

        @Override
        protected Object call() throws Exception {
            // Simulating long loading
            Thread.sleep(5000);

            FXMLLoader loader = new FXMLLoader(getClass().getResource("home.fxml"));
            Parent root = loader.load();

            Scene scene = new Scene(root);

            // Updating the UI requires another Platform.runLater()
            Platform.runLater(new Runnable() {

                @Override
                public void run() {
                    mainStage.setScene(scene);
                    mainStage.show();
                    stage.hide();
                    System.out.println("Stage showing");
                    // Get current screen of the stage
                    ObservableList<Screen> screens = Screen.getScreensForRectangle(new Rectangle2D(mainStage.getX(), mainStage.getY(), mainStage.getWidth(), mainStage.getHeight()));
                    // Change stage properties
                    Rectangle2D bounds = screens.get(0).getVisualBounds();
                    mainStage.setX(bounds.getMinX());
                    mainStage.setY(bounds.getMinY());
                    mainStage.setWidth(bounds.getWidth());
                    mainStage.setHeight(bounds.getHeight());
                    System.out.println("thread complete");
                }
            });
            return null;
        }
    }).start();]]></Answer>
<Answer><![CDATA[import java.io.IOException;

import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;

public class MainController {
    @FXML
    private Button button ;
    @FXML
    private void showWindow() {
        Task<Parent> loadTask = new Task<Parent>() {
            @Override
            public Parent call() throws IOException, InterruptedException {

                // simulate long-loading process:
                Thread.sleep(5000);

                FXMLLoader loader = new FXMLLoader(getClass().getResource("test.fxml"));
                Parent root = loader.load();
                return root ;
            }
        };

        loadTask.setOnSucceeded(e -> {
            Scene scene = new Scene(loadTask.getValue());
            Stage stage = new Stage();
            stage.initOwner(button.getScene().getWindow());
            stage.setScene(scene);
            stage.show();
        });

        loadTask.setOnFailed(e -> loadTask.getException().printStackTrace());

        Thread thread = new Thread(loadTask);
        thread.start();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34861469" questionTitle="Compact stream expression for transposing double[][] Matrix">
<Answer><![CDATA[@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.MILLISECONDS)
@Fork(3)
public class StreamTest {

    private static final UnaryOperator<double[][]> streamTranspose() {
        return m -> {
            return range(0, m[0].length).mapToObj(r ->
                range(0, m.length).mapToDouble(c -> m[c][r]).toArray()
            ).toArray(double[][]::new);
        };
    }

    private static final UnaryOperator<double[][]> parallelStreamTranspose() {
        return m -> {
            return range(0, m[0].length).parallel().mapToObj(r ->
                range(0, m.length).parallel().mapToDouble(c -> m[c][r]).toArray()
            ).toArray(double[][]::new);
        };
    }

    private static final Function<double[][], double[][]> forLoopTranspose() {
        return m -> {
            final int rows = m.length;
            final int columns = m[0].length;
            double[][] transpose = new double[columns][rows];
            for (int r = 0; r < rows; r++)
                  for (int c = 0; c < columns; c++)
                    transpose[c][r] = m[r][c];
            return transpose;
        };
    }

    @State(Scope.Benchmark)
    public static class MatrixContainer {

        @Param({ "100", "1000", "3000" })
        private int matrixSize;

        private double[][] matrix;

        @Setup(Level.Iteration)
        public void setUp() {
            ThreadLocalRandom random = ThreadLocalRandom.current();
            matrix = random.doubles(matrixSize).mapToObj(i -> random.doubles(matrixSize).toArray()).toArray(double[][]::new);
        }

    }

    @Benchmark
    public double[][] streamTranspose(MatrixContainer c) {
        return streamTranspose().apply(c.matrix);
    }

    @Benchmark
    public double[][] parallelStreamTranspose(MatrixContainer c) {
        return parallelStreamTranspose().apply(c.matrix);
    }

    @Benchmark
    public double[][] forLoopTranspose(MatrixContainer c) {
        return forLoopTranspose().apply(c.matrix);
    }

}]]></Answer>
<Answer><![CDATA[/**
 * Returns a {@link UnaryOperator} that transposes the matrix.
 * 
 * Example {@code transpose(true).apply(m);}
 * 
 * @param parallel
 *            Whether to perform the transpose concurrently.
 */
public static UnaryOperator<ArrayMatrix> transpose(boolean parallel) {
    return (m) -> {
        double[][] data = m.getData();
        IntStream stream = range(0, m.getColumnDimension());
        stream = parallel ? stream.parallel() : stream;

        double[][] transpose =
                stream.mapToObj(
                        column -> range(0, data.length).mapToDouble(row -> data[row][column]).toArray())
                        .toArray(double[][]::new);
        return new ArrayMatrix(transpose);
    };
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34821669" questionTitle="Is it appropriate to use a series of lambda functions to define class functionality?">
<Answer><![CDATA[class Label {
    private LabelSupplier supplier;

    public Label(LabelSupplier supplier) {
        this.supplier = supplier;
    }

    public String getText() {
        return supplier.getText();
    }

    public Image getIcon() {
        return supplier.getIcon();
    }
}

interface LabelSupplier {
    String getText();
    Image getIcon();
}

class TimeLabelSupplier implements LabelSupplier {
    public String getText() {
        return System.currentTimeMillis();
    }

    public Image getImage() {
        return CLOCK_IMAGE;
    }
}]]></Answer>
<Answer><![CDATA[public interface Label {

  public String getText();

}

public class Labels {

   public static Label createCurrentTimeLabel(){
       return new Label{

          public String getText() {
            return System.currentTimeMillis();
          }

       } 


   }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34809979" questionTitle="Two different row factories for TableView">
<Answer><![CDATA[private void registerDragAndDropReportListener(TableView<DatabaseReport> view) {

    Callback<TableView<DatabaseReport>, TableRow<DatabaseReport>> existingRowFactory 
            = view.getRowFactory();

    view.setRowFactory(tv -> {



        TableRow<DatabaseReport> row ;
        if (existingRowFactory == null) {
            row = new TableRow<>();
        } else {
            row = existingRowFactory.call(view);
        }

        row.setOnDragDetected(event -> {
            if (!row.isEmpty()) {
                Dragboard db = row.startDragAndDrop(TransferMode.COPY);
                db.setDragView(row.snapshot(null, null));
                ClipboardContent cc = new ClipboardContent();
                cc.putString(row.getItem().getReport_content());
                db.setContent(cc);
                event.consume();
            }
        });

        row.setOnDragOver(event -> {
            Dragboard db = event.getDragboard();
            if (db.hasContent(DataFormat.PLAIN_TEXT)) {
                event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
                event.consume();
            }
        });

        row.setOnDragDropped(event -> {
            Dragboard db = event.getDragboard();
            if (db.hasContent(DataFormat.PLAIN_TEXT)) {
                reportFlowController.addNewReport(username, getSqlTimeStamp().toString(), this.txt_adressnummer.getText(), reports, db.getString());
                event.setDropCompleted(true);
                event.consume();
            }
        });

        return row;
    });
}]]></Answer>
<Answer><![CDATA[private void highlightReportRowsIfImportant(TextField txt_adressnummer) {
            tv_berichte.setRowFactory(new Callback<TableView<DatabaseReport>, TableRow<DatabaseReport>>() {
                @Override
                public TableRow<DatabaseReport> call(TableView<DatabaseReport> tableView) {
                    final TableRow<DatabaseReport> row = new TableRow<DatabaseReport>() {
                        @Override
                        protected void updateItem(DatabaseReport report, boolean empty) {
                            super.updateItem(report, empty);
                            if (report != null) {
                                if (report.getReport_art().contains("!!!")) {
                                    setStyle("-fx-background-color: #FF0000;");
                                } else {
                                    setStyle("");
                                }
                            } else {
                                setStyle("");
                            }
                        }
                    };
                    reports.addListener(new ListChangeListener<DatabaseReport>() {
                        @Override
                        public void onChanged(ListChangeListener.Change<? extends DatabaseReport> change) {
                            if (row.getItem() != null) {
                                if (row.getItem().getReport_art().contains("!!!")) {
                                    row.setStyle("-fx-background-color: #FF0000;");
                                } else {
                                    row.setStyle("");
                                }
                            } else {
                                row.setStyle("");
                            }
                        }
                    });

                    row.setOnDragDetected(event -> {
                        if (!row.isEmpty()) {
                            Dragboard db = row.startDragAndDrop(TransferMode.COPY);
                            db.setDragView(row.snapshot(null, null));
                            ClipboardContent cc = new ClipboardContent();
                            cc.putString(row.getItem().getReport_content());
                            db.setContent(cc);
                            event.consume();
                        }
                    });

                    row.setOnDragOver(event -> {
                        Dragboard db = event.getDragboard();
                        if (db.hasContent(DataFormat.PLAIN_TEXT)) {
                            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);
                            event.consume();
                        }
                    });

                    row.setOnDragDropped(event -> {
                        Dragboard db = event.getDragboard();
                        if (db.hasContent(DataFormat.PLAIN_TEXT)) {
                            reportFlowController.addNewReport(username, getSqlTimeStamp().toString(), txt_adressnummer.getText(), reports, db.getString());
                            event.setDropCompleted(true);
                            event.consume();
                        }
                    });
                    return row;
                }
            });
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34779735" questionTitle="Linking JavaFX 8 TableView selections">
<Answer><![CDATA[package standAloneTest;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TableSelection extends Application {

    protected String selectedName ="Paper";

    @Override
    public void start(Stage primaryStage) throws Exception {
        ObservableList<Item> data1 = FXCollections.observableArrayList();
        ObservableList<Item> data2 = FXCollections.observableArrayList();

        String[] names = new String[] { "Wood", "Paper", "Scissors" };

        for (int i = 1; i < 15; i++) {
            Item j = new Item();
            j.setName(names[(int) (Math.random() * names.length)]);
            j.setNn((int) (Math.random() * 100));

            if (i < 5)
                data1.add(j);
            else
                data2.add(j);
        }

        TableColumn<Item, String> nameCol = new TableColumn<>("Name");
        TableColumn<Item, Integer> nnCol = new TableColumn<>("nn");
        nameCol.setCellValueFactory(new PropertyValueFactory<Item, String>("Name"));
        nnCol.setCellValueFactory(new PropertyValueFactory<Item, Integer>("nn"));
        //nameCol.setCellFactory();

        TableColumn<Item, String> nameCol2 = new TableColumn<>("Name");
        TableColumn<Item, Integer> nnCol2 = new TableColumn<>("nn");
        nameCol2.setCellValueFactory(new PropertyValueFactory<Item, String>("Name"));

        nameCol2.setCellFactory(column -> {
          return new TableCell<Item, String>() {
              protected void updateItem(String n, boolean empty){
                  super.updateItem(n, empty);
                  System.out.println("string : " + n);
                  if (n == null || empty) {
                        setText(null);
                        setStyle("");
                  } else {
                      setText(n);

                      // Style if selected value
                      if (n.equals(selectedName) ){
                          setStyle("-fx-background-color: yellow");
                      }
                  }
             }    
          };
        });

        nnCol2.setCellValueFactory(new PropertyValueFactory<Item, Integer>("nn"));


        TableView<Item> table1 = new TableView<>();
        table1.itemsProperty().setValue(data1);
        table1.getColumns().addAll(nameCol, nnCol);

        TableView<Item> table2 = new TableView<>();
        table2.itemsProperty().setValue(data2);
        table2.getColumns().addAll(nameCol2, nnCol2);

        // table1.setSelectionModel(table2.getSelectionModel());
        table1.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Item>() {
            @Override
            public void changed(ObservableValue<? extends Item> observable, Item oldValue, Item newValue) {
                selectedName = newValue.getName().toString();
                System.out.println(selectedName);
            }
        });

        table2.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Item>() {
            @Override
            public void changed(ObservableValue<? extends Item> observable, Item oldValue, Item newValue) {
                selectedName = newValue.getName().toString();
                System.out.println(selectedName);
            }
        });



        VBox myPane = new VBox();
        myPane.setAlignment(Pos.CENTER);
        myPane.setPadding(new Insets(12));
        myPane.setSpacing(12);
        myPane.setMaxHeight(500);
        myPane.getChildren().addAll(table1, table2);

        Scene myScene = new Scene(myPane);

        primaryStage.setScene(myScene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.HashSet;
import java.util.Set;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TableSelection extends Application {

    TableView<Item> table1 = new TableView<>();
    TableView<Item> table2 = new TableView<>();

    boolean adapting = false;

    @SuppressWarnings("unchecked")
    @Override
    public void start(Stage primaryStage) throws Exception {
        ObservableList<Item> data1 = FXCollections.observableArrayList();
        ObservableList<Item> data2 = FXCollections.observableArrayList();

        String[] names = new String[] { "Wood", "Paper", "Scissors" };

        for (int i = 1; i < 15; i++) {
            Item j = new Item();
            j.setName(names[(int) (Math.random() * names.length)]);
            j.setNn((int) (Math.random() * 100));

            if (i < 5)
                data1.add(j);
            else
                data2.add(j);
        }

        TableColumn<Item, String> nameCol = new TableColumn<>("Name");
        TableColumn<Item, Integer> nnCol = new TableColumn<>("nn");
        nameCol.setCellValueFactory(new PropertyValueFactory<Item, String>("Name"));
        nnCol.setCellValueFactory(new PropertyValueFactory<Item, Integer>("nn"));

        TableColumn<Item, String> nameCol2 = new TableColumn<>("Name");
        TableColumn<Item, Integer> nnCol2 = new TableColumn<>("nn");
        nameCol2.setCellValueFactory(new PropertyValueFactory<Item, String>("Name"));
        nnCol2.setCellValueFactory(new PropertyValueFactory<Item, Integer>("nn"));

        table1.itemsProperty().setValue(data1);
        table1.getColumns().addAll(nameCol, nnCol);

        table2.itemsProperty().setValue(data2);
        table2.getColumns().addAll(nameCol2, nnCol2);

        // table1.setSelectionModel(table2.getSelectionModel());
        table1.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        table2.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        table2.getSelectionModel().selectedItemProperty().addListener((ChangeListener<Item>) (observable, oldValue, newValue) -> {

            if (adapting)
                return;

            try {

                adapting = true;

                selectCurrent(table2);
                selectOthers(table2, table1);

            } finally {
                adapting = false;
            }

        });

        table1.getSelectionModel().selectedItemProperty().addListener((ChangeListener<Item>) (observable, oldValue, newValue) -> {

            if (adapting)
                return;

            try {

                adapting = true;

                selectCurrent(table1);
                selectOthers(table1, table2);

            } finally {
                adapting = false;
            }

        });

        VBox myPane = new VBox();
        myPane.setAlignment(Pos.CENTER);
        myPane.setPadding(new Insets(12));
        myPane.setSpacing(12);
        myPane.setMaxHeight(500);
        myPane.getChildren().addAll(table1, table2);

        Scene myScene = new Scene(myPane);

        primaryStage.setScene(myScene);
        primaryStage.show();
    }

    private void selectCurrent(TableView<Item> currentTableView) {

        Set<String> names = new HashSet<>();

        for (Item item : currentTableView.getSelectionModel().getSelectedItems()) {
            names.add(item.getName());
        }

        for (String name : names) {

            for (Item item : currentTableView.getItems()) {
                if (name.equals(item.getName())) {
                    currentTableView.getSelectionModel().select(item);
                }
            }

        }

    }

    private void selectOthers(TableView<Item> sourceTableView, TableView<Item> targetTableView) {

        Set<String> names = new HashSet<>();

        for (Item item : sourceTableView.getSelectionModel().getSelectedItems()) {
            names.add(item.getName());
        }

        targetTableView.getSelectionModel().clearSelection();

        for (String name : names) {

            for (Item item : targetTableView.getItems()) {
                if (name.equals(item.getName())) {
                    targetTableView.getSelectionModel().select(item);
                }
            }

        }

    }

    public class Item {
        String name;
        int Nn;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getNn() {
            return Nn;
        }

        public void setNn(int nn) {
            Nn = nn;
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34771380" questionTitle="How to convert a JavaFX image to a OpenCV matrix?">
<Answer><![CDATA[import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.ByteArrayInputStream;
import java.net.URISyntaxException;
import java.nio.file.Paths;

import javafx.embed.swing.SwingFXUtils;
import javafx.scene.image.Image;

import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;

public class OpenCvUtils {

    /**
     * Convert a Mat object (OpenCV) in the corresponding Image for JavaFX
     *
     * @param frame
     *            the {@link Mat} representing the current frame
     * @return the {@link Image} to show
     */
    public static Image mat2Image(Mat frame) {
        // create a temporary buffer
        MatOfByte buffer = new MatOfByte();
        // encode the frame in the buffer, according to the PNG format
        Imgcodecs.imencode(".png", frame, buffer);
        // build and return an Image created from the image encoded in the
        // buffer
        return new Image(new ByteArrayInputStream(buffer.toArray()));
    }


    public static Mat image2Mat( Image image) {


        BufferedImage bImage = SwingFXUtils.fromFXImage(image, null);

        return bufferedImage2Mat( bImage);

    }

    // http://www.codeproject.com/Tips/752511/How-to-Convert-Mat-to-BufferedImage-Vice-Versa
    public static Mat bufferedImage2Mat(BufferedImage in)
    {
          Mat out;
          byte[] data;
          int r, g, b;
          int height = in.getHeight();
          int width = in.getWidth();
          if(in.getType() == BufferedImage.TYPE_INT_RGB || in.getType() == BufferedImage.TYPE_INT_ARGB)
          {
              out = new Mat(height, width, CvType.CV_8UC3);
              data = new byte[height * width * (int)out.elemSize()];
              int[] dataBuff = in.getRGB(0, 0, width, height, null, 0, width);
              for(int i = 0; i < dataBuff.length; i++)
              {
                  data[i*3 + 2] = (byte) ((dataBuff[i] >> 16) & 0xFF);
                  data[i*3 + 1] = (byte) ((dataBuff[i] >> 8) & 0xFF);
                  data[i*3] = (byte) ((dataBuff[i] >> 0) & 0xFF);
              }
          }
          else
          {
              out = new Mat(height, width, CvType.CV_8UC1);
              data = new byte[height * width * (int)out.elemSize()];
              int[] dataBuff = in.getRGB(0, 0, width, height, null, 0, width);
              for(int i = 0; i < dataBuff.length; i++)
              {
                r = (byte) ((dataBuff[i] >> 16) & 0xFF);
                g = (byte) ((dataBuff[i] >> 8) & 0xFF);
                b = (byte) ((dataBuff[i] >> 0) & 0xFF);
                data[i] = (byte)((0.21 * r) + (0.71 * g) + (0.07 * b)); //luminosity
              }
           }
           out.put(0, 0, data);
           return out;
     } 

    public static String getOpenCvResource(Class<?> clazz, String path) {
        try {
            return Paths.get( clazz.getResource(path).toURI()).toString();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    // Convert image to Mat
    // alternate version http://stackoverflow.com/questions/21740729/converting-bufferedimage-to-mat-opencv-in-java
    public static Mat bufferedImage2Mat_v2(BufferedImage im) {

        im = toBufferedImageOfType(im, BufferedImage.TYPE_3BYTE_BGR);

        // Convert INT to BYTE
        //im = new BufferedImage(im.getWidth(), im.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
        // Convert bufferedimage to byte array
        byte[] pixels = ((DataBufferByte) im.getRaster().getDataBuffer()).getData();

        // Create a Matrix the same size of image
        Mat image = new Mat(im.getHeight(), im.getWidth(), CvType.CV_8UC3);
        // Fill Matrix with image values
        image.put(0, 0, pixels);

        return image;

    }

    private static BufferedImage toBufferedImageOfType(BufferedImage original, int type) {
        if (original == null) {
            throw new IllegalArgumentException("original == null");
        }

        // Don't convert if it already has correct type
        if (original.getType() == type) {
            return original;
        }

        // Create a buffered image
        BufferedImage image = new BufferedImage(original.getWidth(), original.getHeight(), type);

        // Draw the image onto the new buffer
        Graphics2D g = image.createGraphics();
        try {
            g.setComposite(AlphaComposite.Src);
            g.drawImage(original, 0, 0, null);
        }
        finally {
            g.dispose();
        }

        return image;
    }

}]]></Answer>
<Answer><![CDATA[/**
     * Converts/writes a Mat into a BufferedImage.
     *
     * @param src Mat of type CV_8UC3 or CV_8UC1
     * @return BufferedImage of type TYPE_3BYTE_BGR or TYPE_BYTE_GRAY
     */
    public static BufferedImage toImage(Mat src)
    {
        if ( src != null ) {

            int cols = src.cols();
            int rows = src.rows();
            int elemSize = (int)src.elemSize();
            byte[] data = new byte[cols * rows * elemSize];
            int type;
            src.data().get(data);
            switch (src.channels()) {
                case 1:
                    type = BufferedImage.TYPE_BYTE_GRAY;
                    break;
                case 3:
                    type = BufferedImage.TYPE_3BYTE_BGR;
                    // bgr to rgb
                    byte b;
                    for(int i=0; i<data.length; i=i+3) {
                        b = data[i];
                        data[i] = data[i+2];
                        data[i+2] = b;
                    }
                    break;
                default:
                    return null;
            }

            BufferedImage bimg = new BufferedImage(cols, rows, type);
            bimg.getRaster().setDataElements(0, 0, cols, rows, data);

            return bimg;
        }
        return null;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34767852" questionTitle="Java 8 reduce to 2 strings">
<Answer><![CDATA[public static void main(String[] args) {
    List<Container> containersList = Arrays.asList(new Container("A"), new Container("B"), new Container("A"), new Container("A"), new Container("B"));

    String[] result = containersList.stream().parallel().map(Container::getLetter).collect(ContainerCollector.collector());

    System.out.println(result[0]);
    System.out.println(result[1]);
}

private static final class ContainerCollector {

    private StringBuilder text = new StringBuilder();
    private StringBuilder dupText = new StringBuilder();

    private void accept(String letter) {
        text.append(letter);
        if (dupText.indexOf(letter, dupText.length() - letter.length()) < 0) {
            dupText.append(letter);
        }
    }

    private ContainerCollector combine(ContainerCollector other) {
        text.append(other.text);
        other.dupText.codePoints().forEach(i -> {
            String letter = new String(Character.toChars(i));
            if (dupText.indexOf(letter, dupText.length() - letter.length()) < 0) {
                dupText.append(letter);
            }
        });
        return this;
    }

    private String[] finish() {
        return new String[] { text.toString(), dupText.toString() };
    }

    private static Collector<String, ?, String[]> collector() {
        return Collector.of(ContainerCollector::new, ContainerCollector::accept, ContainerCollector::combine, ContainerCollector::finish);
    }

}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Collection;
import java.util.stream.Collectors;

class Container {

    private char letter;

    public String getLetter() {
        return Character.toString(letter);
    }

    public static Container of(char letter) {
        Container container = new Container();
        container.letter = letter;
        return container;
    }

}
public class T {

    public static void main(String[] args) {

        Collection<Container> containersList = new ArrayList<>();
        containersList.add(Container.of('A'));
        containersList.add(Container.of('B'));
        containersList.add(Container.of('A'));
        containersList.add(Container.of('B'));
        containersList.add(Container.of('A'));
        containersList.add(Container.of('A'));
        containersList.add(Container.of('A'));
        containersList.add(Container.of('B'));

        // at first join characters, don't bother about duplicates
        String text = containersList.stream()
        .map(Container::getLetter)
        .collect(Collectors.joining());

        // afterwards remove duplicates
        StringBuilder dupText = new StringBuilder();
        Character lastLetter = null;
        for (Character c : text.toCharArray()) {
            if (c.equals(lastLetter))
                continue;
            dupText.append(c);
            lastLetter = c;
        }

        System.out.println(text);
        System.out.println(dupText);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34715614" questionTitle="Disable google maps tile fading or detect if map is fully rendered?">
<Answer><![CDATA[<!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
  <title></title>
</head>
<body>

<div id="staticView" style="width:400px; height:400px"></div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>

<script type="text/javascript">
  $(document).ready(function() {
    var mapImage = new Image();
    var eltStaticView = $("#staticView");
    $(mapImage).one('load', function() {
      eltStaticView.css('background-image', 'url(' + mapImage.src + ')');
      console.log("Image Has Loaded");
      $(mapImage).unbind();
    });
    $(mapImage).error(function() {
      $(mapImage).unbind();
    });
    var imageSrc =  "https://maps.googleapis.com/maps/api/staticmap?center=40.714728,-73.998672&zoom=12&size=400x400&maptype=satellite"; //+ "&key=" + YOUR_API_KEY
    mapImage.src = imageSrc;
  });
</script>
</body>
</html>]]></Answer>
<Answer><![CDATA[google.maps.event.addListener(map, "idle", function () {
    var mapMoveTimer, tileLoadedListener;
    var moveDetect = google.maps.event.addListener(map, "bounds_changed", function () {
        clearTimeout(mapMoveTimer);
    });

    mapMoveTimer = setTimeout(function () {
        google.maps.event.removeListener(moveDetect);

        // here is your code
        tileLoadedListener = google.maps.event.addListenerOnce(map, 'tilesloaded', function(){
            console.log("tilesloaded");
            java.onMapLoadingFinished();

            // make sure to remove the listener so it isn't fired multiple times.
            google.maps.event.removeListener(tileLoadedListener);
        });
    });

    }, 1000);
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34621835" questionTitle="Java 8 Streams: How to call once the Collection.stream() method and retrieve an array of several aggregate values with different fields">
<Answer><![CDATA[static <T, A1, A2, D1, D2> Collector<T, Tuple2<A1, A2>, Tuple2<D1, D2>> collectors(
    Collector<T, A1, D1> collector1
  , Collector<T, A2, D2> collector2
) {
    return Collector.<T, Tuple2<A1, A2>, Tuple2<D1, D2>>of(
        () -> tuple(
            collector1.supplier().get()
          , collector2.supplier().get()
        ),
        (a, t) -> {
            collector1.accumulator().accept(a.v1, t);
            collector2.accumulator().accept(a.v2, t);
        },
        (a1, a2) -> tuple(
            collector1.combiner().apply(a1.v1, a2.v1)
          , collector2.combiner().apply(a1.v2, a2.v2)
        ),
        a -> tuple(
            collector1.finisher().apply(a.v1)
          , collector2.finisher().apply(a.v2)
        )
    );
}]]></Answer>
<Answer><![CDATA[public class PersonStatistics {
    private long firstNameCounter;
    private int maxAge = Integer.MIN_VALUE;
    private double minHeight = Double.MAX_VALUE;
    private double totalWeight;
    private long total;
    private final Predicate<Person> firstNameFilter;

    public PersonStatistics(Predicate<Person> firstNameFilter) {
        Objects.requireNonNull(firstNameFilter);
        this.firstNameFilter = firstNameFilter;
    }

    public void accept(Person p) {
        if (this.firstNameFilter.test(p)) {
            firstNameCounter++;
        }

        this.maxAge = Math.max(p.getAge(), maxAge);
        this.minHeight = Math.min(p.getHeight(), minHeight);
        this.totalWeight += p.getWeight();
        this.total++;
    }

    public PersonStatistics combine(PersonStatistics personStatistics) {
        this.firstNameCounter += personStatistics.firstNameCounter;
        this.maxAge = Math.max(personStatistics.maxAge, maxAge);
        this.minHeight = Math.min(personStatistics.minHeight, minHeight);
        this.totalWeight += personStatistics.totalWeight;
        this.total += personStatistics.total;

        return this;
    }

    public Object[] toStatArray() {
        return new Object[]{firstNameCounter, maxAge, minHeight, total == 0 ? 0 : totalWeight / total};
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34571759" questionTitle="To gradually output an array with an increment loop in JavaFX. To show not only a full array but each array increment preceding the final output">
<Answer><![CDATA[backgroundUpdate.setOnAction(event -> {
                    tf1.setText("");            
        // Declare a Task class
        Task<Void> task = new Task<Void>() {

            // Override (declare) call method
            @Override
            public Void call() throws Exception {

                // Instantiate an empty string
                String lineOfData = "";
                int[] array1 = { 6, 2, 74, 64, 12 };

                // Loop through your array of integers
                for (int i = 0; i <= array1.length; i++) {
                    // Pause the loop
                    Thread.sleep(500);

        // Parameterize the standard 'updateMessage' method of Task class
        // Do this by assigning the initialized-above empty string incremented
        // by an Integer from declared-above array of integers, previously
        // converted into String value
                    updateMessage(lineOfData = lineOfData + (String.valueOf(array1[i])) + " ");
                }
                return null;
            }
        };
        // Add a listener on messageProperty
        task.messageProperty().addListener((obs, oldMessage, newMessage) ->

        // Set the textfield's text to new message of your listener
        tf1.setText(newMessage));
        new Thread(task).start();
    });]]></Answer>
<Answer><![CDATA[static void showListGradually(List<?> list, StringProperty outputProperty, Duration delay) {
    // timeline updates text property to non-empty sublists
    Timeline timeline = new Timeline(new KeyFrame(delay, new EventHandler<ActionEvent>() {

        int sublistSize = 1;

        @Override
        public void handle(ActionEvent event) {
            outputProperty.set(list.subList(0, sublistSize++).toString());
        }

    }));
    timeline.setCycleCount(list.size());

     // No need to use Platform.runLater here, if this is the application thread
    Platform.runLater(() -> {
        // set initial value from fx application thread
        outputProperty.set(Collections.EMPTY_LIST.toString());

        timeline.play();
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34564025" questionTitle="Catching exceptions out of 'stream()' or 'parallelStream()' loses correct values">
<Answer><![CDATA[public class IntUtils {
    // ... other utility methods

    public static OptionalInt parseInt(String s, Consumer<? super Exception> exceptionConsumer) {
        try {
            return OptionalInt.of(Integer.parseInt(s));
        } catch (NumberFormatException e) {
            if (exceptionConsumer != null) {
                // let the caller take the decision
                exceptionConsumer.accept(e);
            } else {
                // default behavior
                e.printStackTrace();
            }
        }

        return OptionalInt.empty();
    }

    public static OptionalInt parseInt(String s) {
        return parseInt(s, null);
    }
}]]></Answer>
<Answer><![CDATA[public void testCaughtRuntimeExceptionOutOfIteration() {
    List<String> strList = Stream.of("1", "2", "illegal_3", "4", "illegal_5", "6").collect(Collectors.toList());
    List<Integer> intList = new ArrayList<>();

    try{
        intList = collectToIntegers(strList);
    } catch (NumberFormatException nfe) {
        System.err.println(nfe.getMessage());
    }

    List<Integer> expectedIntList = Stream.of(1, 2).collect(Collectors.toList());
    // fails
    assertEquals("The first two elements have been parsed successfully.", expectedIntList, intList);  
}

private List<Integer> collectToIntegers(List<String> strList) {
    List<Integer> result = new ArrayList<>();
    for (String str : strList) {
       result.add(Integer.parseInt(str));
    }
    return result;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34286062" questionTitle="How to clear text added in a javafx barchart?">
<Answer><![CDATA[import java.util.HashMap;
import java.util.Map;

import javafx.application.Application;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.chart.Axis;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class BarChartSample extends Application {

    final static String austria = "Austria";
    final static String brazil = "Brazil";
    final static String france = "France";
    final static String italy = "Italy";
    final static String usa = "USA";

    /**
     * Barchart with a clear button
     */
    @Override
    public void start(Stage stage) {

        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();
        final BarChartExt<String, Number> bc = new BarChartExt<String, Number>(xAxis, yAxis);

        bc.setTitle("Country Summary");
        xAxis.setLabel("Country");
        yAxis.setLabel("Value");

        XYChart.Series series1 = new XYChart.Series();
        series1.setName("2003");
        series1.getData().add(new XYChart.Data(austria, 25601.34));
        series1.getData().add(new XYChart.Data(brazil, 20148.82));
        series1.getData().add(new XYChart.Data(france, 10000));
        series1.getData().add(new XYChart.Data(italy, 35407.15));
        series1.getData().add(new XYChart.Data(usa, 12000));

        XYChart.Series series2 = new XYChart.Series();
        series2.setName("2004");
        series2.getData().add(new XYChart.Data(austria, 57401.85));
        series2.getData().add(new XYChart.Data(brazil, 41941.19));
        series2.getData().add(new XYChart.Data(france, 45263.37));
        series2.getData().add(new XYChart.Data(italy, 117320.16));
        series2.getData().add(new XYChart.Data(usa, 14845.27));

        XYChart.Series series3 = new XYChart.Series();
        series3.setName("2005");
        series3.getData().add(new XYChart.Data(austria, 45000.65));
        series3.getData().add(new XYChart.Data(brazil, 44835.76));
        series3.getData().add(new XYChart.Data(france, 18722.18));
        series3.getData().add(new XYChart.Data(italy, 17557.31));
        series3.getData().add(new XYChart.Data(usa, 92633.68));

        bc.getData().addAll(series1, series2, series3);

        Button clearButton = new Button("Clear");
        clearButton.setOnAction(e -> {

            bc.getData().clear();

        });

        HBox toolbar = new HBox();
        toolbar.getChildren().addAll(clearButton);

        VBox root = new VBox();
        VBox.setVgrow(bc, Priority.ALWAYS);
        root.getChildren().addAll(toolbar, bc);

        Scene scene = new Scene(root, 800, 600);

        stage.setScene(scene);
        stage.show();
    }

    /**
     * Custom barchart with text on top of bars
     *
     * @param <X>
     * @param <Y>
     */
    private static class BarChartExt<X, Y> extends BarChart<X, Y> {

        /**
         * Registry for text nodes of the bars
         */
        Map<Node, Node> nodeMap = new HashMap<>();

        public BarChartExt(Axis xAxis, Axis yAxis) {
            super(xAxis, yAxis);
        }

        /**
         * Add text for bars
         */
        @Override
        protected void seriesAdded(Series<X, Y> series, int seriesIndex) {

            super.seriesAdded(series, seriesIndex);

            for (int j = 0; j < series.getData().size(); j++) {

                Data<X, Y> item = series.getData().get(j);

                Node text = new Text(String.valueOf(item.getYValue()));
                nodeMap.put(item.getNode(), text);
                getPlotChildren().add(text);

            }

        }

        /**
         * Remove text of bars
         */
        @Override
        protected void seriesRemoved(final Series<X, Y> series) {

            for (Node bar : nodeMap.keySet()) {

                Node text = nodeMap.get(bar);
                getPlotChildren().remove(text);

            }

            nodeMap.clear();

            super.seriesRemoved(series);
        }

        /**
         * Adjust text of bars, position them on top
         */
        @Override
        protected void layoutPlotChildren() {

            super.layoutPlotChildren();

            for (Node bar : nodeMap.keySet()) {

                Node text = nodeMap.get(bar);

                text.relocate(bar.getBoundsInParent().getMinX(), bar.getBoundsInParent().getMinY() - 30);

            }

        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class CustomBarChart<X, Y> extends BarChart<X, Y> {

    Map<Node, TextFlow> nodeMap = new HashMap<>();

    public CustomBarChart(Axis xAxis, Axis yAxis) {
        super(xAxis, yAxis);
        this.setBarGap(0.0);
    }

    @Override
    protected void seriesAdded(Series<X, Y> series, int seriesIndex) {

        super.seriesAdded(series, seriesIndex);

        for (int j = 0; j < series.getData().size(); j++) {

            Data<X, Y> item = series.getData().get(j);

            Text text = new Text(item.getYValue().toString());
            text.setStyle("-fx-font-size: 10pt;");

            TextFlow textFlow = new TextFlow(text);
            textFlow.setTextAlignment(TextAlignment.CENTER);

            nodeMap.put(item.getNode(), textFlow);
            this.getPlotChildren().add(textFlow);

        }

    }

    @Override
    protected void seriesRemoved(final Series<X, Y> series) {

        for (Node bar : nodeMap.keySet()) {

            Node text = nodeMap.get(bar);
            this.getPlotChildren().remove(text);

        }

        nodeMap.clear();

        super.seriesRemoved(series);
    }

    @Override
    protected void layoutPlotChildren() {

        super.layoutPlotChildren();

        for (Node bar : nodeMap.keySet()) {

            TextFlow textFlow = nodeMap.get(bar);

            if (bar.getBoundsInParent().getHeight() > 30) {
                ((Text) textFlow.getChildren().get(0)).setFill(Color.WHITE);
                textFlow.resize(bar.getBoundsInParent().getWidth(), 200);
                textFlow.relocate(bar.getBoundsInParent().getMinX(), bar.getBoundsInParent().getMinY() + 10);
            } else {
                ((Text) textFlow.getChildren().get(0)).setFill(Color.GRAY);
                textFlow.resize(bar.getBoundsInParent().getWidth(), 200);
                textFlow.relocate(bar.getBoundsInParent().getMinX(), bar.getBoundsInParent().getMinY() - 20);
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34200294" questionTitle="Java Thread communication">
<Answer><![CDATA[public static void main(String[] args) throws Exception {
    final Object[] monitors = new Object[10];
    final Thread[] threads = new Thread[10];
    for (int i = 0; i < 10; i++) {
        final int num = i;
        Thread t = new Thread() {
            @Override
            public void run() {
                final Object mon = monitors[num];
                try {
                    synchronized (mon) {
                        mon.wait();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Hello, world from thread " + num);
            }
        };
        Object o = new Object();
        threads[i] = t;
        monitors[i] = o;
        t.start();
    }

    final Object mon = monitors[5];
    synchronized (mon) {
        mon.notify();
    }
    Thread.sleep(10000);
}]]></Answer>
<Answer><![CDATA[public class TwoThreads {

    public static void main(String args[]) throws InterruptedException {
        System.out.println("TwoThreads:Test");
        new TwoThreads().test();
    }

    // The end of the list.
    private static final Integer End = -1;

    static class Producer implements Runnable {

        final BlockingQueue<Integer> queue;

        public Producer(BlockingQueue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            try {
                for (int i = 0; i < 1000; i++) {
                    queue.add(i);
                    Thread.sleep(1);
                }
                // Finish the queue.
                queue.add(End);
            } catch (InterruptedException ex) {
                // Just exit.
            }
        }

    }

    static class Consumer implements Runnable {

        final BlockingQueue<Integer> queue;

        public Consumer(BlockingQueue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            boolean ended = false;
            while (!ended) {
                try {
                    Integer i = queue.take();
                    ended = i == End;
                    System.out.println(i);
                } catch (InterruptedException ex) {
                    ended = true;
                }
            }
        }

    }

    public void test() throws InterruptedException {
        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        Thread pt = new Thread(new Producer(queue));
        Thread ct = new Thread(new Consumer(queue));
        // Start it all going.
        pt.start();
        ct.start();
        // Wait for it to finish.
        pt.join();
        ct.join();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34165948" questionTitle="Best way to specify fields returned by a Service">
<Answer><![CDATA[import javax.persistence.*;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

@Entity
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class Post {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @XmlTransient
    @ManyToOne
    private User persistedAuthor;

    @Transient
    private User author;

    // + Getters and Setters ...

}]]></Answer>
<Answer><![CDATA[@Entity
@NamedQueries({
    @NamedQuery(name = "User.byName", query = "SELECT u FROM User u WHERE u.name = :name"),
    @NamedQuery(name = "Users.all", query = "SELECT u FROM User u ORDER BY u.name ASC")
})
@NamedEntityGraph(name = "User.withRoles", attributeNodes = {
    @NamedAttributeNode("roles") // make them fetched eager
})
public class User implements Serializable {

    public static interface WithoutRoles {}
    public static interface WithRoles extends WithoutRoles {}

    @Id
    private Long id;

    @Column(unique = true, updatable = false)
    private String name;

    @ManyToMany // fetched lazy by default
    @JoinTable(/* ... */)
    private Set<Role> roles;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // include in JSON only when "@JsonView(WithRoles.class)" is used:
    @JsonView(WithRoles.class)
    public Set<Role> getRoles() {
        if (roles == null)
            roles = new HashSet<>();
        return roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

}

@Entity
public class Role implements Serializable {
    /* ... */
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34130697" questionTitle="Find element matching in 2 lists using java 8 stream">
<Answer><![CDATA[public static void main(String[] args) {
    OTSQuestions ots = new OTSQuestions();

    List<Attr> attrs = ots.getAttrs();
    List<String> ids = new ArrayList<>();
    ids.add("101");
    ids.add("104");
    ids.add("102");

    List<Attr> finalList = attrs.stream().filter(
            attr -> ids.contains(attr.getId()))
            .collect(Collectors.toList());
}

public class Attr {
    private String id;
    private String name;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

private List<Attr> getAttrs() {
    List<Attr> attrs = new ArrayList<>();
    Attr attr = new Attr();
    attr.setId("100");
    attr.setName("Yoga");
    attrs.add(attr);

    Attr attr1 = new Attr();
    attr1.setId("101");
    attr1.setName("Yoga1");
    attrs.add(attr1);

    Attr attr2 = new Attr();
    attr2.setId("102");
    attr2.setName("Yoga2");
    attrs.add(attr2);

    Attr attr3 = new Attr();
    attr3.setId("103");
    attr3.setName("Yoga3");
    attrs.add(attr3);

    Attr attr4 = new Attr();
    attr4.setId("104");
    attr4.setName("Yoga4");
    attrs.add(attr4);

    return attrs;
}]]></Answer>
<Answer><![CDATA[class PersonWrapper {

    private Person person;

    private PersonWrapper(Person person) {
        this.person = person;
    }

    public static PersonWrapper wrap(Person person) {
        return new PersonWrapper(person);
    }

    public Person unwrap() {
        return person;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        PersonWrapper other = (PersonWrapper) obj;
        return person.name.equals(other.person.name) && person.age.equals(other.person.age);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + person.name.hashCode();
        result = prime * result + person.age.hashCode();
        return result;
    }

}]]></Answer>
<Answer><![CDATA[public class Person {
  private String id ;
  private String name;
  private String age;

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    Person sample = (Person) o;

    if (!name.equals(sample.name)) return false;
    return age.equals(sample.age);

  }

  @Override
  public int hashCode() {
    int result = name.hashCode();
    result = 31 * result + age.hashCode();
    return result;
  }
}]]></Answer>
<Answer><![CDATA[<h3>Find List of Object passing String of Array Using java 8?</h3>
[Faiz Akram][1]
    <pre>
    public class Student {
        private String name;
        private Integer age;
        public Student(String name, Integer age) {
            super();
            this.name = name;
            this.age = age;
        }
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public Integer getAge() {
            return age;
        }
        public void setAge(Integer age) {
            this.age = age;
        }
    }
    </pre>
    // Main Class
    <pre>
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    public class JavaLamda {
        public static void main(String[] k)
        {
        List<Student> stud = new ArrayList<Student>();  
        stud.add(new Student("Faiz", 1));
        stud.add(new Student("Dubai", 2));
        stud.add(new Student("Akram", 5));
        stud.add(new Student("Rahul", 3));
        String[] name= {"Faiz", "Akram"};
        List<Student> present = Arrays.asList(name)
                .stream()
                .flatMap(x -> stud
                    .stream()
                    .filter(y -> x.equalsIgnoreCase(y.getName())))
                .collect(Collectors.toList());
        System.out.println(present);
        }
    }
    </pre>
    OutPut //[Student@404b9385, Student@6d311334]


  [1]: http://faizakram.com/blog/find-list-object-passing-string-array-using-java-8/]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34124278" questionTitle="bouncing counter not giving proper results">
<Answer><![CDATA[protected void moveBall() {
    // Check boundaries

    boolean changedHorizontal = false ;

    if (x < radius || x > getWidth() - radius) {
        dx *= -1; // Change ball move direction
        changedHorizontal = true ;
    }
    if (y < radius || y > getHeight() - radius) {
        dy *= -1; // Change ball move direction
        if (changedHorizontal) {
            i++ ;
            System.out.println(i);
        }
    }

    // Adjust ball position
    x += dx;
    y += dy;
    ellipse.setCenterX(x);
    ellipse.setCenterY(y);

}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.beans.property.DoubleProperty;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Ellipse;
import javafx.util.Duration;
import javafx.scene.control.Button;

public class EllipsePane extends Pane {
   public final double radius = 20;
   private double x = radius, y = radius;
   private double dx = 1, dy = 1;
   private Ellipse ellipse = new Ellipse();
   private Timeline animation;
   //private Button btCountRead = new Button("How many times has it landed perfectly in the corner?");
   private Button btCountRead = new Button("corner cnt:");
   private int i = 0;
   private double lasti = 0, lastx, lasty, lastdx, lastdy; // added for debugging.
   private long moveBallCnt = 0;

   public EllipsePane() {
      ellipse.setFill(Color.GREEN); // Set ball color
      ellipse.setRadiusX(radius);
      ellipse.setRadiusY(radius);
      getChildren().add(ellipse); // Place a ball into this pane
      getChildren().add(btCountRead);

      // Create an animation for moving the ball

      animation = new Timeline(
         new KeyFrame(Duration.millis(50), e -> moveBall()));
      animation.setCycleCount(Timeline.INDEFINITE);
      animation.play(); // Start animation
      debugHeaders();
   }

   public void play() {
      animation.play();
   }

   public void pause() {
      animation.pause();
   }

   public void increaseSpeed() {
      animation.setRate(animation.getRate() + 100);
   }

   public void decreaseSpeed() {
      animation.setRate(
         animation.getRate() > 0 ? animation.getRate() - 100 : 0);
   }

   public DoubleProperty rateProperty() {
      return animation.rateProperty();
   }

   protected void moveBall() {
      // Check boundaries
      String change = "";
      if (x < radius || x > getWidth() - radius) {
         dx *= -1; // Change ball move direction
         //DEBUG: change += "dx";
      }
      if (y < radius || y > getHeight() - radius) {
         dy *= -1; // Change ball move direction
         //DEBUG: change += "dy";
      }
      if( !change.isEmpty() ) {
         debugStats( change );
      }

      // Adjust ball position
      x += dx;
      y += dy;
      ellipse.setCenterX(x);
      ellipse.setCenterY(y);

      String hitType = null;
      // Let's start by splitting up the if-logic so we can see what is actually firing.
      // We'll add temp-var "hitType" to see which if expression fires.
      // (Also... just for fun, since the "center" of the elipse is x & y, you could
      // rewrite the following in terms of "x" and "y"):
      if( x - radius == 0 && y - radius == 0 ) {
         hitType = "A";
      } else if( x - radius == 0 && y + radius == getHeight())  {
         hitType = "B";
      } else if( x + radius == getWidth() && y + radius == getHeight() )  {
         hitType = "C";
      } else if( x - radius == getWidth() && y - radius == 0 ) {
         hitType = "D";
      }
      //original: if ((ellipse.getCenterX() - radius == 0 && ellipse.getCenterY() - radius == 0) ||
      //original:   hitType = "A";
      //original: else if( ellipse.getCenterX() - radius == 0 && ellipse.getCenterY() + radius == getHeight())  {
      //original:   hitType = "B";
      //original: } else if( ellipse.getCenterX() + radius == getWidth() && ellipse.getCenterY() + radius == getHeight() )  {
      //original:   hitType = "C";
      //original: } else if( ellipse.getCenterX() - radius == getWidth() && ellipse.getCenterY() - radius == 0 ) {
      //original:   hitType = "D";
      //original: }

      if( hitType != null ) {
         // something fired, let's print out some background info...
         i++;
         if( 0 == (i % 20 ) ) {
         debugHeaders();  // do this so they don't scroll offscreen.
         }
         debugStats( hitType );
      }
      // update our "last" values each time through the moveBall() method whether or not anything fired.
      lasti = i;
      lastx = x; lastdx = dx;
      lasty = y; lastdy = dy;
      moveBallCnt++; // count each time moveBall() is called.
      //{
      //  /*btCountRead.setOnAction( e ->*/
      //}
   }

   public void debugHeaders() {
      System.out.printf("%12s.%4s: %6s | %6s | %6s | %6s | %6s | %6s | %6s | %6s | %6s |\n"
         ,"moveBallCnt"
         ,"hit"
         ,"i"
         ,"x",  "lastX"
         ,"y",  "lastY"
         ,"dx", "lastdx"
         ,"dy", "lastdy" );
   }

   public void debugStats( String hitType ) {
      System.out.printf("%12d.%4s: %6d | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f |\n"
         , moveBallCnt
         , hitType
         , i
         , x,  lastx
         , y,  lasty
         , dx, lastdx
         , dy, lastdy );
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34086461" questionTitle="Java Stream: is there a way to iterate taking two elements a time instead of one?">
<Answer><![CDATA[public static <T, V, A, R> Collector<T, ?, R> pairing(BiPredicate<T, T> filter, BiFunction<T, T, V> map, Collector<? super V, A, R> downstream) {

    class Pairing {
        T left, right;
        A middle = downstream.supplier().get();
        boolean empty = true;

        void add(T t) {
            if (empty) {
                left = t;
                empty = false;
            } else if (filter.test(right, t)) {
                downstream.accumulator().accept(middle, map.apply(right, t));
            }
            right = t;
        }

        Pairing combine(Pairing other) {
            if (!other.empty) {
                this.add(other.left);
                this.middle = downstream.combiner().apply(this.middle, other.middle);
                this.right = other.right;
            }
            return this;
        }

        R finish() {
            return downstream.finisher().apply(middle);
        }
    }

    return Collector.of(Pairing::new, Pairing::add, Pairing::combine, Pairing::finish);
}]]></Answer>
<Answer><![CDATA[private static final class MappingErrors {

    private Map<String, String> map = new HashMap<>();

    private String first, second;

    public void accept(String str) {
        first = second;
        second = str;
        if (first != null && first.startsWith("err")) {
            map.put(first, second);
        }
    }

    public MappingErrors combine(MappingErrors other) {
        throw new UnsupportedOperationException("Parallel Stream not supported");
    }

    public Map<String, String> finish() {
        return map;
    }

    public static Collector<String, ?, Map<String, String>> collector() {
        return Collector.of(MappingErrors::new, MappingErrors::accept, MappingErrors::combine, MappingErrors::finish);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33935220" questionTitle="JAVA-8 streams collect advanced usage">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class Java8ConsumerExample1 {
private static List<Integer> QUERY_RESULTSET_INTEGER = Arrays.asList(new   Integer(1), new Integer(10), new Integer(200), new Integer(101), new Integer(-10), new Integer(0));
private static List<String> QUERY_RESULTSET_STRING = Stream.of("A", "B", "C", "D", "E", "F").collect(Collectors.toList());

public static void main(String[] args) {

    // EXAMPLE : 1

    /**
     * Iterator over the Query generated integer list and print on console.
     */
    StubsUtils.forEach(new ExecutorContext() {
        List<Integer> consumerList = new ArrayList<Integer>();

        /**
         * Let's assume that our query returns set of Integer that would be consume by some caller class or print on console.
         * @return
         */
        @Override
        public List<Integer> getQuery() {
            return QUERY_RESULTSET_INTEGER;
        }

        @Override
        public Consumer<Integer> getConsumer() {
            return x -> {
                System.out.println(x);
                consumerList.add(x);
            };
        }
    });

    // EXAMPLE : 2
    /**
     * Iterator over the Query generated String list and print on console.
     */
    StubsUtils.forEach(new ExecutorContext() {
        List<String> consumerList = new ArrayList<String>();

        /**
         * Let's assume that our query returns set of Integer that would be consume by some caller class or print on console.
         * @return
         */
        @Override
        public List<String> getQuery() {
            return QUERY_RESULTSET_STRING;
        }

        @Override
        public Consumer<String> getConsumer() {
            return x -> {
                System.out.println(x);
                consumerList.add(x);
            };
        }
    });

}
}]]></Answer>
<Answer><![CDATA[package com;

    import java.util.Arrays;
    import java.util.List;
    import java.util.function.Consumer;


    public class AdvanceConsumerTest {

        public static void main(String[] args) {

            TestLookupService testLookupService = new TestLookupService();
            testLookupService.forEach("A",val->{
                System.out.println(" Count of 'A' is "+ val);
            });
            System.out.println("******************************************");
            testLookupService.forEach("B",val->{
                System.out.println(" Count of 'B' is "+ val);
            });
            System.out.println("******************************************");
            testLookupService.forEach("C",val->{
                System.out.println(" Count of 'C' is "+ val);
            });

        }
    }

    class TestLookupService {
        void forEach(String parameter, Consumer<Long> stringConsumer) {
            LocalRepository.forEach(new QueryExecutionContext() {
                @Override
                public String getQuery() {
                    return parameter;
                }

                @Override
                public Consumer<Long> getConsumer() {
                    return stringConsumer;
                }
            });
        };
    }

    class LocalRepository {
        static DataSetRepo dataSetRepo = new DataSetRepo();

        static void forEach(QueryExecutionContext executionContext) {
            executionContext.getConsumer().accept(dataSetRepo.queryResults(executionContext));
        }

    }

    interface QueryExecutionContext {

        String getQuery();

        Consumer<Long> getConsumer();
    }

    class DataSetRepo {
        List<String> cacheOf = Arrays.asList("A", "B", "C", "A", "C", "C", "B");

        long queryResults(QueryExecutionContext context) {
            return cacheOf.stream().filter(s -> s.equalsIgnoreCase(context.getQuery())).count();
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33894366" questionTitle="How to update textarea(console)in realtime in JavaFX without loosing flow or freezing the application">
<Answer><![CDATA[import java.net.URL;
import java.util.ResourceBundle;
import javafx.beans.binding.When;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextArea;

/**
 * FXML Controller class
 *
 * @author 
 */
public class SimulationController implements Initializable {

    @FXML
    private Button abortbutton;
    @FXML
    private Button homebutton;

    private volatile Service<String> backgroundThread;
    @FXML
    private TextArea consoleLogscreen;
    @FXML
    private ProgressBar progressBar;
    @FXML
    private Label progress;

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {

         backgroundThread = new Service<String>() {
            @Override
            protected Task<String> createTask() {
                return new Task<String>() {
                    StringBuilder results = new StringBuilder();
                    @Override
                    protected String call() throws Exception {
                        long i = 1;
                        String s = null;
                        while (i < 90) {
                            if(isCancelled()){
                                break;
                            }
                            double k = Math.sqrt(Math.pow(i, 2) / Math.sqrt(i));
                            results.append("i: ").append(i).append(" Count: ").append(k).append("\n");
                            updateValue(results.toString());
                            updateProgress((100*i)/90, 90);
                            Thread.sleep(100);
                            i++;
                        }

                        return results.toString();
                    }
                };
            }
        };
        consoleLogscreen.textProperty().bind(backgroundThread.valueProperty());
        progressBar.progressProperty().bind(backgroundThread.progressProperty());
        progress.textProperty().bind(new When(backgroundThread.progressProperty().isEqualTo(-1)).then("Unknown")
                .otherwise(backgroundThread.progressProperty().multiply(100).asString("%.2f%%")));
        backgroundThread.start();
        backgroundThread.setOnCancelled(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {

            }
        });
        backgroundThread.restart();
        abortbutton.setDisable(false);
        homebutton.setDisable(true);
    }

    @FXML
    private void onAbortClicked(ActionEvent event) {
        if (event.getSource() == abortbutton) {
            backgroundThread.cancel();
        }
    }

    @FXML
    private void onHomeClicked(ActionEvent event) {
    }

}]]></Answer>
<Answer><![CDATA[/**
 * 
 * @param str
 */
public void appendText(String str) {

    results.append(str);

    updated = true;
}

/**
 * 
 */
public void setupConsoleOutput() {

    backgroundThread = new Service<String>() {

        protected Task<String> createTask() {

            return new Task<String>() {

                protected String call() throws Exception {

                    while (true) {

                        if (isCancelled()) {

                            break;
                        }

                        if (updated) {

                            updateValue(results.toString());

                            updated = false;

                            Platform.runLater(() -> {

                                consoleOutput.setScrollTop(Double.MAX_VALUE);
                            });
                        }

                        if (exported) {

                            consoleOutput.setScrollTop(Double.MAX_VALUE);

                            exported = false;
                        }

                        Thread.sleep(100);
                    }

                    return results.toString();
                }
            };
        }
    };

    consoleOutput.textProperty().bind(backgroundThread.valueProperty());

    backgroundThread.start();

    backgroundThread.setOnCancelled(new EventHandler<WorkerStateEvent>() {

        public void handle(WorkerStateEvent event) {

        }
    });

    backgroundThread.restart();

    OutputStream out = new OutputStream() {

        @Override
        public void write(int b) throws IOException {

            appendText(String.valueOf((char) b));
        }
    };

    PrintStream ps = new PrintStream(out, true);

    System.setOut(ps);

    System.setErr(ps);
}]]></Answer>
<Answer><![CDATA[public class ConsoleController {
    @FXML
    public TextArea consoleLogscreen;

    private class Console extends OutputStream {

        @Override
        public void write(int b) throws IOException {
            Platform.runLater(() ->
               consoleLogscreen.appendText(String.valueOf((char) b));
            }
        }
    }

    @FXML
    public void initialize() throws IOException {
        Console console = new Console();
        PrintStream ps = new PrintStream(console, true);
        System.setOut(ps);
        System.setErr(ps);
        System.err.flush();
        System.out.flush();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33889551" questionTitle="Get Display method to return boolean? - JavaFX">
<Answer><![CDATA[import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.*;

/**
 * An Alert Box for the GUI to display errors to the user.
 *
 */
public class AlertBox extends Stage {
    private boolean cancel = false;
    private EventHandler<ActionEvent> yesAction = null;
    private EventHandler<ActionEvent> noAction = null;

    public AlertBox(String title, String message) {
        super();
        initModality(Modality.APPLICATION_MODAL); // If window is up,
        // make user handle
        // it.
        setTitle(title);
        setMinHeight(350);
        setMinWidth(250);

        VBox root = new VBox(); // Root layout.

        Label warning = new Label(message); // Message explaining what is wrong.

        HBox buttonLayout = new HBox(); // The yes and cancel button.

        Button yesButton = new Button("Yes"); // Yes button for the user.
        Button noButton = new Button("No"); // No button for the user.

        yesButton.setOnAction(e -> {
            cancel = false;
            yesAction.handle(new ActionEvent());
        });

        noButton.setOnAction(e -> {
            cancel = true;
            noAction.handle(new ActionEvent());
        });
        buttonLayout.getChildren().addAll(yesButton, noButton);

        root.getChildren().addAll(warning, buttonLayout);
        root.setAlignment(Pos.CENTER);

        Scene scene = new Scene(root);
        setScene(scene);
    }

    public void setYesAction(EventHandler<ActionEvent> yesAction){
        this.yesAction = yesAction;
    }
    public void setNoAction(EventHandler<ActionEvent> noAction){
        this.noAction = noAction;
    }

    public boolean isCanceled(){
        return cancel;
    }
}]]></Answer>
<Answer><![CDATA[package application;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;

public class Main extends Application {
    @Override
    public void start(final Stage primaryStage) {
    try {
        final BorderPane root = new BorderPane();
        final Scene scene = new Scene(root, 400, 400);

        final AlertBox warning = new AlertBox("Warning!",
                "You are about to delete your account. Are you sure you  would like to do this?");    

            warning.addCancelListener(new ChangeListener<Boolean>() {

            @Override
            public void changed(final ObservableValue<? extends Boolean> observable, final Boolean oldValue, final Boolean newValue) {
                if (newValue) {
                    System.out.println("Tschüss");
                } else {
                    System.out.println("Thanks for confidence");
                }
            }
        });

        primaryStage.setScene(scene);
        primaryStage.show();
    } catch (final Exception e) {
        e.printStackTrace();
    }
}    

    public static void main(final String[] args) {
        launch(args);
    }    
}

package application;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 * An Alert Box for the GUI
 * to display errors to the user.
 */
public class AlertBox {
    Stage window;
    ObjectProperty<Boolean> cancel = new SimpleObjectProperty<>(null);

    public AlertBox(final String title, final String message) {
        cancel.setValue(null);
        display(title, message);
    }

    private void display(final String title, final String message) {
        window = new Stage(); // Create the stage.

        window.initModality(Modality.APPLICATION_MODAL); // If window is up, make user handle it.
        window.setTitle(title);
        window.setMinHeight(350);
        window.setMinWidth(250);
        window.setAlwaysOnTop(true);

        final VBox root = new VBox(); // Root layout.

        final Label warning = new Label(message); // Message explaining  what is wrong.

        final HBox buttonLayout = new HBox(); // The yes and cancel button.

        final Button yesButton = new Button("Yes"); // Yes button for the user.
        final Button noButton = new Button("No"); // No button for the user.

        yesButton.setOnAction(e -> {
            cancel.set(false);
            close();
        });

        noButton.setOnAction(e -> {
            cancel.set(true);
            close();
        });

        buttonLayout.getChildren().addAll(yesButton, noButton);

        root.getChildren().addAll(warning, buttonLayout);
        root.setAlignment(Pos.CENTER);

        final Scene scene = new Scene(root);
        window.setScene(scene);
        window.show();
    }

    /**
     * Closes the window
     *
     * @param variable
     */
    private void close() {
        window.close();
    }

    public void addCancelListener(final ChangeListener<Boolean> listener) {
        cancel.addListener(listener);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33888392" questionTitle="My shape moved but will pause for a while">
<Answer><![CDATA[isMovingLeft = false;
isMovingRight = false;

if(e.getCode() == KeyCode.LEFT){
     //instead of doing this:
     //sdbl_playerX.set(sdbl_playerX.doubleValue() - sint_speed.intValue());
     isMovingLeft = true;
}

OnKeyPressed(){
   if left is pressed:
       set isMovingLeft to true;
   if right is pressed:
       set isMovingRight to true;
}

onKeyReleased(){
   if left is released:
       set isMovingLeft to false;
   if right is pressed:
       set isMovingRight to false; 
}

//maingameloop i.e: handle method in JavaFX
handle(){
    if(isMovingLeft){
        //apply move left logic
    }
    if(isMovingRight){
        //apply move right logic
    }
}]]></Answer>
<Answer><![CDATA[...
private Rectangle rct_player;
private TranslateTransition transTransition;
private boolean isMoving = false;
...

    // Create the translate transition for the rectangle
    transTransition = new TranslateTransition(new Duration(75000), rct_player);
    transTransition.setToY(0);
    transTransition.setToX(1500);
    transTransition.setInterpolator(Interpolator.LINEAR);
    transTransition.setCycleCount(Timeline.INDEFINITE);

    scn_main.setOnKeyPressed(e-> {
        if (!isMoving) {
            transTransition.play();
            isMoving = true;
        }
    });
    scn_main.setOnKeyReleased(e -> {
        transTransition.stop(); 
        isMoving = false;
    });
...]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33885686" questionTitle="No change to ListView when text is entered in filter TextField">
<Answer><![CDATA[public void filterPlantList(String oldValue, String newValue) {

    ObservableList<Plant> filteredList = FXCollections.observableArrayList();
    if(filterInput == null || (newValue.length() < oldValue.length()) || newValue == null) {
        plantList.setItems(observablePlantList);
    }
    else {
        newValue = newValue.toUpperCase();
        for(Plant plants : plantList.getItems()) {
            String filterText = plants.getName();
            if(filterText.toUpperCase().contains(newValue)) {
                filteredList.add(plants);
            }
        }
        plantList.setItems(filteredList);
    }
}
@Override
public void initialize(URL fxmlFileLocation, ResourceBundle rb) {

    //add Listener to filterInput TextField
    filterInput.textProperty().addListener(new ChangeListener() {
        public void changed(ObservableValue observable, Object oldValue, Object newValue) {
            filterPlantList((String) oldValue, (String) newValue);
        }
    });]]></Answer>
<Answer><![CDATA[@FXML
private ListView<Plant> plantList;
@FXML
private TextField filterInput;

ObservableList<Plant> observablePlantList = FXCollections.observableArrayList();
FilteredList<Plant> filterItems = new FilteredList<>(observablePlantList);

@Override
public void initialize(URL url, ResourceBundle rb) {
    plantList.setItems(filterItems);

    // bind predicate to text filterInput text
    filterItems.predicateProperty().bind(javafx.beans.binding.Bindings.createObjectBinding(() -> {
        String text = filterInput.getText();
        if (text == null || text.isEmpty()) {
            return null;
        } else {
            final String uppercase = text.toUpperCase();
            return (plant) -> plant.getName().toUpperCase().contains(uppercase);
        }
    }, filterInput.textProperty()));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33826306" questionTitle="Is it possible to create a lazy (better infinite) collection defined by recursion in Java 8?">
<Answer><![CDATA[public class Fibonacci extends AbstractList<BigInteger> {
    final Map<BigInteger,BigInteger> values=new HashMap<>();

    public Fibonacci() {
        values.put(BigInteger.ONE, BigInteger.ONE);
        values.put(BigInteger.ZERO, BigInteger.ONE);
    }

    @Override
    public BigInteger get(int index) {
        return get(BigInteger.valueOf(index));
    }
    public BigInteger get(BigInteger index) {
        return values.computeIfAbsent(index, ix ->
            get(ix=ix.subtract(BigInteger.ONE)).add(get(ix.subtract(BigInteger.ONE))));
    }

    @Override
    public Stream<BigInteger> stream() {
        return Stream.iterate(BigInteger.ZERO, i->i.add(BigInteger.ONE)).map(this::get);
    }
    @Override
    public Iterator<BigInteger> iterator() {
        return stream().iterator();
    }
    @Override
    public int size() {
        return Integer.MAX_VALUE;
    }
}]]></Answer>
<Answer><![CDATA[public static IntStream iterate(int first, int second, IntBinaryOperator generator) {
    Spliterator.OfInt spliterator = new AbstractIntSpliterator(Long.MAX_VALUE, 
                                             Spliterator.ORDERED) {
        int prev1 = first, prev2 = second;
        int pos = 0;

        @Override
        public boolean tryAdvance(IntConsumer action) {
            if(pos < 2) {
                action.accept(++pos == 1 ? prev1 : prev2);
            } else {
                int next = generator.applyAsInt(prev1, prev2);
                prev1 = prev2;
                prev2 = next;
                action.accept(next);
            }
            return true;
        }
    };
    return StreamSupport.intStream(spliterator, false);
}]]></Answer>
<Answer><![CDATA[import java.util.Iterator;
import java.util.LinkedList;
import java.util.stream.Stream;

public class FunctionalSequence<T> implements Iterable<T>{
    LinkedList<CountedFlighweight<T>> realList = new LinkedList<>();
    StackOverflowingFunction<Integer, T> calculate = null;
    public FunctionalSequence<T> initialize(Stream<T> start){
        start.forEachOrdered((T value) ->
        {
                realList.add(new CountedFlighweight<>());
                realList.getLast().set(value);
        });
        return this;
    }
    public FunctionalSequence<T>  setSequenceFunction(StackOverflowingFunction<Integer, T> calculate){
        this.calculate = calculate;
        return this;
    }

    @Override
    public Iterator<T> iterator() {
        return new SequenceIterator();
    }
    public T get(int currentIndex) throws StackOverflowError{
        if(currentIndex < 0) return null;
        while (currentIndex >= realList.size()){
            realList.add(new CountedFlighweight<T>());
        }
        try {
            return (T) realList.get(currentIndex).get(calculate, currentIndex);
        } catch (Exception e) {
            return null;
        }
    }
    public class SequenceIterator implements Iterator<T>{
        int currentIndex;
        @Override
        public boolean hasNext() {
            return true;
        }

        @Override
        public T next() {
            T result = null;
            if (currentIndex == realList.size()){
                realList.add(new CountedFlighweight<T>());
            }
            // here the StackOverflowError catching is a pure formality, by next() we would never cause StackOverflow
            try {
                result = realList.get(currentIndex).get(calculate, currentIndex);
            } catch (StackOverflowError e) {
            }
            currentIndex++;
            return result;
        }

    }
    /**
     * if known is false, the value of reference is irrelevant
     * if known is true, and reference is not null, reference contains the data
     * if known is true, and reference is null, that means, that the appropriate data are corrupted in any way
     * calculation on corrupted data should result in corrupted data.
     * @author Pet
     *
     * @param <U>
     */
    public class CountedFlighweight<U>{
        private boolean known = false;
        private U reference;
        /**
         * used for initial values setting 
         */
        private void set(U value){
            reference = value;
            known = true;
        }
        /**
         * used for data retrieval or function counting and data saving if necessary
         * @param calculate
         * @param index
         * @return
         * @throws Exception
         */
        public U get(StackOverflowingFunction<Integer, U> calculate, int index) throws StackOverflowError{
            if (! known){
                if(calculate == null) {
                    reference = null;
                } else {
                    try {
                        reference = calculate.apply(index);
                    } catch (Exception e) {
                        reference = null;
                    }
                }
            }
            known = true;
            return reference;
        }
    }

    @FunctionalInterface
    public interface StackOverflowingFunction <K, U> {
        public U apply(K index) throws StackOverflowError;

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33815409" questionTitle="javafx 8 Parallel Transitions for two nodes">
<Answer><![CDATA[p1 = new Path(new MoveTo(400, 360),
            new HLineTo(240),
            new VLineTo(500),
            new HLineTo(340),
            new VLineTo(680),
            new HLineTo(40),
            new VLineTo(560),
            new HLineTo(120),
            new VLineTo(240),
            new HLineTo(360),
            new VLineTo(40),
            new HLineTo(40),
            new VLineTo(180),
            new HLineTo(180),
            new VLineTo(100)
            );

    p1.setStroke(Color.BLACK);
    p1.setStrokeWidth(4);

    p2 = new Path(new MoveTo(800,40),
            new VLineTo(680),
            new HLineTo(40),
            new VLineTo(40),
            new HLineTo(800)
            );

    p2.setStroke(Color.YELLOW);
    p2.setStrokeWidth(4);
        Duration numSECP1 = Duration.valueOf("6.5s");//was 8.5
    //animP1 = new PathTransition(numSECP1,s1,cp1);
    animP1 = new PathTransition(numSECP1, p1, cp1);
    animP1.setOrientation(OrientationType.NONE);
    animP1.setInterpolator(Interpolator.LINEAR);
    animP1.setDelay(Duration.seconds(4.5));
    animP1.setAutoReverse(true);
    animP1.setCycleCount(Timeline.INDEFINITE);

    Duration numSECP2 = Duration.valueOf("6.5s");//was 8.5
    animP2 = new PathTransition(numSECP2,p2,cp2);
    animP2.setOrientation(OrientationType.NONE);
    animP2.setInterpolator(Interpolator.LINEAR);
    //animP2.setDelay(Duration.seconds(1));
    animP2.setAutoReverse(true);
    animP2.setCycleCount(Timeline.INDEFINITE);]]></Answer>
<Answer><![CDATA[import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import javafx.util.Duration;


public class JavaFXApplication extends Application {

@Override
public void start(Stage primaryStage) {       

    StackPane root = new StackPane();        
    Scene scene = new Scene(root, 700, 650);
    primaryStage.setScene(scene);
    primaryStage.show();
    // Create Rectangles
    Rectangle rect = new Rectangle (100, 40, 100, 100);
    rect.setArcHeight(50);
    rect.setArcWidth(50);
    rect.setFill(Color.VIOLET);
    Rectangle rect2 = new Rectangle (100, 40, 100, 100);
    rect2.setArcHeight(50);
    rect2.setArcWidth(50);
    rect2.setFill(Color.RED);

    // Add rectangles to scene
    root.getChildren().addAll(rect, rect2);

    // Create first Path
    Path path = new Path();
    path.getElements().add(new MoveTo(20,20));
    path.getElements().add(new CubicCurveTo(380, 0, 380, 120, 200, 120));
    PathTransition pathTransition = new PathTransition();
    pathTransition.setDuration(Duration.millis(10000));
    pathTransition.setNode(rect);
    pathTransition.setPath(path);
    // Create second Path
    Path path2 = new Path();
    path2.getElements().add(new MoveTo(180,30));
    path2.getElements().add(new CubicCurveTo(180, 0, 380, 120, 200, 120));
    PathTransition pathTransition2 = new PathTransition();
    pathTransition2.setDuration(Duration.millis(10000));
    pathTransition2.setNode(rect2);
    pathTransition2.setPath(path2);
    pathTransition2.setAutoReverse(true);

   // Play both transitions
   pathTransition.play();
   pathTransition2.play();
}
public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33757280" questionTitle="Regex validating csv strings">
<Answer><![CDATA[import java.util.regex.Pattern;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.BooleanBinding;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class ValidatingTextFieldExample extends Application {

    private BooleanBinding valid ;

    @Override
    public void start(Stage primaryStage) {
        String ident = "\\s*(([0-9]{9}\\s+[1-9][0-9]{0,3})|(\\d{4}(\\s+[1-9]\\d{0,3}){2}(\\s+\\d{1,4}){2}))\\s*";

        String regex = String.format("\\A%s(,%s)*\\z", ident, ident);

        Pattern pattern = Pattern.compile(regex);

        TextField textField = new TextField();
        String INVALID_STYLE = "-fx-background-color: red;" ;
        textField.setStyle(INVALID_STYLE);

        valid = Bindings.createBooleanBinding(() -> 
            pattern.matcher(textField.getText()).matches(),
            textField.textProperty());

        valid.addListener((obs, wasValid, isValid) -> {
            if (isValid) {
                textField.setStyle("");
            } else {
                textField.setStyle(INVALID_STYLE);
            }
        });

        StackPane root = new StackPane(textField);
        primaryStage.setScene(new Scene(root, 350, 120));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
    String[] inputs  = {"987654321 1",
                        "987654321 21",
                        "0101 9 1",
                        "1701 91 1 2",
                        "4101 917 1 0 43",
                        "0801 9 178 2 0",
                        "0111 9 1 084 0",
                        "0101 9 1 0 1 0",
                        "3124",
                        "0314 9"};
    String regex = "(((\\d{9}(\\s\\d*)))|(\\d{4}(\\s[1-9]\\d{0,3}){2}(\\s\\d{1,4}){0,2}))";
    String csvRegex = "("+ regex + ",\\s){0,4}"+regex;
    for(String s : inputs) {
        Matcher m = Pattern.compile(csvRegex).matcher(s);
        System.out.println(m.matches());
    }

    String falseCSVString = "987654321 1, 987654321 21, 1701 91 1 2, 0111 9 1 084 0, 0101 9 1 1 1 1 1 1 1 1 1";
    Matcher m = Pattern.compile(csvRegex).matcher(falseCSVString);
    System.out.println(m.matches());

    String rightCSVString = "987654321 1, 987654321 21, 1701 91 1 2, 0111 9 1 084 0, 0101 9 1";
    m = Pattern.compile(csvRegex).matcher(rightCSVString);
    System.out.println(m.matches());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33703905" questionTitle="Is there a cleaner way to use try-with-resource and PreparedStatement?">
<Answer><![CDATA[/**
 * Initialize script
 * -----
 * CREATE TABLE NVPAIR;
 * ALTER TABLE PUBLIC.NVPAIR ADD value VARCHAR2 NULL;
 * ALTER TABLE PUBLIC.NVPAIR ADD id int NOT NULL AUTO_INCREMENT;
 * CREATE UNIQUE INDEX NVPAIR_id_uindex ON PUBLIC.NVPAIR (id);
 * ALTER TABLE PUBLIC.NVPAIR ADD name VARCHAR2 NOT NULL;
 * ALTER TABLE PUBLIC.NVPAIR ADD CONSTRAINT NVPAIR_name_pk PRIMARY KEY (name);
 *
 * INSERT INTO NVPAIR(name, value) VALUES('foo', 'foo-value');
 * INSERT INTO NVPAIR(name, value) VALUES('bar', 'bar-value');
 */
public class DatabaseManager {
    /* Use local file for database */
    private static final String JDBC_CONNECTION = "jdbc:h2:file:./db/sandbox_h2.db;MODE=PostgreSQL";

    static {
        try {
            Class.forName("org.h2.Driver");  // Init H2 DB driver
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return Database connection
     * @throws SQLException
     */
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(JDBC_CONNECTION, "su", "");
    }

    /** Prepare statement */
    public static PreparedStatement prepareStatement(Connection conn, String SQL, PreparedStatementSetter setter) throws SQLException {
        PreparedStatement pstmt = conn.prepareStatement(SQL);
        setter.prepare(pstmt);
        return pstmt;
    }

    /** Execute statement */
    public static ResultSet executeStatement(PreparedStatement pstmt, PreparedStatementExecutor executor) throws SQLException {
        return executor.execute(pstmt);
    }
}]]></Answer>
<Answer><![CDATA[public class DatabaseManager implements AutoCloseable {

    /* Use local file for database */
    private static final String JDBC_CONNECTION = "jdbc:h2:file:./db/sandbox_h2.db;MODE=PostgreSQL";

    static {
        try {
            Class.forName("org.h2.Driver");  // Init H2 DB driver
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private final Connection connection;

    private DatabaseManager() throws SQLException {
        this.connection = getConnection();
    }

    @Override
    public void close() throws SQLException {
        connection.close();
    }

    public interface PreparedStatementSetter {
        void setValues(PreparedStatement ps) throws SQLException;
    }

    public interface Work {
        void doWork(DatabaseManager manager) throws SQLException;
    }

    public interface ResultSetHandler {
        void process(ResultSet resultSet) throws SQLException;
    }

    /**
     * @return Database connection
     * @throws SQLException
     */
    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(JDBC_CONNECTION, "su", "");
    }

    private PreparedStatement prepareStatement(String sql, PreparedStatementSetter setter) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(sql);
        setter.setValues(ps);
        return ps;
    }

    public static void executeWork(Work work) throws SQLException {
        try (DatabaseManager dm = new DatabaseManager()) {
            work.doWork(dm);
        }
    }

    public void executeQuery(String sql, PreparedStatementSetter setter, ResultSetHandler handler) throws SQLException {
        try (PreparedStatement ps = prepareStatement(sql, setter);
            ResultSet rs = ps.executeQuery()) {
            handler.process(rs);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33592308" questionTitle="JavaFx : How to put ImageView inside ListView">
<Answer><![CDATA[private void setListEntry(ListCell<Label> listCell, Label label) {

        Image img = loadLableIcon(label);

        GridPane row = new GridPane();
        row.setHgap(15);
        row.setVgap(15);

        ColumnConstraints col1 = new ColumnConstraints();
        col1.setPercentWidth(90);
        ColumnConstraints col2 = new ColumnConstraints();
        col2.setPercentWidth(10);

        ImageView icon = new ImageView(img);

        javafx.scene.control.Label name = new javafx.scene.control.Label(label.getName());
        name.setMinWidth(120d);

        javafx.scene.control.Label amount = new javafx.scene.control.Label("" + label.getSize());

        HBox iconAndName = new HBox(10);
        iconAndName.setAlignment(Pos.CENTER_LEFT);
        iconAndName.getChildren().addAll(icon, name);

        row.add(iconAndName, 0, 0);
        row.add(amount, 1, 0);

        row.getColumnConstraints().addAll(col1, col2);

        listCell.setGraphic(row);
    }]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ListViewWithImages extends Application {

    private final Image IMAGE_RUBY  = new Image("https://upload.wikimedia.org/wikipedia/commons/f/f1/Ruby_logo_64x64.png");
    private final Image IMAGE_APPLE  = new Image("http://findicons.com/files/icons/832/social_and_web/64/apple.png");
    private final Image IMAGE_VISTA  = new Image("http://antaki.ca/bloom/img/windows_64x64.png");
    private final Image IMAGE_TWITTER = new Image("http://files.softicons.com/download/social-media-icons/fresh-social-media-icons-by-creative-nerds/png/64x64/twitter-bird.png");

    private Image[] listOfImages = {IMAGE_RUBY, IMAGE_APPLE, IMAGE_VISTA, IMAGE_TWITTER};

    @Override
    public void start(Stage primaryStage) throws Exception {

        ListView<String> listView = new ListView<String>();
        ObservableList<String> items =FXCollections.observableArrayList (
                "RUBY", "APPLE", "VISTA", "TWITTER");
        listView.setItems(items);

        listView.setCellFactory(param -> new ListCell<String>() {
            private ImageView imageView = new ImageView();
            @Override
            public void updateItem(String name, boolean empty) {
                super.updateItem(name, empty);
                if (empty) {
                    setText(null);
                    setGraphic(null);
                } else {
                    if(name.equals("RUBY"))
                        imageView.setImage(listOfImages[0]);
                    else if(name.equals("APPLE"))
                        imageView.setImage(listOfImages[1]);
                    else if(name.equals("VISTA"))
                        imageView.setImage(listOfImages[2]);
                    else if(name.equals("TWITTER"))
                        imageView.setImage(listOfImages[3]);
                    setText(name);
                    setGraphic(imageView);
                }
            }
        });
        VBox box = new VBox(listView);
        box.setAlignment(Pos.CENTER);
        Scene scene = new Scene(box, 200, 200);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33506573" questionTitle="JavaFX retrieve index of dragged column in tableView">
<Answer><![CDATA[table.getColumns().addListener(
    new ListChangeListener() {

        @Override
        public void onChanged(Change change) {

            change.next();

            System.out.println("old list");
            System.out.println(change.getRemoved());
            List<TableColumn> removed = change.getRemoved();
            ObservableList<String[]> items = table.getItems();

            String[][] removedArray = new String[removed.size()][items.size()];

            for (int i=0; i< removed.size(); i++){
                TableColumn<String[], ?> column = removed.get(i); 

                for (int j=0; j< items.size(); j++) {

                    removedArray[i][j] = (String) column.getCellData(items.get(j));
                    //System.out.print(column.getCellData(item));
                }
            }

            List<TableColumn> added = change.getList();

            String[][] addedArray = new String[removed.size()][items.size()];
            for (int i=0; i< added.size(); i++){
                TableColumn<String[], ?> column = added.get(i); 

                for (int j=0; j< items.size(); j++) {

                    addedArray[i][j] = (String) column.getCellData(items.get(j));

                }
            }

            System.out.println("removed");
            System.out.println(matrix2String(removedArray));

            System.out.println("added");
            System.out.println(matrix2String(addedArray));

        }
});]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.ListChangeListener;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

public class MainApp extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    final TableView<String[]> tableView = new TableView<String[]>();

    @Override
    public void start(Stage stage) {

        TableColumn[] columns = {new TableColumn("c1"), new TableColumn("c2"),     new TableColumn("c3"), new TableColumn("c4")};
        tableView.getColumns().setAll(columns);

        tableView.getColumns().addListener(
                new ListChangeListener() {

                    @Override
                    public void onChanged(Change change) {

                        change.next();

                        System.out.println("old list");
                        System.out.println(change.getRemoved());

                        System.out.println("new list");
                        System.out.println(change.getList());
                    }

                });

        System.out.println("initial list");
        System.out.println(tableView.getColumns());
        stage.setScene(new Scene(tableView));
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33494052" questionTitle="JavaFX: Redirect console output to TextArea that is created in SceneBuilder">
<Answer><![CDATA[package application;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;

public class MainController {

    @FXML
    private TextArea console;
    private PrintStream ps ;

    public void initialize() {
        ps = new PrintStream(new Console(console)) ;
    }

    public void button(ActionEvent event) {
        System.setOut(ps);
        System.setErr(ps);
        System.out.println("Hello World");
    }

    public class Console extends OutputStream {
        private TextArea console;

        public Console(TextArea console) {
            this.console = console;
        }

        public void appendText(String valueOf) {
            Platform.runLater(() -> console.appendText(valueOf));
        }

        public void write(int b) throws IOException {
            appendText(String.valueOf((char)b));
        }
    }
}]]></Answer>
<Answer><![CDATA[public class ytdlLogger implements Initializable
{

    @FXML
    private TextArea loggerPane;

    public void appendText(String valueOf) {
        Platform.runLater(() -> loggerPane.appendText(valueOf));
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                appendText(String.valueOf((char)b));
            }
        };
        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33336542" questionTitle="JavaFX custom Fonts">
<Answer><![CDATA[package createfont;

import java.io.IOException;
import java.io.InputStream;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class CustomFontTest extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        String currentFontFile = "English Gothic, 17th c..TTF";
        InputStream fontStream = CustomFontTest.class.getResourceAsStream(currentFontFile);
        if (fontStream != null) {
            Font bgFont = Font.loadFont(fontStream, 36);
            fontStream.close();

            final Button button = new Button("Press me");
            button.setFont(bgFont);

            BorderPane root = new BorderPane();
            root.setCenter(button);

            Scene scene = new Scene(root, 500, 100);

            primaryStage.setTitle("CustomFontTest");
            primaryStage.setScene(scene);
            primaryStage.show();
        } else {
            throw new IOException("Could not create font: " + currentFontFile);
        }
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FontLoad extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        Label label = new Label("JavaFX Application");
        Button button = new Button("My Button");
        VBox box = new VBox(15, label, button);
        box.setAlignment(Pos.CENTER);
        Scene scene = new Scene(box, 500, 300);
        scene.getStylesheets().add(getClass().getResource("/fontstyle.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33321275" questionTitle="Delete duplicate words in a big text file - Java">
<Answer><![CDATA[// Remove duplicate words from a file
    public String removeDupsFromFile(String str) {
        String[] words = str.split(" ");
        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>();

        for (int i = 0 ; i < words.length ; i++) {
            if (map.containsKey(words[i])) {
                int count = map.get(words[i]) + 1;
                map.put(words[i], count);
            } else {
                map.put(words[i], 1);
            }
        }

        StringBuilder result = new StringBuilder("");
        Iterator itr = map.keySet().iterator();
        while (itr.hasNext()) {
            result.append(itr.next() + " ");

        }
        return result.toString();
    }]]></Answer>
<Answer><![CDATA[package com.stackoverflow;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.*;
import java.util.Scanner;

public class H2WordReading {

    public static void main(String[] args) {
//        read50Gigs("50gigfile.txt", "cleaned50gigfile.txt");
        read50Gigs("./testSmallFile", "./cleaned");
    }

    public static void read50Gigs(String fileLocation, String newFileLocation) {
        try (Connection connection = DriverManager.getConnection("jdbc:h2:./words");
             FileInputStream fileInputStream = new FileInputStream(fileLocation);
             Scanner scanner = new Scanner(fileInputStream);
             FileOutputStream fileOutputStream = new FileOutputStream(newFileLocation);
             OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream)) {
            connection.createStatement().execute("DROP TABLE IF EXISTS WORDS;");
            connection.createStatement().execute("CREATE TABLE WORDS(WORD VARCHAR NOT NULL);");

            PreparedStatement insertStatement = connection.prepareStatement("INSERT INTO WORDS VALUES (?);");
            PreparedStatement queryStatement = connection.prepareStatement("SELECT * FROM WORDS WHERE UPPER(WORD) = UPPER(?);");

            while (scanner.hasNext()) {
                String nextWord = scanner.next();
                queryStatement.setString(1, nextWord);
                ResultSet resultSet = queryStatement.executeQuery();
                if (!resultSet.next())  // word not found, ok
                {
                    outputStreamWriter.write(scanner.hasNext() ? (nextWord + ' ') : nextWord);
                    insertStatement.setString(1, nextWord);
                    insertStatement.execute();
                } // word found, just don't write anything
            }

        } catch (IOException | SQLException e) {
            throw new RuntimeException(e);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33298519" questionTitle="How to declare method's return type the as return type of last lambda in array passed to the method">
<Answer><![CDATA[Function<String, List<String>> flines ... lambda here

Function<List<String>, String> join ... lambda here

Function<String, List<Integer>> collectInts ... lambda here

Function<List<Integer>, Integer> sum ... lambda here


String fname = System.getProperty("user.home") + "/LamComFile.txt"; 
InputConverter<String> fileConv = new InputConverter<>(fname);
List<String> lines = fileConv.convertBy(flines);
String text = fileConv.convertBy(flines, join);
List<Integer> ints = fileConv.convertBy(flines, join, collectInts);
Integer sumints = fileConv.convertBy(flines, join, collectInts, sum);

System.out.println(lines);
System.out.println(text);
System.out.println(ints);
System.out.println(sumints);

List<String> arglist = Arrays.asList(args);
InputConverter<List<String>> slistConv = new InputConverter<>(arglist);  
sumints = slistConv.convertBy(join, collectInts, sum);
System.out.println(sumints);]]></Answer>
<Answer><![CDATA[interface FLines extends Function<String,List<String>> {
    @Override default List<String> apply(String fileName) {
        return getLines(fileName);
    }        
    public List<String> getLines(String fileName);
}
interface Join extends Function<List<String>,String> {
    @Override default String apply(List<String> lines) {
        return join(lines);
    }
    public String join(List<String> lines);
}
interface CollectInts extends Function<String,List<Integer>> {
    @Override default List<Integer> apply(String s) {
        return collectInts(s);
    }
    public List<Integer> collectInts(String s);
}
interface Sum extends Function<List<Integer>, Integer> {
    @Override default Integer apply(List<Integer> list) {
        return sum(list);
    }
    public Integer sum(List<Integer> list);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33297793" questionTitle="Using interceptor when leaving a method">
<Answer><![CDATA[@Logged
@Interceptor
public class LoggedInterceptor implements Serializable {

  private static final long serialVersionUID = 1L;

  @Inject
  private Logger logger;

  @AroundInvoke
  public Object logMethodCall(InvocationContext invocationContext) throws Exception {

        logger.info("Entering method: "
          + invocationContext.getMethod().getName() + " in class "
          + invocationContext.getMethod().getDeclaringClass().getName());

        Object ret = invocationContext.proceed();

        logger.info("Left method: "
          + invocationContext.getMethod().getName() + " in class "
          + invocationContext.getMethod().getDeclaringClass().getName());

        return ret;
  }
}]]></Answer>
<Answer><![CDATA[@Logged
@Interceptor
public class LoggedInterceptor implements Serializable {

  private static final long serialVersionUID = 1L;

  @Inject
  private Logger logger;

  @AroundInvoke
  public Object logMethodCall(InvocationContext invocationContext) throws Exception {

        Object ret = null;
        logger.info("Entering method: "
          + invocationContext.getMethod().getName() + " in class "
          + invocationContext.getMethod().getDeclaringClass().getName());

        try {

           ret = invocationContext.proceed();

        } catch(Exception e) {

            throw e;

        } finally  {

           logger.info("Left method: "
             + invocationContext.getMethod().getName() + " in class "
             + invocationContext.getMethod().getDeclaringClass().getName());

        }

        return ret;
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33157671" questionTitle="JavaFx - How to repeat action as long as button is pressed">
<Answer><![CDATA[final AnimationTimer timer = new AnimationTimer() {

            private long lastUpdate = 0;

            @Override
            public void handle(long time) {
                if (this.lastUpdate > 100) {
                    System.out.println(lastUpdate);
                }
                this.lastUpdate = time;
            }
        };

        addEventFilter(MouseEvent.ANY, event -> {
            if (event.getEventType() == MouseEvent.MOUSE_PRESSED)
                timer.start();
            if (event.getEventType() == MouseEvent.MOUSE_RELEASED) {
                timer.stop();
            }

        });]]></Answer>
<Answer><![CDATA[final AnimationTimer timer = new AnimationTimer() {

        private long lastUpdate = 0;

        @Override
        public void handle(long time) {
            if (this.lastUpdate > 100) {
                System.out.println("pressed");
            }
            this.lastUpdate = time;
        }
    };

    final Button b = new Button();
    b.addEventFilter(MouseEvent.ANY, new EventHandler<MouseEvent>() {

        @Override
        public void handle(MouseEvent event) {
            if (event.getEventType().equals(MouseEvent.MOUSE_PRESSED)) {
                timer.start();
            } else {
                timer.stop();
            }

        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="33072506" questionTitle="JavaFX saving extended class variables">
<Answer><![CDATA[import java.lang.annotation.Annotation;
import java.lang.reflect.Field;

public class MainApp {

    public static void log(BaseClass base) {

        System.out.println( "\nClass: " + base.getClass().getName());

        Class parent = base.getClass().getSuperclass();
        while( parent != null) {
            logFields( base, parent);
            parent = parent.getSuperclass();
        }

        logFields( base, base.getClass());
    }

    public static void logFields(BaseClass obj, Class clazz) {

        try {

            for (Field field : clazz.getDeclaredFields()) {

                if (field.isAnnotationPresent(Persist.class)) {

                    Annotation annotation = field.getAnnotation(Persist.class);
                    Persist test = (Persist) annotation;

                    System.out.println(field.getName() + " = " + field.get(obj));

                }

            }

        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }

    }

    public static void main(String[] args) throws Exception {

        BaseClass base = new BaseClass();
        base.var1 = 1;
        base.var2 = 2;
        base.var3 = 3;
        log(base);

        Class1 class1 = new Class1();
        class1.var1 = 4;
        class1.var2 = 5;
        class1.var3 = 6;
        class1.varX = 10;
        class1.varY = 20;
        log(class1);

        Class2 class2 = new Class2();
        class2.var1 = 7;
        class2.var2 = 8;
        class2.var3 = 9;
        class2.varA = 30;
        class2.varB = 40;
        log(class2);

        System.exit(0);
    }
}]]></Answer>
<Answer><![CDATA[import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class XmlExample {
    public static void main(String[] args) {

        // marshal base
        BaseClass base = new BaseClass();
        base.var1=1;
        base.var2=2;
        base.var3=3;

        String baseXml = marshal( base);

        // marshal class1
        Class1 class1 = new Class1();
        class1.var1=1;
        class1.var2=2;
        class1.var3=3;
        class1.varX=10;
        class1.varY=20;

        String class1Xml = marshal( class1);

        // marshal class2
        Class2 class2 = new Class2();
        class2.var1=1;
        class2.var2=2;
        class2.var3=3;
        class2.varA=40;
        class2.varB=50;

        String class2Xml = marshal( class2);

        // unmarshal base
        unmarshal(baseXml);

        // unmarshal class1
        unmarshal(class1Xml);

        // unmarshal class2
        unmarshal(class2Xml);

        System.exit(0);
    }

    public static String marshal( BaseClass base) {

        try {

            JAXBContext jaxbContext = JAXBContext.newInstance(BaseClass.class);

            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            StringWriter stringWriter = new StringWriter();
            jaxbMarshaller.marshal(base, stringWriter);
            String xml = stringWriter.toString();

            System.out.println("XML:\n" + xml);

            return xml;

        } catch (Exception e) {
            throw new RuntimeException( e);
        }

    }

    public static void unmarshal( String xml) {

        try {

            JAXBContext jaxbContext = JAXBContext.newInstance(BaseClass.class);

            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            StringReader stringReader = new StringReader(xml);

            Object clazz = (Object) jaxbUnmarshaller.unmarshal(stringReader);

            // create/cast here whatever class you need
            if( clazz.getClass().isAssignableFrom( BaseClass.class)) {
                System.out.println( "BaseClass:");
            }
            else if( clazz.getClass().isAssignableFrom( Class1.class)) {
                System.out.println( "Class1:");
            }
            else if( clazz.getClass().isAssignableFrom( Class2.class)) {
                System.out.println( "Class2:");
            }

            System.out.println( clazz + "\n");

        } catch (Exception e) {
            throw new RuntimeException( e);
        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32990664" questionTitle="How build EAR project with EJB and WAR in maven?">
<Answer><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                         http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.sonatype.mavenbook.multi</groupId>
        <artifactId>simple-parent</artifactId>
        <version>1.0</version>
    </parent>

    <artifactId>ear-module</artifactId>
    <packaging>ear</packaging>
    <name>EAR module</name>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <version>2.10.1</version>
                <configuration>
                    <ejbModule>
                        <groupId>org.sonatype.mavenbook.multi</groupId>
                        <artifactId>ejb-module</artifactId>
                        <bundleFilename>ejb-module.jar</bundleFilename>
                    </ejbModule>
                    <webModule>
                        <groupId>org.sonatype.mavenbook.multi</groupId>
                        <artifactId>war-module</artifactId>
                        <contextRoot>/foo</contextRoot>
                    </webModule>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>]]></Answer>
<Answer><![CDATA[> 1. parent  QCforCC-parent : 

    <artifactId>QCforCC-parent</artifactId>
    <packaging>pom</packaging>
    ...
    ...
    <modules>
        <module>QCforCC-ear</module>
        <module>QCforCC-ejb</module>
        <module>QCforCC-war</module>
    </modules>

> 2. QCforCC-ear :

<artifactId>QCforCC-ear</artifactId>
<packaging>ear</packaging>
...
...
 <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-ear-plugin</artifactId>
        <configuration>
          <version>5</version>
          <displayName>XXXXXXXX</displayName>  
          <modules>
             <webModule>             
                <moduleId>WebModule_XXX</moduleId>
                <groupId>${project.groupId}</groupId>
                <artifactId>>QCforCC-war</artifactId>   
               <contextRoot>XXXXXXXX</contextRoot>
             </webModule>  
                <jarModule>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>QCforCC-ejb</artifactId>
                 </jarModule>            
          </modules>  
        </configuration>
      </plugin>
    </plugins>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32974779" questionTitle="How to save entire object for a checkbox in javafx">
<Answer><![CDATA[import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class BookSelection extends Application {

    @Override
    public void start(Stage primaryStage) {
        GridPane grid = new GridPane();
        grid.setHgap(5);
        grid.setVgap(5);
        grid.setPadding(new Insets(10 ));
        List<Book> books = IntStream.rangeClosed(1, 10).mapToObj(i -> new Book("Book "+i)).collect(Collectors.toList());

        Set<Book> selectedBooks = new HashSet<>();

        int row = 0 ;
        for (Book book : books) {
            CheckBox checkBox = new CheckBox();
            checkBox.selectedProperty().addListener((obs, wasSelected, isNowSelected) -> {
                if (isNowSelected) {
                    selectedBooks.add(book);
                } else {
                    selectedBooks.remove(book);
                }
            });
            grid.addRow(row, checkBox, new Label(book.getTitle()));
            row++ ;
        }

        Button submit = new Button("Submit selection");
        submit.setOnAction(e -> 
                selectedBooks.forEach(book -> System.out.println(book.getTitle())));

        GridPane.setHalignment(submit, HPos.CENTER);
        grid.add(submit, 0, row, 2, 1);

        Scene scene = new Scene(grid, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static class Book {
        private final StringProperty title = new SimpleStringProperty() ;
        public Book(String title) {
            setTitle(title);
        }
        public final StringProperty titleProperty() {
            return this.title;
        }
        public final java.lang.String getTitle() {
            return this.titleProperty().get();
        }
        public final void setTitle(final java.lang.String title) {
            this.titleProperty().set(title);
        }


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class UserData extends Application {

public void start(Stage primaryStage) {
    VBox root = new VBox();
    Book book = new Book(22, "firstBok");
    Book book1 = new Book(2, "secondBok");
    CheckBox checkB = new CheckBox(book.getName());
    checkB.setUserData(book);
    CheckBox checkB1 = new CheckBox(book1.getName());
    checkB1.setUserData(book1);
    Button btn = new Button("Submit");
    btn.setOnAction(new EventHandler<ActionEvent>() {

        @Override
        public void handle(ActionEvent event) {
            if (checkB.isSelected()) {
                int firstCheckBxId = ((Book) checkB.getUserData()).getId();
                System.out.println("id:" + firstCheckBxId);
            }
            if (checkB1.isSelected()) {
                int secondCheckBxId = ((Book) checkB1.getUserData()).getId();
                System.out.println("id:" + secondCheckBxId);
            }

        }
    });
    root.getChildren().addAll(checkB, checkB1, btn);
    primaryStage.setScene(new Scene(root));
    primaryStage.show();
}

class Book {
    int id;
    private String name;

    Book(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return this.id;
    }

    public String getName() {
        return name;
    }

}

public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32874369" questionTitle="Transform Stream into a Map, when key/value mapping functions have a computational step in common">
<Answer><![CDATA[static Map<String, Hyperlink> toHyperlinksByNIN(Collection<Employee> employees) {
    return employees.stream()
            .map(e -> new Tuple<>(e, e.determineUniqueNINumber()))
            .collect(Collectors.toMap(
                    t -> t.getValue2(),
                    t -> new Hyperlink(t.getValue1().getName(), t.getValue2())));
}

class Tuple<T1, T2> {

    private final T1 value1;
    private final T2 value2;

    public Tuple(T1 value1, T2 value2) {
        this.value1 = value1;
        this.value2 = value2;
    }

    public T1 getValue1() {
        return value1;
    }

    public T2 getValue2() {
        return value2;
    }

}]]></Answer>
<Answer><![CDATA[public class Hyperlink {
    private String name;
    private String uniqueNINumber;

    public Hyperlink(String name, String uniqueNINumber) {
        this.name = name;
        this.uniqueNINumber = uniqueNINumber;
    }

    public String getName() {
        return name;
    }

    public String getUniqueNINumber() {
        return uniqueNINumber;
    }

    // Other stuff

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32860744" questionTitle="Deploying Wildfly EJB via mvn wildfly:deploy not putting jar into local repo. Ejb client can't see ejb dependency">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<modelVersion>4.0.0</modelVersion>

<parent>
    <groupId>com.packtpub.wflydevelopment.chapter3</groupId>
    <artifactId>ticket-agency</artifactId>
    <version>10.0.0-SNAPSHOT</version>
</parent>
<artifactId>ticket-agency-ejb-client</artifactId>
<packaging>jar</packaging>
<name>WildFly Quickstart: ticket-agency-ejb-client</name>
<description>WildFly Quickstarts: Java client for remote EJB</description>
<url>http://wildfly.org</url>

<licenses>
    <license>
        <name>Apache License, Version 2.0</name>
        <distribution>repo</distribution>
        <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
    </license>
</licenses>

<properties>
    <!-- Explicitly declaring the source encoding eliminates the following
        message: -->
    <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
        resources, i.e. build is platform dependent! -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <version.wildfly>10.0.0.Beta2</version.wildfly>
    <version.jboss.spec.javaee.7.0>1.0.3.Final</version.jboss.spec.javaee.7.0>

    <!-- WildFly Maven plug-in to deploy your WAR to a local WildFly container -->
    <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>


    <!-- other plug-in versions -->
    <version.exec.plugin>1.2.1</version.exec.plugin>
    <version.war.plugin>2.1.1</version.war.plugin>

    <!-- maven-compiler-plugin -->
    <maven.compiler.target>1.8</maven.compiler.target>
    <maven.compiler.source>1.8</maven.compiler.source>
</properties>

<dependencyManagement>
  <dependencies>
     <!-- Define the version of JBoss' Java EE 7 APIs we want to use -->
     <!-- JBoss distributes a complete set of Java EE 7 APIs including
        a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
        a collection) of artifacts. We use this here so that we always get the correct
        versions of artifacts. Here we use the jboss-javaee-7.0 stack (you can
        read this as the JBoss stack of the Java EE 7 APIs). You can actually
        use this stack with any version of WildFly that implements Java EE 7, not
        just WildFly 8! -->
     <dependency>
        <groupId>org.jboss.spec</groupId>
        <artifactId>jboss-javaee-7.0</artifactId>
        <version>${version.jboss.spec.javaee.7.0}</version>
        <type>pom</type>
        <scope>import</scope>
     </dependency>

     <dependency>
         <groupId>org.wildfly</groupId>
         <artifactId>wildfly-ejb-client-bom</artifactId>
         <version>${version.wildfly}</version>
         <type>pom</type>
         <scope>import</scope>
     </dependency>
  </dependencies>

</dependencyManagement>

<dependencies>

    <!-- Import the transaction spec API, we use runtime scope because
        we aren't using any direct reference to the spec API in our client code -->
    <dependency>
        <groupId>org.jboss.spec.javax.transaction</groupId>
        <artifactId>jboss-transaction-api_1.2_spec</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- Import the EJB API, we use runtime scope because we aren't using
        any direct reference to EJB spec API in our client code -->
    <dependency>
        <groupId>org.jboss.spec.javax.ejb</groupId>
        <artifactId>jboss-ejb-api_3.2_spec</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- We depend on the EJB remote business interfaces of this application -->
    <dependency>
        <groupId>com.packtpub.wflydevelopment.chapter3</groupId>
        <artifactId>ticket-agency-ejb</artifactId>
        <type>ejb-client</type>
        <version>${project.version}</version>
   </dependency>

    <!-- Include the ejb client jars -->
    <dependency>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-ejb-client-bom</artifactId>
        <type>pom</type>
        <scope>runtime</scope>
    </dependency>

    <!-- Client communications with the server use XNIO -->
    <dependency>
        <groupId>org.jboss.xnio</groupId>
        <artifactId>xnio-api</artifactId>
        <scope>runtime</scope>
    </dependency>

    <dependency>
        <groupId>org.jboss.xnio</groupId>
        <artifactId>xnio-nio</artifactId>
        <scope>runtime</scope>
    </dependency>

    <dependency>
        <groupId>org.jboss.remoting3</groupId>
        <artifactId>jboss-remoting</artifactId>
        <version>3.3.3.Final</version>
        <scope>runtime</scope>
    </dependency>

    <!-- Remote EJB security -->
    <dependency>
        <groupId>org.jboss.sasl</groupId>
        <artifactId>jboss-sasl</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- Data serialization for remote EJBs -->
    <dependency>
        <groupId>org.jboss.marshalling</groupId>
        <artifactId>jboss-marshalling-river</artifactId>
        <scope>runtime</scope>
    </dependency>

</dependencies>

<build>
    <finalName>${project.artifactId}</finalName>
    <plugins>

        <!-- Add the maven exec plug-in to allow us to run a java program
            via maven -->
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${version.exec.plugin}</version>
            <executions>
                <execution>
                    <goals>
                        <goal>exec</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <executable>java</executable>
                <workingDirectory>${project.build.directory}/exec-working-directory</workingDirectory>
                <arguments>
                    <!-- automatically creates the classpath using all project dependencies,
                        also adding the project build directory -->
                    <argument>-classpath</argument>
                    <classpath>
                    </classpath>
                    <argument>com.packtpub.wflydevelopment.chapter3.client.TicketAgencyClient</argument>
                </arguments>
            </configuration>
        </plugin>
    </plugins>
</build>]]></Answer>
<Answer><![CDATA[[steve@steves-mbp ticket-agency]$ mvn clean install
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] ticket-agency
[INFO] ticket-agency-ejb
[INFO] ticket-agency-ejb-client
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ticket-agency 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ticket-agency ---
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ ticket-agency ---
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/pom.xml to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency/1.0/ticket-agency-1.0.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ticket-agency-ejb 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ticket-agency-ejb ---
[INFO] Deleting /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ticket-agency-ejb ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ticket-agency-ejb ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 10 source files to /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ticket-agency-ejb ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ticket-agency-ejb ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ticket-agency-ejb ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-ejb-plugin:2.3:ejb (default-ejb) @ ticket-agency-ejb ---
[INFO] Building EJB ticket-agency-ejb with EJB version 3.2
[INFO] Building jar: /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb.jar
[INFO] Building EJB client ticket-agency-ejb-client
[INFO] Building jar: /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb-client.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ ticket-agency-ejb ---
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb.jar to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency-ejb/1.0/ticket-agency-ejb-1.0.jar
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/pom.xml to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency-ejb/1.0/ticket-agency-ejb-1.0.pom
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb-client.jar to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency-ejb/1.0/ticket-agency-ejb-1.0-client.jar
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ticket-agency-ejb-client 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ticket-agency-ejb-client ---
[INFO] Deleting /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ticket-agency-ejb-client ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ticket-agency-ejb-client ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ticket-agency-ejb-client ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ticket-agency-ejb-client ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ticket-agency-ejb-client ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ ticket-agency-ejb-client ---
[INFO] Building jar: /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/target/ticket-agency-ejb-client-1.0.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ ticket-agency-ejb-client ---
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/target/ticket-agency-ejb-client-1.0.jar to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency-ejb-client/1.0/ticket-agency-ejb-client-1.0.jar
[INFO] Installing /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb-client/pom.xml to /Users/steve/.m2/repository/com/packtpub/wflydevelopment/chapter3/ticket-agency-ejb-client/1.0/ticket-agency-ejb-client-1.0.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] ticket-agency ...................................... SUCCESS [  0.204 s]
[INFO] ticket-agency-ejb .................................. SUCCESS [  1.346 s]
[INFO] ticket-agency-ejb-client ........................... SUCCESS [  0.282 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.005 s
[INFO] Finished at: 2015-10-08T19:29:30+11:00
[INFO] Final Memory: 21M/230M
[INFO] ------------------------------------------------------------------------
[steve@steves-mbp ticket-agency]$ mvn -pl ticket-agency-ejb wildfly:deploy
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ticket-agency-ejb 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> wildfly-maven-plugin:1.0.2.Final:deploy (default-cli) > package @ ticket-agency-ejb >>>
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ticket-agency-ejb ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ticket-agency-ejb ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ticket-agency-ejb ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ticket-agency-ejb ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ticket-agency-ejb ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-ejb-plugin:2.3:ejb (default-ejb) @ ticket-agency-ejb ---
[INFO] Building EJB ticket-agency-ejb with EJB version 3.2
[INFO] Building jar: /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb.jar
[INFO] Building EJB client ticket-agency-ejb-client
[INFO] Building jar: /Users/steve/work/personal/wildflydevelopmentbycmilandmatloka/ticket-agency/ticket-agency-ejb/target/ticket-agency-ejb-client.jar
[INFO] 
[INFO] <<< wildfly-maven-plugin:1.0.2.Final:deploy (default-cli) < package @ ticket-agency-ejb <<<
[INFO] 
[INFO] --- wildfly-maven-plugin:1.0.2.Final:deploy (default-cli) @ ticket-agency-ejb ---
Oct 08, 2015 7:30:03 PM org.xnio.Xnio <clinit>
INFO: XNIO version 3.2.2.Final
Oct 08, 2015 7:30:03 PM org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.2.2.Final
Oct 08, 2015 7:30:03 PM org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 4.0.3.Final
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.737 s
[INFO] Finished at: 2015-10-08T19:30:05+11:00
[INFO] Final Memory: 19M/369M
[INFO] ------------------------------------------------------------------------
[steve@steves-mbp ticket-agency]$ mvn -pl ticket-agency-ejb-client exec:exec
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building ticket-agency-ejb-client 1.0
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:exec (default-cli) @ ticket-agency-ejb-client ---
Theatre booking system
=====================================
Commands: book, bookasync, list, mail, money, quit
> list
Oct 08, 2015 7:30:35 PM com.packtpub.wflydevelopment.chapter3.client.TicketAgencyClient handleList
INFO: Seat [id=1, name=Stalls, price=40, booked=false]
Seat [id=2, name=Circle, price=20, booked=false]
Seat [id=3, name=Balcony, price=10, booked=false]
Seat [id=4, name=Stalls, price=40, booked=false]
Seat [id=5, name=Circle, price=20, booked=false]
Seat [id=6, name=Balcony, price=10, booked=false]
Seat [id=7, name=Stalls, price=40, booked=false]
Seat [id=8, name=Circle, price=20, booked=false]
Seat [id=9, name=Balcony, price=10, booked=false]
Seat [id=10, name=Stalls, price=40, booked=false]
Seat [id=11, name=Circle, price=20, booked=false]
Seat [id=12, name=Balcony, price=10, booked=false]
Seat [id=13, name=Stalls, price=40, booked=false]
Seat [id=14, name=Circle, price=20, booked=false]
Seat [id=15, name=Balcony, price=10, booked=false]

>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32838681" questionTitle="How to open Text Input Dialog Box, when a TextArea gets focus in Javafx?">
<Answer><![CDATA[@Override
public void start( Stage stage )
{
    TextArea address = new TextArea();
    address.focusedProperty().addListener( new ChangeListener<Boolean>()
    {
        @Override
        public void changed( ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue )
        {
            if ( newPropertyValue )
            {
                System.out.println( "Textfield on focus" );
                TextInputDialog dialog = new TextInputDialog( "walter" );
                dialog.setTitle( "Text Input Dialog" );
                dialog.setHeaderText( "Look, a Text Input Dialog" );
                dialog.setContentText( "Please enter your name:" );
                // Traditional way to get the response value.
                Optional<String> result = dialog.showAndWait();
                if ( result.isPresent() )
                {
                    System.out.println( "Your name: " + result.get() );
                }

                // focus to different node on the scene
                address.getParent().requestFocus();
                // or mySubmitBtn.requestFocus();

            }
            else
            {
                System.out.println( "Textfield out focus" );
            }
        }
    } );

    Scene scene = new Scene( new VBox( address ), 200, 200 );
    stage.setScene( scene );
    stage.show();
}]]></Answer>
<Answer><![CDATA[@Override
    public void start(Stage stage) {
        TextArea address = new TextArea();

        address.focusedProperty().addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue) {
                TextInputDialog dialog = new TextInputDialog("walter");
                dialog.setTitle("Text Input Dialog");
                dialog.setHeaderText("Look, a Text Input Dialog");
                dialog.setContentText("Please enter your name:");

                if (newPropertyValue) {
                    System.out.println("Old Property : " + oldPropertyValue);
                    System.out.println("New Property : " + newPropertyValue);
                    System.out.println("Textfield on focus");
                    address.getParent().requestFocus();
                    Optional<String> result = dialog.showAndWait();
                    System.out.println("Result :" + result);
                    if (result.isPresent()) {
                        dialog.getDialogPane().requestFocus();
                        System.out.println("Your name: " + result.get());
                    }
                }
            }
        });

        Scene scene = new Scene(new VBox(address), 200, 200);
        stage.setScene(scene);
        stage.show();
        address.getParent().requestFocus();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32771415" questionTitle="Java 8 Stream mixing two elements">
<Answer><![CDATA[List<Slot> mixed = slots.stream().reduce((List<Slot>)null, (list, slot) -> {
    System.out.println("accumulator.apply(" + list + ", " + slot + ")");
    if (list == null) {
        List<Slot> newList = new ArrayList<>();
        newList.add(slot);
        return newList;
    }
    Slot last = list.get(list.size() - 1);
    if (last.end != slot.start)
        list.add(slot);
    else
        list.set(list.size() - 1, new Slot(last.start, slot.end));
    return list;
}, (list1, list2) -> {
    System.out.println("combiner.apply(" + list1 + ", " + list2 + ")");
    if (list1 == null)
        return list2;
    if (list2 == null)
        return list1;
    Slot lastOf1 = list1.get(list1.size() - 1);
    Slot firstOf2 = list2.get(0);
    if (lastOf1.end != firstOf2.start)
        list1.addAll(list2);
    else {
        list1.set(list1.size() - 1, new Slot(lastOf1.start, firstOf2.end));
        list1.addAll(list2.subList(1, list2.size()));
    }
    return list1;
});]]></Answer>
<Answer><![CDATA[public static <T, AI, I, AO, R> Collector<T, ?, R> groupingAdjacent(
        BiPredicate<? super T, ? super T> keepTogether,
        Collector<? super T, AI, ? extends I> inner,
        Collector<I, AO, R> outer
) {
    AI EMPTY = (AI) new Object();

    // Container to accumulate adjacent possibly null elements.  Adj can be in one of 3 states:
    // - Before first element: curGrp == EMPTY
    // - After first element but before first group boundary: firstGrp == EMPTY, curGrp != EMPTY
    // - After at least one group boundary: firstGrp != EMPTY, curGrp != EMPTY
    class Adj {

        T first, last;     // first and last elements added to this container
        AI firstGrp = EMPTY, curGrp = EMPTY;
        AO acc = outer.supplier().get();  // accumlator for completed groups

        void add(T t) {
            if (curGrp == EMPTY) /* first element */ {
                first = t;
                curGrp = inner.supplier().get();
            } else if (!keepTogether.test(last, t)) /* group boundary */ {
                addGroup(curGrp);
                curGrp = inner.supplier().get();
            }
            inner.accumulator().accept(curGrp, last = t);
        }

        void addGroup(AI group) /* group can be EMPTY, in which case this should do nothing */ {
            if (firstGrp == EMPTY) {
                firstGrp = group;
            } else if (group != EMPTY) {
                outer.accumulator().accept(acc, inner.finisher().apply(group));
            }
        }

        Adj merge(Adj other) {
            if (other.curGrp == EMPTY) /* other is empty */ {
                return this;
            } else if (this.curGrp == EMPTY) /* this is empty */ {
                return other;
            } else if (!keepTogether.test(last, other.first)) /* boundary between this and other*/ {
                addGroup(this.curGrp);
                addGroup(other.firstGrp);
            } else if (other.firstGrp == EMPTY) /* other container is single-group. prepend this.curGrp to other.curGrp*/ {
                other.curGrp = inner.combiner().apply(this.curGrp, other.curGrp);
            } else /* other Adj contains a boundary.  this.curGrp+other.firstGrp form a complete group. */ {
                addGroup(inner.combiner().apply(this.curGrp, other.firstGrp));
            }
            this.acc = outer.combiner().apply(this.acc, other.acc);
            this.curGrp = other.curGrp;
            this.last = other.last;
            return this;
        }

        R finish() {
            AO combined = outer.supplier().get();
            if (curGrp != EMPTY) {
                addGroup(curGrp);
                assert firstGrp != EMPTY;
                outer.accumulator().accept(combined, inner.finisher().apply(firstGrp));
            }
            return outer.finisher().apply(outer.combiner().apply(combined, acc));
        }
    }
    return Collector.of(Adj::new, Adj::add, Adj::merge, Adj::finish);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32749148" questionTitle="In Java, how do I efficiently and elegantly stream a tree node's descendants?">
<Answer><![CDATA[public class FlatMappingSpliterator<E,S> extends Spliterators.AbstractSpliterator<E>
implements Consumer<S> {

    static final boolean USE_ORIGINAL_IMPL
        = Boolean.getBoolean("stream.flatmap.usestandard");

    public static <T,R> Stream<R> flatMap(
        Stream<T> in, Function<? super T,? extends Stream<? extends R>> mapper) {

        if(USE_ORIGINAL_IMPL)
            return in.flatMap(mapper);

        Objects.requireNonNull(in);
        Objects.requireNonNull(mapper);
        return StreamSupport.stream(
            new FlatMappingSpliterator<>(sp(in), mapper), in.isParallel()
        ).onClose(in::close);
    }

    final Spliterator<S> src;
    final Function<? super S, ? extends Stream<? extends E>> f;
    Stream<? extends E> currStream;
    Spliterator<E> curr;

    private FlatMappingSpliterator(
        Spliterator<S> src, Function<? super S, ? extends Stream<? extends E>> f) {
        // actually, the mapping function can change the size to anything,
        // but it seems, with the current stream implementation, we are
        // better off with an estimate being wrong by magnitudes than with
        // reporting unknown size
        super(src.estimateSize()+100, src.characteristics()&ORDERED);
        this.src = src;
        this.f = f;
    }

    private void closeCurr() {
        try { currStream.close(); } finally { currStream=null; curr=null; }
    }

    public void accept(S s) {
        curr=sp(currStream=f.apply(s));
    }

    @Override
    public boolean tryAdvance(Consumer<? super E> action) {
        do {
            if(curr!=null) {
                if(curr.tryAdvance(action))
                    return true;
                closeCurr();
            }
        } while(src.tryAdvance(this));
        return false;
    }

    @Override
    public void forEachRemaining(Consumer<? super E> action) {
        if(curr!=null) {
            curr.forEachRemaining(action);
            closeCurr();
        }
        src.forEachRemaining(s->{
            try(Stream<? extends E> str=f.apply(s)) {
                if(str!=null) str.spliterator().forEachRemaining(action);
            }
        });
    }

    @SuppressWarnings("unchecked")
    private static <X> Spliterator<X> sp(Stream<? extends X> str) {
        return str!=null? ((Stream<X>)str).spliterator(): null;
    }

    @Override
    public Spliterator<E> trySplit() {
        Spliterator<S> split = src.trySplit();
        if(split==null) {
            Spliterator<E> prefix = curr;
            while(prefix==null && src.tryAdvance(s->curr=sp(f.apply(s))))
                prefix=curr;
            curr=null;
            return prefix;
        }
        FlatMappingSpliterator<E,S> prefix=new FlatMappingSpliterator<>(split, f);
        if(curr!=null) {
            prefix.curr=curr;
            curr=null;
        }
        return prefix;
    }
}]]></Answer>
<Answer><![CDATA[Limit = 1; requested = (0) []
Limit = 2; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 3; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 4; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 5; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 6; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 7; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 8; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 9; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 10; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 11; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 12; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 13; requested = (12) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18]
Limit = 14; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 15; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 16; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 17; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 18; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 19; requested = (18) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10]
Limit = 20; requested = (19) [2, 5, 13, 14, 15, 6, 19, 20, 7, 16, 17, 18, 3, 8, 11, 12, 9, 10, 4]]]></Answer>
<Answer><![CDATA[public class TreeIterator {
    private Tree tree;
    private List<String> topLevelNodes;

    public TreeIterator(Tree t, String node) {
        topLevelNodes = new List();
        topLevelNodes.add(node);
        tree = t;
    }

    public String next() {
        if (topLevelNodes.size() > 0) {
            int last = topLevelNodes.size() - 1;
            String result = topLevelNodes.get(last);
            topLevelNodes.remove(last);
            topLevelNodes.addAll(tree.get(result));
            return result;
        }
        return null;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32708014" questionTitle="JavaFx how to move the window position with Timeline">
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.stage.Screen;
import javafx.stage.Stage;

public class TimelineEvents extends Application {

    private AnimationTimer timer;
    Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
    double x = primaryScreenBounds.getMaxX() - 180;
    double y = primaryScreenBounds.getMaxY() - 180;
    double centerX = primaryScreenBounds.getWidth() / 2;
    double centerY = primaryScreenBounds.getHeight() / 2;
    double tickX = (x - centerX) / primaryScreenBounds.getWidth() * 10;
    double tickY = (y - centerY) / primaryScreenBounds.getHeight() * 10;

    @Override
    public void start(Stage stage) {
        Button btn = new Button();
        btn.setText("Show Message");
        btn.setOnAction((ActionEvent event) -> {
            Label l = new Label("Message");
            BorderPane root = new BorderPane(l);
            Scene s = new Scene(root, 100, 100);
            Stage window = new Stage();
            window.setX(x);
            window.setY(y);

            timer = new AnimationTimer() {

                @Override
                public void handle(long l) {
                    x = x - tickX;
                    y = y - tickY;
                    if (x >= centerX) {
                        window.setX(x);
                        window.setY(y);
                    } else {
                       stop();
                    }
                }
            };

            timer.start();
            window.setScene(s);
            window.showAndWait();
        });

        BorderPane pane = new BorderPane(btn);
        Scene scene = new Scene(pane, 200, 200);
        stage.setScene(scene);
        stage.show();

    }

    public static void main(String[] args) {
        Application.launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Popup;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;

public class SlidingNotificationWindow extends Application {

    @Override
    public void start(Stage primaryStage) {
        Button button = new Button("Show notification");
        button.setOnAction(e -> {
            Popup window = new Popup();
            StackPane content = new StackPane(new Label("Notification"));
            content.setStyle("-fx-background-color: aquamarine; -fx-padding: 40;");
            content.setOnMouseClicked(evt -> window.hide());
            window.getContent().add(content);
            window.setWidth(120);
            window.setHeight(75);

            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();

            double startPos = primaryScreenBounds.getMaxY();
            double endPos = 2*primaryScreenBounds.getMinY()/3 + primaryScreenBounds.getMaxY() / 3 ;
            DoubleProperty y = new SimpleDoubleProperty(startPos);
            Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(1), new KeyValue(y, endPos)));
            y.addListener((obs, oldValue, newValue) ->
                window.setY(newValue.doubleValue()));
            timeline.play();
            window.setX(primaryScreenBounds.getMaxX() - 120);
            window.show(primaryStage);
        });

        StackPane root = new StackPane(button);
        primaryStage.setScene(new Scene(root, 350, 120));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32701660" questionTitle="Need help in PathTransition in JavaFX">
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class CircleTransitions extends Application {

    @Override
    public void start(final Stage stage) throws Exception {
        final Group group = new Group();
        final Scene scene = new Scene(group, 500, 500, Color.WHITE);
        stage.setScene(scene);
        stage.setTitle("Circles");
        stage.show();

        Circle path = new Circle(250,250,200);
        path.setFill(Color.WHITE);

        DoubleProperty angle = new SimpleDoubleProperty();
        Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(2), new KeyValue(angle, 360)));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();

        group.getChildren().add(path);

        for (int i=0; i<5; i++) {
            Circle circle = new Circle(250, 450, 15);
            circle.setFill(Color.DARKRED);
            Rotate rotate = new Rotate(0, 250, 250);
            circle.getTransforms().add(rotate);
            rotate.angleProperty().bind(angle.add(360.0 * i / 5));
            group.getChildren().add(circle);
        }
    }

    public static void main(final String[] arguments) {
        Application.launch(arguments);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import javafx.util.Duration;

public class CirclePathTransitions extends Application {
    private static final int NUM_NODES = 5;
    private static final double W = 200;
    private static final double H = 200;
    private static final double NODE_SIZE = H / 8.0;

    @Override
    public void start(final Stage stage) throws Exception {
        Pane content = new Pane();
        content.setMinSize(Pane.USE_PREF_SIZE, Pane.USE_PREF_SIZE);
        content.setPrefSize(W, H);
        content.setMaxSize(Pane.USE_PREF_SIZE, Pane.USE_PREF_SIZE);
        content.setStyle("-fx-background-color: coral;");

        Shape path = new Circle(W/2, H/2, H * 3 / 8.0 - NODE_SIZE);

        content.getChildren().add(new Circle(W/2, H/2, H * 3 / 8.0 - NODE_SIZE, Color.PALEGREEN));

        for (int i = 0; i < NUM_NODES; i++) {
            Node node = new Circle(NODE_SIZE / 2, Color.MIDNIGHTBLUE);
            content.getChildren().add(node);

            final Transition transition = createPathTransition(path, node);
            transition.jumpTo(Duration.seconds(10).multiply(i * 1.0 / NUM_NODES));
            transition.play();
        }

        stage.setScene(new Scene(new StackPane(content), W, H, Color.ALICEBLUE));
        stage.show();
    }

    private PathTransition createPathTransition(Shape shape, Node node) {
        final PathTransition transition = new PathTransition(
                Duration.seconds(10),
                shape,
                node
        );

        transition.setAutoReverse(false);
        transition.setCycleCount(PathTransition.INDEFINITE);
        transition.setInterpolator(Interpolator.LINEAR);

        return transition;
    }

    public static void main(String[] args) throws Exception {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32700449" questionTitle="Group and Reduce list of objects">
<Answer><![CDATA[public void reduce() {
    ArrayList<Foo> foos = Stream.of("foo", "bar", "baz").flatMap(this::getfoos)
            .collect(Collectors.collectingAndThen(Collectors.groupingBy(f -> f.name,
            Collectors.reducing(Foo.identity(), Foo::merge)),
            map -> map.values().stream().
                collect(Collectors.toCollection(ArrayList::new))));

    assertEquals(3, foos.size());
    foos.forEach(f -> assertEquals(10, f.ids.size()));
}

private Stream<Foo> getfoos(String n) {
    return IntStream.range(0, 10).mapToObj(i -> new Foo(n, i));
}

public static class Foo {
    private String name;
    private List<Integer> ids = new ArrayList<>();

    private static final Foo BASE_FOO = new Foo("", 0);

    public static Foo identity() {
        return BASE_FOO;
    }

    // use only if side effects to the argument objects are okay
    public static Foo merge(Foo fooOne, Foo fooTwo) {
        if (fooOne == BASE_FOO) {
            return fooTwo;
        } else if (fooTwo == BASE_FOO) {
            return fooOne;
        }
        fooOne.ids.addAll(fooTwo.ids);
        return fooOne;
    }

    public Foo(String n, int i) {
        name = n;
        ids.add(i);
    }
}]]></Answer>
<Answer><![CDATA[public static List<Foo> withCollector(Stream<Foo> stream) {
    return stream.collect(Collector.<Foo, List<Foo>>of(ArrayList::new,
             (list, t) -> {
                 Foo f;
                 if(list.isEmpty() || !(f = list.get(list.size()-1)).name.equals(t.name))
                     list.add(t);
                 else
                     f.ids.addAll(t.ids);
             },
             (l1, l2) -> {
                 if(l1.isEmpty())
                     return l2;
                 if(l2.isEmpty())
                     return l1;
                 if(l1.get(l1.size()-1).name.equals(l2.get(0).name)) {
                     l1.get(l1.size()-1).ids.addAll(l2.get(0).ids);
                     l1.addAll(l2.subList(1, l2.size()));
                 } else {
                     l1.addAll(l2);
                 }
                 return l1;
             }));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32700005" questionTitle="Javafx Listview Add and edit element">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.cell.TextFieldListCell;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ListEdit extends Application {

    int i = 3;

    @Override
    public void start(Stage primaryStage) {
        ObservableList<String> items = FXCollections.observableArrayList("test1", "test2");
        ListView<String> list = new ListView<>(items);
        list.setCellFactory(TextFieldListCell.forListView());
        list.setEditable(true);

        Button btn = new Button();
        btn.setText("Add String");
        btn.setOnAction((ActionEvent event) -> {
            list.getItems().add(i - 1, "test" + i);
            list.edit(i - 2);
            i++;
        });

        VBox root = new VBox(list, btn);

        Scene scene = new Scene(root);

        primaryStage.setTitle("test!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[btn.setOnAction((ActionEvent event) -> {
        String c = "test"+(list.getItems().size()+1);
        list.getItems().add(list.getItems().size(), c);
        list.scrollTo(list.getItems().size() - 1);
        // list.edit(list.getItems().size() - 1);

        new AnimationTimer() {

            int frameCount = 0 ;

            @Override
            public void handle(long now) {
                frameCount++ ;
                if (frameCount > 1) {        
                    list.edit(list.getItems().size() - 1);
                    stop();
                }
            }

        }.start();
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32672847" questionTitle="Need to make the JavaFX embedded browser to work inside an action listener">
<Answer><![CDATA[import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

import javax.swing.*;


public class UTF8  {

    public static void main(String[] args)   {
        UTF8 object = new UTF8();
        object.UTF8();
    }

    public void UTF8() {

        JButton browser = new JButton("Click me");

        JFrame frame = new JFrame();
        frame.add(browser);
        frame.setSize(100,100);
        frame.setVisible(true);

        browser.addActionListener(e -> {
            if (e.getSource() == browser) {
                JFXPanel jfxPanel = new JFXPanel();
                Platform.runLater(() -> {
                    initFX(jfxPanel);
                });
                JFrame newFrame = new JFrame();
                newFrame.setSize(300, 200);
                newFrame.setContentPane(jfxPanel);
                newFrame.setVisible(true);
            }
        });
    }

    private static void initFX(JFXPanel fxPanel) {
        // This method is invoked on the JavaFX thread
        TextField addressField;
        WebView webView;
        WebEngine webEngine;
        HBox hBox = new HBox(5);
        hBox.setAlignment(Pos.CENTER);

        //The TextField for entering web addresses.
        addressField = new TextField("Enter Web address here...");
        addressField.setPrefColumnCount(50); //make the field at least 50 columns wide.
        //Add all out navigation nodes to the vbox.
        hBox.getChildren().addAll(addressField);
        //Our weiv that display ther page.
        webView = new WebView();

        //the engine that manages our pages.
        webEngine = webView.getEngine();
        webEngine.setJavaScriptEnabled(true);
        webEngine.load("http://www.google.ro");
        //our main app layout with 5 regions.
        BorderPane root = new BorderPane();
        root.setPrefSize(1280, 720);
        //Add every node to the BorderPane.
        root.setTop(hBox);
        root.setCenter(webView);
        //Our scene is where all the action in JavaFX happens.  A scene holds all Nodes, and its root node is our BorderPane.
        Scene scene = new Scene(root);
        //the stage manages the scene.
        fxPanel.setScene(scene);
    }
}]]></Answer>
<Answer><![CDATA[browser.addActionListener(new ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            if(e.getSource() == browser) {

                // create a JFXPanel, which will start the FX toolkit
                // if it's not already started:
                JFXPanel fxPanel = new JFXPanel();
                Platform.runLater(() -> {
                    Scene scene;
                    TextField addressField;
                    WebView webView;
                    WebEngine webEngine;
                    HBox hBox = new HBox(5);
                    hBox.setAlignment(Pos.CENTER);

                    //The TextField for entering web addresses.
                    addressField = new TextField("Enter Web address here...");
                    addressField.setPrefColumnCount(50); //make the field at least 50 columns wide.
                    //Add all out navigation nodes to the vbox.
                    hBox.getChildren().addAll(addressField);
                    //Our weiv that display ther page.
                    webView = new WebView();

                    //the engine that manages our pages.
                    webEngine = webView.getEngine();
                    webEngine.setJavaScriptEnabled(true);
                    webEngine.load("http://www.google.ro");
                    //our main app layout with 5 regions.
                    BorderPane root = new BorderPane();
                    root.setPrefSize(1280, 720);
                    //Add every node to the BorderPane.
                    root.setTop(hBox);
                    root.setCenter(webView);
                    //Our scene is where all the action in JavaFX happens.  A scene holds all Nodes, and its root node is our BorderPane.
                    scene = new Scene(root);
                    fxPanel.setScene(scene);
                });
                JFrame browserFrame = new JFrame();
                browserFrame.add(fxPanel);
                browserFrame.setTitle("Ionutz Asaftei Browser");
                browserFrame.setSize(1280, 720);
                browserFrame.setVisible(true);
            }
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32635918" questionTitle="JavaFX Opening one dialog from another">
<Answer><![CDATA[public Dialog<Pair<String, String>> getDialog(Window owner, String title, boolean addButton) {
        Dialog<Pair<String, String>> dialog = new Dialog<>();
        dialog.setTitle(title);
        dialog.initOwner(owner);
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        if (addButton) {
            Button button = new Button("Show Dialog");
            dialog.getDialogPane().setContent(button);
            button.setOnAction(event -> {
                Alert alert = new Alert(AlertType.CONFIRMATION, "Are you sure?", ButtonType.YES, ButtonType.NO);
                alert.initOwner(owner);
                if (alert.showAndWait().get() == ButtonType.YES) {
                    // dialog.close(); // supressed this and placed at the bottom
                    Dialog<Pair<String, String>> dialog2 = getDialog(owner, "Dialog 2", false);
                    TextField textField = new TextField();
                    dialog2.getDialogPane().setContent(textField);
                    dialog2.getDialogPane().getScene().getWindow().setOnCloseRequest(closeEvent -> {
                        closeEvent.consume();
                        if (textField.getText().trim().isEmpty()) {
                            Alert alert2 = new Alert(AlertType.ERROR, "Please enter a value", ButtonType.OK);
                            alert2.initOwner(dialog2.getDialogPane().getScene().getWindow());
                            alert2.showAndWait();
                        }
                    });
                    dialog2.showAndWait();
                    dialog.close(); // new location
                }
            });
        }

        return dialog;
    }]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Dialog;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.Window;

public class DialogTest extends Application {

    Region veil;
    ProgressIndicator indicator;

    IntField startingNumber = new IntField(0, 999999, 0);
    IntField endingNumber = new IntField(startingNumber.getValue(), 999999, startingNumber.getValue() + 1);
    ButtonType printButtonType = new ButtonType("Print", ButtonData.OK_DONE);
    Stage stage;

    @Override
    public void start(Stage primaryStage) {
        stage = primaryStage;
        Button button = new Button("Print Checks");

        VBox box = new VBox(10, button);
        box.setAlignment(Pos.CENTER);

        veil = new Region();
        veil.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");
        veil.setVisible(false);

        indicator = new ProgressIndicator();
        indicator.setMaxHeight(60);
        indicator.setMinWidth(60);
        indicator.setVisible(false);

        StackPane root = new StackPane(box, veil, indicator);

        root.setAlignment(Pos.CENTER);

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();

        button.setOnAction((event) -> {
            Dialog<ButtonType> dialog
                    = getCheckPrintDialog(primaryStage, "Enter starting check number");
            dialog.showAndWait()
                    .filter(result -> result == printButtonType)
                    .ifPresent(result -> {
                        // this is for this example only, normaly you already have this value
                        endingNumber.setValue(startingNumber.getValue() + 1);
                        printChecks(startingNumber.getValue(), endingNumber.getValue());
                    });
        });
    }

    public static void main(String[] args) {
        launch(args);
    }

    public <R extends ButtonType> Dialog getCheckPrintDialog(Window owner, String title) {
        Dialog<R> dialog = new Dialog<>();
        dialog.initOwner(owner);
        dialog.setTitle(title);
        dialog.getDialogPane().getButtonTypes().addAll(printButtonType, ButtonType.CANCEL);

        Button btOk = (Button) dialog.getDialogPane().lookupButton(printButtonType);
        btOk.addEventFilter(ActionEvent.ACTION, event -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Print Checks? Are you sure?", ButtonType.YES, ButtonType.NO);
            alert.showAndWait()
                    .filter(result -> result == ButtonType.NO)
                    .ifPresent(result -> event.consume());
        });

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);

        Text from = new Text("Starting Number:");
        grid.add(from, 0, 0);

        grid.add(startingNumber, 1, 0);

        dialog.getDialogPane().setContent(grid);
        return dialog;
    }

    private void printChecks(int from, int to) {

        Task<Void> task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                Thread.sleep(5000);
                return null;
            }
        };

        task.setOnSucceeded((event) -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Has the last check, the number: " + endingNumber.getValue() + "?", ButtonType.YES, ButtonType.NO);
            alert.initOwner(stage);
            Button btnNo = (Button) alert.getDialogPane().lookupButton(ButtonType.NO);
            btnNo.addEventFilter(ActionEvent.ACTION, e -> {
                Dialog<ButtonType> newEndNum = new Dialog<>();
                newEndNum.setTitle("Enter the ending check number");
                newEndNum.initOwner(stage);
                newEndNum.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);
                GridPane grid = new GridPane();
                grid.setHgap(10);
                grid.setVgap(10);

                Text toUser = new Text("Ending Number:");
                grid.add(toUser, 0, 0);

                grid.add(endingNumber, 1, 0);

                newEndNum.getDialogPane().setContent(grid);
                newEndNum.showAndWait().filter(result -> result == ButtonType.CANCEL)
                        .ifPresent(result -> e.consume());
            });
            alert.showAndWait();
        });
        veil.visibleProperty().bind(task.runningProperty());
        indicator.visibleProperty().bind(task.runningProperty());
        new Thread(task).start();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32582740" questionTitle="Web Cam access using JavaFX">
<Answer><![CDATA[import java.io.ByteArrayInputStream;
import java.lang.reflect.Field;
import java.net.URISyntaxException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.geometry.Rectangle2D;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;

public class Camera extends Application {

    private static final int SCENE_W = 640;
    private static final int SCENE_H = 480;

    CascadeClassifier faceDetector;
    VideoCapture videoCapture;

    Canvas canvas;
    GraphicsContext g2d;
    Stage stage;
    AnimationTimer timer;

    @Override
    public void start(Stage stage) {

        this.stage = stage;

        initOpenCv();

        canvas = new Canvas(SCENE_W, SCENE_H);
        g2d = canvas.getGraphicsContext2D();
        g2d.setStroke(Color.GREEN);

        Group group = new Group(canvas);

        Scene scene = new Scene(group, SCENE_W, SCENE_H);

        stage.setScene(scene);
        stage.setResizable(false);
        stage.show();

        timer = new AnimationTimer() {

            Mat mat = new Mat();

            @Override
            public void handle(long now) {

                videoCapture.read(mat);

                List<Rectangle2D> rectList = detectFaces(mat);

                Image image = mat2Image(mat);

                g2d.drawImage(image, 0, 0);

                for (Rectangle2D rect : rectList) {
                    g2d.strokeRect(rect.getMinX(), rect.getMinY(), rect.getWidth(), rect.getHeight());
                }

            }
        };
        timer.start();

    }

    public List<Rectangle2D> detectFaces(Mat mat) {

        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale( mat, faceDetections);

        System.out.println(String.format("Detected %s faces", faceDetections.toArray().length));

        List<Rectangle2D> rectList = new ArrayList<>();
        for (Rect rect : faceDetections.toArray()) {

            int x = rect.x;
            int y = rect.y;
            int w = rect.width;
            int h = rect.height;

            rectList.add(new Rectangle2D(x, y, w, h));
        }

        return rectList;
    }

    private void initOpenCv() {

        setLibraryPath();

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        videoCapture = new VideoCapture();
        videoCapture.open(0);

        System.out.println("Camera open: " + videoCapture.isOpened());

        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            public void handle(WindowEvent we) {

                timer.stop();
                videoCapture.release();

                System.out.println("Camera released");

            }
        });

        faceDetector = new CascadeClassifier(getOpenCvResource(getClass(), "/opencv/data/lbpcascades/lbpcascade_frontalface.xml"));

    }

    public static Image mat2Image(Mat mat) {
        MatOfByte buffer = new MatOfByte();
        Imgcodecs.imencode(".png", mat, buffer);
        return new Image(new ByteArrayInputStream(buffer.toArray()));
    }

    private static void setLibraryPath() {

        try {

            System.setProperty("java.library.path", "lib/x64");

            Field fieldSysPath = ClassLoader.class.getDeclaredField("sys_paths");
            fieldSysPath.setAccessible(true);
            fieldSysPath.set(null, null);

        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }

    }

    public static String getOpenCvResource(Class<?> clazz, String path) {
        try {
            return Paths.get( clazz.getResource(path).toURI()).toString();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import com.sleepingdumpling.jvideoinput.Device;
import com.sleepingdumpling.jvideoinput.VideoFrame;
import com.sleepingdumpling.jvideoinput.VideoInput;

Device choosenDevice;
for (Device device : VideoInput.getVideoDevices()) {
// select your choosenDevice webcam  here
if (isMyWebcam(device)) {
choosenDevice = device;
break;

}
}
// eg. VideoInput(640,480,25,choosenDevice );
VideoInput videoInput = new VideoInput(frameWidth, frameHeigth,
                                frameRate, choosenDevice );
VideoFrame vf = null;
while (grabFrames) {
            vf = videoInput.getNextFrame(vf);
            if (vf != null) {
                frameReceived(vf.getRawData());
                // or vf.getBufferedImage();
            }

}
videoInput.stopSession();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32561396" questionTitle="Display Combobox values from numbers">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.StringConverter;

public class Main extends Application {

    @Override
    public void start(Stage stage) throws Exception
    {
        KeyValuePair keyValuePair1 = new KeyValuePair("Active", 0);
        KeyValuePair keyValuePair2 = new KeyValuePair("Blocked", 1);


        ObservableList<KeyValuePair> options = FXCollections.observableArrayList();
        options.addAll(keyValuePair1, keyValuePair2);

        ComboBox<KeyValuePair> comboBox = new ComboBox<>(options);

        // show the correct text
        comboBox.setCellFactory((ListView<KeyValuePair> param) -> {
            final ListCell<KeyValuePair> cell = new ListCell<KeyValuePair>(){

                @Override
                protected void updateItem(KeyValuePair t, boolean bln) {
                    super.updateItem(t, bln);

                    if(t != null){
                        setText(String.valueOf(t.getKey()));
                    }else{
                        setText(null);
                    }
                }

            };
            return cell;
        });


        comboBox.setConverter(new StringConverter<KeyValuePair>() {
            @Override
            public String toString(KeyValuePair object) {
                return object.getKey();
            }

            @Override
            public KeyValuePair fromString(String string) {
                return null; // No conversion fromString needed.
            }
        });


        // print the value
        comboBox.valueProperty().addListener((ov, oldVal, newVal) -> {
            System.out.println(newVal.getKey() + " - " + newVal.getValue());
        });

        BorderPane bp = new BorderPane(comboBox);
        bp.setPrefSize(800, 800);
        Scene scene = new Scene(bp);
            stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    class KeyValuePair {
        private final String key;
        private final int value;

        public KeyValuePair(String key, int value) {
            this.key = key;
            this.value = value;
        }

        public String getKey() {
            return key;
        }

        public int getValue() {
            return value;
        }
    }
}]]></Answer>
<Answer><![CDATA[public class ComboboxTest extends Application {

    private BooleanProperty state = new SimpleBooleanProperty(false);
    private Button button;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {

        ObservableList<String> options = FXCollections.observableArrayList(
                "Active",
                "Blocked"
        );
        ComboBox comboBox = new ComboBox(options);
        button = new Button("false");
        button.setOnAction(e -> setSate());
        button.textProperty().bind(state.asString());
        BorderPane bp = new BorderPane(comboBox);
        StackPane stackpane = new StackPane(button);
        stackpane.setAlignment(Pos.CENTER);
        bp.setTop(stackpane);
        bp.setPrefSize(800, 800);
        Scene scene = new Scene(bp);
        stage.setScene(scene);
        stage.show();
        comboBox.valueProperty().bind(new When(state).then("Active").otherwise("Blocked"));
    }

    public void setSate() {
        if (state.get()) {
            state.set(false);

        } else {
            state.set(true);
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32504196" questionTitle="javafx: How to monitor state change of a variable that has more than 2 states?">
<Answer><![CDATA[public class MyEntity {

    private final DoubleProperty money = new SimpleDoubleProperty();
    public DoubleProperty moneyProperty() {
        return money ;
    }
    public final double getMoney() {
        return moneyProperty().get();
    }
    public final void setMoney(double money) {
        moneyProperty().set(money);
    }

    private final ReadOnlyIntegerWrapper moneyState = new ReadOnlyIntegerWrapper();

    public ReadOnlyIntegerProperty moneyStateProperty() {
        return moneyState.getReadOnlyProperty();
    }
    public int getMoneyState() {
        return moneyStateProperty().get();
    }

    private IntegerBinding moneyStateBinding ;

    public MyEntity(double money) {
        setMoney(money) ;
        moneyStateBinding = Bindings.createIntegerBinding(() -> {
            if (getMoney() > 0) {
                return 1 ;
            } else if (getMoney() == 0) {
                return 0 ;
            } else {
                return -1 ;
            }
        }, moneyProperty());

        moneyState.bind(moneyStateBinding);
    }
}]]></Answer>
<Answer><![CDATA[// Money class
import java.util.Observable;

public class MoneyClass extends Observable{

    private double money = 0;
    private int state = 0;

    public static final int POSITIV = 1;
    public static final int ZERO = 0;
    public static final int NEGATIV = -1;

    public int getMoneyState(){
           if (money > 0){
              return MoneyClass.POSITIV; 
           } else if(money == 0){
              return MoneyClass.ZERO;
           } else{
              return MoneyClass.NEGATIV;
           }
    }

    public void setMoney(int money) {
        this.money = money;
        setChanged();
        notifyObservers("Money");
        setMoneyState();
    }

    public double getMoney() {
        return money;
    }

    public int getState() {
        return state;
    }

    private void setMoneyState() {
        if (state != getMoneyState()) {
            state = getMoneyState();
            setChanged();
            notifyObservers("State");
        }
    }

    public static void main(String[] args) {

    }
}
//Observer
import java.util.Observable;
import java.util.Observer;

public class MoneyObserver implements Observer{

    public void addObserving(MoneyClass money) {
        money.addObserver(this);
    }

    @Override
    public void update(Observable o, Object arg) {
        if(arg instanceof String) {
            String type = (String) arg;
            if(type.equals("Money")) {
                System.out.println("Money got changed to " + ((MoneyClass)o).getMoney());
            } else if(type.equals("State")) {
                System.out.println("State got changed to " + ((MoneyClass)o).getState());
            }
        }
    }

    public static void main(String[] args) {
        MoneyObserver o = new MoneyObserver();
        MoneyClass c = new MoneyClass();
        o.addObserving(c);
        c.setMoney(20);
        c.setMoney(50);
        c.setMoney(-30);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32478638" questionTitle="Change font of text in TableView after initialize">
<Answer><![CDATA[import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class ConfigurableFontTable extends Application {

    private StringProperty fontFamily = new SimpleStringProperty(Font.getDefault().getFamily());
    private ObjectProperty<FontWeight> fontWeight = new SimpleObjectProperty<>(FontWeight.NORMAL);
    private BooleanProperty italic = new SimpleBooleanProperty();
    private IntegerProperty fontSize = new SimpleIntegerProperty((int)Font.getDefault().getSize());

    private ObjectProperty<Color> fontFill = new SimpleObjectProperty<>(Color.BLACK);

    private StringProperty style = new SimpleStringProperty();

    @Override
    public void start(Stage primaryStage) {
        style.bind(Bindings.createStringBinding(() -> String.format(
                "-fx-font-family: %s;\n"
                + "-fx-font-weight: %d;\n"
                + "-fx-font-style: %s;\n"
                + "-fx-font-size: %d;\n"
                + "-fx-text-background-color: rgba(%d, %d, %d, %f);\n",
                fontFamily.get(),
                fontWeight.get().getWeight(),
                italic.get()?"italic":"normal",
                fontSize.get(),
                (int)(255 * fontFill.get().getRed()),
                (int)(255 * fontFill.get().getGreen()),
                (int)(255 * fontFill.get().getBlue()),
                fontFill.get().getOpacity()
            ),
            fontFamily,
            fontWeight,
            italic,
            fontSize,
            fontFill
        ));

        TableView<Person> table = new TableView<>();
        table.setRowFactory(tv -> {
            TableRow<Person> row = new TableRow<>();
            row.styleProperty().bind(style);
            return row ;
        });

        table.getColumns().add(column("First Name", Person::firstNameProperty));
        table.getColumns().add(column("Last Name", Person::lastNameProperty));
        table.getColumns().add(column("Email", Person::emailProperty));

        table.getItems().addAll(
                new Person("Jacob", "Smith", "jacob.smith@example.com"),
                new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
                new Person("Ethan", "Williams", "ethan.williams@example.com"),
                new Person("Emma", "Jones", "emma.jones@example.com"),
                new Person("Michael", "Brown", "michael.brown@example.com")
        );

        Button changeStyleButton = new Button("Change style...");
        changeStyleButton.setOnAction(e -> showChangeStyleDialog(primaryStage));

        BorderPane root = new BorderPane(table, null, null, changeStyleButton, null);
        BorderPane.setAlignment(changeStyleButton, Pos.CENTER);
        BorderPane.setMargin(changeStyleButton, new Insets(10));

        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    private void showChangeStyleDialog(Stage owner) {
        GridPane root = new GridPane();
        root.setHgap(5);
        root.setVgap(5);
        root.setPadding(new Insets(10));

        ColumnConstraints leftCol = new ColumnConstraints();
        leftCol.setHalignment(HPos.RIGHT);
        leftCol.setHgrow(Priority.NEVER);

        ColumnConstraints rightCol = new ColumnConstraints();

        root.getColumnConstraints().addAll(leftCol, rightCol);

        ComboBox<String> fontFamilyChoice = new ComboBox<>();
        fontFamilyChoice.getItems().addAll(Font.getFamilies());
        fontFamilyChoice.setValue(fontFamily.get());

        ComboBox<FontWeight> fontWeightChoice = new ComboBox<>();
        fontWeightChoice.getItems().addAll(FontWeight.values());
        fontWeightChoice.setValue(fontWeight.get());

        CheckBox italicCheckBox = new CheckBox("Italic");
        italicCheckBox.setSelected(italic.get());

        ComboBox<Integer> fontSizeChoice = new ComboBox<>();
        fontSizeChoice.getItems().addAll(4, 6, 8, 10, 12, 16, 20, 24, 32, 40, 48);
        fontSizeChoice.setValue(fontSize.get());

        ColorPicker colorPicker = new ColorPicker();
        colorPicker.setValue(fontFill.get());

        root.addRow(0,  new Label("Font:"), fontFamilyChoice);
        root.addRow(1, new Label("Weight:"), fontWeightChoice);
        root.addRow(2, new Label("Size:"), fontSizeChoice);
        root.add(italicCheckBox, 1, 3);
        root.addRow(4, new Label("Text Color:"), colorPicker);

        Stage stage = new Stage();

        Button okButton = new Button("OK");
        okButton.setOnAction(e -> {
            fontFamily.set(fontFamilyChoice.getValue());
            fontWeight.set(fontWeightChoice.getValue());
            fontSize.set(fontSizeChoice.getValue());
            italic.set(italicCheckBox.isSelected());
            fontFill.set(colorPicker.getValue());
            stage.hide();
        });

        Button cancelButton = new Button("Cancel");
        cancelButton.setOnAction(e -> stage.hide());

        HBox buttons = new HBox(5, okButton, cancelButton);
        buttons.setAlignment(Pos.CENTER);
        root.add(buttons, 0, 5, 2, 1);

        stage.initOwner(owner);
        stage.setScene(new Scene(root));
        stage.show();
    }

    private static <S,T> TableColumn<S,T> column(String title, Function<S, ObservableValue<T>> property) {
        TableColumn<S,T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> property.apply(cellData.getValue()));
        return col ;
    }

    public class Person {
        private final StringProperty firstName = new SimpleStringProperty(this,"firstName");
        private final StringProperty lastName = new SimpleStringProperty(this, "lastName");
        private final StringProperty email = new SimpleStringProperty(this, "email");

        public Person(String firstName, String lastName, String email) {
            this.firstName.set(firstName);
            this.lastName.set(lastName);
            this.email.set(email);
        }

        public final StringProperty firstNameProperty() {
            return this.firstName;
        }

        public final String getFirstName() {
            return this.firstNameProperty().get();
        }

        public final void setFirstName(final String firstName) {
            this.firstNameProperty().set(firstName);
        }

        public final StringProperty lastNameProperty() {
            return this.lastName;
        }

        public final String getLastName() {
            return this.lastNameProperty().get();
        }

        public final void setLastName(final String lastName) {
            this.lastNameProperty().set(lastName);
        }

        public final StringProperty emailProperty() {
            return this.email;
        }

        public final String getEmail() {
            return this.emailProperty().get();
        }

        public final void setEmail(final String email) {
            this.emailProperty().set(email);
        }

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Set;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TableFontStyle extends Application {

  @Override
  public void start(Stage primaryStage) {
    ObservableList<Person> persons
            = FXCollections.observableArrayList(
                    new Person("Sir", "Tobey"),
                    new Person("Admiral", "von Schneider"),
                    new Person("Mr.", "Pommeroy"),
                    new Person("Mr.", "Winterbottom"));

    TableView<Person> tableView = new TableView<>(persons);

    TableColumn<Person, String> firstNameCol = new TableColumn<>("First Name");
    firstNameCol.setCellValueFactory(new PropertyValueFactory("firstName"));
    TableColumn<Person, String> lastNameCol = new TableColumn<>("Last Name");
    lastNameCol.setCellValueFactory(new PropertyValueFactory("lastName"));

    tableView.getColumns().setAll(firstNameCol, lastNameCol);
    tableView.getSelectionModel().clearAndSelect(0);

    Button btn = new Button("Change Font Style");
    btn.setOnAction((e) -> {
      Set<Node> cells = tableView.lookupAll(".table-cell");
      cells.forEach((c) -> {
        c.setStyle("-fx-font-weight:lighter;-fx-font-style:italic;");
      });
    });

    VBox root = new VBox();
    root.getChildren().addAll(tableView, btn);

    Scene scene = new Scene(root, 300, 250);
    primaryStage.setTitle("Font Table");
    primaryStage.setScene(scene);
    primaryStage.show();
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    launch(args);
  }

  public class Person {

    private final StringProperty firstName
            = new SimpleStringProperty(this, "firstName");

    public void setFirstName(String value) {
      firstNameProperty().set(value);
    }

    public String getFirstName() {
      return firstNameProperty().get();
    }

    public StringProperty firstNameProperty() {
      return firstName;
    }

    private final StringProperty lastName
            = new SimpleStringProperty(this, "lastName");

    ;

    public void setLastName(String value) {
      lastNameProperty().set(value);
    }

    public String getLastName() {
      return lastNameProperty().get();
    }

    public StringProperty lastNameProperty() {
      return lastName;
    }

    public Person(String firstName, String lastName) {
      this.firstName.set(firstName);
      this.lastName.set(lastName);
    }
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32471597" questionTitle="Exception occured when mail send with spring">
<Answer><![CDATA[import javax.mail.*;
import javax.mail.internet.*;
import java.util.*;

public class MailSender
{
 final String senderEmailID = "typesendermailid@gmail.com";
 final String senderPassword = "typesenderpassword";
 final String emailSMTPserver = "smtp.gmail.com";
 final String emailServerPort = "465";
 String receiverEmailID = null;
 static String emailSubject = "Test Mail";
 static String emailBody = ":)";
 public MailSender(String receiverEmailID, String emailSubject, String emailBody)
 {
this.receiverEmailID=receiverEmailID;
this.emailSubject=emailSubject;
 this.emailBody=emailBody;
 Properties props = new Properties();
 props.put("mail.smtp.user",senderEmailID);
 props.put("mail.smtp.host", emailSMTPserver);
 props.put("mail.smtp.port", emailServerPort);
 props.put("mail.smtp.starttls.enable", "true");
 props.put("mail.smtp.auth", "true");
 props.put("mail.smtp.socketFactory.port", emailServerPort);
 props.put("mail.smtp.socketFactory.class",
 "javax.net.ssl.SSLSocketFactory");
 props.put("mail.smtp.socketFactory.fallback", "false");
 SecurityManager security = System.getSecurityManager();
 try
 {
 Authenticator auth = new SMTPAuthenticator();
 Session session = Session.getInstance(props, auth);
 MimeMessage msg = new MimeMessage(session);
 msg.setText(emailBody);
 msg.setSubject(emailSubject);
 msg.setFrom(new InternetAddress(senderEmailID));
 msg.addRecipient(Message.RecipientType.TO,
 new InternetAddress(receiverEmailID));
 Transport.send(msg);
 System.out.println("Message send Successfully:)");
 }
 catch (Exception mex)
 {
 mex.printStackTrace();
 }
 }
 public class SMTPAuthenticator extends javax.mail.Authenticator
 {
 public PasswordAuthentication getPasswordAuthentication()
 {
 return new PasswordAuthentication(senderEmailID, senderPassword);
 }
 }
 public static void main(String[] args)
 {     
 MailSender mailSender=new
 MailSender("typereceivermailid@gmail.com",emailSubject,emailBody);
 }
 }]]></Answer>
<Answer><![CDATA[import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class JavaEmail {

    Properties emailProperties;
    Session mailSession;
    MimeMessage emailMessage;

    public static void main(String args[]) throws AddressException,
            MessagingException {

        JavaEmail javaEmail = new JavaEmail();

        javaEmail.setMailServerProperties();
        javaEmail.createEmailMessage();
        javaEmail.sendEmail();
    }

    public void setMailServerProperties() {

        String emailPort = "587";//gmail's smtp port

        emailProperties = System.getProperties();
        emailProperties.put("mail.smtp.port", emailPort);
        emailProperties.put("mail.smtp.auth", "true");
        emailProperties.put("mail.smtp.starttls.enable", "true");

    }

    public void createEmailMessage() throws AddressException,
            MessagingException {
        String[] toEmails = { "some@emailid.com" };
        String emailSubject = "Java Email";
        String emailBody = "This is an email sent by JavaMail api.";

        mailSession = Session.getDefaultInstance(emailProperties, null);
        emailMessage = new MimeMessage(mailSession);

        for (int i = 0; i < toEmails.length; i++) {
            emailMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(toEmails[i]));
        }

        emailMessage.setSubject(emailSubject);
        emailMessage.setContent(emailBody, "text/html");//for a html email
        //emailMessage.setText(emailBody);// for a text email

    }

    public void sendEmail() throws AddressException, MessagingException {

        String emailHost = "smtp.gmail.com";
        String fromUser = "your emailid here";//just the id alone without @gmail.com
        String fromUserEmailPassword = "your email password here";

        Transport transport = mailSession.getTransport("smtp");

        transport.connect(emailHost, fromUser, fromUserEmailPassword);
        transport.sendMessage(emailMessage, emailMessage.getAllRecipients());
        transport.close();
        System.out.println("Email sent successfully.");
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32459797" questionTitle="dialog internationalization in javafx">
<Answer><![CDATA[/**
* https://bitbucket.org/controlsfx/controlsfx/issues/769/encoding-problem-all-german-umlauts-are
* 
* @param wizardPane
*/
protected void fixButtons() {
  ButtonType buttonTypes[] = { ButtonType.NEXT, ButtonType.PREVIOUS,
    ButtonType.CANCEL, ButtonType.FINISH };
  for (ButtonType buttonType : buttonTypes) {
    Button button = findButton(buttonType);
    if (button != null) {
      button.setText(buttonType.getText());
    }
  }
}

/**
 * get the Button for the given buttonType
 * @return the button
 */
public Button findButton(ButtonType buttonType) {
  for (Node node : getChildren()) {
    if (node instanceof ButtonBar) {
      ButtonBar buttonBar = (ButtonBar) node;
      ObservableList<Node> buttons = buttonBar.getButtons();
      for (Node buttonNode : buttons) {
        Button button = (Button) buttonNode;
        @SuppressWarnings("unchecked")
        ObjectProperty<ButtonData> prop = (ObjectProperty<ButtonData>) button
          .getProperties().get("javafx.scene.control.ButtonBar.ButtonData");
        ButtonData buttonData = prop.getValue();
        if (buttonData.equals(buttonType.getButtonData())) {
          return button;
        }
      }
    }
  }
  return null;
}]]></Answer>
<Answer><![CDATA[import java.util.Optional;

import javafx.application.Application;

import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ChoiceDialog;
import javafx.scene.control.Label;
import javafx.stage.Stage;

public class MCVE extends Application {

    @Override
    public void start(Stage stage) {

         ChoiceDialog<String> dialog = new ChoiceDialog<>(
                 "Dummy Printer");
         dialog.setTitle("Choice Dialog");
         dialog.setHeaderText(null);
         dialog.setContentText("Choose the printer you want to use:");

         // Remove the default buttons and then add your custom ones.
         dialog.getDialogPane().getButtonTypes().clear();
         dialog.getDialogPane().getButtonTypes().add(
                new ButtonType("OK", ButtonData.OK_DONE));
         dialog.getDialogPane().getButtonTypes().add(
                new ButtonType("Cancel", ButtonData.CANCEL_CLOSE));

         Optional<String> result = dialog.showAndWait();
         if (result.isPresent()) {
             String opt = result.get();
             System.out.println("Your choice: " + opt);
         }
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32389447" questionTitle="JavaFX: TableView row selection">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class SSCCE extends Application {

    @Override
    public void start(Stage stage) {

        VBox root = new VBox();

        TableView<Student> studentsTable = new TableView<Student>();

        HBox studentBox = new HBox();
        Label studentHeader = new Label("Student: ");
        Label studentInfo = new Label("");
        studentBox.getChildren().addAll(studentHeader, studentInfo);

        root.getChildren().addAll(studentsTable, studentBox);

        // Prepare the columns
        TableColumn<Student, String> firstNameCol = new TableColumn<Student, String>(
                "First name");
        firstNameCol.setCellValueFactory(cellData -> cellData.getValue()
                .firstNameProperty());

        TableColumn<Student, String> lastNameCol = new TableColumn<Student, String>(
                "Last name");
        lastNameCol.setCellValueFactory(cellData -> cellData.getValue()
                .lastNameProperty());

        studentsTable.getSelectionModel().selectedItemProperty()
                .addListener(new ChangeListener<Student>() {

                    // Here's the key part. See how I specify that the
                    // parameters are of type student. Now you can use the
                    // instance methods from Student.
                    @Override
                    public void changed(
                            ObservableValue<? extends Student> observable,
                            Student oldValue, Student newValue ) {

                        studentInfo.setText(newValue.getFirstName() + " "
                                + newValue.getLastName());
                        // If you want to get the value of a selected student cell at
                        // anytime, even if it hasn't changed. Just do e.g.
                        // studentsTable.getSelectionModel().getSelectedItem().getFirstName()
                    }
                });

        studentsTable.getColumns().setAll(firstNameCol, lastNameCol);

        // Some mock Student objects
        Student student1 = new Student("Eric", "Smith");
        Student student2 = new Student("Brad", "Jones");
        Student student3 = new Student("Logan", "Thorpe");

        // Fill the table with students.
        studentsTable.getItems().addAll(student1, student2, student3);

        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }

    // The student class. In this case an inner class to simplify the example. But generally you should never use inner classes.
    class Student {

        private StringProperty firstName;
        private StringProperty lastName;

        public Student(String firstName, String lastName) {
            this.firstName = new SimpleStringProperty(firstName);
            this.lastName = new SimpleStringProperty(lastName);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String firstName) {
            this.firstName.set(firstName);
        }

        public StringProperty firstNameProperty() {
            return firstName;
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String lastName) {
            this.lastName.set(lastName);
        }

        public StringProperty lastNameProperty() {
            return lastName;
        }
    }

}]]></Answer>
<Answer><![CDATA[...//rest of code

@Override
public void initialize(URL location, ResourceBundle resources) {

private TableView<Student> tbl_elev=new TableView<Student>();

...

        tbl_elev.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Student>() {
              // Here's the key part. See how I specify that the
              // parameters are of type student. Now you can use the
              // instance methods from Student.
              @Override
              public void changed(ObservableValue<? extends Student> observable,Student oldValue, Student newValue){
                  if(newValue!=null){
                        System.out.println(newValue.getName() + " "+ newValue.getPrename()+" "+newValue.getNaiss());
                  }
              //you can add any other value from Student class via getter(getAdr,getMail,...)

              }
          });
}

... //rest of code]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32346929" questionTitle="java stream performace for finding maximum element form a list">
<Answer><![CDATA[static List<Integer> a = new ArrayList<Integer>();

public static void main(String[] args)
{

    Random randomGenerator = new Random();
    for (int i = 0; i < 400000; i++) {
        a.add(randomGenerator.nextInt(400000));
    }

    long start = System.currentTimeMillis();
    //Integer max = checkLoop();
    Integer max = checkStream();
    long diff = System.currentTimeMillis() - start;
    System.out.println("max " + max + " diff " + diff);
}

static Integer checkStream()
{
    Optional<Integer> max = a.stream().max(Integer::compare);
    return max.get();
}

static Integer checkLoop()
{
    int e = a.size();
    Integer max = Integer.MIN_VALUE;
    for (int i = 0; i < e; i++) {
        if (Integer.compare(a.get(i), max) > 0) max = a.get(i); 
    }
    return max;
}]]></Answer>
<Answer><![CDATA[import java.util.concurrent.TimeUnit;
import java.util.*;
import java.util.stream.*;

import org.openjdk.jmh.infra.Blackhole;
import org.openjdk.jmh.annotations.*;

@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)
@Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.MICROSECONDS)
@Fork(3)
@State(Scope.Benchmark)
public class StreamTest {
    // Stream API is very nice to get random data for tests!
    List<Integer> a = new Random().ints(40000, 0, 40000).boxed()
                                  .collect(Collectors.toList());

    @Benchmark
    public Integer streamList() {
        return a.stream().max(Integer::compare).orElse(Integer.MIN_VALUE);
    }

    @Benchmark
    public Integer simpleList() {
        int e = a.size();
        Integer m = Integer.MIN_VALUE;
        for(int i=0; i < e; i++) 
            if(a.get(i) > m) m = a.get(i);
        return m;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32337555" questionTitle="Stream.of VS Arrays.stream to get an enum from a value">
<Answer><![CDATA[public enum Foo {

  BAR_1("Bar 1"),
  BAR_2("Bar 2");

  private static class Holder {
    static Map<String, Foo> map = new HashMap<String, Foo>()
       {{
         for(Foo f:Foo.values())
         {
            put(f.getFriendlyValue(),f);
         }
       }};
  }

  private String friendlyValue;

  Foo(String friendlyValue){
    this.friendlyValue = friendlyValue;
  }

  public String getFriendlyValue() {
    return friendlyValue;
  }

  public static Foo fromFriendlyValue(String friendlyValue){
    return Holder.map.get(friendlyValue);
  }
}]]></Answer>
<Answer><![CDATA[public enum Foo {

    BAR_1("Bar 1"),
    BAR_2("Bar 2");

    private static class Holder {
        static Map<String, Foo> map = new HashMap<String, Foo>();
    }

    private String friendlyValue;

    Foo(String friendlyValue){
        this.friendlyValue = friendlyValue;
        Holder.map.put(friendlyValue, this);
    }

    public String getFriendlyValue() {
        return friendlyValue;
    }

    public static Foo fromFriendlyValue(String friendlyValue){
        return Holder.map.get(friendlyValue);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32323081" questionTitle="Why Doesn't Java 8 Type Inference Consider Exceptions Thrown by Lambdas in Overload Selection?">
<Answer><![CDATA[public static <T> void foo(Supplier<T> supplier) {

}

public static String getAString(){
    return "Hello";
}

public static String getAnotherString() throws Exception{
    return "World";
}

public static String getAnotherStringUnchecked(){
    try{
        return getAnotherString();
    } catch(Exception e){
        throw new RuntimeException("Error getting another string",e);
    }
}   

public static void main(String[] args) throws Exception{
    foo(()->getAString());
    foo(()->getAnotherStringUnchecked());
}]]></Answer>
<Answer><![CDATA[interface Result<T, X extends Throwable>
{
    T get() throws X;
}

// error type embedded in return type, not in `throws` clause

static Result<String,        Exception> m1(){ return ()->{ throw new Exception();};  }
static Result<String, RuntimeException> m2(){ return ()->{ return "str";         };  }

  // better to have some factory method, e.g. return Result.success("str");

public static void main(String[] args)
{
    foo(()->m1());  // foo#2 is not applicable
    foo(()->m2());  // both applicable; foo#2 is more specific
}



interface S1<T> { T get(); }  

static <T> void foo(S1<Result<T, ? extends        Exception>> s)
{
    System.out.println("s1");}
}


interface S2<T> { T get(); }  // can't have two foo(S1) due to erasure

static <T> void foo(S2<Result<T, ? extends RuntimeException>> s)
{
    System.out.println("s2");
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32311558" questionTitle="When can I access a FXML property?">
<Answer><![CDATA[public class Simple extends AnchorPane implements Initializable{

    private static final int DEFAULT_VALUE = -10 ;

    public Simple(@NamedArg("value") int value){
        //Loads the FXML sheet
        FXMLLoader fxmlLoader = new FXMLLoader( getClass().getResource( "Simple.fxml") );
        fxmlLoader.setRoot(this); 
        fxmlLoader.setController(this);

        // set value, avoiding property creation if default...
        if (value != DEFAULT_VALUE) {
            setValue(value);
        }

        try {
            fxmlLoader.load();
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }

        System.out.println( "Constructor: " + getValue() );
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        System.out.println( "Init: " + getValue() );
    }


    @FXML protected void printValue(ActionEvent ae){
        System.out.println( "Button: " + getValue() );
    }

    //Editor field for the  value (helps scene builder to render it)
    IntegerProperty valueProperty;
    public final void setValue(Integer value){
        valueProperty().setValue(value);
    }
    public final Integer getValue(){
        return valueProperty == null ? DEFAULT_VALUE : valueProperty.get();
    }
    public final IntegerProperty valueProperty() {
        if( valueProperty == null )
            valueProperty = new SimpleIntegerProperty(DEFAULT_VALUE);
        return valueProperty;
    }
}]]></Answer>
<Answer><![CDATA[public Simple(@NamedArg("value") Integer value){
    //Loads the FXML sheet
    FXMLLoader fxmlLoader = new FXMLLoader( getClass().getResource( "Simple.fxml") );
    fxmlLoader.setRoot(this); 
    fxmlLoader.setController(this);

    if(value != null )
        setValue(value);
    else
        setValue(DEFAULT_VALUE);

    try {
        fxmlLoader.load();
    } catch (IOException exception) {
        throw new RuntimeException(exception);
    }



    System.out.println( "Constructor: " + getValue() );
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32290278" questionTitle="Picking elements of a list until condition is met with Java 8 Lambdas">
<Answer><![CDATA[public static <T> Spliterator<T> takeWhile(final Spliterator<T> splitr, final Predicate<? super T> predicate, final boolean keepBreak) {
    return new Spliterators.AbstractSpliterator<T>(splitr.estimateSize(), 0) {
        boolean stillGoing = true;

        @Override
        public boolean tryAdvance(final Consumer<? super T> consumer) {
            if (stillGoing) {
                final boolean hadNext = splitr.tryAdvance(elem -> {
                    if (predicate.test(elem)) {
                        consumer.accept(elem);
                    } else {
                        if (keepBreak) {
                            consumer.accept(elem);
                        }
                        stillGoing = false;
                    }
                });
                return hadNext && (stillGoing || keepBreak);
            }
            return false;
        }
    };
}

public static <T> Stream<T> takeWhile(final Stream<T> stream, final Predicate<? super T> predicate, final boolean keepBreak) {
    return StreamSupport.stream(takeWhile(stream.spliterator(), predicate, keepBreak), false);
}]]></Answer>
<Answer><![CDATA[public static <R> Stream<? extends R> takeUntil(Iterator<R> iterator, Predicate<? super R> stopFilter) {

    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<R>() {
        private R next = null;
        private boolean hasTaken = true;
        private boolean stopIteration = !iterator.hasNext();
        @Override
        public boolean hasNext() {
            if (stopIteration) {
                return false;
            }

            if (!hasTaken) {
                return true;
            }

            if (!iterator.hasNext()) {
                stopIteration = true;
                return false;
            }

            next = iterator.next();
            stopIteration = stopFilter.test(next);
            hasTaken = stopIteration;
            return !stopIteration;
        }

        @Override
        public R next() {
            if (!hasNext()) {
                throw new NoSuchElementException("There are no more items to consume");
            }
            hasTaken = true;
            return next;
        }
    }, 0), false);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32283833" questionTitle="Please Explain Java 8 Method Reference to instance Method using class name">
<Answer><![CDATA[package learninglambdaexp;

import java.util.ArrayList;
import java.util.List;

public class AnotherMainClass {

    public static void main(String[] args) {

        List<Temperature> tempCollection = new ArrayList<>();
        tempCollection.add(new Temperature(100));
        tempCollection.add(new Temperature(20));
        tempCollection.add(new Temperature(30));
        tempCollection.add(new Temperature(40));
        tempCollection.add(new Temperature(50));
        tempCollection.add(new Temperature(60));
        tempCollection.add(new Temperature(70));
        int k1 = countVariation(tempCollection, Temperature::isEvenTemp);
        //int k2 = countVariation(Temperature::lowTemp);
        System.out.println(k1);
        // System.out.println(k2); 
    }

    private static int countVariation(List<Temperature> tempCollection, TempInterface ti) {
        int count = 0;
        for (Temperature eachTemp : tempCollection) {
            if (ti.validTemp(eachTemp)) { // (eachTemp) -> {return eachTemp.isEvenTemp();};
                count++;
            }
        }
        return count;
    }
}]]></Answer>
<Answer><![CDATA[interface FIface<T> {
    int testMethod(T a, T b);
}

class Test2 {

    private String str;

    Test2(String str) {
        this.str = str;
    }

    int ok(Test2 test2) {
        System.out.println("Currnet String : "+ this.str);//Refer to t1
        System.out.println("Test String : "+test2.str);//Refer to t2
        return 0;
    }

}

public class Test {

    public static <T> int checkCall(T t1, T t2, FIface<T> fiFace) {
        //Here Test2 :: ok is equivalent to t1.ok(t2)
        return fiFace.testMethod(t1, t2);
    }

    public static void main(String[] args) {
        checkCall(new Test2("a"), new Test2("b"), Test2 :: ok);
    }

}]]></Answer>
<Answer><![CDATA[interface myint{
    int returnit(Test t ,int y);
}
class Test{
    int x=0;
    public Test(int x){
        this.x=x;
    }

    public int addNumbers(int y){
        return x+y;
    }
    public int subtractNumbers(int y){
        return x-y;
    }

}

public class myclass{
    private static void myMethod(Test t,myint inf,int y){
        int x=inf.returnit(t, y);
        System.out.println(x+"");
    }
    public static void main(String[] args){
        myMethod(new Test(4),Test::addNumbers,7);
        myMethod(new Test(4),Test::subtractNumbers,7);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32273925" questionTitle="javafx: How to create a cellFactory that takes into account of two properties from an object?">
<Answer><![CDATA[fxTransactionLog.setRowFactory(tv -> {
    TableRow<Trade> row = new TableRow<>();
    Timeline flasher = new Timeline(

        new KeyFrame(Duration.seconds(0.5), e -> 
            row.pseudoClassStateChanged(flashHighlight, true)),

        new KeyFrame(Duration.seconds(1.0), e -> 
            row.pseudoClassStateChanged(flashHighlight, false))
    );

    flasher.setCycleCount(Animation.INDEFINITE);

    ChangeListener<Boolean> cautionListener = (obs, cautionWasSet, cautionIsNowSet) -> {
        if (cautionIsNowSet) {
            flasher.play();
        } else {
            flasher.stop();
            row.pseudoClassStateChanged(flashHighlight, false);
        }
    };

    cell.itemProperty().addListener((obs, oldItem, newItem) -> {
        if (oldItem != null) {
            oldItem.cautionProperty().removeListener(cautionListener);
        }
        if (newItem == null) {
            flasher.stop();
            row.pseudoClassStateChanged(flashHighlight, false);
        } else {
            newItem.cautionProperty().addListener(cautionListener);
            if (newItem.cautionProperty().get()) { //<-- PROBLEM 3
                flasher.play();
            } else {
                flasher.stop();
                row.pseudoClassStateChanged(flashHighlight, false);
            }
        }
    });
    return row ;
});]]></Answer>
<Answer><![CDATA[public static class AnimatedTableCell<T> extends TableCell<T,T>{
    private static final PseudoClass PS_Cell_Flash = PseudoClass.getPseudoClass("flash-cell-positive");

    private final Function<T,BooleanExpression> flashExtractor;
    private final ChangeListener<Boolean> flashListener = (fObs, fOld, fNew) -> flasherChanged(fNew);
    private final Timeline flashTimeline;

    // constructor
    public AnimatedTableCell(Function<T, BooleanExpression> fFlashExtractor){
        flashExtractor = fFlashExtractor;
        flashTimeline = new Timeline(
                new KeyFrame(Duration.seconds(0.5), e -> pseudoClassStateChanged(PS_Cell_Flash, true)),
                new KeyFrame(Duration.seconds(1.0), e -> pseudoClassStateChanged(PS_Cell_Flash, false)));
        flashTimeline.setCycleCount(Animation.INDEFINITE);
    }

    private void flasherChanged(boolean fNew) {
        if (fNew) {
            flashTimeline.play();
        } else {
            flashTimeline.stop();
            pseudoClassStateChanged(PS_Cell_Flash, false);
        }
    }

    @Override
    protected void updateItem(T item, boolean empty) {
        if (getItem() != null) {
            // Problem IN THIS LINE
            final BooleanExpression be = flashExtractor.apply(getItem());
            if (be != null) {
                be.removeListener(flashListener);
            }
        }

        super.updateItem(item, empty);

        if (getItem() != null) {
            final BooleanExpression be = flashExtractor.apply(getItem());
            if (be != null) {
                be.addListener(flashListener);
                flasherChanged(be.get());
            }
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32272770" questionTitle="Java 8 groupingby with custom key">
<Answer><![CDATA[public static void main(String[] args) {
  String input[] = ("typeA:code1," +
                "typeA:code2," +
                "typeA:code3," +
                "typeB:code4," +
                "typeB:code5," +
                "typeB:code6," +
                "typeC:code7").split(",");

  Map<String, List<String>> result = Stream.of(input)
                    .collect(groupingBy(A::getType, mapping(A::getValue, toList())));
  System.out.println(result);
}

public static String getType(String code) {
  return code.split(":")[0];
}
public static String getValue(String code) {
  return code.split(":")[1];
}]]></Answer>
<Answer><![CDATA[import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.toList;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class GroupingBySubstringsTest
{
    public static void main(String[] args)
    {
        List<String> strings = new ArrayList<String>();
        strings.add("typeA:code1");
        strings.add("typeA:code2");
        strings.add("typeA:code3");
        strings.add("typeB:code4");
        strings.add("typeB:code5");
        strings.add("typeB:code6");
        strings.add("typeC:code7");

        Map<String, List<String>> result = strings.stream().collect(
            groupingBy(s -> s.substring(0, s.indexOf(":")), 
                mapping(s -> s.substring(s.indexOf(":")+1), toList())));

        for (Entry<String, List<String>> entry : result.entrySet())
        {
            System.out.println(entry);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32255681" questionTitle="How do I pass a method as a parameter in Java 8?">
<Answer><![CDATA[public interface Test{
    void methodToPass(string stuff);
}

[...]

public class DumbTest{
     //MethodParameter is purely used to be comprehensive, nothing else...
    public void operateListWith(List<Stuff> listStuff, Test method) {
        for (Stuff stuff : listStuff) {
            System.out.println(method(stuff));
        }
    }
    public DumbTest() {
        List<Stuff> listStuff = new ArrayList<>();
        //fill list
        operateListWith(listStuff, methodToPassA);
        operateListWith(listStuff, methodToPassB);
    }
}]]></Answer>
<Answer><![CDATA[public class DumbTest {
  public class Stuff {
    public String getA() {
      return "a";
    }

    public String getB() {
      return "b";
    }
  }

  public String methodToPassA(Stuff stuff) {
    return stuff.getA();
  }

  public String methodToPassB(Stuff stuff) {
    return stuff.getA();
  }

  public DumbTest() {
    List<Stuff> listStuff = Arrays.asList(new Stuff(), new Stuff());

    listStuff.stream()
        .map(this::methodToPassA)
        .forEach(System.out::println);
  }

  public static void main(String[] args) {
    DumbTest l = new DumbTest();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32220042" questionTitle="Pick and move a node in a pannable/zoomable Pane">
<Answer><![CDATA[public class MasterNode extends Parent {

    private NodeStatus status = NodeStatus.OK;
    private final Image okImage = new Image(getClass().getResourceAsStream("/images/MasterOK.png"));
    private ImageView image = new ImageView(okImage);
    private final Text label = new Text();
    private final Font font = Font.font("Courier", 20);
    private DragContext nodeDragContext = new DragContext();
    public DoubleProperty scaleProperty = new SimpleDoubleProperty(1.0);
    double orgSceneX, orgSceneY;
    double layoutX, layoutY;

    public MasterNode(String labelText) {
        this(labelText, 0, 0);
    }

    public MasterNode(String labelText, double x, double y) {
        scaleXProperty().bind(scaleProperty);
        scaleYProperty().bind(scaleProperty);
        label.setText(labelText);
        label.setFont(font);
        label.setLayoutX(okImage.getWidth() + 10);
        label.setLayoutY(okImage.getHeight() / 2 + 10);
        getChildren().add(image);
        getChildren().add(label);
        setLayoutX(x);
        setLayoutY(y);
        setCursor(Cursor.MOVE);
        setOnMousePressed(new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                // left mouse button => dragging
                if (!event.isPrimaryButtonDown()) {
                    return;
                }

                nodeDragContext.setMouseAnchorX(event.getSceneX());
                nodeDragContext.setMouseAnchorY(event.getSceneY());

                Node node = (Node) event.getSource();

                nodeDragContext.setTranslateAnchorX(node.getTranslateX());
                nodeDragContext.setTranslateAnchorY(node.getTranslateY());

            }
        });
        setOnMouseDragged(new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                // left mouse button => dragging
                if (!event.isPrimaryButtonDown()) {
                    return;
                }
                Node node = (Node) event.getSource();
                node.setTranslateX(nodeDragContext.getTranslateAnchorX() + ((event.getSceneX() - nodeDragContext.getMouseAnchorX()) / getScale()));
                node.setTranslateY(nodeDragContext.getTranslateAnchorY() + ((event.getSceneY() - nodeDragContext.getMouseAnchorY()) / getScale()));
                event.consume();
            }
        });

    }

    public double getScale() {
        return scaleProperty.get();
    }

    public void setScale(double scale) {
        scaleProperty.set(scale);
    }

    public NodeStatus getStatus() {
        return status;
    }

    public void setStatus(NodeStatus status) {
        this.status = status;
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/**
 * The canvas which holds all of the nodes of the application.
 */
class PannableCanvas extends Pane {

    DoubleProperty myScale = new SimpleDoubleProperty(1.0);

    public PannableCanvas() {

        setPrefSize(600, 600);
        setStyle("-fx-background-color: lightgrey; -fx-border-color: blue;");

        // add scale transform
        scaleXProperty().bind(myScale);
        scaleYProperty().bind(myScale);

        // logging
        addEventFilter(MouseEvent.MOUSE_PRESSED, event -> { 
            System.out.println( 
                    "canvas event: " + ( ((event.getSceneX() - getBoundsInParent().getMinX()) / getScale()) + ", scale: " + getScale())
                    );
            System.out.println( "canvas bounds: " + getBoundsInParent());   
                });

    }

    /**
     * Add a grid to the canvas, send it to back
     */
    public void addGrid() {

        double w = getBoundsInLocal().getWidth();
        double h = getBoundsInLocal().getHeight();

        // add grid
        Canvas grid = new Canvas(w, h);

        // don't catch mouse events
        grid.setMouseTransparent(true);

        GraphicsContext gc = grid.getGraphicsContext2D();

        gc.setStroke(Color.GRAY);
        gc.setLineWidth(1);

        // draw grid lines
        double offset = 50;
        for( double i=offset; i < w; i+=offset) {
            // vertical
            gc.strokeLine( i, 0, i, h);
            // horizontal
            gc.strokeLine( 0, i, w, i);
        }

        getChildren().add( grid);

        grid.toBack();
    }

    public double getScale() {
        return myScale.get();
    }

    /**
     * Set x/y scale
     * @param myScale
     */
    public void setScale( double scale) {
        myScale.set(scale);
    }

    /**
     * Set x/y pivot points
     * @param x
     * @param y
     */
    public void setPivot( double x, double y) {
        setTranslateX(getTranslateX()-x);
        setTranslateY(getTranslateY()-y);
    }
}


/**
 * Mouse drag context used for scene and nodes.
 */
class DragContext {

    double mouseAnchorX;
    double mouseAnchorY;

    double translateAnchorX;
    double translateAnchorY;

}

/**
 * Listeners for making the nodes draggable via left mouse button. Considers if parent is zoomed.
 */
class NodeGestures {

    private DragContext nodeDragContext = new DragContext();

    PannableCanvas canvas;

    public NodeGestures( PannableCanvas canvas) {
        this.canvas = canvas;

    }

    public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
        return onMousePressedEventHandler;
    }

    public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
        return onMouseDraggedEventHandler;
    }

    private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

        public void handle(MouseEvent event) {

            // left mouse button => dragging
            if( !event.isPrimaryButtonDown())
                return;

            nodeDragContext.mouseAnchorX = event.getSceneX();
            nodeDragContext.mouseAnchorY = event.getSceneY();

            Node node = (Node) event.getSource();

            nodeDragContext.translateAnchorX = node.getTranslateX();
            nodeDragContext.translateAnchorY = node.getTranslateY();

        }

    };

    private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent event) {

            // left mouse button => dragging
            if( !event.isPrimaryButtonDown())
                return;

            double scale = canvas.getScale();

            Node node = (Node) event.getSource();

            node.setTranslateX(nodeDragContext.translateAnchorX + (( event.getSceneX() - nodeDragContext.mouseAnchorX) / scale));
            node.setTranslateY(nodeDragContext.translateAnchorY + (( event.getSceneY() - nodeDragContext.mouseAnchorY) / scale));

            event.consume();

        }
    };
}

/**
 * Listeners for making the scene's canvas draggable and zoomable
 */
class SceneGestures {

    private static final double MAX_SCALE = 10.0d;
    private static final double MIN_SCALE = .1d;

    private DragContext sceneDragContext = new DragContext();

    PannableCanvas canvas;

    public SceneGestures( PannableCanvas canvas) {
        this.canvas = canvas;
    }

    public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
        return onMousePressedEventHandler;
    }

    public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
        return onMouseDraggedEventHandler;
    }

    public EventHandler<ScrollEvent> getOnScrollEventHandler() {
        return onScrollEventHandler;
    }

    private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            sceneDragContext.mouseAnchorX = event.getSceneX();
            sceneDragContext.mouseAnchorY = event.getSceneY();

            sceneDragContext.translateAnchorX = canvas.getTranslateX();
            sceneDragContext.translateAnchorY = canvas.getTranslateY();

        }

    };

    private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            canvas.setTranslateX(sceneDragContext.translateAnchorX + event.getSceneX() - sceneDragContext.mouseAnchorX);
            canvas.setTranslateY(sceneDragContext.translateAnchorY + event.getSceneY() - sceneDragContext.mouseAnchorY);

            event.consume();
        }
    };

    /**
     * Mouse wheel handler: zoom to pivot point
     */
    private EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<ScrollEvent>() {

        @Override
        public void handle(ScrollEvent event) {

            double delta = 1.2;

            double scale = canvas.getScale(); // currently we only use Y, same value is used for X
            double oldScale = scale;

            if (event.getDeltaY() < 0)
                scale /= delta;
            else
                scale *= delta;

            scale = clamp( scale, MIN_SCALE, MAX_SCALE);

            double f = (scale / oldScale)-1;

            double dx = (event.getSceneX() - (canvas.getBoundsInParent().getWidth()/2 + canvas.getBoundsInParent().getMinX()));
            double dy = (event.getSceneY() - (canvas.getBoundsInParent().getHeight()/2 + canvas.getBoundsInParent().getMinY()));

            canvas.setScale( scale);

            // note: pivot value must be untransformed, i. e. without scaling
            canvas.setPivot(f*dx, f*dy);

            event.consume();

        }

    };


    public static double clamp( double value, double min, double max) {

        if( Double.compare(value, min) < 0)
            return min;

        if( Double.compare(value, max) > 0)
            return max;

        return value;
    }
}



/**
 * An application with a zoomable and pannable canvas.
 */
public class ZoomAndScrollApplication extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {

        Group group = new Group();

        // create canvas
        PannableCanvas canvas = new PannableCanvas();

        // we don't want the canvas on the top/left in this example => just
        // translate it a bit
        canvas.setTranslateX(100);
        canvas.setTranslateY(100);

        // create sample nodes which can be dragged
        NodeGestures nodeGestures = new NodeGestures( canvas);

        Label label1 = new Label("Draggable node 1");
        label1.setTranslateX(10);
        label1.setTranslateY(10);
        label1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label2 = new Label("Draggable node 2");
        label2.setTranslateX(100);
        label2.setTranslateY(100);
        label2.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label2.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label3 = new Label("Draggable node 3");
        label3.setTranslateX(200);
        label3.setTranslateY(200);
        label3.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label3.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Circle circle1 = new Circle( 300, 300, 50);
        circle1.setStroke(Color.ORANGE);
        circle1.setFill(Color.ORANGE.deriveColor(1, 1, 1, 0.5));
        circle1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        circle1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Rectangle rect1 = new Rectangle(100,100);
        rect1.setTranslateX(450);
        rect1.setTranslateY(450);
        rect1.setStroke(Color.BLUE);
        rect1.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.5));
        rect1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        rect1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        canvas.getChildren().addAll(label1, label2, label3, circle1, rect1);

        group.getChildren().add(canvas);

        // create scene which can be dragged and zoomed
        Scene scene = new Scene(group, 1024, 768);

        SceneGestures sceneGestures = new SceneGestures(canvas);
        scene.addEventFilter( MouseEvent.MOUSE_PRESSED, sceneGestures.getOnMousePressedEventHandler());
        scene.addEventFilter( MouseEvent.MOUSE_DRAGGED, sceneGestures.getOnMouseDraggedEventHandler());
        scene.addEventFilter( ScrollEvent.ANY, sceneGestures.getOnScrollEventHandler());

        stage.setScene(scene);
        stage.show();

        canvas.addGrid();

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32204953" questionTitle="Validating Java 8 dates">
<Answer><![CDATA[public static boolean isValid(String input) {
    DateTimeFormatter[] formatters = {
            new DateTimeFormatterBuilder().appendPattern("yyyy")
                    .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
                    .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
                    .toFormatter(),
            new DateTimeFormatterBuilder().appendPattern("yyyy-MM")
                    .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
                    .toFormatter(),
            new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd")
                    .parseStrict().toFormatter() };
    for(DateTimeFormatter formatter : formatters) {
        try {
            LocalDate.parse(input, formatter);
            return true;
        } catch (DateTimeParseException e) {
        }
    }
    return false;
}]]></Answer>
<Answer><![CDATA[public static final boolean validateInputDate(final String isoDate)
{
    String[] dateProperties = isoDate.split("-");

    if(dateProperties != null)
    {
        int year = Integer.parseInt(dateProperties[0]);

        // A valid month by default in the case it is not provided.
        int month = dateProperties.length > 1 ? Integer.parseInt(dateProperties[1]) : 1;

        // A valid day by default in the case it is not provided.
        int day = dateProperties.length > 2 ? Integer.parseInt(dateProperties[2]) : 1;

        try
        {
            LocalDate.of(year, month, day);
            return true;
        }
        catch(DateTimeException e)
        {
            return false;
        }
    }

    return false;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32198956" questionTitle="Javafx combobox not updating dropdown size upon change on realtime?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ComboBoxTest extends Application {

   @Override
   public void start(final Stage primaryStage) throws Exception {

      primaryStage.centerOnScreen();
      primaryStage.setHeight(200);
      primaryStage.setWidth(300);

      List<String> list1 = new ArrayList<>();
      list1.add("one");
      list1.add("two");
      list1.add("three");

      List<String> list2 = new ArrayList<>();
      list2.add("one");
      list2.add("two");
      list2.add("three");
      list2.add("four");

      final ComboBox<String> combo = new ComboBox<String>();
      combo.getItems().setAll(list1);


      Button button = new Button("Change combo contents");
      button.setOnAction(event -> {
         if ( combo.getItems().size() == 3 ) {
            combo.getItems().setAll(list2);
         } else {
            combo.getItems().setAll(list1);
         }
         combo.show();
      });

      VBox box = new VBox(20, combo, button );
      box.setMaxSize(Region.USE_PREF_SIZE, Region.USE_PREF_SIZE);
      primaryStage.setScene(new Scene( new StackPane(box) ));

      primaryStage.show();

   }

   public static void main(String[] args) throws Exception {
      launch(args);
   }

}]]></Answer>
<Answer><![CDATA[public class Test extends Application{

    private int index = 0;

    @Override
    public void start(Stage primaryStage) throws IOException{

        VBox vbox =  new VBox();    
        vbox.setSpacing(10);
        vbox.setAlignment(Pos.CENTER);

        ComboBox<String> box = new ComboBox<>();
        box.setPrefWidth(200);
        box.setVisibleRowCount(10);

        Button add = new Button("Add");
        Button remove = new Button("Remove");

        add.setOnAction(    new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                box.getItems().add("Item " + index++);
            }
        });


        remove.setOnAction( new EventHandler<ActionEvent>() {       
            @Override
            public void handle(ActionEvent event) {
                if( index > 0 )
                    box.getItems().remove(--index);
            }
        });


        vbox.getChildren().addAll(add, remove, box);


        Scene scene = new Scene(vbox);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[yourComboBox.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
        @Override
        public ListCell<String> call(ListView<String> param) {
            ListCell cell = new ListCell<String>() {
                @Override
                public void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    int numItems = getListView().getItems().size();
                    int height = 175;    // set the maximum height of the popup
                    if (numItems <= 5) height = numItems * 35;    // set the height of the popup if number of items is equal to or less than 5
                    getListView().setPrefHeight(height);
                    if (!empty) {
                        setText(item.toString());
                    } else {
                        setText(null);
                    }
                }
            };
            return cell;
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32188676" questionTitle="javafx: How can I make TableCell Edit return double instead of string and the font changes color based on a condition?">
<Answer><![CDATA[import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.function.Function;
import java.util.regex.Pattern;

import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ReadOnlyBooleanProperty;
import javafx.beans.property.ReadOnlyBooleanWrapper;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.css.PseudoClass;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.StringConverter;

public class TradeTable extends Application {

    private final Random rng = new Random();

    @Override
    public void start(Stage primaryStage) {
        TableView<Trade> table = new TableView<>();
        table.setEditable(true);
        TableColumn<Trade, Integer> volumeCol = column("Volume", trade -> trade.volumeProperty().asObject());
        TableColumn<Trade, Double> priceCol = column("Price", trade -> trade.priceProperty().asObject());

        priceCol.setCellFactory(col -> new EditingDoubleCell("price-cell"));

        table.getColumns().add(volumeCol);
        table.getColumns().add(priceCol);

        PseudoClass caution = PseudoClass.getPseudoClass("caution");

        table.setRowFactory(tv -> {
            TableRow<Trade> row = new TableRow<>();

            ChangeListener<Boolean> cautionListener = (obs, wasCaution, isNowCaution) -> 
                row.pseudoClassStateChanged(caution, isNowCaution);

            row.itemProperty().addListener((obs, oldTrade, newTrade) -> {
                if (oldTrade != null) {
                    oldTrade.cautionProperty().removeListener(cautionListener);
                }
                if (newTrade == null) {
                    row.pseudoClassStateChanged(caution, false);
                } else {
                    row.pseudoClassStateChanged(caution, newTrade.isCaution());
                    newTrade.cautionProperty().addListener(cautionListener);
                }
            });

            return row ;
        });

        table.getItems().addAll(createRandomData());

        Button button = new Button("Change Data");
        button.setOnAction(e -> table.getItems().forEach(trade -> {
            if (rng.nextDouble() < 0.5) {
                trade.setVolume(0);
            } else {
                trade.setVolume(rng.nextInt(10000));
            }
            trade.setPrice(rng.nextDouble() * 1000);
        }));
        BorderPane.setAlignment(button, Pos.CENTER);
        BorderPane.setMargin(button, new Insets(10));

        BorderPane root = new BorderPane(table, null, null, button, null);
        Scene scene = new Scene(root, 600, 600);
        scene.getStylesheets().add("trade-table.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private  List<Trade> createRandomData() {
        List<Trade> trades = new ArrayList<>(50);
        for (int i = 0 ; i < 50; i++) {
            int volume = rng.nextDouble() < 0.5 ? 0 : rng.nextInt(10000) ;
            double price = rng.nextDouble() * 10000 ;
            trades.add(new Trade(price, volume));
        }
        return trades ;
    }

    private static <S,T> TableColumn<S,T> column(String title, Function<S, ObservableValue<T>> property) {
        TableColumn<S,T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> property.apply(cellData.getValue()));
        return col ;
    }

    public static class Trade {
        private DoubleProperty price;
        private IntegerProperty volume ;
        private ReadOnlyBooleanWrapper caution;

        public Trade(double price, int volume){
            this.price = new SimpleDoubleProperty(price);
            this.volume = new SimpleIntegerProperty(volume);
            this.caution = new ReadOnlyBooleanWrapper();
            this.caution.bind(this.volume.greaterThan(0));
        }   

        public double getPrice(){
            return this.price.get();
        }   

        public DoubleProperty priceProperty(){
            return this.price;
        }

        public void setPrice(double price){
            this.price.set(price);
        }

        public final IntegerProperty volumeProperty() {
            return this.volume;
        }

        public final int getVolume() {
            return this.volumeProperty().get();
        }

        public final void setVolume(final int volume) {
            this.volumeProperty().set(volume);
        }

        public final ReadOnlyBooleanProperty cautionProperty() {
            return this.caution.getReadOnlyProperty();
        }

        public final boolean isCaution() {
            return this.cautionProperty().get();
        }


    }

    public static class EditingDoubleCell extends TableCell<Trade,Double>{

        private TextField textField;
        private TextFormatter<Double> textFormatter ;

        private Pattern partialInputPattern = Pattern.compile(
                "[-+]?[,0-9]*(\\.[0-9]*)?");

        private DecimalFormat df ;

        public EditingDoubleCell(String...styleClasses) {
            Locale locale  = new Locale("en", "UK");
            String pattern = "###,###.###";
            df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
            df.applyPattern(pattern);

            getStyleClass().addAll(styleClasses);
        }

        @Override
        public void startEdit() {
            if (!isEmpty()) {
                super.startEdit();
                createTextField();
                setText(null);
                setGraphic(textField);
                textField.requestFocus();
            }
        }

        @Override
        public void cancelEdit() {
            super.cancelEdit();
            setText(df.format(getItem()));
            setGraphic(null);
        }


        @Override
        public void updateItem(Double item, boolean empty) {
            super.updateItem(item, empty);

            if (empty) {
                setText(null);
                setGraphic(null);
            } else {
                if (isEditing()) {
                    if (textField != null) {
                        textField.setText(getString());

                    }
                    setText(null);
                    setGraphic(textField);
                } else {
                    setText(getString());
                    setGraphic(null);
                }
            }
        }

        private String getString() {
            return getItem() == null ? "" : df.format(getItem());
        }

        private void createTextField(){

            textField = new TextField();

            StringConverter<Double> converter = new StringConverter<Double>() {

                @Override
                public String toString(Double number) {
                    return df.format(number);
                }

                @Override
                public Double fromString(String string) {
                    try {
                        double value = df.parse(string).doubleValue() ;
                        return value;
                    } catch (ParseException e) {
                        e.printStackTrace();
                        return 0.0 ;
                    }
                }

            };

            textFormatter = new TextFormatter<>(converter,  0.0, c -> {
                if (partialInputPattern.matcher(c.getControlNewText()).matches()) {
                    return c ;
                } else {
                    return null ;
                }
            }) ;

            // add filter to allow for typing only integer
            textField.setTextFormatter( textFormatter);

            textField.setText( getString() );

            textField.setMinWidth( this.getWidth() - this.getGraphicTextGap() * 2 );

            // commit on Enter
            textFormatter.valueProperty().addListener((obs, oldValue, newValue) -> {
                commitEdit(newValue);
            });
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class EditingDoubleCell extends TableCell<Trade, Double> {

        private TextField textField;

        public EditingDoubleCell() {
            textField = new TextField();
            textField.setOnAction(e -> commitEdit(Double.valueOf(textField.getText())));
        }

        @Override
        public void startEdit() {
            if (!isEmpty()) {
                super.startEdit();
                setText(null);
                setGraphic(textField);
                textField.requestFocus();

            }
        }

        @Override
        public void cancelEdit() {
            super.cancelEdit();
            setText(getString());
            setGraphic(null);
        }

        @Override
        public void commitEdit(Double newValue) {
            super.commitEdit(newValue);
        }

        @Override
        public void updateItem(Double item, boolean empty) {
            super.updateItem(item, empty);

            if (empty) {
                setText(null);
                setGraphic(null);
            } else {

                Locale locale = new Locale("en", "UK");
                String pattern = "###,###.###";
                DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(locale);
                df.applyPattern(pattern);
                String s = df.format(getItem());
                setText(s);
                setGraphic(null);
              // set font of Price cell to a color
            TableRow<Trade> row = getTableRow();
            if (row.getItem().getCaution()) {
                setStyle("-fx-background-color:blue;");
            } else {
                setStyle("-fx-background-color: red;");
                    }
            }
        }

        private String getString() {
            return getItem() == null ? "" : getItem().toString();
        }

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32173624" questionTitle="JavaFX 8 Binding with number format">
<Answer><![CDATA[public class BindingTest {
    static Property<String> sp;
    static Property<Double> dp;

    public static void main(String[] args) {
        sp = new SimpleStringProperty();
        dp = new SimpleObjectProperty<>();

        StringConverter<Double> sc = new StringConverter<Double>() {
            @Override
            public String toString(Double object) {
                if (object != null)
                    return Integer.toString((int) Math.round(object.doubleValue()));
                else
                    return null;
            }

            @Override
            public Double fromString(String string) {
                Double d = Double.parseDouble(string);
                sp.setValue(Integer.toString((int) Math.round(d)));
                return d;
            }
        };

        Bindings.bindBidirectional(sp, dp, sc);

        print();
        sp.setValue("3.14");
        print();
        dp.setValue(6.18);
        print();
    }

    public static void print() {
        System.out.println("String: " + sp.getValue() + "\t" + "Double: " + dp.getValue());
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start( Stage stage )
{
    TextField field = new TextField();
    DoubleProperty doubleProperty = new SimpleDoubleProperty();
    Label label = new Label();
    label.textProperty().bind( doubleProperty.asString() );

    DecimalFormat format = new DecimalFormat();
    format.setParseIntegerOnly( true );  // used while parsing the input text of textfield
    format.setMaximumFractionDigits( 0 );  // used while formatting the doubleProperty's bound value as output text of textfield
    format.setGroupingUsed( false );  // disable thousand grouping
    format.setRoundingMode( RoundingMode.UP );  // set rounding mode

    Bindings.bindBidirectional( field.textProperty(), doubleProperty, new StringConverter<Number>()
    {
        @Override
        public String toString( Number object )
        {
            return object == null ? "" : format.format( object );
        }


        @Override
        public Number fromString( String string )
        {
            return (string != null && !string.isEmpty()) ? Double.valueOf( string ) : null;
        }
    } );

    // apply filter to allow only integer values
    field.setTextFormatter( new TextFormatter<>( c ->
    {
        if ( c.getControlNewText().isEmpty() )
        {
            return c;
        }

        ParsePosition parsePosition = new ParsePosition( 0 );
        Object object = format.parse( c.getControlNewText(), parsePosition );

        if ( object == null || parsePosition.getIndex() < c.getControlNewText().length() )
        {
            return null;
        }
        else
        {
            return c;
        }

    } ) );

    Button b = new Button( "+1.6" );
    b.setOnAction( ( e ) ->
    {
        doubleProperty.set( doubleProperty.get() + 1.6 );
    } );

    Scene scene = new Scene( new VBox( 5 ) );
    stage.setWidth( 450 );
    stage.setHeight( 250 );
    (( VBox ) scene.getRoot()).getChildren().addAll( field, label, b );
    stage.setScene( scene );
    stage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32173548" questionTitle="Detecting when the mouse has 'stopped moving' in JavaFX using FXML">
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class TrackMouseStopped extends Application {

    private final long MIN_STATIONARY_TIME = 100_000_000 ; // nanoseconds 

    @Override
    public void start(Stage primaryStage) {
        Pane pane = new Pane();
        ObjectProperty<Point2D> mouseLocation = new SimpleObjectProperty<>(new Point2D(0, 0));
        pane.setOnMouseMoved(e -> mouseLocation.set(new Point2D(e.getX(), e.getY())));

        BooleanProperty mouseMoving = new SimpleBooleanProperty();
        mouseMoving.addListener((obs, wasMoving, isNowMoving) -> {
           if (! isNowMoving) {
               System.out.println("Mouse stopped!");
           }
        });

        AnimationTimer timer = new AnimationTimer() {
            private double lastMouseX ;
            private double lastMouseY ;
            long lastMouseMovement ;
            @Override
            public void handle(long timestamp) {
                double x = mouseLocation.get().getX();
                double y = mouseLocation.get().getY();
                if (Double.doubleToLongBits(lastMouseX) != Double.doubleToLongBits(x)
                    || Double.doubleToLongBits(lastMouseY) != Double.doubleToLongBits(y)) {
                    lastMouseMovement = timestamp ;
                }

                mouseMoving.set(timestamp - lastMouseMovement < MIN_STATIONARY_TIME);

                lastMouseX = x;
                lastMouseY = y;
            }
        };
        timer.start();

        Scene scene = new Scene(pane, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;


public class Main extends Application {

    Scene scene;
    MouseStatus mouseStatus = new MouseStatus();

    Label infoLabel;

    @Override
    public void start(Stage primaryStage) {

        Group root = new Group();

        infoLabel = new Label();
        root.getChildren().add( infoLabel);

        scene = new Scene(root, 640, 480);

        primaryStage.setScene(scene);
        primaryStage.show();

        addInputListeners();

    }


    private void addInputListeners() {

        scene.addEventFilter(MouseEvent.ANY, e -> {

            infoLabel.setText("Moving");

            mouseStatus.setX(e.getX());
            mouseStatus.setY(e.getY());
            mouseStatus.setPrimaryButtonDown(e.isPrimaryButtonDown());
            mouseStatus.setSecondaryButtonDown(e.isSecondaryButtonDown());

        });

        AnimationTimer loop = new AnimationTimer() {

            long deltaNs = 30_000_000;

            double currX;
            double currY;
            long currNs;

            double prevX;
            double prevY;
            long prevNs;

            @Override
            public void handle(long now) {

                currX = mouseStatus.x;
                currY = mouseStatus.y;
                currNs = now;

                if( currNs - prevNs > deltaNs) {

                    if( prevX == currX && prevY == currY) {
                        infoLabel.setText("Stopped");
                    }

                    prevX = currX;
                    prevY = currY;
                    prevNs = currNs;
                }

            }
        };
        loop.start();

    }



    public class MouseStatus {

        double x;
        double y;
        boolean primaryButtonDown;
        boolean secondaryButtonDown;

        public double getX() {
            return x;
        }
        public void setX(double x) {
            this.x = x;
        }
        public double getY() {
            return y;
        }
        public void setY(double y) {
            this.y = y;
        }
        public boolean isPrimaryButtonDown() {
            return primaryButtonDown;
        }
        public void setPrimaryButtonDown(boolean primaryButtonDown) {
            this.primaryButtonDown = primaryButtonDown;
        }
        public boolean isSecondaryButtonDown() {
            return secondaryButtonDown;
        }
        public void setSecondaryButtonDown(boolean secondaryButtonDown) {
            this.secondaryButtonDown = secondaryButtonDown;
        }


    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32131987" questionTitle="How can I make Cartesian product with Java 8 streams?">
<Answer><![CDATA[public class Permutations {

    transient List<Collection<String>> perms;

    public List<Collection<String>> list(Map<String, Collection<String>> map) {

        SortedMap<String, Collection<String>> sortedMap = new TreeMap<>();
        sortedMap.putAll(map);

        sortedMap.values().forEach((v) ->  perms = expand(perms, v));

        return perms;
    }

    private List<Collection<String>> expand(List<Collection<String>> list, Collection<String> elements) {

        List<Collection<String>> newList = new LinkedList<>();

        if (list == null) {
            elements.forEach((e) -> {
                SortedSet<String> set = new TreeSet<>();
                set.add(e);
                newList.add(set);
            });
        } else {
            list.forEach((set) ->
                elements.forEach((e) -> {
                    SortedSet<String> newSet = new TreeSet<>();
                    newSet.addAll(set);
                    newSet.add(e);
                    newList.add(newSet);
                }));
        }

        return newList;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.util.stream.Stream;

public class CartesianProduct {

    public static void main(String[] args) {
        Map<String, Collection<String>> map = 
            new LinkedHashMap<String, Collection<String>>();
        map.put("A", Arrays.asList("a1", "a2", "a3", "a4"));
        map.put("B", Arrays.asList("b1", "b2", "b3"));
        map.put("C", Arrays.asList("c1", "c2"));
        ofCombinations(map.values()).forEach(System.out::println);
    }

    public static <T> Stream<List<T>> ofCombinations(
        Collection<? extends Collection<T>> collections) {
        return ofCombinations(
            new ArrayList<Collection<T>>(collections), 
            Collections.emptyList());        
    }       

    private static <T> Stream<List<T>> ofCombinations(
        List<? extends Collection<T>> collections, List<T> current) {
        return collections.isEmpty() ? Stream.of(current) :
            collections.get(0).stream().flatMap(e -> 
            {
                List<T> list = new ArrayList<T>(current);
                list.add(e);
                return ofCombinations(
                    collections.subList(1, collections.size()), list);
            });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32105783" questionTitle="Check for a Substring in a String with a Switch Statement">
<Answer><![CDATA[import org.junit.Test;
import java.util.function.Predicate;
import static javaslang.API.*;
public class JavaSlangSwitchCase {

  @Test
  public void javaSlangSwitchCaseWithSubstringAB() throws Exception {
    Match("BlahABBlah").of(
        Case(contains("AB"), o -> run(this::printHasAB)),
        Case(contains("CD"), o -> run(this::printHasCD)),
        Case($(), o -> run(() -> {
          System.out.println("KABOOM!");
        }))
    );
  }

  @Test
  public void javaSlangSwitchCaseWithSubstringCD() throws Exception {
    Match("BlahCDBlah").of(
        Case(contains("AB"), o -> run(this::printHasAB)),
        Case(contains("CD"), o -> run(this::printHasCD)),
        Case($(), o -> run(() -> {
          System.out.println("KABOOM!");
        }))
    );
  }

  private void printHasAB() {
    System.out.println("Has AB");
  }

  private void printHasCD() {
    System.out.println("Has CD");
  }

  public static <T> Predicate<T> contains(T value) {
    return (obj) -> ((String)obj).contains((String) value);
  }
}]]></Answer>
<Answer><![CDATA[public class SwitchSubstring {
    private static final SwitchSubstring DONE = new SwitchSubstring(null) {
        @Override
        public SwitchSubstring when(String subString, Runnable r) {
            return this;
        }

        @Override
        public void orElse(Runnable r) {
        }
    };

    private final String str;

    private SwitchSubstring(String str) {
        this.str = str;
    }

    public SwitchSubstring when(String subString, Runnable r) {
        if(str.contains(subString)) {
            r.run();
            return DONE;
        }
        return this;
    }

    public void orElse(Runnable r) {
        r.run();
    }

    public static SwitchSubstring of(String str) {
        return new SwitchSubstring(str);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32071726" questionTitle="Java 8 Stream: groupingBy with multiple Collectors">
<Answer><![CDATA[List<Person> persons = new ArrayList<>();
    persons.add(new Person("Person One", 1, 18));
    persons.add(new Person("Person Two", 1, 20));
    persons.add(new Person("Person Three", 1, 30));
    persons.add(new Person("Person Four", 2, 30));
    persons.add(new Person("Person Five", 2, 29));
    persons.add(new Person("Person Six", 3, 18));

    List<BiFunction<Map<String, Integer>, Person, Map<String, Integer>>> listOfReducers = new ArrayList<>();

    listOfReducers.add((m, p) -> addMap(m, "Count", Optional.ofNullable(m.get("Count")).orElse(0) + 1));
    listOfReducers.add((m, p) -> addMap(m, "Sum", Optional.ofNullable(m.get("Sum")).orElse(0) + p.i1));

    BiFunction<Map<String, Integer>, Person, Map<String, Integer>> applyList
            = (mapin, p) -> {
                Map<String, Integer> mapout = mapin;
                for (BiFunction<Map<String, Integer>, Person, Map<String, Integer>> f : listOfReducers) {
                    mapout = f.apply(mapout, p);
                }
                return mapout;
            };
    BinaryOperator<Map<String, Integer>> combineMaps
            = (map1, map2) -> {
                Map<String, Integer> mapout = new HashMap<>();
                mapout.putAll(map1);
                mapout.putAll(map2);
                return mapout;
            };
    Map<String, Integer> map
            = persons
            .stream()
            .reduce(new HashMap<String, Integer>(),
                    applyList, combineMaps);
    System.out.println("map = " + map);]]></Answer>
<Answer><![CDATA[// Individual collectors are defined here
List<Collector<Person, ?, ?>> collectors = Arrays.asList(
        Collectors.averagingInt(Person::getAge),
        Collectors.summingInt(Person::getAge));

@SuppressWarnings("unchecked")
Collector<Person, List<Object>, List<Object>> complexCollector = Collector.of(
    () -> collectors.stream().map(Collector::supplier)
        .map(Supplier::get).collect(toList()),
    (list, e) -> IntStream.range(0, collectors.size()).forEach(
        i -> ((BiConsumer<Object, Person>) collectors.get(i).accumulator()).accept(list.get(i), e)),
    (l1, l2) -> {
        IntStream.range(0, collectors.size()).forEach(
            i -> l1.set(i, ((BinaryOperator<Object>) collectors.get(i).combiner()).apply(l1.get(i), l2.get(i))));
        return l1;
    },
    list -> {
        IntStream.range(0, collectors.size()).forEach(
            i -> list.set(i, ((Function<Object, Object>)collectors.get(i).finisher()).apply(list.get(i))));
        return list;
    });

Map<Integer, List<Object>> result = persons.stream().collect(
        groupingBy(Person::getGroup, complexCollector));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="32016368" questionTitle="Convert a Julian Date to an Instant">
<Answer><![CDATA[public class JulianDay {
    private static final double NANOS_PER_DAY = 24.0 * 60.0 * 60.0 * 1000000000.0;

    // Calculate Instants for some epochs as defined in Wikipedia.
    public static final Instant REDUCED_JD =
            ZonedDateTime.of(1858, 11, 16, 12, 0, 0, 0, ZoneOffset.UTC).toInstant();
    public static final Instant MODIFIED_JD =
            ZonedDateTime.of(1858, 11, 17, 0, 0, 0, 0, ZoneOffset.UTC).toInstant();
    public static final Instant JULIAN_DATE =
            REDUCED_JD.minus(2400000, ChronoUnit.DAYS);

    private final Instant epoch;

    public JulianDay(Instant epoch) {
        super();
        this.epoch = epoch;
    }

    public Instant toInstant(double day) {
        long l = (long) day;
        return epoch
                .plus(l, ChronoUnit.DAYS)
                .plusNanos(Math.round((day - l) * NANOS_PER_DAY));
    }

    public static void main(String[] args) {
        // Use the example values from Wikipedia for 2015-09-07 13:21 UTC.
        System.out.println(new JulianDay(REDUCED_JD).toInstant(57273.05625));
        // Output: 2015-09-07T13:21:00.000000126Z
        System.out.println(new JulianDay(MODIFIED_JD).toInstant(57272.55625));
        // Output: 2015-09-07T13:21:00.000000126Z
        System.out.println(new JulianDay(JULIAN_DATE).toInstant(2457273.05625));
        // Output: 2015-09-07T13:20:59.999991953Z
    }
}]]></Answer>
<Answer><![CDATA[private static final int                   YEAR = 0;
    private static final int                  MONTH = 1;
    private static final int                    DAY = 2;
    private static final int                  HOURS = 3;
    private static final int                MINUTES = 4;
    private static final int                SECONDS = 5;
    private static final int                 MILLIS = 6;

    public static int[] toTimeStampArray(double yourEpochDayNumber) {

        int ymd_hms[] = { -1, -1, -1, -1, -1, -1, -1 };
        int a, b, c, d, e, z;

        // convert from your epoch (1/1/1752) to Julian Day Number
        double jd = yourEpochDayNumber + 2360965.5 + 0.5;
        double f, x;

        z = (int) Math.floor(jd);
        f = jd - z;

        if (z >= 2299161) {
            int alpha = (int) Math.floor((z - 1867216.25) / 36524.25);
            a = z + 1 + alpha - (int) Math.floor(alpha / 4);
        } else {
            a = z;
        }

        b = a + 1524;
        c = (int) Math.floor((b - 122.1) / 365.25);
        d = (int) Math.floor(365.25 * c);
        e = (int) Math.floor((b - d) / 30.6001);

        ymd_hms[DAY] = b - d - (int) Math.floor(30.6001 * e);
        ymd_hms[MONTH] = (e < 14)
                ? (e - 1)
                : (e - 13);
        ymd_hms[YEAR] = (ymd_hms[MONTH] > 2)
                ? (c - 4716)
                : (c - 4715);

        for (int i = HOURS; i <= MILLIS; i++) {
            switch(i) {
                case HOURS:
                    f = f * 24.0;
                    break;
                case MINUTES: case SECONDS:
                    f = f * 60.0;
                    break;
                case MILLIS:
                    f = f * 1000.0;
                    break;  
            }
            x = Math.floor(f);
            ymd_hms[i] = (int) x;
            f = f - x;
        }   
        return ymd_hms;
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31956018" questionTitle="Understanding phaser in java with an example">
<Answer><![CDATA[import static java.lang.String.*;

import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Phaser;
import java.util.stream.IntStream;

public class PhaserUsage implements Callable<String> {

    private static final int THREAD_POOL_SIZE = 10;
    private Phaser phaser;

    private PhaserUsage(Phaser phaser) {
        this.phaser = phaser;
    }

    public static void main(String a[]) {
        ExecutorService execService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        CompletionService<String> completionService = new ExecutorCompletionService<>(execService);

        Phaser phaser = new Phaser(1);
        IntStream.range(0, THREAD_POOL_SIZE)
                .forEach(nbr -> completionService.submit(new PhaserUsage(phaser)));

        execService.shutdown();

         try {
             while (!execService.isTerminated()) {
                String result = completionService.take().get();
                System.out.println(format("Result is: %s", result));
             }
          } catch (ExecutionException | InterruptedException e) {
             e.printStackTrace();
          }
    }

    @Override
    public String call() {
        String threadName = Thread.currentThread().getName();
        System.out.println(format("Registering...%s",threadName));
        //phaser.register();
        System.out.println(format("Arrive and await advance...%s",threadName));
        phaser.arriveAndAwaitAdvance(); // await all creation
        int a = 0, b = 1;
        Random random = new Random();
        for (int i = 0; i < random.nextInt(10000000); i++) {
            a = a + b;
            b = a - b;
        }
        System.out.println(format("De-registering...%s",threadName));
        phaser.arriveAndDeregister();
        return format("Thread %s results: a = %s, b = %s", threadName, a, b);
    }
}]]></Answer>
<Answer><![CDATA[import static java.lang.String.*;

import java.util.Random;
import java.util.concurrent.*;
import java.util.stream.IntStream;

public class PhaserUsage implements Callable<String> {

    private static final int THREAD_POOL_SIZE = 10;
    private final Phaser phaser;

    private PhaserUsage(Phaser phaser) {
        this.phaser = phaser;
    }

    public static void main(String a[]) {
        ExecutorService execService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        CompletionService<String> completionService = new ExecutorCompletionService<>(execService);

        // since we know beforehand how many tasks we have, initialize the
        // number of participants in the constructor; other wise register
        // *before* launching the task
        Phaser phaser = new Phaser(THREAD_POOL_SIZE);

        IntStream.range(0, THREAD_POOL_SIZE)
                .forEach(nbr -> completionService.submit(new PhaserUsage(phaser)));

        execService.shutdown();

         try {
             while (!execService.isTerminated()) {
                String result = completionService.take().get();
                System.out.println(format("Result is: %s", result));
             }
          } catch (ExecutionException | InterruptedException e) {
             e.printStackTrace();
          }
    }

    @Override
    public String call() {
        String threadName = Thread.currentThread().getName();
        System.out.println(format("Arrive and await advance...%s",threadName));
        phaser.arriveAndAwaitAdvance(); // await all creation
        int a = 0, b = 1;
        Random random = new Random();
        for (int i = 0; i < random.nextInt(10000000); i++) {
            a = a + b;
            b = a - b;
        }
        System.out.println(format("De-registering...%s",threadName));
        phaser.arriveAndDeregister();
        return format("Thread %s results: a = %s, b = %s", threadName, a, b);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31941805" questionTitle="Put together JavaFX properties and JPA Entities (NO MIXED MODE)">
<Answer><![CDATA[@Entity
@Table(name="EntityClass", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"ID"})})
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "EntityClass.findAll", query = "SELECT a FROM EntityClass a"),
    @NamedQuery(name = "EntityClass.findById", query = "SELECT a FROM EntityClass a WHERE a.id = :id"),
    @NamedQuery(name = "EntityClass.findByYear", query = "SELECT a FROM EntityClass a WHERE a.year = :year")})
public class EntityClass implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(nullable = false)
    private Integer id;
    @Basic(optional = false)
    @Column(nullable = false, length = 4)
    private String year;
    //...and others

    private static final long serialVersionUID = 1L;

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "fKYear")
    private Collection<Some1> some1Collection;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "fKYear")
    private Collection<Some2> some2Collection;

    public EntityClass() {
    }

    public EntityClass(Integer id) {
        this.id = id;
    }

    public EntityClass(Integer id, String year) {
        this.id = id;
        this.year = year;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    @XmlTransient
    public Collection<Some1> getSome1Collection() {
        return some1Collection;
    }

    public void setSome1Collection(Collection<Some1> some1Collection) {
        this.some1Collection = some1Collection;
    }

    @XmlTransient
    public Collection<Some2> getSome2Collection() {
        return some2Collection;
    }

    public void setSome2Collection(Collection<Some2> some2Collection) {
        this.some2Collection = some2Collection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof EntityClass)) {
            return false;
        }
        EntityClass other = (EntityClass) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return this.year;
    }
}]]></Answer>
<Answer><![CDATA[public class Person {
    private String firstName ;
    private String lastName ;

    private PropertyChangeSupport pcs ;

    public Person() {
        pcs = = new PropertyChangeSupport(this);
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        pcs.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        pcs.removePropertyChangeListener(listener);
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        String oldName = this.firstName ;
        this.firstName = firstName;
        pcs.firePropertyChange("firstName", oldName, this.firstName);
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        String oldName = this.lastName ;
        this.lastName = lastName;
        pcs.firePropertyChange("lastName", oldName, this.lastName);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31909458" questionTitle="JavaFX Animation: Move Shape (Star) randomly">
<Answer><![CDATA[import java.util.Random;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class TimeLines extends Application {

    private Rectangle rectBasicTimeline;

    @Override
    public void start(Stage primaryStage) {
        Button btn = new Button();
        btn.setText("Do Animation");

        int x = new Random().nextInt(500);
        int y = new Random().nextInt(400);
        rectBasicTimeline = new Rectangle(x, y, 100, 50);
        rectBasicTimeline.setFill(Color.RED);

        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {

                play();

            }
        });

        AnchorPane root = new AnchorPane();
        root.getChildren().addAll(btn, rectBasicTimeline);
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void play() {

        double x = new Random().nextInt(500);
        double y = new Random().nextInt(400);

        final Timeline timeline = new Timeline();
        // cycle count = 2 because of autoreverse
        timeline.setCycleCount(2);
        timeline.setAutoReverse(true);
        final KeyValue kx = new KeyValue(rectBasicTimeline.xProperty(), x + 200);
        final KeyValue ky = new KeyValue(rectBasicTimeline.yProperty(), y + 200);
        final KeyValue kScale = new KeyValue(rectBasicTimeline.scaleXProperty(), 2);
        final KeyValue kFade = new KeyValue(rectBasicTimeline.opacityProperty(), 0);
        final KeyFrame kf = new KeyFrame(Duration.millis(1000), kx, ky, kScale, kFade);
        timeline.getKeyFrames().add(kf);
        timeline.setOnFinished(e -> {
            // create new animation after this animation finishes
            play();
        });
        timeline.play();

    }

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class StarFall extends Application
{

    private Polygon star;
    private Timeline timeline;
    private final double shs = 5.0; // Star Hand Size
    private final Random random = new Random();


    @Override
    public void start( Stage primaryStage )
    {
        // init shape
        Pos initPos = getRandomPos();
        star = new Polygon();
        star.setLayoutX( initPos.x );
        star.setLayoutY( initPos.y );
        star.setFill( Color.YELLOW );

        // the shape
        star.getPoints().addAll( new Double[]
        {
            0.0, shs * 3,
            shs * 2, shs * 2,
            shs * 3, 0.0,
            shs * 4, shs * 2,
            shs * 6, shs * 3,
            shs * 4, shs * 4,
            shs * 3, shs * 6,
            shs * 2, shs * 4
        } );

        // init timeline
        timeline = new Timeline();
        timeline.setCycleCount( Timeline.INDEFINITE );
        timeline.setAutoReverse( true );

        // init button
        Button btnStart = new Button( "Do Animation" );
        btnStart.setOnAction( ( e ) -> playNextKeyFrame() );

        Button btnStop = new Button( "Stop Animation" );
        btnStop.setLayoutX( 200 );
        btnStart.setLayoutX( 0 );
        btnStop.setOnAction( ( e ) -> timeline.stop() );

        // init scene with root
        AnchorPane root = new AnchorPane( btnStart, btnStop, star );
        Scene scene = new Scene( root, 800, 600 );

        // show
        primaryStage.setScene( scene );
        primaryStage.show();
    }


    private void playNextKeyFrame()
    {
        // generate next random start and end positions for star
        Pos startPos = getRandomPos();
        Pos endPos = getRandomPos();

        // initial values (resetting)
        star.setLayoutX( startPos.x );
        star.setLayoutY( startPos.y );
        star.setScaleX( 1 );
        star.setScaleY( 1 );
        star.setOpacity( 1 );

        // target values
        KeyValue kx = new KeyValue( star.layoutXProperty(), endPos.x );
        KeyValue ky = new KeyValue( star.layoutYProperty(), endPos.y );
        KeyValue kScaleX = new KeyValue( star.scaleXProperty(), 3 );
        KeyValue kScaleY = new KeyValue( star.scaleYProperty(), 3 );
        KeyValue kFade = new KeyValue( star.opacityProperty(), 0.0 );

        // delay animation before start. Use this instead of THread.sleep() !!
        timeline.setDelay( Duration.millis( random.nextInt( 2000 ) + 100 ) );

        // restart timeline with new values
        timeline.stop();
        timeline.getKeyFrames().clear();
        timeline.getKeyFrames().add( new KeyFrame( Duration.millis( 3000 ),
                ( e ) -> playNextKeyFrame(), kx, ky, kFade, kScaleX, kScaleY ) );
        timeline.play();
    }


    private Pos getRandomPos()
    {
        int x = random.nextInt( 500 );
        int y = random.nextInt( 400 );
        Pos p = new Pos();
        p.x = x + 200;
        p.y = y + 200;
        return p;
    }


    private class Pos
    {
        int x;
        int y;
    }


    public static void main( String[] args )
    {
        launch( args );
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31904459" questionTitle="How to use static constructor reference with a three parameters Java 8 Function (without make TriFunction)?">
<Answer><![CDATA[public class App {
    public static void main(String[] args) {
        final String DATA_FILE_SEPARATOR = ",";
        final String FAKE_CSV_LINE = "Jean,Dupont,M";

        CsvPersonParser csvParser = new CsvPersonParser();
        Person person;

        // Use curryling style
        person = csvParser.parseLine(FAKE_CSV_LINE, DATA_FILE_SEPARATOR, f -> l -> g -> PersonFactory.create(f, l, g));
        System.out.println("Currying style : " + person.getFirstName() + " " + person.getLastName() + " " + person.getGender());

        // Use new functionnal interface
        person = csvParser.parseLine(FAKE_CSV_LINE, DATA_FILE_SEPARATOR, PersonFactory::create);
        System.out.println("TriFunction style : " + person.getFirstName() + " " + person.getLastName() + " " + person.getGender());

        // Use lambda style
        person = csvParser.parseLine(FAKE_CSV_LINE, DATA_FILE_SEPARATOR, (a,b,c) -> PersonFactory.create(a, b, c));
        System.out.println("Lambda style : " + person.getFirstName() + " " + person.getLastName() + " " + person.getGender());
    }
}]]></Answer>
<Answer><![CDATA[public class DefaultPersonBuilder implements PersonBuilder {

    private String firstName;
    private String lastName;
    private String gender;

    @Override
    public PersonBuilder withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    @Override
    public PersonBuilder withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    @Override
    public PersonBuilder withGender(String gender) {
        this.gender = gender;
        return this;
    }

    @Override
    public Person create() {
        // Check firstName Parameter
        if (firstName == null || firstName.isEmpty()) {
            throw new IllegalArgumentException("The firstName argument expect to not be null or empty");
        }

        [... your implementation using the fields]
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31887925" questionTitle="How to call an array of Images">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class CardRefreshButton extends Application {

    List<Image> deck = new ArrayList<>();

    public void load() {
        for (int i = 0; i < 52; i++) {
            deck.add(new Image(getClass().getResource(i + ".png").toExternalForm()));
        }
    }

    @Override
    public void start(Stage primaryStage) {

        load();

        primaryStage.setTitle("Shuffling Deck Program");

        BorderPane bPane1 = new BorderPane();
        HBox pane1 = new HBox(10);
        HBox pane2 = new HBox(10);

        ImageView view0 = new ImageView(deck.get(0));
        ImageView view1 = new ImageView(deck.get(1));
        ImageView view2 = new ImageView(deck.get(2));
        ImageView view3 = new ImageView(deck.get(3));

        Button refresh = new Button("Refresh");

        refresh.setOnAction((event) -> {

            Collections.shuffle( deck);

            view0.setImage(deck.get(0));
            view1.setImage(deck.get(1));
            view2.setImage(deck.get(2));
            view3.setImage(deck.get(3));

        });

        pane1.setAlignment(Pos.CENTER);
        pane2.setAlignment(Pos.CENTER);

        pane1.getChildren().addAll(view0, view1, view2, view3);
        pane2.getChildren().add(refresh);

        bPane1.setCenter(pane1);
        bPane1.setBottom(pane2);

        Scene scene1 = new Scene(bPane1, 600, 650);
        primaryStage.setScene(scene1);
        primaryStage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[package sample;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.util.Random;

public class Controller {
@FXML
private Button btnRefresh
@FXML
private TextField txtShow;
@FXML
private ImageView imgAni;

@FXML
public void initialize(){
    btnRefresh.setText(" Refresh ");
}
@FXML
public void btnLoad(ActionEvent event){vImage();}

void vImage(){
    Image img1 = new Image("sample/res/tiger.jpg");
    Image img2= new Image("sample/res/horse.jpg");
    Image img3 = new Image("sample/res/lion.jpg");
    //imgAni.setImage(img1);*/
    Image[] img = {img1,img2,img3};
    Random rand = new Random();
    for (int i = 0; i < img.length; i++){
        imgAni.setImage(img[rand.nextInt(img.length)]);
    }
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31822595" questionTitle="How to create a partial border(with a hole)?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

public class BorderWithGap extends Application {

    @Override
    public void start(Stage primaryStage) {
        AnchorPane pane = new AnchorPane();

        Label label = new Label("Border with gap");
        AnchorPane.setTopAnchor(label, 50.0);
        AnchorPane.setLeftAnchor(label, 50.0);
        pane.getChildren().add(label);

        pane.setStyle("-fx-background-color: blue, -fx-background, -fx-background;"
                + "-fx-background-insets: 0, 0 50 2 100, 2;");


        Scene scene = new Scene(pane, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Nikitoslav extends Application {

@Override
public void start(Stage primaryStage) throws Exception {

    Pane g = new Pane();        
    g.setBackground(new Background(new BackgroundFill(Color.YELLOW,
            null, null)));
    g.relocate(20, 20);
    BorderStroke bs = new BorderStroke(Color.RED, Color.RED, Color.RED, Color.RED,//the paint around th four corners
            BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID, BorderStrokeStyle.SOLID,
            null, BorderStroke.THIN, null);
    g.setBorder(new Border(bs));
    Path p = new  Path();
    p.getElements().addAll(new MoveTo(1, 0),new HLineTo(0),new VLineTo(4), new HLineTo(4), new VLineTo(0),
            //creating a rectangle
            new HLineTo(3)
    );
    g.setShape(p);
    g.setPrefSize(300, 300);
    primaryStage.setScene(new Scene(new Group(g),500,500));
    primaryStage.show();
    g.setPrefSize(400, 400);
}


public static void main(String[] args) {
    launch(args);
}

@Override
public void init() throws Exception {
    // TODO Auto-generated method stub
    super.init();
}

@Override
public void stop() throws Exception {
    // TODO Auto-generated method stub
    super.stop();
 }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31761361" questionTitle="Automatically resize Canvas to fill the enclosing Parent">
<Answer><![CDATA[import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.beans.Observable;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

/**
 * @see https://stackoverflow.com/a/31761362/230513
 * @see https://stackoverflow.com/a/8616169/230513
 */

public class Baubles extends Application {

    private static final int MAX = 64;
    private static final double WIDTH = 640;
    private static final double HEIGHT = 480;
    private static final Random RND = new Random();
    private final Queue<Bauble> queue = new LinkedList<>();
    private Canvas canvas;

    @Override
    public void start(Stage stage) {
        CanvasPane canvasPane = new CanvasPane(WIDTH, HEIGHT);
        canvas = canvasPane.getCanvas();
        BorderPane root = new BorderPane(canvasPane);
        CheckBox cb = new CheckBox("Animate");
        cb.setSelected(true);
        root.setBottom(cb);
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

        for (int i = 0; i < MAX; i++) {
            queue.add(randomBauble());
        }
        AnimationTimer loop = new AnimationTimer() {
            @Override
            public void handle(long now) {
                GraphicsContext g = canvas.getGraphicsContext2D();
                g.setFill(Color.BLACK);
                g.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
                for (Bauble b : queue) {
                    g.setFill(b.c);
                    g.fillOval(b.x, b.y, b.d, b.d);
                }
                queue.add(randomBauble());
                queue.remove();
            }
        };
        loop.start();
        cb.selectedProperty().addListener((Observable o) -> {
            if (cb.isSelected()) {
                loop.start();
            } else {
                loop.stop();
            }
        });
    }

    private static class Bauble {

        private final double x, y, d;
        private final Color c;

        public Bauble(double x, double y, double r, Color c) {
            this.x = x - r;
            this.y = y - r;
            this.d = 2 * r;
            this.c = c;
        }
    }

    private Bauble randomBauble() {
        double x = RND.nextDouble() * canvas.getWidth();
        double y = RND.nextDouble() * canvas.getHeight();
        double r = RND.nextDouble() * MAX + MAX / 2;
        Color c = Color.hsb(RND.nextDouble() * 360, 1, 1, 0.75);
        return new Bauble(x, y, r, c);
    }

    private static class CanvasPane extends Pane {

        private final Canvas canvas;

        public CanvasPane(double width, double height) {
            canvas = new Canvas(width, height);
            getChildren().add(canvas);
        }

        public Canvas getCanvas() {
            return canvas;
        }

        @Override
        protected void layoutChildren() {
            super.layoutChildren();
            final double x = snappedLeftInset();
            final double y = snappedTopInset();
            final double w = snapSize(getWidth()) - x - snappedRightInset();
            final double h = snapSize(getHeight()) - y - snappedBottomInset();
            canvas.setLayoutX(x);
            canvas.setLayoutY(y);
            canvas.setWidth(w);
            canvas.setHeight(h);
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.beans.Observable;
import javafx.beans.binding.DoubleBinding;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

/**
 * @see http://stackoverflow.com/a/31761362/230513
 * @see http://stackoverflow.com/a/8616169/230513
 */

public class Baubles extends Application {

private static final int MAX = 64;
private static final double WIDTH = 640;
private static final double HEIGHT = 480;
private static final Random RND = new Random();
private final Queue<Bauble> queue = new LinkedList<>();
private Canvas canvas;

@Override
public void start(Stage stage) {
    canvas = new Canvas(WIDTH, HEIGHT);
    BorderPane root = new BorderPane(canvas);
    CheckBox cb = new CheckBox("Animate");
    cb.setSelected(true);
    root.setBottom(cb);
    Scene scene = new Scene(root);
    stage.setScene(scene);
    stage.show();

    // Create bindings for resizing.
    DoubleBinding heightBinding = root.heightProperty()
            .subtract(root.bottomProperty().getValue().getBoundsInParent().getHeight());
    canvas.widthProperty().bind(root.widthProperty());
    canvas.heightProperty().bind(heightBinding);

    for (int i = 0; i < MAX; i++) {
        queue.add(randomBauble());
    }
    AnimationTimer loop = new AnimationTimer() {
        @Override
        public void handle(long now) {
            GraphicsContext g = canvas.getGraphicsContext2D();
            g.setFill(Color.BLACK);
            g.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
            for (Bauble b : queue) {
                g.setFill(b.c);
                g.fillOval(b.x, b.y, b.d, b.d);
            }
            queue.add(randomBauble());
            queue.remove();
        }
    };
    loop.start();
    cb.selectedProperty().addListener((Observable o) -> {
        if (cb.isSelected()) {
            loop.start();
        } else {
            loop.stop();
        }
    });
}

private static class Bauble {

    private final double x, y, d;
    private final Color c;

    public Bauble(double x, double y, double r, Color c) {
        this.x = x - r;
        this.y = y - r;
        this.d = 2 * r;
        this.c = c;
    }
}

private Bauble randomBauble() {
    double x = RND.nextDouble() * canvas.getWidth();
    double y = RND.nextDouble() * canvas.getHeight();
    double r = RND.nextDouble() * MAX + MAX / 2;
    Color c = Color.hsb(RND.nextDouble() * 360, 1, 1, 0.75);
    return new Bauble(x, y, r, c);
}

public static void main(String[] args) {
    launch(args);
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31754786" questionTitle="How to implement the builder pattern in Java 8?">
<Answer><![CDATA[public class GenericBuilder<T> {

    private final Supplier<T> instantiator;

    private List<Consumer<T>> instanceModifiers = new ArrayList<>();

    public GenericBuilder(Supplier<T> instantiator) {
        this.instantiator = instantiator;
    }

    public static <T> GenericBuilder<T> of(Supplier<T> instantiator) {
        return new GenericBuilder<T>(instantiator);
    }

    public <U> GenericBuilder<T> with(BiConsumer<T, U> consumer, U value) {
        Consumer<T> c = instance -> consumer.accept(instance, value);
        instanceModifiers.add(c);
        return this;
    }

    public T build() {
        T value = instantiator.get();
        instanceModifiers.forEach(modifier -> modifier.accept(value));
        instanceModifiers.clear();
        return value;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.Consumer;

public class Person {

    private String name;

    private int age;

    public Person(Builder Builder) {
        this.name = Builder.name;
        this.age = Builder.age;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Person{");
        sb.append("name='").append(name).append('\'');
        sb.append(", age=").append(age);
        sb.append('}');
        return sb.toString();
    }

    public static class Builder {

        public String name;
        public int age;

        public Builder with(Consumer<Builder> function) {
            function.accept(this);
            return this;
        }

        public Person build() {
            return new Person(this);
        }
    }

    public static void main(String[] args) {
        Person user = new Person.Builder().with(userData -> {
            userData.name = "test";
            userData.age = 77;
        }).build();
        System.out.println(user);
    }
}]]></Answer>
<Answer><![CDATA[public class PersonBuilder {
    public String salutation;
    public String firstName;
    public String middleName;
    public String lastName;
    public String suffix;
    public Address address;
    public boolean isFemale;
    public boolean isEmployed;
    public boolean isHomewOwner;

    public PersonBuilder with(
        Consumer<PersonBuilder> builderFunction) {
        builderFunction.accept(this);
        return this;
    }


    public Person createPerson() {
        return new Person(salutation, firstName, middleName,
                lastName, suffix, address, isFemale,
                isEmployed, isHomewOwner);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31698531" questionTitle="Create resizable borders for empty stage">
<Answer><![CDATA[public class Resize {
        double eY = 0;
        double eX = 0;
        double eStrtY = 0;
        double eStrtX = 0;
        double sceneStrtY = 0;
        double sceneStrtX = 0;
        double minW = 600;
        double minH = 600;
        double w = 0;
        public Resize(Stage stage, double w) {

            Scene scene = stage.getScene();
            AnchorPane root = (AnchorPane)scene.getRoot();
    this.w = w;
    root.setOnMousePressed(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent e) {
            eStrtY = e.getSceneY();
            eStrtX = e.getSceneX();
            sceneStrtY = e.getSceneY();
            sceneStrtX = e.getSceneX();
        }
    });

    root.setOnMouseMoved(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent event) {
        //  double w = 8;
            double X = event.getSceneX();
            double Y = event.getSceneY();
            double sW = scene.getWidth();
            double sH = scene.getHeight();

            if(((X<w)&&(Y<w))||((X<2*w)&&(Y<w))||((Y<2*w)&&(X<w))) {
                scene.setCursor(Cursor.NW_RESIZE);
                eY = stage.getY();
                eX = stage.getX();
                root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                    @Override
                    public void handle(MouseEvent e) {
                        if(((eStrtX<w)&&(eStrtY<w))||((eStrtX<2*w)&&(eStrtY<w))||((eStrtY<2*w)&&(eStrtX<w))) {
                            if(stage.getHeight()+(eY-e.getScreenY())>minH) {
                                stage.setY(e.getScreenY());
                                stage.setHeight(stage.getHeight()+(eY-e.getScreenY()));
                                eY = e.getScreenY();
                            }
                            if(stage.getWidth()+(eX-e.getScreenX())>minW) {
                                stage.setX(e.getScreenX());
                                stage.setWidth(stage.getWidth()+(eX-e.getScreenX()));
                                eX = e.getScreenX();
                            }
                        }
                    }
                });
            }
            else
                if(((X>sW-w)&&(Y<w))||((X>sW-2*w)&&(Y<w))||((X>sW-w)&&(Y<2*w))) {
                    scene.setCursor(Cursor.NE_RESIZE);
                    eY = stage.getY();
                    eX = stage.getX() + stage.getWidth();
                    root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                        @Override
                        public void handle(MouseEvent e) {
                            if(((eStrtX>sW-w)&&(eStrtY<w))||((eStrtX>sW-2*w)&&(eStrtY<w))||((eStrtX>sW-w)&&(eStrtY<2*w))) {
                                if(stage.getHeight()+(eY-e.getScreenY())>minH) {
                                    stage.setY(e.getScreenY());
                                    stage.setHeight(stage.getHeight()+(eY-e.getScreenY()));
                                    eY = e.getScreenY();
                                }
                                if(stage.getWidth()-(eX-e.getScreenX())>minW) {
                                    stage.setWidth(stage.getWidth()-(eX-e.getScreenX()));
                                    eX = e.getScreenX();
                                }
                            }
                        }
                    });
                }
                else
                    if(((X>sW-w)&&(Y>sH-w))||((X>sW-2*w)&&(Y>sH-w))||((X>sW-w)&&(Y>sH-2*w))) {
                        scene.setCursor(Cursor.SE_RESIZE);
                        eY = stage.getY() + stage.getHeight();
                        eX = stage.getX() + stage.getWidth();
                        root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                            @Override
                            public void handle(MouseEvent e) {
                                if(((eStrtX>sW-w)&&(eStrtY>sH-w))||((eStrtX>sW-2*w)&&(eStrtY>sH-w))||((eStrtX>sW-w)&&(eStrtY>sH-2*w))) {
                                    if(stage.getHeight()-(eY-e.getScreenY())>minH) {
                                        stage.setHeight(stage.getHeight()-(eY-e.getScreenY()));
                                        eY = e.getScreenY();
                                    }
                                    if(stage.getWidth()-(eX-e.getScreenX())>minW) {
                                        stage.setWidth(stage.getWidth()-(eX-e.getScreenX()));
                                        eX = e.getScreenX();
                                    }
                                }
                            }
                        });
                    }
                    else
                        if(((X<w)&&(Y>sH-w))||((X<2*w)&&(Y>sH-w))||((X<w)&&(Y>sH-2*w))) {
                            scene.setCursor(Cursor.SW_RESIZE);
                            eY = stage.getY() + stage.getHeight();
                            eX = stage.getX();
                            root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                @Override
                                public void handle(MouseEvent e) {
                                    if(((eStrtX<w)&&(eStrtY>sH-w))||((eStrtX<2*w)&&(eStrtY>sH-w))||((eStrtX<w)&&(eStrtY>sH-2*w))) {
                                        if(stage.getHeight()-(eY-e.getScreenY())>minH) {
                                            stage.setHeight(stage.getHeight()-(eY-e.getScreenY()));
                                            eY = e.getScreenY();
                                        }
                                        if(stage.getWidth()+(eX-e.getScreenX())>minW) {
                                            stage.setX(e.getScreenX());
                                            stage.setWidth(stage.getWidth()+(eX-e.getScreenX()));
                                            eX = e.getScreenX();
                                        }
                                    }
                                }
                            });
                        }
                        else
                            if(Y<w) {
                                scene.setCursor(Cursor.V_RESIZE);
                                eY = stage.getY();
                                eX = stage.getX() + stage.getWidth();
                                root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                    @Override
                                    public void handle(MouseEvent e) {
                                        if((eStrtY<w)&&(stage.getHeight()+(eY-e.getScreenY())>minH)) {
                                            stage.setY(e.getScreenY());
                                            stage.setHeight(stage.getHeight()+(eY-e.getScreenY()));
                                            eY = e.getScreenY();
                                        }
                                    }
                                });
                            }
                            else
                                if(Y>sH-w) {
                                    scene.setCursor(Cursor.V_RESIZE);
                                    eY = stage.getY() + stage.getHeight();
                                    root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                        @Override
                                        public void handle(MouseEvent e) {
                                            if((eStrtY>sH-w)&&(stage.getHeight()-(eY-e.getScreenY())>minH)) {
                                                stage.setHeight(stage.getHeight()-(eY-e.getScreenY()));
                                                eY = e.getScreenY();
                                            }
                                        }
                                    });
                                }
                                else
                                    if(X<w) {
                                        scene.setCursor(Cursor.H_RESIZE);
                                        eX = stage.getX();
                                        root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                            @Override
                                            public void handle(MouseEvent e) {
                                                if((eStrtX<w)&&(stage.getWidth()+(eX-e.getScreenX())>minW)) {
                                                        stage.setX(e.getScreenX());
                                                        stage.setWidth(stage.getWidth()+(eX-e.getScreenX()));
                                                        eX = e.getScreenX();
                                                }
                                            }
                                        });
                                    }
                                    else
                                        if(X>sW-w) {
                                            scene.setCursor(Cursor.H_RESIZE);
                                            eX = stage.getX() + stage.getWidth();
                                            root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                                @Override
                                                public void handle(MouseEvent e) {
                                                    if((eStrtX>sW-w)&&(stage.getWidth()-(eX-e.getScreenX())>minW)) {
                                                        stage.setWidth(stage.getWidth()-(eX-e.getScreenX()));
                                                        eX = e.getScreenX();
                                                    }
                                                }
                                            });
                                        }
                                        else
                                            if((X>w)&&(X<sW-w)&&(Y>w)&&(Y<25)) {
                                                root.setOnMouseDragged(new EventHandler<MouseEvent>() {
                                                    @Override
                                                    public void handle(MouseEvent e) {
                                                        if((eStrtX>w)&&(eStrtX<sW-w-25*3)&&(eStrtY>w)&&(eStrtY<w+25)) {
                                                            stage.setX(e.getScreenX()-sceneStrtX);
                                                            stage.setY(e.getScreenY()-sceneStrtY);
                                                        }
                                                    }
                                                });
                                            }
                                            else
                                                scene.setCursor(Cursor.DEFAULT);
        }   
    });

    root.setOnMouseReleased(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent e) {
            eY = e.getScreenY();
            eX = e.getScreenX();
        }
    });
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {
double dragX,dragY;
@Override
public void start(Stage primaryStage) {
    try {
        primaryStage.initStyle(StageStyle.TRANSPARENT);
        HBox hbox = new HBox(10.0);
        hbox.setPrefHeight(70);
        hbox.setFillHeight(true);
        BackgroundFill bf = new BackgroundFill(Color.BLUEVIOLET, new CornerRadii(1), null);
        hbox.setBackground(new Background(bf));

        AnchorPane ap = new AnchorPane();

        ResponsiveButton min = new ResponsiveButton("Minimise");
        min.noDefaultFill = true;
        min.setBorder(Border.EMPTY);
        min.setBackground(new Background(new BackgroundFill(Color.BLUEVIOLET, new CornerRadii(1), null)));
        //min.setPrefSize(32.0,32.0);
        min.setAlignment(Pos.CENTER);
        min.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                primaryStage.setIconified(true);
            }
        });

        ResponsiveButton max = new ResponsiveButton("Maximise");
        max.setBorder(Border.EMPTY);
        max.setBackground(new Background(new BackgroundFill(Color.BLUEVIOLET, new CornerRadii(1), null)));
        //max.setPrefSize(32.0,32.0);
        max.noDefaultFill = true;
        max.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {

                if(primaryStage.isMaximized()){
                    primaryStage.setMaximized(false);
                }else{
                    primaryStage.setMaximized(true);            
                }
            }
        });

        ResponsiveButton logout = new ResponsiveButton("Close me");
        logout.noDefaultFill = true;
        logout.setBorder(Border.EMPTY);
        logout.setBackground(new Background(new BackgroundFill(Color.BLUEVIOLET, new CornerRadii(1), null)));
        //logout.setPrefSize(32.0,32.0);
        logout.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                primaryStage.close();
            }
        });

        Label label = new Label();
        label.setText("Custom Stage");
        label.setTextFill(Color.WHITESMOKE);
        //label.setAlignment(Pos.CENTER);
        label.setPadding(new Insets(0.0,0.0,0.0,18.0));
        label.setFont(Font.font("Tahoma", FontWeight.BOLD, 25));
        HBox.setHgrow(label, Priority.ALWAYS);  
        hbox.setAlignment(Pos.CENTER);

        hbox.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent mouseEvent) {
                if(!primaryStage.isMaximized()){
                    dragX = primaryStage.getX() - mouseEvent.getScreenX();
                    dragY = primaryStage.getY() - mouseEvent.getScreenY();
                    hbox.setCursor(Cursor.MOVE);
                }
            }
        });
        hbox.setOnMouseReleased(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent mouseEvent) {
                if(!primaryStage.isMaximized()){
                    hbox.setCursor(Cursor.HAND);
                    BackgroundFill bf = new BackgroundFill(Color.BLUEVIOLET, new CornerRadii(1), null);
                    hbox.setBackground(new Background(bf));
                }
            }
        });
        hbox.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent mouseEvent) {
                if(!primaryStage.isMaximized()){
                    primaryStage.setX(mouseEvent.getScreenX() + dragX);
                    primaryStage.setY(mouseEvent.getScreenY() + dragY);
                    BackgroundFill bf = new BackgroundFill(Color.BLANCHEDALMOND, new CornerRadii(1), null);
                    hbox.setBackground(new Background(bf));
                }
            }
        });
        hbox.setOnMouseEntered(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent mouseEvent) {
                if(!primaryStage.isMaximized()){
                    if (!mouseEvent.isPrimaryButtonDown()) {
                        hbox.setCursor(Cursor.HAND);
                    }
                }
            }
        });
        hbox.setOnMouseExited(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent mouseEvent) {
                if (!mouseEvent.isPrimaryButtonDown()) {
                    hbox.setCursor(Cursor.DEFAULT);
                }
            }
        });

        HBox hbox2 = new HBox(10.0);
        HBox.setHgrow(hbox2, Priority.ALWAYS);
        hbox2.getChildren().addAll(min,max,logout);
        hbox.getChildren().addAll(label,hbox2);
        hbox2.setAlignment(Pos.CENTER_RIGHT);
        AnchorPane.setTopAnchor(hbox, 0.0);AnchorPane.setLeftAnchor(hbox, 5.0);AnchorPane.setRightAnchor(hbox, 0.0);
        AnchorPane.setBottomAnchor(ap , 0.0);AnchorPane.setTopAnchor(ap , 40.0);
        AnchorPane.setLeftAnchor(ap , 5.0); AnchorPane.setRightAnchor(ap , 0.0);
        ap .setPrefSize(500, 560);

        AnchorPane main = new AnchorPane();         
        main.getChildren().addAll(hbox,ap);
        Scene sc = new Scene(main,500,500);
        sc.setRoot(main);

        Pane p = new   Pane();
        AnchorPane.setTopAnchor(p, 80.0);
        AnchorPane.setLeftAnchor(p, 60.0);
        Group root = new Group();   
        p.setPrefSize(400, 400);
        p.setBackground(new Background(new BackgroundFill(Color.GOLD,
                null, null)));
        root.getChildren().add(p);
        ap.getChildren().add(p);
        primaryStage.setScene(sc);
        primaryStage.setTitle("Custom window");
        primaryStage.show();
        BubbledLabel bl1 = new BubbledLabel(BubbleSpec.FACE_LEFT_CENTER);
        bl1.relocate(10, 50);
        bl1.setText("I love this new Custom stage");
        bl1.setBackground(new Background(new BackgroundFill(Color.VIOLET,
                null, null)));


        BubbledLabel bl2 = new BubbledLabel(BubbleSpec.FACE_RIGHT_CENTER);
        bl2.relocate(310, 100);
        bl2.setText("We all love it");
        bl2.setBackground(new Background(new BackgroundFill(Color.LIGHTPINK,
                null, null)));

        BubbledLabel bl3 = new BubbledLabel(BubbleSpec.FACE_LEFT_CENTER);
        bl3.relocate(10, 150);
        bl3.setText("Nikitoslav is going love it");
        bl3.setBackground(new Background(new BackgroundFill(Color.YELLOWGREEN,
                null, null)));


        BubbledLabel bl4 = new BubbledLabel(BubbleSpec.FACE_RIGHT_CENTER);
        bl4.relocate(165, 200);
        bl4.setText("hmmm.. you have you asked him???");
        bl4.setBackground(new Background(new BackgroundFill(Color.GREENYELLOW,
                null, null)));

        BubbledLabel bl5 = new BubbledLabel(BubbleSpec.FACE_LEFT_CENTER);
        bl5.relocate(10, 250);
        bl5.setText("yea! yea! ");
        bl5.setBackground(new Background(new BackgroundFill(Color.YELLOWGREEN,
                null, null)));


        BubbledLabel bl6 = new BubbledLabel(BubbleSpec.FACE_RIGHT_CENTER);
        bl6.relocate(250, 300);
        bl6.setText("Oh really!!? oh stop it!!");
        bl6.setBackground(new Background(new BackgroundFill(Color.GREENYELLOW,
                null, null)));


        p.getChildren().addAll(bl1,bl2,bl3,bl4,bl5,bl6);

    } catch(Exception e) {
        e.printStackTrace();
    }
}

 public static void main(String[] args) {
     launch(args);
 }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31664071" questionTitle="Why can't we switch on classes in Java 7+?">
<Answer><![CDATA[public class StringInSwitchCase {
    public StringInSwitchCase() {}

    public static void main(string args[]) {
        String mode = args[0];
        String s;
        switch ((s = mode).hashCode()) {
        default:
            break;
        case -74056953:
            if (s.equals("PASSIVE")) {
                System.out.println("Application is running on Passive mode");
            }
            break;
        case 2537357:
            if (s.equals("SAFE")) {
                System.out.println("Application is running on Safe mode");
            }
            break;
        case 1925346054:
            if (s.equals("ACTIVE")) {
                System.out.println("Application is running on Active mode");
            }
            break;
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.Consumer;

public class SwitchClass<T> {
    private static final SwitchClass<?> EMPTY = new SwitchClass<Object>(null) {
        @Override
        public <S> SwitchClass<Object> when(Class<S> subClass,
                Consumer<? super S> consumer) { return this; }

        @Override
        public void orElse(Consumer<? super Object> consumer) { }
    };

    final T obj;

    private SwitchClass(T obj) {
        this.obj = obj;
    }

    @SuppressWarnings("unchecked")
    public <S> SwitchClass<T> when(Class<S> subClass,
            Consumer<? super S> consumer) {
        if (subClass.isInstance(obj)) {
            consumer.accept((S) obj);
            return (SwitchClass<T>) EMPTY;
        }
        return this;
    }

    public void orElse(Consumer<? super T> consumer) {
        consumer.accept(obj);
    }

    public static <T> SwitchClass<T> of(T t) {
        return new SwitchClass<>(t);
    }
}]]></Answer>
<Answer><![CDATA[public class ClassSwitch {
    static final class Foo {}
    static final class Bar {}
    static final class Baz {}

    public static void main(String... arg) {
        Class<?> cl=Bar.class;
        switch(cl.getSimpleName().hashCode()) {
            case 70822: 
                if(cl==Foo.class) {
                    System.out.println("case Foo:");
                }
                break;
            case 66547: 
                if(cl==Bar.class) {
                    System.out.println("case Baz:");
                }
                break;
            case 66555: 
                if(cl==Baz.class) {
                    System.out.println("case Baz:");
                }
                break;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31602425" questionTitle="Take every nth element from a Java 8 stream">
<Answer><![CDATA[class EveryNth<C> {

    private final int nth;
    private final List<List<C>> lists = new ArrayList<>();
    private int next = 0;

    private EveryNth(int nth) {
        this.nth = nth;
        IntStream.range(0, nth).forEach(i -> lists.add(new ArrayList<>()));
    }

    private void accept(C item) {
        lists.get(next++ % nth).add(item);
    }

    private EveryNth<C> combine(EveryNth<C> other) {
        other.lists.forEach(l -> lists.get(next++ % nth).addAll(l));
        next += other.next;
        return this;
    }

    private List<C> getResult() {
        return lists.get(0);
    }

    public static Collector<Integer, ?, List<Integer>> collector(int nth) {
        return Collector.of(() -> new EveryNth(nth), 
            EveryNth::accept, EveryNth::combine, EveryNth::getResult));
}]]></Answer>
<Answer><![CDATA[private <T> Function<T, Stream<T>> everyNth(int n) {
  return new Function<T, Stream<T>>() {
    int i = 0;

    @Override
    public Stream<T> apply(T t) {
      if (i++ % n == 0) {
        return Stream.of(t);
      }
      return Stream.empty();
    }
  };
}

@Test
public void everyNth() {
  assertEquals(
    Arrays.asList(1, 4, 7, 10),
    IntStream.rangeClosed(1, 10).boxed()
      .flatMap(everyNth(3))
      .collect(Collectors.toList())
  );
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31601900" questionTitle="JavaFX: how to create slide in animation effect for a pane (inside a transparent stage)">
<Answer><![CDATA[<AnchorPane xmlns:fx="http://javafx.com/fxml/1" id="AnchorPane" prefWidth="500" prefHeight="500"    fx:controller="leftslidemenusample.FXMLDocumentController">
    <children>

        <ToolBar AnchorPane.topAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" minHeight="56.0"   >
            <Button text="menu" fx:id="menu"  /> 
        </ToolBar>
        <StackPane fx:id="mainContent"  style="-fx-background-color:rgba(0,0,0,0.30)" AnchorPane.bottomAnchor="0.0" AnchorPane.topAnchor="56.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0"    >
            <children>

            </children>
        </StackPane>
        <AnchorPane fx:id="navList" style="-fx-background-color:white" AnchorPane.topAnchor="56.0" AnchorPane.bottomAnchor="0.0" prefWidth="180.0" translateX="-180"   >
            <children>
                <Label text="left side menu"/>
            </children>
        </AnchorPane>

    </children>

</AnchorPane>]]></Answer>
<Answer><![CDATA[@Override
public void initialize(URL url, ResourceBundle rb) {  
    ...

    Rectangle clip = new Rectangle(rootPaneWidth, rootPaneHeight);
    rootPane.setClip(clip);
    rootPane.getChildren().add(setupShadowPane());
}

private Pane setupShadowPane() {
    Pane shadowPane = new Pane();
    shadowPane.setStyle(
        "-fx-background-color: white;" +
        "-fx-effect: dropshadow(gaussian, black, " + shadowSize + ", 0, 0, 0);" +
        "-fx-background-insets: " + shadowSize + ";"
    );

    Rectangle innerBounds = new Rectangle();
    Rectangle outerBounds = new Rectangle();
    shadowPane.layoutBoundsProperty().addListener((observable, oldBounds, newBounds) -> {
        innerBounds.relocate(newBounds.getMinX() + shadowSize, newBounds.getMinY() + shadowSize);
        innerBounds.setWidth(newBounds.getWidth() - shadowSize * 2);
        innerBounds.setHeight(newBounds.getHeight() - shadowSize * 2);
        outerBounds.setWidth(newBounds.getWidth());
        outerBounds.setHeight(newBounds.getHeight());

        Shape clip = Shape.subtract(outerBounds, innerBounds);
        shadowPane.setClip(clip);
    });

    return shadowPane;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31574311" questionTitle="JavaFX WebView grow to fill entire area">
<Answer><![CDATA[import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JPanel;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.HPos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.layout.Region;
import javafx.scene.paint.Color;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;


public class WebViewSample {

    public static void main(String[] args) {

        JFrame frame = new JFrame("Swing and JavaFX");
        frame.setSize(1000, 1000);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel(new BorderLayout(0, 0));
        frame.getContentPane().add(panel, BorderLayout.CENTER);

        final JFXPanel jfxPanel = new JFXPanel();
        panel.add(jfxPanel);

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                initFx(jfxPanel);
            }
       });
    }

    private static void initFx(JFXPanel fxPanel) {
        Stage stage = new Stage();
        stage.setTitle("Web View");
        Scene scene = new Scene(new Browser(), 1000, 1000, Color.web("#666970"));
        stage.setScene(scene);
        fxPanel.setScene(scene);
    }

}

class Browser extends Region {

    final WebView browser = new WebView();
    final WebEngine webEngine = browser.getEngine();

    public Browser() {
        // load the home page
        webEngine.load("http://www.google.com");

        //add components
        getChildren().add(browser);
    }

    @Override
    protected void layoutChildren() {
        double w = getWidth();
        double h = getHeight();
        layoutInArea(browser,0,0,w,h,0,HPos.CENTER,VPos.CENTER);
    }

}]]></Answer>
<Answer><![CDATA[import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;

/** @see https://stackoverflow.com/a/31576647/230513 */
public class WebViewTest {

    private void initAndShowGUI() {
        // This method is invoked on the EDT thread
        JFrame frame = new JFrame("Swing and JavaFX");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final JFXPanel fxPanel = new JFXPanel(){

            @Override
            public Dimension getPreferredSize() {
                return new Dimension(640, 480);
            }
        };
        frame.add(fxPanel, BorderLayout.CENTER);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        Platform.runLater(() -> {
            initFX(fxPanel);
        });
    }

    private void initFX(JFXPanel fxPanel) {
        // This method is invoked on the JavaFX thread
        Scene scene = createScene();
        fxPanel.setScene(scene);
    }

    private Scene createScene() {
        StackPane root = new StackPane();
        Scene scene = new Scene(root);
        WebView  webView = new WebView();
        WebEngine webEngine = webView.getEngine();
        webEngine.load("http://www.example.com");
        root.getChildren().add(webView);
        return scene;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new WebViewTest()::initAndShowGUI);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31539250" questionTitle="javafx catch more then one key press event at the same time">
<Answer><![CDATA[import java.util.BitSet;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Main extends Application {

    private BitSet keyboardBitSet = new BitSet();

    Scene scene;
    Label label;

    @Override
    public void start(Stage primaryStage) {
        HBox root = new HBox();

        label = new Label();

        root.getChildren().add(label);

        scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();

        scene.addEventFilter(KeyEvent.KEY_PRESSED, keyPressedEventHandler);
        scene.addEventFilter(KeyEvent.KEY_RELEASED, keyReleasedEventHandler);

        // init label text
        updateKeyboardStatus();
    }

    /**
     * "Key Pressed" handler for all input events: register pressed key in the bitset
     */
    private EventHandler<KeyEvent> keyPressedEventHandler = new EventHandler<KeyEvent>() {
        @Override
        public void handle(KeyEvent event) {

            // register key down
            keyboardBitSet.set(event.getCode().ordinal(), true);

            updateKeyboardStatus();
        }
    };

    /**
     * "Key Released" handler for all input events: unregister released key in the bitset
     */
    private EventHandler<KeyEvent> keyReleasedEventHandler = new EventHandler<KeyEvent>() {
        @Override
        public void handle(KeyEvent event) {

            // register key up
            keyboardBitSet.set(event.getCode().ordinal(), false);

            updateKeyboardStatus();
        }
    };

    /**
     * Detect all keys and show them in the label
     */
    private void updateKeyboardStatus() {

        StringBuilder sb = new StringBuilder();
        sb.append("Current key combination: ");

        int count = 0;
        for( KeyCode keyCode: KeyCode.values()) {

            if( keyboardBitSet.get(keyCode.ordinal())) {

                if( count > 0) {
                    sb.append( " ");
                }

                sb.append(keyCode.toString());

                count++;
            }

        }

        label.setText(sb.toString());

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@FXML private TextField textField;

final KeyCombination keyShiftTab = new KeyCodeCombination(KeyCode.TAB, KeyCombination.SHIFT_ANY);

@FXML
public void initialize()
{
    textField.addEventFilter(KeyEvent.KEY_RELEASED, new EventHandler<KeyEvent>()
    {
        @Override
        public void handle(KeyEvent e)
        {
            if (keyShiftTab.match(e))
            {
                doSomthing();
                e.consume();
            }
        }
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31474570" questionTitle="Java ee interface conditional inject">
<Answer><![CDATA[@Stateless
@LocalBean    
public class ResultEvaluationFacade {

    @Inject
    @Development
    private ResultEvalutationInterface dev;

    @Inject
    @Production
    private ResultEvalutionInterface prod;

    @Override
    public void evaluateResults(Event e) {
        switch (e.getType()) {
            case Type.Production:
               prod.evaluteResult(e);
               break;
            case Type.Development:
               dev.evaluteResult(e);
               break;
            default:
               throw new UnsupportedOperationException("Not supported yet.");
        }
    }

}]]></Answer>
<Answer><![CDATA[public enum MyEvents {

    EVENTA(new EventA() {
        @Override
        public Class<? extends Annotation> annotationType() {
            return this.getClass();
        }
    }),
    EVENTB (new EventB() {
        @Override
        public Class<? extends Annotation> annotationType() {
            return this.getClass();
        }
    });

    private final Annotation annotation;

    MyEvents(Annotation annotation) {
        this.annotation = annotation;
    }
    public Annotation getQualifiyer() {
        return annotation;
    }

};]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31460059" questionTitle="JavaFX datepicker - how to update date in a second datepicker object?">
<Answer><![CDATA[import java.time.LocalDate;
import javafx.scene.control.DateCell;
import javafx.scene.control.DatePicker;
import javafx.util.Callback;

public class DateChecker {

private DateChecker(){
}

public static void setBeginDateBounds(DatePicker begin_date, LocalDate end_date ){
    final Callback<DatePicker, DateCell> dayCellFactory = new Callback<DatePicker, DateCell>() {

        @Override
        public DateCell call(final DatePicker datePicker) {
            return new DateCell() {

                @Override
                public void updateItem(LocalDate item, boolean empty) {
                    super.updateItem(item, empty);
                    boolean cond = (item.isBefore(LocalDate.now()) || !item.isBefore(end_date));
                    if (cond){
                        setDisable(true);
                        setStyle("-fx-background-color: #d3d3d3;");
                    }else{
                        setDisable(false);
                        setStyle("-fx-background-color: #CCFFFF;");
                        setStyle("-fx-font-fill: black;");
                    }
                }
            };
        }   
    };
    begin_date.setDayCellFactory(dayCellFactory);       
}

public static void setEndDateBounds(DatePicker end_date, LocalDate begin_date ){
    final Callback<DatePicker, DateCell> dayCellFactory = new Callback<DatePicker, DateCell>() {

        @Override
        public DateCell call(final DatePicker datePicker) {
            return new DateCell() {

                @Override
                public void updateItem(LocalDate item, boolean empty) {
                    super.updateItem(item, empty);
                    boolean cond = (item.isBefore(LocalDate.now()) || !item.isAfter(begin_date));
                    if (cond){
                        setDisable(true);
                        setStyle("-fx-background-color: #d3d3d3;");
                    }else{
                        setDisable(false);
                        setStyle("-fx-background-color: #CCFFFF;");
                        setStyle("-fx-font-fill: black;");
                    }
                }
            };
        }   
    };
    end_date.setDayCellFactory(dayCellFactory);     
 }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main extends Application {

    private final int noOfDaysToAdd = 2;

    @Override
    public void start(Stage primaryStage) throws Exception {

        VBox root = new VBox(10);
        root.setAlignment(Pos.CENTER);
        Label checkInLabel = new Label("Check In :    ");
        Label checkOutLabel = new Label("Check Out : ");
        DatePicker picker1 = new DatePicker();
        DatePicker picker2 = new DatePicker();

        // Listener for updating the checkout date w.r.t check in date
        picker1.valueProperty().addListener((ov, oldValue, newValue) -> {
            picker2.setValue(newValue.plusDays(noOfDaysToAdd));
        });

        HBox checkInBox = new HBox(10, checkInLabel, picker1);
        HBox checkOutBox = new HBox(10, checkOutLabel, picker2);
        checkInBox.setAlignment(Pos.CENTER);
        checkOutBox.setAlignment(Pos.CENTER);

        root.getChildren().addAll(checkInBox, checkOutBox);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31434137" questionTitle="Timer-Class should call Methods after some Time">
<Answer><![CDATA[import java.util.TimerTask;

class TimerHelper<T extends TimerTask> extends TimerTask {

    T timer = null;

    public TimerHelper(T timer) {
        this.timer = timer;
    }

    public static void main(String[] args) {
        SubTimer sub = new SubTimer();
        TimerHelper<TimerTask> t = new TimerHelper<TimerTask>(sub);
        t.run();
    }

    @Override
    public synchronized void run() {
        try {
            timer.run();
        } catch (Throwable e) {
            try {
                e.printStackTrace();
                wait(1000);
                run();
            } catch (InterruptedException e1) {
            }
        }
    }

    static class SubTimer extends TimerTask {
        int x = 0;

        @Override
        public void run() {
            if (x++ < 3)
                throw new RuntimeException("try again");
            System.out.println("do something, finally!");
        }
    }
}]]></Answer>
<Answer><![CDATA[public class TimerHelper extends TimerTask {


Callable<Void> task;
private Timer timer;
long delay;

public TimerHelper(Callable<Void> task) {
    timer = new Timer();
    delay = 500;
    this.task = task;
    run();
}

@Override
public void run() {

    if (delay < 3600000) {

        try {
            task.call();
            timer.cancel();
        } catch (Exception e) {
            delay = delay + delay;
            timer.schedule(new TimerHelper(task), delay);
        }
    } else {
        try {
            timer.cancel();
        } catch (TimeLimitExceededException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
  }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31270759" questionTitle="A better approach to handling exceptions in a functional way">
<Answer><![CDATA[@FunctionalInterface
public interface ThrowingSupplier<R, X extends Throwable> {
    public R get() throws X;

    default public Supplier<R> fallbackTo(Supplier<? extends R> supplier) {
        ThrowingSupplier<R, Nothing> t = supplier::get;
        return orTry(t)::get;
    }

    default public <Y extends Throwable> ThrowingSupplier<R, Y> orTry(
            ThrowingSupplier<? extends R, ? extends Y> supplier) {
        Objects.requireNonNull(supplier, "supplier");
        return () -> {
            try {
                return get();
            } catch (Throwable x) {
                try {
                    return supplier.get();
                } catch (Throwable y) {
                    y.addSuppressed(x);
                    throw y;
                }
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[/*
 * Copyright (c) 2015, Marko Topolnik. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public final class Exceptional<T>
{
  private final T value;
  private final Throwable exception;

  private Exceptional(T value, Throwable exc) {
    this.value = value;
    this.exception = exc;
  }

  public static <T> Exceptional<T> empty() {
    return new Exceptional<>(null, null);
  }

  public static <T> Exceptional<T> ofNullable(T value) {
    return value != null ? of(value) : empty();
  }

  public static <T> Exceptional<T> of(T value) {
    return new Exceptional<>(Objects.requireNonNull(value), null);
  }

  public static <T> Exceptional<T> ofNullableException(Throwable exception) {
    return exception != null? new Exceptional<>(null, exception) : empty();
  }

  public static <T> Exceptional<T> ofException(Throwable exception) {
    return new Exceptional<>(null, Objects.requireNonNull(exception));
  }

  public static <T> Exceptional<T> from(TrySupplier<T> supplier) {
    try {
      return ofNullable(supplier.tryGet());
    } catch (Throwable t) {
      return new Exceptional<>(null, t);
    }
  }

  public static Exceptional<Void> fromVoid(TryRunnable task) {
    try {
      task.run();
      return new Exceptional<>(null, null);
    } catch (Throwable t) {
      return new Exceptional<>(null, t);
    }
  }

  public static <E extends Throwable> Consumer<? super E> swallow() {
    return e -> {};
  }

  public T get() {
    if (value != null) return value;
    if (exception != null) sneakyThrow(exception);
    throw new NoSuchElementException("No value present");
  }

  public T orElse(T other) {
    if (value != null) return value;
    if (exception != null) sneakyThrow(exception);
    return other;
  }

  public T orElseGet(Supplier<? extends T> other) {
    if (value != null) return value;
    if (exception != null) sneakyThrow(exception);
    return other.get();
  }

  public<U> Exceptional<U> map(Function<? super T, ? extends U> mapper) {
    Objects.requireNonNull(mapper);
    if (value == null) return new Exceptional<>(null, exception);
    final U u;
    try {
      u = mapper.apply(value);
    } catch (Throwable exc) {
      return new Exceptional<>(null, exc);
    }
    return ofNullable(u);
  }

  public<U> Exceptional<U> flatMap(Function<? super T, Exceptional<U>> mapper) {
    Objects.requireNonNull(mapper);
    return value != null ? Objects.requireNonNull(mapper.apply(value)) : empty();
  }

  public Exceptional<T> filter(Predicate<? super T> predicate) {
    Objects.requireNonNull(predicate);
    if (value == null) return this;
    final boolean b;
    try {
      b = predicate.test(value);
    } catch (Throwable t) {
      return ofException(t);
    }
    return b ? this : empty();
  }

  public <X extends Throwable> Exceptional<T> recover(
      Class<? extends X> excType, Function<? super X, T> mapper)
  {
    Objects.requireNonNull(mapper);
    return excType.isInstance(exception) ? ofNullable(mapper.apply(excType.cast(exception))) : this;
  }

  public <X extends Throwable> Exceptional<T> recover(
      Iterable<Class<? extends X>> excTypes, Function<? super X, T> mapper)
  {
    Objects.requireNonNull(mapper);
    for (Class<? extends X> excType : excTypes)
      if (excType.isInstance(exception))
        return ofNullable(mapper.apply(excType.cast(exception)));
    return this;
  }

  public <X extends Throwable> Exceptional<T> flatRecover(
      Class<? extends X> excType, Function<? super X, Exceptional<T>> mapper)
  {
    Objects.requireNonNull(mapper);
    return excType.isInstance(exception) ? Objects.requireNonNull(mapper.apply(excType.cast(exception))) : this;
  }

  public <X extends Throwable> Exceptional<T> flatRecover(
      Iterable<Class<? extends X>> excTypes, Function<? super X, Exceptional<T>> mapper)
  {
    Objects.requireNonNull(mapper);
    for (Class<? extends X> c : excTypes)
      if (c.isInstance(exception))
        return Objects.requireNonNull(mapper.apply(c.cast(exception)));
    return this;
  }

  public <E extends Throwable> Exceptional<T> propagate(Class<E> excType) throws E {
    if (excType.isInstance(exception))
      throw excType.cast(exception);
    return this;
  }

  public <E extends Throwable> Exceptional<T> propagate(Iterable<Class<? extends E>> excTypes) throws E {
    for (Class<? extends E> excType : excTypes)
      if (excType.isInstance(exception))
        throw excType.cast(exception);
    return this;
  }

  public <E extends Throwable, F extends Throwable> Exceptional<T> propagate(
      Class<E> excType, Function<? super E, ? extends F> translator)
  throws F
  {
    if (excType.isInstance(exception))
      throw translator.apply(excType.cast(exception));
    return this;
  }

  public <E extends Throwable, F extends Throwable> Exceptional<T> propagate(
      Iterable<Class<E>> excTypes, Function<? super E, ? extends F> translator)
  throws F
  {
    for (Class<? extends E> excType : excTypes)
      if (excType.isInstance(exception))
        throw translator.apply(excType.cast(exception));
    return this;
  }

  public <E extends Throwable> Exceptional<T> handle(Class<E> excType, Consumer<? super E> action) {
    if (excType.isInstance(exception)) {
      action.accept(excType.cast(exception));
      return empty();
    }
    return this;
  }

  public <E extends Throwable> Exceptional<T> handle(Iterable<Class<E>> excTypes, Consumer<? super E> action) {
    for (Class<? extends E> excType : excTypes)
      if (excType.isInstance(exception)) {
        action.accept(excType.cast(exception));
        return empty();
      }
    return this;
  }

  public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {
    if (value != null) return value;
    if (exception != null) sneakyThrow(exception);
    throw exceptionSupplier.get();
  }

  public boolean isPresent() {
    return value != null;
  }

  public void ifPresent(Consumer<? super T> consumer) {
    if (value != null)
      consumer.accept(value);
    if (exception != null) sneakyThrow(exception);
  }

  public boolean isException() {
    return exception != null;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    return obj instanceof Exceptional && Objects.equals(value, ((Exceptional)obj).value);
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(value);
  }

  @SuppressWarnings("unchecked")
  private static <T extends Throwable> void sneakyThrow(Throwable t) throws T {
    throw (T) t;
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31227149" questionTitle="Why is this type inference not working with this Lambda expression scenario?">
<Answer><![CDATA[public class HelloWorld{
static class Value<T> {
}

@FunctionalInterface
interface Bar<T,R> {
      R apply(Value<T> value); // Return type added
}

static class Foo {
  public static <T,R> R foo(Bar<T,R> callback) {
      return callback.apply(new Value<T>());
  }
}

void test() {
  System.out.println( Foo.foo(value -> true).booleanValue() ); // No compile error here
}
     public static void main(String []args){
         new HelloWorld().test();
     }
}]]></Answer>
<Answer><![CDATA[LambdaInference.java:16: Note: resolving method foo in type Foo to candidate 0
    Foo.foo((Value<Boolean> value) -> true).booleanValue(); // Compile error here
       ^
  phase: BASIC
  with actuals: Bar<Boolean>
  with type-args: no arguments
  candidates:
      #0 applicable method found: <T>foo(Bar<T>)
        (partially instantiated to: (Bar<Boolean>)Boolean)
  where T is a type-variable:
    T extends Object declared in method <T>foo(Bar<T>)
LambdaInference.java:16: Note: Deferred instantiation of method <T>foo(Bar<T>)
    Foo.foo((Value<Boolean> value) -> true).booleanValue(); // Compile error here
           ^
  instantiated signature: (Bar<Boolean>)Boolean
  target-type: <none>
  where T is a type-variable:
    T extends Object declared in method <T>foo(Bar<T>)
LambdaInference.java:16: Note: resolving method booleanValue in type Boolean to candidate 0
    Foo.foo((Value<Boolean> value) -> true).booleanValue(); // Compile error here
                                           ^
  phase: BASIC
  with actuals: no arguments
  with type-args: no arguments
  candidates:
      #0 applicable method found: booleanValue()]]></Answer>
<Answer><![CDATA[public class TestApp {

  public static void main(String[] args) {
    Value<Boolean> boolVal = new Value<>(false);
    Value<String> stringVal = new Value<>("false");

    Callback<Value<Boolean>, Boolean> boolCb = (v) -> v.getField();
    Callback<Value<String>, String> stringCb = (v) -> v.getField();

    UsingClass<Boolean> usingClass = new UsingClass<>();
    boolean val = usingClass.foo(boolCb, boolVal);
    System.out.println("Boolean value: " + val);

    UsingClass<String> usingClass1 = new UsingClass<>();
    String val1 = usingClass1.foo(stringCb, stringVal);
    System.out.println("String value: " + val1);

    // this will give you a clear and understandable compiler error
    //boolean val = usingClass.foo(boolCb, stringVal);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31227061" questionTitle="How to calculate the rank of a player from a list">
<Answer><![CDATA[public class PlayerService { 

@Autowired 
private PlayerRepository playerRepository;


public List<Ranking> findAllRanking(Long limit) {
    List<Player> players = playerRepository.findAll();

   // --- sorting players according to their scores
   Collections.sort(players, new Comparator<Player>(){
          @Override
          public int compare(Players thiz, Player that){
                 return new Integer(thiz.scores).compareTo(that.scores);
           });

   List<Ranking> rankingList = new ArrayList<>();
   int i = 0;
   for(Player p : players){
       rankingList.add(new Ranking(p.score, ++i));
   }

    return rankingList; 
}]]></Answer>
<Answer><![CDATA[List<Player> players = new ArrayList<Player>() {{
        add(new Player(1L, "a", 5));
        add(new Player(2L, "b", 7));
        add(new Player(3L, "c", 8));
        add(new Player(4L, "d", 9));
        add(new Player(5L, "e", 3));
        add(new Player(6L, "f", 8));
     }};
     int[] score = {Integer.MIN_VALUE};
     int[] no = {0};
     int[] rank = {0};
     List<Ranking> ranking = players.stream()
         .sorted((a, b) -> b.getScores() - a.getScores())
         .map(p -> {
             ++no[0];
             if (score[0] != p.getScores()) rank[0] = no[0];
             return new Ranking(rank[0], score[0] = p.getScores());
         })
         // .distinct() // if you want to remove duplicate rankings.
         .collect(Collectors.toList());
     System.out.println(ranking);
    // result:
    // rank=1, score=9
    // rank=2, score=8
    // rank=2, score=8
    // rank=4, score=7
    // rank=5, score=5
    // rank=6, score=3]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31139260" questionTitle="Add a button to a cells in a TableView (JAVAFX)">
<Answer><![CDATA[import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class TableViewWithEditButton extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<Person> table = new TableView<>();
        table.getColumns().add(column("First Name", Person::firstNameProperty, 150));
        table.getColumns().add(column("Last Name", Person::lastNameProperty, 150));
        table.getColumns().add(column("Email", Person::emailProperty, 200));

        TableColumn<Person, Person> editColumn = column("Edit", ReadOnlyObjectWrapper<Person>::new, 60);

        table.getColumns().add(editColumn);

        editColumn.setCellFactory(col -> {
            Button editButton = new Button("Edit");
            TableCell<Person, Person> cell = new TableCell<Person, Person>() {
                @Override
                public void updateItem(Person person, boolean empty) {
                    super.updateItem(person, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(editButton);
                    }
                }
            };

            editButton.setOnAction(e -> edit(cell.getItem(), primaryStage));

            return cell ;
        });

        table.getItems().addAll(
                new Person("Jacob", "Smith", "jacob.smith@example.com"),
                new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
                new Person("Ethan", "Williams", "ethan.williams@example.com"),
                new Person("Emma", "Jones", "emma.jones@example.com"),
                new Person("Michael", "Brown", "michael.brown@example.com")
        );

        primaryStage.setScene(new Scene(new BorderPane(table)));
        primaryStage.show();
    }

    private void edit(Person person, Stage primaryStage) {
        TextField firstNameTextField = boundTF(person.firstNameProperty());
        TextField lastNameTextField = boundTF(person.lastNameProperty());
        TextField emailTextField = boundTF(person.emailProperty());

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(16));


        grid.addRow(0, new Label("First name:"), firstNameTextField);
        grid.addRow(1, new Label("Last name:"), lastNameTextField);
        grid.addRow(2, new Label("Email:"), emailTextField);

        Button okButton = new Button("OK");

        grid.add(okButton, 0, 3, 2, 1);

        ColumnConstraints leftCol = new ColumnConstraints();
        leftCol.setHgrow(Priority.NEVER);
        leftCol.setHalignment(HPos.RIGHT);
        ColumnConstraints rightCol = new ColumnConstraints();
        rightCol.setHgrow(Priority.SOMETIMES);
        grid.getColumnConstraints().addAll(leftCol, rightCol);
        GridPane.setHalignment(okButton, HPos.CENTER);

        Scene scene = new Scene(grid);
        Stage stage = new Stage();

        okButton.setOnAction(e -> stage.hide());
        firstNameTextField.setOnAction(e -> stage.hide());
        lastNameTextField.setOnAction(e -> stage.hide());
        emailTextField.setOnAction(e -> stage.hide());

        stage.initModality(Modality.APPLICATION_MODAL);
        stage.initOwner(primaryStage);
        stage.initStyle(StageStyle.UNDECORATED);
        stage.setScene(scene);
        stage.show();
    }

    private TextField boundTF(StringProperty binding) {
        TextField textField = new TextField();
        textField.textProperty().bindBidirectional(binding);
        textField.setMinWidth(80);
        return textField ;
    }

    private <S,T> TableColumn<S,T> column(String title, Function<S, ObservableValue<T>> property, double width) {
        TableColumn<S,T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> property.apply(cellData.getValue()));
        col.setPrefWidth(width);
        return col ;
    }

    public static class Person {
        private final StringProperty firstName = new SimpleStringProperty();
        private final StringProperty lastName = new SimpleStringProperty();
        private final StringProperty email = new SimpleStringProperty();

        public Person(String firstName, String lastName, String email) {
            setFirstName(firstName);
            setLastName(lastName);
            setEmail(email);
        }

        public final StringProperty firstNameProperty() {
            return this.firstName;
        }

        public final java.lang.String getFirstName() {
            return this.firstNameProperty().get();
        }

        public final void setFirstName(final java.lang.String firstName) {
            this.firstNameProperty().set(firstName);
        }

        public final StringProperty lastNameProperty() {
            return this.lastName;
        }

        public final java.lang.String getLastName() {
            return this.lastNameProperty().get();
        }

        public final void setLastName(final java.lang.String lastName) {
            this.lastNameProperty().set(lastName);
        }

        public final StringProperty emailProperty() {
            return this.email;
        }

        public final java.lang.String getEmail() {
            return this.emailProperty().get();
        }

        public final void setEmail(final java.lang.String email) {
            this.emailProperty().set(email);
        }


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[package tablebuttoncolumndemo;

import javafx.application.Application;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class TableButtonColumnDemo extends Application {

    @Override
    public void start(Stage primaryStage) {

        ObservableList<EditableFileRow> data = FXCollections.observableArrayList(
                new EditableFileRow("A File"),
                new EditableFileRow("A Big File"),
                new EditableFileRow("A Lost File")
        );

        TableColumn editColumn = new TableColumn("Edit");
        editColumn.setCellValueFactory(new PropertyValueFactory<>("editButton"));
        TableColumn fileNameColumn = new TableColumn("File Name");
        fileNameColumn.setCellValueFactory(new PropertyValueFactory<>("fileName"));
        TableView table = new TableView();
        table.getColumns().addAll(editColumn, fileNameColumn);
        table.setItems(data);

        StackPane root = new StackPane();

        root.getChildren().add(table);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Button Column Demo");
        primaryStage.setScene(scene);

        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    public static class EditButton extends Button {

        public EditButton(String fileName) {
            super("Edit");
            setOnAction((event) -> {
                Alert alert = new Alert(AlertType.INFORMATION);
                alert.setTitle("Hey!");
                alert.setHeaderText(null);
                alert.setContentText("You're editing \"" + fileName + "\"");
                alert.showAndWait();
            });
        }
    }

    public static class EditableFileRow {

        private final SimpleStringProperty fileName;
        private final SimpleObjectProperty<EditButton> editButton;

        public EditableFileRow(String fileName) {
            this.fileName = new SimpleStringProperty(fileName);
            editButton = new SimpleObjectProperty(new EditButton(fileName));
        }

        public String getFileName() {
            return fileName.get();
        }

        public void setFileName(String fName) {
            fileName.set(fName);
        }

        public StringProperty fileNameProperty() {
            return fileName;
        }

        public EditButton getEditButton() {
            return editButton.get();
        }

        public void setEditButton(EditButton editButton) {
            this.editButton.set(editButton);
        }

        public ObjectProperty<EditButton> editButtonProperty() {
            return editButton;
        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31125306" questionTitle="Template method design pattern using Java 8">
<Answer><![CDATA[public final class FlowManager {
    private final Runnable phase1;
    private final Runnable phase2;

    public FlowManager(Runnable phase1, Runnable phase2) {
        this.phase1 = phase1;
        this.phase2 = phase2;
    }

    public void startFlow() {
        phase1.run();
        phase2.run();
    }

    public void phase1() {
        phase1.run();
    }

    public void phase2() {
        phase2.run();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.Consumer;
public class Main {

public static void main(String args[]){

new FlowManager2<String>().startFlow("Helo World",
            (String message)->System.out.println("Phase 1 : "+ message),
            (String message)->System.out.println("Phase 2 : "+ message));

    Consumer<String> phase1 = 
                 (String message)-> System.out.println("Phase 1 : "+ message);
    Consumer<String> phase2 = 
                 (String message)-> System.out.println("Phase 2 : "+ message);

    new FlowManager2<String>().startFlow("Helo World",
            phase1,
            phase2);

}
}]]></Answer>
<Answer><![CDATA[public class Mast {

    public static void main(String[] args) {
        //1.save to db



        new Template().template(1,
                          projectId->getMastsfromMongo(projectId),
                          masts-> masts.stream().map(mast->mast.getName()).collect(Collectors.toList()), 
                          names->System.out.println("save names to db "+ names));
        //new Template(1, id->Arrays, );

        //2.print to console


        new Template().template(2,
                          projectId->getMastsSomewhere(projectId),
                          masts-> masts.stream().map(mast->mast.getLat()).collect(Collectors.toList()), 
                          names->System.out.println("print lons to console "+ names));
    }



    private static List<Mast> getMastsfromMongo(int projectId){

        Mast m1 = new Mast("1", 110, 23);
        Mast m2 = new Mast("2", 111, 13);

        return Arrays.asList(m1, m2);
    }

    private static List<Mast> getMastsSomewhere(int projectId){

        Mast m1 = new Mast("3", 120, 53);
        Mast m2 = new Mast("4", 121, 54);

        return Arrays.asList(m1, m2);
    }





        private String name;
        private double lon;
        private double lat;

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public double getLon() {
            return lon;
        }
        public void setLon(double lon) {
            this.lon = lon;
        }
        public double getLat() {
            return lat;
        }
        public void setLat(double lat) {
            this.lat = lat;
        }

        public Mast(String name, double lon, double lat) {
            super();
            this.name = name;
            this.lon = lon;
            this.lat = lat;
        }


}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31094414" questionTitle="JavaFX print multiple pages from a grid pane">
<Answer><![CDATA[// Get the print page size:
final double  prnW = pageLayout.getPrintableWidth();
final double  prnH = pageLayout.getPrintableHeight();

// Work out how many pages across and down are needed (This code may not work?):
final int  pagesAcross = (int) Math.ceil( gridPane.getWidth() / prnW );
final int  pagesDown = (int) Math.ceil( gridPane.getHeight() / prnH );

/* Print pages down and then across like so:
   1    3
   2    4
   Swop the for loops around if you want to print pages across first and then down.
*/
for ( int pgCol = 0; pgCol < pagesAcross; pgCol++ )
{
    for ( int pgRow = 0; pgRow < pagesDown; pgRow++ )
    {
        gridPane.setTranslateX( -(prnW * pgCol) );
        gridPane.setTranslateY( -(prnH * pgRow) );
        job.printPage( pageLayout, gridPane );
    }
}

job.endJob();]]></Answer>
<Answer><![CDATA[@FXML
private void onBuildRpt(ActionEvent e) throws IOException {

if(list.size()==0) {
Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("No Data for Report\n"+
"Select File then Alt + A to Add New Data");
alert.showAndWait();
return;
}

int row = 0;
togp = new ArrayList<>();
pane.setVisible(false);
paneRpt.setVisible(true);
gpRpt.setVisible(true);
gpRpt.getChildren().clear();
//gpRpt.gridLinesVisibleProperty().set(true);
//gpRpt.setLayoutX(20);
//gpRpt.setLayoutY(10);

int R = 2;

File file = new File("C:/A_Hospital/Patients.csv");
Path dirP = Paths.get(String.valueOf(file));
InputStream in = Files.newInputStream(dirP);
BufferedReader reader = new BufferedReader(new InputStreamReader(in));
scan = new Scanner(reader);
scan.useDelimiter("\\s*,\\s*");


while (scan.hasNext()){
String hospnum = scan.next();
String fname = scan.next();
String lname = scan.next();
String roomnum = scan.next();

togp.add(hospnum);
togp.add(fname);
togp.add(lname);
togp.add(roomnum);
}

scan.close();

for(int p = 0; p < togp.size(); p++){

row = row + 1;

Text txt0 = new Text(""+row);
//row number
GridPane.setHalignment(txt0, HPos.CENTER);
txt0.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));`
gpRpt.add(txt0, 0, R);

Text txt1 = new Text(togp.get(p));
//hospnum
GridPane.setHalignment(txt1, HPos.CENTER);
txt1.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));`
gpRpt.add(txt1, 1, R);

Text txt2 = new Text(togp.get(p=p+1));
//fname
GridPane.setHalignment(txt2, HPos.LEFT);
txt2.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));`
gpRpt.add(txt2 , 2, R);

Text txt3 = new Text(togp.get(p=p+1));
//lname
GridPane.setHalignment(txt3, HPos.LEFT);
txt3.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));`
gpRpt.add(txt3, 3, R);

Text txt4 = new Text(togp.get(p=p+1));
//roomnum
GridPane.setHalignment(txt4, HPos.LEFT);
txt4.setFont(Font.font("Times New Roman", FontWeight.BLACK,
`FontPosture.REGULAR, 14));`
gpRpt.add(txt4, 4, R);

Text txtS0 = new Text(" ");
txtS0.prefHeight(5);
Text txtS1 = new Text(" ");
txtS1.prefHeight(5);
Text txtS2 = new Text(" ");
txtS2.prefHeight(5);
Text txtS3 = new Text(" ");
txtS3.prefHeight(5);
GridPane.setFillHeight(txtS0, true);
gpRpt.add(txtS0, 0, R+1);
GridPane.setFillHeight(txtS1, true);
gpRpt.add(txtS1, 1, R+1);
GridPane.setFillHeight(txtS2, true);
gpRpt.add(txtS2, 2, R+1);
GridPane.setFillHeight(txtS3, true);
gpRpt.add(txtS3, 3, R+1);

R = R + 2;
}
txfStartRow.requestFocus();
}
@FXML
private void printRpt() {
//This method just clears the gpRpt and
//reloads it with selected row number range 
if(txfStartRow.getText().isEmpty() || txfEndRow.getText().isEmpty()) {  


Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("No Data Entered\n"+
"Enter Start Row Number and End Row Number");
alert.showAndWait();

if(txfStartRow.getText().isEmpty()) {
    txfStartRow.requestFocus();
return;
}
if(txfEndRow.getText().isEmpty()) {
    txfEndRow.requestFocus();
return;
}
return;
}

String regX1 = ("[0-9\\^W]*");
String W1 = String.valueOf(txfStartRow.getText().trim());
if(!W1.matches(regX1) || Integer.valueOf(W1) > togp.size()/4) {

Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("Numeric Values Only\n"+
"\nAcceptable Rows 1 to "+ togp.size()/4 +" Can Be Entered");
alert.showAndWait();

txfStartRow.requestFocus();     
return;
}

String regX2 = ("[0-9\\^W]*");
String W2 = String.valueOf(txfEndRow.getText().trim());
if(!W2.matches(regX2) || Integer.valueOf(W2) > togp.size()/4) {
Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("Numeric Values Only\n"+
"\nAcceptable Rows 1 to "+ togp.size()/4 +" Can Be Entered");
alert.showAndWait();
txfEndRow.requestFocus();


return;
}

if(Integer.valueOf(txfStartRow.getText()) <= 0 || 
Integer.valueOf(txfEndRow.getText()) <=0) {
Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("Data Entry Error\n"+
"Start & End Rows Can NOT be zero");
alert.showAndWait();
txfStartRow.setText("");
txfEndRow.setText("");
txfStartRow.requestFocus();
return;
}

if(Integer.valueOf(txfEndRow.getText()) - Integer.valueOf
(txfStartRow.getText()) > 19) {

Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("Printing Issue\n"+
"Max Report Size 20 Rows");
alert.showAndWait();
//txfStartRow.setText("");
//txfEndRow.setText("");
txfStartRow.requestFocus();
return;
}

if(Integer.valueOf(txfStartRow.getText()) > 
Integer.valueOf(txfEndRow.getText())) {
Alert alert = new Alert(Alert.AlertType.WARNING);
alert.setTitle("Information");
alert.setHeaderText("");
alert.setContentText("Data Entry Error\n"+
"Start Row Greater than End Row");
alert.showAndWait();
//txfStartRow.setText("");
//txfEndRow.setText("");
txfStartRow.requestFocus();
return;
}

//Fancy Math for Row Calculation to find togp index
//This should work no matter the size of the togp ArrayList
int SR = Integer.valueOf(txfStartRow.getText());
SR = SR * 3 + SR - 4;
int ER = Integer.valueOf(txfEndRow.getText());
ER = ER * 3 + ER - 3;

gpRpt.getChildren().clear();
int row = 0;
int R = 2;

Text txtH0 = new Text("Row");
GridPane.setHalignment(txtH0, HPos.CENTER);
txtH0.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txtH0, 0, 0);

Text txtH1 = new Text("Hospital ID");
GridPane.setHalignment(txtH1, HPos.CENTER);
txtH1.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txtH1, 1, 0);

Text txtH2 = new Text("First Name");
GridPane.setHalignment(txtH2, HPos.LEFT);
txtH2.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txtH2, 2, 0);

Text txtH3 = new Text("Last Name");
GridPane.setHalignment(txtH3, HPos.LEFT);
txtH3.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txtH3, 3, 0);

Text txtH4 = new Text("Room");
GridPane.setHalignment(txtH4, HPos.LEFT);
txtH4.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));`
gpRpt.add(txtH4, 4, 0);

for(int p = SR; p < ER; p++){

row = row + 1;

Text txt0 = new Text(""+row);
//row #
GridPane.setHalignment(txt0, HPos.CENTER);
txt0.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txt0, 0, R);

Text txt1 = new Text(togp.get(p));
//hospnum
GridPane.setHalignment(txt1, HPos.CENTER);
txt1.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txt1, 1, R);

Text txt2 = new Text(togp.get(p=p+1));
//fname
GridPane.setHalignment(txt2, HPos.LEFT);
txt2.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txt2 , 2, R);

Text txt3 = new Text(togp.get(p=p+1));
//lname
GridPane.setHalignment(txt3, HPos.LEFT);
txt3.setFont(Font.font("Times New Roman", FontWeight.BLACK, FontPosture.REGULAR, 14));
gpRpt.add(txt3, 3, R);

Text txt4 = new Text(togp.get(p=p+1));
//roomnum
GridPane.setHalignment(txt4, HPos.LEFT);
txt4.setFont(Font.font("Times New Roman", FontWeight.BLACK,
FontPosture.REGULAR, 14));
gpRpt.add(txt4, 4, R);

Text txtS0 = new Text(" ");
txtS0.prefHeight(5);
Text txtS1 = new Text(" ");
txtS1.prefHeight(5);
Text txtS2 = new Text(" ");
txtS2.prefHeight(5);
Text txtS3 = new Text(" ");
txtS3.prefHeight(5);
GridPane.setFillHeight(txtS0, true);
gpRpt.add(txtS0, 0, R+1);
GridPane.setFillHeight(txtS1, true);
gpRpt.add(txtS1, 1, R+1);
GridPane.setFillHeight(txtS2, true);
gpRpt.add(txtS2, 2, R+1);
GridPane.setFillHeight(txtS3, true);
gpRpt.add(txtS3, 3, R+1);

R = R + 2;
}
onPrint();
}

public void onPrint(){  
//gpRpt.gridLinesVisibleProperty().set(true);
gpRpt.setStyle("-fx-background-color:transparent");
print(gpRpt, selectedPrinter);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31017557" questionTitle="How can I close a Javafx 2.2 Tab when clicking a save/cancel button inside it?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
}

    @Override
    public void start(Stage primaryStage) throws Exception {
        TabPane tabPane = new TabPane();

        for(int i=1;i<=5;i++) {
            Tab tab = new Tab("Tab " + i);
            Button button = new Button("Close Current Tab");
            button.setOnAction(e -> tabPane.getTabs().remove(tab));
            tab.setContent(new StackPane(button));
            tabPane.getTabs().add(tab);
        }

        VBox container  = new VBox(tabPane);
        tabPane.prefHeightProperty().bind(container.heightProperty());
        Scene scene = new Scene(container, 500, 500);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[public Tab abaUsuario( String nome )
{
    try
    {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation( Principal.class.getResource( "controls/novoUsuarioForm.fxml" ) );
        AnchorPane novoUsuario = ( AnchorPane ) loader.load();
        //UsuarioDAO usrDAO = new UsuarioDAO();
        //Usuario usr = new Usuario();

        // NovoUsuarioFormController nvu = new NovoUsuarioFormController();

        NovoUsuarioFormController nvu = (NovoUsuarioFormController) loader.getController();
        nvu.setMainApp( this );

        Tab t = new Tab( nome );
        t.setContent( novoUsuario );
        return t;
    }
    catch ( IOException ex )
    {
        Dialogs.showErrorDialog( primaryStage, ex.getMessage(), "Erro ao inserir Usuário", "JANELA DE ERRO" );
        //ex.getCause().printStackTrace();
    }
    return null;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30995165" questionTitle="Declare Consumer and action with it in one line">
<Answer><![CDATA[import java.util.function.BiConsumer;

public class MyObj {
    public static enum Field {
        FIRST_NAME(MyObj::setFirstName),
        LAST_NAME(MyObj::setLastName);

        Field(BiConsumer<MyObj, String> setter) {
            this.setter = setter;
        }

        final BiConsumer<MyObj, String> setter;
    }

    public void set(Field field, String value) {
        field.setter.accept(this, value);
    }

    public void setFirstName(String s) {...}
    public void setLastName(String s) {...}
}]]></Answer>
<Answer><![CDATA[public enum Field {

    FIRST_NAME {
        public void setValue(String value, Person person) {
            person.setFirstName(value);
        }},

    LAST_NAME {
        public void setValue(String value, Person person) {
            person.setLastName(value);
        }};

    public abstract void setValue(String value, Person person);
}

public class Person {

    private String firstName;
    private String lastName;

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void clearUsingConsumer(Field field, String value) {
        field.setValue(value, this);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30943656" questionTitle="Scene change vs Pane change">
<Answer><![CDATA[public class GameController {

private Parent mainMenu;
    private Stage stage;
    private Scene scene;

/** Constructor which receives a Stage */
    public GameController(Stage stage) {
        this.stage = stage;

    }

public void start() {

        /** Initialize the MainMenu */
        initializeMenu(mainMenu, "/view/MainMenuStructure.fxml");
this.setScene(new Scene(mainMenu));
        stage.setScene(scene);
        stage.setFullScreen(true);
        stage.setFullScreenExitHint("");
        stage.show();
    }

    @FXML
    private void MainMenu(ActionEvent event) {
        setRoot(mainMenu);

    }

    /** Initialize the menus and the in game screen */
    private void initializeMenu(Parent parent, String path) {
        FXMLLoader loader = new FXMLLoader(getClass().getResource(path));
        loader.setController(this);

        if (parent == mainMenu) {
            try {
                this.setMainMenu(loader.load());
            } catch (IOException e) {

                e.printStackTrace();
            }
        }
}

private void setRoot(Parent parent) {
        this.getStage().getScene().setRoot(parent);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;

import java.io.IOException;

public class Controller {

    @FXML
    private Button button;

    @FXML
    public void initialize() {
    }

    @FXML
    private void changeScene(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/scene2.fxml"));
            Parent parent = loader.load();
            ((Stage)button.getScene().getWindow()).setScene(new Scene(parent, 200, 200));
        } catch (IOException eox) {
            eox.printStackTrace();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30935279" questionTitle="JavaFX Input Validation Textfield">
<Answer><![CDATA[public class JavaFxSample extends Application {

@Override
public void start(Stage primaryStage) {
    primaryStage.setTitle("Enter number and hit the button");
    GridPane grid = new GridPane();
    grid.setAlignment(Pos.CENTER);
    Label label1To6 = new Label("1.0-6.0:");
    grid.add(label1To6, 0, 1);
    TextField textField1To6 = new TextField();

    textField1To6.focusedProperty().addListener((arg0, oldValue, newValue) -> {
        if (!newValue) { // when focus lost
                if (!textField1To6.getText().matches("[1-5](\\.[0-9]{1,2}){0,1}|6(\\.0{1,2}){0,1}")) {
                    // when it not matches the pattern (1.0 - 6.0)
                    // set the textField empty
                    textField1To6.setText("");
                }
            }
        });
    grid.add(textField1To6, 1, 1);
    grid.add(new Button("Hit me!"), 2, 1);
    Scene scene = new Scene(grid, 300, 275);
    primaryStage.setScene(scene);
    primaryStage.show();
}

public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
<Answer><![CDATA[/**
 * Called this when the user clicks on the save button or finish to fill the text field.
 */
private void handleSave() {
        // If the inputs are valid we save the data
        if(isInputValid()){
            note=(DOUBLE.parseDouble(textField.getText()));
        }else // do something such as notify the user and empty the field
}

/**
 * Validates the user input in the text fields.
 * 
 * @return true if the input is valid
 */
private boolean isInputValid() {
    Boolean b= false;
    if (!(textField.getText() == null || textFiled.getText().length() == 0)) {
        try {
            // Do all the validation you need here such as
            Double d = Double.parseInt(textFiled.getText());
            if ( 1.0<d<6.0){
                b=true;
            }
        } catch (NumberFormatException e) { 
        }
    return b;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30915007" questionTitle="JavaFX FilteredList, filtering based on property of items in the list">
<Answer><![CDATA[import java.util.stream.IntStream;

import javafx.beans.Observable;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener.Change;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;


public class DynamicFilteredListTest {

    public static void main(String[] args) {

        ObservableList<Item> baseList = FXCollections.observableArrayList(item -> 
                new Observable[] {item.filteredProperty()});

        FilteredList<Item> list = new FilteredList<>(baseList, t -> ! t.isFiltered());

        list.addListener((Change<? extends Item> c) -> {
            while (c.next()) {
                if (c.wasAdded()) {
                    System.out.println(c.getAddedSubList()+ " added to filtered list");
                }
                if (c.wasRemoved()) {
                    System.out.println(c.getRemoved()+ " removed from filtered list");
                }
            }
        });

        System.out.println("Adding ten items to base list:\n");

        IntStream.rangeClosed(1, 10).mapToObj(i -> new Item("Item "+i)).forEach(baseList::add);

        System.out.println("\nFiltered list now:\n"+list);

        System.out.println("\nSetting filtered flag for alternate items in base list:\n");

        IntStream.range(0, 5).map(i -> 2*i).mapToObj(baseList::get).forEach(i -> i.setFiltered(true));

        System.out.println("\nFiltered list now:\n"+list);
    }


    public static class Item {
        private final StringProperty name = new SimpleStringProperty() ;
        private final BooleanProperty filtered = new SimpleBooleanProperty() ;

        public Item(String name) {
            setName(name);
        }

        public final StringProperty nameProperty() {
            return this.name;
        }

        public final String getName() {
            return this.nameProperty().get();
        }

        public final void setName(final String name) {
            this.nameProperty().set(name);
        }

        public final BooleanProperty filteredProperty() {
            return this.filtered;
        }

        public final boolean isFiltered() {
            return this.filteredProperty().get();
        }

        public final void setFiltered(final boolean filtered) {
            this.filteredProperty().set(filtered);
        }

        @Override
        public String toString() {
            return getName();
        }
    }
}]]></Answer>
<Answer><![CDATA[ObservableList<PurchaseOrder> poData = FXCollections.observableArrayList();
 FilteredList<PurchaseOrder> filteredData;
  private void load()  {
        PurchaseOrder po = new PurchaseOrder();
        try {
            poData = po.loadTable("purchase_orders", beanFields); // Database loading data
        } catch (SQLException ex) {
            Logger.getLogger(PurchaseOrdersController.class.getName()).log(Level.SEVERE, null, ex);
        }

        filteredData = new FilteredList<>(poData, t -> true); //Encapsulate data with filter

        poTable.setItems(filteredData); //Load filtered data into table

        //Set event trigger for all filter textboxes
        txtFilter.textProperty().addListener(obs->{
            filter(filteredData);
        });
        txtFilter2.textProperty().addListener(obs->{
            filter(filteredData);
        });
  }

   private void filter(FilteredList<PurchaseOrder> filteredData)
    {
            filteredData.setPredicate(PurchaseOrder -> {
                // If all filters are empty then display all Purchase Orders
                if ((txtFilter.getText() == null || txtFilter.getText().isEmpty()) 
                        && (txtFilter2.getText() == null || txtFilter2.getText().isEmpty())) {
                    return true;
                }

                // Convert filters to lower case
                String lowerCaseFilter = txtFilter.getText().toLowerCase();
                String lowerCaseFilter2 = txtFilter2.getText().toLowerCase();

                //If fails any given criteria, fail completely
                if(txtFilter.getText().length()>0)
                    if (PurchaseOrder.get("vendor_name").toLowerCase().contains(lowerCaseFilter) == false)
                        return false;
                if(txtFilter2.getText().length()>0)
                    if (PurchaseOrder.get("PONumber").toLowerCase().contains(lowerCaseFilter2) == false)
                        return false;

                return true; // Matches given criteria
            });
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30889732" questionTitle="Javafx: TableView change row color based on column value">
<Answer><![CDATA[nameColumn.setCellFactory(column -> {
    return new TableCell<Person, String>() {
        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty); //This is mandatory

            if (item == null || empty) { //If the cell is empty
                setText(null);
                setStyle("");
            } else { //If the cell is not empty

                setText(item); //Put the String data in the cell

                //We get here all the info of the Person of this row
                Person auxPerson = getTableView().getItems().get(getIndex());

                // Style all persons wich name is "Edgard"
                if (auxPerson.getName().equals("Edgard")) {
                    setTextFill(Color.RED); //The text in red
                    setStyle("-fx-background-color: yellow"); //The background of the cell in yellow
                } else {
                    //Here I see if the row of this cell is selected or not
                    if(getTableView().getSelectionModel().getSelectedItems().contains(auxPerson))
                        setTextFill(Color.WHITE);
                    else
                        setTextFill(Color.BLACK);
                }
            }
        }
    };
});]]></Answer>
<Answer><![CDATA[calltypel.setCellFactory(column -> {
        return new TableCell<CallLogs, String>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);

                setText(empty ? "" : getItem().toString());
                setGraphic(null);

                TableRow<CallLogs> currentRow = getTableRow();

                if (!isEmpty()) {

                    if(item.equals("a")) 
                        currentRow.setStyle("-fx-background-color:lightcoral");
                    else
                        currentRow.setStyle("-fx-background-color:lightgreen");
                }
            }
        };
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30851893" questionTitle="JavaFX - how to get background color of Tab, Button, etc">
<Answer><![CDATA[.....
.....
.....

// Declare click response :
playBoard[i][j].setOnAction(e ->    
{
    n = Integer.parseInt(((Button)e.getSource()).getText());
    toggleColorButtonRed((Button)e.getSource(), n);
});

.....
.....
.....

private void toggleColorButtonRed(Button button, int n)
{
    Color color = (Color)button.getBackground().getFills().get(0).getFill();
    if (color != Color.RED)
        button.setBackground(new Background(new BackgroundFill(
                Color.RED, CornerRadii.EMPTY, Insets.EMPTY)));
    else if (n % 2 == 0)
            button.setBackground(new Background(new BackgroundFill(
                    Color.ORANGE, CornerRadii.EMPTY, Insets.EMPTY)));
    else 
            button.setBackground(new Background(new BackgroundFill(
                    Color.BLUE, CornerRadii.EMPTY, Insets.EMPTY)));
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.IntegerBinding;
import javafx.concurrent.Task;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class ColoredTabDemo extends Application {

    private int tabCount ;

    @Override
    public void start(Stage primaryStage) {
        TabPane tabPane = new TabPane();
        for (int i = 0; i < 4; i++) {
            tabPane.getTabs().add(createTab());
        }
        Scene scene = new Scene(tabPane, 600, 400);
        scene.getStylesheets().add("colored-tab-demo.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Tab createTab() {
        Tab tab = new Tab("Tab "+(++tabCount));
        Button button = new Button("Load file...");

        button.setOnAction(e -> {
            Task<Void> task = new Task<Void>() {
                @Override
                public Void call() throws Exception {

                    // simulate loading:
                    for (int i=1; i <= 500; i++) {
                        updateProgress(i, 500);
                        Thread.sleep(20);
                    }

                    return null ;

                }
            };

            IntegerBinding progressAsPercent = Bindings.createIntegerBinding(() -> 
                (int) (task.getProgress() * 100), task.progressProperty());

            tab.styleProperty().bind(Bindings.format("-fx-background-color: "
                    + "linear-gradient(to right, -fx-accent 0%%, -fx-accent %d%%, -fx-background %1$d%%, -fx-background 100%%);", 
                    progressAsPercent));

            button.setDisable(true);

            task.setOnSucceeded(evt -> {
                tab.styleProperty().unbind();
                tab.setStyle("");
                button.setDisable(false);
            });

            new Thread(task).start();
        });

        tab.setContent(new StackPane(button));

        return tab ;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30811076" questionTitle="How to handle the transaction in J2EE 1.4 with plain JDBC">
<Answer><![CDATA[@WebServlet("/book")
public class BookingServlet extends HttpServlet {

    @Resource
    NotificationService notificationService;
    @Resource
    BookingService bookingService;

    @Override
    public void doPost(...) {
        bookingService.booking(...); 
        notificationService.confirmUserByMail(...);
        notificationService.confirmUserBySMS(...);
    }
}

@Stateless
public class BookingServiceImpl implements BookingService {

    @Resource
    private DataSource dataSource;

    @TransactionAttribute(REQUIRED)
    @Override
    public void booking(...) {
        bookRooms(...); 
        makePayment(...);
    }

    private void bookRooms(...) {
        //use dataSource here
    }

    private void makePayment(...) {
        //use dataSource here
    }
}

@Stateless
public class NotificationServiceImpl implements NotificationService {

    @Override
    public void notifyUserByMail(...) { 
       ...
    }
    @Override
    public void notifyUserBySMS(...) { 
       ...
    }
}]]></Answer>
<Answer><![CDATA[Connection con = somehowGetYourConnection();

try {
    con.setAutoCommit(false);

    //query1
    //...

    //some more stuff
    //...

    //query 2, inserting into the table of the reservation
    //...

    con.commit();

}
catch(SQLException e)
{
    //log somehow
    //...

    con.rollback();

    //you will need somehow to tell your user that the reservation failed
    //...

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30802776" questionTitle="position of TableColumn in Scene">
<Answer><![CDATA[private void buttonsPerHeader(TableView<Person> table, Pane root) {
    if (!(table.getSkin() instanceof TableViewSkinBase)) return;
    TableViewSkinBase skin = (TableViewSkinBase) table.getSkin();
    TableHeaderRow headerRow = skin.getTableHeaderRow();
    for (TableColumn col : table.getColumns()) {
        TableColumnHeader header = headerRow.getColumnHeaderFor(col);
        Button button = new Button(col.getText());

        button.prefWidthProperty().bind(Bindings.createDoubleBinding(() -> 
            header.getBoundsInLocal().getWidth(), header.boundsInLocalProperty()));
        button.minWidthProperty().bind(button.prefWidthProperty());
        button.maxWidthProperty().bind(button.prefWidthProperty());

        button.layoutXProperty().bind(Bindings.createDoubleBinding(() -> 
            header.getLocalToSceneTransform().transform(header.getBoundsInLocal()).getMinX(),
            header.boundsInLocalProperty(), header.localToSceneTransformProperty()));

        button.layoutYProperty().bind(Bindings.createDoubleBinding(() ->
            table.getBoundsInParent().getMaxY() ,table.boundsInParentProperty()));

        root.getChildren().add(button);
    }

}]]></Answer>
<Answer><![CDATA[import java.util.Optional;
import java.util.function.Function;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class TableColumnLocationExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<Person> table = new TableView<>();
        table.getColumns().add(column("First Name", Person::firstNameProperty, 120));
        table.getColumns().add(column("Last Name", Person::lastNameProperty, 120));
        table.getColumns().add(column("Email", Person::emailProperty, 250));

        table.getItems().addAll(
                new Person("Jacob", "Smith", "jacob.smith@example.com"),
                new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
                new Person("Ethan", "Williams", "ethan.williams@example.com"),
                new Person("Emma", "Jones", "emma.jones@example.com"),
                new Person("Michael", "Brown", "michael.brown@example.com")        
        );

        Pane root = new Pane(table);
        Scene scene = new Scene(root, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();


        for (TableColumn<Person, ?> col : table.getColumns()) {
            Optional<Label> header = findLabelForTableColumnHeader(col.getText(), root);
            header.ifPresent(label ->  {
                Button button = new Button(col.getText());

                button.prefWidthProperty().bind(Bindings.createDoubleBinding(() -> 
                    label.getBoundsInLocal().getWidth(), label.boundsInLocalProperty()));
                button.minWidthProperty().bind(button.prefWidthProperty());
                button.maxWidthProperty().bind(button.prefWidthProperty());

                button.layoutXProperty().bind(Bindings.createDoubleBinding(() -> 
                    label.getLocalToSceneTransform().transform(label.getBoundsInLocal()).getMinX(),
                    label.boundsInLocalProperty(), label.localToSceneTransformProperty()));

                button.layoutYProperty().bind(Bindings.createDoubleBinding(() ->
                    table.getBoundsInParent().getMaxY() ,table.boundsInParentProperty()));

                root.getChildren().add(button);

            });
        }


    }

    private Optional<Label> findLabelForTableColumnHeader(String text, Parent root) {
        return root.lookupAll(".table-view .column-header .label")
                .stream()
                .map(Label.class::cast)
                .filter(label -> label.getText().equals(text))
                .findAny(); // assumes all columns have unique text...
    }



    private <S,T> TableColumn<S,T> column(String title, Function<S,ObservableValue<T>> property, double width) {
        TableColumn<S,T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> property.apply(cellData.getValue()));
        col.setPrefWidth(width);
        return col ;
    }

    public static class Person {
        private StringProperty firstName = new SimpleStringProperty();
        private StringProperty lastName = new SimpleStringProperty();
        private StringProperty email = new SimpleStringProperty();

        public Person(String firstName, String lastName, String email) {
            setFirstName(firstName);
            setLastName(lastName);
            setEmail(email);
        }

        public final StringProperty firstNameProperty() {
            return this.firstName;
        }

        public final String getFirstName() {
            return this.firstNameProperty().get();
        }

        public final void setFirstName(final String firstName) {
            this.firstNameProperty().set(firstName);
        }

        public final StringProperty lastNameProperty() {
            return this.lastName;
        }

        public final String getLastName() {
            return this.lastNameProperty().get();
        }

        public final void setLastName(final String lastName) {
            this.lastNameProperty().set(lastName);
        }

        public final StringProperty emailProperty() {
            return this.email;
        }

        public final String getEmail() {
            return this.emailProperty().get();
        }

        public final void setEmail(final String email) {
            this.emailProperty().set(email);
        }


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30755370" questionTitle="Javafx: Close alert box (or, any dialog box) programatically">
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.stage.Stage;

import java.util.Optional;

public class Main extends Application{

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Title");
        alert.setHeaderText("Some Text");
        alert.setContentText("Choose your option.");
        ButtonType buttonTypeOne = new ButtonType("Yes");
        ButtonType buttonTypeCancel = new ButtonType("No", ButtonBar.ButtonData.CANCEL_CLOSE);
        alert.getButtonTypes().setAll(buttonTypeOne, buttonTypeCancel);

        Thread thread = new Thread(() -> {
            try {
                // Wait for 5 secs
                Thread.sleep(5000);
                if (alert.isShowing()) {
                    Platform.runLater(() -> alert.close());
                }
            } catch (Exception exp) {
                exp.printStackTrace();
            }
        });
        thread.setDaemon(true);
        thread.start();
        Optional<ButtonType> result = alert.showAndWait();
    }
}]]></Answer>
<Answer><![CDATA[dialog = new Dialog<>();
dialog.setTitle("It's a dialog!");
dialog.show();

    Thread newThread = new Thread(new Runnable() {
    @Override
        public void run() {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }

            Platform.runLater(new Runnable() {
                @Override
                public void run() {
                    dialog.close();
                }
                });
            }
    });
    newThread.start();]]></Answer>
<Answer><![CDATA[@Override
public void start( final Stage primaryStage )
{
    Alert alert = new Alert( Alert.AlertType.CONFIRMATION );
    alert.setTitle( "Title" );
    alert.setHeaderText( "Some Text" );
    alert.setContentText( "Choose your option." );
    ButtonType buttonTypeOne = new ButtonType( "Yes" );
    alert.initModality( Modality.NONE );
    ButtonType buttonTypeCancel = new ButtonType( "No", ButtonBar.ButtonData.CANCEL_CLOSE );
    alert.getButtonTypes().setAll( buttonTypeOne, buttonTypeCancel );

    Button b = new Button( "close alert" );
    b.setOnAction(( ActionEvent event ) ->
    {
        for ( ButtonType bt : alert.getDialogPane().getButtonTypes() )
        {
            System.out.println( "bt = " + bt );
            if ( bt.getButtonData() == ButtonBar.ButtonData.CANCEL_CLOSE )
            {
                Button cancelButton = ( Button ) alert.getDialogPane().lookupButton( bt );
                cancelButton.fire();
                break;
            }
        }
    });

    final Scene scene = new Scene( new Group( b ), 400, 300 );
    primaryStage.setScene( scene );
    primaryStage.show();

    Optional<ButtonType> result = alert.showAndWait();
    if ( result.get() == buttonTypeOne )
    {
        System.out.println( "one " );
    }
    else if( result.get() == buttonTypeCancel )
    {
        System.out.println( "cancel " );
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30702539" questionTitle="javaFX : How to periodically load information from db and show it on a Label?">
<Answer><![CDATA[public String miseAjour(){
    String nbrAderent = null;
    try {
        dbConnection db = new dbConnection();
        Connection connect = db.connectiondb();
        connect.setAutoCommit(false);
        Statement stmt= connect.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT count(*) as nbrAderent  FROM  gss_aderent ");  
        nbrAderent = String.valueOf(rs.getInt("nbrAderent")); 
        connect.commit();
    } catch (SQLException ex) {
        Logger.getLogger(SimpleController.class.getName()).log(Level.SEVERE, null, ex);
    }
    finally {
        rs.close();
        stmt.close();
        connect.close();
    }
    return nbrAderent;
}]]></Answer>
<Answer><![CDATA[public class TimerServiceApp {
    public void start() throws Exception {
        TimerService service = new TimerService();
        service.setPeriod(Duration.seconds(10));
        service.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent t) {
                main_nbrAdrTot.setText(t.getSource().getMessage());
            }
        });
        service.start();
    }



    private class TimerService extends ScheduledService<Integer> {
        private final StringProperty  nbrTotAderent = new SimpleStringProperty();


         public final void  setTotalAderentNumber(String value ) {
             nbrTotAderent.set(value);
         }


        public String getTotalAderentNumber() throws SQLException  {
        String nbrAderent = null;
        ResultSet rs=null;
        Statement stmt=null;
        Connection connect=null;

        try {
        dbConnection db = new dbConnection();
        connect = db.connectiondb();
        connect.setAutoCommit(false);
        stmt= connect.createStatement();
        rs = stmt.executeQuery("SELECT count(*) as nbrAderent  FROM  gss_aderent ");  
        nbrAderent = String.valueOf(rs.getInt("nbrAderent")); 
        connect.commit();
        } catch (SQLException ex) {
        Logger.getLogger(SimpleController.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
        rs.close();
        stmt.close();
        connect.close();
        }
        System.out.println(" Total aderent number updated to :" + nbrAderent + " Aderents ");
        return nbrAderent;
        }

        protected Task<Integer> createTask() {
            return new Task<Integer>() {
                protected Integer call() throws SQLException {

                    nbrTotAderent.setValue(getTotalAderentNumber());
                    updateMessage(getTotalAderentNumber());
                    return  Integer.parseInt(getTotalAderentNumber());
                }
            };
        }
    }
} `]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30695403" questionTitle="Simultaneous Rotate and Translate not working as expected in javafx">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Translate;
import javafx.stage.Stage;
import javafx.scene.Group;

public class SpindleAndWheelGroup extends Application
{
    private Circle circle;
    private Circle oppositeCircle;
    private Circle pivot;
    private Line spindle;

    private Group group;

    private Rotate rotateGroup;
    double dragInitTheta;
    double theta1, theta2;
    double angleOfRotation;

    private Translate translateGroup;
    private double dragTranslateGroupBackupX, dragTranslateGroupBackupY;
    private double dragPivotInitX, dragPivotInitY, systemDragOffsetX, systemDragOffsetY;

    double pointOfRotationX,pointOfRotationY;

    @Override
    public void start(Stage stage)
    {
        circle = new Circle(150, 150, 30);
        oppositeCircle = new Circle(350, 350, 30);
        pivot = new Circle(250, 250, 5);
        spindle = new Line(150, 150, 350, 350);

        group = new Group(circle, oppositeCircle, pivot, spindle);

/**************** Initializing Shapes **********/
        circle.setFill(Color.GREEN.deriveColor(1, 1, 1, 0.35));
        circle.setStroke(Color.GREEN);
        oppositeCircle.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.35));
        oppositeCircle.setStroke(Color.BLUE);
        pivot.setFill(Color.RED.deriveColor(1, 1, 1, 0.35));
        pivot.setStroke(Color.RED);
        spindle.setStrokeWidth(3);
        spindle.setStroke(Color.BLACK.deriveColor(1, 1, 1, 0.35));
/****************************************************/

/**************** Initializing Transforms **********/
        rotateGroup = new Rotate(0, 0, 0);
        translateGroup = new Translate(0, 0);
/****************************************************/

/**************** Adding Transforms **************/
        group.getTransforms().addAll(translateGroup, rotateGroup);
/****************************************************/
        Pane root = new Pane(group);
        Scene scene = new Scene(root, 800, 700);

        stage.setScene(scene);
        stage.show();

/** Get angle of point of click with
 * point of rotation, before drag begins **/
        circle.setOnMousePressed(event -> {
            dragInitTheta = angleOfRotation + dragInitTheta;
            pointOfRotationY = pivot.getCenterY() + translateGroup.getY();
            pointOfRotationX = pivot.getCenterX() + translateGroup.getX();

            double initialSlope = Math.atan((event.getSceneY() - pointOfRotationY) / (event.getSceneX() - pointOfRotationX));
            theta1 = Math.toDegrees(initialSlope);

            if (event.getSceneX() < pointOfRotationX)
                theta1 = (360 + theta1) % 360;
            else
                theta1 = 180 + theta1;

        });
/********************************************/

/** Get angle of point of drags with
 * point of rotation, when the drag is on **/
        circle.setOnMouseDragged(event -> {
            pointOfRotationY = pivot.getCenterY() + translateGroup.getY();
            pointOfRotationX = pivot.getCenterX() + translateGroup.getX();

            double finalSlope = Math.atan((event.getSceneY() - pointOfRotationY) / (event.getSceneX() - pointOfRotationX));
            theta2 = Math.toDegrees(finalSlope);

            if (event.getSceneX() < pointOfRotationX)
                theta2 = (360 + theta2) % 360;
            else
                theta2 = 180 + theta2;

            angleOfRotation = theta2 - theta1;
            rotateGroup.setPivotX(pivot.getCenterX());
            rotateGroup.setPivotY(pivot.getCenterY());
            rotateGroup.setAngle(angleOfRotation + dragInitTheta);
        });
/********************************************/

/** Relocate the whole system when the point of
 * rotation is dragged **/
        pivot.setOnMousePressed(event -> {
            dragPivotInitX = event.getSceneX();
            dragPivotInitY = event.getSceneY();

            dragTranslateGroupBackupX = translateGroup.getX();
            dragTranslateGroupBackupY = translateGroup.getY();
        });

        pivot.setOnMouseDragged(event -> {
            systemDragOffsetX = event.getSceneX() - dragPivotInitX;
            systemDragOffsetY = event.getSceneY() - dragPivotInitY;

            translateGroup.setX(dragTranslateGroupBackupX + systemDragOffsetX);
            translateGroup.setY(dragTranslateGroupBackupY + systemDragOffsetY);

        });
/********************************************/

    }
}]]></Answer>
<Answer><![CDATA[private Circle circle;
private Circle oppositeCircle;
private Circle pivot;
private Line spindle;

private Group group;

private Rotate rotateGroup;
double dragInitTheta;
double theta1,theta2;
double angleOfRotation;

private Translate translateGroup;
private double dragTranslateGroupBackupX, dragTranslateGroupBackupY;  
private double dragPivotInitX,dragPivotInitY,systemDragOffsetX,systemDragOffsetY;

@Override
public void start(Stage stage){
    circle = new Circle(150, 150, 30);
    oppositeCircle = new Circle(350, 350, 30);
    pivot = new Circle(250, 250, 5);
    spindle = new Line(150, 150, 350, 350);

    group = new Group(circle,oppositeCircle,pivot,spindle);

/**************** Initializing Shapes **********/
    circle.setFill(Color.GREEN.deriveColor(1, 1, 1, 0.35));
    circle.setStroke(Color.GREEN);
    oppositeCircle.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.35));
    oppositeCircle.setStroke(Color.BLUE);
    pivot.setFill(Color.RED.deriveColor(1, 1, 1, 0.35));
    pivot.setStroke(Color.RED);
    spindle.setStrokeWidth(3);
    spindle.setStroke(Color.BLACK.deriveColor(1, 1, 1, 0.35));
/****************************************************/

/**************** Initializing Transforms **********/
    rotateGroup = new Rotate(0, 0, 0);
    translateGroup = new Translate(0, 0);
/****************************************************/

/**************** Adding Transforms **************/
    group.getTransforms().addAll(translateGroup,rotateGroup);
/****************************************************/
    Pane root = new Pane(group);
    Scene scene = new Scene(root,500,500);

    stage.setScene(scene);
    stage.show();

/** Get angle of point of click with
 * point of rotation, before drag begins **/
    circle.setOnMousePressed(event -> {
        dragInitTheta = angleOfRotation + dragInitTheta;
        double pointOfRotationX = pivot.getCenterX() + translateGroup.getX();
        double pointOfRotationY = pivot.getCenterY() + translateGroup.getY();


        double initialSlope = Math.atan((event.getSceneY() - pointOfRotationY) / (event.getSceneX() - pointOfRotationX));
        theta1 = Math.toDegrees(initialSlope);

        if (event.getSceneX() < pointOfRotationX)
            theta1 = (360 + theta1) % 360;
        else
            theta1 = 180 + theta1;

    });
/********************************************/

/** Get angle of point of drags with
* point of rotation, when the drag is on **/
   circle.setOnMouseDragged(event -> {
        double pointOfRotationX = pivot.getCenterX() + translateGroup.getX();
        double pointOfRotationY = pivot.getCenterY() + translateGroup.getY();
        double finalSlope = Math.atan((event.getSceneY() - pointOfRotationY) / (event.getSceneX() - pointOfRotationX));
        theta2 = Math.toDegrees(finalSlope);

        if (event.getSceneX() < pointOfRotationX)
            theta2 = (360 + theta2) % 360;
        else
            theta2 = 180 + theta2;

        angleOfRotation = theta2 - theta1;
        rotateGroup.setPivotX(pivot.getCenterX());
        rotateGroup.setPivotY(pivot.getCenterY());
        rotateGroup.setAngle(angleOfRotation + dragInitTheta);
   });
/********************************************/

/** Relocate the whole system when the point of
 * rotation is dragged **/
    pivot.setOnMousePressed(event -> {
        dragPivotInitX = event.getSceneX();
        dragPivotInitY = event.getSceneY();

        dragTranslateGroupBackupX = translateGroup.getX();
        dragTranslateGroupBackupY = translateGroup.getY();
    });

    pivot.setOnMouseDragged(event -> {
        systemDragOffsetX = event.getSceneX() - dragPivotInitX;
        systemDragOffsetY = event.getSceneY() - dragPivotInitY;

        translateGroup.setX(dragTranslateGroupBackupX + systemDragOffsetX);
        translateGroup.setY(dragTranslateGroupBackupY + systemDragOffsetY);

    });
/********************************************/

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30684771" questionTitle="Why functions considered as first-class citizens are so important?">
<Answer><![CDATA[interface Procedure<T> {
    void call(T arg);
}

class Util {
    static <T> void forEach(Procedure<T> proc, T... elements) {
        for (T el: elements) {
            proc.call(el);
        }
    }
}

public class Foo {
    static public void main(String[] args) {
        Util.forEach(
            new Procedure<String>() {
                public void call(String str) { System.out.println(str); }
            },
            "Hello", "World"
        );
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
  List<Integer> input = Arrays.asList(10, 12, 13, 15, 17, 19);

  List<Integer> list = pickEvensViaLists(input);
  for (int i = 0; i < 2; ++i) 
    System.out.println(list.get(i));

  System.out.println("--------------------------------------------");
  pickEvensViaStreams(input).limit(2).forEach((x) -> System.out.println(x));
}      

private static List<Integer> pickEvensViaLists(List<Integer> input) {
  List<Integer> list = new ArrayList<Integer>(input);
  for (Iterator<Integer> iter = list.iterator(); iter.hasNext(); ) {
    int curr = iter.next();
    System.out.println("processing list element " + curr);
    if (curr % 2 != 0) 
      iter.remove();
  }
  return list;
}

private static Stream<Integer> pickEvensViaStreams(List<Integer> input) {
  Stream<Integer> inputStream = input.stream();
  Stream<Integer> filtered = inputStream.filter((curr) -> { 
    System.out.println("processing stream element " + curr);
    return curr % 2 == 0; 
  });
  return filtered;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30684308" questionTitle="JavaFx TreeView css">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.ReadOnlyProperty;
import javafx.beans.value.ChangeListener;
import javafx.css.PseudoClass;
import javafx.scene.Scene;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class StyledUniqueExpandingTree extends Application {

    @Override
    public void start(Stage primaryStage) {
        TreeView<String> tree = new TreeView<>();
        tree.setShowRoot(false);
        TreeItem<String> root = new TreeItem<>("");
        tree.setRoot(root);

        ChangeListener<Boolean> expandedListener = (obs, wasExpanded, isNowExpanded) -> {
            if (isNowExpanded) {
                ReadOnlyProperty<?> expandedProperty = (ReadOnlyProperty<?>) obs ;
                Object itemThatWasJustExpanded = expandedProperty.getBean();
                for (TreeItem<String> item : tree.getRoot().getChildren()) {
                    if (item != itemThatWasJustExpanded) {
                        item.setExpanded(false);
                    }
                }
            }
        };

        for (int i=1; i<=4; i++) {
            TreeItem<String> item = new TreeItem<>("Top level "+i);
            item.expandedProperty().addListener(expandedListener);
            root.getChildren().add(item);
            for (int j=1; j<=4; j++) {
                TreeItem<String> subItem = new TreeItem<>("Sub item "+i+":"+j);
                item.getChildren().add(subItem);
            }
        }

        PseudoClass subElementPseudoClass = PseudoClass.getPseudoClass("sub-tree-item");

        tree.setCellFactory(tv -> {
            TreeCell<String> cell = new TreeCell<String>() {
                @Override
                public void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    setDisclosureNode(null);

                    if (empty) {
                        setText("");
                        setGraphic(null);
                    } else {
                        setText(item); // appropriate text for item
                    }
                }

            };
            cell.treeItemProperty().addListener((obs, oldTreeItem, newTreeItem) -> {
                cell.pseudoClassStateChanged(subElementPseudoClass,
                        newTreeItem != null && newTreeItem.getParent() != cell.getTreeView().getRoot());
            });
            return cell ;
        });

        BorderPane uiRoot = new BorderPane(tree);
        Scene scene = new Scene(uiRoot, 250, 400);
        scene.getStylesheets().add("styled-unique-expanded-tree.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[treeView.setCellFactory(tv -> new TreeCell<TabMenuElement>() {
        @Override
        public void updateItem(TabMenuElement item, boolean empty) {
            super.updateItem(item, empty);
            setDisclosureNode(null);

            if (empty) {
                setText("");
                setGraphic(null);
            } else {
                setText(item.getName()); // appropriate text for item
                setOnMouseClicked(event -> {
                    if (event.getButton() == MouseButton.PRIMARY && event.getClickCount() == 1) {
                        TreeItem<TabMenuElement> ti = treeItemProperty().get();
                        ti.expandedProperty().set(true);
                    }
                    event.consume();
                });

                if (item.getIv() != null) {
                    setGraphic(item.getIv());
                } else {

                }
            }
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30662190" questionTitle="JavaFX PiChart, my hover values blink">
<Answer><![CDATA[public class ChartHoverUtil<T> {
   public static void setupPieChartHovering(PieChart chart) {
      new ChartHoverUtil<PieChart.Data>(
            data -> String.format("Value = ", data.getPieValue()),
            data -> data.getNode())
            .setupHovering(chart.getData());
   }

   private final Tooltip tooltip = new Tooltip();
   private final SimpleBooleanProperty adjustingTooltip = new SimpleBooleanProperty(false);
   private final Function<T, String> textProvider;
   private final Function<T, Node> nodeProvider;

   private EventHandler<MouseEvent> moveHandler = new EventHandler<MouseEvent>() {
      @Override
      public void handle(MouseEvent e) {
         if (tooltip.isShowing()) {
            setLabelPosition(e);
         }
      }
   };

   private EventHandler<MouseEvent> enterHandler = new EventHandler<MouseEvent>() {
      @Override
      public void handle(MouseEvent e) {
         adjustingTooltip.set(true);

         Node chartNode = (Node) e.getSource();

         tooltip.show(chartNode, e.getScreenX(), e.getScreenY());
         setLabelPosition(e);

         ObservableBooleanValue stillHovering = chartNode.hoverProperty().or(adjustingTooltip);
         stillHovering.addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean nowHovering) {
               if (!nowHovering) {
                  stillHovering.removeListener(this);
                  tooltip.hide();
               }
            }
         });

         T chartData = (T) chartNode.getUserData();
         String txt = textProvider.apply(chartData);
         tooltip.setText(txt);

         adjustingTooltip.set(false);
      }
   };

   public ChartHoverUtil(Function<T, String> textProvider, Function<T, Node> getNode) {
      this.textProvider = textProvider;
      this.nodeProvider = getNode;
      tooltip.addEventFilter(MouseEvent.MOUSE_MOVED, moveHandler);
   }

   public void setupHovering(Collection<T> data) {
      for (T chartData : data) {
         Node node = nodeProvider.apply(chartData);
         node.setUserData(chartData);
         setupNodeHovering(node);
      }
   }

   private void setupNodeHovering(Node node) {
      node.addEventFilter(MouseEvent.MOUSE_MOVED, moveHandler);
      node.addEventHandler(MouseEvent.MOUSE_ENTERED, enterHandler);
      // Do not use MOUSE_EXIT handler because it is triggered immediately when showing the tooltip
   }

   private void setLabelPosition(MouseEvent e) {
      adjustingTooltip.set(true);

      tooltip.setAnchorX(e.getScreenX());
      tooltip.setAnchorY(e.getScreenY() + 20);

      adjustingTooltip.set(false);
   }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.chart.PieChart;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import com.alpha.client.view.nodes.stats.statsEngine.beans.ListRepere;
import com.alpha.client.view.nodes.stats.statsEngine.beans.OptionsChart;
import com.alpha.client.view.nodes.stats.statsEngine.beans.ValueStat;

public class PieChartNode implements ChartNode {

    //My personnal attributes
    private ListRepere categories;
    private ArrayList<ValueStat> values;
    //The PieChart
    private PieChart chart;

    //The data of Chart, will be fill by a thread
    private ObservableList<PieChart.Data> pieChartData;
    //The node which contain chart and label
    private Group group;
    //The Label 
    private final Label caption;

    public PieChartNode(ListRepere categories, ArrayList<ValueStat> values, OptionsChart optionsChart) {
        this.categories = categories;
        this.values = values;

        //New Group
        group = new Group();
        //I must use a StackPane to place Label hover Chart
        StackPane pane = new StackPane();
        group.getChildren().add(pane);

        //Init' PieChart
        pieChartData = FXCollections.observableArrayList();
        chart = new PieChart(pieChartData);
        chart.setStartAngle(180.0);
        //Add chart to StackPane
        pane.getChildren().add(chart);

        //Init Popup(Label)
        caption = new Label("");
        caption.setVisible(false);
        caption.getStyleClass().addAll("chart-line-symbol", "chart-series-line");
        caption.setStyle("-fx-font-size: 12; -fx-font-weight: bold;");
        caption.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);
        //Add Label to StackPane
        pane.getChildren().add(caption);
    }

    @Override
    public Node getNodeGraph() {
        return (Node) group;
    }

    @Override
    public Task initTaskFormat() {
        Task<Void> task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                //i and sizeOfallElements are just use for ProgressBar 
                int i = 0;
                int sizeOfallElements = values.size();
                updateProgress(i, sizeOfallElements);

                //For Each ValueStat (a Personnal pojo Class), I must create a slice 
                for (ValueStat v : values) {
                    //Create the PieChart.Data and add it to ObservableList
                    PieChart.Data dataTemp = new PieChart.Data(v.getCategorie().getStringName(), v.getDoubleValue());
                    pieChartData.add(dataTemp);

                    //At the same way that the LineChart, I add Event when mouse entered and mouse exited.
                    //When mouse entered (on the slice of PieChart)
                    dataTemp.getNode().addEventHandler(MouseEvent.MOUSE_ENTERED,
                            new EventHandler<MouseEvent>() {
                                @Override
                                public void handle(MouseEvent e) {
                                    //Set Label ignores the mouse 
                                    caption.setMouseTransparent(true);
                                    //I move Label near the mouse cursor, with a offset !
                                    caption.setTranslateX(e.getX());
                                    caption.setTranslateY(e.getY()+20);
                                    //I change text of Label
                                    caption.setText(String.valueOf(dataTemp.getPieValue()) + "\n" + dataTemp.getName());
                                    //Change the color of popup, to adapt it to slice
                                    if(caption.getStyleClass().size() == 4){
                                        caption.getStyleClass().remove(3);
                                    }
                                    caption.getStyleClass().add(dataTemp.getNode().getStyleClass().get(2));
                                    //I display Label
                                    caption.setVisible(true);
                                }
                            });
                    //Need to add a event when the mouse move hover the slice
                    //If I don't the popup stay blocked on edges of the slice.
                    dataTemp.getNode().addEventHandler(MouseEvent.MOUSE_MOVED,
                            new EventHandler<MouseEvent>() {
                                @Override
                                public void handle(MouseEvent e) {
                                    //Keep Label near the mouse
                                    caption.setTranslateX(e.getX());
                                    caption.setTranslateY(e.getY()+20);
                                }
                            });

                    //When mouse exited (the slice of PieChart)
                    dataTemp.getNode().addEventHandler(MouseEvent.MOUSE_EXITED,
                            new EventHandler<MouseEvent>() {
                                @Override
                                public void handle(MouseEvent e) {
                                    //I Hide Label
                                    caption.setVisible(false);
                                }
                            });
                    //Update progress
                    updateProgress(i++, sizeOfallElements);
                }
                return null;
            }
        };
        return task;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30645606" questionTitle="Javafx : Restrict Column rearrangement on drag and drop">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

public class FixFiestColumnTable extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        final TableView tableView = new TableView();
        TableColumn col1 = new TableColumn("Col 1");
        TableColumn col2 = new TableColumn("Col 2");
        TableColumn col3 = new TableColumn("Col 3");

        tableView.getColumns().setAll(col1, col2, col3);

        tableView.getColumns().addListener(new ListChangeListener() {
            public ObservableList<TableColumn> tempList = FXCollections.observableArrayList();
            @Override
            public void onChanged(Change change) {
                change.next();
                if (change.wasReplaced() && !change.getList().get(0).equals(col1)) {
                    tableView.getColumns().setAll(tempList);
                }
                tempList.setAll(change.getList());
            }
        });
        stage.setScene(new Scene(tableView));
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.collections.ListChangeListener;
import javafx.scene.Scene;
import javafx.scene.control.TreeTableColumn;
import javafx.scene.control.TreeTableView;
import javafx.stage.Stage;

public class TreeTableTest extends Application {

    @SuppressWarnings({ "unchecked", "rawtypes" })
    @Override
    public void start(Stage stage) {
        final TreeTableView treeTableView = new TreeTableView();

        TreeTableColumn c1 = new TreeTableColumn("1");
        TreeTableColumn c2 = new TreeTableColumn("2");
        TreeTableColumn c3 = new TreeTableColumn("3");
        TreeTableColumn c4 = new TreeTableColumn("4");

        treeTableView.getColumns().setAll(c1, c2, c3, c4);

        treeTableView.getColumns().addListener(new ListChangeListener() {
            public boolean suspended;

            @Override
            public void onChanged(Change change) {

                change.next();

                if (change.wasReplaced() && !suspended) {
                    List<TreeTableColumn> oldList = new ArrayList<>(change.getRemoved());
                    List<TreeTableColumn> newList = new ArrayList<>(treeTableView.getColumns());

                    // first column changed => revert to original list
                    if (oldList.get(0) != newList.get(0)) {
                        this.suspended = true;
                        treeTableView.getColumns().setAll(oldList);
                        this.suspended = false;
                    }
                }
            }
        });
        stage.setScene(new Scene(treeTableView));
        stage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30641383" questionTitle="Java 8 Stream with batch processing">
<Answer><![CDATA[// read file into stream, try-with-resources
    try (Stream<String> stream = Files.lines(Paths.get(fileName))) {
        //skip header
        Spliterator<String> split = stream.skip(1).spliterator();
        Chunker<String> chunker = new Chunker<String>();
        while(true) {              
            boolean more = split.tryAdvance(chunker::doSomething);
            if (!more) {
                break;
            }
        }           
    } catch (IOException e) {
        e.printStackTrace();
    }
}

static class Chunker<T> {
    int ct = 0;
    public void doSomething(T line) {
        System.out.println(ct++ + " " + line.toString());
        if (ct % 100 == 0) {
            System.out.println("====================chunk=====================");               
        }           
    }       
}]]></Answer>
<Answer><![CDATA[public static <T> Stream<List<T>> batches(Stream<T> stream, int batchSize) {
    return batchSize <= 0
        ? Stream.of(stream.collect(Collectors.toList()))
        : StreamSupport.stream(new BatchSpliterator<>(stream.spliterator(), batchSize), stream.isParallel());
}

private static class BatchSpliterator<E> implements Spliterator<List<E>> {

    private final Spliterator<E> base;
    private final int batchSize;

    public BatchSpliterator(Spliterator<E> base, int batchSize) {
        this.base = base;
        this.batchSize = batchSize;
    }

    @Override
    public boolean tryAdvance(Consumer<? super List<E>> action) {
        final List<E> batch = new ArrayList<>(batchSize);
        for (int i=0; i < batchSize && base.tryAdvance(batch::add); i++)
            ;
        if (batch.isEmpty())
            return false;
        action.accept(batch);
        return true;
    }

    @Override
    public Spliterator<List<E>> trySplit() {
        if (base.estimateSize() <= batchSize)
            return null;
        final Spliterator<E> splitBase = this.base.trySplit();
        return splitBase == null ? null
                : new BatchSpliterator<>(splitBase, batchSize);
    }

    @Override
    public long estimateSize() {
        final double baseSize = base.estimateSize();
        return baseSize == 0 ? 0
                : (long) Math.ceil(baseSize / (double) batchSize);
    }

    @Override
    public int characteristics() {
        return base.characteristics();
    }

}]]></Answer>
<Answer><![CDATA[/**
 * An iterator which returns batches of items taken from another iterator
 */
public class BatchingIterator<T> implements Iterator<List<T>> {
    /**
     * Given a stream, convert it to a stream of batches no greater than the
     * batchSize.
     * @param originalStream to convert
     * @param batchSize maximum size of a batch
     * @param <T> type of items in the stream
     * @return a stream of batches taken sequentially from the original stream
     */
    public static <T> Stream<List<T>> batchedStreamOf(Stream<T> originalStream, int batchSize) {
        return asStream(new BatchingIterator<>(originalStream.iterator(), batchSize));
    }

    private static <T> Stream<T> asStream(Iterator<T> iterator) {
        return StreamSupport.stream(
            Spliterators.spliteratorUnknownSize(iterator,ORDERED),
            false);
    }

    private int batchSize;
    private List<T> currentBatch;
    private Iterator<T> sourceIterator;

    public BatchingIterator(Iterator<T> sourceIterator, int batchSize) {
        this.batchSize = batchSize;
        this.sourceIterator = sourceIterator;
    }

    @Override
    public boolean hasNext() {
        prepareNextBatch();
        return currentBatch!=null && !currentBatch.isEmpty();
    }

    @Override
    public List<T> next() {
        return currentBatch;
    }

    private void prepareNextBatch() {
        currentBatch = new ArrayList<>(batchSize);
        while (sourceIterator.hasNext() && currentBatch.size() < batchSize) {
            currentBatch.add(sourceIterator.next());
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.function.*;
import java.util.stream.Collector;

import static java.util.Objects.requireNonNull;


/**
 * Collects elements in the stream and calls the supplied batch processor
 * after the configured batch size is reached.
 *
 * In case of a parallel stream, the batch processor may be called with
 * elements less than the batch size.
 *
 * The elements are not kept in memory, and the final result will be an
 * empty list.
 *
 * @param <T> Type of the elements being collected
 */
class BatchCollector<T> implements Collector<T, List<T>, List<T>> {

    private final int batchSize;
    private final Consumer<List<T>> batchProcessor;


    /**
     * Constructs the batch collector
     *
     * @param batchSize the batch size after which the batchProcessor should be called
     * @param batchProcessor the batch processor which accepts batches of records to process
     */
    BatchCollector(int batchSize, Consumer<List<T>> batchProcessor) {
        batchProcessor = requireNonNull(batchProcessor);

        this.batchSize = batchSize;
        this.batchProcessor = batchProcessor;
    }

    public Supplier<List<T>> supplier() {
        return ArrayList::new;
    }

    public BiConsumer<List<T>, T> accumulator() {
        return (ts, t) -> {
            ts.add(t);
            if (ts.size() >= batchSize) {
                batchProcessor.accept(ts);
                ts.clear();
            }
        };
    }

    public BinaryOperator<List<T>> combiner() {
        return (ts, ots) -> {
            // process each parallel list without checking for batch size
            // avoids adding all elements of one to another
            // can be modified if a strict batching mode is required
            batchProcessor.accept(ts);
            batchProcessor.accept(ots);
            return Collections.emptyList();
        };
    }

    public Function<List<T>, List<T>> finisher() {
        return ts -> {
            batchProcessor.accept(ts);
            return Collections.emptyList();
        };
    }

    public Set<Characteristics> characteristics() {
        return Collections.emptySet();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30610173" questionTitle="Split and Loop in java 8">
<Answer><![CDATA[public class StringLoop {

    public static void main(String[] args) {

        getResponse("A.B.C.D", 2);

        System.out.println();
        getResponse("A.B.C.D", 3);

    }

    // Recursive function
    private static void getResponse (String str, int level) {

        if(level < 0 || str.equals(""))
            return;

        // Prints out the current string
        System.out.println(str);

        int lastIndex = str.lastIndexOf(".");
        if(lastIndex == - 1)
            lastIndex = 0;

        // Remove content after last connector
        // Decrement level
        getResponse(str.substring(0, lastIndex), level - 1);
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
    String string = "A.B.C.D";
    getResponse(string, 3);
    System.out.println();

    getResponse(string, 2);
    System.out.println();

    getResponse(string, 1);
    System.out.println();
}

private static void getResponse(String str, int level) {
    if (level < 0 || str.isEmpty())
        return;

    System.out.println(str);

    String[] strPieces = str.split("\\.");
    if (strPieces.length > level) {
        getResponse(String.join(".", Arrays.copyOfRange(strPieces, 0, strPieces.length - 1)), level - 1);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30559549" questionTitle="javaFX - how to use function or object of a controller from another controller">
<Answer><![CDATA[@FXML
private Button myObject;

private Scene scene;
private Label lblDataLeft;

@FXML
private void handleButtonAction(ActionEvent event) {
        System.out.println("You clicked me!");
        setLeftSt("this works!");
}

public void setLeftSt(String st){
    if(this.scene == null)
        this.scene = myObject.getScene();
    if(this.lblDataLeft==null)
        this.lblDataLeft = (Label) scene.lookup("#LeftSt");
    if (this.lblDataLeft!=null) 
        this.lblDataLeft.setText(st); 
}]]></Answer>
<Answer><![CDATA[public class MyTab1Controller {

    private final StringProperty leftSt = new SimpleStringProperty();

    public StringProperty leftStProperty() { 
        return leftSt ;
    }

    public final String getLeftSt() {
        return leftStProperty().get();
    }

    public final void setLeftSt(String leftSt) {
        leftStProperty().set(leftSt);
    }

    // ...

    @FXML
    public void handleButtonAction() {
        setLeftSt(...);
    }

    // ...
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30526806" questionTitle="Hindi font is not proper rendering on webview browser using javafx">
<Answer><![CDATA[package javafxapplication5;

import java.io.IOException;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class JavaFXApplication5 extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        StackPane root = new StackPane();

        WebView view = new WebView();
        WebEngine engine = view.getEngine();
        engine.load("http://www.jagran.com/");
        root.getChildren().add(view);

        Scene scene = new Scene(root, 800, 600);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) throws IOException {
        Application.launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.javafx.BrowserView;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 * Demonstrates how to embed Browser instance into JavaFX application.
 */
public class JavaFXSample extends Application {

    @Override
    public void start(Stage primaryStage) {
        Browser browser = new Browser();
        BrowserView browserView = new BrowserView(browser);

        StackPane pane = new StackPane();
        pane.getChildren().add(browserView);
        Scene scene = new Scene(pane, 700, 500);
        primaryStage.setScene(scene);
        primaryStage.show();

        browser.loadURL("http://www.google.com");
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30521974" questionTitle="Why does the Java 8 generic type inference pick this overload?">
<Answer><![CDATA[public class GenericTypeInference {

private static final String fmt = "%24s: %s%n";
public static void main(String[] args) {

    print(new SillyGenericWrapper().get());

    Method[] allMethods = SillyGenericWrapper.class.getDeclaredMethods();
    for (Method m : allMethods) {
        System.out.format("%s%n", m.toGenericString());
        System.out.format(fmt, "ReturnType", m.getReturnType());
        System.out.format(fmt, "GenericReturnType", m.getGenericReturnType());   
   }

   private static void print(Object object) {
       System.out.println("Object");
   }

   private static void print(String string) {
       System.out.println("String");
   }

   public static class SillyGenericWrapper {
       public <T> T get() {
           return null;
       }
   }
}]]></Answer>
<Answer><![CDATA[public class GenericTypeInference {

    public static void main(String[] args) {
        final SillyGenericWrapper sillyGenericWrapper = new SillyGenericWrapper();
        final Object o = sillyGenericWrapper.get();
        print(o);
        print(sillyGenericWrapper.get());
    }

    private static void print(Object object) {
        System.out.println("Object");
    }

    private static void print(Integer integer) {
        System.out.println("Integer");
    }

    public static class SillyGenericWrapper {
        public <T> T get() {
            return null;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30446996" questionTitle="JavaFX begginer's simple calculator event handling">
<Answer><![CDATA[public static void main(String[] args) {
    launch(args);
}

public void start(Stage primaryStage){
    primaryStage.setTitle("Calculator");

    GridPane root = new GridPane();

    Label textBox1 = new Label("Text1");
    root.add(textBox1, 0, 0, 5, 1);
    Label textBox2 = new Label("Text2");
    root.add(textBox2, 0, 1, 5, 1);
    textBox1.setId("lblTextBox1");
    textBox2.setId("lblTextBox2");

    Button btn0 = new Button("0");
    Button btn1 = new Button("1");
    Button btn2 = new Button("2");
    Button btn3 = new Button("3");
    Button btn4 = new Button("4");
    Button btn5 = new Button("5");
    Button btn6 = new Button("6");
    Button btn7 = new Button("7");
    Button btn8 = new Button("8");
    Button btn9 = new Button("9");
    btn0.setId("btn0");
    btn1.setId("btn1");
    btn2.setId("btn2");
    btn3.setId("btn3");
    btn4.setId("btn4");
    btn5.setId("btn5");
    btn6.setId("btn6");
    btn7.setId("btn7");
    btn8.setId("btn8");
    btn9.setId("btn9");


    Button btnDot = new Button(".");
    Button btnPlus = new Button("+");
    Button btnMinus = new Button("-");
    Button btnTimes = new Button("*");
    Button btnDivide = new Button("/");
    Button btnEquals = new Button("=");
    Button btnMC = new Button("MC");
    Button btnMR = new Button("MR");
    Button btnMS = new Button("MS");
    Button btnMPlus = new Button("M+");
    Button btnMMinus = new Button("M-");
    Button btnBack = new Button("<=");
    Button btnCE = new Button("CE");
    Button btnC = new Button("C");
    Button btnPlusOrMinus = new Button("+/-");
    Button btnSqrt = new Button("sqrt");
    Button btnPercentage= new Button("%");
    Button btn1OverX = new Button("1/x");
    btnPlus.setId("btnPlus");
    btnTimes.setId("btnTimes");
    btnDot.setId("btnDot");
    btnEquals.setId("btnEquals");
    btnC.setId("btnClear");

    btn0.setMaxHeight(Double.MAX_VALUE);
    btn0.setMaxWidth(Double.MAX_VALUE);

    btn1.setMaxHeight(Double.MAX_VALUE);
    btn1.setMaxWidth(Double.MAX_VALUE);

    btn2.setMaxHeight(Double.MAX_VALUE);
    btn2.setMaxWidth(Double.MAX_VALUE);

    btn3.setMaxHeight(Double.MAX_VALUE);
    btn3.setMaxWidth(Double.MAX_VALUE);

    btn4.setMaxHeight(Double.MAX_VALUE);
    btn4.setMaxWidth(Double.MAX_VALUE);

    btn5.setMaxHeight(Double.MAX_VALUE);
    btn5.setMaxWidth(Double.MAX_VALUE);

    btn6.setMaxHeight(Double.MAX_VALUE);
    btn6.setMaxWidth(Double.MAX_VALUE);

    btn7.setMaxHeight(Double.MAX_VALUE);
    btn7.setMaxWidth(Double.MAX_VALUE);

    btn8.setMaxHeight(Double.MAX_VALUE);
    btn8.setMaxWidth(Double.MAX_VALUE);

    btn9.setMaxHeight(Double.MAX_VALUE);
    btn9.setMaxWidth(Double.MAX_VALUE);

    btnEquals.setMaxHeight(Double.MAX_VALUE);
    btnEquals.setMaxWidth(Double.MAX_VALUE);

    btnMC.setMaxHeight(Double.MAX_VALUE);
    btnMC.setMaxWidth(Double.MAX_VALUE);

    btnMMinus.setMaxHeight(Double.MAX_VALUE);
    btnMMinus.setMaxWidth(Double.MAX_VALUE);

    btnPlusOrMinus.setMaxHeight(Double.MAX_VALUE);
    btnPlusOrMinus.setMaxWidth(Double.MAX_VALUE);

    btnPercentage.setMaxHeight(Double.MAX_VALUE);
    btnPercentage.setMaxWidth(Double.MAX_VALUE);

    btnSqrt.setMaxHeight(Double.MAX_VALUE);
    btnSqrt.setMaxWidth(Double.MAX_VALUE);

    btn1OverX.setMaxHeight(Double.MAX_VALUE);
    btn1OverX.setMaxWidth(Double.MAX_VALUE);

    btnPlus.setMaxHeight(Double.MAX_VALUE);
    btnPlus.setMaxWidth(Double.MAX_VALUE);

    btnMinus.setMaxHeight(Double.MAX_VALUE);
    btnMinus.setMaxWidth(Double.MAX_VALUE);

    btnTimes.setMaxHeight(Double.MAX_VALUE);
    btnTimes.setMaxWidth(Double.MAX_VALUE);

    btnDivide.setMaxHeight(Double.MAX_VALUE);
    btnDivide.setMaxWidth(Double.MAX_VALUE);

    btnCE.setMaxHeight(Double.MAX_VALUE);
    btnCE.setMaxWidth(Double.MAX_VALUE);

    btnC.setMaxHeight(Double.MAX_VALUE);
    btnC.setMaxWidth(Double.MAX_VALUE);

    btnDot.setMaxHeight(Double.MAX_VALUE);
    btnDot.setMaxWidth(Double.MAX_VALUE);

    root.add(btnMC,0,1);
    root.add(btnMR,1,1);
    root.add(btnMS,2,1);
    root.add(btnMPlus,3,1);
    root.add(btnMMinus,4,1);

    root.add(btnBack,0,2);
    root.add(btnCE,1,2);
    root.add(btnC,2,2);
    root.add(btnPlusOrMinus,3,2);
    root.add(btnSqrt,4,2);

    root.add(btn7,0,3);
    root.add(btn8,1,3);
    root.add(btn9,2,3);
    root.add(btnDivide,3,3);
    root.add(btnPercentage,4,3);

    root.add(btn4,0,4);
    root.add(btn5,1,4);
    root.add(btn6,2,4);
    root.add(btnTimes,3,4);
    root.add(btn1OverX,4,4);

    root.add(btn1,0,5);
    root.add(btn2,1,5);
    root.add(btn3,2,5);
    root.add(btnMinus,3,5);
    root.add(btnEquals,4,5,1,2);

    root.add(btn0,0,6,2,1);
    root.add(btnDot,2,6);
    root.add(btnPlus,3,6);

    root.setVgap(5);
    root.setHgap(5);
    root.setPadding(new Insets(5,5,5,5));
    primaryStage.setScene(new Scene(root));
    primaryStage.show();


    Controller controller = new Controller(primaryStage.getScene());

}]]></Answer>
<Answer><![CDATA[public class Calculator extends Application {

 private TextField textField = new TextField(); 

 @Override
 public void start(Stage primaryStage) {

    List<String> buttons = Arrays.asList("7", "8", "9", "+", "4", "5", "6", "-", "1", "2", "3", "*", "0", "=", "/", "EE");

    FlowPane pane = new FlowPane();
    pane.setAlignment(Pos.CENTER);
    pane.setPadding(new Insets(30, 20, 30, 20));
    pane.setHgap(5);
    pane.setVgap(5);
    pane.setMinWidth(400);
    pane.setPrefWidth(400);
    pane.setMaxWidth(400);

    textField.setEditable(false);
    textField.setAlignment(Pos.CENTER);
    textField.setMinSize(336, 40);
    // Rezultat.textProperty().bind(Bindings.format("%.0f", value));
    pane.getChildren().add(textField);

    for (String button : buttons) {
        Button b = new Button(button);
        b.setMinSize(80, 80);
        pane.getChildren().add(b);
        b.setOnAction((e) -> doSomething(b.getText()));
    }

    Scene scene = new Scene(pane);
    primaryStage.setTitle("Calculator");
    primaryStage.setScene(scene);
    primaryStage.show();

}

private void doSomething(String text) {

    if (text.equalsIgnoreCase("=")) {
        // Calc
    }

    else if (text.equalsIgnoreCase("EE")) {
        // EE
    } else if (text.equalsIgnoreCase("+") || text.equalsIgnoreCase("-") || text.equalsIgnoreCase("*") || text.equalsIgnoreCase("/")) {
        // + - * /
    }
    // ....
    else {
        // numeric
        textField.appendText(text);
    }
}

public static void main(String[] args) {
    Application.launch(args);

}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30375893" questionTitle="Javafx live thread updates">
<Answer><![CDATA[scheduler = Executors.newScheduledThreadPool(1);

scheduler.scheduleAtFixedRate(

        new Runnable(){


            @Override
            public void run() {
               Platform.runLater(new Runnable() {

                   @Override
                   public void run() {

                           //Here your code to change the number by for example incrementig the value of the button
                   }
               });

            }
        }, 
        1000, 
        80, 
        TimeUnit.MILLISECONDS);]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class CountingButton extends Application {


    @Override
    public void start(Stage primaryStage) {

        Button button = new Button("Start");

        button.setOnAction(e -> {
            Thread thread = new Thread(() -> {
                for (int i = 0; i <= 5 ; i++) {
                    final String text = "Count: "+i ;
                    Platform.runLater(() -> button.setText(text));
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException exc) {
                        exc.printStackTrace();
                    }
                }
            });
            thread.start();
        });

        primaryStage.setScene(new Scene(new StackPane(button), 120, 75));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30356385" questionTitle="JavaFX Adding multiple XYChart.Series to LineChart without explicating declaring each series">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.stage.Stage;

public class StockChart extends Application {

    @Override public void start(Stage stage) {

        stage.setTitle("Stock Market");

        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();

        xAxis.setLabel("Time of Day");
        yAxis.setLabel("Price Per Stock");

        LineChart<String, Number> lineChart = new LineChart<String,Number>(xAxis,yAxis);

        Scene scene  = new Scene(lineChart,800,600); 

        lineChart.setTitle("Stock Exchange");

        String[] timeOfDay = {"8:00AM", "9:00AM", "10:00AM", "161:00AM", "12:00PM",
                            "1:00PM", "2:00PM", "3:00PM", "4:00PM" };
        String[] stockCompany = { "AAPL", "ORCL", "MSFT", "GOOG", "AMZN", "FB", "HPQ",
                            "YHOO", "ADSK", "ATVI"};

        for(int i = 0; i < stockCompany.length; i++) {
            CompanyStockData tmpCompany = new CompanyStockData(lineChart, timeOfDay, stockCompany[i], i+3);
            lineChart.getData().add(tmpCompany.generateStock());
        }

        stage.setScene(scene);
        stage.show();
    }    

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

public class StockChart extends Application {

    private int companysNumber = 4;

    @Override public void start(Stage stage) {

        stage.setTitle("Stock Market");

        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();

        xAxis.setLabel("Time of Day");
        yAxis.setLabel("Price Per Stock");

        LineChart<String, Number> lineChart = new LineChart<String,Number>(xAxis,yAxis);

        ArrayList<CompanyStockData> companysLines = new ArrayList<CompanyStockData>();

        Scene scene  = new Scene(lineChart,800,600);

        scene.setOnMousePressed(new javafx.event.EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                companysLines.get(companysNumber).changeStock();
            }
        });

        lineChart.setTitle("Stock Exchange");

        String[] timeOfDay = {"8:00AM", "9:00AM", "10:00AM", "161:00AM", "12:00PM",
                                "1:00PM", "2:00PM", "3:00PM", "4:00PM" };
        String[] stockCompany = { "AAPL", "ORCL", "MSFT", "GOOG", "AMZN", "FB", "HPQ",
                                "YHOO", "ADSK", "ATVI"};

        for(int i = 0; i < stockCompany.length; i++) {
            companysLines.add(new CompanyStockData(lineChart, timeOfDay, stockCompany[i], i+3));
            lineChart.getData().add(companysLines.get(i).generateStock());
        }

        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30338598" questionTitle="TranslateTransition does not change (X,Y) co-ordinates">
<Answer><![CDATA[import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class SimpleAnimation extends Application {

    @Override
    public void start(Stage stage) {
        Rectangle rect = new Rectangle(100, 100, 100, 100);
        rect.setArcHeight(50);
        rect.setArcWidth(50);
        rect.setFill(Color.VIOLET);

        System.out.println("Location before relocation = " + rect.getX() + "," + rect.getY() + ")");

        TranslateTransition tt = new TranslateTransition(
              Duration.seconds(2), 
              rect
        );

        tt.setByX(100f);
        tt.setByY(100f);
        tt.setOnFinished(event -> {
            rect.setX(rect.getX() + rect.getTranslateX());
            rect.setY(rect.getY() + rect.getTranslateY());
            rect.setTranslateX(0);
            rect.setTranslateY(0);

            System.out.println("Location after relocation = " + rect.getX() + "," + rect.getY() + ")");
        });

        tt.play();

        Scene scene = new Scene(new Group(rect), 500, 500);
        stage.setScene(scene);

        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class SimpleAnimation extends Application {

    @Override
    public void start(Stage stage) {

        VBox vb = new VBox();

        Rectangle rect = new Rectangle(100, 100, 100, 100);
        rect.setManaged(false);
        rect.setArcHeight(50);
        rect.setArcWidth(50);
        rect.setFill(Color.VIOLET);

        final Duration SEC_2 = Duration.millis(2000);

        System.out.println("Location before relocation = " + rect.getX() + ","
                + rect.getY() + ")");

        Timeline timeline = new Timeline();

        KeyFrame end = new KeyFrame(SEC_2,
                new KeyValue(rect.xProperty(), 200),
                new KeyValue(rect.yProperty(), 200));

        timeline.getKeyFrames().add(end);

        timeline.setOnFinished(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                System.out.println("Location after relocation = " + rect.getX()
                        + "," + rect.getY() + ")");
            }
        });
        timeline.play();

        vb.getChildren().add(rect);

        Scene scene = new Scene(vb, 500, 500);
        stage.setScene(scene);

        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30303473" questionTitle="How to register Jackson Jdk8 module in Restlet">
<Answer><![CDATA[public class CustomJacksonConverter extends JacksonConverter { 
    @Override 
    protected <T> JacksonRepresentation<T> create(MediaType mediaType, T source) { 
        ObjectMapper mapper = createMapper(); 
        JacksonRepresentation<T> jr = new JacksonRepresentation<T>(mediaType, source); 
        jr.setObjectMapper(mapper); 
        return jr; 
    } 

    @Override 
    protected <T> JacksonRepresentation<T> create(Representation source, Class<T> objectClass) { 
        ObjectMapper mapper = createMapper(); 
        JacksonRepresentation<T> jr = new JacksonRepresentation<T>(source, objectClass); 
        jr.setObjectMapper(mapper); 
        return jr; 
    } 


    private ObjectMapper createMapper() { 
        JsonFactory jsonFactory = new JsonFactory(); 
        jsonFactory.configure(JsonGenerator.Feature.AUTO_CLOSE_TARGET, false); 
        ObjectMapper mapper = new ObjectMapper(jsonFactory); 
        mapper.registerModule(new Jdk8Module()); 
        return mapper; 
    } 

}]]></Answer>
<Answer><![CDATA[public class CustomJacksonRepresentation<T> extends JacksonRepresentation<T> {

    public CustomJacksonRepresentation(MediaType mediaType, T object) {
        super(mediaType, object);
    }

    public CustomJacksonRepresentation(Representation representation, Class<T> objectClass) {
        super(representation, objectClass);
    }

    public CustomJacksonRepresentation(T object) {
        super(object);
    }

    @Override
    protected ObjectMapper createObjectMapper() {
        ObjectMapper mapper = super.createObjectMapper();
        mapper.registerModule(new Jdk8Module());
        return mapper;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30249493" questionTitle="Using threads to make database requests">
<Answer><![CDATA[Task<Void> task = new Task<Void>() {
    @Override
    public Void call() {
        String courseName = "";
        Course c = new Course();
        c.setCCode(Integer.valueOf(courseId.getText()));
        mController = new ModelController(c);
        try {
            ResultSet rs = mController.<Course>get();
            if(rs.next()) {
                // update message property
                updateMessage(rs.getString(1));
            }
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }
}

public void getCourseNameOnClick(){
    try {
        Thread t = new Thread(task);
        // To update the label
        courseCodeLbl.textProperty.bind(task.messageProperty());
        t.setDaemon(true); // Imp! missing in your code
        t.start();
    } catch (NumberFormatException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}]]></Answer>
<Answer><![CDATA[public class MyController {

    private WidgetDAO widgetAccessor ;

    // java.util.concurrent.Executor typically provides a pool of threads...
    private Executor exec ;

    @FXML
    private TextField widgetTypeSearchField ;

    @FXML
    private TableView<Widget> widgetTable ;

    public void initialize() throws Exception {
        widgetAccessor = new WidgetDAO();

        // create executor that uses daemon threads:
        exec = Executors.newCachedThreadPool(runnable -> {
            Thread t = new Thread(runnable);
            t.setDaemon(true);
            return t ;
        });
    }

    // handle search button:
    @FXML
    public void searchWidgets() {
        final String searchString = widgetTypeSearchField.getText();
        Task<List<Widget>> widgetSearchTask = new Task<List<Widget>>() {
            @Override
            public List<Widget> call() throws Exception {
                return widgetAccessor.getWidgetsByType(searchString);
            }
        };

        widgetSearchTask.setOnFailed(e -> {
           widgetSearchTask.getException().printStackTrace();
            // inform user of error...
        });

        widgetSearchTask.setOnSucceeded(e -> 
            // Task.getValue() gives the value returned from call()...
            widgetTable.getItems().setAll(widgetSearchTask.getValue()));

        // run the task using a thread from the thread pool:
        exec.execute(widgetSearchTask);
    }

    // ...
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30246634" questionTitle="How are lazy streams implemented in Java 8?">
<Answer><![CDATA[class LazySeq<T> {

    private final List<T> list;
    private Predicate<? super T> predicate;

    public LazySeq(List<T> input) {
        this.list = new ArrayList<>(input);
    }

    //Here you just store the predicate, but you don't perform a filtering
    //You could also return a new LazySeq with a new state
    public LazySeq<T> filter(Predicate<? super T> predicate) {
        this.predicate = predicate;
        return this;
    }

    public void forEach(Consumer<? super T> consumer){
        if(predicate == null) {
            list.forEach(consumer);
        } else {
            for(T elem : list) {
                if(predicate.test(elem)) {
                    consumer.accept(elem);
                }
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[class FilterIterable<T> implements Iterable<T>
{
    private Iterable<? extends T> iter;
    private Predicate<? super T> pred;

    public FilterIterable(Iterable<? extends T> iter, Predicate<? super T> pred) {
        this.iter = iter;
        this.pred = pred;
    }

    public Iterator<T> iterator() {
        return FilterIterator<T>();
    }

    class FilterIterator<T> implements Iterator<T>
    {
        private Iterator<? extends T> iterator = iter.iterator();
        private T next = null;

        FilterIterator() {
            getNext();
        }

        private void getNext() {
            next = null;
            while (iterator.hasNext()) {
                T temp = iterator.next();
                if (pred.test(temp)) {
                    next = temp;
                    break;
                }
            }
        }

        public boolean hasNext() { return next != null; }

        public T next() {
            T temp = next;
            getNext();
            return temp;
        }       
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30245142" questionTitle="How to group elements of a List by elements of another in Java 8">
<Answer><![CDATA[public static void main(String[] args) {
    Person[] people = {new Person("00001"), new Person("00002"), new Person("00005")};
    Region[] regions = {
            new Region("Region 1", Arrays.asList("00001", "00002", "00003")),
            new Region("Region 2", Arrays.asList("00002", "00003", "00004")),
            new Region("Region 3", Arrays.asList("00001", "00002", "00005"))
    };

    Map<Person, List<Region>> result = Stream.of(regions)
            .flatMap(region -> region.getZipCodes().stream()
                    .map(zip -> new SimpleEntry<>(zip, region)))
            .flatMap(entry -> Stream.of(people)
                    .filter(person -> person.getZip().equals(entry.getKey()))
                    .map(person -> new SimpleEntry<>(person, entry.getValue())))
            .collect(Collectors.groupingBy(Entry::getKey, Collectors.mapping(Entry::getValue, Collectors.toList())));

    result.entrySet().forEach(entry -> System.out.printf("[%s]: {%s}\n", entry.getKey(), entry.getValue()));

    //      Output:
    //      [Person: 0]: {[name: Region 1, name: Region 3]}
    //      [Person: 1]: {[name: Region 1, name: Region 2, name: Region 3]}
    //      [Person: 2]: {[name: Region 3]}
}]]></Answer>
<Answer><![CDATA[List<Person> people = ...
List<Region> regions = ...

Map<String, List<Region>> zipToRegions =
    regions.stream().collect(
        () -> new HashMap<>(),
        (map, region) -> {
            for(String zipCode: region.getZipCodes()) {
                List<Region> list = map.get(zipCode);
                if(list == null) list = new ArrayList<>();
                list.add(region);
                map.put(zipCode, list);
            }
        },
        (m1, m2) -> m1.putAll(m2)
    );
Map<Person, List<Region>> personToRegions =
  people.stream().collect(
    Collectors.toMap(person -> person,
                     person -> zipToRegions.get(person.getZip()))
  );]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30232673" questionTitle="Splitting objects inside Java stream">
<Answer><![CDATA[private void printNameAgeSalary(String name, int age, double salary) {
    System.out.format("%s %d %.0f\n", name, age, salary);
}

private void printNameAge(String name, int age) {
    System.out.format("%s %d\n", name, age);
}

public interface Consumer2<T1, T2> {
    void consume(T1 t1, T2 t2);
}

public interface Consumer3<T1, T2, T3> {
    void consume(T1 t1, T2 t2, T3 t3);
}

public interface Caller<E> {

    void call(E code);

    static <S1, S2, S3> Caller<Consumer3<S1, S2, S3>> retrieve(Supplier<S1> s1, Supplier<S2> s2, Supplier<S3> s3) {
        return (Consumer3<S1, S2, S3> code) -> code.consume(s1.get(), s2.get(), s3.get());
    }

    static <S1, S2> Caller<Consumer2<S1, S2>> retrieve(Supplier<S1> s1, Supplier<S2> s2) {
        return (Consumer2<S1, S2> code) -> code.consume(s1.get(), s2.get());
    }
}]]></Answer>
<Answer><![CDATA[/** Extending interfaces must have a method called consume with N args */
interface NConsumer {}

/*
 * Method must be called consume for reflection.
 *
 * You can define N interfaces like this.
 */
nterface TriConsumer<A, B, C> extends NConsumer {
    void consume(A a, B b, C c);
}

interface ArrayCaller<E extends NConsumer> {
    void call(E code);
    static <T extends NConsumer> ArrayCaller<T> convert(Supplier<?>...argSuppliers) {
        final Object[] args = new Object[argSuppliers.length];
        for (int i = 0; i < argSuppliers.length; i++) {
            args[i] = argSuppliers[i].get();
        }
        return new ArrayCaller<T>() {
            @Override
            public void call(T code) {
                for (Method m: code.getClass().getMethods()) {
                    if (m.getName().equals("consume")) {
                        try {
                            m.invoke(code, args);
                        } catch (IllegalAccessException
                                | IllegalArgumentException
                                | InvocationTargetException e) {
                            throw new RuntimeException(e);
                        }
                    }
                }
            }
        };
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30217429" questionTitle="JavaFX 2 TextArea that changes height depending on its contents">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ResizingTextArea extends Application {

    @Override
    public void start(Stage primaryStage) {
        TextArea textArea = new TextArea();
        textArea.setWrapText(true);

        textArea.sceneProperty().addListener(new ChangeListener<Scene>() {
            @Override
            public void changed(ObservableValue<? extends Scene> obs, Scene oldScene, Scene newScene) {
                if (newScene != null) {
                    textArea.applyCSS();
                    Node text = textArea.lookup(".text");
                    textArea.prefHeightProperty().bind(Bindings.createDoubleBinding(new Callable<Double>() {
                        @Override
                        public Double call() {
                            return 2+text.getBoundsInLocal().getHeight();
                        }
                    }), text.boundsInLocalProperty()));
                }
            }
        });

        VBox root = new VBox(textArea);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[class CustomTextArea extends TextArea {
    CustomTextArea() {
        setWrapText(true);
        setFont(Font.font("Arial Black", 72));

        sceneProperty().addListener((observableNewScene, oldScene, newScene) -> {
            if (newScene != null) {
                applyCss();
                Node text = lookup(".text");

                // 2)
                prefHeightProperty().bind(Bindings.createDoubleBinding(() -> {
                    return getFont().getSize() + text.getBoundsInLocal().getHeight();
                }, text.boundsInLocalProperty()));

                // 1)                   
                text.boundsInLocalProperty().addListener((observableBoundsAfter, boundsBefore, boundsAfter) -> {
                    Platform.runLater(() -> requestLayout());
                });
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30210547" questionTitle="Grouping by object value, counting and then setting group key by maximum object attribute">
<Answer><![CDATA[class RouteCount {
    final Route route;
    final long count;

    private RouteCount(Route r, long c) {
        this.route = r;
        count = c;
    }

    public static RouteCount fromRoute(Route r) {
        return new RouteCount(r, 1L);
    }

    public static RouteCount combine(RouteCount rc1, RouteCount rc2) {
        Route recent;
        if (rc1.route.getLastUpdated() > rc2.route.getLastUpdated()) {
            recent = rc1.route;
        } else {
            recent = rc2.route;
        }
        return new RouteCount(recent, rc1.count + rc2.count);
    }
}]]></Answer>
<Answer><![CDATA[static <T, A1, A2, R1, R2, R> Collector<T, ?, R> pairing(Collector<T, A1, R1> c1, 
        Collector<T, A2, R2> c2, BiFunction<R1, R2, R> finisher) {
    EnumSet<Characteristics> c = EnumSet.noneOf(Characteristics.class);
    c.addAll(c1.characteristics());
    c.retainAll(c2.characteristics());
    c.remove(Characteristics.IDENTITY_FINISH);
    return Collector.of(() -> new Object[] {c1.supplier().get(), c2.supplier().get()},
            (acc, v) -> {
                c1.accumulator().accept((A1)acc[0], v);
                c2.accumulator().accept((A2)acc[1], v);
            },
            (acc1, acc2) -> {
                acc1[0] = c1.combiner().apply((A1)acc1[0], (A1)acc2[0]);
                acc1[1] = c2.combiner().apply((A2)acc1[1], (A2)acc2[1]);
                return acc1;
            },
            acc -> {
                R1 r1 = c1.finisher().apply((A1)acc[0]);
                R2 r2 = c2.finisher().apply((A2)acc[1]);
                return finisher.apply(r1, r2);
            }, c.toArray(new Characteristics[c.size()]));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30202582" questionTitle="Wait for and then receive textfield input without freezing GUI">
<Answer><![CDATA[public class MultiGame extends Application {
    ProgressBar progressBar;

    final int allowedTime = 5; //seconds
    final DoubleProperty percentOfTimeUsed = new SimpleDoubleProperty(0);
    final Timeline timer =
            new Timeline(
                new KeyFrame(
                        Duration.ZERO, new KeyValue(percentOfTimeUsed, 0)),
                new KeyFrame(
                        Duration.seconds(allowedTime), new KeyValue(percentOfTimeUsed, 1))
            );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();

        progressBar = new ProgressBar();
        progressBar.progressProperty().bindBidirectional(percentOfTimeUsed);
        root.setTop(progressBar);

        Button answer = new Button("Answer");
        answer.setOnAction(ae -> restart());// the on answer handler

        Button skip = new Button("Skip");
        skip.setOnAction(ae -> restart());// the skip question handler

        HBox mainContent = new HBox(15,
                new Label("Your Question"), new TextField("The answer"),  answer, skip);
        root.setCenter(mainContent);

        timer.setOnFinished(ae -> restart());// the end of timer handler

        primaryStage.setScene(new Scene(root));
        primaryStage.show();

        restart();
    }

    void restart() { timer.stop(); timer.playFromStart(); }

    void pause() { timer.pause(); }

    void resume() { timer.play(); }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.PauseTransition;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.stream.IntStream;

public class Main extends Application {

    int questionIndex = 0;
    int noOfQuestions = 10;

    @Override
    public void start(Stage stage) {

        VBox box = new VBox(10);
        box.setPadding(new Insets(10));
        Scene scene = new Scene(new ScrollPane(box), 500, 200);
        ObservableList<String> questions =
                FXCollections.observableArrayList("1) Whats your (full) name?",
                                                  "2) How old are you?",
                                                  "3) Whats your Birthday?",
                                                  "4) What starsign does that make it?",
                                                  "5) Whats your favourite colour?",
                                                  "6) Whats your lucky number?",
                                                  "7) Do you have any pets?",
                                                  "8) Where are you from?",
                                                  "9) How tall are you?",
                                                  "10) What shoe size are you?");

        ObservableList<String> answers = FXCollections.observableArrayList();

        final PauseTransition pt = new PauseTransition(Duration.millis(5000));

        Label questionLabel = new Label(questions.get(questionIndex));
        Label timerLabel = new Label("Time Remaining : ");
        Label time = new Label();
        time.setStyle("-fx-text-fill: RED");
        TextField answerField = new TextField();

        Button nextQuestion = new Button("Next");

        pt.currentTimeProperty().addListener(new ChangeListener<Duration>() {
            @Override
            public void changed(ObservableValue<? extends Duration> observable, Duration oldValue, Duration newValue) {
                time.setText(String.valueOf(5 - (int)newValue.toSeconds()));
            }
        });

        box.getChildren().addAll(questionLabel, answerField, new HBox(timerLabel, time), nextQuestion);

        nextQuestion.setOnAction( (ActionEvent event) -> {
            answers.add(questionIndex, answerField.getText());

            //Check if it is the last question
            if(questionIndex == noOfQuestions-1) {
                pt.stop();
                box.getChildren().clear();
                IntStream.range(0, noOfQuestions).forEach(i -> {
                    Label question = new Label("Question : " + questions.get(i));
                    question.setStyle("-fx-text-fill: RED");
                    Label answer = new Label("Answer : " + answers.get(i));
                    answer.setStyle("-fx-text-fill: GREEN");
                    box.getChildren().addAll(question, answer);
                });
            }
            // All other time
            else {
                //Set new question
                questionLabel.setText(questions.get(++questionIndex));
                answerField.clear();
                pt.playFromStart();
            }
        });

        pt.setOnFinished( ( ActionEvent event ) -> {
            nextQuestion.fire();
        });
        pt.play();

        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30176510" questionTitle="Change style of progressbar javaFX">
<Answer><![CDATA[.parentOfProgress {
    padding: 1px;
    border: 1px solid #808080;
    width: 144px;
}
progress {
    height:5px !important;
    background: #fafafa !important;
}

    progress::-webkit-progress-bar {
        background: #fafafa !important;
        height: 5px !important;
    }

    progress::-webkit-progress-value {
        background: #06c !important;
    }

    progress::-moz-progress-bar {
        background: #fafafa !important;
        height: 5px !important;
    }]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;


public class TrainProgressBar extends Application {

    @Override
    public void start(Stage primaryStage) {
        ProgressBar progressBar = new ProgressBar();
        progressBar.setProgress(0);
        Button startButton = new Button("Start");
        startButton.setOnAction(e -> {
            startButton.setDisable(true);
            Task<Void> task = new Task<Void>() {
                @Override
                public Void call() throws Exception {
                    for (int i = 0; i < 100; i++) {
                        Thread.sleep(20);
                        updateProgress(i, 100);
                    }
                    updateProgress(100, 100);
                    return null ;
                }
            };
            progressBar.progressProperty().bind(task.progressProperty());
            task.setOnSucceeded(evt -> startButton.setDisable(false));
            new Thread(task){{setDaemon(true);}}.start();
        });

        VBox root = new VBox(15, progressBar, startButton);
        Scene scene = new Scene(root, 250, 100);
        scene.getStylesheets().add("train-progress-bar.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30170089" questionTitle="How to skip even lines of a Stream&lt;String&gt; obtained from the Files.lines">
<Answer><![CDATA[static class LineSpliterator extends Spliterators.AbstractSpliterator<String>
        implements AutoCloseable {
    final BufferedReader br;
    final LongPredicate pred;
    long count = 0L;

    public LineSpliterator(Path path, LongPredicate pred) throws IOException {
        super(Long.MAX_VALUE, Spliterator.ORDERED);
        br = Files.newBufferedReader(path);
        this.pred = pred;
    }

    @Override
    public boolean tryAdvance(Consumer<? super String> action) {
        try {
            String s;
            while ((s = br.readLine()) != null) {
                if (pred.test(++count)) {
                    action.accept(s);
                    return true;
                }
            }
            return false;
        } catch (IOException ioe) {
            throw new UncheckedIOException(ioe);
        }
    }

    @Override
    public void close() {
        try {
            br.close();
        } catch (IOException ioe) {
            throw new UncheckedIOException(ioe);
        }
    }

    public static Stream<String> lines(Path path, LongPredicate pred) throws IOException {
        LineSpliterator ls = new LineSpliterator(path, pred);
        return StreamSupport.stream(ls, false)
                            .onClose(() -> ls.close());
    }
}]]></Answer>
<Answer><![CDATA[public class OddLines<T> extends Spliterators.AbstractSpliterator<T>
    implements Consumer<T> {

    public static <T> Stream<T> oddLines(Stream<T> source) {
        return StreamSupport.stream(new OddLines(source.spliterator()), false);
    }
    private static long odd(long l) { return l==Long.MAX_VALUE? l: (l+1)/2; }
    Spliterator<T> originalLines;

    OddLines(Spliterator<T> source) {
        super(odd(source.estimateSize()), source.characteristics());
        originalLines=source;
    }

    @Override
    public boolean tryAdvance(Consumer<? super T> action) {
        if(originalLines==null || !originalLines.tryAdvance(action))
            return false;
        if(!originalLines.tryAdvance(this)) originalLines=null;
        return true;
    }

    @Override
    public void accept(T t) {}
}]]></Answer>
<Answer><![CDATA[public class EvenOdd {
    public static final class EvenSpliterator<T> implements Spliterator<T> {
        private final Spliterator<T> underlying;
        boolean even;

        public EvenSpliterator(Spliterator<T> underlying, boolean even) {
            this.underlying = underlying;
            this.even = even;
        }

        @Override
        public boolean tryAdvance(Consumer<? super T> action) {
            if (even) {
                even = false;

                return underlying.tryAdvance(action);
            }
            if (!underlying.tryAdvance(t -> {})) {
                return false;
            }
            return underlying.tryAdvance(action);
        }

        @Override
        public Spliterator<T> trySplit() {
            if (!hasCharacteristics(SUBSIZED)) {
                return null;
            }
            final Spliterator<T> newUnderlying = underlying.trySplit();
            if (newUnderlying == null) {
                return null;
            }
            final boolean oldEven = even;

            if ((newUnderlying.estimateSize() & 1) == 1) {
                even = !even;
            }

            return new EvenSpliterator<>(newUnderlying, oldEven);
        }

        @Override
        public long estimateSize() {
            return underlying.estimateSize()>>1;
        }

        @Override
        public int characteristics() {
            return underlying.characteristics();
        }
    }

    public static void main(String[] args) {

        final EvenSpliterator<Integer> spliterator = new EvenSpliterator<>(IntStream.range(1, 100000).parallel().mapToObj(Integer::valueOf).spliterator(), false);
        final List<Integer> result = StreamSupport.stream(spliterator, true).parallel().collect(Collectors.toList());
        final List<Integer> expected = IntStream.range(1, 100000 / 2).mapToObj(i -> i * 2).collect(Collectors.toList());
        if (result.equals(expected)) {
            System.out.println("Yay! Expected result.");
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30146560" questionTitle="How to change AnimationTimer speed?">
<Answer><![CDATA[import javafx.animation.AnimationTimer;

public abstract class AnimationTimerExt extends AnimationTimer {

    private long sleepNs = 0;

    long prevTime = 0;

    public AnimationTimerExt( long sleepMs) {
        this.sleepNs = sleepMs * 1_000_000;
    }

    @Override
    public void handle(long now) {

         // some delay
        if ((now - prevTime) < sleepNs) {
            return;
        }

        prevTime = now;

        handle();
    }

    public abstract void handle();

}]]></Answer>
<Answer><![CDATA[private void initialize() {
 programButtonAnimation=new AnimationTimer(){

            private long lastUpdate = 0 ;
            @Override
            public void handle(long now) {
                    if (now - lastUpdate >= 28_000_000) {
                        showClockAnimation();
                        lastUpdate = now ;
                    }
            }
        };
 programButtonAnimation.start();
}

private void showClockAnimation(){
    String imageName = "%s_"+"%05d"+".%s";
    String picturePath="t093760/diploma/view/styles/images/pink_frames/"+String.format( imageName,"pink" ,frameCount,"png");
    programButton.setStyle("-fx-background-image:url('"+picturePath+"')");
    frameCount++;
    if(frameCount>=120){
        programButtonAnimation.stop();
        frameCount=0;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30103034" questionTitle="How to properly close a variable amount of streams?">
<Answer><![CDATA[private static void foo2(String path, String... files) throws IOException {
    Closeable[] cl={ null };
    try(Closeable c=()->{ if(cl[0]!=null) cl[0].close(); }) {
        Stream.Builder<Stream<String>> b=Stream.builder();
        for(String file: files) {
            if(Math.random()>0.7) throw new RuntimeException("simulated opening failure");
            BufferedReader br=Files.newBufferedReader(Paths.get(path, file));
            System.out.println("opened "+file);
            br=new BufferedReader(br) {
                @Override
                public void close() throws IOException {
                    System.out.println("closing "+file);
                    super.close();
                    throw new RuntimeException("simulated closing "+file+" failure");
                }
            };
            cl[0]=join(cl[0], br);
            b.add(br.lines());
        }
        b.build()
         .parallel()
         .flatMap(Function.identity())
         .distinct()
         .sorted()
         .limit(10)
         .forEachOrdered(System.out::println);
        throw new RuntimeException("simulated processing failure");
    }
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

public class CompositeAutoclosable<T extends AutoCloseable> implements AutoCloseable {
    private final List<T> components= new ArrayList<>();

    public void addComponent(T component) { components.add(component); }

    public List<T> getComponents() { return components; }

    @Override
    public void close() throws Exception {
        Exception e = null;
        for (T component : components) {
            try { component.close(); }
            catch (Exception closeException) {
                if (e == null) { e = closeException; }
                else { e.addSuppressed(closeException); }
            }
        }
        if (e != null) { throw e; }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30062933" questionTitle="migrate from Joda time library to Java time(Java 8)">
<Answer><![CDATA[private static final Pattern ISO_8601_PARSE = Pattern.compile(
        "(?<year>\\d{1,4})-(?<month>\\d{1,2})-(?<day>\\d{1,2})"
        + "(T((?<hour>\\d{1,2})(\\:(?<minute>\\d{1,2})(\\:(?<second>\\d{1,2})(\\.(?<millis>\\d{1,3}))?Z?)?)?)?)?");

public static Date parseIso8601Date(String date) throws IllegalArgumentException {
    Matcher matcher = ISO_8601_PARSE.matcher(date);
    if (matcher.matches()) {
        try {
            String day = matcher.group("day");
            String month = matcher.group("month");
            String year = matcher.group("year");
            String hour = matcher.group("hour");
            String minute = matcher.group("minute");
            String second = matcher.group("second");
            String millis = matcher.group("millis");
            return Date.from(ZonedDateTime.of(
                    Integer.valueOf(year),
                    Integer.valueOf(month),
                    Integer.valueOf(day),
                    hasText(hour) ? Integer.valueOf(hour) : 0,
                    hasText(minute) ? Integer.valueOf(minute) : 0,
                    hasText(second) ? Integer.valueOf(second) : 0,
                    (hasText(millis) ? Integer.valueOf(millis) : 0) * 1000000, // nanoOfSecond
                    ZoneOffset.UTC).toInstant());
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Failed to parse [" + date + "]: " + e, e);
        }
    } else {
        throw new IllegalArgumentException("Failed to parse [" + date + "]; does not match pattern yyyy-MM-ddThh:mm:ss[.SSS]Z");
    }
}]]></Answer>
<Answer><![CDATA[System.out.println(System.getProperty("java.version")); // 1.8.0_31

// parsing s1 with offset = UTC
String s1 = "2015-01-01T12:29:22+00:00"; 

OffsetDateTime odt1 = DATE_TIME_OPTIONAL_OFFSET.parse(s1, OffsetDateTime::from);
System.out.println(odt1); // 2015-01-01T12:29:22Z --- OK

LocalDateTime ldt1 = DATE_TIME_OPTIONAL_OFFSET.parse(s1, LocalDateTime::from);
System.out.println(ldt1); // 2015-01-01T12:29:22 --- OK

ZonedDateTime zdt1 = DATE_TIME_OPTIONAL_OFFSET.withZone(ZoneId.of("America/New_York")).parse(s1, ZonedDateTime::from);
System.out.println(zdt1); // 2015-01-01T12:29:22-05:00[America/New_York] --- seems to be a bug compared with the spec above, the parsed offset was overridden!!!

// now parsing s2 without offset
String s2 = "2015-01-01T12:29:22";

OffsetDateTime odt2 = DATE_TIME_OPTIONAL_OFFSET.parse(s2, OffsetDateTime::from);
System.out.println(odt2); // 2015-01-01T12:29:22Z --- questionable, the offset Z is invented/guessed here

LocalDateTime ldt2 = DATE_TIME_OPTIONAL_OFFSET.parse(s2, LocalDateTime::from);
System.out.println(ldt2); // 2015-01-01T12:29:22 --- OK

DATE_TIME_OPTIONAL_OFFSET.withZone(ZoneId.of("America/New_York")).parse(s2, ZonedDateTime::from);
// throws an exception --- seems to be a bug compared with the spec above, the zone set was not accepted]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="30040480" questionTitle="javafx - how to make an event for left &amp; right click at the same time?">
<Answer><![CDATA[boolean mouse_1, mouse_2 = false;

public void mousePressed(MouseEvent e){
    //The numbers are just made up I don't remember the actual codes for the buttons but it's simple enough to figure out.
    if(e.getButton()==1){
        mouse_1  = true;
    }
    if(e.getButton()==2){
        mouse_2  = true;
    }

    if(mouse_1&&mouse_2){
    //Your code here
    }
}

public void mouseReleased(MouseEvent e){
    if(e.getButton() == 1){
        mouse_1 = false;
    }
    if(e.getButton() == 2){
        mouse_2 = false;
    }
}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    BooleanProperty primaryMouseButtonDown = new SimpleBooleanProperty();
    BooleanProperty secondaryMouseButtonDown = new SimpleBooleanProperty();

    @Override
    public void start(Stage primaryStage) {
        try {

            StackPane root = new StackPane();

            root.addEventFilter(MouseEvent.MOUSE_PRESSED, e -> {
                primaryMouseButtonDown.setValue( e.isPrimaryButtonDown());
                secondaryMouseButtonDown.setValue( e.isSecondaryButtonDown());
            });

            root.addEventFilter(MouseEvent.MOUSE_RELEASED, e -> {
                primaryMouseButtonDown.setValue( e.isPrimaryButtonDown());
                secondaryMouseButtonDown.setValue( e.isSecondaryButtonDown());
            });

            BooleanBinding binding = Bindings.and(primaryMouseButtonDown, secondaryMouseButtonDown);
            binding.addListener( new ChangeListener<Boolean>() {

                @Override
                public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                    System.out.println( "Mouse Button Event: " + oldValue + " -> " + newValue);
                }
            });


            Scene scene = new Scene(root,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29984025" questionTitle="Focus on next item in container">
<Answer><![CDATA[@Override
public void start( final Stage primaryStage )
{
    TextField field1 = new TextField();
    TextField field2 = new TextField();
    TextField field3 = new TextField();
    VBox vbox = new VBox( field1, field2, field3 );

    vbox.addEventFilter( KeyEvent.KEY_PRESSED, ( KeyEvent event ) ->
    {
        if ( event.getCode() == KeyCode.ENTER )
        {
            KeyEvent newEvent
                    = new KeyEvent(
                            null,
                            null,
                            KeyEvent.KEY_PRESSED,
                            "",
                            "\t",
                            KeyCode.TAB,
                            event.isShiftDown(),
                            event.isControlDown(),
                            event.isAltDown(),
                            event.isMetaDown()
                    );

            Event.fireEvent( event.getTarget(), newEvent );
            event.consume();
        }
    } );
    final Scene scene = new Scene( vbox, 800, 600 );
    primaryStage.setScene( scene );
    primaryStage.show();

}]]></Answer>
<Answer><![CDATA[textField.setOnAction((ActionEvent e) -> {
    boolean isThisField = false;
    for (Node child : textField.getParent().getChildrenUnmodifiable()) {
        if (isThisField) {

            //This code will only execute after the current Node
            if (child.isFocusTraversable() && !child.isDisabled()) {
                child.requestFocus();

                //Reset check to prevent later Node from pulling focus
                isThisField = false;
            }
        } else {

            //Check if this is the current Node
            isThisField = child.equals(textField);
        }
    }

    //Check if current Node still has focus
    boolean focusChanged = !textField.isFocused();
    if (!focusChanged) {
        for (Node child : textField.getParent().getChildrenUnmodifiable()) {
            if (!focusChanged && child.isFocusTraversable() && !child.isDisabled()) {
                child.requestFocus();

                //Update to prevent later Node from pulling focus
                focusChanged = true
            }
        }
    }
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29945627" questionTitle="Java 8 lambda Void argument">
<Answer><![CDATA[void notReturnsNotThrows() {};
void notReturnsThrows() throws Exception {}
String returnsNotThrows() { return ""; }
String returnsThrows() throws Exception { return ""; }

{
    Runnable r1 = this::notReturnsNotThrows; //ok
    Runnable r2 = this::notReturnsThrows; //error
    Runnable r3 = this::returnsNotThrows; //ok
    Runnable r4 = this::returnsThrows; //error

    Callable c1 = this::notReturnsNotThrows; //error
    Callable c2 = this::notReturnsThrows; //error
    Callable c3 = this::returnsNotThrows; //ok
    Callable c4 = this::returnsThrows; //ok

}


interface VoidCallableExtendsCallable extends Callable<Void> {
    @Override
    Void call() throws Exception;
}

interface VoidCallable {
    void call() throws Exception;
}

{
    VoidCallableExtendsCallable vcec1 = this::notReturnsNotThrows; //error
    VoidCallableExtendsCallable vcec2 = this::notReturnsThrows; //error
    VoidCallableExtendsCallable vcec3 = this::returnsNotThrows; //error
    VoidCallableExtendsCallable vcec4 = this::returnsThrows; //error

    VoidCallable vc1 = this::notReturnsNotThrows; //ok
    VoidCallable vc2 = this::notReturnsThrows; //ok
    VoidCallable vc3 = this::returnsNotThrows; //ok
    VoidCallable vc4 = this::returnsThrows; //ok
}]]></Answer>
<Answer><![CDATA[package example;

interface Action<T, U> {
       U execute(T t);
       static  Action<Void,Void> invoke(Runnable runnable){
           return (v) -> {
               runnable.run();
                return null;
            };         
       }
    }

public class Lambda {


    public static void main(String[] args) {

        Action<Void, Void> a = Action.invoke(() -> System.out.println("Do nothing!"));
        Void t = null;
        a.execute(t);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29885065" questionTitle="Java FX Null Pointer Exception when using Media Player at javafx.scene.media.MediaPlayer.init">
<Answer><![CDATA[private void initMediaPlayer() throws IOException {
    this.mediaPanel.getMediaPanel().setVisible(true);

    //Initialize FX Panel
    this.mediaRoot = new Group();
    this.mediaScene = new Scene(this.mediaRoot, 0, 0);

    //Open/prepare the file
    //String tutorialFilePath = new File("").getAbsolutePath() + DIRECTORY_PATH + "Tutorial.mp4";
    String tutorialFilePath = new File("").getAbsolutePath() + MEDIA_PATH + this.observer.getName() +"Tutorial.mp4";
    File mediaFile = new File(tutorialFilePath);
    this.tutorialVideo = new Media(mediaFile.toURI().toString());

    //Create the media player
    this.VideoPlayer = new MediaPlayer(this.tutorialVideo);  //Error here
    this.VideoPlayer.setAutoPlay(false);

    this.mediaViewer = new MediaView(this.VideoPlayer);
    this.mediaViewer.setFitHeight(this.mediaPanel.getPanelHeight());
    this.mediaViewer.setFitWidth(this.mediaPanel.getPanelWidth());
        ((Group)this.mediaScene.getRoot()).getChildren().add(this.mediaViewer);

    this.mediaPanel.getMediaPanel().setScene(this.mediaScene);
}]]></Answer>
<Answer><![CDATA[import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.FlowLayout;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;


public class MediaPlayerInSwing {

    private static final String MEDIA_URL = "http://download.oracle.com/otndocs/products/javafx/oow2010-2.flv" ;

    private JFrame window ;

    private JFXPanel jfxPanel ;
    private Media media ;
    private MediaPlayer player ;
    private MediaView mediaView ;
    private BorderPane root ;
    private Scene scene ;

    private Button button ;

    // create on AWT Event Dispatch Thread
    public MediaPlayerInSwing() {
        Platform.setImplicitExit(false);
        initGUI();
    }

    private void initGUI()  {
        window = new JFrame();
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setLayout(new BorderLayout());

        JPanel controls = new JPanel();
        controls.setLayout(new FlowLayout());
        button = new Button("Show video");
        controls.add(button);
        button.addActionListener(e -> {
            if (jfxPanel == null) {
                showVideo();
            } else {
                tearDownVideo();
            }
        });

        window.add(controls, BorderLayout.SOUTH);
        window.setSize(600, 480);
        window.setLocationRelativeTo(null);
        window.setVisible(true);
    }

    private void showVideo() {


        jfxPanel = new JFXPanel();

        Platform.runLater(() -> {
            media = new Media(MEDIA_URL);
            player = new MediaPlayer(media);
            player.play(); 
            mediaView = new MediaView(player);
            root = new BorderPane(mediaView);
            scene = new Scene(root, 600, 400);
            jfxPanel.setScene(scene);
        });

        window.add(jfxPanel, BorderLayout.CENTER);
        button.setLabel("Hide video");
    }

    private void tearDownVideo() {

        window.remove(jfxPanel);

        Platform.runLater(() -> {
            player.stop();
            player.dispose();
            player = null ;
            mediaView = null ;
            root = null ;
            jfxPanel.setScene(null);
            scene = null ;
            SwingUtilities.invokeLater(() -> {
                jfxPanel = null ;
                // force window to repaint...
                window.getRootPane().repaint();
            });
        });
        button.setLabel("Show video");
    }

    public static void main(String[] args) throws Exception {
        SwingUtilities.invokeLater(MediaPlayerInSwing::new);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29867318" questionTitle="PostMethod HttpPost HttpClient - post xml with url parameters">
<Answer><![CDATA[import java.net.URL;
import java.net.HttpURLConnection;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

public class XMLPoster {
    public static void main(String[] argv) {
        try {
            String XMLData = argv[0];
            URL url = new URL("http://posttestserver.com/post.php");
            HttpURLConnection httpConn = (HttpURLConnection)url.openConnection();
            httpConn.setRequestMethod("POST");
            httpConn.setRequestProperty("Content-Type", "application/xml; charset=utf-8");
            httpConn.setRequestProperty("Content-Length", Integer.toString(XMLData.length()));
            httpConn.setDoOutput(true);

            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter((httpConn.getOutputStream())));
            writer.write(XMLData, 0, XMLData.length());
            writer.flush();
            writer.close();

            System.out.println(httpConn.getResponseCode());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}]]></Answer>
<Answer><![CDATA[import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URLEncoder;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

public class XMLPoster {
    public static void main(String[] argv) {
        try {
            String XMLData = argv[0];
            URL url = new URL("http://posttestserver.com/post.php");
            String myParam = "myparam=" + URLEncoder.encode(XMLData, "UTF-8");
            HttpURLConnection httpConn = (HttpURLConnection)url.openConnection();
            httpConn.setRequestMethod("POST");
            httpConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            httpConn.setRequestProperty("Content-Length", Integer.toString(myParam.length()));
            httpConn.setDoOutput(true);

            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter((httpConn.getOutputStream())));
            writer.write(myParam, 0, myParam.length());
            writer.flush();
            writer.close();

            System.out.println(httpConn.getResponseCode());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29856100" questionTitle="How to handle IOException in Iterable.forEach?">
<Answer><![CDATA[try (BufferedWriter bw = new BufferedWriter(
    new OutputStreamWriter(
        new FileOutputStream("out.txt"), "UTF-8"));) {

    objects.forEach((o) -> {
        try {
            bw.write(o.toString()));
        } catch(IOException kludgy) {
            throw new RuntimeException(kludgy);
        }
    });

} catch (RuntimeException kludgy) {
    Throwable cause = kludgy.getCause();
    if ( cause instanceof IOException ) {
        IOException e = (IOException) cause;
        // handle exception
    } else {
        throw kludgy;
    }
}]]></Answer>
<Answer><![CDATA[import java.io.*;
import java.util.*;
public class HelloWorld{

     public static void main(String []args){
        write(Arrays.asList(1,2,3));
     }

  public static void write(Iterable<?> objects) {
    try (BufferedWriter bw = new BufferedWriter(
        new OutputStreamWriter(
            new FileOutputStream("c:\\out.txt"), "UTF-8"))) {

      objects.forEach(o->myConsumerThrowsRuntimeException(bw,o.toString())); //Unhandled exception type IOException

  } catch (Exception e) {
    //handle exception
  } 
  }
  public static void myConsumerThrowsRuntimeException(Writer writer , String data){
      try{
          writer.write(data);
      }catch(IOException e){

          throw new RuntimeException("Cannot write Data error is "+e.getMessage());
      } 
  } 
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29849096" questionTitle="Position labels to different sides in the parent pane">
<Answer><![CDATA[@Override
public void start( Stage stage )
{

    StackPane flow = new StackPane();

    flow.setPrefSize(900, 30);

    Label label = new Label("Zoom 1.5");
    Label labelStat = new Label("Users 7");
    Label labelSec = new Label("Connected");

    StackPane.setAlignment( label, Pos.CENTER_LEFT );
    StackPane.setAlignment( labelStat, Pos.CENTER );
    StackPane.setAlignment( labelSec, Pos.CENTER_RIGHT );

    flow.getChildren().addAll(label, labelStat, labelSec);

    Scene scene = new Scene(flow);

    stage.setScene(scene);
    stage.show();
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage)
{
    HBox hbox = new HBox();
    hbox.setPrefSize(900, 30);

    Label label = new Label("Zoom 1.5");
    Label labelStat = new Label("Users 7");
    Label labelSec = new Label("Connected");

    Region lSpring = new Region();
    HBox.setHgrow(lSpring, Priority.ALWAYS);
    Region rSpring = new Region();
    HBox.setHgrow(rSpring, Priority.ALWAYS);

    hbox.getChildren().addAll(label, lSpring, labelStat, rSpring, labelSec);
    Scene scene = new Scene(hbox);

    primaryStage.setTitle("HBox Springs");
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29837124" questionTitle="Generics friendly Type Handler map">
<Answer><![CDATA[/** Handles T or children of T. */
public class Handler<T> {
    public final Class<T> type;

    Handler(Class<T> type) {
        this.type = type;
    }
}

public class HandlerRegistry {

    private final Map<Class<?>, Handler<?>> handlers = new HashMap<>();

    public <T> void setHandler(Class<T> type, Handler<T> handler) {
        handlers.put(type, handler);
    }

    public <T> Handler<? super T> getHandler(Class<T> type) {
        Handler<?> handler = handlers.get(type);
        if (handler != null) {
            Handler<T> ht = new Handler<>(type);
            return ht.getClass().cast(handler);
        }
        if (type.isPrimitive() || type == Object.class) {
            return null;
        }
        return getHandler(type.getSuperclass());
    }
}

class NumberHandler extends Handler<Number> {
    NumberHandler() {
        super(Number.class);
    }
}

class BigDecimalHandler extends Handler<BigDecimal> {
    BigDecimalHandler() {
        super(BigDecimal.class);
    }
}

    HandlerRegistry hreg = new HandlerRegistry();
    hreg.setHandler(Number.class, new NumberHandler());

    Handler<? super BigDecimal> h = hreg.getHandler(BigDecimal.class);
    System.out.println("Handler: " + h.getClass().getName());]]></Answer>
<Answer><![CDATA[class HandlerRegistry {
    private static class Holder<T> {
        private final Class<T>   type;
        private final Handler<? extends T> handler;
        Holder(Class<T> c, Handler<? extends T> h) {
            type=Objects.requireNonNull(c);
            handler=h;
        }
        <U> Holder<U> as(Class<U> expected) {
            if(type!=expected)
                throw new ClassCastException();
            @SuppressWarnings("unchecked") Holder<U> h=(Holder)this;
            return h;
        }
        public Handler<? extends T> getHandler() {
            return handler;
        }
    }
    Map<Class<?>, Holder<?>> handlers;

    <T> void setHandler(Class<T> type, Handler<? extends T> handler) {
        handlers.put(type, new Holder<>(type, handler));
    }
    <T> T handle(Class<T> type, HandlerArgument arg) {
        return getHandler(type).handle(arg);
    }
    <T> Handler<? extends T> getHandler(Class<T> type) {
        return handlers.get(type).as(type).getHandler();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29826531" questionTitle="Combining sub sets to larger sets if they share common value">
<Answer><![CDATA[static boolean isStraight(List<Card> cards) {
    List<List<Rank>> rankList = cards.stream()
            .map(Card::getRank)
            .sorted(Comparator.comparingInt(Rank::getValue))
            .distinct()
            .collect(LinkedList::new,
                    (list, rank) -> {
                        boolean startNextList = false;
                        if (list.isEmpty()) {
                            startNextList = true;
                        } else {
                            List<Rank> priorRanks = list.get(list.size() - 1);
                            if (priorRanks.get(priorRanks.size() - 1).getValue()
                                       < rank.getValue() - 1) {
                                startNextList = true;
                            }
                        }
                        if (startNextList) {
                            List<Rank> priorRanks = new LinkedList<>();
                            list.add(priorRanks);
                        }
                        List<Rank> priorRanks = list.get(list.size() - 1);
                        priorRanks.add(rank);
                    },
                    (list1, list2) -> {
                        list1.addAll(list2);
                    });]]></Answer>
<Answer><![CDATA[static void split(List<Rank> rankList) {
    List<Rank> sorted = rankList.stream()
        .distinct()
        .sorted()
        .collect(toList());

    List<Integer> splits = IntStream.range(1, sorted.size())
        .filter(i -> sorted.get(i).ordinal() != sorted.get(i-1).ordinal() + 1)
        .boxed()
        .collect(toCollection(ArrayList::new));

    splits.add(0, 0);
    splits.add(sorted.size());

    List<List<Rank>> runs = IntStream.range(1, splits.size())
        .mapToObj(i -> sorted.subList(splits.get(i-1), splits.get(i)))
        .collect(toList());

    int longest = runs.stream()
        .mapToInt(list -> list.size())
        .max()
        .getAsInt();

    runs.stream()
        .filter(list -> list.size() == longest)
        .forEach(System.out::println);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29741997" questionTitle="how to get the textfield value when i choose a date in DatePicker">
<Answer><![CDATA[public class DatePickin extends javafx.embed.swing.JFXPanel {

    private DatePicker date_Picker;
    private LocalDate dateValue;
    //...

    public void getDate() {
        date_Picker = new DatePicker();
        date_Picker.setShowWeekNumbers(false);
        date_Picker.setOnAction((e) -> {

            try {
                dateValue = date_Picker.getValue();
            } catch (UnsupportedOperationException uoe) {
                uoe.printStackTrace();
            }
        });
    }

    public LocalDate getDateValue() {
        return dateValue;
    }]]></Answer>
<Answer><![CDATA[private void init()
{ 
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(10,10,10,10);

    // date picker
    DatePickin date_Picker = new DatePickin(); /// here i used the same object i created here in the CompHandler class as the arg
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.BOTH;
    gbc.anchor = GridBagConstraints.EAST;
    add(date_Picker, gbc);

    // button to display date in textarea
    noChange_Button = new JButton("No Change");
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.anchor = GridBagConstraints.WEST;
    add(noChange_Button, gbc);

    ///////////////////// TEXT AREA ///////////////////////

    display_Area = new JTextArea();
    gbc.gridx = 0;
    gbc.gridy = 3;
    //gbc.weighty = 1;
    gbc.gridwidth = 3;
    gbc.gridheight = 4;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.anchor = GridBagConstraints.SOUTHWEST;
    display_Area.setEditable(true);
    display_Area.setLineWrap(true);
    display_Area.setWrapStyleWord(true);

    JScrollPane scroll = new JScrollPane(display_Area);
    scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    scroll.setPreferredSize(new Dimension(0, 70));
    add(scroll, gbc);

    // adding listeners to components
    // registering all components with their respective listeners
    CompHandler compHandler = new CompHandler(date_Picker); // here u can see i added the reference of DatePicker to the class as an arg
    noChange_Button.addActionListener(compHandler);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29722840" questionTitle="Javafx KeyEvent and MousEevent">
<Answer><![CDATA[public void start(Stage primaryStage) throws Exception {

    Pane pane = new Pane();
    final Scene scene = new Scene(pane, 500, 500);
    final Circle circle = new Circle(250, 250, 20);
    circle.setFill(Color.WHITE);
   circle.setStroke(Color.BLACK);
    pane.getChildren().add(circle);
     circle.setFocusTraversable(true);
    circle.setOnKeyPressed(new EventHandler<KeyEvent>() {
        @Override
        public void handle(KeyEvent e) {
            if ((e.getCode() == KeyCode.UP) && (circle.getCenterY() >= 5)) {
                circle.setCenterY(circle.getCenterY() - 5);
            }

            else if ((e.getCode() == KeyCode.DOWN && (circle.getCenterY() <= scene.getHeight() - 5))) {
                circle.setCenterY(circle.getCenterY() + 5);
            }
            else if ((e.getCode() == KeyCode.RIGHT) && (circle.getCenterX() <= scene.getWidth() - 5)) {
                circle.setCenterX(circle.getCenterX() + 5);
            }
            else if ((e.getCode() == KeyCode.LEFT && (circle.getCenterX() >= 5))) {

                circle.setCenterX(circle.getCenterX()-5);
            }
        }
    });

  //creates new spots by clicking anywhere on the pane
    pane.setOnMouseClicked(new EventHandler<MouseEvent>() {  
      public void handle(MouseEvent event) {
            double newX = event.getX(); //getting the x-coordinate of the clicked area
            double newY = event.getY(); //getting the y-coordinate of the clicked area

            Circle newSpot = new Circle(newX, newY,20);
            newSpot.setFill(Color.WHITE);
            newSpot.setStroke(Color.BLACK);
            pane.getChildren().add(newSpot);

        }
    });

    primaryStage.setTitle("Move the circle");
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

// Java 8+ code.
public class Spots extends Application {

    private static final int SIZE = 500;
    private static final int SPOT_RADIUS = 20;

    private Color color = Color.BLUE;

    public void start(Stage stage) {
        Pane root = new Pane();

        root.setOnMouseClicked(event ->
                root.getChildren().add(
                        new Spot(
                                event.getX(),
                                event.getY(),
                                color
                        )
                )
        );

        Scene scene = new Scene(root, SIZE, SIZE, Color.BLACK);
        scene.setOnKeyTyped(event -> {
            switch (event.getCharacter()) {
                case "0":
                    color = Color.BLUE;
                    break;
                case "1":
                    color = Color.RED;
                    break;
            }
        });

        stage.setScene(scene);
        stage.show();
    }

    private class Spot extends Circle {
        public Spot(double xPos, double yPos, Color color) {
            super(xPos, yPos, SPOT_RADIUS);
            setFill(color);
        }
    }

    public static void main(String... args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29662603" questionTitle="Need assistance drawing line segments using arrow keys">
<Answer><![CDATA[package skowronek15;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;



public class DrawLineWithArrowKeys extends Application {
double bX = 150; //start x value denote for beginning-X
double bY = 150; //start y value denote for beginning-y
double eX = 150; //start x value denote for end-x
double eY = 150; //start y value denote for end-y
double bX2, bY2; //start of next line
double segment = 20; //length of segment


@Override
public void start(Stage primaryStage) {
    Pane myPane = new Pane(); //create a pane


    Line line = new Line(bX,bY,eX,eY); //create the starting or initial line
    line.setStrokeWidth(2); //set width
    line.setStroke(Color.RED); //set color
    myPane.getChildren().add(line); //add line to pane

    line.setOnKeyPressed(e -> { //switch statement to determine what happens when
                                // each key is pressed
     if (e.getCode().isArrowKey())
     {
        switch (e.getCode()) {

        case DOWN:
            bY2 = bY ; //start of next line, bY2 is equal to the start of originating
                       // y-coordinate bY
            bY += segment;//increment start of first line
            eY = bY; // end y (eY) coordinate equal to beginning y coordinate (bY) after 
                    // it's incremented;


            Line line2 = new Line(bX,bY2,eX,eY); //create a new line to be drawn;
                                //beginning y coordinate is now bY2;
            line2.setStrokeWidth(2);
            line2.setStroke(Color.GREEN);
            myPane.getChildren().add(line2);
            break;

        case UP:
            bY2 = bY;
            bY -= segment;
            eY = bY;

            Line line3 = new Line(bX,bY2,eX,eY);
            line3.setStrokeWidth(2);
            line3.setStroke(Color.GREEN);
            myPane.getChildren().add(line3);
            break;

        case LEFT:
            bX2 = bX;
            bX -= segment;
            eX = bX;

            Line line4 = new Line(bX2,bY, eX, eY);
            line4.setStrokeWidth(2);
            line4.setStroke(Color.GREEN);
            myPane.getChildren().add(line4);
            break;

        case RIGHT: 
            bX2 = bX;
            bX += segment;
            eX = bX;
            Line line5 = new Line(bX2,bY,eX,eY);
            line5.setStrokeWidth(2);
            line5.setStroke(Color.GREEN);
            myPane.getChildren().add(line5);
            line5.getStrokeLineJoin();
            break;

            default:


            break;
        }
     }
    });


    Scene scene = new Scene(myPane, 300, 300);
    primaryStage.setTitle("Draw Line with Arrow Keys");
    primaryStage.setScene(scene);
    primaryStage.show();
    line.requestFocus();



}






public static void main(String[] args) {
    launch(args);
}]]></Answer>
<Answer><![CDATA[private int bX = 75, bY = 75;
private int step = 20;


@Override
public void start( Stage primaryStage )
{

    Pane myPane = new Pane();
    Path path = new Path( new MoveTo( bX, bY ) ); // move to starting point
    path.setStrokeWidth( 1 );
    path.setStroke( Color.GREEN );

    myPane.getChildren().add( path );

    path.setOnKeyPressed( e ->
    {
        if ( e.getCode().isArrowKey() )
        {
            switch (e.getCode())
            {
                case DOWN:
                    bY += step;
                    break;

                case UP:
                    bY -= step;
                    break;

                case LEFT:
                    bX -= step;
                    break;

                case RIGHT:
                    bX += step;
                    break;
            }
            path.getElements().add( new LineTo( bX, bY ) );
        }
    } );

    Scene scene = new Scene( myPane, 150, 150 );
    primaryStage.setTitle( "Draw Line with Arrow Keys" );
    primaryStage.setScene( scene );
    primaryStage.show();
    path.requestFocus();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29636578" questionTitle="make text area like notepad JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Notepad extends Application {
    @Override
    public void start(Stage stage) {
        TextArea textArea = new TextArea();
        Label title = new Label(
                "Benjamin Franklin: Selected Quotes"
        );
        title.getStyleClass().add("title");

        VBox layout = new VBox(
                10,
                title,
                textArea
        );
        layout.setPadding(new Insets(10));
        VBox.setVgrow(textArea, Priority.ALWAYS);

        Scene scene = new Scene(layout);
        scene.getStylesheets().add(getClass().getResource(
                "notepad.css"
        ).toExternalForm());
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[#container {
  margin: 0;
  padding: 0;
}
textarea {
  margin: 0;
  padding: 0 4px;
  height: 150px;
  width: 300px;
  position: relative;
  color: #444;
  line-height: 20px;
  border: 1px solid #d2d2d2;
  background: #fff;
  background: -webkit-gradient(linear, 0 0, 0 100%, from(#3b84aa), color-stop(4%, #f2e47c)) 0 0px
  /*4px*/
  ;
  background: -webkit-linear-gradient(top, #3b84aa 0%, #f2e47c 8%) 0 0px
  /*4px*/
  ;
  background: -moz-linear-gradient(top, #3b84aa 0%, #f2e47c 8%) 0 0px
  /*4px*/
  ;
  background: -ms-linear-gradient(top, #3b84aa 0%, #f2e47c 8%) 0 0px
  /*4px*/
  ;
  background: -o-linear-gradient(top, #3b84aa 0%, #f2e47c 8%) 0 0px
  /*4px*/
  ;
  background: linear-gradient(top, #3b84aa 0%, #f2e47c 8%) 0 0px
  /*4px*/
  ;
  -webkit-background-size: 100% 20px;
  -moz-background-size: 100% 20px;
  -ms-background-size: 100% 20px;
  -o-background-size: 100% 20px;
  background-size: 100% 20px;
  box-shadow: 2px 2px 10px #3391fc;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29576577" questionTitle="TableView doesn't commit values on focus lost event">
<Answer><![CDATA[public class EditCell<S, T> extends TableCell<S, T> {
    private final TextField textField = new TextField();

    // Converter for converting the text in the text field to the user type, and vice-versa:
    private final StringConverter<T> converter;

    /**
     * Creates and initializes an edit cell object.
     * 
     * @param converter
     *            the converter to convert from and to strings
     */
    public EditCell(StringConverter<T> converter) {
        this.converter = converter;

        itemProperty().addListener((obx, oldItem, newItem) -> {
            setText(newItem != null ? this.converter.toString(newItem) : null);
        });

        setGraphic(this.textField);
        setContentDisplay(ContentDisplay.TEXT_ONLY);

        this.textField.setOnAction(evt -> {
            commitEdit(this.converter.fromString(this.textField.getText()));
        });
        this.textField.focusedProperty().addListener((obs, wasFocused, isNowFocused) -> {
            if (!isNowFocused) {
                commitEdit(this.converter.fromString(this.textField.getText()));
            }
        });
        this.textField.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
            if (event.getCode() == KeyCode.ESCAPE) {
                this.textField.setText(this.converter.toString(getItem()));
                cancelEdit();
                event.consume();
            } else if (event.getCode() == KeyCode.TAB) {
                commitEdit(this.converter.fromString(this.textField.getText()));
                TableColumn<S, ?> nextColumn = getNextColumn(!event.isShiftDown());
                if (nextColumn != null) {
                    getTableView().getSelectionModel().clearAndSelect(getTableRow().getIndex(), nextColumn);
                    getTableView().edit(getTableRow().getIndex(), nextColumn);
                }
            }
        });
    }

    /**
     * Convenience converter that does nothing (converts Strings to themselves and vice-versa...).
     */
    public static final StringConverter<String> IDENTITY_CONVERTER = new StringConverter<String>() {

        @Override
        public String toString(String object) {
            return object;
        }

        @Override
        public String fromString(String string) {
            return string;
        }

    };

    /**
     * Convenience method for creating an EditCell for a String value.
     * 
     * @return the edit cell
     */
    public static <S> EditCell<S, String> createStringEditCell() {
        return new EditCell<S, String>(IDENTITY_CONVERTER);
    }

    // set the text of the text field and display the graphic
    @Override
    public void startEdit() {
        super.startEdit();
        this.textField.setText(this.converter.toString(getItem()));
        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
        this.textField.requestFocus();
    }

    // revert to text display
    @Override
    public void cancelEdit() {
        super.cancelEdit();
        setContentDisplay(ContentDisplay.TEXT_ONLY);
    }

    // commits the edit. Update property if possible and revert to text display
    @Override
    public void commitEdit(T item) {
        // This block is necessary to support commit on losing focus, because the baked-in mechanism
        // sets our editing state to false before we can intercept the loss of focus.
        // The default commitEdit(...) method simply bails if we are not editing...
        if (!isEditing() && !item.equals(getItem())) {
            TableView<S> table = getTableView();
            if (table != null) {
                TableColumn<S, T> column = getTableColumn();
                CellEditEvent<S, T> event = new CellEditEvent<>(table,
                        new TablePosition<S, T>(table, getIndex(), column),
                        TableColumn.editCommitEvent(), item);
                Event.fireEvent(column, event);
            }
        }

        super.commitEdit(item);

        setContentDisplay(ContentDisplay.TEXT_ONLY);
    }

    /**
     * Finds and returns the next editable column.
     * 
     * @param forward
     *            indicates whether to search forward or backward from the current column
     * @return the next editable column or {@code null} if there is no next column available
     */
    private TableColumn<S, ?> getNextColumn(boolean forward) {
        List<TableColumn<S, ?>> columns = new ArrayList<>();
        for (TableColumn<S, ?> column : getTableView().getColumns()) {
            columns.addAll(getEditableColumns(column));
        }
        // There is no other column that supports editing.
        if (columns.size() < 2) { return null; }
        int currentIndex = columns.indexOf(getTableColumn());
        int nextIndex = currentIndex;
        if (forward) {
            nextIndex++;
            if (nextIndex > columns.size() - 1) {
                nextIndex = 0;
            }
        } else {
            nextIndex--;
            if (nextIndex < 0) {
                nextIndex = columns.size() - 1;
            }
        }
        return columns.get(nextIndex);
    }

    /**
     * Returns all editable columns of a table column (supports nested columns).
     * 
     * @param root
     *            the table column to check for editable columns
     * @return a list of table columns which are editable
     */
    private List<TableColumn<S, ?>> getEditableColumns(TableColumn<S, ?> root) {
        List<TableColumn<S, ?>> columns = new ArrayList<>();
        if (root.getColumns().isEmpty()) {
            // We only want the leaves that are editable.
            if (root.isEditable()) {
                columns.add(root);
            }
            return columns;
        } else {
            for (TableColumn<S, ?> column : root.getColumns()) {
                columns.addAll(getEditableColumns(column));
            }
            return columns;
        }
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.binding.Bindings;
import javafx.scene.Node;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.TableCell;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

public abstract class AutoCommitTableCell<S,T> extends TableCell<S,T>
{
    private Node field;
    private boolean startEditing;
    private T defaultValue;


    /** @return a newly created input field. */
    protected abstract Node newInputField();

    /** @return the current value of the input field. */
    protected abstract T getInputValue();

    /** Sets given value to the input field. */
    protected abstract void setInputValue(T value);

    /** @return the default in case item is null, must be never null, else cell will not be editable. */
    protected abstract T getDefaultValue();

    /** @return converts the given value to a string, being the cell-renderer representation. */
    protected abstract String inputValueToText(T value);


    @Override
    public void startEdit() {
        try {
            startEditing = true;

            super.startEdit();  // updateItem() will be called

            setInputValue(getItem());
        }
        finally {
            startEditing = false;
        }
    }

    /** Redirects to commitEdit(). Leaving the cell should commit, just ESCAPE should cancel. */
    @Override
    public void cancelEdit() {
        // avoid JavaFX NullPointerException when calling commitEdit()
        getTableView().edit(getIndex(), getTableColumn());

        commitEdit(getInputValue());
    }

    private void cancelOnEscape() {
        if (defaultValue != null)    {   // canceling default means writing null
            setItem(defaultValue = null);
            setText(null);
            setInputValue(null);
        }
        super.cancelEdit();
    }

    @Override
    protected void updateItem(T newValue, boolean empty) {
        if (startEditing && newValue == null)
            newValue = (defaultValue = getDefaultValue());

        super.updateItem(newValue, empty);

        if (empty || newValue == null) {
            setText(null);
            setGraphic(null);
        }
        else {
            setText(inputValueToText(newValue));
            setGraphic(startEditing || isEditing() ? getInputField() : null);
        }
    }

    protected final Node getInputField()    {
        if (field == null)    {
            field = newInputField();

            // a cell-editor won't be committed or canceled automatically by JFX
            field.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
                if (event.getCode() == KeyCode.ENTER || event.getCode() == KeyCode.TAB)
                    commitEdit(getInputValue());
                else if (event.getCode() == KeyCode.ESCAPE)
                    cancelOnEscape();
            });

            contentDisplayProperty().bind(
                    Bindings.when(editingProperty())
                        .then(ContentDisplay.GRAPHIC_ONLY)
                        .otherwise(ContentDisplay.TEXT_ONLY)
                );
        }
        return field;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29557967" questionTitle="Accessing multiple database from a Java web application using JPA/EclipseLink/EJB">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">

    <persistence-unit name="first_PU" transaction-type="JTA">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
        <jta-data-source>jdbc/simfin_1</jta-data-source>
        <class>org.demo.model.MemRegMcgEntity</class>
        <class>org.demo.model.SavAccHolderMcgEntity</class>
        <class>org.demo.model.SavAccMcgEntity</class>
        <class>org.demo.model.SavTransactionEntity</class>
    </persistence-unit>

    <persistence-unit name="second_PU" transaction-type="JTA">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
        <jta-data-source>jdbc/simfin_2</jta-data-source>
        <class>org.demo.model.MemRegMcgEntity</class>
        <class>org.demo.model.SavAccHolderMcgEntity</class>
        <class>org.demo.model.SavAccMcgEntity</class>
        <class>org.demo.model.SavTransactionEntity</class>
    </persistence-unit>

</persistence>]]></Answer>
<Answer><![CDATA[public class UserService{
     @EJB
     DynamicResource radResources;

     public List<UserInfo> listAll(){
          List<UserInfo allUsers = new ArrayList<>();
          String[] databases = new String[]{"jndi/simfin","jndi/simfin2"};
          for(String db:databases){
               List results = listServerUsers("simfin", db);
               allUsers.addAll(results);
          }
          return allUsers;
     }

     protected List<UserInfo> listServerUsers(String unitName, String jndi){
         EntityManager em= radResources.getEntityManager(unitName,jndi);
         try {
             Query q = em.createNamedQuery("UserInfo.findAll");
             return (List<UserInfo>) q.getResultList();
         } finally {
             em.close();
         }
     }
 }]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">

    <persistence-unit name="SavingBalanceDemoServer_PU" transaction-type="JTA">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
        <jta-data-source>jdbc/simfin</jta-data-source>
        <class>org.demo.model.MemRegMcgEntity</class>
        <class>org.demo.model.SavAccHolderMcgEntity</class>
        <class>org.demo.model.SavAccMcgEntity</class>
        <class>org.demo.model.SavTransactionEntity</class>
    </persistence-unit>

    <persistence-unit name="MySecondPersistenceUnit_PU" transaction-type="JTA">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
        <jta-data-source>jdbc/other-jta-datasource</jta-data-source>
        <class>org.demo.model.OtherEntityOne</class>
        <class>org.demo.model.OtherEntityTwo</class>
        <class>org.demo.model.OtherEntityThree</class>
        <class>org.demo.model.OtherEntityFour</class>
    </persistence-unit>

</persistence>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29555902" questionTitle="JavaFX - using FillTransition and TranslateTransition misplaces the object">
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Pauser extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        final Rectangle r1 = new Rectangle(
                50, 150, 30, 30
        );

        final TranslateTransition tt1 = new TranslateTransition(
                Duration.seconds(5),
                r1
        );
        tt1.setFromX(0);    // start at the layout origin for the node
        tt1.setFromY(0);    //
        tt1.setByX(100);    // moves 100 pixels to the right
        tt1.setByY(-100);   // moves 100 pixels down
        tt1.setCycleCount(TranslateTransition.INDEFINITE);
        tt1.setAutoReverse(true);
        tt1.play();

        final PauseTransition pt1 = new PauseTransition(
                Duration.seconds(1)
        );
        pt1.setOnFinished(event -> {
            tt1.playFromStart();
            r1.setVisible(true);
        });

        r1.setOnMouseClicked(event -> {
            r1.setVisible(false);
            tt1.stop();
            r1.setTranslateX(0);
            r1.setTranslateY(0);
            pt1.play();
        });

        stage.setScene(
                new Scene(
                        new Group(r1),
                        200, 200
                )
        );
        stage.show();
    }

   public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.FadeTransition;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Main extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {

        Rectangle rect1 = new Rectangle (100, 40, 120, 120);
        rect1.setArcHeight(42);
        rect1.setArcWidth(42);
        rect1.setFill(Color.AQUA);

        TranslateTransition tt1; 
        tt1 = new TranslateTransition(Duration.millis(3000), rect1);
        tt1.setByX(200);
        tt1.setByY(-200);
        tt1.setCycleCount(2);
        tt1.setAutoReverse(true);
        tt1.play();

        rect1.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent event) {
                FadeTransition ft = new FadeTransition(Duration.millis(1000), rect1);
                ft.setFromValue(1.0);
                ft.setToValue(0.0);
                ft.play();
                event.consume();
            }
        });

        tt1.setOnFinished(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                tt1.play();
                FadeTransition ft = new FadeTransition(Duration.millis(1000), rect1);
                ft.setToValue(1.0);
                ft.play();
            }
        });

        Rectangle rect2 = new Rectangle (100, 40, 80, 80);
        rect2.setArcHeight(42);
        rect2.setArcWidth(42);
        rect2.setFill(Color.YELLOWGREEN);

        TranslateTransition tt2; 
        tt2= new TranslateTransition(Duration.millis(6000), rect2);
        tt2.setByX(-200);
        tt2.setByY(200);
        tt2.setCycleCount(2);
        tt2.setAutoReverse(true);
        tt2.play();

        rect2.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent event) {
                FadeTransition ft = new FadeTransition(Duration.millis(1000), rect2);
                ft.setFromValue(1.0);
                ft.setToValue(0.0);
                ft.play();
                event.consume();
            }
        });

        tt2.setOnFinished(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                tt2.play();
                FadeTransition ft = new FadeTransition(Duration.millis(1000), rect2);
                ft.setToValue(1.0);
                ft.play();
            }
        });

        StackPane pane = new StackPane();
        pane.setAlignment(Pos.CENTER);
        pane.getChildren().addAll(rect1,rect2);
        Scene scene = new Scene(pane, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args){
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29506156" questionTitle="JavaFX 8 - Zooming Relative to Mouse Pointer">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

class PannableCanvas extends Pane {

    DoubleProperty myScale = new SimpleDoubleProperty(1.0);

    public PannableCanvas() {
        setPrefSize(600, 600);
        setStyle("-fx-background-color: lightgrey; -fx-border-color: blue;");

        // add scale transform
        scaleXProperty().bind(myScale);
        scaleYProperty().bind(myScale);
    }

    /**
     * Add a grid to the canvas, send it to back
     */
    public void addGrid() {

        double w = getBoundsInLocal().getWidth();
        double h = getBoundsInLocal().getHeight();

        // add grid
        Canvas grid = new Canvas(w, h);

        // don't catch mouse events
        grid.setMouseTransparent(true);

        GraphicsContext gc = grid.getGraphicsContext2D();

        gc.setStroke(Color.GRAY);
        gc.setLineWidth(1);

        // draw grid lines
        double offset = 50;
        for( double i=offset; i < w; i+=offset) {
            gc.strokeLine( i, 0, i, h);
            gc.strokeLine( 0, i, w, i);
        }

        getChildren().add( grid);

        grid.toBack();
    }

    public double getScale() {
        return myScale.get();
    }

    public void setScale( double scale) {
        myScale.set(scale);
    }

    public void setPivot( double x, double y) {
        setTranslateX(getTranslateX()-x);
        setTranslateY(getTranslateY()-y);
    }
}


/**
 * Mouse drag context used for scene and nodes.
 */
class DragContext {

    double mouseAnchorX;
    double mouseAnchorY;

    double translateAnchorX;
    double translateAnchorY;

}

/**
 * Listeners for making the nodes draggable via left mouse button. Considers if parent is zoomed.
 */
class NodeGestures {

    private DragContext nodeDragContext = new DragContext();

    PannableCanvas canvas;

    public NodeGestures( PannableCanvas canvas) {
        this.canvas = canvas;

    }

    public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
        return onMousePressedEventHandler;
    }

    public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
        return onMouseDraggedEventHandler;
    }

    private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

        public void handle(MouseEvent event) {

            // left mouse button => dragging
            if( !event.isPrimaryButtonDown())
                return;

            nodeDragContext.mouseAnchorX = event.getSceneX();
            nodeDragContext.mouseAnchorY = event.getSceneY();

            Node node = (Node) event.getSource();

            nodeDragContext.translateAnchorX = node.getTranslateX();
            nodeDragContext.translateAnchorY = node.getTranslateY();

        }

    };

    private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent event) {

            // left mouse button => dragging
            if( !event.isPrimaryButtonDown())
                return;

            double scale = canvas.getScale();

            Node node = (Node) event.getSource();

            node.setTranslateX(nodeDragContext.translateAnchorX + (( event.getSceneX() - nodeDragContext.mouseAnchorX) / scale));
            node.setTranslateY(nodeDragContext.translateAnchorY + (( event.getSceneY() - nodeDragContext.mouseAnchorY) / scale));

            event.consume();

        }
    };
}

/**
 * Listeners for making the scene's canvas draggable and zoomable
 */
class SceneGestures {

    private static final double MAX_SCALE = 10.0d;
    private static final double MIN_SCALE = .1d;

    private DragContext sceneDragContext = new DragContext();

    PannableCanvas canvas;

    public SceneGestures( PannableCanvas canvas) {
        this.canvas = canvas;
    }

    public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
        return onMousePressedEventHandler;
    }

    public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
        return onMouseDraggedEventHandler;
    }

    public EventHandler<ScrollEvent> getOnScrollEventHandler() {
        return onScrollEventHandler;
    }

    private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            sceneDragContext.mouseAnchorX = event.getSceneX();
            sceneDragContext.mouseAnchorY = event.getSceneY();

            sceneDragContext.translateAnchorX = canvas.getTranslateX();
            sceneDragContext.translateAnchorY = canvas.getTranslateY();

        }

    };

    private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            canvas.setTranslateX(sceneDragContext.translateAnchorX + event.getSceneX() - sceneDragContext.mouseAnchorX);
            canvas.setTranslateY(sceneDragContext.translateAnchorY + event.getSceneY() - sceneDragContext.mouseAnchorY);

            event.consume();
        }
    };

    /**
     * Mouse wheel handler: zoom to pivot point
     */
    private EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<ScrollEvent>() {

        @Override
        public void handle(ScrollEvent event) {

            double delta = 1.2;

            double scale = canvas.getScale(); // currently we only use Y, same value is used for X
            double oldScale = scale;

            if (event.getDeltaY() < 0)
                scale /= delta;
            else
                scale *= delta;

            scale = clamp( scale, MIN_SCALE, MAX_SCALE);

            double f = (scale / oldScale)-1;

            double dx = (event.getSceneX() - (canvas.getBoundsInParent().getWidth()/2 + canvas.getBoundsInParent().getMinX()));
            double dy = (event.getSceneY() - (canvas.getBoundsInParent().getHeight()/2 + canvas.getBoundsInParent().getMinY()));

            canvas.setScale( scale);

            // note: pivot value must be untransformed, i. e. without scaling
            canvas.setPivot(f*dx, f*dy);

            event.consume();

        }

    };


    public static double clamp( double value, double min, double max) {

        if( Double.compare(value, min) < 0)
            return min;

        if( Double.compare(value, max) > 0)
            return max;

        return value;
    }
}



/**
 * An application with a zoomable and pannable canvas.
 */
public class ZoomAndScrollApplication extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {

        Group group = new Group();

        // create canvas
        PannableCanvas canvas = new PannableCanvas();

        // we don't want the canvas on the top/left in this example => just
        // translate it a bit
        canvas.setTranslateX(100);
        canvas.setTranslateY(100);

        // create sample nodes which can be dragged
        NodeGestures nodeGestures = new NodeGestures( canvas);

        Label label1 = new Label("Draggable node 1");
        label1.setTranslateX(10);
        label1.setTranslateY(10);
        label1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label2 = new Label("Draggable node 2");
        label2.setTranslateX(100);
        label2.setTranslateY(100);
        label2.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label2.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label3 = new Label("Draggable node 3");
        label3.setTranslateX(200);
        label3.setTranslateY(200);
        label3.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label3.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Circle circle1 = new Circle( 300, 300, 50);
        circle1.setStroke(Color.ORANGE);
        circle1.setFill(Color.ORANGE.deriveColor(1, 1, 1, 0.5));
        circle1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        circle1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Rectangle rect1 = new Rectangle(100,100);
        rect1.setTranslateX(450);
        rect1.setTranslateY(450);
        rect1.setStroke(Color.BLUE);
        rect1.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.5));
        rect1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        rect1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        canvas.getChildren().addAll(label1, label2, label3, circle1, rect1);

        group.getChildren().add(canvas);

        // create scene which can be dragged and zoomed
        Scene scene = new Scene(group, 1024, 768);

        SceneGestures sceneGestures = new SceneGestures(canvas);
        scene.addEventFilter( MouseEvent.MOUSE_PRESSED, sceneGestures.getOnMousePressedEventHandler());
        scene.addEventFilter( MouseEvent.MOUSE_DRAGGED, sceneGestures.getOnMouseDraggedEventHandler());
        scene.addEventFilter( ScrollEvent.ANY, sceneGestures.getOnScrollEventHandler());

        stage.setScene(scene);
        stage.show();

        canvas.addGrid();

    }
}]]></Answer>
<Answer><![CDATA[public class AnimatedZoomOperator {

    private Timeline timeline;

    public AnimatedZoomOperator() {         
         this.timeline = new Timeline(60);
    }

    public void zoom(Node node, double factor, double x, double y) {    
        // determine scale
        double oldScale = node.getScaleX();
        double scale = oldScale * factor;
        double f = (scale / oldScale) - 1;

        // determine offset that we will have to move the node
        Bounds bounds = node.localToScene(node.getBoundsInLocal());
        double dx = (x - (bounds.getWidth() / 2 + bounds.getMinX()));
        double dy = (y - (bounds.getHeight() / 2 + bounds.getMinY()));

        // timeline that scales and moves the node
        timeline.getKeyFrames().clear();
        timeline.getKeyFrames().addAll(
            new KeyFrame(Duration.millis(200), new KeyValue(node.translateXProperty(), node.getTranslateX() - f * dx)),
            new KeyFrame(Duration.millis(200), new KeyValue(node.translateYProperty(), node.getTranslateY() - f * dy)),
            new KeyFrame(Duration.millis(200), new KeyValue(node.scaleXProperty(), scale)),
            new KeyFrame(Duration.millis(200), new KeyValue(node.scaleYProperty(), scale))
        );
        timeline.play();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29489366" questionTitle="How to add button in JavaFX table view">
<Answer><![CDATA[import java.util.function.Function;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.util.Callback;

public class ActionButtonTableCell<S> extends TableCell<S, Button> {

    private final Button actionButton;
    private ObservableValue<Button> observable;

    public ActionButtonTableCell(String label, Function< S, S> function) {
        this.getStyleClass().add("action-button-table-cell");

        this.actionButton = new Button(label);
        this.actionButton.setOnAction((ActionEvent e) -> {
            function.apply(getCurrentItem());
        });
        this.actionButton.setMaxWidth(Double.MAX_VALUE);
    }

    public S getCurrentItem() {
        return (S) getTableView().getItems().get(getIndex());
    }

    public static <S> Callback<TableColumn<S, Button>, TableCell<S, Button>> forTableColumn(String label, Function< S, S> function) {
        return param -> new ActionButtonTableCell<>(label, function);
    }

    @Override
    public void updateItem(Button item, boolean empty) {
        super.updateItem(item, empty);

        if (empty) {
            setGraphic(null);
        } else {
            final TableColumn<S, Button> column = getTableColumn();
            observable = column == null ? null : column.getCellObservableValue(getIndex());
            setGraphic(actionButton);
        }
    }
}]]></Answer>
<Answer><![CDATA[public class JustDoIt extends Application {

    private final TableView<Person> table = new TableView<>();
    private final ObservableList<Person> data
            = FXCollections.observableArrayList(
                    new Person("Jacob", "Smith"),
                    new Person("Isabella", "Johnson"),
                    new Person("Ethan", "Williams"),
                    new Person("Emma", "Jones"),
                    new Person("Michael", "Brown")
            );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        stage.setWidth(450);
        stage.setHeight(500);

        TableColumn firstNameCol = new TableColumn("First Name");
        firstNameCol.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn lastNameCol = new TableColumn("Last Name");
        lastNameCol.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn actionCol = new TableColumn("Action");
        actionCol.setCellValueFactory(new PropertyValueFactory<>("DUMMY"));

        Callback<TableColumn<Person, String>, TableCell<Person, String>> cellFactory
                = //
                new Callback<TableColumn<Person, String>, TableCell<Person, String>>() {
            @Override
            public TableCell call(final TableColumn<Person, String> param) {
                final TableCell<Person, String> cell = new TableCell<Person, String>() {

                    final Button btn = new Button("Just Do It");

                    @Override
                    public void updateItem(String item, boolean empty) {
                        super.updateItem(item, empty);
                        if (empty) {
                            setGraphic(null);
                            setText(null);
                        } else {
                            btn.setOnAction(event -> {
                                Person person = getTableView().getItems().get(getIndex());
                                System.out.println(person.getFirstName()
                                        + "   " + person.getLastName());
                            });
                            setGraphic(btn);
                            setText(null);
                        }
                    }
                };
                return cell;
            }
        };

        actionCol.setCellFactory(cellFactory);

        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, actionCol);

        Scene scene = new Scene(new Group());

        ((Group) scene.getRoot()).getChildren().addAll(table);

        stage.setScene(scene);
        stage.show();
    }

    public static class Person {

        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;

        private Person(String fName, String lName) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String fName) {
            firstName.set(fName);
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String fName) {
            lastName.set(fName);
        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29482534" questionTitle="How can I use JavaFX to play video on 3D shape?">
<Answer><![CDATA[public class Video3D extends Application {

    static {
        // path to the VLC video player
        System.setProperty("jna.library.path", "C:/Program Files/VideoLAN/VLC");
    }

    // http://download.blender.org/peach/bigbuckbunny_movies/
    // (c) copyright 2008, Blender Foundation / www.bigbuckbunny.org
    private static final String VIDEO_FILE = "C:\\BigBuckBunny_320x180.mp4";

    private final DirectMediaPlayerComponent mediaPlayerComponent;
    private final WritablePixelFormat<ByteBuffer> pixelFormat;

    private final SegmentedTorusMesh torus = new SegmentedTorusMesh(50,40,12,3.2d,4.5d);
    private final PhongMaterial material = new PhongMaterial(Color.WHEAT);

    private double mousePosX, mousePosY;
    private double mouseOldX, mouseOldY;
    private final Rotate rotateX = new Rotate(-20, Rotate.X_AXIS);
    private final Rotate rotateY = new Rotate(240, Rotate.Y_AXIS);

    private final AnimationTimer timer;

    public TestVLC(){
        mediaPlayerComponent = new TestMediaPlayerComponent();
        pixelFormat = PixelFormat.getByteBgraInstance();
        timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                renderFrame();
            }
        };
    }
    protected void startTimer() {
        mediaPlayerComponent.getMediaPlayer().playMedia(VIDEO_FILE);
        timer.start();
    }

    protected void stopTimer() {
        mediaPlayerComponent.getMediaPlayer().stop();
        timer.stop();
    }

    @Override
    public void start(Stage primaryStage) {
        torus.setCullFace(CullFace.NONE);
        torus.setzOffset(1.4);
        torus.setMaterial(material);

        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.getTransforms().addAll (rotateX, rotateY, new Translate(0, 0, -30));

        Group root3D = new Group(camera,torus);

        SubScene subScene = new SubScene(root3D, 800, 600, true, SceneAntialiasing.BALANCED);
        subScene.setFill(Color.AQUAMARINE);
        subScene.setCamera(camera);

        BorderPane pane = new BorderPane();
        pane.setCenter(subScene);
        Button play = new Button("Play");
        play.setOnAction(e->startTimer());
        Button stop = new Button("Stop");
        stop.setOnAction(e->stopTimer());
        ToolBar toolBar = new ToolBar(play, stop);
        toolBar.setOrientation(Orientation.VERTICAL);
        pane.setRight(toolBar);
        pane.setPrefSize(600,400);

        Scene scene = new Scene(pane);

        scene.setOnMousePressed((MouseEvent me) -> {
            mouseOldX = me.getSceneX();
            mouseOldY = me.getSceneY();
        });
        scene.setOnMouseDragged((MouseEvent me) -> {
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            rotateX.setAngle(rotateX.getAngle()-(mousePosY - mouseOldY));
            rotateY.setAngle(rotateY.getAngle()+(mousePosX - mouseOldX));
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
        });

        primaryStage.setScene(scene);
        primaryStage.setTitle("Video - JavaFX 3D");
        primaryStage.show();

    }

    @Override
    public final void stop() throws Exception {
        stopTimer();

        mediaPlayerComponent.getMediaPlayer().stop();
        mediaPlayerComponent.getMediaPlayer().release();
    }

    /**
     * Implementation of a direct rendering media player component that renders
     * the video to a JavaFX canvas.
     * https://github.com/caprica/vlcj-javafx/blob/master/src/test/java/uk/co/caprica/vlcj/javafx/test/JavaFXDirectRenderingTest.java
     */
    private class TestMediaPlayerComponent extends DirectMediaPlayerComponent {

        public TestMediaPlayerComponent() {
            super(new TestBufferFormatCallback());
        }
    }

    /**
     * Callback to get the buffer format to use for video playback.
     */
    private class TestBufferFormatCallback implements BufferFormatCallback {

        @Override
        public BufferFormat getBufferFormat(int sourceWidth, int sourceHeight) {
            final int width = sourceWidth;
            final int height = sourceHeight;
            Platform.runLater(() -> {
                torus.setMajorRadius(width/100);
                torus.setMinorRadius(height/40);
            });
            return new RV32BufferFormat(width, height);
        }
    }

    protected final void renderFrame() {
        Memory[] nativeBuffers = mediaPlayerComponent.getMediaPlayer().lock();
        if (nativeBuffers != null) {
            Memory nativeBuffer = nativeBuffers[0];
            if (nativeBuffer != null) {
                ByteBuffer byteBuffer = nativeBuffer.getByteBuffer(0, nativeBuffer.size());
                BufferFormat bufferFormat = ((DefaultDirectMediaPlayer) mediaPlayerComponent.getMediaPlayer()).getBufferFormat();
                WritableImage textureImage = new WritableImage(bufferFormat.getWidth(), bufferFormat.getHeight());
                if (bufferFormat.getWidth() > 0 && bufferFormat.getHeight() > 0) {
                    textureImage.getPixelWriter().setPixels(0, 0, bufferFormat.getWidth(), bufferFormat.getHeight(), pixelFormat, byteBuffer, bufferFormat.getPitches()[0]);
                    material.setDiffuseMap(textureImage);
                }
            }
        }
        mediaPlayerComponent.getMediaPlayer().unlock();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[public class VideoCubeDemo extends Application {

    Random rnd = new Random();

    // size of the cube
    double size = 320;

    @Override
    public void start(Stage primaryStage) throws MalformedURLException {

        // create media views
        List<String> videoFiles = new ArrayList<>();

        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());
        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());
        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());
        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());
        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());
        videoFiles.add( getClass().getResource("funny_cats_compilation_2012.mp4").toExternalForm());

        // create faces for the cube
        // original cube face code from http://www.javafxapps.in/tutorial/Creating-3D-Cube-in-javafx.html
        MediaView r;
        int videoIndex;

        Group cube = new Group();

        List<MediaView> cubeFaces = new ArrayList<>();

        // back face
        videoIndex = 0;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(-0.5 * size);
        r.setTranslateY(-0.5 * size);
        r.setTranslateZ(0.5 * size);

        cubeFaces.add( r);

        // bottom face
        videoIndex = 1;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(-0.5 * size);
        r.setTranslateY(0);
        r.setRotationAxis(Rotate.X_AXIS);
        r.setRotate(90);

        cubeFaces.add( r);

        // right face
        videoIndex = 2;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(-1 * size);
        r.setTranslateY(-0.5 * size);
        r.setRotationAxis(Rotate.Y_AXIS);
        r.setRotate(90);

        cubeFaces.add( r);

        // left face
        videoIndex = 3;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(0);
        r.setTranslateY(-0.5 * size);
        r.setRotationAxis(Rotate.Y_AXIS);
        r.setRotate(90);

        cubeFaces.add( r);

        // top face
        videoIndex = 4;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(-0.5 * size);
        r.setTranslateY(-1 * size);
        r.setRotationAxis(Rotate.X_AXIS);
        r.setRotate(90);

        cubeFaces.add( r);

        // front face
        videoIndex = 5;
        r = createMediaView(videoFiles.get( videoIndex));
        r.setTranslateX(-0.5 * size);
        r.setTranslateY(-0.5 * size);
        r.setTranslateZ(-0.5 * size);

        cubeFaces.add( r);

        // create cube with all faces
        cube.getChildren().addAll( cubeFaces);

        // initial cube rotation
        cube.getTransforms().addAll(new Rotate(45, Rotate.X_AXIS), new Rotate(45, Rotate.Y_AXIS));

        // animate cube
        Point3D rotateAxis = new Point3D(1,1,1); // rotate around X, Y and Z
        Timeline animation = new Timeline();
        animation.getKeyFrames().addAll(
                new KeyFrame(Duration.ZERO, new KeyValue(cube.rotationAxisProperty(), rotateAxis), new KeyValue(cube.rotateProperty(), 0d)),
                new KeyFrame(Duration.seconds(5), new KeyValue(cube.rotationAxisProperty(), rotateAxis), new KeyValue(cube.rotateProperty(), 360d))
                );
        animation.setCycleCount(Animation.INDEFINITE);

        // add objects to scene
        StackPane root = new StackPane();
        root.getChildren().add(cube);

        Scene scene = new Scene(root, 1600, 900, true, SceneAntialiasing.BALANCED);
        scene.setFill(Color.BLACK);
        scene.setCamera(new PerspectiveCamera());

        primaryStage.setResizable(true);
        primaryStage.setScene(scene);
        primaryStage.show();

        // play videos and animation
        for( MediaView mediaPlayer: cubeFaces) {
            mediaPlayer.getMediaPlayer().play();
        }
        animation.play();

    }

    private MediaView createMediaView( String path) {

        Media media = new Media( path);
        MediaPlayer mediaPlayer = new MediaPlayer( media);
        mediaPlayer.setVolume(0.8);
        mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);

        MediaView mediaView = new MediaView( mediaPlayer);
        mediaView.setFitHeight(size);
        mediaView.setFitWidth(size);
        mediaView.setPreserveRatio( false);

        return mediaView;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.*;
import javafx.geometry.Rectangle2D;
import javafx.scene.*;
import javafx.scene.image.WritableImage;
import javafx.scene.media.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

// Display a rotating 3D box with a video projected onto its surface.
public class ThreeDMedia extends Application {

    private static final String MEDIA_URL =
            "http://download.oracle.com/otndocs/products/javafx/oow2010-2.flv";

    private static final int SCENE_W = 640;
    private static final int SCENE_H = 400;

    private static final double MEDIA_W = 540 * 2/3;
    private static final double MEDIA_H = 209 * 2/3;

    private static final Color INDIA_INK = Color.rgb(35, 39, 50);

    @Override
    public void start(Stage stage) {
        // create a 3D box shape on which to project the video.
        Box box = new Box(MEDIA_W, MEDIA_H, MEDIA_W);
        box.setTranslateX(SCENE_W / 2);
        box.setTranslateY(SCENE_H / 2);

        // create a media player for the video which loops the video forever.
        MediaPlayer player = new MediaPlayer(new Media(MEDIA_URL));
        player.setCycleCount(MediaPlayer.INDEFINITE);

        // create a media view for the video, sized to our specifications.
        MediaView mediaView = new MediaView(player);
        mediaView.setPreserveRatio(false);
        mediaView.setFitWidth(MEDIA_W);
        mediaView.setFitHeight(MEDIA_H);

        // project the video on to the 3D box.
        showMediaOnShape3D(box, mediaView);

        // rotate the box.
        rotateAroundYAxis(box);

        // create a point light source a fair way away so lighting is reasonably even.
        PointLight pointLight = new PointLight(
                Color.WHITE
        );
        pointLight.setTranslateX(SCENE_W / 2);
        pointLight.setTranslateY(SCENE_H / 2);
        pointLight.setTranslateZ(-SCENE_W * 5);

        // add a bit of ambient light to make the lighting more natural.
        AmbientLight ambientLight = new AmbientLight(
                Color.rgb(15, 15, 15)
        );

        // place the shape and associated lights in a group.
        Group group = new Group(
                box,
                pointLight,
                ambientLight
        );

        // create a 3D scene with a default perspective camera.
        Scene scene = new Scene(
                group,
                SCENE_W, SCENE_H, true, SceneAntialiasing.BALANCED
        );
        scene.setFill(INDIA_INK);
        PerspectiveCamera camera = new PerspectiveCamera();
        scene.setCamera(camera);

        stage.setScene(scene);
        stage.setResizable(false);

        // start playing the media, showing the scene once the media is ready to play.
        player.setOnReady(stage::show);
        player.setOnError(Platform::exit);
        player.play();
    }

       // Project video on to 3D shape.
    private void showMediaOnShape3D(Shape3D shape3D, final MediaView mediaView) {
        PhongMaterial material = new PhongMaterial();
        shape3D.setMaterial(material);

        Scene mediaScene = new Scene(
                new Group(mediaView),
                MEDIA_W, MEDIA_H
        );
        SnapshotParameters snapshotParameters = new SnapshotParameters();
        snapshotParameters.setViewport(
                new Rectangle2D(
                        0, 0, MEDIA_W, MEDIA_H
                )
        );
        WritableImage textureImage = mediaView.snapshot(
                snapshotParameters,
                null
        );
        material.setDiffuseMap(textureImage);

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                mediaView.snapshot(
                        snapshotParameters,
                        textureImage
                );
            }
        };
        timer.start();
    }

    // Rotates a shape around the y axis indefinitely.
    private void rotateAroundYAxis(Shape3D shape3D) {
        RotateTransition rotateY = new RotateTransition(
                Duration.seconds(10),
                shape3D
        );

        rotateY.setAxis(Rotate.Y_AXIS);
        rotateY.setFromAngle(360);
        rotateY.setToAngle(0);
        rotateY.setCycleCount(RotateTransition.INDEFINITE);
        rotateY.setInterpolator(Interpolator.LINEAR);

        rotateY.play();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29358075" questionTitle="Running a Thread in JavaFX">
<Answer><![CDATA[public class Test extends Application {
    private Stage window;
    private static Things things;

    public void start(Stage stage) throws Exception {
        window = new Stage();
        window = stage;
        Pane layout = new Pane();
        Scene scene = new Scene(layout);

        window.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent windowEvent) {
                close();
            }
        });
        window.setScene(scene);
        window.show();
    }


    // on close
    public void close() {
        window.close();
        things.stop();  // stop the things object directly
    }

    public static void main(String[] args) {
        things = new Things();  // create new runnable
        Thread t = new Thread(things,"Monitor"); // create thread
        t.start();  // start thread
        launch(args);  // launch app
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;


public class Things extends Application implements Runnable {

    private Thread thread;
    private volatile boolean running;
    private Stage window;

    @Override
    public void run() {
        while (running) {
            System.out.println("Hello");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
//        stopThread();
        running = false ;
    }

    public synchronized void startThread() {
        running = true;
        thread = new Thread(this, "Monitor");
        thread.start();
    }

    public synchronized void stopThread() {
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void start(Stage stage) throws Exception {
        startThread();
        window = stage;
        Pane layout = new Pane();
        Scene scene = new Scene(layout);

        window.setOnCloseRequest(e -> {
            e.consume();
            close();
        });
        window.setScene(scene);
        window.show();
    }

    public void close() {
        window.close();
        stopThread();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29334404" questionTitle="How to force max() to return ALL maximum values in a Java Stream?">
<Answer><![CDATA[public static <T, A, D> Collector<T, ?, D> maxAll(Comparator<? super T> comparator, 
                                                  Collector<? super T, A, D> downstream) {
    Supplier<A> downstreamSupplier = downstream.supplier();
    BiConsumer<A, ? super T> downstreamAccumulator = downstream.accumulator();
    BinaryOperator<A> downstreamCombiner = downstream.combiner();
    class Container {
        A acc;
        T obj;
        boolean hasAny;

        Container(A acc) {
            this.acc = acc;
        }
    }
    Supplier<Container> supplier = () -> new Container(downstreamSupplier.get());
    BiConsumer<Container, T> accumulator = (acc, t) -> {
        if(!acc.hasAny) {
            downstreamAccumulator.accept(acc.acc, t);
            acc.obj = t;
            acc.hasAny = true;
        } else {
            int cmp = comparator.compare(t, acc.obj);
            if (cmp > 0) {
                acc.acc = downstreamSupplier.get();
                acc.obj = t;
            }
            if (cmp >= 0)
                downstreamAccumulator.accept(acc.acc, t);
        }
    };
    BinaryOperator<Container> combiner = (acc1, acc2) -> {
        if (!acc2.hasAny) {
            return acc1;
        }
        if (!acc1.hasAny) {
            return acc2;
        }
        int cmp = comparator.compare(acc1.obj, acc2.obj);
        if (cmp > 0) {
            return acc1;
        }
        if (cmp < 0) {
            return acc2;
        }
        acc1.acc = downstreamCombiner.apply(acc1.acc, acc2.acc);
        return acc1;
    };
    Function<Container, D> finisher = acc -> downstream.finisher().apply(acc.acc);
    return Collector.of(supplier, accumulator, combiner, finisher);
}]]></Answer>
<Answer><![CDATA[static <T> Collector<T,?,List<T>> maxList(Comparator<? super T> comp) {
    return Collector.of(
        ArrayList::new,
        (list, t) -> {
            int c;
            if (list.isEmpty() || (c = comp.compare(t, list.get(0))) == 0) {
                list.add(t);
            } else if (c > 0) {
                list.clear();
                list.add(t);
            }
        },
        (list1, list2) -> {
            if (list1.isEmpty()) {
                return list2;
            } 
            if (list2.isEmpty()) {
                return list1;
            }
            int r = comp.compare(list1.get(0), list2.get(0));
            if (r < 0) {
                return list2;
            } else if (r > 0) {
                return list1;
            } else {
                list1.addAll(list2);
                return list1;
            }
        });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29256200" questionTitle="How to return value by ternary condition in a stream?">
<Answer><![CDATA[public enum Food {
    APPLE, APPLE2, APPLE3, BANANA, PINEAPPLE, CUCUMBER, NONE;

    private static final Food[] APPLES = new Food[] {APPLE, APPLE2, APPLE3};

    // approach one
    // java7: conventional use
    public Food fromValueJava7(String value) {
        for (Food type : Food.values()) {
            if (verifyNames(type, value)) {
                return contains(Food.APPLES, type) ? Food.APPLE : type;
            }
        }
        return null;
    }


    // approach two
    // java8: how to include the array check for APPLES?
    public Food fromValueJava8(String value) {
        return Arrays.stream(Food.values())
                .filter(type-> verifyNames(type, value))
                .map(type -> contains(Food.APPLES, type) ? Food.APPLE : type)
                .findFirst()
                .orElse(Food.NONE);
    }

    private boolean contains(Food[] apples, Food type) {
        return ArrayUtils.contains(apples, type);
    }

    private boolean verifyNames(Food type,String other) {
        return type.name().equalsIgnoreCase(other);
    }
    }

    //   FoodTest
    //   
    public class FoodTest {
    @Test
    public void foodTest(){
        Food appleApproachOne  = Food.APPLE;

        // from approach one
        assertEquals( appleApproachOne.fromValueJava7("APPLE"),   Food.APPLE);
        assertEquals( appleApproachOne.fromValueJava7("APPLE2"),  Food.APPLE);
        assertEquals( appleApproachOne.fromValueJava7("APPLE3"),  Food.APPLE);
        assertEquals( appleApproachOne.fromValueJava7("apple3"),  Food.APPLE);
        assertNull  ( appleApproachOne.fromValueJava7("apple4") );
        assertNull  ( appleApproachOne.fromValueJava7(null) );

        Food appleApproachTwo  = Food.APPLE;

        //from approach two
        assertEquals( appleApproachTwo.fromValueJava8("APPLE"),   Food.APPLE);
        assertEquals( appleApproachTwo.fromValueJava8("APPLE2"),  Food.APPLE);
        assertEquals( appleApproachTwo.fromValueJava8("APPLE3"),  Food.APPLE);
        assertEquals( appleApproachTwo.fromValueJava8("apple3"),  Food.APPLE);
        assertEquals( appleApproachOne.fromValueJava8("apple4"),  Food.NONE);
        assertEquals( appleApproachTwo.fromValueJava8(null),      Food.NONE);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.EnumSet;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TernaryCondition {

    public enum Food {
        APPLE, APPLE2, APPLE3, BANANA, PINEAPPLE, CUCUMBER;

        private static final EnumSet<Food> APPLES = EnumSet.of(APPLE, APPLE2, APPLE3);

        private static final Map<String, Food> MAP = Stream.of(
            Food.values()).collect(
            Collectors.toMap(
                f -> f.name().toLowerCase(), 
                f -> APPLES.contains(f) ? APPLE : f));

        public static Food fromValue(String value) {
            return MAP.get(value.toLowerCase());
        }
    }

    public static void main(String[] args) {
        Food f = Food.fromValue("apple2");

        System.out.println(f); // APPLE
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29222262" questionTitle="Java Form problems">
<Answer><![CDATA[public class Main extends Application
{
    @Override
    public void start(Stage primaryStage) throws Exception
    {
        Parent root = FXMLLoader.load(getClass().getResource("frmLogin.fxml"));

        primaryStage.setScene(new Scene(root));
        primaryStage.setTitle("JavaFX GUI");
        primaryStage.setResizable(false);
        primaryStage.show();
    }

    public static void main(String[] args)
    {
        Application.launch(args);
    }
}

. . .

public class LoginController
{

    @FXML
    private TextField txtUsername;
    @FXML
    private TextField txtPassword;


    @FXML
    private void btnLogin_Clicked(ActionEvent e) throws Exception
    {
        if (txtUsername.getText().equals("admin") && txtPassword.getText().equals("pass"))
        {
            Messagebox.Show("Correct Login!");
        }
        else
        {
            Messagebox.Show("Incorrect Login");
        }
    }
}]]></Answer>
<Answer><![CDATA[public class LoginController
{

    @FXML
    private TextField txtUsername;
    @FXML
    private TextField txtPassword;


    @FXML
    private void btnLogin_Clicked(ActionEvent e) throws Exception
    {
        if (txtUsername.getText().equals("admin") && txtPassword.getText().equals("pass"))
        {
            Messagebox.Show("Correct Login!");

            // I don't really know what you were trying to do here
            // but if you need a reference to the window containing the
            // associated fxml elements, you can get it from one of those
            // elements:

            Stage stage = (Stage) txtUsername.getScene().getWindow();

            //this.show(); //The problem occurs here!
        }
        else
        {
            Messagebox.Show("Incorrect Login");
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29215375" questionTitle="How to iterate nested lists with lambda streams?">
<Answer><![CDATA[private static class IntermediateResult {

    private final SndNode node;
    private final Result result;
    private final List<ParseException> exceptions;

    private IntermediateResult(SndNode node, Result result, List<ParseException> exceptions) {
        this.node = node;
        this.result = result;
        this.exceptions = exceptions;
    }

    private Result getResult() throws ParseException {
        if (result != null) {
            return result;
        }
        if (exceptions.isEmpty()) {
            return null;
        }
        // this will show all ParseExceptions instead of just last one
        ParseException exception = new ParseException(String.format("None of %s valid nodes could be parsed", exceptions.size()));
        exceptions.stream().forEach(exception::addSuppressed);
        throw exception;
    }

}

public static Result match(Response rsp) throws Exception {
    return Stream.concat(
                    Arrays.stream(new SndNode[] {null}), // adding null at the beginning of the stream to get an empty "aggregatedResult" at the beginning of the stream
                    rsp.getFirstNodes().stream()
                            .flatMap(firstNode -> firstNode.getSndNodes().stream())
                            .filter(SndNode::isValid)
            )
            .map(node -> new IntermediateResult(node, null, Collections.<ParseException>emptyList()))
            .reduce((aggregatedResult, next) -> {
                if (aggregatedResult.result != null) {
                    return aggregatedResult;
                }

                try {
                    return new IntermediateResult(null, parse(next.node), null);
                } catch (ParseException e) {
                    List<ParseException> exceptions = new ArrayList<>(aggregatedResult.exceptions);
                    exceptions.add(e);
                    return new IntermediateResult(null, null, Collections.unmodifiableList(exceptions));
                }
            })
            .get() // aggregatedResult after going through the whole stream, there will always be at least one because we added one at the beginning
            .getResult(); // return Result, null (if no valid nodes) or throw ParseException
}]]></Answer>
<Answer><![CDATA[class IterableIterable<T> implements Iterable<T> {

    private final Iterable<? extends Iterable<T>> i;

    public IterableIterable(Iterable<? extends Iterable<T>> i) {
        this.i = i;
    }

    @Override
    public Iterator<T> iterator() {
        return new IIT();
    }

    private class IIT implements Iterator<T> {

        // Pull an iterator.
        final Iterator<? extends Iterable<T>> iit = i.iterator();
        // The current Iterator<T>
        Iterator<T> it = null;
        // The current T.
        T next = null;

        @Override
        public boolean hasNext() {
            boolean finished = false;
            while (next == null && !finished) {
                if (it == null || !it.hasNext()) {
                    if (iit.hasNext()) {
                        it = iit.next().iterator();
                    } else {
                        finished = true;
                    }
                }
                if (it != null && it.hasNext()) {
                    next = it.next();
                }
            }
            return next != null;
        }

        @Override
        public T next() {
            T n = next;
            next = null;
            return n;
        }
    }

}

public void test() {
    List<List<String>> list = new ArrayList<>();
    List<String> first = new ArrayList<>();
    first.add("First One");
    first.add("First Two");
    List<String> second = new ArrayList<>();
    second.add("Second One");
    second.add("Second Two");
    list.add(first);
    list.add(second);
    // Check it works.
    IterableIterable<String> l = new IterableIterable<>(list);
    for (String s : l) {
        System.out.println(s);
    }
    // Stream it like this.
    Stream<String> stream = StreamSupport.stream(l.spliterator(), false);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29195051" questionTitle="How do I change the layout along with an animation in Java FX?">
<Answer><![CDATA[private void switchModulesBar() {
    // Slides in the modules bar when "Modules"-toggle button is pressed
    if (mainBar.getModulesButton().isSelected()) {
        Animation modulesBarAnimation = new Transition() {
            {
                setCycleDuration(Duration.millis(250));
            }

            @Override
            protected void interpolate(double frac) {
                final double curWidth = 200 * frac;
                modulesBar.setPrefWidth(curWidth);
                modulesBar.setTranslateX(-200 + curWidth);
            }
        };
        modulesBarAnimation.play();
    } else { // Slides out the modules bar 
        Animation modulesBarAnimation = new Transition() {
            {
                setCycleDuration(Duration.millis(250));
            }

            @Override
            protected void interpolate(double frac) {
                final double curWidth = 200 * (1.0 - frac);
                modulesBar.setPrefWidth(curWidth);
                modulesBar.setTranslateX(-200 + curWidth);
            }
        };
        modulesBarAnimation.play();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.value.ObservableBooleanValue;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;


public class AnimatingGridPane extends Application {

    @Override
    public void start(Stage primaryStage) {

        GridPane root = new GridPane();

        ColumnConstraints leftCol = new ColumnConstraints();
        leftCol.setPrefWidth(100);

        ColumnConstraints rightCol = new ColumnConstraints();

        root.getColumnConstraints().addAll(leftCol, rightCol);

        ObservableBooleanValue expanded = leftCol.prefWidthProperty().greaterThan(0);

        Button expandButton = new Button("");
        expandButton.textProperty().bind(
            Bindings.when(expanded).then("Hide options").otherwise("Show options"));

        expandButton.setOnAction(event -> {
            KeyFrame start ;
            KeyFrame end ;

            if (expanded.get()) {
                start = new KeyFrame(Duration.ZERO, new KeyValue(leftCol.prefWidthProperty(), 100));
                end = new KeyFrame(Duration.millis(250), new KeyValue(leftCol.prefWidthProperty(), 0));
            } else {
                start = new KeyFrame(Duration.ZERO, new KeyValue(leftCol.prefWidthProperty(), 0));
                end = new KeyFrame(Duration.millis(250) ,new KeyValue(leftCol.prefWidthProperty(), 100));                    
            }

            Timeline timeline = new Timeline(start, end);

            timeline.play();
        });

        Node content = createContent();

        root.setVgap(5);
        root.add(content, 1, 0);

        Region optionsPane = createOptionsPane();

        root.add(optionsPane, 0, 0);

        optionsPane.visibleProperty().bind(expanded);

        optionsPane.setPadding(new Insets(10));

        GridPane.setHalignment(expandButton, HPos.CENTER);
        root.add(expandButton, 1, 1);

        Scene scene = new Scene(root, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private GridPane createContent() {
        GridPane contentPane = new GridPane();

        contentPane.setHgap(5);
        contentPane.setVgap(5);

        contentPane.addRow(0, new Label("First Name:"),  new TextField());
        contentPane.addRow(1, new Label("Last Name:"),  new TextField());
        contentPane.addRow(2, new Label("Email:"),  new TextField());

        ColumnConstraints leftCol = new ColumnConstraints();
        leftCol.setHgrow(Priority.NEVER);
        leftCol.setHalignment(HPos.RIGHT);

        ColumnConstraints rightCol = new ColumnConstraints();
        rightCol.setHgrow(Priority.ALWAYS);
        rightCol.setFillWidth(true);

        contentPane.getColumnConstraints().addAll(leftCol, rightCol);
        return contentPane;
    }

    private Region createOptionsPane() {
        VBox optionsPane = new VBox(10, 
                createLabel("New"),
                createLabel("Open"),
                createLabel("Edit"),
                createLabel("Delete")
            );
        return optionsPane;
    }

    private Label createLabel(String text) {
        Label label = new Label(text);
        label.setEllipsisString("");
        return label ;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29174497" questionTitle="how to bind/ unbind a Date type attribute to a DatePicker object">
<Answer><![CDATA[public class Person {
    final private ObjectProperty<LocalDate> birthday;

    public Person(LocalDate birthday) {
        this.birthday = new SimpleObjectProperty<LocalDate>(birthday);
    }

    public LocalDate getBirthday() {
        return birthday.get();
    }

    public void setBirthday(LocalDate birthday) {
        this.birthday.set(birthday);
    }

    public ObjectProperty<LocalDate> birthdayProperty() {
        return birthday;
    }
}

. . .

@FXML
private DatePicker birthday; 
//other code               
private final ChangeListener<Person> personListener = (value, oldValue, newValue) -> {
    //other code
    birthday.valueProperty().unbindBidirectional(oldValue.birthdayProperty());
    //other code
};]]></Answer>
<Answer><![CDATA[public class PersonController {

    private JavaBeanObjectProperty birthdayPropertyAdapter ;

    // ...

private final ChangeListener<Person> personListener = (value, oldV, newV) -> {
    if (oldV != null) {
        id.textProperty().unbindBidirectional(oldV.getId());
        firstName.textProperty().unbindBidirectional(oldV.getFirstname());
        lastName.textProperty().unbindBidirectional(oldV.getLastname());
        mail.textProperty().unbindBidirectional(oldV.getMail());

    }

    if (birthdayPropertyAdapter != null) {
            birthdayPicker.valueProperty().unbindBidirectional(birthdayPropertyAdapter);
    }

    if (newV != null) {
        try {
            id.textProperty().bindBidirectional(JavaBeanIntegerPropertyBuilder.create().bean(newV).name("id").build(), new NumberStringConverter());
            firstName.textProperty().bindBidirectional(JavaBeanStringPropertyBuilder.create().bean(newV).name("firstname").build());
            lastName.textProperty().bindBidirectional(JavaBeanStringPropertyBuilder.create().bean(newV).name("lastname").build());
            mail.textProperty().bindBidirectional(JavaBeanStringPropertyBuilder.create().bean(newV).name("mail").build());

    birthdayPropertyAdapter = JavaBeanObjectPropertyBuilder.create()
    .bean(newV)
    .name("birthday")
    .build();

    birthdayPicker.valueProperty().bindBidirectional(birthdayPropertyAdapter);

        } catch (NoSuchMethodException e) {
            System.out.println("erreur : " + e.getMessage());
        }

    }

};]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29149098" questionTitle="JavaFX ContextMenu how do I get the clicked Object?">
<Answer><![CDATA[public class Main extends Application {

    TextField text = new TextField();

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage primaryStage) {


        Label label1 = new Label("hello");
        Label label2 = new Label("world");
        Label label3 = new Label("java");

        label1.setContextMenu(new MyContextMenu(label1));
        label2.setContextMenu(new MyContextMenu(label2));
        label3.setContextMenu(new MyContextMenu(label3));

        HBox root = new HBox();

        root.getChildren().addAll(text, label1, label2, label3);

        Scene scene = new Scene(root, 300, 100);

        primaryStage.setScene(scene);
        primaryStage.show();

    }

    private class MyContextMenu extends ContextMenu {

        public MyContextMenu(Label label) {

            MenuItem item = new MenuItem("copy to text field");
            item.setOnAction(event -> {

                // I want to copy the text of the Label I clicked to TextField
                text.setText(label.getText());

                event.consume();
            });

            getItems().add(item);

        }

    }
}]]></Answer>
<Answer><![CDATA[TextField text = new TextField();
Label label1 = new Label("hello");
Label label2 = new Label("world");
Label label3 = new Label("java");

label1.setContextMenu(createContextMenu(label1, text));       
label2.setContextMenu(createContextMenu(label2, text));            
label3.setContextMenu(createContextMenu(label3, text));

// ...

private ContextMenu createContextMenu(Label label, TextField text) {
    ContextMenu menu = new ContextMenu();
    MenuItem item = new MenuItem("copy to text field");
    menu.getItems().add(item);
    item.setOnAction(new EventHandler(){
        public void handle(Event event) {
            text.setText(label.getText());
        }
    });
    return menu ;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29132884" questionTitle="Lazy field initialization with lambdas">
<Answer><![CDATA[public final class Cache<T> {
    private Function<Supplier<? extends T>, T> supplier;

    private Cache(){
        supplier = s -> {
            T value = s.get();
            supplier = n -> value;
            return value;
        };
    }   
    public static <T> Supplier<T> of(Supplier<? extends T> creater){
        Cache<T> c = new Cache<>();
        return () -> c.supplier.apply(creater);
    }
    public static <T, U> Function<U, T> of(Function<? super U, ? extends T> creater){
        Cache<T> c = new Cache<>();
        return u -> c.supplier.apply(() -> creater.apply(u));
    }
    public static <T, U, V> BiFunction<U, V, T> of(BiFunction<? super U, ? super V, ? extends T> creater){
        Cache<T> c = new Cache<>();
        return (u, v) -> c.supplier.apply(() -> creater.apply(u, v));
    }
}]]></Answer>
<Answer><![CDATA[private Supplier heavy = () -> createAndCacheHeavy();

   public Heavy getHeavy()
   {
      return heavy.get();
   }

   private synchronized Heavy createAndCacheHeavy()
   {
      class HeavyFactory implements Supplier
      {
         private final Heavy heavyInstance = new Heavy();

         public Heavy get()
         {
            return heavyInstance;
         }
      }

      if(!HeavyFactory.class.isInstance(heavy))
      {
         heavy = new HeavyFactory();
      }

      return heavy.get();
   }]]></Answer>
<Answer><![CDATA[import java.util.function.Supplier;

public class Lazy<T> {
    private T obj;
    private Supplier<T> creator;
    private Supplier<T> fieldAccessor = () -> obj;
    private Supplier<T> initialGetter = () -> {
        obj = creator.get();
        creator = null;
        initialGetter = null;
        getter = fieldAccessor;
        return obj;
    };
    private Supplier<T> getter = initialGetter;

    public Lazy(Supplier<T> creator) {
        this.creator = creator;
    }

    public T get() {
        return getter.get();
    }

}]]></Answer>
<Answer><![CDATA[public abstract class Lazy<T> implements Supplier<T> {
    private enum Empty {Uninitialized}

    private volatile Object value = Empty.Uninitialized;

    protected abstract T init();

    @Override
    public T get() {
        if (value == Empty.Uninitialized) {
            synchronized (this) {
                if (value == Empty.Uninitialized) {
                    value = init();
                }
            }
        }
        return (T) value;
    }

}]]></Answer>
<Answer><![CDATA[public class LazyLoadDecorator<T> implements InvocationHandler {

    private final Object syncLock = new Object();
    protected volatile T inner;
    private Supplier<T> supplier;

    private LazyLoadDecorator(Supplier<T> supplier) {
        this.supplier = supplier;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (inner == null) {
            synchronized (syncLock) {
                if (inner == null) {
                    inner = load();
                }
            }
        }
        return method.invoke(inner, args);
    }

    protected T load() {
        return supplier.get();
    }

    @SuppressWarnings("unchecked")
    public static <T> T create(Supplier<T> supplier, Class<T> clazz) {
        return (T) Proxy.newProxyInstance(LazyLoadDecorator.class.getClassLoader(),
                new Class[] {clazz},
                new LazyLoadDecorator<>(supplier));
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.Supplier;

@FunctionalInterface
public interface Lazy<T> extends Supplier<T> {
    abstract class Cache {
        private volatile static Map<Integer, Object> instances = new HashMap<>();

        private static synchronized Object getInstance(int instanceId, Supplier<Object> create) {

            Object instance = instances.get(instanceId);
            if (instance == null) {
                synchronized (Cache.class) {
                    instance = instances.get(instanceId);
                    if (instance == null) {
                        instance = create.get();
                        instances.put(instanceId, instance);
                    }
                }
            }
            return instance;
        }
    }

    @Override
    default T get() {
        return (T) Cache.getInstance(this.hashCode(), () -> init());
    }

    T init();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29124723" questionTitle="JavaFX Chart Auto-Scaling Wrong with Low Numbers">
<Answer><![CDATA[public class StackedBarChartSample extends Application {

    final CategoryAxis xAxis = new CategoryAxis();
    final NumberAxis yAxis = new NumberAxis();
    final StackedBarChart<String, Number> sbc = new StackedBarChart<String, Number>(xAxis, yAxis);

    Random rnd = new Random();

    final XYChart.Series<String, Number> series1 = new XYChart.Series<String, Number>();
    final XYChart.Series<String, Number> series2 = new XYChart.Series<String, Number>();

    @Override
    public void start(Stage stage) {

        stage.setTitle("Bar Chart Sample");

        sbc.setAnimated(true); //change this to false and autoscaling works!

        Button createButton = new Button("Create");
        createButton.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle(ActionEvent arg0) {
                createChartData();
            }

        });

        Button modifyButton = new Button("Modify");
        modifyButton.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle(ActionEvent arg0) {
                modifyChartData();
            }

        });

        VBox contentPane = new VBox();
        contentPane.getChildren().addAll(sbc, createButton, modifyButton);

        Scene scene = new Scene(contentPane, 800, 600);

        stage.setScene(scene);
        stage.show();
    }


    private void createChartData(){

        int m = 1; //change this to 100 and autoscaling works!

        m = rnd.nextInt(100) + 1; // just some random value to see changes in the chart

        System.out.println( "m = " + m);

        series1.setName("ABC");
        series1.getData().add(new XYChart.Data<String, Number>("one", 25*m));
        series1.getData().add(new XYChart.Data<String, Number>("two", 20*m));
        series1.getData().add(new XYChart.Data<String, Number>("three", 10*m));

        series2.setName("XYZ");
        series2.getData().add(new XYChart.Data<String, Number>("one", 25*m));
        series2.getData().add(new XYChart.Data<String, Number>("two", 20*m));
        series2.getData().add(new XYChart.Data<String, Number>("three", 10*m));

        sbc.setData( FXCollections.observableArrayList(series1, series2));
    }

    private void modifyChartData() {

        int m = 1; //change this to 100 and autoscaling works!

        m = rnd.nextInt(100) + 1; // just some random value to see changes in the chart

        System.out.println( "m = " + m);

        for( XYChart.Data<String,Number> data: series1.getData()) {
            data.setYValue(rnd.nextInt(30) * m);
        }

        for( XYChart.Data<String,Number> data: series2.getData()) {
            data.setYValue(rnd.nextInt(30) * m);
        }


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.StackedBarChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class StackedBarChartSample extends Application
{

    final CategoryAxis xAxis = new CategoryAxis();
    final NumberAxis yAxis = new NumberAxis();
    final StackedBarChart<String, Number> sbc = new StackedBarChart<String, Number>(xAxis, yAxis);

    @Override
    public void start(final Stage stage)
    {

        stage.setTitle("Bar Chart Sample");

        sbc.setAnimated(true);

        final Button updateButton = new Button("update");
        updateButton.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(final ActionEvent arg0)
            {
                updateChart();
            }

        });

        final Button clearButton = new Button("Clear");
        clearButton.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(final ActionEvent arg0)
            {
                clearChart(true);
            }

        });

        final Button clearAndUpdateButton = new Button("Clear & Update");
        clearAndUpdateButton.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(final ActionEvent evt)
            {
                clearChart(true);
                updateChart();
            }

        });

        final Button clearAndUpdateLaterButton = new Button("Clear & Update Later");
        clearAndUpdateLaterButton.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(final ActionEvent evt)
            {
                clearChart(true);
                new Timer(true).schedule(new TimerTask()
                {
                    @Override
                    public void run()
                    {
                        Platform.runLater(() -> updateChart());
                    }
                }, 1000);
            }

        });

        final Button clearNoAnimAndUpdateButton = new Button("Clear (no anim) & Update");
        clearNoAnimAndUpdateButton.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(final ActionEvent evt)
            {
                clearChart(false);
                updateChart();
            }

        });

        final VBox contentPane = new VBox();
        contentPane.getChildren().addAll(sbc, clearButton, updateButton, clearAndUpdateButton, clearAndUpdateLaterButton,
                clearNoAnimAndUpdateButton);

        final Scene scene = new Scene(contentPane, 800, 600);

        stage.setScene(scene);
        stage.show();

        xAxis.setCategories(FXCollections.<String> observableArrayList(Arrays.asList("one", "two", "three")));
    }

    private void clearChart(final boolean animate)
    {
        System.out.println("Clear");
        final boolean wasAnimated = sbc.getAnimated();
        if (!animate) {
            sbc.setAnimated(false);
        }

        sbc.getData().clear();

        if (!animate) {
            sbc.setAnimated(wasAnimated);
        }
    }

    private void updateChart()
    {
        System.out.println("Update");
        final int m = 1; // change this to 100 and autoscaling works!

        final XYChart.Series<String, Number> series1 = new XYChart.Series<String, Number>();
        final XYChart.Series<String, Number> series2 = new XYChart.Series<String, Number>();

        series1.setName("ABC");
        series1.getData().add(new XYChart.Data<String, Number>("one", 25 * m));
        series1.getData().add(new XYChart.Data<String, Number>("two", 20 * m));
        series1.getData().add(new XYChart.Data<String, Number>("three", 10 * m));

        series2.setName("XYZ");
        series2.getData().add(new XYChart.Data<String, Number>("one", 25 * m));
        series2.getData().add(new XYChart.Data<String, Number>("two", 20 * m));
        series2.getData().add(new XYChart.Data<String, Number>("three", 10 * m));

        sbc.getData().addAll(series1, series2);
    }

    public static void main(final String[] args)
    {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29095967" questionTitle="Splitting List into sublists along elements">
<Answer><![CDATA[private static Collector<String, List<List<String>>, List<List<String>>> splitBySeparator(Predicate<String> sep) {
    final List<String> current = new ArrayList<>();
    return Collector.of(() -> new ArrayList<List<String>>(),
        (l, elem) -> {
            if (sep.test(elem)) {
                l.add(new ArrayList<>(current));
                current.clear();
            }
            else {
                current.add(elem);
            }
        },
        (l1, l2) -> {
            throw new RuntimeException("Should not run this in parallel");
        },
        l -> {
            if (current.size() != 0) {
                l.add(current);
                return l;
            }
        );
}]]></Answer>
<Answer><![CDATA[List<String> strings = Arrays.asList("a", "b", null, "c", null, "d", "e");
    List<List<String>> groups = strings.stream()
            .collect(() -> {
                List<List<String>> list = new ArrayList<>();
                list.add(new ArrayList<>());
                return list;
            },
            (list, s) -> {
                if (s == null) {
                    list.add(new ArrayList<>());
                } else {
                    list.get(list.size() - 1).add(s);
                }
            },
            (list1, list2) -> {
                // Simple merging of partial sublists would
                // introduce a false level-break at the beginning.
                list1.get(list1.size() - 1).addAll(list2.remove(0));
                list1.addAll(list2);
            });]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.util.Arrays.asList;

public class ListSplitting {
    static final Map<List<String>, List<List<String>>> TESTCASES = new LinkedHashMap<>();
    static {
        TESTCASES.put(asList(),
                  asList(asList()));
        TESTCASES.put(asList("a", "b", "c"),
                  asList(asList("a", "b", "c")));
        TESTCASES.put(asList("a", "b", "#", "c", "#", "d", "e"),
                  asList(asList("a", "b"), asList("c"), asList("d", "e")));
        TESTCASES.put(asList("#"),
                  asList(asList(), asList()));
        TESTCASES.put(asList("#", "a", "b"),
                  asList(asList(), asList("a", "b")));
        TESTCASES.put(asList("a", "b", "#"),
                  asList(asList("a", "b"), asList()));
        TESTCASES.put(asList("#"),
                  asList(asList(), asList()));
        TESTCASES.put(asList("a", "#", "b"),
                  asList(asList("a"), asList("b")));
        TESTCASES.put(asList("a", "#", "#", "b"),
                  asList(asList("a"), asList(), asList("b")));
        TESTCASES.put(asList("a", "#", "#", "#", "b"),
                  asList(asList("a"), asList(), asList(), asList("b")));
    }

    static final Predicate<String> TESTPRED = "#"::equals;

    static void testAll(BiFunction<List<String>, Predicate<String>, List<List<String>>> f) {
        TESTCASES.forEach((input, expected) -> {
            List<List<String>> actual = f.apply(input, TESTPRED);
            System.out.println(input + " => " + expected);
            if (!expected.equals(actual)) {
                System.out.println("  ERROR: actual was " + actual);
            }
        });
    }

    static <T> List<List<T>> splitStream(List<T> input, Predicate<? super T> pred) {
        int[] edges = IntStream.range(-1, input.size()+1)
                               .filter(i -> i == -1 || i == input.size() ||
                                       pred.test(input.get(i)))
                               .toArray();

        return IntStream.range(0, edges.length-1)
                        .mapToObj(k -> input.subList(edges[k]+1, edges[k+1]))
                        .collect(Collectors.toList());
    }

    static <T> List<List<T>> splitLoop(List<T> input, Predicate<? super T> pred) {
        List<List<T>> result = new ArrayList<>();
        int start = 0;

        for (int cur = 0; cur < input.size(); cur++) {
            if (pred.test(input.get(cur))) {
                result.add(input.subList(start, cur));
                start = cur + 1;
            }
        }
        result.add(input.subList(start, input.size()));

        return result;
    }

    public static void main(String[] args) {
        System.out.println("===== Loop =====");
        testAll(ListSplitting::splitLoop);
        System.out.println("===== Stream =====");
        testAll(ListSplitting::splitStream);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29081218" questionTitle="How to create compressed Zip archive using ZipOutputStream so that method getSize() of ZipEntry returns correct size?">
<Answer><![CDATA[public static void main(String[] args) throws IOException {
    File infile  = new File("test_file.pdf");
    File outfile = new File("test.zip");
    try (FileInputStream  fis = new FileInputStream(infile);
         FileOutputStream fos = new FileOutputStream(outfile);
         ZipOutputStream  zos = new ZipOutputStream(fos) ) {

        byte[]  buffer = new byte[1024];
        ZipEntry entry = new ZipEntry("data");
        precalc(entry, fis.getChannel());
        zos.putNextEntry(entry);
        for(int bytesRead; (bytesRead = fis.read(buffer)) >= 0; )
            zos.write(buffer, 0, bytesRead);
        zos.closeEntry();
    }

    try(FileInputStream fin = new FileInputStream(outfile);
        ZipInputStream  zis = new ZipInputStream(fin) ) {

        ZipEntry entry = zis.getNextEntry();
        System.out.println("Entry size: " + entry.getSize());
        System.out.println("Compressed size: " + entry.getCompressedSize());
        System.out.println("CRC: " + entry.getCrc());
        zis.closeEntry();
    }
}

private static void precalc(ZipEntry entry, FileChannel fch) throws IOException {
    long uncompressed = fch.size();
    int method = entry.getMethod();
    CRC32 crc = new CRC32();
    Deflater def;
    byte[] drain;
    if(method != ZipEntry.STORED) {
        def   = new Deflater(Deflater.DEFAULT_COMPRESSION, true);
        drain = new byte[1024];
    }
    else {
        def   = null;
        drain = null;
    }
    ByteBuffer buf = ByteBuffer.allocate((int)Math.min(uncompressed, 4096));
    for(int bytesRead; (bytesRead = fch.read(buf)) != -1; buf.clear()) {
        crc.update(buf.array(), buf.arrayOffset(), bytesRead);
        if(def!=null) {
            def.setInput(buf.array(), buf.arrayOffset(), bytesRead);
            while(!def.needsInput()) def.deflate(drain, 0, drain.length);
        }
    }
    entry.setSize(uncompressed);
    if(def!=null) {
        def.finish();
        while(!def.finished()) def.deflate(drain, 0, drain.length);
        entry.setCompressedSize(def.getBytesWritten());
    }
    entry.setCrc(crc.getValue());
    fch.position(0);
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) throws IOException 
{
    FileInputStream fis = new FileInputStream( "source.txt" );
    FileOutputStream fos = new FileOutputStream( "result.zip" );
    ZipOutputStream zos = new ZipOutputStream( fos );

    byte[] buf = new byte[fis.available()];
    fis.read(buf);
    ZipEntry e = new ZipEntry( "source.txt" );

    updateEntry(e, buf);

    zos.putNextEntry(e);
    zos.write(buf);
    zos.closeEntry();

    zos.close();
}

private static void updateEntry(ZipEntry entry, byte[] buffer) throws IOException
{
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ZipOutputStream zos = new ZipOutputStream( bos );
    zos.putNextEntry(entry);
    zos.write(buffer);
    zos.closeEntry();
    zos.close();
    bos.close();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29076439" questionTitle="Java 8: Copy directory recursively?">
<Answer><![CDATA[static private void copyFolder(File src, File dest) {
    // checks
    if(src==null || dest==null)
        return;
    if(!src.isDirectory())
        return;
    if(dest.exists()){
        if(!dest.isDirectory()){
            //System.out.println("destination not a folder " + dest);
            return;
        }
    } else {
        dest.mkdir();
    }

    if(src.listFiles()==null || src.listFiles().length==0)
        return;

    for(File file: src.listFiles()){
        File fileDest = new File(dest, file.getName());
        //System.out.println(fileDest.getAbsolutePath());
        if(file.isDirectory()){
            copyFolder(file, fileDest);
        }else{
            if(fileDest.exists())
                continue;

            try {
                Files.copy(file.toPath(), fileDest.toPath());
            } catch (IOException e) {
                //e.printStackTrace();
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[public  void copyFolder(File src, File dest) throws IOException{
        try (Stream<Path> stream = Files.walk(src.toPath())) {
            stream.forEach(sourcePath -> {

                try {
                    Files.copy(
                            /*Source Path*/
                            sourcePath,
                            /*Destination Path */
                            src.toPath().resolve(dest.toPath().relativize(sourcePath)));
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

            });

        }

    }]]></Answer>
<Answer><![CDATA[public  static void
copyFolder( Path src, Path dest )
{
    try
    {   Files.walk( src )
        .forEach( s ->
        {   try
            {   Path d = dest.resolve( src.relativize(s) );
                if( Files.isDirectory( s ) )
                {   if( !Files.exists( d ) )
                        Files.createDirectory( d );
                    return;
                }
                Files.copy( s, d );// use flag to override existing
            }catch( Exception e )
                { e.printStackTrace(); }
        });
    }catch( Exception ex )
        {   ex.printStackTrace(); }
}]]></Answer>
<Answer><![CDATA[static void copyFolder(File src, File dest){
    // checks
    if(src==null || dest==null)
        return;
    if(!src.isDirectory())
        return;
    if(dest.exists()){
        if(!dest.isDirectory()){
            //System.out.println("destination not a folder " + dest);
            return;
        }
    } else {
        dest.mkdir();
    }

    if(src.listFiles()==null || src.listFiles().length==0)
        return;

    String strAbsPathSrc = src.getAbsolutePath();
    String strAbsPathDest = dest.getAbsolutePath();

    try {
        Files.walkFileTree(src.toPath(), new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file,
                    BasicFileAttributes attrs) throws IOException {
                File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
                if(dstFile.exists())
                    return FileVisitResult.CONTINUE;

                if(!dstFile.getParentFile().exists())
                    dstFile.getParentFile().mkdirs();

                //System.out.println(file + " " + dstFile.getAbsolutePath());
                Files.copy(file, dstFile.toPath());

                return FileVisitResult.CONTINUE;
            }
        });

    } catch (IOException e) {
        //e.printStackTrace();
        return;
    }

    return;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29043081" questionTitle="JavaFX mouse transparent is not working">
<Answer><![CDATA[public class Example extends Application {

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {

        StackPane stackPane = new StackPane();

        Button bigButton = new Button("I'm not clickable");
        bigButton.setOnAction(e -> System.out.println(e));
        bigButton.setMaxHeight(Double.MAX_VALUE);
        bigButton.setMaxWidth(Double.MAX_VALUE);
        stackPane.getChildren().add(bigButton);

        VBox vbox = new VBox();
        vbox.setAlignment(Pos.CENTER);
        vbox.setSpacing(20);
        vbox.setPrefHeight(Double.MAX_VALUE);
        vbox.setPrefWidth(400);

        ObservableList<Node> vChildren = vbox.getChildren();
        Button button1 = new Button("This");
        button1.setOnAction(e -> {
            System.out.println(e);
            e.consume();
        });
        Button button2 = new Button("Button");
        button2.setOnAction(e -> {
            System.out.println(e);
            e.consume();
        });
        Button button3 = new Button("Are clickable");
        button3.setOnAction(e -> {
            System.out.println(e);
            e.consume();
        });

        vChildren.addAll(button1, button2, button3);

        BorderPane borderPane = new BorderPane();
        borderPane.setCenter(vbox);

        vbox.prefWidthProperty().bind(bigButton.widthProperty());
        vbox.prefHeightProperty().bind(bigButton.heightProperty());

        bigButton.setGraphic(borderPane);

        stage.setScene(new Scene(stackPane, 800, 600));
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[public class MouseTransparency extends Application {

    @Override
    public void start(Stage primaryStage) {

        Group root = new Group();

        Rectangle outerRect = new Rectangle(100,100,200,200);
        outerRect.setStroke(Color.BLUE);
        outerRect.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.2));

        Rectangle innerRect = new Rectangle(150,150,50,50);
        innerRect.setStroke(Color.RED);
        innerRect.setFill(Color.RED.deriveColor(1, 1, 1, 0.2));

        Circle circle = new Circle( 250, 250, 50);
        circle.setStroke(Color.GREEN);
        circle.setFill(Color.GREEN.deriveColor(1, 1, 1, 0.2));

        // mouse transparency checkbox
        CheckBox checkBox = new CheckBox( "Enable Mouse Transparency");

        // bind inner rect mouse transparency to the checkbox value; in the end you'd rather use innerRect.setMouseTransparent(...); 
        innerRect.mouseTransparentProperty().bind(checkBox.selectedProperty());

        Label label = new Label("You clicked: ");

        // add event handlers
        outerRect.addEventFilter(MouseEvent.MOUSE_PRESSED, e -> label.setText("You clicked: Outer Rectangle"));
        innerRect.addEventFilter(MouseEvent.MOUSE_PRESSED, e -> label.setText( "You clicked: Inner Rectangle"));
        circle.addEventFilter(MouseEvent.MOUSE_PRESSED, e -> label.setText( "You clicked: Circle"));

        VBox vBox = new VBox();
        vBox.getChildren().addAll( checkBox, label);

        root.getChildren().addAll( vBox, outerRect, innerRect, circle);

        Scene scene = new Scene( root, 500, 500);

        primaryStage.setScene( scene);
        primaryStage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="29042938" questionTitle="How to implement Church Numerals using Java 1.8">
<Answer><![CDATA[public static void main(String[]a){
    ChurchNumeral five = ChurchNumeral.valueOf(5);
    System.out.println(five.apply(s -> s + s, "s"));
    System.out.println(five.apply(Math::sqrt, Double.MAX_VALUE));
}
@FunctionalInterface
private interface ChurchNumeralT<T> extends ChurchNumeral {
    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    default<U> U apply(UnaryOperator<U> f, U arg){
        return (U)((ChurchNumeralT)this).tapply(f, arg);
    }
    T tapply(UnaryOperator<T> f, T arg);
}
public interface ChurchNumeral {

    <T> T apply(UnaryOperator<T> f, T arg);

    static ChurchNumeral valueOf(int n) {
        if (n < 0) {
            throw new IllegalArgumentException("Argument n must be non-negative.");
        }
        if (n == 0) {
            return (ChurchNumeralT<?>)(f, arg) -> arg;
        }
        return (ChurchNumeralT<?>)(f, arg) -> f.apply(valueOf(n - 1).apply(f, arg));
    }
}]]></Answer>
<Answer><![CDATA[static interface Church<T> extends UnaryOperator<UnaryOperator<T>> {

    static <T> Church<T> of(int n) {
        if (n < 0) {
            throw new IllegalArgumentException();
        } else if (n == 0) {
            return zero();
        } else {
            return sum(one(), Church.of(n - 1));
        }
    }

    static <T> Church<T> zero() {
        return f -> (t -> t);
    }

    static <T> Church<T> one() {
        return f -> f;
    }

    static <T> Church<T> sum(Church<T> a, Church<T> b) {
        return f -> b.apply(f).andThen(a.apply(f))::apply;
    }

    static <T> Church<T> mul(Church<T> a, Church<T> b) {
        return f -> a.apply(b.apply(f))::apply;
    }

    default <U> Church<U> convert() {
        return (Church<U>) this;
    }
}

public static void main(String[] args) {
    Church<Integer> zero = Church.zero();
    Church<Integer> five = Church.of(5);
    Church<Integer> three = Church.of(3);
    Church<Integer> eight = Church.sum(five, three);
    Church<Integer> fifteen = Church.mul(three, five);

    assert 0 == zero.apply(x -> x + 1).apply(0);
    assert 3 == three.apply(x -> x + 1).apply(0);
    assert 5 == five.apply(x -> x + 1).apply(0);
    assert 8 == eight.apply(x -> x + 1).apply(0);
    assert 15 == fifteen.apply(x -> x + 1).apply(0);

    Church<String> strOne = Church.one();     
    Church<String> strThree = three.convert();  // make Church<String>
                                                // from a Church<Integer>

    assert "foo:bar".equals(strOne.apply("foo:"::concat).apply("bar"));
    assert "foo:foo:foo:bar".equals(strThree.apply("foo:"::concat).apply("bar"));

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28959849" questionTitle="Java 8 Supplier Exception handling">
<Answer><![CDATA[public class TestCompletableFuture {

    private static BiConsumer<Integer, Throwable> biConsumer = (x,y) -> {
        System.out.println(x);
        System.out.println(y);
    };

    public static void main(String args[]) throws Exception {
        Supplier<Integer> numberSupplier = () -> {
            throw new RuntimeException(); // or return integer
        };

        CompletableFuture<Integer> testFuture = CompletableFuture.supplyAsync(numberSupplier)
                .whenComplete(biConsumer)
                .exceptionally(exception -> 7);

        System.out.println("result = " + testFuture.get());
    }

}]]></Answer>
<Answer><![CDATA[public static void main(String args[]) throws InterruptedException {
  TestCompletableFuture testF = new TestCompletableFuture();
  testF.start();
  Thread.sleep(1000); //wait for the CompletableFuture to complete
}

public static class TestCompletableFuture {
  BiConsumer<Integer, Throwable> biConsumer = (x, y) -> {
    System.out.println(x);
    System.out.println(y);
  };
  public void start() {
    CompletableFuture.supplyAsync(SupplyNumbers::sendNumbers)
            .whenComplete(biConsumer);
  }
}

static class SupplyNumbers {
  public static Integer sendNumbers() {
    throw new RuntimeException("Hello");
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28952133" questionTitle="How to add two vertical lines with JavaFX LineChart">
<Answer><![CDATA[public class LineChartSample extends Application {

    @Override public void start(Stage stage) {

        final NumberAxis xAxis = new NumberAxis();
        final NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("Number of Month");

        final LineChartWithMarkers<Number,Number> lineChart = new LineChartWithMarkers<Number,Number>(xAxis,yAxis);

        XYChart.Series series = new XYChart.Series();
        series.setName("My portfolio");

        series.getData().add(new XYChart.Data(1, 23));
        series.getData().add(new XYChart.Data(2, 14));
        series.getData().add(new XYChart.Data(3, 15));
        series.getData().add(new XYChart.Data(4, 24));
        series.getData().add(new XYChart.Data(5, 34));
        series.getData().add(new XYChart.Data(6, 36));
        series.getData().add(new XYChart.Data(7, 22));
        series.getData().add(new XYChart.Data(8, 45));
        series.getData().add(new XYChart.Data(9, 43));
        series.getData().add(new XYChart.Data(10, 17));
        series.getData().add(new XYChart.Data(11, 29));
        series.getData().add(new XYChart.Data(12, 25));

        lineChart.getData().add(series);

        Data<Number, Number> horizontalMarker = new Data<>(0, 25);
        lineChart.addHorizontalValueMarker(horizontalMarker);

        Data<Number, Number> verticalMarker = new Data<>(10, 0);
        lineChart.addVerticalValueMarker(verticalMarker);

        Slider horizontalMarkerSlider = new Slider(yAxis.getLowerBound(), yAxis.getUpperBound(), 0);
        horizontalMarkerSlider.setOrientation(Orientation.VERTICAL);
        horizontalMarkerSlider.setShowTickLabels(true);
        horizontalMarkerSlider.valueProperty().bindBidirectional(horizontalMarker.YValueProperty());
        horizontalMarkerSlider.minProperty().bind(yAxis.lowerBoundProperty());
        horizontalMarkerSlider.maxProperty().bind(yAxis.upperBoundProperty());

        Slider verticalMarkerSlider = new Slider(xAxis.getLowerBound(), xAxis.getUpperBound(), 0);
        verticalMarkerSlider.setOrientation(Orientation.HORIZONTAL);
        verticalMarkerSlider.setShowTickLabels(true);
        verticalMarkerSlider.valueProperty().bindBidirectional(verticalMarker.XValueProperty());
        verticalMarkerSlider.minProperty().bind(xAxis.lowerBoundProperty());
        verticalMarkerSlider.maxProperty().bind(xAxis.upperBoundProperty());

        BorderPane borderPane = new BorderPane();
        borderPane.setCenter( lineChart);
        borderPane.setTop(verticalMarkerSlider);
        borderPane.setRight(horizontalMarkerSlider);

        Scene scene  = new Scene(borderPane,800,600);

        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private class LineChartWithMarkers<X,Y> extends LineChart {

        private ObservableList<Data<X, Y>> horizontalMarkers;
        private ObservableList<Data<X, Y>> verticalMarkers;

        public LineChartWithMarkers(Axis<X> xAxis, Axis<Y> yAxis) {
            super(xAxis, yAxis);
            horizontalMarkers = FXCollections.observableArrayList(data -> new Observable[] {data.YValueProperty()});
            horizontalMarkers.addListener((InvalidationListener)observable -> layoutPlotChildren());
            verticalMarkers = FXCollections.observableArrayList(data -> new Observable[] {data.XValueProperty()});
            verticalMarkers.addListener((InvalidationListener)observable -> layoutPlotChildren());
        }

        public void addHorizontalValueMarker(Data<X, Y> marker) {
            Objects.requireNonNull(marker, "the marker must not be null");
            if (horizontalMarkers.contains(marker)) return;
            Line line = new Line();
            marker.setNode(line );
            getPlotChildren().add(line);
            horizontalMarkers.add(marker);
        }

        public void removeHorizontalValueMarker(Data<X, Y> marker) {
            Objects.requireNonNull(marker, "the marker must not be null");
            if (marker.getNode() != null) {
                getPlotChildren().remove(marker.getNode());
                marker.setNode(null);
            }
            horizontalMarkers.remove(marker);
        }

        public void addVerticalValueMarker(Data<X, Y> marker) {
            Objects.requireNonNull(marker, "the marker must not be null");
            if (verticalMarkers.contains(marker)) return;
            Line line = new Line();
            marker.setNode(line );
            getPlotChildren().add(line);
            verticalMarkers.add(marker);
        }

        public void removeVerticalValueMarker(Data<X, Y> marker) {
            Objects.requireNonNull(marker, "the marker must not be null");
            if (marker.getNode() != null) {
                getPlotChildren().remove(marker.getNode());
                marker.setNode(null);
            }
            verticalMarkers.remove(marker);
        }


        @Override
        protected void layoutPlotChildren() {
            super.layoutPlotChildren();
            for (Data<X, Y> horizontalMarker : horizontalMarkers) {
                Line line = (Line) horizontalMarker.getNode();
                line.setStartX(0);
                line.setEndX(getBoundsInLocal().getWidth());
                line.setStartY(getYAxis().getDisplayPosition(horizontalMarker.getYValue()) + 0.5); // 0.5 for crispness
                line.setEndY(line.getStartY());
                line.toFront();
            }
            for (Data<X, Y> verticalMarker : verticalMarkers) {
                Line line = (Line) verticalMarker.getNode();
                line.setStartX(getXAxis().getDisplayPosition(verticalMarker.getXValue()) + 0.5);  // 0.5 for crispness
                line.setEndX(line.getStartX());
                line.setStartY(0d);
                line.setEndY(getBoundsInLocal().getHeight());
                line.toFront();
            }      
        }

    }
}]]></Answer>
<Answer><![CDATA[import java.util.Random;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.value.ObservableDoubleValue;
import javafx.geometry.Insets;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Data;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.control.Slider;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.stage.Stage;


public class LineChartWithVerticalLine extends Application {

    @Override
    public void start(Stage primaryStage) {
        NumberAxis xAxis = new NumberAxis();
        NumberAxis yAxis = new NumberAxis();
        LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);
        chart.getData().add(createSeries());

        Pane chartHolder = new Pane();
        chartHolder.getChildren().add(chart);


        DoubleProperty lineX = new SimpleDoubleProperty();
        Slider slider = new Slider();
        slider.minProperty().bind(xAxis.lowerBoundProperty());
        slider.maxProperty().bind(xAxis.upperBoundProperty());

        slider.setPadding(new Insets(20));

        lineX.bind(slider.valueProperty());

        chartHolder.getChildren().add(createVerticalLine(chart, xAxis, yAxis, chartHolder, lineX));

        BorderPane root = new BorderPane(chartHolder, null, null, slider, null);

        Scene scene = new Scene(root, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Line createVerticalLine(XYChart<Number, Number> chart, NumberAxis xAxis, NumberAxis yAxis, Pane container, ObservableDoubleValue x) {
        Line line = new Line();
        line.startXProperty().bind(Bindings.createDoubleBinding(() -> {
                double xInAxis = xAxis.getDisplayPosition(x.get());
                Point2D pointInScene = xAxis.localToScene(xInAxis, 0);
                double xInContainer = container.sceneToLocal(pointInScene).getX();
                return xInContainer ;
            }, 
            x, 
            chart.boundsInParentProperty(), 
            xAxis.lowerBoundProperty(),
            xAxis.upperBoundProperty()));
        line.endXProperty().bind(line.startXProperty());
        line.startYProperty().bind(Bindings.createDoubleBinding(() -> {
                double lowerY = yAxis.getDisplayPosition(yAxis.getLowerBound());
                Point2D pointInScene = yAxis.localToScene(0, lowerY);
                double yInContainer = container.sceneToLocal(pointInScene).getY();
                return yInContainer ;
            }, 
            chart.boundsInParentProperty(), 
            yAxis.lowerBoundProperty()));
        line.endYProperty().bind(Bindings.createDoubleBinding(() -> {
                double upperY = yAxis.getDisplayPosition(yAxis.getUpperBound());
                Point2D pointInScene = yAxis.localToScene(0, upperY);
                double yInContainer = container.sceneToLocal(pointInScene).getY();
                return yInContainer ;
            }, 
            chart.boundsInParentProperty(), 
            yAxis.lowerBoundProperty()));

        line.visibleProperty().bind(
                Bindings.lessThan(x, xAxis.lowerBoundProperty())
                .and(Bindings.greaterThan(x, xAxis.upperBoundProperty())).not());

        return line ;
    }

    private Series<Number, Number> createSeries() {
        Series<Number, Number> series = new Series<>();
        series.setName("Data");
        Random rng = new Random();
        for (int i=0; i<=20; i++) {
            series.getData().add(new Data<>(i, rng.nextInt(101)));
        }
        return series ;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28841877" questionTitle="How to create a node (Circle) while the mouse is hovering over a button in JavaFX?">
<Answer><![CDATA[public class FXMLDocumentController implements Initializable {

    @FXML private AnchorPane apMain;
    @FXML private Button load;
    Circle choose;




    @FXML void hoverEnterLoad(MouseEvent event) {
        choose = new Circle();
        choose.setCenterX(50.0);
        choose.setCenterY(50.0);
        choose.setFill(Color.BLACK);
        choose.setRadius(15.0);
        apMain.getChildren().add(choose);
        System.out.println("Mouse over button!");
    } // hoverEnterLoad                                                                                                                                                               

    /**                                                                                                                                                                              
     * Hides circle                                                                                                                                                                
     */
    @FXML void hoverExitLoad(MouseEvent event) {
        apMain.getChildren().remove(choose);
        System.out.println("Mouse no longer over!");
    } // hoverExitLoad

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
    }    

}]]></Answer>
<Answer><![CDATA[// FXML:
// Added:

<Circle fx:id="selector" centerX="255.0" centerY="291.0" fill="TRANSPARENT" radius="5.0" stroke="TRANSPARENT" strokeType="INSIDE" />

// Controller:
// Added/Updated:

public Controller {

    @FXML private Button load;
    @FXML private Circle choose;

    /**                                                                                                                                                                              
     * Shows circle                                                                                                                                                                
     */
    @FXML void hoverEnterLoad(ActionEvent event) {
        choose.setCenterX(210.0);
        choose.setCenterY(278.0);
        choose.setFill(Color.BLACK);
        choose.setRadius(15.0);
    } // hoverEnterLoad                                                                                                                                                               

    /**                                                                                                                                                                              
     * Hides circle                                                                                                                                                                
     */
    @FXML void hoverExitLoad(ActionEvent event) {
        choose.setFill(Color.TRANSPARENT);
    } // hoverExitLoad

} // Controller]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28824672" questionTitle="reverse multiplication table javafx">
<Answer><![CDATA[/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reversemultiplication;

import java.util.List;
import javafx.application.Application;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

/**
 *
 * @author reegan
 */
public class ReverseMultiplication extends Application {

    @Override
    public void start(Stage primaryStage) {
        BorderPane pane = new BorderPane();
        pane.setTop(getHbox1());

        HBox prompt = new HBox(15);
        prompt.setPadding(new Insets(15, 15, 15, 15));
        prompt.setAlignment(Pos.TOP_CENTER);
        prompt.getStyleClass().add("hbox2");

        Label lblProblem = new Label("Enter problem: ");
        prompt.getChildren().add(lblProblem);

        TextField tfProblem = new TextField();
        prompt.getChildren().add(tfProblem);
        GridPane gridPane = setUpGrid();
        GridpaneHelper gh = new GridpaneHelper(gridPane);
        Button btnFindAnswer = new Button("Find answers");
        btnFindAnswer.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<Event>() {

            @Override
            public void handle(Event arg0) {
                List<int[]> x = showFactors(tfProblem);
                for (int[] x1 : x) {
                    Node node = gh.getChildren()[x1[0]][x1[1]];
                    node.setStyle("-fx-background-color: green");
                }
            }

        });

        prompt.getChildren().add(btnFindAnswer);

        pane.setCenter(prompt);
        pane.setBottom(gridPane);

        Scene scene = new Scene(pane, 550, 650);
        scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
        primaryStage.setTitle("lab 7");
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    private HBox getHbox1() {
        HBox hbox = new HBox(15);
        hbox.setPadding(new Insets(15, 15, 15, 15));
        hbox.setAlignment(Pos.TOP_CENTER);
        hbox.getStyleClass().add("hbox1");

        Label lblProblem = new Label("Reverse Multiplication Table");
        hbox.getChildren().add(lblProblem);

        return hbox;
    }

    public GridPane setUpGrid() {
        GridPane pane = new GridPane();
        Label[][] labels = new Label[11][11];

        for (int row = 0; row < 11; row++) {
            for (int col = 0; col < 11; col++) {
                Label l = new Label();
                setUpLabel(l, col, row);
                labels[row][col] = l;
                pane.add(l, col, row);
            }
        }

        return pane;
    }

    public void setUpLabel(final Label l, final int col, final int row) {
        l.setPrefHeight(50);
        l.setPrefWidth(50);
        l.setAlignment(Pos.CENTER);
        l.setStyle("-fx-stroke-border: black; -fx-border-width: 1;");
        String a = String.valueOf(row);
        String b = String.valueOf(col);

        if (row == 0 || col == 0) {
            l.getStyleClass().add("gridBorders");

            if (row == 0) {
                l.setText(b);
            } else if (col == 0) {
                l.setText(a);
            }
        } else {
            l.setText(a + " * " + b);
            l.getStyleClass().add("gridInside");

        }
    }

    public List<int[]> showFactors(TextField problem) {
        FactorCalculator calc = new FactorCalculator();
        int number = Integer.parseInt(problem.getText());
        System.out.println(number);
        List<int[]> factors = calc.findFactor(number, 10);

        System.out.println(factors);
        return factors;

    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[private class AnswerCell extends Label {

    int a;
    int b;
    int value;

    public AnswerCell( int a, int b) {
        this.a = a;
        this.b = b;
        this.value = a * b;
        setText( a + " * " + b);
    }

    public boolean matches( int matchValue) {
        return value == matchValue;
    }

    public void highlight() {
        getStyleClass().add( "gridAnswer");
    }

    public void unhighlight() {
        getStyleClass().remove( "gridAnswer");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28788117" questionTitle="Stacking charts in JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Exemple158_JavaFX_Overlaid_Stacked_Charts extends Application {

final static String AUSTRIA = "Austria";
final static String BRAZIL = "Brazil";
final static String FRANCE = "France";
final static String ITALY = "Italy";
final static String USA = "USA";


@Override
public void start(Stage stage) {

    // x-axis and y-axis  for both charts:
    final CategoryAxis xAxis = new CategoryAxis();
    xAxis.setLabel("Country");
    final NumberAxis yAxis1 = new NumberAxis();
    yAxis1.setLabel("Value");

    // first chart:
    final BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis1);
    barChart.setLegendVisible(false);
    barChart.setAnimated(false);
    XYChart.Series<String, Number> series1 = new XYChart.Series<>();
    series1.getData().add(new XYChart.Data<>(AUSTRIA, 25601.34));
    series1.getData().add(new XYChart.Data<>(BRAZIL, 20148.82));
    series1.getData().add(new XYChart.Data<>(FRANCE, 10000));
    series1.getData().add(new XYChart.Data<>(ITALY, 35407.15));
    series1.getData().add(new XYChart.Data<>(USA, 12000));
    barChart.getData().add(series1);

    // second chart (overlaid):
    final LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis1);
    lineChart.setLegendVisible(false);
    lineChart.setAnimated(false);
    lineChart.setCreateSymbols(true);
    lineChart.setAlternativeRowFillVisible(false);
    lineChart.setAlternativeColumnFillVisible(false);
    lineChart.setHorizontalGridLinesVisible(false);
    lineChart.setVerticalGridLinesVisible(false);
    lineChart.getXAxis().setVisible(false);
    lineChart.getYAxis().setVisible(false);
    lineChart.getStylesheets().addAll(getClass().getResource("Exemple158.css").toExternalForm());
    XYChart.Series<String, Number> series2 = new XYChart.Series<>();
    int delta = 10000;
    series2.getData().add(new XYChart.Data<>(AUSTRIA, 25601.34 + delta));
    series2.getData().add(new XYChart.Data<>(BRAZIL, 20148.82 + delta));
    series2.getData().add(new XYChart.Data<>(FRANCE, 10000 + delta));
    series2.getData().add(new XYChart.Data<>(ITALY, 35407.15 + delta));
    series2.getData().add(new XYChart.Data<>(USA, 12000 + delta));
    lineChart.getData().add(series2);

    StackPane root = new StackPane();
    root.getChildren().addAll(barChart, lineChart);
    Scene scene = new Scene(root, 800, 600);
    stage.setScene(scene);
    stage.show();
}

public static void main(String[] args) {
    launch(args);
}
}]]></Answer>
<Answer><![CDATA[public class StackedChartSample extends Application {

    final static String austria = "Austria";
    final static String brazil = "Brazil";
    final static String france = "France";
    final static String italy = "Italy";
    final static String usa = "USA";

    @Override
    public void start(Stage stage) {

        final CategoryAxis xAxis = new CategoryAxis();
        final NumberAxis yAxis = new NumberAxis();

        // base chart
        final BarChart<String, Number> barChart = new BarChart<String, Number>(xAxis, yAxis);
        barChart.setLegendVisible(false);
        barChart.setAnimated(false);

        xAxis.setLabel("Country");
        yAxis.setLabel("Value");

        // overlay chart
        LineChart<String, Number> lineChart = new LineChart<String, Number>(xAxis, yAxis);
        lineChart.setLegendVisible(false);
        lineChart.setAnimated(false);
        lineChart.setCreateSymbols(true);
        lineChart.setAlternativeRowFillVisible(false);
        lineChart.setAlternativeColumnFillVisible(false);
        lineChart.setHorizontalGridLinesVisible(false);
        lineChart.setVerticalGridLinesVisible(false);
        lineChart.getXAxis().setVisible(false);
        lineChart.getYAxis().setVisible(false);
        lineChart.getStylesheets().addAll(getClass().getResource("chart.css").toExternalForm());

        barChart.getData().add( createChartSeries());
        lineChart.getData().add( createChartSeries());

        StackPane root = new StackPane();
        root.getChildren().addAll( barChart, lineChart);

        Scene scene = new Scene(root, 800, 600);

        stage.setScene(scene);
        stage.show();
    }

    private XYChart.Series<String,Number> createChartSeries() {

        XYChart.Series<String,Number> series = new XYChart.Series<String,Number>();
        series.getData().add(new XYChart.Data<String,Number>(austria, 25601.34));
        series.getData().add(new XYChart.Data<String,Number>(brazil, 20148.82));
        series.getData().add(new XYChart.Data<String,Number>(france, 10000));
        series.getData().add(new XYChart.Data<String,Number>(italy, 35407.15));
        series.getData().add(new XYChart.Data<String,Number>(usa, 12000));

        return series;
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28782975" questionTitle="TableView cell word wrapping">
<Answer><![CDATA[colObserva.setCellFactory (col -> {
    TableCell<Procedimientos, String> cell = new TableCell<Procedimientos, String>() {
        @Override
        public void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            if (item != null) {
                   Text text = new Text(item);
                   text.setStyle(" -fx-opacity: 1;" +
                                 " -fx-font-family: \"verdena\";" +
                                 " -fx-font-size: 12pt;" +
                                 " -fx-fill: #1398c8;" +   
                                 " -fx-text-wrap: true;" +
                                 " -fx-font-weight: bold;;" +
                                 " -fx-padding: 5px 30px 5px 5px;" +
                                 " -fx-text-alignment:left;");
                   text.setWrappingWidth(col.getPrefWidth() - 35);
                   this.setPrefHeight(text.getLayoutBounds().getHeight()+10);
                   this.setGraphic(text);
            }
        }
    };
    return cell;
});]]></Answer>
<Answer><![CDATA[package com.company;

import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.layout.Region;
import javafx.stage.Stage;

public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        ObservableList<Integer> values = FXCollections.observableArrayList();
        values.addAll(1, 2, 3);


        TableColumn<Integer, Integer> tableColumn = new TableColumn<>("Column1");
        tableColumn.setCellValueFactory(param -> new ReadOnlyObjectWrapper<>(param.getValue()));


        tableColumn.setCellFactory(param -> {
            return new TableCell<Integer, Integer>() {
                @Override
                protected void updateItem(Integer item, boolean empty) {
                    super.updateItem(item, empty);

                    if (item == null) {
                        setText("");
                    } else {
                        setText(item.toString());
                    }
                }
            };
        });


        TableView<Integer> tableView = new TableView<>();
        tableView.setFixedCellSize(Region.USE_COMPUTED_SIZE);
        tableView.getColumns().add(tableColumn);
        tableView.setItems(values);

        tableView.setRowFactory(param -> {
            return new TableRow() {
                @Override
                public void updateIndex(int i) {
                    super.updateIndex(i);

                    setMinHeight(50 * i);
                }
            };
        });

        Scene scene = new Scene(tableView, 320, 480);

        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28755243" questionTitle="CollorAdjust with SwingX's ImageView?">
<Answer><![CDATA[import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.effect.ColorAdjust;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javax.imageio.ImageIO;

public class Test extends Application {

    public static void main(String[] args) {
        Application.launch();
    }

    @Override
    public void start(Stage stage) throws Exception {

        try {
            System.out.println("Load image...");
            BufferedImage imagem = ImageIO.read(new File("..."));
            Image image = SwingFXUtils.toFXImage(imagem, null);

            ColorAdjust colorAdjust = new ColorAdjust();
            colorAdjust.setHue(0);
            colorAdjust.setSaturation(-1);
            colorAdjust.setBrightness(0);
            colorAdjust.setContrast(0);
//          colorAdjust.setHue(-0.05);
//          colorAdjust.setSaturation(0.2);
//          colorAdjust.setBrightness(0.1);
//          colorAdjust.setContrast(0.1);

            ImageView imageView = new ImageView(image);
            imageView.setFitWidth(image.getWidth());
            imageView.setPreserveRatio(true);
            imageView.setEffect(colorAdjust);

            System.out.println("Convert and save...");
            imagem = SwingFXUtils.fromFXImage(imageView.snapshot(null, null), null);
            ImageIO.write(imagem, "png", new File("ColorAdjusted.png"));
        } catch (IOException exp) {
            exp.printStackTrace();
        } finally {
            Platform.exit();
        }
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.SnapshotParameters;
import javafx.scene.effect.ColorAdjust;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;

import javax.swing.SwingUtilities;
import java.awt.image.BufferedImage;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

/** Uses JavaFX to adjust the color of an AWT/Swing BufferedImage */
public class ColorAdjuster {
    // Instantiation of a JFXPanel is necessary otherwise the JavaFX toolkit is not initialized.
    // The JFXPanel doesn't actually need to be used, instantiating it in the constructor is enough to trigger toolkit initialization.
    private final JFXPanel fxPanel;

    public ColorAdjuster() {
        // perhaps this check is not necessary, but I feel a bit more comfortable if it is there.
        if (!SwingUtilities.isEventDispatchThread()) {
            throw new IllegalArgumentException(
                    "A ColorAdjuster must be created on the Swing Event Dispatch thread.  " +
                            "Current thread is " + Thread.currentThread()
            );
        }

        fxPanel = new JFXPanel();
    }

    /** 
     * Color adjustments to the buffered image are performed with parameters in the range -1.0 to 1.0
     * 
     * @return a new BufferedImage which has colors adjusted from the original image.
     **/
    public BufferedImage adjustColor(
            BufferedImage originalImage,
            double hue,
            double saturation,
            double brightness,
            double contrast
    ) throws ExecutionException, InterruptedException {
        // This task will be executed on the JavaFX thread.
        FutureTask<BufferedImage> conversionTask = new FutureTask<>(() -> {
            // create a JavaFX color adjust effect.
            final ColorAdjust monochrome = new ColorAdjust(0, -1, 0, 0);

            // convert the input buffered image to a JavaFX image and load it into a JavaFX ImageView.
            final ImageView imageView = new ImageView(
                    SwingFXUtils.toFXImage(
                            originalImage, null
                    )
            );

            // apply the color adjustment.
            imageView.setEffect(monochrome);

            // snapshot the color adjusted JavaFX image, convert it back to a Swing buffered image and return it.
            SnapshotParameters snapshotParameters = new SnapshotParameters();
            snapshotParameters.setFill(Color.TRANSPARENT);

            return SwingFXUtils.fromFXImage(
                    imageView.snapshot(
                            snapshotParameters,
                            null
                    ),
                    null
            );
        });

        Platform.runLater(conversionTask);

        return conversionTask.get();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28749737" questionTitle="JavaFX key interruptions?">
<Answer><![CDATA[import java.util.LinkedList;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.beans.property.LongProperty;
import javafx.beans.property.SimpleLongProperty;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class KeyStackExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        Rectangle rect = new Rectangle(50, 50, 100, 50);
        rect.setFill(Color.SALMON);

        Pane pane = new Pane(rect);
        Scene scene = new Scene(pane, 800, 600);

        final double rectangleHSpeed = 100 ; // pixels per second
        final double rectangleVSpeed = 100 ;
        final double minX = 0 ;
        final double maxX = 800 ; 
        final double minY = 0 ;
        final double maxY = 600 ;

        final LinkedList<KeyCode> keyStack = new LinkedList<>();
        scene.setOnKeyPressed(event -> {
            KeyCode code = event.getCode();
            if (! keyStack.contains(code)) {
                keyStack.push(code); 
            }
        });

        scene.setOnKeyReleased(event -> 
            keyStack.remove(event.getCode()));


        final LongProperty lastUpdateTime = new SimpleLongProperty();
        final AnimationTimer rectangleAnimation = new AnimationTimer() {
          @Override
          public void handle(long timestamp) {
            if (! keyStack.isEmpty() && lastUpdateTime.get() > 0) {
              final double elapsedSeconds = (timestamp - lastUpdateTime.get()) / 1_000_000_000.0 ;
              double deltaX = 0 ;
              double deltaY = 0 ;
              switch(keyStack.peek()) {
              case UP:
                  deltaY = -rectangleVSpeed * elapsedSeconds;
                  break ;
              case DOWN: 
                  deltaY = rectangleVSpeed * elapsedSeconds ;
                  break ;
              case LEFT:
                  deltaX = -rectangleHSpeed * elapsedSeconds ;
                  break ;
              case RIGHT:
                  deltaX = rectangleHSpeed * elapsedSeconds ;
              default:
                  break ;
              }
              double oldX = rect.getTranslateX() ;
              double oldY = rect.getTranslateY() ;
              rect.setTranslateX(clamp(oldX + deltaX, minX, maxX));
              rect.setTranslateY(clamp(oldY + deltaY, minY, maxY));
            }
            lastUpdateTime.set(timestamp);
          }
        };
        rectangleAnimation.start();

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private double clamp(double value, double min, double max) {
        return Math.max(min, Math.min(max, value));
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableSet;
import javafx.collections.SetChangeListener;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class KeyTest extends Application {

    @Override
    public void start(Stage primaryStage) {
        ObservableSet<KeyCode> downKeys = FXCollections.observableSet();

        Circle circle = new Circle(10);
        Pane root = new Pane(circle);
        Scene scene = new Scene(root, 500, 500);

        scene.setOnKeyPressed(evt->{
            downKeys.add(evt.getCode());
        });

        scene.setOnKeyReleased(evt->{
            downKeys.remove(evt.getCode());
        });


        Timeline timer = new Timeline(new KeyFrame(
            javafx.util.Duration.millis(16), ae -> {
                downKeys.stream().parallel().forEach(kc -> {
                    Platform.runLater(() -> {//why?
                        switch(kc){
                            case UP: circle.setTranslateY(circle.getTranslateY()-2);
                                break;
                            case DOWN: circle.setTranslateY(circle.getTranslateY()+2);
                                break;
                            case LEFT: circle.setTranslateX(circle.getTranslateX()-2);
                                break;
                            case RIGHT: circle.setTranslateX(circle.getTranslateX()+2);
                                break;
                        }
                    });
                });
            }));
        timer.setCycleCount(Animation.INDEFINITE);
        timer.play();

        //I think this might be faster
        downKeys.addListener((SetChangeListener.Change<? extends KeyCode> change) -> {
            if (change.wasAdded()){
                System.out.println("start action "+change.getElementAdded());
            }
            if (change.wasRemoved()){
                System.out.println("stop action "+change.getElementRemoved());
            }
        });

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28738936" questionTitle="Java Generic Advanced Usage">
<Answer><![CDATA[private static <T> T fun(Map<T, T> map, Function<Map<T, T>, T> finder) {
    return finder.apply(map);
}

public static void main(String[] args) {
    Map<Integer, Integer> map1 = new HashMap<>();
    map1.put(1, 2);
    map1.put(3, 4);
    map1.put(5, 7);
    map1.put(2, 2);
    map1.put(8, 8);
    Integer n = fun(map1, Test::findSelfReference);

    String a = String.valueOf(n + 1);
    Map<String, String> map2 = new HashMap<>();
    map2.put("1", "2");
    map2.put("3", "4");
    map2.put("5", "7");
    map2.put("3", a);
    String s = fun(map2, Test::findSelfReference2);

    System.out.println(n);
    System.out.println(s);
}]]></Answer>
<Answer><![CDATA[private static <T> T fun(Function<Map<T, T>, T> finder, Map<T, T> map) {
    return finder.apply(map);
}

private static Map<String, String> getStringMap(Integer n) {
    String a = String.valueOf(n + 1);
    Map<String, String> map2 = new HashMap<>();
    map2.put("1", "2");
    map2.put("3", "4");
    map2.put("5", "7");
    map2.put("3", a);
    return map2;
}

private static Map<Integer, Integer> getIntMap() {
    Map<Integer, Integer> map1 = new HashMap<>();
    map1.put(1, 2);
    map1.put(3, 4);
    map1.put(5, 7);
    map1.put(2, 2);
    map1.put(8, 8);
    return map1;
}

public static void main(String[] args) {
    fun(Test::findSelfReference, getIntMap());
    fun(Test::findSelfReference, getStringMap(1));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28717343" questionTitle="JavaFX: create a vertical menu ribbon">
<Answer><![CDATA[import java.util.stream.Collectors;
import java.util.stream.Stream;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.MenuButton;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class WordLikeMenuButton extends Application {

    @Override
    public void start(Stage primaryStage) {
        MenuButton menuButton = new MenuButton();
        menuButton.getItems().addAll(
                Stream.of("Info", "New", "Open", "Save", "Save As", "Print", "Share", "Export", "Close")
                    .map(MenuItem::new).collect(Collectors.toList()));
        BorderPane root = new BorderPane(null, menuButton, null, null, null);
        Scene scene = new Scene(root, 350, 75);
        scene.getStylesheets().add("word-like-menu-button.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class Jfxdemos extends Application {

    @Override
    public void start(Stage primaryStage) {
        Button btn = new Button();
        btn.setText("File");

        final StackPane root = new StackPane();
        AnchorPane editorRoot = new AnchorPane();
        editorRoot.getChildren().add(btn);
        root.getChildren().add(editorRoot);

        Scene scene = new Scene(root, 300, 250);
        scene.getStylesheets().add("/jfxdemos/styles.css");

        primaryStage.setScene(scene);
        primaryStage.show();

        HBox fileRoot = new HBox();
        VBox menu = new VBox();
        menu.setStyle("-fx-background-color: blue;");
        menu.setFillWidth(true);
        Button backBtn = new Button("Left Arrow");
        backBtn.setPrefWidth(100);
        backBtn.getStyleClass().add("custom-menu-button");
        backBtn.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle(ActionEvent event) {
                FadeTransition hideFileRootTransition = new FadeTransition(Duration.millis(500), fileRoot);
                hideFileRootTransition.setFromValue(1.0);
                hideFileRootTransition.setToValue(0.0);

                FadeTransition showEditorRootTransition = new FadeTransition(Duration.millis(500), editorRoot);
                showEditorRootTransition.setFromValue(0.0);
                showEditorRootTransition.setToValue(1.0);

                showEditorRootTransition.play();
                hideFileRootTransition.play();
                root.getChildren().remove(fileRoot);
            }
        });
        Button infoBtn = new Button("Info");
        infoBtn.setPrefWidth(100);
        infoBtn.getStyleClass().add("custom-menu-button");
        Button newBtn = new Button("New");
        newBtn.setPrefWidth(100);
        newBtn.getStyleClass().add("custom-menu-button");
        Button openBtn = new Button("Open");
        openBtn.setPrefWidth(100);
        openBtn.getStyleClass().add("custom-menu-button");
        menu.getChildren().addAll(backBtn,infoBtn, newBtn, openBtn);
        VBox.setVgrow(infoBtn, Priority.ALWAYS);
        fileRoot.getChildren().add(menu);

        btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                root.getChildren().add(fileRoot);
                FadeTransition hideEditorRootTransition = new FadeTransition(Duration.millis(500), editorRoot);
                hideEditorRootTransition.setFromValue(1.0);
                hideEditorRootTransition.setToValue(0.0);

                FadeTransition showFileRootTransition = new FadeTransition(Duration.millis(500), fileRoot);
                showFileRootTransition.setFromValue(0.0);
                showFileRootTransition.setToValue(1.0);
                hideEditorRootTransition.play();
                showFileRootTransition.play();
            }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28706676" questionTitle="Select ListView items only by left-clicking them">
<Answer><![CDATA[public class ListViewSample extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("List View Sample");        

        ListView<String> list = new ListView<String>();
        ObservableList<String> items =FXCollections.observableArrayList ( "Single", "Double", "Suite", "Family App");
        list.setItems(items);    

        // filter right mouse button
        list.addEventFilter(MouseEvent.MOUSE_PRESSED, e -> 
        {
            if( e.isSecondaryButtonDown()) {
                e.consume();
            }

        });

        list.addEventFilter(ContextMenuEvent.CONTEXT_MENU_REQUESTED, Event::consume);

        // verify selection via logging
        list.getSelectionModel().selectedItemProperty().addListener(
                (ChangeListener<String>) (observable, oldValue, newValue) -> System.out.println( "Item selected: " + observable + ", " + oldValue + ", " + newValue)
                );

        StackPane root = new StackPane();
        root.getChildren().add(list);
        primaryStage.setScene(new Scene(root, 200, 250));
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[public class Listv extends ListView<String>{
ListView<String> llist=new ListView<String>();
int PrevIndex=0;

public Listv(ListView<String> l) {
    this.llist=l;
    llist.getItems().add("A");
    llist.getItems().add("A");
    llist.getItems().add("A");
    llist.getItems().add("A");
    this.llist.setOnMouseClicked(listclicked);
    this.llist.getSelectionModel().selectedIndexProperty().addListener(indexChanged);
}

EventHandler<MouseEvent> listclicked=new EventHandler<MouseEvent>() {       
    @Override
    public void handle(MouseEvent event) {
        if( event.getButton() == MouseButton.SECONDARY)
        {               
            Platform.runLater(()->{
                llist.getSelectionModel().select(PrevIndex);
            });          
        }
    }
};

ChangeListener<Object> indexChanged=new  ChangeListener<Object>() {

    @Override
    public void changed(ObservableValue<? extends Object> observable,Object oldValue, Object newValue) {
        PrevIndex=Integer.parseInt(oldValue.toString());
    }
};
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28652149" questionTitle="RotateTransition around a pivot?">
<Answer><![CDATA[public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        Group root = new Group();
        primaryStage.setScene(new Scene(root, 140, 140));

        Rectangle rect = new Rectangle(1, 1, 40, 40);

        // comment movePivot to get the default rotation
        movePivot(rect, -20, -20);

        RotateTransition rt = new RotateTransition(Duration.seconds(4),rect);
        rt.setToAngle(720);
        rt.setCycleCount(Timeline.INDEFINITE);
            rt.setAutoReverse(true);
        rt.play();

        primaryStage.show();
    }

    // this is the function you want
    private void movePivot(Node node, double x, double y){
        node.getTransforms().add(new Translate(-x,-y));
        node.setTranslateX(x); node.setTranslateY(y);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class RotateLineAboutEnd extends Application {

    @Override
    public void start(Stage primaryStage) {
        Line line = new Line(200, 200, 200, 350);
        Pane pane = new Pane(line);
        Rotate rotation = new Rotate();
        rotation.pivotXProperty().bind(line.startXProperty());
        rotation.pivotYProperty().bind(line.startYProperty());

        line.getTransforms().add(rotation);

        Timeline timeline = new Timeline(
                new KeyFrame(Duration.ZERO, new KeyValue(rotation.angleProperty(), 0)),
                new KeyFrame(Duration.seconds(1), new KeyValue(rotation.angleProperty(), 360)));

        Button button = new Button("Rotate");
        button.setOnAction(evt -> timeline.play());
        button.disableProperty().bind(timeline.statusProperty().isEqualTo(Animation.Status.RUNNING));

        HBox controls = new HBox(button);
        controls.setAlignment(Pos.CENTER);
        controls.setPadding(new Insets(12));

        BorderPane root = new BorderPane(pane, null, null, controls, null);
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28632657" questionTitle="JavaFX - scroll a scrollPane while button pressed">
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class ScrollWhileButtonDown extends Application {

    @Override
    public void start(Stage primaryStage) {
        ScrollPane scroller = new ScrollPane();
        Pane pane = new Pane();
        pane.setMinHeight(1000);
        scroller.setContent(pane);

        Button upButton = new Button("Up");
        Button downButton = new Button("Down");

        HBox controls = new HBox(10, upButton, downButton);
        controls.setPadding(new Insets(10));
        controls.setAlignment(Pos.CENTER);

        Scene scene = new Scene(new BorderPane(scroller, null, null, controls, null), 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();

        final double scrollSpeed = 0.5 ; // scrollpane units per second

        AnimationTimer timer = new AnimationTimer() {

            private long lastUpdate = 0 ;
            @Override
            public void handle(long time) {
                if (lastUpdate > 0) {
                    long elapsedNanos = time - lastUpdate ;
                    double elapsedSeconds = elapsedNanos / 1_000_000_000.0 ;
                    double delta = 0 ;
                    if (upButton.isArmed()) {
                        delta = -scrollSpeed * elapsedSeconds ;
                    }
                    if (downButton.isArmed()) {
                        delta = scrollSpeed * elapsedSeconds ;
                    }
                    double newValue = 
                            clamp(scroller.getVvalue() + delta, scroller.getVmin(), scroller.getVmax());
                    scroller.setVvalue(newValue);
                }
                lastUpdate = time ;
            }
        };

        timer.start();
    }

    private double clamp(double value, double min, double max) {
        return Math.min(max, Math.max(min, value));
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import static org.reactfx.EventStreams.*;
import static org.reactfx.util.Tuples.*;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

import org.reactfx.EventStream;

public class ScrollWhileButtonDown extends Application {

    private static enum BTN { UP, DOWN, NONE }

    private static final double scrollSpeed = 0.5 ; // scrollpane units per second

    @Override
    public void start(Stage primaryStage) {
        ScrollPane scroller = new ScrollPane();
        Pane pane = new Pane();
        pane.setMinHeight(1000);
        scroller.setContent(pane);

        Button upButton = new Button("Up");
        Button downButton = new Button("Down");

        HBox controls = new HBox(10, upButton, downButton);
        controls.setPadding(new Insets(10));
        controls.setAlignment(Pos.CENTER);

        Scene scene = new Scene(new BorderPane(scroller, null, null, controls, null), 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();

        EventStream<BTN> armedButtons = merge(
                valuesOf(upButton  .armedProperty()).map(armed -> armed ? BTN.UP   : BTN.NONE),
                valuesOf(downButton.armedProperty()).map(armed -> armed ? BTN.DOWN : BTN.NONE));

        EventStream<Double> deltas = armedButtons.flatMap(btn -> {
            switch(btn) {
                case UP:   return elapsedSeconds().map(sec -> sec * -scrollSpeed);
                case DOWN: return elapsedSeconds().map(sec -> sec *  scrollSpeed);
                default:   return never();
            }
        });

        deltas.subscribe(delta -> scroller.setVvalue(scroller.getVvalue() + delta));
    }

    private static EventStream<Double> elapsedSeconds() {
        return animationTicks()
                .accumulate(t(0L, -1L), (state, now) -> state.map((d, last) -> {
                        return t(last == -1L ? 0L : now - last, now);
                }))
                .map(t -> t._1 / 1_000_000_000.0);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28606197" questionTitle="Spring Data Cassandra LocalDateTime Conversion">
<Answer><![CDATA[@Configuration
public class ConversionConfiguration {

    @Bean
    public ConversionService getConversionService() {
        ConversionServiceFactoryBean bean = new ConversionServiceFactoryBean();
        bean.setConverters(getConverters());
        bean.afterPropertiesSet();
        ConversionService object = bean.getObject();
        return object;
    }

    private Set<Converter> getConverters() {
        Set<Converter> converters = new HashSet<Converter>();

        converters.add(new DateToLocalDateTimeConverter());
        converters.add(new LocalDateTimeToDateConverter());
        converters.add(new DateToLocalDateConverter());
        converters.add(new LocalDateToDateConverter());

        return converters;
    }
}]]></Answer>
<Answer><![CDATA[import org.springframework.data.convert.Jsr310Converters;

...    

@Bean
public ConversionService getConversionService() {
    // creates DefaultConversionService
    ConversionServiceFactoryBean bean = new ConversionServiceFactoryBean();
    bean.setConverters(new HashSet<>(getConverters()));
    bean.afterPropertiesSet();
    ConversionService service = bean.getObject();
    return service;
}

private Set<Converter<?, ?>> getConverters() {
    Set<Converter<?,?>> converters = new HashSet<Converter<?,?>>();
    converters.addAll(Jsr310Converters.getConvertersToRegister());
    converters.add(new TimeWriteConverter());
    converters.add(new TimeReadConverter());

    return converters;
}

public static class TimeWriteConverter implements Converter<LocalDateTime, Long> {
    @Override
    public Long convert(LocalDateTime source) {
        return source.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
    }
}
public static class TimeReadConverter implements Converter<Long, LocalDateTime> {
    @Override
    public LocalDateTime convert(Long source) {
        return LocalDateTime.ofInstant(Instant.ofEpochMilli(source), ZoneId.systemDefault());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28560561" questionTitle="Tooltip on Live LineChart">
<Answer><![CDATA[ObjectProperty<Point2D> mouseLocationInScene = new SimpleObjectProperty<>();

    Tooltip tooltip = new Tooltip();

    sc.addEventHandler(MouseEvent.MOUSE_MOVED, evt -> {
        if (! tooltip.isShowing()) {
            mouseLocationInScene.set(new Point2D(evt.getSceneX(), evt.getSceneY()));
        }
    });

    tooltip.textProperty().bind(Bindings.createStringBinding(() -> {
        if (mouseLocationInScene.isNull().get()) {
            return "" ;
        }
        double xInXAxis = xAxis.sceneToLocal(mouseLocationInScene.get()).getX() ;
        double x = xAxis.getValueForDisplay(xInXAxis).doubleValue();
        double yInYAxis = yAxis.sceneToLocal(mouseLocationInScene.get()).getY() ;
        double y = yAxis.getValueForDisplay(yInYAxis).doubleValue() ;
        return String.format("[%.3f, %.3f]", x, y);
    }, mouseLocationInScene, xAxis.lowerBoundProperty(), xAxis.upperBoundProperty(),
    yAxis.lowerBoundProperty(), yAxis.upperBoundProperty()));

    Tooltip.install(sc, tooltip);]]></Answer>
<Answer><![CDATA[public class ToolTipOnChartSeries extends Application {

    private static final Object MOUSE_TRIGGER_LOCATION = "tooltip-last-location";

    private ObservableList<XYChart.Series<String, Double>> getChartData() {
        double javaValue = 17.56;
        ObservableList<XYChart.Series<String, Double>> answer = FXCollections.observableArrayList();
        Series<String, Double> java = new Series<String, Double>();
        java.setName("java");
        Tooltip t = new Tooltip();
        t.setOnShowing(e -> {
            Point2D screen = (Point2D) t.getProperties().get(MOUSE_TRIGGER_LOCATION);
            if (screen == null) return;
            XYChart chart = java.getChart();
            double localX = chart.getXAxis().screenToLocal(screen).getX();
            double localY = chart.getYAxis().screenToLocal(screen).getY();
            Object xValue = chart.getXAxis().getValueForDisplay(localX);
            Object yValue = chart.getYAxis().getValueForDisplay(localY);
            t.textProperty().set("x/y: " + t.getX() + " / " + t.getY() 
                    + "\n localX " + localX + "/" + xValue 
                    + "\n localY " + localY + "/" + yValue 

                    );
        });
        java.nodeProperty().addListener(new ChangeListener<Node>()
        { 
            @Override
            public void changed(ObservableValue<? extends Node> arg0, Node arg1,
                Node node)
            {
                Tooltip.install(node, t);
                node.setOnMouseMoved(e -> {
                    Point2D screen = new Point2D(e.getScreenX(), e.getScreenY());
                    t.getProperties().put(MOUSE_TRIGGER_LOCATION, screen);
                });
                java.nodeProperty().removeListener(this);
            }
        });
        for (int i = 2011; i < 2021; i++) {
            // adding a tooltip to the data node
            final XYChart.Data data = new XYChart.Data(Integer.toString(i), javaValue);
            java.getData().add(data);
            javaValue = javaValue + Math.random() - .5;
        }
        answer.addAll(java); //, c, cpp);
        return answer;
    }

    @Override
    public void start(Stage primaryStage) {
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        LineChart lineChart = new LineChart(xAxis, yAxis);
        lineChart.setCreateSymbols(false);
        lineChart.setData(getChartData());
        lineChart.setTitle("speculations");
        primaryStage.setTitle("LineChart example");

        StackPane root = new StackPane();
        root.getChildren().add(lineChart);
        primaryStage.setScene(new Scene(root)); //, 400, 250));
        primaryStage.setTitle(FXUtils.version());
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger.getLogger(ToolTipOnChartSeries.class
            .getName());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28493097" questionTitle="Is there any Date and Time picker available for javaFx?">
<Answer><![CDATA[public class DateTimePicker extends DatePicker {
    public static final String DefaultFormat = "yyyy-MM-dd HH:mm";

    private DateTimeFormatter formatter;
    private ObjectProperty<LocalDateTime> dateTimeValue = new SimpleObjectProperty<>(LocalDateTime.now());
    private ObjectProperty<String> format = new SimpleObjectProperty<String>() {
        public void set(String newValue) {
            super.set(newValue);
            formatter = DateTimeFormatter.ofPattern(newValue);
        }
    };

    public DateTimePicker() {
        getStyleClass().add("datetime-picker");
        setFormat(DefaultFormat);
        setConverter(new InternalConverter());

        // Syncronize changes to the underlying date value back to the dateTimeValue
        valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                dateTimeValue.set(null);
            } else {
                if (dateTimeValue.get() == null) {
                    dateTimeValue.set(LocalDateTime.of(newValue, LocalTime.now()));
                } else {
                    LocalTime time = dateTimeValue.get().toLocalTime();
                    dateTimeValue.set(LocalDateTime.of(newValue, time));
                }
            }
        });

        // Syncronize changes to dateTimeValue back to the underlying date value
        dateTimeValue.addListener((observable, oldValue, newValue) -> {
            setValue(newValue == null ? null : newValue.toLocalDate());
        });

        // Persist changes onblur
        getEditor().focusedProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue)
                simulateEnterPressed();
        });

    }

    private void simulateEnterPressed() {
        getEditor().fireEvent(new KeyEvent(getEditor(), getEditor(), KeyEvent.KEY_PRESSED, null, null, KeyCode.ENTER, false, false, false, false));
    }

    public LocalDateTime getDateTimeValue() {
        return dateTimeValue.get();
    }

    public void setDateTimeValue(LocalDateTime dateTimeValue) {
        if(dateTimeValue.isAfter(LocalDateTime.of(1971, 6, 30, 12, 00)))
            this.dateTimeValue.set(dateTimeValue);
        else
            this.dateTimeValue.set(null);
    }

    public ObjectProperty<LocalDateTime> dateTimeValueProperty() {
        return dateTimeValue;
    }

    public String getFormat() {
        return format.get();
    }

    public ObjectProperty<String> formatProperty() {
        return format;
    }

    public void setFormat(String format) {
        this.format.set(format);
    }

class InternalConverter extends StringConverter<LocalDate> {
    public String toString(LocalDate object) {

        LocalDateTime value = getDateTimeValue();
        return (value != null) ? value.format(formatter) : "";
    }

    public LocalDate fromString(String value) {
        if (value == null) {
            dateTimeValue.set(null);
            return null;
        }

        dateTimeValue.set(LocalDateTime.parse(value, formatter));
        return dateTimeValue.get().toLocalDate();
        }
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    CalendarPicker dateTime = new CalendarPicker();
    dateTime.withCalendar(Calendar.getInstance());
    dateTime.withShowTime(Boolean.TRUE);
    dateTime.withLocale(Locale.ENGLISH);
    dateTime.calendarProperty().addListener(new ChangeListener<Calendar>() {

        @Override
        public void changed(ObservableValue<? extends Calendar> ov, Calendar t, Calendar t1) {
            System.out.println("Selected date: "+t1.getTime().toString());
        }
    });
    StackPane root = new StackPane();
    root.getChildren().add(dateTime);

    Scene scene = new Scene(root, 300, 250);
    primaryStage.setTitle("Date & Time from JFXtras 2.2");
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.SimpleObjectProperty
import javafx.scene.control.DatePicker
import javafx.scene.input.KeyCode
import javafx.scene.input.KeyEvent
import javafx.scene.input.MouseEvent
import javafx.util.StringConverter
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.format.DateTimeFormatter

class DateTimePicker(val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")) : DatePicker() {
    private var dateTimeValue = SimpleObjectProperty<LocalDateTime>(LocalDateTime.now())

    init {
        converter = object : StringConverter<LocalDate>() {
            override fun toString(value: LocalDate?): String {
                return if (dateTimeValue.get() != null) dateTimeValue.get().format(formatter) else ""
            }

            override fun fromString(value: String?): LocalDate? {
                if (value == null) {
                    dateTimeValue.set(null)
                    return null
                }

                dateTimeValue.set(LocalDateTime.parse(value, formatter))
                return dateTimeValue.get().toLocalDate()
            }
        }

        // Syncronize changes to the underlying date value back to the dateTimeValue
        valueProperty().addListener { observable, old, new ->
            if (new == null) {
                dateTimeValue.set(null)
            } else {
                if (dateTimeValue.get() == null) {
                    dateTimeValue.set(LocalDateTime.of(new, LocalTime.now()))
                } else {
                    val time = dateTimeValue.get().toLocalTime()
                    dateTimeValue.set(LocalDateTime.of(new, time))
                }
            }
        }

        // Syncronize changes to dateTimeValue back to the underlying date value
        dateTimeValue.addListener { observable, old, new ->
            valueProperty().set(new?.toLocalDate())
        }

        // Persist changes onblur
        editor.focusedProperty().addListener { observable, old, new ->
            if (!new)
                simulateEnterPressed()
        }

    }

    private fun simulateEnterPressed() =
        editor.fireEvent(KeyEvent(editor, editor, KeyEvent.KEY_PRESSED, null, null, KeyCode.ENTER, false, false, false, false))

    fun dateTimeValueProperty() = dateTimeValue;
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.control.DatePicker;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.util.StringConverter;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 * A DateTimePicker with configurable datetime format where both date and time can be changed
 * via the text field and the date can additionally be changed via the JavaFX default date picker.
 */
@SuppressWarnings("unused")
public class DateTimePicker extends DatePicker {
    public static final String DefaultFormat = "yyyy-MM-dd HH:mm";

    private DateTimeFormatter formatter;
    private ObjectProperty<LocalDateTime> dateTimeValue = new SimpleObjectProperty<>(LocalDateTime.now());
    private ObjectProperty<String> format = new SimpleObjectProperty<String>() {
        public void set(String newValue) {
            super.set(newValue);
            formatter = DateTimeFormatter.ofPattern(newValue);
        }
    };

    public DateTimePicker() {
        getStyleClass().add("datetime-picker");
        setFormat(DefaultFormat);
        setConverter(new InternalConverter());

        // Syncronize changes to the underlying date value back to the dateTimeValue
        valueProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                dateTimeValue.set(null);
            } else {
                if (dateTimeValue.get() == null) {
                    dateTimeValue.set(LocalDateTime.of(newValue, LocalTime.now()));
                } else {
                    LocalTime time = dateTimeValue.get().toLocalTime();
                    dateTimeValue.set(LocalDateTime.of(newValue, time));
                }
            }
        });

        // Syncronize changes to dateTimeValue back to the underlying date value
        dateTimeValue.addListener((observable, oldValue, newValue) -> {
            setValue(newValue == null ? null : newValue.toLocalDate());
        });

        // Persist changes onblur
        getEditor().focusedProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue)
                simulateEnterPressed();
        });

    }

    private void simulateEnterPressed() {
        getEditor().fireEvent(new KeyEvent(getEditor(), getEditor(), KeyEvent.KEY_PRESSED, null, null, KeyCode.ENTER, false, false, false, false));
    }

    public LocalDateTime getDateTimeValue() {
        return dateTimeValue.get();
    }

    public void setDateTimeValue(LocalDateTime dateTimeValue) {
        this.dateTimeValue.set(dateTimeValue);
    }

    public ObjectProperty<LocalDateTime> dateTimeValueProperty() {
        return dateTimeValue;
    }

    public String getFormat() {
        return format.get();
    }

    public ObjectProperty<String> formatProperty() {
        return format;
    }

    public void setFormat(String format) {
        this.format.set(format);
    }

    class InternalConverter extends StringConverter<LocalDate> {
        public String toString(LocalDate object) {
            LocalDateTime value = getDateTimeValue();
            return (value != null) ? value.format(formatter) : "";
        }

        public LocalDate fromString(String value) {
            if (value == null) {
                dateTimeValue.set(null);
                return null;
            }

            dateTimeValue.set(LocalDateTime.parse(value, formatter));
            return dateTimeValue.get().toLocalDate();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28438856" questionTitle="how to avoid duplicates and count the list once stored in LinkedHashMap">
<Answer><![CDATA[public static void main(String[] args) {

    LinkedHashMap<Long, String> myApps = new LinkedHashMap<Long, String>();
    myApps.put(4L, "A");
    myApps.put(14L, "B");
    myApps.put(44L, "A");
    myApps.put(54L, "B");
    myApps.put(46L, "A");
    myApps.put(543L, "B");
    myApps.put(144L, "C");

    ArrayList<String> names = new ArrayList<String>();

    for (Map.Entry app : myApps.entrySet()) {

        if (!(names.contains(app.getValue()))) {
            names.add(app.getValue().toString());
        }
    }

    System.out.println(names.size());
    for (String s : names ) {
        System.out.print(s + " ");
    }
}]]></Answer>
<Answer><![CDATA[LinkedHashMap<Long,MyApplicationDTO> myApps = (LinkedHashMap<Long,MyApplicationDTO>) request.getAttribute("data");
for (Map.Entry app : myApps.entrySet()) {                  
Long  ID = (Long)app.getKey() ;
MyApplicationDTO singleMyApp =  (MyApplicationDTO) app.getValue();

LinkedHashMap<Long, MyDTO> myList  = singleMyApp.getMyList();
String name = "";
Set<String> uniqueNames = new HashSet<String>();
for (Map.Entry details : myList.entrySet()) {      
     Long id1 = (Long)details.getKey() ;
     MyDTO myDetails =  (MyDTO) details.getValue();

     name = myDetails.getName(); // For first time it stores A
       //how to loop so that i can only get the count of names as 3 by avoiding duplicate names from the below shown list.
            //A B A B A B C
     uniqueNames.add(name);

}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28420099" questionTitle="How do I map a List of Maps in Hibernate using annotations?">
<Answer><![CDATA[@Entity
@Table(name = "PERSON")
public class Person {
    @Id
    @GeneratedValue
    private long id;

    @OneToMany(mappedBy = "person")
    @OrderBy(clause=trip_no)
    private List<Trip> trips; 
}

@Entity
@Table(name = "TRIP")
public class Trip {
    @Id
    @GeneratedValue
    private long id;

    @Column(name = "PERSON_ID")
    private Person person;

    @Column(name = "TRIP_NO")
    private int trip_no;

    @OneToMany(mappedBy = "trip")
    @MapKey(name = "state")
    private Map<String,Destination> destinations
}

@Entity
@Table(name = "DESTINATION")
public class Destination {

    private Trip trip;

    @Column(name = "STATE")
    private String state;

    ...
}]]></Answer>
<Answer><![CDATA[Person person1 = new Person();
Person person2 = new Person();

Trip mn1Trip1 = new Trip("MN", 1, person1);
Trip wi1Trip1 = new Trip("WI", 1, person1);
Trip nd2Trip1 = new Trip("ND", 2, person1);
Trip mt2Trip1 = new Trip("MT", 2, person1);
Trip ia1Trip2 = new Trip("IA", 1, person2);
// more than one trip by a person goes to the same state
Trip mn2Trip1 = new Trip("MN", 2, person1);
Trip ia2Trip2 = new Trip("IA", 2, person2);
Trip mn1Trip2 = new Trip("MN", 1, person2);

person1.setTrips(Arrays.asList(mn1Trip1, wi1Trip1, nd2Trip1, mt2Trip1, mn2Trip1));
person2.setTrips(Arrays.asList(ia1Trip2, ia2Trip2, mn1Trip2));

em.getTransaction().begin();
em.persist(person1);
em.persist(person2);
em.getTransaction().commit();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28417262" questionTitle="Java 8 Supplier &amp; Consumer explanation for the layperson">
<Answer><![CDATA[package com.java.java8;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

/**
 * The Class ConsumerDemo.
 *
 * @author Ankit Sood Apr 20, 2017
 */
public class ConsumerDemo {

    /**
     * The main method.
     *
     * @param args
     *            the arguments
     */
    public static void main(String[] args) {

    List<String> str = new ArrayList<>();
    str.add("DEMO");
    str.add("DEMO2");
    str.add("DEMO3");

    /* Consumer is use for iterate over the List */
    Consumer<String> consumer = new Consumer<String>() {
        @Override
        public void accept(String t) {

        /* Print list element on consile */
        System.out.println(t);
        }
    };

    str.forEach(consumer);

    }

}]]></Answer>
<Answer><![CDATA[import java.util.function.Supplier;
import java.util.function.Consumer;

public class SupplierConsumerExample {
  public static void main(String[] args) {


    Supplier<String> supplier = () -> {
      return "s1";
    };
    String s1 = supplier.get();
    System.out.println(s1); // output: "s1"


    Consumer<String> consumer = (c) -> {
      System.out.println(c); // output: "c1", "c2"
    };
    consumer.accept("c1");
    consumer.accept("c2");


  }    
}]]></Answer>
<Answer><![CDATA[public class SupplierExample {

    public static void main(String[] args) {

        // Imagine a class Calculate with some methods
        Double result1 = timeMe(Calculate::doHeavyComputation);
        Double result2 = timeMe(Calculate::doMoreComputation);
    }
    private static Double timeMe(Supplier<Double> code) {

        Instant start = Instant.now();
        // Supplier method .get() just invokes whatever it is passed
        Double result = code.get();
        Instant end = Instant.now();

        Duration elapsed = Duration.between(start,end);
        System.out.println("Computation took:" + elapsed.toMillis());

        return result;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28400408" questionTitle="What is the new way of getting all methods of a class, including inherited default methods of Java 8?">
<Answer><![CDATA[public static Collection<Method> getAllMethods(Class clazz,
                boolean includeAllPackageAndPrivateMethodsOfSuperclasses,
                boolean includeOverridenAndHidden) {

    Predicate<Method> include = m -> !m.isBridge() && !m.isSynthetic() &&
         Character.isJavaIdentifierStart(m.getName().charAt(0))
      && m.getName().chars().skip(1).allMatch(Character::isJavaIdentifierPart);

    Set<Method> methods = new LinkedHashSet<>();
    Collections.addAll(methods, clazz.getMethods());
    methods.removeIf(include.negate());
    Stream.of(clazz.getDeclaredMethods()).filter(include).forEach(methods::add);

    final int access=Modifier.PUBLIC|Modifier.PROTECTED|Modifier.PRIVATE;

    Package p = clazz.getPackage();
    if(!includeAllPackageAndPrivateMethodsOfSuperclasses) {
        int pass = includeOverridenAndHidden?
            Modifier.PUBLIC|Modifier.PROTECTED: Modifier.PROTECTED;
        include = include.and(m -> { int mod = m.getModifiers();
            return (mod&pass)!=0
                || (mod&access)==0 && m.getDeclaringClass().getPackage()==p;
        });
    }
    if(!includeOverridenAndHidden) {
        Map<Object,Set<Package>> types = new HashMap<>();
        final Set<Package> pkgIndependent = Collections.emptySet();
        for(Method m: methods) {
            int acc=m.getModifiers()&access;
            if(acc==Modifier.PRIVATE) continue;
            if(acc!=0) types.put(methodKey(m), pkgIndependent);
            else types.computeIfAbsent(methodKey(m),x->new HashSet<>()).add(p);
        }
        include = include.and(m -> { int acc = m.getModifiers()&access;
            return acc!=0? acc==Modifier.PRIVATE
                    || types.putIfAbsent(methodKey(m), pkgIndependent)==null:
                noPkgOverride(m, types, pkgIndependent);
        });
    }
    for(clazz=clazz.getSuperclass(); clazz!=null; clazz=clazz.getSuperclass())
        Stream.of(clazz.getDeclaredMethods()).filter(include).forEach(methods::add);
    return methods;
}
static boolean noPkgOverride(
        Method m, Map<Object,Set<Package>> types, Set<Package> pkgIndependent) {
    Set<Package> pkg = types.computeIfAbsent(methodKey(m), key -> new HashSet<>());
    return pkg!=pkgIndependent && pkg.add(m.getDeclaringClass().getPackage());
}
private static Object methodKey(Method m) {
    return Arrays.asList(m.getName(),
        MethodType.methodType(m.getReturnType(), m.getParameterTypes()));
}]]></Answer>
<Answer><![CDATA[private static Collection<Method> getAllMethods(Class<?> target) {
    Class<?> clazz = target;
    Collection<MethodSignature> methodSignatures = new ArrayList<>();
    for(Method method : clazz.getDeclaredMethods()) {
        addIfAbsentAndNonSynthetic(methodSignatures, method);
    }
    for(Method method : clazz.getMethods()) {
        addIfAbsentAndNonSynthetic(methodSignatures, method);
    }
    Package pkg = clazz.getPackage();
    clazz = clazz.getSuperclass();
    while(clazz != null) {
        for(Method method : clazz.getDeclaredMethods()) {
            int modifier = method.getModifiers();
            if(Modifier.isPrivate(modifier)) {
                continue;
            }
            if(Modifier.isPublic(modifier) || Modifier.isProtected(modifier)) {
                addIfAbsentAndNonSynthetic(methodSignatures, method);
            }
            else if((pkg != null && pkg.equals(clazz.getPackage())) || (pkg == null
                    && clazz.getPackage() == null)) {
                addIfAbsentAndNonSynthetic(methodSignatures, method);
            }
        }
        clazz = clazz.getSuperclass();
    }
    Collection<Method> allMethods = new ArrayList<>(methodSignatures.size());
    for(MethodSignature methodSignature : methodSignatures) {
        allMethods.add(methodSignature.getMethod());
    }
    return allMethods;
}

private static void addIfAbsentAndNonSynthetic(Collection<MethodSignature> collection,
        Method method) {
    MethodSignature methodSignature = new MethodSignature(method);
    if(!method.isSynthetic() && !collection.contains(methodSignature)) {
        collection.add(methodSignature);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28398010" questionTitle="Restricting input in textfield by template">
<Answer><![CDATA[import java.awt.Toolkit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javafx.geometry.Side;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;

public class DateTextField extends TextField
{
Pattern patt1 = Pattern.compile("[0-3]");
Pattern patt2 = Pattern.compile("[0-3][0-9]");
Pattern patt3 = Pattern.compile("[0-3][0-9][.]");
Pattern patt4 = Pattern.compile("[0-3][0-9][.][0-1]");
Pattern patt5 = Pattern.compile("[0-3][0-9][.][0-1][0-9]");
Pattern patt6 = Pattern.compile("[0-3][0-9][.][0-1][0-9][.]");
Pattern patt7 = Pattern.compile("[0-3][0-9][.][0-1][0-9][.][1-2]");
Pattern patt8 = Pattern.compile("[0-3][0-9][.][0-1][0-9][.][1-2][0-9]");
Pattern patt9 = Pattern.compile("[0-3][0-9][.][0-1][0-9][.][1-2][0-9][0-9]");
Pattern patt10 = Pattern.compile("[0-3][0-9][.][0-1][0-9][.][1-2][0-9][0-9][0-9]");

public DateTextField()
{
    super();
}

public void replaceText(int start, int end, String text)
{       
    String text2 = this.getText()+text;
    if( compare(text2) || start != end)
    {
        super.replaceText( start, end, text );
    }
    else
    {
        Toolkit.getDefaultToolkit().beep();
        zeige();
    }

}

public void replaceSelection(String text)
{
    String text2 = this.getText()+text;
    if(compare(text2))
    {
        super.replaceSelection( text );
    }
    else
    {
        Toolkit.getDefaultToolkit().beep();
        zeige();
    }
}

private boolean compare(String text)
{
    Matcher match = patt1.matcher(text);
    if(match.matches()) return true;
    match = patt2.matcher(text);
    if(match.matches()) return true;
    match = patt3.matcher(text);
    if(match.matches()) return true;
    match = patt4.matcher(text);
    if(match.matches()) return true;
    match = patt5.matcher(text);
    if(match.matches()) return true;
    match = patt6.matcher(text);
    if(match.matches()) return true;
    match = patt7.matcher(text);
    if(match.matches()) return true;
    match = patt8.matcher(text);
    if(match.matches()) return true;
    match = patt9.matcher(text);
    if(match.matches()) return true;
    match = patt10.matcher(text);
    if(match.matches()) return true;
    return false;
}

private void zeige()
{
    final ContextMenu menu = new ContextMenu();
    menu.getItems().add(new MenuItem("dd.mm.yyyy"));
    menu.show(this, Side.BOTTOM, 0, 0);
}
}]]></Answer>
<Answer><![CDATA[@Fxml
private DatePicker datePik;
@Fxml
private TextField textF;

@Override
    public void initialize(URL url, ResourceBundle rb) {  
        String pattern = "dd-MM-yyyy";
        datePik.setPromptText(pattern.toLowerCase());      
        datePik.getEditor().focusedProperty().addListener(new ChangeListener<Boolean>()//focus on the TextField object of the DatePicker
            {   
                @Override
                public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue){
                    if (newPropertyValue == false){
                        try {
                            SimpleDateFormat sdf = new SimpleDateFormat(datePik.getEditor().getText());
                            sdf.setLenient(false);
                            //if not valid, it will throw ParseException
                            Date date = sdf.parse(datePik.getEditor().getText());
                            //System.out.println(date);
                        } catch (Exception e) {
                            e.printStackTrace();
                            datePik.getEditor().setText("");
                        }
                            }
                        };
            }); 


        textF.focusedProperty().addListener(new ChangeListener<Boolean>()//focus on the TextField object
            {   
                @Override
                public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue){
                    if (newPropertyValue == false){
                        try {
                            SimpleDateFormat sdf = new SimpleDateFormat(textF.getText());
                            sdf.setLenient(false);
                            //if not valid, it will throw ParseException
                            Date date = sdf.parse(textF.getText());
                            //System.out.println(date);
                        } catch (Exception e) {
                            e.printStackTrace();
                            textF.setText("");
                        }
                            }
                        };
            }); 
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28395367" questionTitle="JavaFX TextField Get Clicked Item">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {

    TextFlow textFlow = new TextFlow();
    textFlow.setOnMouseClicked(ev -> {
        if(ev.getTarget() instanceof Text) {
            Text clicked = (Text) ev.getTarget();
            System.out.println(clicked);
        }
    });

    IntStream.range(0, 500).mapToObj(Integer::toString).map(Text::new).forEach(textFlow.getChildren()::add);

    BorderPane borderpane = new BorderPane(textFlow);
    borderpane.setPadding(new Insets(20));

    Scene scene = new Scene(borderpane, 400, 400);
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[package com.ekko.history;

import java.net.URL;
import java.util.Objects;
import java.util.ResourceBundle;

import com.ekko.WebController;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;

public class HistoryController implements Initializable {

    @FXML
    private TextFlow textFlow;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        textFlow.getChildren().clear();
        textFlow.setOnMouseClicked(ev -> {
            if(ev.getTarget() instanceof Text) {
                Text clicked = (Text) ev.getTarget();
                WebController.getEngine().load(clicked.getText());
            }
        });
        HistoryClient.getHistory().stream().filter(Objects::nonNull).forEach(s -> {
            Text text = new Text(s + "\n");
            textFlow.getChildren().add(text);
        });
        HistoryClient.getHistory().clear();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28363323" questionTitle="Partition a Stream by a discriminator function">
<Answer><![CDATA[public class PartitionBySpliterator<E> extends AbstractSpliterator<List<E>> {
  private final Spliterator<E> spliterator;
  private final Function<? super E, ?> partitionBy;
  private HoldingConsumer<E> holder;
  private Comparator<List<E>> comparator;

  public PartitionBySpliterator(Spliterator<E> toWrap, Function<? super E, ?> partitionBy) {
    super(Long.MAX_VALUE, toWrap.characteristics() & ~SIZED | NONNULL);
    this.spliterator = toWrap;
    this.partitionBy = partitionBy;
  }

  public static <E> Stream<List<E>> partitionBy(Function<E, ?> partitionBy, Stream<E> in) {
    return StreamSupport.stream(new PartitionBySpliterator<>(in.spliterator(), partitionBy), false);
  }

  @Override public boolean tryAdvance(Consumer<? super List<E>> action) {
    final HoldingConsumer<E> h;
    if (holder == null) {
      h = new HoldingConsumer<>();
      if (!spliterator.tryAdvance(h)) return false;
      holder = h;
    }
    else h = holder;
    final ArrayList<E> partition = new ArrayList<>();
    final Object partitionKey = partitionBy.apply(h.value);
    boolean didAdvance;
    do partition.add(h.value);
    while ((didAdvance = spliterator.tryAdvance(h))
        && Objects.equals(partitionBy.apply(h.value), partitionKey));
    if (!didAdvance) holder = null;
    action.accept(partition);
    return true;
  }

  static final class HoldingConsumer<T> implements Consumer<T> {
    T value;
    @Override public void accept(T value) { this.value = value; }
  }

  @Override public Comparator<? super List<E>> getComparator() {
    final Comparator<List<E>> c = this.comparator;
    return c != null? c : (this.comparator = comparator());
  }

  private Comparator<List<E>> comparator() {
    @SuppressWarnings({"unchecked","rawtypes"})
    final Comparator<? super E> innerComparator =
        Optional.ofNullable(spliterator.getComparator())
                .orElse((Comparator) naturalOrder());
    return (left, right) -> {
      final int c = innerComparator.compare(left.get(0), right.get(0));
      return c != 0? c : innerComparator.compare(
          left.get(left.size() - 1), right.get(right.size() - 1));
    };
  }
}]]></Answer>
<Answer><![CDATA[class Person {

    String surname;
    String forename;

    public Person(String surname, String forename) {
        this.surname = surname;
        this.forename = forename;
    }

    @Override
    public String toString() {
        return forename;
    }

}

class Family {

    String surname;
    List<Person> members;

    public Family(String surname, List<Person> members) {
        this.surname = surname;
        this.members = members;
    }

    @Override
    public String toString() {
        return "Family{" + "surname=" + surname + ", members=" + members + '}';
    }

}

private void test() {
    String[][] data = {
        {"Kray", "Ronald"},
        {"Kray", "Reginald"},
        {"Dors", "Diana"},};
    // Their families.
    Stream<Family> families = Arrays.stream(data)
            // Build people
            .map(a -> new Person(a[0], a[1]))
            // Collect into a Map<String,List<Person>> as families
            .collect(Collectors.groupingBy(p -> p.surname))
            // Convert them to families.
            .entrySet().stream()
            .map(p -> new Family(p.getKey(), p.getValue()));
    families.forEach(f -> System.out.println(f));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28342309" questionTitle="Iterate TreeView nodes">
<Answer><![CDATA[/**
 * Tree table item walker.
 *
 * @author bvissy
 *
 * @param <T>
 *            The type of the tree items.
 */
public class TreeTableViewWalker<T> {

    /**
     * Utility class to hold a tuple
     */
    public class Tuple<E, F> {
        E first;
        F second;

        public Tuple(E first, F second) {
            this.first = first;
            this.second = second;
        }

        public E getFirst() {
            return first;
        }

        public Tuple<E, F> setFirst(E first) {
            return new Tuple<>(first, second);
        }

        public F getSecond() {
            return second;
        }

        public Tuple<E, F> setSecond(F second) {
            return new Tuple<>(first, second);
        }

        @Override
        public String toString() {
            return "Tuple [first=" + first + ", second=" + second + "]";
        }
    }

    // The walk state stack
    private Deque<Tuple<TreeItem<T>, Integer>> stack = new ArrayDeque<>();

    /**
     * Initialize the walker.
     *
     * @param tree
     *            The tree to walk
     */
    public TreeTableViewWalker(TreeTableView<T> tree) {
        super();
        if (tree.getRoot() != null) {
            stack.push(new Tuple<>(tree.getRoot(), -1));
        }
    }

    /**
     * @return True if has unserved items.
     */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /**
     * @return The next tree item in depth walk order. The parent is returned
     *         before any of its children.
     */
    public TreeItem<T> next() {
        if (!hasNext()) {
            throw new IllegalStateException("");
        }
        TreeItem<T> nxt = stack.peek().getFirst();
        move();
        return nxt;
    }

    private void move() {
        Tuple<TreeItem<T>, Integer> n = stack.pop();
        ObservableList<TreeItem<T>> ch = n.getFirst().getChildren();
        int idx = n.getSecond() + 1;
        if (ch.size() <= idx) {
            if (stack.isEmpty()) {
                return;
            } else {
                move();
            }
        } else {
            stack.push(n.setSecond(idx));
            stack.push(new Tuple<>(ch.get(idx), -1));
        }
    }

    /**
     * @return A stream of all (remaining) items. Note, that the walker could
     *         traverse only once over items.
     */
    public Stream<TreeItem<T>> stream() {
        return StreamSupport.stream(new Spliterator<TreeItem<T>>() {

            @Override
            public int characteristics() {
                return 0;
            }

            @Override
            public long estimateSize() {
                return Long.MAX_VALUE;
            }

            @Override
            public boolean tryAdvance(Consumer<? super TreeItem<T>> action) {
                if (hasNext()) {
                    action.accept(next());
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public Spliterator<TreeItem<T>> trySplit() {
                return null;
            }
        }, false);
    }

    /**
     * Walks over the tree and calls the consumer for each tree item.
     *
     * @param tree
     *            The tree to visit.
     * @param visitor
     *            The visitor.
     */
    public static <T> void visit(TreeTableView<T> tree, Consumer<TreeItem<T>> visitor) {
        TreeTableViewWalker<T> tw = new TreeTableViewWalker<>(tree);
        while (tw.hasNext()) {
            visitor.accept(tw.next());
        }
    }

    /**
     * Walks over the tree and calls the consumer for each item value.
     *
     * @param tree
     *            The tree to visit.
     * @param visitor
     *            The visitor.
     */
    public static <T> void visitItems(TreeTableView<T> tree, Consumer<T> visitor) {
        TreeTableViewWalker<T> tw = new TreeTableViewWalker<>(tree);
        while (tw.hasNext()) {
            visitor.accept(tw.next().getValue());
        }
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class IterateTree extends Application {


    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Tree View Sample");        

        TreeItem<String> rootItem = new TreeItem<String> ("Inbox");
        rootItem.setExpanded(true);
        for (int i = 1; i < 5; i++) {
            rootItem.getChildren().add(createTreeItem(i));
        }        
        TreeView<String> tree = new TreeView<String> (rootItem);        
        StackPane root = new StackPane();
        root.getChildren().add(tree);
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
        // print children
        printChildren(rootItem);
    }

    private TreeItem<String> createTreeItem(int num) {
        TreeItem<String> rootItem = new TreeItem<String> ("Group " + num);
        for (int i = 1; i < 6; i++) {
            TreeItem<String> item = new TreeItem<String> ("Message" + i);            
            rootItem.getChildren().add(item);
        }
        return rootItem;
    }

    private void printChildren(TreeItem<String> root){
        System.out.println("Current Parent :" + root.getValue());
        for(TreeItem<String> child: root.getChildren()){
            if(child.getChildren().isEmpty()){
                System.out.println(child.getValue());
            } else {
                printChildren(child);
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28304745" questionTitle="Cannot manage to update tree cell/item graphics while waiting for a load to complete">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javafx.application.Application;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;



public class LazyTreeCellLoadingExample extends Application {

    // Executor for background tasks:        
    private static final ExecutorService exec = Executors.newCachedThreadPool(r -> {
        Thread t = new Thread(r);
        t.setDaemon(true);
        return t ;
    });

    @Override
    public void start(Stage primaryStage) {
        TreeView<Long> tree = new TreeView<>();
        tree.setRoot(new LazyTreeItem(1L));

        // cell factory that displays progress bar when item is loading children:
        tree.setCellFactory(tv ->  {

            // the cell:
            TreeCell<Long> cell = new TreeCell<>();

            // progress bar to display when needed:
            ProgressBar progressBar = new ProgressBar();

            // listener to observe *current* tree item's child loading status:
            ChangeListener<LazyTreeItem.ChildrenLoadedStatus> listener = (obs, oldStatus, newStatus) -> {
                if (newStatus == LazyTreeItem.ChildrenLoadedStatus.LOADING) {
                    cell.setGraphic(progressBar);
                } else {
                    cell.setGraphic(null);
                }
            };

            // listener for tree item property
            // ensures that listener above is attached to current tree item:
            cell.treeItemProperty().addListener((obs, oldItem, newItem) -> {

                // if we were displaying an item, (and no longer are...),
                // stop observing its child loading status:
                if (oldItem != null) {
                    ((LazyTreeItem) oldItem).childrenLoadedStatusProperty().removeListener(listener);
                }

                // if there is a new item the cell is displaying:
                if (newItem != null) {

                    // update graphic to display progress bar if needed:
                    LazyTreeItem lazyTreeItem = (LazyTreeItem) newItem;
                    if (lazyTreeItem.getChildrenLoadedStatus() == LazyTreeItem.ChildrenLoadedStatus.LOADING) {
                        cell.setGraphic(progressBar);
                    } else {
                        cell.setGraphic(null);
                    }

                    // observe loaded status of current item in case it changes 
                    // while we are still displaying this item:
                    lazyTreeItem.childrenLoadedStatusProperty().addListener(listener);
                } 
            });

            // change text if item changes:
            cell.itemProperty().addListener((obs, oldItem, newItem) -> {
                if (newItem == null) {
                    cell.setText(null);
                    cell.setGraphic(null);
                } else {
                    cell.setText(newItem.toString());
                }
            });

            return cell ;
        });

        Button debugButton = new Button("Debug");
        debugButton.setOnAction(evt -> {
            dumpData(tree.getRoot(), 0);
        });

        primaryStage.setScene(new Scene(new BorderPane(tree, null, null, debugButton, null), 400, 250));
        primaryStage.show();
    }

    private void dumpData(TreeItem<Long> node, int depth) {
        for (int i=0; i<depth; i++) System.out.print(" ");
        System.out.println(node.getValue());
        for (TreeItem<Long> child : node.getChildren()) dumpData(child, depth+1);
    }

    // TreeItem subclass that lazily loads children in background
    // Exposes an observable property specifying current load status of children
    public static class LazyTreeItem extends TreeItem<Long> {

        // possible load statuses:
        enum ChildrenLoadedStatus { NOT_LOADED, LOADING, LOADED }

        // observable property for current load status:
        private final ObjectProperty<ChildrenLoadedStatus> childrenLoadedStatus = new SimpleObjectProperty<>(ChildrenLoadedStatus.NOT_LOADED);

        public LazyTreeItem(Long value) {
            super(value);
        }

        // getChildren() method loads children lazily:
        @Override
        public ObservableList<TreeItem<Long>> getChildren() {
            if (getChildrenLoadedStatus() == ChildrenLoadedStatus.NOT_LOADED) {
                lazilyLoadChildren();
            }
            return super.getChildren() ;
        }

        // load child nodes in background, updating status accordingly:
        private void lazilyLoadChildren() {

            // change current status to "loading":
            setChildrenLoadedStatus(ChildrenLoadedStatus.LOADING);
            long value = getValue();

            // background task to load children:
            Task<List<LazyTreeItem>> loadTask = new Task<List<LazyTreeItem>>() {

                @Override
                protected List<LazyTreeItem> call() throws Exception {
                    List<LazyTreeItem> children = new ArrayList<>();
                    for (int i=0; i<10; i++) {
                        children.add(new LazyTreeItem(10*value + i));
                    }

                    // for testing (loading is so lazy it falls asleep)
                    Thread.sleep(3000);
                    return children;
                }

            };

            // when loading is complete:
            // 1. set actual child nodes to loaded nodes
            // 2. update status to "loaded"
            loadTask.setOnSucceeded(event -> {
                super.getChildren().setAll(loadTask.getValue());
                setChildrenLoadedStatus(ChildrenLoadedStatus.LOADED);
            });

            // execute task in backgroun
            exec.submit(loadTask);
        }

        // is leaf is true only if we *know* there are no children
        // i.e. we've done the loading and still found nothing
        @Override
        public boolean isLeaf() {
            return getChildrenLoadedStatus() == ChildrenLoadedStatus.LOADED && super.getChildren().size()==0 ;
        }

        // normal property accessor methods:

        public final ObjectProperty<ChildrenLoadedStatus> childrenLoadedStatusProperty() {
            return this.childrenLoadedStatus;
        }

        public final LazyTreeCellLoadingExample.LazyTreeItem.ChildrenLoadedStatus getChildrenLoadedStatus() {
            return this.childrenLoadedStatusProperty().get();
        }

        public final void setChildrenLoadedStatus(
                final LazyTreeCellLoadingExample.LazyTreeItem.ChildrenLoadedStatus childrenLoadedStatus) {
            this.childrenLoadedStatusProperty().set(childrenLoadedStatus);
        }


    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public final class ParseTreeNodeCell
    extends TreeCell<ParseTreeNode>
{
    private final Text text = new Text();
    private final ProgressBar progressBar = new ProgressBar();
    private final HBox hBox = new HBox(text);

    public ParseTreeNodeCell(final TreeTabDisplay display)
    {
        setEditable(false);

        selectedProperty().addListener(new ChangeListener<Boolean>()
        {
            @SuppressWarnings("AutoUnboxing")
            @Override
            public void changed(
                final ObservableValue<? extends Boolean> observable,
                final Boolean oldValue, final Boolean newValue)
            {
                if (!newValue)
                    return;
                final ParseTreeNode node = getItem();
                if (node != null)
                    display.parseTreeNodeShowEvent(node);
            }
        });

        final ObservableValue<Boolean> loading
            = EasyBind.select(treeItemProperty())
            .selectObject(item -> ((ParseTreeItem) item).loadingProperty());

        loading.addListener(new ChangeListener<Boolean>()
        {
            @Override
            public void changed(
                final ObservableValue<? extends Boolean> observable,
                final Boolean oldValue, final Boolean newValue)
            {
                final ObservableList<Node> children = hBox.getChildren();
                if (newValue == null || !newValue.booleanValue()) {
                    children.remove(progressBar);
                    return;
                }

                if (!children.contains(progressBar))
                    children.add(progressBar);
            }
        });

        itemProperty().addListener(new ChangeListener<ParseTreeNode>()
        {
            @Override
            public void changed(
                final ObservableValue<? extends ParseTreeNode> observable,
                final ParseTreeNode oldValue, final ParseTreeNode newValue)
            {
                if (newValue == null) {
                    setGraphic(null);
                    return;
                }
                text.setText(String.format("%s (%s)",
                    newValue.getRuleInfo().getName(),
                    newValue.isSuccess() ? "SUCCESS" : "FAILURE"));
                setGraphic(hBox);
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28292644" questionTitle="Convert from List of preparedStatements To PreparedStatement batch?">
<Answer><![CDATA[PreparedStatement preparedStatement = null;
            preparedStatement = dbConnection.prepareStatement(insertTableSQL);

            dbConnection.setAutoCommit(false);

            preparedStatement.setInt(1, 101);
            preparedStatement.setString(2, "test1");
            preparedStatement.addBatch();

            preparedStatement.setInt(1, 102);
            preparedStatement.setString(2, "test2");
            preparedStatement.addBatch();

            preparedStatement.setInt(1, 103);
            preparedStatement.setString(2, "test3");
            preparedStatement.addBatch();

            preparedStatement.executeBatch();

            dbConnection.commit();]]></Answer>
<Answer><![CDATA[/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

/**
 *
 * @author vaibhav.kashyap
 */


import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class PreparedBatchJDBC {

    private static final String DB_DRIVER = "com.mysql.jdbc.Driver";
    private static final String DB_CONNECTION = "jdbc:mysql://localhost:3306/mydb";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "root";

    public static void main(String[] argv) {

        try {

            batchInsertRecordsIntoTable();

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }

    }

    private static void batchInsertRecordsIntoTable() throws SQLException {

        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;

        String insertTableSQL = "INSERT INTO DBUSER"
                + "(USER_ID, USERNAME, CREATED_BY, CREATED_DATE) VALUES"
                + "(?,?,?,?)";

        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(insertTableSQL);

            dbConnection.setAutoCommit(false);

            preparedStatement.setInt(1, 101);
            preparedStatement.setString(2, "test1");
            preparedStatement.setString(3, "system");
            preparedStatement.setTimestamp(4, getCurrentTimeStamp());
            preparedStatement.addBatch();

            preparedStatement.setInt(1, 102);
            preparedStatement.setString(2, "test2");
            preparedStatement.setString(3, "system");
            preparedStatement.setTimestamp(4, getCurrentTimeStamp());
            preparedStatement.addBatch();

            preparedStatement.setInt(1, 103);
            preparedStatement.setString(2, "test3");
            preparedStatement.setString(3, "system");
            preparedStatement.setTimestamp(4, getCurrentTimeStamp());
            preparedStatement.addBatch();

            preparedStatement.executeBatch();

            dbConnection.commit();

            System.out.println("Record is inserted into DBUSER table!");

        } catch (SQLException e) {

            System.out.println(e.getMessage());
            dbConnection.rollback();

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }

    }

    private static Connection getDBConnection() {

        Connection dbConnection = null;

        try {

            Class.forName(DB_DRIVER);

        } catch (ClassNotFoundException e) {

            System.out.println(e.getMessage());

        }

        try {

            dbConnection = DriverManager.getConnection(
                              DB_CONNECTION, DB_USER,DB_PASSWORD);
            return dbConnection;

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }

        return dbConnection;

    }

    private static java.sql.Timestamp getCurrentTimeStamp() {

        java.util.Date today = new java.util.Date();
        return new java.sql.Timestamp(today.getTime());

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28287398" questionTitle="What is the preferred way of getting the frame rate of a JavaFX application?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

import com.sun.javafx.perf.PerformanceTracker;
import java.security.AccessControlException;
import javafx.animation.AnimationTimer;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;


public class FPS extends Application {
    public static void main(String[] args) { launch(args); }

    private static PerformanceTracker tracker;

    @Override
    public void start(Stage stage) {
        VBox root = new VBox(20);
        Label label1 = new Label();
        Label label2 = new Label();
        root.getChildren().addAll(label1, label2);

        Scene scene = new Scene(root, 200, 100);

        try {
            System.setProperty("prism.verbose", "true");
            System.setProperty("prism.dirtyopts", "false");
            //System.setProperty("javafx.animation.fullspeed", "true");
            System.setProperty("javafx.animation.pulse", "10");
        } catch (AccessControlException e) {}

        scene.setOnKeyPressed((e)->{
            label2.setText(label1.getText());
        });
        stage.setScene(scene);
        stage.show();


        tracker = PerformanceTracker.getSceneTracker(scene);
        AnimationTimer frameRateMeter = new AnimationTimer() {

            @Override
            public void handle(long now) {
                label1.setText(String.format("Current frame rate: %.3f fps", getFPS()));
            }
        };

        frameRateMeter.start();
    }

    private float getFPS () {
        float fps = tracker.getAverageFPS();
        tracker.resetAverageFPS();
        return fps;
    }

}]]></Answer>
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class SimpleFrameRateMeter extends Application {

    private final long[] frameTimes = new long[100];
    private int frameTimeIndex = 0 ;
    private boolean arrayFilled = false ;

    @Override
    public void start(Stage primaryStage) {

        Label label = new Label();
        AnimationTimer frameRateMeter = new AnimationTimer() {

            @Override
            public void handle(long now) {
                long oldFrameTime = frameTimes[frameTimeIndex] ;
                frameTimes[frameTimeIndex] = now ;
                frameTimeIndex = (frameTimeIndex + 1) % frameTimes.length ;
                if (frameTimeIndex == 0) {
                    arrayFilled = true ;
                }
                if (arrayFilled) {
                    long elapsedNanos = now - oldFrameTime ;
                    long elapsedNanosPerFrame = elapsedNanos / frameTimes.length ;
                    double frameRate = 1_000_000_000.0 / elapsedNanosPerFrame ;
                    label.setText(String.format("Current frame rate: %.3f", frameRate));
                }
            }
        };

        frameRateMeter.start();

        primaryStage.setScene(new Scene(new StackPane(label), 250, 150));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class FXUtils
{
    private static long lastUpdate = 0;
    private static int index = 0;
    private static double[] frameRates = new double[100];

    static
    {
        AnimationTimer frameRateMeter = new AnimationTimer()
        {
            @Override
            public void handle(long now)
            {
                if (lastUpdate > 0)
                {
                    long nanosElapsed = now - lastUpdate;
                    double frameRate = 1000000000.0 / nanosElapsed;
                    index %= frameRates.length;
                    frameRates[index++] = frameRate;
                }

                lastUpdate = now;
            }
        };

        frameRateMeter.start();
    }

    /**
     * Returns the instantaneous FPS for the last frame rendered.
     *
     * @return
     */
    public static double getInstantFPS()
    {
        return frameRates[index % frameRates.length];
    }

    /**
     * Returns the average FPS for the last 100 frames rendered.
     * @return
     */
    public static double getAverageFPS()
    {
        double total = 0.0d;

        for (int i = 0; i < frameRates.length; i++)
        {
            total += frameRates[i];
        }

        return total / frameRates.length;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28276904" questionTitle="Java 8 Generics - Generate a list (jdk 8) that contains &lt;? extends MyObject&gt; using a method">
<Answer><![CDATA[public class MyTest {

public static void main(String[] args) {
    new MyTest();
}

public MyTest() {
    List<CarContainer<? extends Car[]>> obs = new ArrayList<>();

    Collections.addAll( obs,
            getCarContainer(new Honda()),
            getCarContainer(new Toyota()));

    System.out.println(obs.size());
}

private <T> CarContainer<T[]> getCarContainer(T car) {
    return null;
}

class Car{}

class Honda extends Car {}

class Toyota extends Car {}

class CarContainer<T> {}
}]]></Answer>
<Answer><![CDATA[public class MyTest {

public static void main(String[] args) {
    new MyTest();
}

public MyTest() {
    List<CarContainer<? extends Car[]>> obs = new ArrayList<>();
    CarContainer<Honda[]> c = getCarContainer(new Honda());
    CarContainer<Toyota[]> c2 = getCarContainer(new Toyota());

    Collections.addAll(obs,
            c, c2);

    System.out.println(obs.size());
}

private <T> CarContainer<T[]> getCarContainer(T car) {
    return null;
}

class Car{}

class Honda extends Car {}

class Toyota extends Car {}

class CarContainer<T> {}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28268751" questionTitle="Optional.ifAbsentThrow()?">
<Answer><![CDATA[public final class GetNonNull<T, E extends Throwable> {
    private final T value;
    private final E failure;

    private GetNonNull(T value, E failure) {
        this.value = value;
        this.failure = failure;
        if ((value == null) && (failure == null)) throw new NullPointerException();
        }

    public T get() throws E {
        if (failure != null) throw failure;
        return value;
        }

    public <R> Optional<R> getOptional(Function<T, R> f) throws E {
        if (failure != null) throw failure;
        if (value != null) {
            R result = f.apply(value);
            return Optional.ofNullable(result);
            }
        return Optional.empty();
        }

    public static <R> R getOrDefault(R o1, Supplier<R> supplier) {
        if (o1 != null) return o1;
        R result = supplier.get();
        if (result != null) return result;
        else throw new NullPointerException();
        }

    public static <R> R getOrDefault(R o1, R o2) {
        if (o1 != null) return o1;
        else if (o2 != null) return o2;
        else throw new NullPointerException();
        }

    public static <R> R getOrDefault(Optional<R> o1, R o2) {
        if (o1.isPresent()) return o1.get();
        else if (o2 != null) return o2;
        else throw new NullPointerException();
        }

    public <R> R getOrDefault(Function<T, R> f, R o) throws E {
        if (failure != null) throw failure;
        if (value != null) {
            R result = f.apply(value);
            if (result != null) return result;
            else return o;
            }
        return o;
        }

    public <R> GetNonNull<R, E> mapOrThrow(Function<T, R> f, Supplier<E> s) {
        if (value != null) {
            R result = f.apply(value);
            return new GetNonNull<>(result, (result != null) ? null : s.get());
            }
        return (GetNonNull)this;
        }

    public static <T, E extends Throwable> GetNonNull<T, E> getOrThrow(Optional<T> o, Supplier<E> s) {
        return o.map(t -> new GetNonNull<>(t, (E)null)).orElseGet(() -> new GetNonNull<>(null, s.get()));
        }

    public static <T, E extends Throwable> GetNonNull<T, E> mapOrThrow(T o, Supplier<E> s) {
        return getOrThrow(Optional.ofNullable(o), s);
        }
    }]]></Answer>
<Answer><![CDATA[public final class Failable<T,E extends Throwable> {
    private final T value;
    private final E failure;
    private Failable(T value, E failure) {
        this.value=value;
        this.failure=failure;
        if(value==null && failure==null) throw new NullPointerException();
    }
    public T get() throws E {
        if(failure!=null) throw failure;
        return value;
    }
    public <R> Failable<R,E> map(Function<T,R> f, Supplier<E> s) {
        if(value!=null) {
            R result=f.apply(value);
            return new Failable<>(result, result!=null? null: s.get());
        }
        // already failed, types of R and T are irrelevant
        @SuppressWarnings("unchecked") Failable<R,E> f0=(Failable)this;
        return f0;
    }
    public static <T,E extends Throwable> Failable<T,E> of(Optional<T> o, Supplier<E> s) {
        return o.map(t -> new Failable<>(t, (E)null))
                .orElseGet(()->new Failable<>(null, s.get()));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28230755" questionTitle="How to create a Video Wall like in the JavaFX 2.0 demo?">
<Answer><![CDATA[/**
* A self initializing First Person Shooter camera
*
* @author Jason Pollastrini aka jdub1581
*/
public class SimpleFPSCamera extends Parent {

public SimpleFPSCamera() {
    initialize();
}

private void update() {
    updateControls();
}

private void updateControls() {
    if (fwd && !back) {
        moveForward();
    }
    if (strafeL) {
        strafeLeft();
    }
    if (strafeR) {
        strafeRight();
    }
    if (back && !fwd) {
        moveBack();
    }
    if (up && !down) {
        moveUp();
    }
    if (down && !up) {
        moveDown();
    }
}
/*==========================================================================
 Initialization
 */
private final Group root = new Group();
private final Affine affine = new Affine();
private final Translate t = new Translate(0, 0, 0);
private final Rotate rotateX = new Rotate(0, Rotate.X_AXIS),
        rotateY = new Rotate(0, Rotate.Y_AXIS),
        rotateZ = new Rotate(0, Rotate.Z_AXIS);

private boolean fwd, strafeL, strafeR, back, up, down, shift;

private double mouseSpeed = 1.0, mouseModifier = 0.1;
private double moveSpeed = 10.0;
private double mousePosX;
private double mousePosY;
private double mouseOldX;
private double mouseOldY;
private double mouseDeltaX;
private double mouseDeltaY;

private void initialize() {
    getChildren().add(root);
    getTransforms().addAll(affine);
    initializeCamera();
    startUpdateThread();
}

public void loadControlsForSubScene(SubScene scene) {
    sceneProperty().addListener(l -> {
        if (getScene() != null) {
            getScene().addEventHandler(KeyEvent.ANY, ke -> {
                if (ke.getEventType() == KeyEvent.KEY_PRESSED) {
                    switch (ke.getCode()) {
                        case Q:
                            up = true;
                            break;
                        case E:
                            down = true;
                            break;
                        case W:
                            fwd = true;
                            break;
                        case S:
                            back = true;
                            break;
                        case A:
                            strafeL = true;
                            break;
                        case D:
                            strafeR = true;
                            break;
                        case SHIFT:
                            shift = true;
                            moveSpeed = 20;
                            break;
                    }
                } else if (ke.getEventType() == KeyEvent.KEY_RELEASED) {
                    switch (ke.getCode()) {
                        case Q:
                            up = false;
                            break;
                        case E:
                            down = false;
                            break;
                        case W:
                            fwd = false;
                            break;
                        case S:
                            back = false;
                            break;
                        case A:
                            strafeL = false;
                            break;
                        case D:
                            strafeR = false;
                            break;
                        case SHIFT:
                            moveSpeed = 10;
                            shift = false;
                            break;
                    }
                }
                ke.consume();
            });
        }
    });
    scene.addEventHandler(MouseEvent.ANY, me -> {
        if (me.getEventType().equals(MouseEvent.MOUSE_PRESSED)) {
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseOldX = me.getSceneX();
            mouseOldY = me.getSceneY();

        } else if (me.getEventType().equals(MouseEvent.MOUSE_DRAGGED)) {
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseDeltaX = (mousePosX - mouseOldX);
            mouseDeltaY = (mousePosY - mouseOldY);

            mouseSpeed = 1.0;
            mouseModifier = 0.1;

            if (me.isPrimaryButtonDown()) {
                if (me.isControlDown()) {
                    mouseSpeed = 0.1;
                }
                if (me.isShiftDown()) {
                    mouseSpeed = 1.0;
                }
                t.setX(getPosition().getX());
                t.setY(getPosition().getY());
                t.setZ(getPosition().getZ());

                affine.setToIdentity();

                rotateY.setAngle(
                        Utils.clamp(-360, ((rotateY.getAngle() + mouseDeltaX * (mouseSpeed * mouseModifier)) % 360 + 540) % 360 - 180, 360)
                ); // horizontal                
                rotateX.setAngle(
                        Utils.clamp(-45, ((rotateX.getAngle() - mouseDeltaY * (mouseSpeed * mouseModifier)) % 360 + 540) % 360 - 180, 35)
                ); // vertical
                affine.prepend(t.createConcatenation(rotateY.createConcatenation(rotateX)));

            } else if (me.isSecondaryButtonDown()) {
                /*
                 init zoom?
                 */
            } else if (me.isMiddleButtonDown()) {
                /*
                 init panning?
                 */
            }
        }
    });

    scene.addEventHandler(ScrollEvent.ANY, se -> {

        if (se.getEventType().equals(ScrollEvent.SCROLL_STARTED)) {

        } else if (se.getEventType().equals(ScrollEvent.SCROLL)) {

        } else if (se.getEventType().equals(ScrollEvent.SCROLL_FINISHED)) {

        }
    });
}

public void loadControlsForScene(Scene scene) {
    scene.addEventHandler(KeyEvent.ANY, ke -> {
        if (ke.getEventType() == KeyEvent.KEY_PRESSED) {
            switch (ke.getCode()) {
                case Q:
                    up = true;
                    break;
                case E:
                    down = true;
                    break;
                case W:
                    fwd = true;
                    break;
                case S:
                    back = true;
                    break;
                case A:
                    strafeL = true;
                    break;
                case D:
                    strafeR = true;
                    break;
                case SHIFT:
                    shift = true;
                    moveSpeed = 20;
                    break;
            }
        } else if (ke.getEventType() == KeyEvent.KEY_RELEASED) {
            switch (ke.getCode()) {
                case Q:
                    up = false;
                    break;
                case E:
                    down = false;
                    break;
                case W:
                    fwd = false;
                    break;
                case S:
                    back = false;
                    break;
                case A:
                    strafeL = false;
                    break;
                case D:
                    strafeR = false;
                    break;
                case SHIFT:
                    moveSpeed = 10;
                    shift = false;
                    break;
            }
        }
        ke.consume();
    });
    scene.addEventHandler(MouseEvent.ANY, me -> {
        if (me.getEventType().equals(MouseEvent.MOUSE_PRESSED)) {
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseOldX = me.getSceneX();
            mouseOldY = me.getSceneY();

        } else if (me.getEventType().equals(MouseEvent.MOUSE_DRAGGED)) {
            mouseOldX = mousePosX;
            mouseOldY = mousePosY;
            mousePosX = me.getSceneX();
            mousePosY = me.getSceneY();
            mouseDeltaX = (mousePosX - mouseOldX);
            mouseDeltaY = (mousePosY - mouseOldY);

            mouseSpeed = 1.0;
            mouseModifier = 0.1;

            if (me.isPrimaryButtonDown()) {
                if (me.isControlDown()) {
                    mouseSpeed = 0.1;
                }
                if (me.isShiftDown()) {
                    mouseSpeed = 1.0;
                }
                t.setX(getPosition().getX());
                t.setY(getPosition().getY());
                t.setZ(getPosition().getZ());

                affine.setToIdentity();

                rotateY.setAngle(
                        Utils.clamp(-360, ((rotateY.getAngle() + mouseDeltaX * (mouseSpeed * mouseModifier)) % 360 + 540) % 360 - 180, 360)
                ); // horizontal                
                rotateX.setAngle(
                        Utils.clamp(-45, ((rotateX.getAngle() - mouseDeltaY * (mouseSpeed * mouseModifier)) % 360 + 540) % 360 - 180, 35)
                ); // vertical
                affine.prepend(t.createConcatenation(rotateY.createConcatenation(rotateX)));

            } else if (me.isSecondaryButtonDown()) {
                /*
                 init zoom?
                 */
            } else if (me.isMiddleButtonDown()) {
                /*
                 init panning?
                 */
            }
        }
    });

    scene.addEventHandler(ScrollEvent.ANY, se -> {

        if (se.getEventType().equals(ScrollEvent.SCROLL_STARTED)) {

        } else if (se.getEventType().equals(ScrollEvent.SCROLL)) {

        } else if (se.getEventType().equals(ScrollEvent.SCROLL_FINISHED)) {

        }
    });
}

private void initializeCamera() {
    getCamera().setNearClip(0.1);
    getCamera().setFarClip(100000);
    getCamera().setFieldOfView(42);
    getCamera().setVerticalFieldOfView(true);
    //getCamera().getTransforms().add(new Rotate(180, Rotate.Z_AXIS));
    root.getChildren().add(getCamera());
}

private void startUpdateThread() {
    new AnimationTimer() {
        @Override
        public void handle(long now) {
            update();
        }
    }.start();
}
/*==========================================================================
 Movement
 */

private void moveForward() {
    affine.setTx(getPosition().getX() + moveSpeed * getN().getX());
    affine.setTy(getPosition().getY() + moveSpeed * getN().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * getN().getZ());
}

private void strafeLeft() {
    affine.setTx(getPosition().getX() + moveSpeed * -getU().getX());
    affine.setTy(getPosition().getY() + moveSpeed * -getU().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * -getU().getZ());
}

private void strafeRight() {
    affine.setTx(getPosition().getX() + moveSpeed * getU().getX());
    affine.setTy(getPosition().getY() + moveSpeed * getU().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * getU().getZ());
}

private void moveBack() {
    affine.setTx(getPosition().getX() + moveSpeed * -getN().getX());
    affine.setTy(getPosition().getY() + moveSpeed * -getN().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * -getN().getZ());
}

private void moveUp() {
    affine.setTx(getPosition().getX() + moveSpeed * -getV().getX());
    affine.setTy(getPosition().getY() + moveSpeed * -getV().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * -getV().getZ());
}

private void moveDown() {
    affine.setTx(getPosition().getX() + moveSpeed * getV().getX());
    affine.setTy(getPosition().getY() + moveSpeed * getV().getY());
    affine.setTz(getPosition().getZ() + moveSpeed * getV().getZ());
}

/*==========================================================================
 Properties
 */
private final ReadOnlyObjectWrapper<PerspectiveCamera> camera = new ReadOnlyObjectWrapper<>(this, "camera", new PerspectiveCamera(true));

public final PerspectiveCamera getCamera() {
    return camera.get();
}

public ReadOnlyObjectProperty cameraProperty() {
    return camera.getReadOnlyProperty();
}

/*==========================================================================
 Callbacks    
 | R | Up| F |  | P|
 U |mxx|mxy|mxz|  |tx|
 V |myx|myy|myz|  |ty|
 N |mzx|mzy|mzz|  |tz|

 */
//Forward / look direction    
private final Callback<Transform, Point3D> F = (a) -> {
    return new Point3D(a.getMzx(), a.getMzy(), a.getMzz());
};
private final Callback<Transform, Point3D> N = (a) -> {
    return new Point3D(a.getMxz(), a.getMyz(), a.getMzz());
};
// up direction
private final Callback<Transform, Point3D> UP = (a) -> {
    return new Point3D(a.getMyx(), a.getMyy(), a.getMyz());
};
private final Callback<Transform, Point3D> V = (a) -> {
    return new Point3D(a.getMxy(), a.getMyy(), a.getMzy());
};
// right direction
private final Callback<Transform, Point3D> R = (a) -> {
    return new Point3D(a.getMxx(), a.getMxy(), a.getMxz());
};
private final Callback<Transform, Point3D> U = (a) -> {
    return new Point3D(a.getMxx(), a.getMyx(), a.getMzx());
};
//position
private final Callback<Transform, Point3D> P = (a) -> {
    return new Point3D(a.getTx(), a.getTy(), a.getTz());
};

private Point3D getF() {
    return F.call(getLocalToSceneTransform());
}

public Point3D getLookDirection() {
    return getF();
}

private Point3D getN() {
    return N.call(getLocalToSceneTransform());
}

public Point3D getLookNormal() {
    return getN();
}

private Point3D getR() {
    return R.call(getLocalToSceneTransform());
}

private Point3D getU() {
    return U.call(getLocalToSceneTransform());
}

private Point3D getUp() {
    return UP.call(getLocalToSceneTransform());
}

private Point3D getV() {
    return V.call(getLocalToSceneTransform());
}

public final Point3D getPosition() {
    return P.call(getLocalToSceneTransform());
}
}]]></Answer>
<Answer><![CDATA[public class VideoWall extends Application {

    Random rand = new Random();

    Group root = new Group();
    PerspectiveCamera camera;

    private static final double CAMERA_INITIAL_DISTANCE = -850;
    private static final double CAMERA_NEAR_CLIP = 0.1;
    private static final double CAMERA_FAR_CLIP = 10000.0;

    Image[] images = new Image[] {
            new Image("http://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Siberischer_tiger_de_edit02.jpg/320px-Siberischer_tiger_de_edit02.jpg"),
            new Image("http://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/White_Lion.jpg/320px-White_Lion.jpg"),
            new Image("http://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Lion_female.jpg/319px-Lion_female.jpg")

    };

    List<ParallelTransition> transitionList = new ArrayList<>();

    public VideoWall(){

    }
    public static void main(String[] args) {
        launch(args);
    }

    /**
     * Create ImageView with random Image.
     * @return
     */
    private ImageView createImageView() {

        Image image = images[ rand.nextInt(images.length)];

        ImageView c = new ImageView( image);

        c.setFitWidth(140);
        c.setFitWidth(100);
        c.setPreserveRatio(true);

        return c;
    }

    @Override
    public void start(Stage primaryStage) {

        // build camera
        camera = new PerspectiveCamera(true);
        camera.setNearClip(CAMERA_NEAR_CLIP);
        camera.setFarClip(CAMERA_FAR_CLIP);
        camera.setTranslateZ(CAMERA_INITIAL_DISTANCE);

        // we display any node (imageview, webview, etc)
        Node node;

        // wall. the degrees depend on the distance, image size, translate start points, etc. so these values were just as they fit
        double ringBeginDeg = -30;
        double ringEndDeg = 38;

        double r = 1300; 
        double yOffset = 80; // offset per image row
        double yOffsetInitial = 120; // initial y offset from "floor"

        int min = -3;
        int max = 3;

        for( double angle1=Math.toRadians(ringBeginDeg); angle1 <Math.toRadians(ringEndDeg); angle1+=0.08)
        {

            double angle2 = Math.PI;

            for( int i=min; i <= max; i++)
            {

                double x = r * Math.sin(angle1) * Math.cos(angle2);
                // double y = r * Math.sin(angle1) * Math.sin(angle2);
                double z = r * Math.cos(angle1);

                node = createImageView();

                node.setTranslateX(x);
                node.setTranslateY(yOffset * i - yOffsetInitial);
                node.setTranslateZ(z);

                // rotate towards viewer position
                Rotate rx = new Rotate();
                rx.setAxis(Rotate.Y_AXIS);
                rx.setAngle(Math.toDegrees( -angle1));

                node.getTransforms().addAll(rx);

                // reflection on bottom row
                if( i==max) {
                    Reflection refl = new Reflection();
                    refl.setFraction(0.8f);
                    node.setEffect(refl);
                }

                // build the wall using a transition 
                node.setVisible(false);
                transitionList.add( createTransition( node));

                root.getChildren().add( node);

            }

        }

        Scene scene = new Scene(root, 1600, 900, Color.BLACK);

        primaryStage.setScene( scene);
        primaryStage.show();

        scene.setCamera(camera);

        AnimationTimer timer = createAnimation();
        timer.start();

    }

    private AnimationTimer createAnimation() {

        Collections.sort(transitionList, new Comparator<ParallelTransition>() {

            @Override
            public int compare(ParallelTransition arg0, ParallelTransition arg1) {

                // bottom right to top left
                Point2D ref = new Point2D(1000,1000);
                Point2D pt0 = new Point2D( arg0.getNode().getTranslateX(), arg0.getNode().getTranslateY());
                Point2D pt1 = new Point2D( arg1.getNode().getTranslateX(), arg1.getNode().getTranslateY());

                return Double.compare(ref.distance(pt0), ref.distance(pt1));

                // bottom row first
                // return -Double.compare( arg0.getNode().getTranslateY(), arg1.getNode().getTranslateY());

            }

        });


        AnimationTimer timer = new AnimationTimer() {

            long last = 0;

            @Override
            public void handle(long now) {

                //if( (now - last) > 1_000_000_000) 
                if( (now - last) >   40_000_000) 
                {
                    if( transitionList.size() > 0) {

                        ParallelTransition t = transitionList.remove(0);
                        t.getNode().setVisible(true);
                        t.play();

                    }
                    last = now;

                }

                if( transitionList.size() == 0) {
                    stop();
                }
            }

        };

        return timer;
    }

    private ParallelTransition createTransition( final Node node) {

        Path path = new Path();
        path.getElements().add(new MoveToAbs( node, node.getTranslateX() - 1000, node.getTranslateY() - 900));
        path.getElements().add(new LineToAbs( node, node.getTranslateX(), node.getTranslateY()));

        Duration duration = Duration.millis(1500);

        PathTransition pt = new PathTransition( duration, path, node);

        RotateTransition rt = new RotateTransition( duration, node);
        rt.setByAngle(720);
        rt.setAutoReverse(true);

        ParallelTransition parallelTransition = new ParallelTransition();
        parallelTransition.setNode(node);
        parallelTransition.getChildren().addAll(pt, rt);

        return parallelTransition;

    }

    public static class MoveToAbs extends MoveTo {

        public MoveToAbs( Node node, double x, double y) {
            super( x - node.getLayoutX() + node.getLayoutBounds().getWidth() / 2, y - node.getLayoutY() + node.getLayoutBounds().getHeight() / 2);
        }

    }

    public static class LineToAbs extends LineTo {

        public LineToAbs( Node node, double x, double y) {
            super( x - node.getLayoutX() + node.getLayoutBounds().getWidth() / 2, y - node.getLayoutY() + node.getLayoutBounds().getHeight() / 2);
        }

    }   

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28194571" questionTitle="Add progress bar in JavaFX table pagination">
<Answer><![CDATA[private Node createPage(int pageIndex) {
    Node oldPlaceHolder = table.getPlaceholder();

    ProgressIndicator progress = new ProgressIndicator();
    progress.setMaxSize(90, 90);
    table.setPlaceholder(new StackPane(progress));
    table.getItems().clear();

    Task<ObservableList<Sample>> task = new Task<ObservableList<Sample>>() {

        @Override
        protected ObservableList<Sample> call() throws Exception {
            for(int i = 0; i < 99; i++)
            {
                Thread.sleep(20);
                updateProgress(i, 100);
            }
            int fromIndex = pageIndex * rowsPerPage;
            int toIndex = Math.min(fromIndex + rowsPerPage, data.size());
            return (FXCollections.observableArrayList(data.subList(
                    fromIndex, toIndex)));
        }
    };

    progress.progressProperty().bind(task.progressProperty());
    task.setOnSucceeded(ev -> {
        table.setItems(task.getValue());
        table.setPlaceholder(oldPlaceHolder);
    });
    new Thread(task).start();

    return new BorderPane(table);
}]]></Answer>
<Answer><![CDATA[public class TableWithProgressIndicator extends Application {

    private final static int dataSize = 10_023;
    private final static int rowsPerPage = 1000;

    private ObservableList<Sample> dataList = FXCollections.observableArrayList(new ArrayList<Sample>(rowsPerPage));
    private TableView<Sample> table = null;


    StackPane tablePane = new StackPane();
    ProgressIndicator progressIndicator = new ProgressIndicator();

    private List<Sample> loadData(int fromIndex, int toIndex) {

        List<Sample> list = new ArrayList<>();

        try {

            for (int i = fromIndex; i < toIndex; i++) {
                list.add(new Sample(i, "foo " + i, "bar " + i));
            }

            Thread.sleep(2000);

        } catch( Exception e) {
            e.printStackTrace();
        }

        return list;
    }


    @Override
    public void start(final Stage stage) throws Exception {

        table = createTable( dataList);

        Pagination pagination = new Pagination((dataSize / rowsPerPage + 1), 0);
        progressIndicator.setMaxSize(200, 200);

        // wrap table and progress indicator into a stackpane, progress indicator is on top of table
        tablePane.getChildren().add(table);
        tablePane.getChildren().add(progressIndicator);

        pagination.setPageFactory(new Callback<Integer, Node>() {

            public Node call(final Integer pageIndex) {

                progressIndicator.setVisible(true);

                dataList.clear();

                // long running background task
                new Thread() {
                    public void run() {

                        try {

                            int fromIndex = pageIndex * rowsPerPage;
                            int toIndex = Math.min(fromIndex + rowsPerPage, dataSize);

                            List<Sample> loadedList = loadData(fromIndex, toIndex);

                            Platform.runLater(() -> dataList.setAll( loadedList));

                        } finally {

                            Platform.runLater(() -> progressIndicator.setVisible(false));

                        }
                    }
                }.start();

                return tablePane;
            }
        });

        Scene scene = new Scene(new BorderPane(pagination), 1024, 768);
        stage.setScene(scene);
        stage.setTitle("Table pager");
        stage.show();
    }

    private TableView<Sample> createTable( ObservableList<Sample> data) {

        TableView<Sample> table = new TableView<>();

        TableColumn<Sample, Integer> column1 = new TableColumn<>("Id");
        column1.setCellValueFactory(param -> param.getValue().id);
        column1.setPrefWidth(150);

        TableColumn<Sample, String> column2 = new TableColumn<>("Foo");
        column2.setCellValueFactory(param -> param.getValue().foo);
        column2.setPrefWidth(250);

        TableColumn<Sample, String> column3 = new TableColumn<>("Bar");
        column3.setCellValueFactory(param -> param.getValue().bar);
        column3.setPrefWidth(250);

        table.getColumns().addAll(column1, column2, column3);

        table.setItems( data);

        table.setPlaceholder(new Label(""));

        return table;
    }

    public static void main(String[] args) throws Exception {
        launch(args);
    }

    public static class Sample {

        private final ObservableValue<Integer> id;
        private final SimpleStringProperty foo;
        private final SimpleStringProperty bar;

        private Sample(int id, String foo, String bar) {
            this.id = new SimpleObjectProperty<>(id);
            this.foo = new SimpleStringProperty(foo);
            this.bar = new SimpleStringProperty(bar);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28169190" questionTitle="JavaFX 2.2 using a second window with FXML">
<Answer><![CDATA[package testmultilevel;

import static java.awt.SystemColor.text;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.beans.property.StringProperty;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class FatherController {

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private Button btnNext;

    @FXML
    private Label label;

    private RootWindowController rootWindow;

    public void setMainWindow(RootWindowController rootWindow){
        this.rootWindow = rootWindow;
    }

    @FXML
    void handleBtnNext(ActionEvent event) {

        System.out.println("Opening the Son Window");
        try {
            openInputWindow(event);
        } catch (IOException ex) {
            Logger.getLogger(RootWindowController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    void initialize() {
        assert btnNext != null : "fx:id=\"btnNext\" was not injected: check your FXML file 'RootWindow.fxml'.";
        assert label != null : "fx:id=\"label\" was not injected: check your FXML file 'RootWindow.fxml'.";

    }

    public void openInputWindow(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("Son.fxml"));
        AnchorPane newWindow = (AnchorPane) loader.load();
        SonController controller = loader.getController();
        controller.setMainWindow(this);
        Stage stage = new Stage();
        stage.setTitle("Son Window");
        stage.initModality(Modality.WINDOW_MODAL);
        stage.initOwner(btnNext.getScene().getWindow());
        Scene scene = new Scene(newWindow);
        stage.setScene(scene);
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[package multiscreeninput;

import java.io.IOException;

import javafx.beans.property.StringProperty;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class MainWindowController {

    @FXML
    Button button;

    @FXML
    Label label;

    public void openInputWindow(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("Child.fxml"));
        VBox newWindow = (VBox)loader.load();
        ChildController controller = loader.getController();
        controller.setMainWindow(this);
        Stage stage = new Stage();
        stage.initModality(Modality.WINDOW_MODAL);
        stage.initOwner(button.getScene().getWindow());
        Scene scene = new Scene(newWindow);
        stage.setScene(scene);
        stage.show();   
    }

    public StringProperty getLabelTextProperty() {
        return label.textProperty();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28055501" questionTitle="How to set a web page while clicking on a button ? with JavaFX">
<Answer><![CDATA[@FXML
private void onpressed (ActionEvent ee) {
     text1.setOnKeyPressed(new EventHandler<KeyEvent>() {
         public void handle(KeyEvent evt) {
       if (evt.getCode() == KeyCode.ENTER){
       String az = text1.getText();
           web1.setVisible(true);
            String hh = text11.getText();
            Socket socket = new Socket();

    try {
        //open cursor
        text1.setCursor(Cursor.WAIT);
        que.setCursor(Cursor.WAIT);
        writ.setCursor(Cursor.WAIT);
        ancpa.setCursor(Cursor.WAIT);
        web1.setCursor(Cursor.WAIT);
        web2.setCursor(Cursor.WAIT);
        web3.setCursor(Cursor.WAIT);
        web4.setCursor(Cursor.WAIT);
        web5.setCursor(Cursor.WAIT);
        web6.setCursor(Cursor.WAIT);
        web7.setCursor(Cursor.WAIT);
        web8.setCursor(Cursor.WAIT);
        web9.setCursor(Cursor.WAIT);
        String urlString = text1.getText().trim();
        WebEngine myWebEngine = web1.getEngine();
        myWebEngine.load(urlString);    
        Stage stage = new Stage();
          Parent root = FXMLLoader.load(getClass().getResource("Choose.fxml"));
          Scene scene = new Scene(root);
         stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
              @Override public void handle(WindowEvent t) { } });
        //close cursor
        ancpa.setCursor(Cursor.DEFAULT);
        web1.setCursor(Cursor.DEFAULT);
        web2.setCursor(Cursor.DEFAULT);
        web3.setCursor(Cursor.DEFAULT);
        web4.setCursor(Cursor.DEFAULT);
        web5.setCursor(Cursor.DEFAULT);
        web6.setCursor(Cursor.DEFAULT);
        web7.setCursor(Cursor.DEFAULT);
        web8.setCursor(Cursor.DEFAULT);
        web9.setCursor(Cursor.DEFAULT);
    }
   catch (IOException e){
       final  Stage stg = new Stage();           
        stg.initModality(Modality.APPLICATION_MODAL);
        stg.initOwner(stg);
        stg.setTitle("Cannot connect to the internet /n Please Verify your connection internet");
        labelno.setText("Cannot connect to the internet...");
        //close chooser
        Stage stage = new Stage();
         stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
              @Override public void handle(WindowEvent t) { } });

       //set cursor
         ancpa.setCursor(Cursor.DEFAULT);
        web1.setCursor(Cursor.DEFAULT);
        web2.setCursor(Cursor.DEFAULT);
        web3.setCursor(Cursor.DEFAULT);
        web4.setCursor(Cursor.DEFAULT);
        web5.setCursor(Cursor.DEFAULT);
        web6.setCursor(Cursor.DEFAULT);
        web7.setCursor(Cursor.DEFAULT);
        web8.setCursor(Cursor.DEFAULT);
        web9.setCursor(Cursor.DEFAULT);
   } finally{
       try{ socket.close(); } catch (Exception e){ }
       }

          } 
         }
         }

 });

}]]></Answer>
<Answer><![CDATA[package application;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class Main extends Application {




@Override
public void start(Stage stage) throws Exception {
    AnchorPane pane = new AnchorPane();
    Scene scene = new Scene(pane);

    final TextField text1 = new TextField();
    WebView web = new WebView();
    final WebEngine webEngine= web.getEngine();
    text1.setOnKeyPressed(new EventHandler<KeyEvent>() {
        public void handle(KeyEvent ke) {
            if (ke.getCode().toString().equalsIgnoreCase("ENTER")) {
                           String urlString = text1.getText().trim();
                           webEngine.load(urlString);

    }
    }
    });
    pane.getChildren().addAll(web,text1);

    stage.setScene(scene);
    stage.sizeToScene();
    stage.show();
}
public static void main(String[] args) {
    Application.launch("application.Main");
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28034432" questionTitle="JavaFX file listview with icon and file name">
<Answer><![CDATA[import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Scene;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;

import javax.swing.filechooser.FileSystemView;

public class ListViewCellFactory2 extends Application {

    ListView<String> list = new ListView<String>();
    ObservableList<String> data = FXCollections.observableArrayList(
            "a.msg", "a1.msg", "b.txt", "c.pdf", 
            "d.html", "e.png", "f.zip",
            "g.docx", "h.xlsx", "i.pptx");

    @Override
    public void start(Stage stage) {
        VBox box = new VBox();
        Scene scene = new Scene(box, 200, 200);
        stage.setScene(scene);
        stage.setTitle("ListViewSample");
        box.getChildren().addAll(list);
        VBox.setVgrow(list, Priority.ALWAYS);

        list.setItems(data);

        list.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
            @Override
            public ListCell<String> call(ListView<String> list) {
                return new AttachmentListCell();
            }
        });

        stage.show();
    }

    private static class AttachmentListCell extends ListCell<String> {
        @Override
        public void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            if (empty) {
                setGraphic(null);
                setText(null);
            } else {
                Image fxImage = getFileIcon(item);
                ImageView imageView = new ImageView(fxImage);
                setGraphic(imageView);
                setText(item);
            }
        }
    }

    public static void main(String[] args) {
        launch(args);
    }


    static HashMap<String, Image> mapOfFileExtToSmallIcon = new HashMap<String, Image>();

    private static String getFileExt(String fname) {
        String ext = ".";
        int p = fname.lastIndexOf('.');
        if (p >= 0) {
            ext = fname.substring(p);
        }
        return ext.toLowerCase();
    }

    private static javax.swing.Icon getJSwingIconFromFileSystem(File file) {

        // Windows {
        FileSystemView view = FileSystemView.getFileSystemView();
        javax.swing.Icon icon = view.getSystemIcon(file);
        // }

        // OS X {
        //final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        //javax.swing.Icon icon = fc.getUI().getFileView(fc).getIcon(file);
        // }

        return icon;
    }

    private static Image getFileIcon(String fname) {
        final String ext = getFileExt(fname);

        Image fileIcon = mapOfFileExtToSmallIcon.get(ext);
        if (fileIcon == null) {

            javax.swing.Icon jswingIcon = null; 

            File file = new File(fname);
            if (file.exists()) {
                jswingIcon = getJSwingIconFromFileSystem(file);
            }
            else {
                File tempFile = null;
                try {
                    tempFile = File.createTempFile("icon", ext);
                    jswingIcon = getJSwingIconFromFileSystem(tempFile);
                }
                catch (IOException ignored) {
                    // Cannot create temporary file. 
                }
                finally {
                    if (tempFile != null) tempFile.delete();
                }
            }

            if (jswingIcon != null) {
                fileIcon = jswingIconToImage(jswingIcon);
                mapOfFileExtToSmallIcon.put(ext, fileIcon);
            }
        }

        return fileIcon;
    }

    private static Image jswingIconToImage(javax.swing.Icon jswingIcon) {
        BufferedImage bufferedImage = new BufferedImage(jswingIcon.getIconWidth(), jswingIcon.getIconHeight(),
                BufferedImage.TYPE_INT_ARGB);
        jswingIcon.paintIcon(null, bufferedImage.getGraphics(), 0, 0);
        return SwingFXUtils.toFXImage(bufferedImage, null);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class FileIconViewer extends Application {

    @Override
    public void start(Stage stage) throws IOException {
        Runnable fetchIcon = () -> {
            File file = null;
            try {
                file = File.createTempFile("icon", ".png");

                // commented code always returns the same icon on OS X...
                // FileSystemView view = FileSystemView.getFileSystemView();
                // javax.swing.Icon icon = view.getSystemIcon(file);

                // following code returns different icons for different types on OS X...
                final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
                javax.swing.Icon icon = fc.getUI().getFileView(fc).getIcon(file);

                BufferedImage bufferedImage = new BufferedImage(
                    icon.getIconWidth(), 
                    icon.getIconHeight(), 
                    BufferedImage.TYPE_INT_ARGB
                );
                icon.paintIcon(null, bufferedImage.getGraphics(), 0, 0);

                Platform.runLater(() -> {
                    Image fxImage = SwingFXUtils.toFXImage(
                        bufferedImage, null
                    );
                    ImageView imageView = new ImageView(fxImage);
                    stage.setScene(
                        new Scene(
                            new StackPane(imageView), 
                            200, 200
                        )
                    );
                    stage.show();
                });
            } catch (IOException e) {
                e.printStackTrace();
                Platform.exit();
            } finally {
                if (file != null) {
                    file.delete();
                }
            }
        };

        javax.swing.SwingUtilities.invokeLater(fetchIcon);
    }

    public static void main(String[] args) { launch(args); }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28003576" questionTitle="KeyEvent in JavaFX (KeyPressed) cannot fixed">
<Answer><![CDATA[package application;

import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;

public class MainControl implements Initializable {
@FXML
TextField text1;
public void initialize(URL arg0, ResourceBundle arg1) {// Initializes
                                                        // everything
    text1.setOnKeyPressed(new EventHandler<KeyEvent>() {// Keyboard                                             // commands
        public void handle(KeyEvent ke) {
            if (ke.getCode().toString().equalsIgnoreCase("ENTER")) {
            //do something

    }   
    }
    });



}
}]]></Answer>
<Answer><![CDATA[class TerminalTextField extends TextField {

    ArrayList<String> arrayList = new ArrayList<>();
    int sizeOfList = 10;
    int keyPoint;

    public TerminalTextField() {
        setField();
    }

    public TerminalTextField(String text) {
        super(text);
        setField();
    }

    private void setField() {
        setOnKeyReleased(new EventHandler<KeyEvent>() {

            @Override
            public void handle(KeyEvent event) {
                if (event.getCode().isLetterKey()) {
                    setText(getText().toString().toUpperCase());
                    positionCaret(getLength());
                }
            }
        });
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27991069" questionTitle="JavaEE - Singleton EJB Timer doesn't work">
<Answer><![CDATA[import javax.ejb.Schedule;
import javax.ejb.Singleton;
import org.slf4j.LoggerFactory;

@Singleton
public class Timer {
    public Timer () {
        LoggerFactory.getLogger(this.getClass()).info("Starting timer");
    }

    @Schedule (persistent = false, second = "*", minute = "*", hour = "*")
    private void second () {
        LoggerFactory.getLogger(this.getClass()).info("Second");
    }

    @Schedule (persistent = false, second = "*/2", minute = "*", hour = "*", info = "Second Second")
    private void secondSecond () {
        LoggerFactory.getLogger(this.getClass()).info("Second Second");
    }

    @Schedule (persistent = false, second = "*/3", minute = "*", hour = "*")
    private void thirdSecond () {
        LoggerFactory.getLogger(this.getClass()).info("Third Second");
    }
}]]></Answer>
<Answer><![CDATA[package com.mycompany.mavenproject2;

import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.Timeout;
import javax.ejb.TimerConfig;
import javax.ejb.TimerService;

@Startup
@Singleton
public class NewSessionBean {

    @Resource
    private TimerService ts;

    @PostConstruct
    public void init() {
        final TimerConfig tc = new TimerConfig();
        tc.setPersistent(false);
        ts.createIntervalTimer(0, 5000, tc);
    }

    @Timeout
    public void timeout() {
        Logger.getLogger(NewSessionBean.class.getName()).severe("==> timeout called...");
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27977235" questionTitle="Mouse drag gesture">
<Answer><![CDATA[import javafx.event.Event;
import javafx.scene.SnapshotParameters;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

import java.awt.Point;
import java.awt.MouseInfo;

public class CircleDrag extends Circle {
    private final String name;
    private int count = 0;

    public CircleDrag(double centerX, double centerY, String name) {
        super(centerX, centerY, 10);
        this.name = name;

        setOnDragDetected(e -> {
            ClipboardContent content = new ClipboardContent();
            content.putString(name);

            Dragboard dragboard = startDragAndDrop(TransferMode.ANY);
            dragboard.setContent(content);
            SnapshotParameters params = new SnapshotParameters();
            params.setFill(Color.TRANSPARENT);
            dragboard.setDragView(snapshot(params, null));
            dragboard.setDragViewOffsetX(dragboard.getDragView().getWidth() / 2);
            dragboard.setDragViewOffsetY(dragboard.getDragView().getHeight() / 2);

            setVisible(false);
            e.consume();

            logIt(e);
        });

        setOnDragEntered(this::logIt);

        setOnDragDone(e ->
        {
            Point p = MouseInfo.getPointerInfo().getLocation();
            relocate(
                    p.x - getScene().getWindow().getX() - getScene().getX() - getRadius(),
                    p.y - getScene().getWindow().getY() - getScene().getY() - getRadius()
            );
            setVisible(true);
            logIt(e);
        });

        setOnDragDropped(e -> {
            Dragboard db = e.getDragboard();
            System.out.println("Dropped: " + db.getString() + " on " + name);
            e.setDropCompleted(true);
            e.consume();

            logIt(e);
        });

        setOnDragOver(e -> {
            if (e.getGestureSource() != this) {
                e.acceptTransferModes(TransferMode.ANY);
                logIt(e);
            }
            e.consume();
        });
    }

    private void logIt(Event e) {
        System.out.printf("%05d %s: %s\n", count++, name, e.getEventType().getName());
    }

}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class PhysicsTest extends Application {

    public static List<Circle> circles = new ArrayList<Circle>();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        Group root = new Group();

        Circle circle1 = new Circle( 50);
        circle1.setStroke(Color.GREEN);
        circle1.setFill(Color.GREEN.deriveColor(1, 1, 1, 0.3));
        circle1.relocate(100, 100);

        Circle circle2 = new Circle( 50);
        circle2.setStroke(Color.BLUE);
        circle2.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.3));
        circle2.relocate(200, 200);


        MouseGestures mg = new MouseGestures();
        mg.makeDraggable( circle1);
        mg.makeDraggable( circle2);

        circles.add( circle1);
        circles.add( circle2);

        root.getChildren().addAll(circle1, circle2);

        primaryStage.setScene(new Scene(root, 1600, 900));
        primaryStage.show();
    }



public static class MouseGestures {

    double orgSceneX, orgSceneY;
    double orgTranslateX, orgTranslateY;

    public void makeDraggable( Node node) {
        node.setOnMousePressed(circleOnMousePressedEventHandler);
        node.setOnMouseDragged(circleOnMouseDraggedEventHandler);
    }

    EventHandler<MouseEvent> circleOnMousePressedEventHandler = new EventHandler<MouseEvent>() {

        @Override
        public void handle(MouseEvent t) {

            orgSceneX = t.getSceneX();
            orgSceneY = t.getSceneY();

            Circle p = ((Circle) (t.getSource()));

            orgTranslateX = p.getCenterX();
            orgTranslateY = p.getCenterY();
        }
    };

    EventHandler<MouseEvent> circleOnMouseDraggedEventHandler = new EventHandler<MouseEvent>() {

        @Override
        public void handle(MouseEvent t) {

            double offsetX = t.getSceneX() - orgSceneX;
            double offsetY = t.getSceneY() - orgSceneY;

            double newTranslateX = orgTranslateX + offsetX;
            double newTranslateY = orgTranslateY + offsetY;

            Circle p = ((Circle) (t.getSource()));

            p.setCenterX(newTranslateX);
            p.setCenterY(newTranslateY);

            for( Circle c: circles) {

                if( c == p)
                    continue;

                if( c.getBoundsInParent().intersects(p.getBoundsInParent())) {
                    System.out.println( "Overlapping!");
                }
            }
        }
    };

}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27966329" questionTitle="Execute code in seperate class when boolean changes">
<Answer><![CDATA[package propertydemo;

import javafx.beans.value.ObservableValue;
import javafx.beans.value.ChangeListener;

public class Main {

public static void main(String[] args) {

  Bill electricBill = new Bill();

   electricBill.amountDueProperty().addListener(new ChangeListener(){
    @Override public void changed(ObservableValue o,Object oldVal, 
             Object newVal){
         System.out.println("Electric bill has changed!");
    }
  });

  electricBill.setAmountDue(100.00);

}
}]]></Answer>
<Answer><![CDATA[public class Question {

    public enum State {UNANSWERED, CORRECT, INCORRECT} 

    private final ReadOnlyObjectWrapper<State> state 
        = new ReadOnlyObjectWrapper<>(State.UNANSWERED);

    public ReadOnlyObjectProperty<State> stateProperty() {
        return state.getReadOnlyProperty() ;
    }

    public final State getState() {
        return stateProperty().get();
    }

    private Button button ;

    public Question() {
        // ...
        button = new Button(...);
        button.setOnAction( event -> {
            if (checkAnswer()) {
               state.set(State.CORRECT);
            } else {
               state.set(State.INCORRECT);
            }
        });
        // etc..

    }

    public void showWindow() {
        // display window with question and controls, etc...
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27925954" questionTitle="Is Arrays.stream(array_name).sum() slower than iterative approach?">
<Answer><![CDATA[@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.MICROSECONDS)
@State(Scope.Benchmark)
public class ArraySum {
    static final long SEED = -897234L;

    @Param({"1000000"})
    int sz;

    int[] array;

    @Setup
    public void setup() {
        Random random = new Random(SEED);
        array = new int[sz];
        Arrays.setAll(array, i -> random.nextInt());
    }

    @Benchmark
    public int sumForLoop() {
        int sum = 0;
        for (int a : array)
            sum += a;
        return sum;
    }

    @Benchmark
    public int sumStream() {
        return Arrays.stream(array).sum();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.util.function.*;

public class StreamingBenchmark {

    private static void benchmark(String name, LongSupplier f) {
       long start = System.currentTimeMillis(), sum = 0;
       for(int count = 0; count < 1000; count ++) sum += f.getAsLong();
       System.out.println(String.format(
           "%10s in  %d millis. Sum = %d", 
            name, System.currentTimeMillis() - start, sum
       ));
    }

    public static void main(String argv[]) {
        int data[] = new int[1000000];
        Random randy = new Random();
        for(int i = 0; i < data.length; i++) data[i] = randy.nextInt();

        benchmark("iterative", () -> { int s = 0; for(int n: data) s+=n; return s; });
        benchmark("stream", () -> Arrays.stream(data).sum());
        benchmark("parallel", () -> Arrays.stream(data).parallel().sum());

    }
}]]></Answer>
<Answer><![CDATA[public class SumTester {
    private static final int ARRAY_SIZE = 100_000_000;
    private static final int ITERATION_LIMIT = 100;
    private static final int INT_VALUE_LIMIT = 4096;

    public static void main(String[] args) {
        Random random = new Random();
        int[] numbers = new int[ARRAY_SIZE];
        IntStream.range(0, ARRAY_SIZE).forEach(i->numbers[i] = random.nextInt(INT_VALUE_LIMIT));

        Map<String, ToLongFunction<int[]>> inputs = new HashMap<String, ToLongFunction<int[]>>();

        NanoTimer initializer = NanoTimer.start();
        System.out.println("initialized NanoTimer in " + initializer.microEnd() + " microseconds");

        inputs.put("sumByStream", SumTester::sumByStream);
        inputs.put("sumByIteration", SumTester::sumByIteration);
        inputs.put("sumByForLoop", SumTester::sumByForLoop);

        System.out.println("Parallelables: ");
        averageTimeFor(ITERATION_LIMIT, inputs, Arrays.copyOf(numbers, numbers.length));

        int cores = Runtime.getRuntime().availableProcessors();
        List<CancelableThreadEater> threadEaters = new ArrayList<CancelableThreadEater>();
        if (cores > 1){
            threadEaters = occupyThreads(cores - 1);
        }
        // Only one core should be left to our class
        System.out.println("\nSingleCore (" + threadEaters.size() + " of " + cores + " cores occupied)");
        averageTimeFor(ITERATION_LIMIT, inputs, Arrays.copyOf(numbers, numbers.length));
        for (CancelableThreadEater cte : threadEaters){
            cte.end();
        }
        System.out.println("Complete!");
    }

    public static long sumByStream(int[] numbers){
        return Arrays.stream(numbers).sum();
    }

    public static long sumByIteration(int[] numbers){
        int total = 0;
        for (int i : numbers){
            total += i;
        }
        return total;
    }

    public static long sumByForLoop(int[] numbers){
        int total = 0;
        for (int i = 0; i < numbers.length; i++){
            total += numbers[i];
        }
        return total;       
    }

    public static void averageTimeFor(int iterations, Map<String, ToLongFunction<int[]>> testMap, int[] numbers){
        Map<String, Long> durationMap = new HashMap<String, Long>();
        Map<String, Long> sumMap = new HashMap<String, Long>();
        for (String methodName : testMap.keySet()){
            durationMap.put(methodName, 0L);
            sumMap.put(methodName, 0L);
        }
        for (int i = 0; i < iterations; i++){
            for (String methodName : testMap.keySet()){
                int[] newNumbers = Arrays.copyOf(numbers, ARRAY_SIZE);
                ToLongFunction<int[]> function = testMap.get(methodName);
                NanoTimer nt = NanoTimer.start();
                long sum = function.applyAsLong(newNumbers);
                long duration = nt.microEnd();
                sumMap.put(methodName, sum);
                durationMap.put(methodName, durationMap.get(methodName) + duration);
            }
        }
        for (String methodName : testMap.keySet()){
            long duration = durationMap.get(methodName) / iterations;
            long sum = sumMap.get(methodName);
            System.out.println(methodName + ": result '" + sum + "', elapsed time: " + duration + " milliseconds on average over " + iterations + " iterations");
        }
    }

    private static List<CancelableThreadEater> occupyThreads(int numThreads){
        List<CancelableThreadEater> result = new ArrayList<CancelableThreadEater>();
        for (int i = 0; i < numThreads; i++){
            CancelableThreadEater cte = new CancelableThreadEater();
            result.add(cte);
            new Thread(cte).start();
        }
        return result;
    }

    private  static class CancelableThreadEater implements Runnable {
        private Boolean stop = false;
        public void run(){
            boolean canContinue = true;
            while (canContinue){
                synchronized(stop){
                    if (stop){
                        canContinue = false;
                    }
                }
            }           
        }

        public void end(){
            synchronized(stop){
                stop = true;
            }
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27925742" questionTitle="How to compute average of multiple numbers in sequence using Java 8 lambda">
<Answer><![CDATA[static <T, A1, A2, D1, D2> Collector<T, Tuple2<A1, A2>, Tuple2<D1, D2>> collectors(
    Collector<T, A1, D1> collector1
  , Collector<T, A2, D2> collector2
) {
    return Collector.of(
        () -> tuple(
            collector1.supplier().get()
          , collector2.supplier().get()
        ),
        (a, t) -> {
            collector1.accumulator().accept(a.v1, t);
            collector2.accumulator().accept(a.v2, t);
        },
        (a1, a2) -> tuple(
            collector1.combiner().apply(a1.v1, a2.v1)
          , collector2.combiner().apply(a1.v2, a2.v2)
        ),
        a -> tuple(
            collector1.finisher().apply(a.v1)
          , collector2.finisher().apply(a.v2)
        )
    );
}]]></Answer>
<Answer><![CDATA[public class AggregatePoints {

    private long count = 0L;
    private double sumX = 0;
    private double sumY = 0;

    public double averageX() { 
        return sumX / count; 
    }

    public double averageY() { 
        return sumY / count; 
    }

    public void merge(AggregatePoints other) {
      count += other.count;
      sumX += other.sumX;
      sumY += other.sumY;
    }

    public void add(Point2D.Float point) {
      count += 1;
      sumX += point.getX();
      sumY += point.getY();
    }
}]]></Answer>
<Answer><![CDATA[// = 2
List.of(1, 2, 3, 4).average();

// = 2.5
List.of(1.0, 2.0, 3.0, 4.0).average();

// = BigDecimal("0.5")
List.of(BigDecimal.ZERO, BigDecimal.ONE).average();

// = UnsupportedOpertationException("average of nothing")
List.nil().average();

// = UnsupportedOpertationException("not numeric")
List.of("1", "2", "3").average();

// works well with java.util collections
final java.util.Set<Integer> set = new java.util.HashSet<>();
set.add(1);
set.add(2);
set.add(3);
set.add(4);
List.of(set).average(); // = 2]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27886650" questionTitle="TableView ScrollBar Policy">
<Answer><![CDATA[public static void alwaysShowVerticalScroll(final TableView view) {
    new Thread(() -> {
        while (true) {
            Set<Node> nodes = view.lookupAll(".scroll-bar");
            if (nodes.isEmpty()) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ignore) {
                }
                continue;
            }
            Node node = view.lookup(".virtual-flow");
            if (node == null) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ignore) {
                }
                continue;
            }
            final VirtualFlow flow = (VirtualFlow) node;
            for (Node n : nodes) {
                if (n instanceof ScrollBar) {
                    final ScrollBar bar = (ScrollBar) n;
                    if (bar.getOrientation().equals(Orientation.VERTICAL)) {
                        bar.visibleProperty().addListener(l -> {
                            if (bar.isVisible()) {
                                return;
                            }
                            Field f = getVirtualFlowField("needLengthBar");
                            Method m = getVirtualFlowMethod("updateViewportDimensions");
                            try {
                                f.setBoolean(flow, true);
                                m.invoke(flow);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            bar.setVisible(true);
                        });
                        Platform.runLater(() -> {
                            bar.setVisible(true);
                        });
                        break;
                    }
                }
            }
            break;
        }
    }).start();
}

private static Field getVirtualFlowField(String name) {
    Field field = null;
    try {
        field = VirtualFlow.class.getDeclaredField(name);
        field.setAccessible(true);
    } catch (NoSuchFieldException e) {
        e.printStackTrace();
    }
    return field;
}

private static Method getVirtualFlowMethod(String name) {
    Method m = null;
    try {
        m = VirtualFlow.class.getDeclaredMethod(name);
        m.setAccessible(true);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return m;
}]]></Answer>
<Answer><![CDATA[public class OneRowTableView<S> extends TableView<S>{

@Override 
protected Skin<?> createDefaultSkin() {
    return new OneRowTableViewSkin<S>(this);
}
public class OneRowTableViewSkin<T> extends TableViewSkin<T> {
    public OneRowTableViewSkin(final TableView<T> tableView) {
        super(tableView);
        VirtualScrollBar vBar = null;
        for(Node child : flow.getChildrenUnmodifiable()){
            if(child instanceof VirtualScrollBar){
                if(((VirtualScrollBar)child).getOrientation() == Orientation.VERTICAL){
                    Log.d("Found the vertical scroll bar!");
                    vBar = (VirtualScrollBar) child;
                }
            }
        }
        if(vBar == null) return;
        vBar.addEventFilter(MouseEvent.MOUSE_PRESSED, new EventHandler() {

            @Override
            public void handle(Event event) {
                Log.d("Suppressing mouse pressing on the Vertical Virtual Scroll Bar");
                event.consume();
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27808210" questionTitle="Java FX SplitPane">
<Answer><![CDATA[class ResizableCanvas extends Pane {

    private final int id;
    private final Canvas canvas = new Canvas();

    public ResizableCanvas(int id) {
        this.id=id;
        getChildren().add(canvas);
    }

    @Override
    protected void layoutChildren() {
        final int top = (int)snappedTopInset();
        final int right = (int)snappedRightInset();
        final int bottom = (int)snappedBottomInset();
        final int left = (int)snappedLeftInset();
        final int w = (int)getWidth() - left - right;
        final int h = (int)getHeight() - top - bottom;
        canvas.setLayoutX(left);
        canvas.setLayoutY(top);
        if (w != canvas.getWidth() || h != canvas.getHeight()) {
            canvas.setWidth(w);
            canvas.setHeight(h);
            GraphicsContext gc = canvas.getGraphicsContext2D();
            gc.clearRect(0, 0, w, h);
            if(id==1){
                gc.setFill(Color.BLUE);                
                gc.fillOval(5, 5, w-10, h-10);
            } else {
                gc.setFill(Color.RED);
                gc.fillRect(10, 10, w-20, h-20);
            } 
        }
    }
}

@Override
public void start(Stage stage) throws Exception {
    ResizableCanvas canvas1 = new ResizableCanvas(1);
    ResizableCanvas canvas2 = new ResizableCanvas(2);

    SplitPane split = new SplitPane();
    split.getItems().addAll(canvas1,canvas2);

    stage.setScene(new Scene(split, 600, 400));
    stage.show();
}]]></Answer>
<Answer><![CDATA[package experimental;

import javafx.application.Application;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.SplitPane;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

public class SplitPaneProblem extends Application {

    static public void main(String[] args) {launch(args);}

    public SplitPaneProblem() { }

    @Override
    public void start(Stage primaryStage) throws Exception {
        SplitPane splitPane = new SplitPane();
        splitPane.setOrientation(Orientation.VERTICAL);
        splitPane.getItems().add(new TestPane("0",new Canvas()));
        splitPane.getItems().add(new TestPane("1",new Canvas()));
        primaryStage.setScene(new Scene(splitPane));
        primaryStage.setHeight(400);
        primaryStage.setWidth(400);
        primaryStage.show();
    }

    public class TestPane extends AnchorPane {

        String name;
        Canvas canvas;

        public TestPane(String name,Canvas canvas) {
            super();
            this.canvas = canvas;
            getChildren().add(canvas);
//1         canvas.setManaged(false);
            this.name = name;
        }

        @Override
        public void resize(double width,double height) {
            System.out.println(name+" input  "+width+' '+height);
            super.resize(width, height);
            System.out.println(name+" panel  "+getWidth()+' '+getHeight());
//0         canvas.setWidth (width);
//0         canvas.setHeight(height);
            System.out.println(name+" canvas "+canvas.getWidth()+' '+canvas.getHeight());
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27746622" questionTitle="JavaFx 8 Bidirectional binding">
<Answer><![CDATA[public final class NumberBiBinding {

   public static void bind(
      Property<Number> operand1,
      NumberBinding    operator1,
      Property<Number> operand2,
      NumberBinding    operator2  )
   {
      assert operand1 != operand2;
      operand1.addListener( o -> operand2.setValue( operator1.getValue()));
      operand2.addListener( o -> operand1.setValue( operator2.getValue()));
   }
}

public final class Test {

   public static void main( String[] args ) {
      final DoubleProperty amount = new SimpleDoubleProperty( 100_000.00 );
      final DoubleProperty rate   = new SimpleDoubleProperty();
      final DoubleProperty part   = new SimpleDoubleProperty();

      NumberBiBinding.bind(
         rate, rate.multiply( amount ),
         part, part.divide  ( amount ));

      System.out.println( "Amount: " + amount.get());
      rate.set( 0.025 );
      System.out.println(
        "Part is " + part.get() + " when rate is set to " + rate.get());
      part.set( 1200 );
      System.out.println(
         "Rate is " + rate.get() + " when part is set to " + part.get());
   }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {
    final DoubleProperty amount = new SimpleDoubleProperty(100_000.00);
    final DoubleProperty part = new SimpleDoubleProperty();
    final DoubleProperty rate = new SimpleDoubleProperty();

    part.addListener(new InvalidationListener() {
        @Override
        public void invalidated(Observable observable) {
            System.out.println("part is invalid");
            rate.set(part.get() / amount.get());
        }
    });

    rate.addListener(new InvalidationListener() {
        @Override
        public void invalidated(Observable observable) {
            System.out.println("rate is invalid");
            part.set(rate.get() * amount.get());
        }
    });

    System.out.println("setting rate");
    rate.set(0.025);
    System.out.println("Part: " + part.get()); //2500

    System.out.println("setting part");
    part.set(1200);
    System.out.println("Rate: " + rate.get()); //0.012
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27739833" questionTitle="Adapt TableView menu button">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import com.sun.javafx.scene.control.skin.TableHeaderRow;
import com.sun.javafx.scene.control.skin.TableViewSkin;

import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.geometry.Side;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.CustomMenuItem;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Region;

/**
 * Helper class to replace default column selection popup for TableView.
 *
 * <p>
 * The original idea credeted to Roland and was found on
 * {@link http://stackoverflow.com/questions/27739833/adapt-tableview-menu-button}
 * </p>
 * <p>
 * This improved version targets to solve several problems:
 * <ul>
 * <li>avoid to have to assign the TableView with the new context menu after the
 * window shown (it could cause difficulty when showAndWait() should be used. It
 * solves the problem by registering the onShown event of the containing Window.
 * </li>
 * <li>corrects the mispositioning bug when clicking the + button while the menu
 * is already on.</li>
 * <li>works using keyboard</li>
 * <li>possibility to add additional menu items</li>
 * </ul>
 * </p>
 * <p>
 * Usage from your code:
 *
 * <pre>
 * contextMenuHelper = new TableViewContextMenuHelper(this);
 * // Adding additional menu items
 * MenuItem exportMenuItem = new MenuItem("Export...");
 * contextMenuHelper.getAdditionalMenuItems().add(exportMenuItem);
 * </pre>
 * </p>
 *
 * @author Roland
 * @author bvissy
 *
 */
public class TableViewContextMenuHelper {

    private TableView<?> tableView;
    private ContextMenu columnPopupMenu;

    private boolean showAllColumnsOperators = true;

    private List<MenuItem> additionalMenuItems = new ArrayList<>();

    // Default key to show menu: Shortcut + Shift + Space
    private Function<KeyEvent, Boolean> showMenuByKeyboardCheck = 
        ke -> ke.getCode().equals(KeyCode.SPACE) && ke.isShortcutDown() && ke.isShiftDown();


    public TableViewContextMenuHelper(TableView<?> tableView) {
        super();
        this.tableView = tableView;

        // Hooking at the event when the whole window is shown 
        // and then implementing the event handler assignment
        tableView.sceneProperty().addListener(i -> {

            tableView.getScene().windowProperty().addListener(i2 -> {
                tableView.getScene().getWindow().setOnShown(i3 -> {
                    tableView.tableMenuButtonVisibleProperty().addListener((ob, o, n) -> {
                        if (n == true) {
                            registerListeners();
                        }
                    });
                    if (tableView.isTableMenuButtonVisible()) {
                        registerListeners();
                    }

                });

            });
        });
    }

    /**
     * Registers the listeners.
     */
    private void registerListeners() {
        final Node buttonNode = findButtonNode();

        // Keyboard listener on the table
        tableView.addEventHandler(KeyEvent.KEY_PRESSED, ke -> {
            if (showMenuByKeyboardCheck.apply(ke)) {
                showContextMenu();
                ke.consume();
            }
        });

        // replace mouse listener on "+" node
        buttonNode.setOnMousePressed(me -> {
            showContextMenu();
            me.consume();

        });

    }

    protected void showContextMenu() {
        final Node buttonNode = findButtonNode();

        setFixedHeader();

        // When the menu is already shown clicking the + button hides it.
        if (columnPopupMenu != null) {
            columnPopupMenu.hide();
        } else {
            // Show the menu
            final ContextMenu newColumnPopupMenu = createContextMenu();
            newColumnPopupMenu.setOnHidden(ev -> {
                columnPopupMenu = null;
            });
            columnPopupMenu = newColumnPopupMenu;
            columnPopupMenu.show(buttonNode, Side.BOTTOM, 0, 0);
            // Repositioning the menu to be aligned by its right side (keeping inside the table view)
            columnPopupMenu.setX(
                buttonNode.localToScreen(buttonNode.getBoundsInLocal()).getMaxX() 
                - columnPopupMenu.getWidth());
        }
    }



    private void setFixedHeader() {
        // setting the preferred height for the table header row
        // if the preferred height isn't set, then the table header would disappear if there are no visible columns
        // and with it the table menu button
        // by setting the preferred height the header will always be visible
        // note: this may need adjustments in case you have different heights in columns (eg when you use grouping)
        Region tableHeaderRow = getTableHeaderRow();
        double defaultHeight = tableHeaderRow.getHeight();
        tableHeaderRow.setPrefHeight(defaultHeight);
    }

    private Node findButtonNode() {
        TableHeaderRow tableHeaderRow = getTableHeaderRow();
        if (tableHeaderRow == null) {
            return null;
        }

        for (Node child : tableHeaderRow.getChildren()) {

            // child identified as cornerRegion in TableHeaderRow.java
            if (child.getStyleClass().contains("show-hide-columns-button")) {
                return child;
            }
        }
        return null;
    }

    private TableHeaderRow getTableHeaderRow() {
        TableViewSkin<?> tableSkin = (TableViewSkin<?>) tableView.getSkin();
        if (tableSkin == null) {
            return null;
        }

        // get all children of the skin
        ObservableList<Node> children = tableSkin.getChildren();

        // find the TableHeaderRow child
        for (int i = 0; i < children.size(); i++) {

            Node node = children.get(i);

            if (node instanceof TableHeaderRow) {
                return (TableHeaderRow) node;
            }
        }
        return null;
    }


    /**
     * Create a menu with custom items. The important thing is that the menu
     * remains open while you click on the menu items.
     *
     * @param cm
     * @param table
     */
    private ContextMenu createContextMenu() {

        ContextMenu cm = new ContextMenu();

        // create new context menu
        CustomMenuItem cmi;

        if (showAllColumnsOperators) {
            // select all item
            Label selectAll = new Label("Select all");
            selectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> doSelectAll(event));

            cmi = new CustomMenuItem(selectAll);
            cmi.setOnAction(e -> doSelectAll(e));
            cmi.setHideOnClick(false);
            cm.getItems().add(cmi);

            // deselect all item
            Label deselectAll = new Label("Deselect all");
            deselectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> doDeselectAll(event));

            cmi = new CustomMenuItem(deselectAll);
            cmi.setOnAction(e -> doDeselectAll(e));
            cmi.setHideOnClick(false);
            cm.getItems().add(cmi);

            // separator
            cm.getItems().add(new SeparatorMenuItem());
        }

        // menu item for each of the available columns
        for (Object obj : tableView.getColumns()) {

            TableColumn<?, ?> tableColumn = (TableColumn<?, ?>) obj;

            CheckBox cb = new CheckBox(tableColumn.getText());
            cb.selectedProperty().bindBidirectional(tableColumn.visibleProperty());

            cmi = new CustomMenuItem(cb);
            cmi.setOnAction(e -> {
                cb.setSelected(!cb.isSelected());
                e.consume();
            });
            cmi.setHideOnClick(false);

            cm.getItems().add(cmi);
        }

        if (!additionalMenuItems.isEmpty()) {
            cm.getItems().add(new SeparatorMenuItem());
            cm.getItems().addAll(additionalMenuItems);
        }

        return cm;
    }

    protected void doDeselectAll(Event e) {
        for (Object obj : tableView.getColumns()) {
            ((TableColumn<?, ?>) obj).setVisible(false);
        }
        e.consume();
    }

    protected void doSelectAll(Event e) {
        for (Object obj : tableView.getColumns()) {
            ((TableColumn<?, ?>) obj).setVisible(true);
        }
        e.consume();
    }

    public boolean isShowAllColumnsOperators() {
        return showAllColumnsOperators;
    }

    /**
     * Sets whether the Select all/Deselect all buttons are visible
     *
     * @param showAllColumnsOperators
     */
    public void setShowAllColumnsOperators(boolean showAllColumnsOperators) {
        this.showAllColumnsOperators = showAllColumnsOperators;
    }

    public List<MenuItem> getAdditionalMenuItems() {
        return additionalMenuItems;
    }

    public Function<KeyEvent, Boolean> getShowMenuByKeyboardCheck() {
        return showMenuByKeyboardCheck;
    }

    /**
     * Overrides the keypress check to show the menu. Default is Shortcut +
     * Shift + Space.
     *
     * <p>
     * To disable keyboard shortcut use the <code>e -> false</code> function.
     * </p>
     *
     * @param showMenuByKeyboardCheck
     */
    public void setShowMenuByKeyboardCheck(Function<KeyEvent, Boolean> showMenuByKeyboardCheck) {
        this.showMenuByKeyboardCheck = showMenuByKeyboardCheck;
    }

}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;

import com.sun.javafx.scene.control.skin.TableHeaderRow;
import com.sun.javafx.scene.control.skin.TableViewSkin;

import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.geometry.Side;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.CustomMenuItem;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Region;

public class TableViewContextMenuHelper {

  private Set<String> turnedOff = new HashSet<>();

  private TableView<?> tableView;
  private ContextMenu columnPopupMenu;

  private boolean showAllColumnsOperators = true;

  private List<MenuItem> additionalMenuItems = new ArrayList<>();

  // Default key to show menu: Shortcut + Shift + Space
  private Function<KeyEvent, Boolean> showMenuByKeyboardCheck = 
      ke -> ke.getCode().equals(KeyCode.SPACE) && ke.isShortcutDown() && ke.isShiftDown();


  public TableViewContextMenuHelper(TableView<?> tableView) {
      super();
      this.tableView = tableView;

      tableView.skinProperty().addListener((a, b, newSkin) -> {
        tableView.tableMenuButtonVisibleProperty().addListener((ob, o, n) -> {
            if (n == true) {
                registerListeners();
            }
        });
        if (tableView.isTableMenuButtonVisible()) {
            registerListeners();
        }
    });

  }

  /**
   * Registers the listeners.
   */
  private void registerListeners() {
      final Node buttonNode = findButtonNode();

      // Keyboard listener on the table
      tableView.addEventHandler(KeyEvent.KEY_PRESSED, ke -> {
          if (showMenuByKeyboardCheck.apply(ke)) {
              showContextMenu();
              ke.consume();
          }
      });

      // replace mouse listener on "+" node
      buttonNode.setOnMousePressed(me -> {
          showContextMenu();
          me.consume();

      });

      tableView.getColumns().addListener(new ListChangeListener<TableColumn<?,?>>(){

        @Override
        public void onChanged(javafx.collections.ListChangeListener.Change<? extends TableColumn<?, ?>> c) {
          while(c.next()){
          if(c.getAddedSize()>0){
            // hide "turned off" columns
            for(TableColumn<?, ?> tc:c.getAddedSubList()){              
              if(turnedOff.contains(tc.getText())){
                tc.setVisible(false);
              }

            }
          }
        }
        }
      });

  }

  protected void showContextMenu() {
      final Node buttonNode = findButtonNode();

      setFixedHeader();

      // When the menu is already shown clicking the + button hides it.
      if (columnPopupMenu != null) {
          columnPopupMenu.hide();
      } else {
          // Show the menu
          final ContextMenu newColumnPopupMenu = createContextMenu();
          newColumnPopupMenu.setOnHidden(ev -> {
              columnPopupMenu = null;
          });
          columnPopupMenu = newColumnPopupMenu;
          columnPopupMenu.show(buttonNode, Side.BOTTOM, 0, 0);
          // Repositioning the menu to be aligned by its right side (keeping inside the table view)
          columnPopupMenu.setX(
              buttonNode.localToScreen(buttonNode.getBoundsInLocal()).getMaxX() 
              - columnPopupMenu.getWidth());
      }
  }



  private void setFixedHeader() {
      // setting the preferred height for the table header row
      // if the preferred height isn't set, then the table header would disappear if there are no visible columns
      // and with it the table menu button
      // by setting the preferred height the header will always be visible
      // note: this may need adjustments in case you have different heights in columns (eg when you use grouping)
      Region tableHeaderRow = getTableHeaderRow();
      double defaultHeight = tableHeaderRow.getHeight();
      tableHeaderRow.setPrefHeight(defaultHeight);
  }

  private Node findButtonNode() {
      TableHeaderRow tableHeaderRow = getTableHeaderRow();
      if (tableHeaderRow == null) {
          return null;
      }

      for (Node child : tableHeaderRow.getChildren()) {

          // child identified as cornerRegion in TableHeaderRow.java
          if (child.getStyleClass().contains("show-hide-columns-button")) {
              return child;
          }
      }
      return null;
  }

  private TableHeaderRow getTableHeaderRow() {
      TableViewSkin<?> tableSkin = (TableViewSkin<?>) tableView.getSkin();
      if (tableSkin == null) {
          return null;
      }

      // get all children of the skin
      ObservableList<Node> children = tableSkin.getChildren();

      // find the TableHeaderRow child
      for (int i = 0; i < children.size(); i++) {
          Node node = children.get(i);
          if (node instanceof TableHeaderRow) {
              return (TableHeaderRow) node;
          }
      }
      return null;
  }


  /**
   * Create a menu with custom items. The important thing is that the menu
   * remains open while you click on the menu items.
   *
   * @param cm
   * @param table
   */
  private ContextMenu createContextMenu() {

      ContextMenu cm = new ContextMenu();

      // create new context menu
      CustomMenuItem cmi;

      if (showAllColumnsOperators) {
          // select all item
          Label selectAll = new Label("Select all");
          selectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> doSelectAll(event));

          cmi = new CustomMenuItem(selectAll);
          cmi.setOnAction(e -> doSelectAll(e));
          cmi.setHideOnClick(false);
          cm.getItems().add(cmi);

          // deselect all item
          Label deselectAll = new Label("Deselect all");
          deselectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> doDeselectAll(event));

          cmi = new CustomMenuItem(deselectAll);
          cmi.setOnAction(e -> doDeselectAll(e));
          cmi.setHideOnClick(false);
          cm.getItems().add(cmi);

          // separator
          cm.getItems().add(new SeparatorMenuItem());
      }

      // menu item for each of the available columns
      for (Object obj : tableView.getColumns()) {

          TableColumn<?, ?> tableColumn = (TableColumn<?, ?>) obj;

          CheckBox cb = new CheckBox(tableColumn.getText());
          cb.selectedProperty().bindBidirectional(tableColumn.visibleProperty());

          cmi = new CustomMenuItem(cb);
          if(turnedOff.contains(cb.getText())){
            cb.setSelected(false);
          }
          cmi.setOnAction(e -> {
              cb.setSelected(!cb.isSelected());
              if(cb.isSelected()){
                turnedOff.remove(cb.getText());
              } else {
                turnedOff.add(cb.getText());
              }
              e.consume();
          });
          cmi.setHideOnClick(false);

          cm.getItems().add(cmi);
      }

      if (!additionalMenuItems.isEmpty()) {
          cm.getItems().add(new SeparatorMenuItem());
          cm.getItems().addAll(additionalMenuItems);
      }

      return cm;
  }

  protected void doDeselectAll(Event e) {
      for (TableColumn<?, ?> obj : tableView.getColumns()) {
        turnedOff.add(obj.getText());
          obj.setVisible(false);
      }
      e.consume();
  }

  protected void doSelectAll(Event e) {
      for (TableColumn<?, ?> obj : tableView.getColumns()) {        
        turnedOff.remove(obj.getText());
        obj.setVisible(true);        
      }
      e.consume();
  }

  public boolean isShowAllColumnsOperators() {
      return showAllColumnsOperators;
  }

  /**
   * Sets whether the Select all/Deselect all buttons are visible
   *
   * @param showAllColumnsOperators
   */
  public void setShowAllColumnsOperators(boolean showAllColumnsOperators) {
      this.showAllColumnsOperators = showAllColumnsOperators;
  }

  public List<MenuItem> getAdditionalMenuItems() {
      return additionalMenuItems;
  }

  public Function<KeyEvent, Boolean> getShowMenuByKeyboardCheck() {
      return showMenuByKeyboardCheck;
  }

  /**
   * Overrides the keypress check to show the menu. Default is Shortcut +
   * Shift + Space.
   *
   * <p>
   * To disable keyboard shortcut use the <code>e -> false</code> function.
   * </p>
   *
   * @param showMenuByKeyboardCheck
   */
  public void setShowMenuByKeyboardCheck(Function<KeyEvent, Boolean> showMenuByKeyboardCheck) {
      this.showMenuByKeyboardCheck = showMenuByKeyboardCheck;
  }

}]]></Answer>
<Answer><![CDATA[import java.lang.reflect.Field;

import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.CustomMenuItem;
import javafx.scene.control.Label;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.MouseEvent;

import com.sun.javafx.scene.control.skin.TableHeaderRow;
import com.sun.javafx.scene.control.skin.TableViewSkin;

public class TableViewUtils {

    /**
     * Make table menu button visible and replace the context menu with a custom context menu via reflection.
     * The preferred height is modified so that an empty header row remains visible. This is needed in case you remove all columns, so that the menu button won't disappear with the row header.
     * IMPORTANT: Modification is only possible AFTER the table has been made visible, otherwise you'd get a NullPointerException
     * @param tableView
     */
    public static void addCustomTableMenu( TableView tableView) {

        // enable table menu
        tableView.setTableMenuButtonVisible(true);

        // get the table  header row
        TableHeaderRow tableHeaderRow = getTableHeaderRow((TableViewSkin) tableView.getSkin());

        // get context menu via reflection
        ContextMenu contextMenu = getContextMenu(tableHeaderRow);

        // setting the preferred height for the table header row
        // if the preferred height isn't set, then the table header would disappear if there are no visible columns
        // and with it the table menu button
        // by setting the preferred height the header will always be visible
        // note: this may need adjustments in case you have different heights in columns (eg when you use grouping)
        double defaultHeight = tableHeaderRow.getHeight();
        tableHeaderRow.setPrefHeight(defaultHeight);

        // modify the table menu
        contextMenu.getItems().clear();

        addCustomMenuItems( contextMenu, tableView);

    }

    /**
     * Create a menu with custom items. The important thing is that the menu remains open while you click on the menu items.
     * @param cm
     * @param table
     */
    private static void addCustomMenuItems( ContextMenu cm, TableView table) {

        // create new context menu
        CustomMenuItem cmi;

        // select all item
        Label selectAll = new Label("Select all");
        selectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                for (Object obj : table.getColumns()) {
                    ((TableColumn<?, ?>) obj).setVisible(true);
                }
            }

        });

        cmi = new CustomMenuItem(selectAll);
        cmi.setHideOnClick(false);
        cm.getItems().add(cmi);

        // deselect all item
        Label deselectAll = new Label("Deselect all");
        deselectAll.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {

                for (Object obj : table.getColumns()) {
                    ((TableColumn<?, ?>) obj).setVisible(false);
                }
            }

        });

        cmi = new CustomMenuItem(deselectAll);
        cmi.setHideOnClick(false);
        cm.getItems().add(cmi);

        // separator
        cm.getItems().add(new SeparatorMenuItem());

        // menu item for each of the available columns
        for (Object obj : table.getColumns()) {

            TableColumn<?, ?> tableColumn = (TableColumn<?, ?>) obj;

            CheckBox cb = new CheckBox(tableColumn.getText());
            cb.selectedProperty().bindBidirectional(tableColumn.visibleProperty());

            cmi = new CustomMenuItem(cb);
            cmi.setHideOnClick(false);

            cm.getItems().add(cmi);
        }

    }

    /**
     * Find the TableHeaderRow of the TableViewSkin
     * 
     * @param tableSkin
     * @return
     */
    private static TableHeaderRow getTableHeaderRow(TableViewSkin<?> tableSkin) {

        // get all children of the skin
        ObservableList<Node> children = tableSkin.getChildren();

        // find the TableHeaderRow child
        for (int i = 0; i < children.size(); i++) {

            Node node = children.get(i);

            if (node instanceof TableHeaderRow) {
                return (TableHeaderRow) node;
            }

        }
        return null;
    }

    /**
     * Get the table menu, i. e. the ContextMenu of the given TableHeaderRow via
     * reflection
     * 
     * @param headerRow
     * @return
     */
    private static ContextMenu getContextMenu(TableHeaderRow headerRow) {

        try {

            // get columnPopupMenu field
            Field privateContextMenuField = TableHeaderRow.class.getDeclaredField("columnPopupMenu");

            // make field public
            privateContextMenuField.setAccessible(true);

            // get field
            ContextMenu contextMenu = (ContextMenu) privateContextMenuField.get(headerRow);

            return contextMenu;

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27681998" questionTitle="smooth animation in java for fast moving objects">
<Answer><![CDATA[import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class BouncyBall {

    public static void main(String[] args) {
        new BouncyBall();
    }

    public BouncyBall() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }

                JFrame frame = new JFrame("Testing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.add(new ControlPane());
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    public class ControlPane extends JPanel {

        private JSlider speed;
        private JSlider quanity;

        private BallPitPane ballPitPane;

        public ControlPane() {
            setLayout(new BorderLayout());
            ballPitPane = new BallPitPane();
            add(ballPitPane);

            JPanel controls = new JPanel(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.anchor = GridBagConstraints.WEST;

            speed = new JSlider(1, 100, 4);
            quanity = new JSlider(1, 100, 1);

            controls.add(new JLabel("Speed:"), gbc);
            gbc.gridy++;
            controls.add(new JLabel("Quanity:"), gbc);

            gbc.gridx++;
            gbc.gridy = 0;
            gbc.weightx = 1;
            gbc.fill = GridBagConstraints.HORIZONTAL;

            controls.add(speed, gbc);
            gbc.gridy++;
            controls.add(quanity, gbc);
            add(controls, BorderLayout.SOUTH);

            speed.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    ballPitPane.setSpeed(speed.getValue());
                }
            });

            quanity.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    ballPitPane.setQuanity(quanity.getValue());
                }
            });
        }

    }

    public class BallPitPane extends JPanel {

        private List<Ball> balls;
        private int speed;

        public BallPitPane() {
            balls = new ArrayList<>(25);
            setSpeed(2);
            setQuanity(1);

            Timer timer = new Timer(40, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    for (Ball ball : balls) {
                        ball.update(getWidth(), speed);
                    }
                    repaint();
                }
            });
            timer.start();
        }

        public void setSpeed(int speed) {
            this.speed = speed;
        }

        public void setQuanity(int quanity) {

            while (balls.size() > quanity) {
                balls.remove(0);
            }
            while (balls.size() < quanity) {
                int radius = 4 + (int) (Math.random() * 48);
                Ball ball = new Ball(
                        randomColor(),
                        (int) Math.abs(Math.random() * getWidth() - radius),
                        (int) Math.abs(Math.random() * getHeight() - radius),
                        radius
                );
                balls.add(ball);
            }

        }

        protected Color randomColor() {

            int red = (int) Math.abs(Math.random() * 255);
            int green = (int) Math.abs(Math.random() * 255);
            int blue = (int) Math.abs(Math.random() * 255);

            return new Color(red, green, blue);

        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(400, 200);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2d.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
            g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
            for (Ball ball : balls) {
                ball.paint(g2d);
            }
            g2d.dispose();
        }

        public class Ball {

            private Color color;
            private int x;
            private int y;
            private int radius;
            private int delta;

            public Ball(Color color, int x, int y, int radius) {
                this.color = color;
                this.x = x;
                this.y = y;
                this.radius = radius;
                delta = Math.random() > 0.5 ? 1 : -1;
            }

            public void update(int width, int speed) {
                x += speed * delta;
                if (x + radius >= width) {
                    x = width - radius;
                    delta *= -1;
                } else if (x < 0) {
                    x = 0;
                    delta *= -1;
                }
            }

            public void paint(Graphics g) {
                g.setColor(color);
                g.fillOval(x, y, radius, radius);
            }

        }

    }

}]]></Answer>
<Answer><![CDATA[import javafx.animation.Interpolator;
import javafx.animation.Timeline;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.geometry.Rectangle2D;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;

public class FXAnimationTest extends Application {

    @Override
    public void start(Stage primaryStage) {
        Group root = new Group();

        double speed = 5;

        int repeats = Timeline.INDEFINITE;

        Screen screen = Screen.getPrimary();
        Rectangle2D screenBounds = screen.getBounds();
        double xSize = screenBounds.getWidth();
        double ySize = screenBounds.getHeight();

        double crSize = 30 ;
        double xPos = crSize ;
        double yPos = ySize / 2 ;

        Circle r = new Circle(xPos, yPos, crSize / 2, Color.RED);
        TranslateTransition tt = new TranslateTransition(Duration.seconds(speed), r);
        tt.setFromX(xPos);
        tt.setToX(xSize - crSize * 3);
        tt.setCycleCount(repeats);
        tt.setAutoReverse(true);
        tt.setInterpolator(Interpolator.EASE_BOTH);
        tt.play();

        root.getChildren().add(r);

        Scene scene = new Scene(root, xSize, ySize);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27659474" questionTitle="Create a path transition with absolute coordinates for a StackPane object">
<Answer><![CDATA[public class PathTransitionExample extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {

        Group root = new Group();

        OrangeBlock block = new OrangeBlock(60, 40);
        block.relocate(100, 80);
        root.getChildren().add(block);

        Label label = new Label( "Click on scene to set destination");
        label.relocate(0, 0);
        root.getChildren().add(label);

        Scene scene = new Scene(root, 600, 400);

        scene.addEventFilter(MouseEvent.MOUSE_CLICKED, new EventHandler<Event>() {

            PathTransition transition;

            {
                transition = new PathTransition();
                transition.setNode(block);
                transition.setDuration(Duration.seconds(2));

            }

            @Override
            public void handle(Event event) {

                transition.stop();

                setPositionFixed(block.getLayoutX() + block.getTranslateX(), block.getLayoutY() + block.getTranslateY());

                double x = ((MouseEvent) event).getX();
                double y = ((MouseEvent) event).getY();

                Path path = new Path();
                path.getElements().add(new MoveToAbs( block));
                path.getElements().add(new LineToAbs( block, x, y));

                transition.setPath(path);
                transition.play();

            }

            private void setPositionFixed( double x, double y) {
                block.relocate(x, y);
                block.setTranslateX(0);
                block.setTranslateY(0);
            }

        });

        primaryStage.setScene( scene);
        primaryStage.show();

        PathTransition transition = newPathTransitionTo(block, 460, 320);
        transition.play();

    }

    private static PathTransition newPathTransitionTo(OrangeBlock block, double toX, double toY) {

        Path path = new Path();
        path.getElements().add(new MoveToAbs( block));
        path.getElements().add(new LineToAbs( block, toX, toY));

        PathTransition transition = new PathTransition();
        transition.setPath(path);
        transition.setNode(block);
        transition.setDelay(Duration.seconds(1));
        transition.setDuration(Duration.seconds(2));

        return transition;
    }

    public static void main(String[] args) {
        launch(args);
    }

    private static class OrangeBlock extends StackPane {
        public OrangeBlock(int width, int height) {
            Rectangle rectangle = new Rectangle(width, height, Color.ORANGE);
            Text text = new Text("Block");
            getChildren().addAll(rectangle, text);
        }
    }

    public static class MoveToAbs extends MoveTo {

        public MoveToAbs( Node node) {
            super( node.getLayoutBounds().getWidth() / 2, node.getLayoutBounds().getHeight() / 2);
        }

    }

    public static class LineToAbs extends LineTo {

        public LineToAbs( Node node, double x, double y) {
            super( x - node.getLayoutX() + node.getLayoutBounds().getWidth() / 2, y - node.getLayoutY() + node.getLayoutBounds().getHeight() / 2);
        }

    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    Group root = new Group();

    OrangeBlock block = new OrangeBlock(60, 40);
    System.out.println(block.getLayoutX() + " : " + block.getLayoutY());
    block.relocate(100, 80);
    //block.setTranslateX(100);
    //block.setTranslateY(80);
    System.out.println(block.getLayoutX() + " : " + block.getLayoutY());
    root.getChildren().add(block);

    PathTransition transition = newPathTransitionTo(block, 460, 320);
    transition.currentTimeProperty().addListener(e->{
        System.out.println("\nLayout Values: " + block.getLayoutX() + " : " + block.getLayoutY()
                +"\nTranslate Values:" + block.getTranslateX() + " : " + block.getTranslateY()
    );});
    primaryStage.setScene(new Scene(root, 600, 400));
    primaryStage.show();
    transition.play();


}

private static PathTransition newPathTransitionTo(OrangeBlock block,
        double toX, double toY) {
    double fromX = block.getLayoutX();//getTranslateX();
    double fromY = block.getLayoutY();//getTranslateY();

    Path path = new Path();
    path.getElements().add(new MoveTo(fromX, fromY));
    path.getElements().add(new LineTo(toX, toY));

    PathTransition transition = new PathTransition();
    transition.setPath(path);
    transition.setNode(block);
    transition.setDelay(Duration.seconds(1));
    transition.setDuration(Duration.seconds(2));

    return transition;
}

public static void main(String[] args) {
    launch(args);
}

private static class OrangeBlock extends StackPane {
    public OrangeBlock(int width, int height) {
        Rectangle rectangle = new Rectangle(width, height, Color.ORANGE);
        Text text = new Text("Block");
        getChildren().addAll(rectangle, text);
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    Group root = new Group();

    OrangeBlock block = new OrangeBlock(60, 40);
    block.relocate(100, 80);
    root.getChildren().add(block);

    // Path in scene coordinates, added to group 
    // in order to visualize the transition path for the block to follow
    Path pathScene = new Path();
    pathScene.getElements().add(new MoveTo(block.getLayoutX(), block.getLayoutY()));
    pathScene.getElements().add(new LineTo(460, 320));
    root.getChildren().add(pathScene);

    primaryStage.setScene(new Scene(root, 600, 400));
    primaryStage.show();

    PathTransition transition = newPathTransitionTo(pathScene, block);
    transition.play();
}

private PathTransition newPathTransitionTo(Path pathScene, OrangeBlock block) {
    // Calculate the path in local coordinates of the block
    // so transition is applied to the block without bumps
    Path pathLocal = new Path();
    pathScene.getElements().forEach(elem->{
        if(elem instanceof MoveTo){
            Point2D m = block.sceneToLocal(((MoveTo)elem).getX(),((MoveTo)elem).getY());
            Point2D mc = new Point2D(m.getX()+block.getWidth()/2d,m.getY()+block.getHeight()/2d);
            pathLocal.getElements().add(new MoveTo(mc.getX(),mc.getY()));
        } else if(elem instanceof LineTo){
            Point2D l = block.sceneToLocal(((LineTo)elem).getX(),((LineTo)elem).getY());
            Point2D lc = new Point2D(l.getX()+block.getWidth()/2d,l.getY()+block.getHeight()/2d);
            pathLocal.getElements().add(new LineTo(lc.getX(),lc.getY()));
        }
    });
    PathTransition transition = new PathTransition();
    transition.setPath(pathLocal);
    transition.setNode(block);
    transition.setDelay(Duration.seconds(1));
    transition.setDuration(Duration.seconds(2));

    return transition;
}

public static void main(String[] args) {
    launch(args);
}

private static class OrangeBlock extends StackPane {
    public OrangeBlock(int width, int height) {
        Rectangle rectangle = new Rectangle(width, height, Color.ORANGE);
        Text text = new Text("Block");
        getChildren().addAll(rectangle, text);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27644878" questionTitle="Binding an ObservableList to contents of two other ObservableLists?">
<Answer><![CDATA[public class ObservableMerge {
        static ObservableList<String> a = FXCollections.observableArrayList();
        static ObservableList<String> b = FXCollections.observableArrayList();

        static ObservableList<String> aandb = FXCollections.observableArrayList();


        static ObservableList<String> merge(ObservableList<String> into, ObservableList<String>... lists) {
            final ObservableList<String> list = into;
            for (ObservableList<String> l : lists) {
                list.addAll(l);
                l.addListener((javafx.collections.ListChangeListener.Change<? extends String> c) -> {
                    while (c.next()) {
                        if (c.wasAdded()) {
                            list.addAll(c.getAddedSubList());
                        }
                        if (c.wasRemoved()) {
                            list.removeAll(c.getRemoved());
                        }
                    }
                });
            }

            return list;
        }
        public static void main(String...args) {
            merge(aandb, a, b);

            System.out.println(""+aandb);
            a.add("Hello");
            b.add("Peter");
            System.out.println(""+aandb);

        }
    }]]></Answer>
<Answer><![CDATA[ObservableList<String> list1 = FXCollections.observableArrayList();
    ObservableList<String> list2 = FXCollections.observableArrayList();

    ObservableList<String> combinedList = FXCollections.observableArrayList();

    Observable.combineLatest(
                JavaFxObservable.fromObservableList(list1),
                JavaFxObservable.fromObservableList(list2),
            (l1,l2) -> {
                ArrayList<String> combined = new ArrayList<>();
                combined.addAll(l1);
                combined.addAll(l2);
                return combined;
            }).subscribe(combinedList::setAll);

    JavaFxObservable.fromObservableList(combinedList).subscribe(System.out::println);

    list1.add("Alpha");
    list2.add("Beta");
    list1.add("Gamma");
    list1.remove("Alpha");
    list2.add("Delta");

    Thread.sleep(10000);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27644361" questionTitle="How can I throw CHECKED exceptions from inside Java 8 streams?">
<Answer><![CDATA[final class Try {

    public static <T> CheckedBuilder<Supplier<T>, CheckedSupplier<T>, T> 
        safe(CheckedSupplier<T> supplier) {
        return new CheckedWrapper<>(supplier, 
                (current, next, handler, orResult) -> () -> {
            try { return current.get(); } catch (Exception ex) {
                handler.accept(ex);
                return next.isPresent() ? next.get().get() : orResult.apply(ex);
            }
        });
    }

    public static <T> Supplier<T> unsafe(CheckedSupplier<T> supplier) {
        return supplier;
    }

    public static <T> CheckedBuilder<Consumer<T>, CheckedConsumer<T>, Void> 
        safe(CheckedConsumer<T> consumer) {
        return new CheckedWrapper<>(consumer, 
                (current, next, handler, orResult) -> t -> {
            try { current.accept(t); } catch (Exception ex) {
                handler.accept(ex);
                if (next.isPresent()) {
                    next.get().accept(t);
                } else {
                    orResult.apply(ex);
                }
            }
        });
    }

    public static <T> Consumer<T> unsafe(CheckedConsumer<T> consumer) {
        return consumer;
    }

    public static <T, R> CheckedBuilder<Function<T, R>, CheckedFunction<T, R>, R> 
        safe(CheckedFunction<T, R> function) {
        return new CheckedWrapper<>(function, 
                (current, next, handler, orResult) -> t -> {
            try { return current.applyUnsafe(t); } catch (Exception ex) {
                handler.accept(ex);
                return next.isPresent() ? next.get().apply(t) : orResult.apply(ex);
            }
        });
    }

    public static <T, R> Function<T, R> unsafe(CheckedFunction<T, R> function) {
        return function;
    }

    @SuppressWarnings ("unchecked")
    static <T, E extends Throwable> T throwAsUnchecked(Throwable exception) throws E { 
        throw (E) exception; 
    }
}

@FunctionalInterface interface CheckedConsumer<T> extends Consumer<T> {
    void acceptUnsafe(T t) throws Exception;
    @Override default void accept(T t) {
        try { acceptUnsafe(t); } catch (Exception ex) {
            Try.throwAsUnchecked(ex);
        }
    }
}

@FunctionalInterface interface CheckedFunction<T, R> extends Function<T, R> {
    R applyUnsafe(T t) throws Exception;
    @Override default R apply(T t) {
        try { return applyUnsafe(t); } catch (Exception ex) {
            return Try.throwAsUnchecked(ex);
        }
    }
}

@FunctionalInterface interface CheckedSupplier<T> extends Supplier<T> {
    T getUnsafe() throws Exception;
    @Override default T get() {
        try { return getUnsafe(); } catch (Exception ex) {
            return Try.throwAsUnchecked(ex);
        }
    }
}

interface ReduceFunction<TSafe, TUnsafe, R> {
    TSafe wrap(TUnsafe current, Optional<TSafe> next, 
            Consumer<Throwable> handler, Function<Throwable, R> orResult);
}

interface CheckedBuilder<TSafe, TUnsafe, R> {
    CheckedBuilder<TSafe, TUnsafe, R> orTry(TUnsafe next);

    CheckedBuilder<TSafe, TUnsafe, R> handle(Consumer<Throwable> handler);

    <E extends Throwable> CheckedBuilder<TSafe, TUnsafe, R> handle(
            Class<E> exceptionType, Consumer<E> handler);

    CheckedBuilder<TSafe, TUnsafe, R> handleLast(Consumer<Throwable> handler);

    <E extends Throwable> CheckedBuilder<TSafe, TUnsafe, R> handleLast(
            Class<E> exceptionType, Consumer<? super E> handler);

    TSafe unsafe();
    TSafe rethrow(Function<Throwable, Exception> transformer);
    TSafe suppress();
    TSafe orElse(R value);
    TSafe orElseGet(Supplier<R> valueProvider);
}

final class CheckedWrapper<TSafe, TUnsafe, R> 
        implements CheckedBuilder<TSafe, TUnsafe, R> {

    private final TUnsafe function;
    private final ReduceFunction<TSafe, TUnsafe, R> reduceFunction;

    private final CheckedWrapper<TSafe, TUnsafe, R> root;
    private CheckedWrapper<TSafe, TUnsafe, R> next;

    private Consumer<Throwable> handlers = ex -> { };
    private Consumer<Throwable> lastHandlers = ex -> { };

    CheckedWrapper(TUnsafe function, 
            ReduceFunction<TSafe, TUnsafe, R> reduceFunction) {
        this.function = function;
        this.reduceFunction = reduceFunction;
        this.root = this;
    }

    private CheckedWrapper(TUnsafe function, 
            CheckedWrapper<TSafe, TUnsafe, R> prev) {
        this.function = function;
        this.reduceFunction = prev.reduceFunction;
        this.root = prev.root;
        prev.next = this;
    }

    @Override public CheckedBuilder<TSafe, TUnsafe, R> orTry(TUnsafe next) {
        return new CheckedWrapper<>(next, this);
    }

    @Override public CheckedBuilder<TSafe, TUnsafe, R> handle(
            Consumer<Throwable> handler) {
        handlers = handlers.andThen(handler);
        return this;
    }

    @Override public <E extends Throwable> CheckedBuilder<TSafe, TUnsafe, R> 
        handle(Class<E> exceptionType, Consumer<E> handler) {
        handlers = handlers.andThen(ex -> {
            if (exceptionType.isInstance(ex)) {
                handler.accept(exceptionType.cast(ex));
            }
        });
        return this;
    }

    @Override public CheckedBuilder<TSafe, TUnsafe, R> handleLast(
            Consumer<Throwable> handler) {
        lastHandlers = lastHandlers.andThen(handler);
        return this;
    }

    @Override public <E extends Throwable> CheckedBuilder<TSafe, TUnsafe, R> 
        handleLast(Class<E> exceptionType, Consumer<? super E> handler) {
        lastHandlers = lastHandlers.andThen(ex -> {
            if (exceptionType.isInstance(ex)) {
                handler.accept(exceptionType.cast(ex));
            }
        });
        return this;
    }

    @Override public TSafe unsafe() {
        return root.reduce(ex -> Try.throwAsUnchecked(ex));
    }

    @Override
    public TSafe rethrow(Function<Throwable, Exception> transformer) {
        return root.reduce(ex -> Try.throwAsUnchecked(transformer.apply(ex)));
    }

    @Override public TSafe suppress() {
        return root.reduce(ex -> null);
    }

    @Override public TSafe orElse(R value) {
        return root.reduce(ex -> value);
    }

    @Override public TSafe orElseGet(Supplier<R> valueProvider) {
        Objects.requireNonNull(valueProvider);
        return root.reduce(ex -> valueProvider.get());
    }

    private TSafe reduce(Function<Throwable, R> orResult) {
        return reduceFunction.wrap(function, 
                Optional.ofNullable(next).map(p -> p.reduce(orResult)), 
                this::handle, orResult);
    }

    private void handle(Throwable ex) {
        for (CheckedWrapper<TSafe, TUnsafe, R> current = this; 
                current != null; 
                current = current.next) {
            current.handlers.accept(ex);
        }
        lastHandlers.accept(ex);
    }
}]]></Answer>
<Answer><![CDATA[public class LambdaExceptionUtilTest {

    @Test(expected = MyTestException.class)
    public void testConsumer() throws MyTestException {
        Stream.of((String)null).forEach(rethrowConsumer(s -> checkValue(s)));
    }

    private void checkValue(String value) throws MyTestException {
        if(value==null) {
            throw new MyTestException();
        }
    }

    private class MyTestException extends Exception { }

    @Test
    public void testConsumerRaisingExceptionInTheMiddle() {
        MyLongAccumulator accumulator = new MyLongAccumulator();
        try {
            Stream.of(2L, 3L, 4L, null, 5L).forEach(rethrowConsumer(s -> accumulator.add(s)));
            fail();
        } catch (MyTestException e) {
            assertEquals(9L, accumulator.acc);
        }
    }

    private class MyLongAccumulator {
        private long acc = 0;
        public void add(Long value) throws MyTestException {
            if(value==null) {
                throw new MyTestException();
            }
            acc += value;
        }
    }

    @Test
    public void testFunction() throws MyTestException {
        List<Integer> sizes = Stream.of("ciao", "hello").<Integer>map(rethrowFunction(s -> transform(s))).collect(toList());
        assertEquals(2, sizes.size());
        assertEquals(4, sizes.get(0).intValue());
        assertEquals(5, sizes.get(1).intValue());
    }

    private Integer transform(String value) throws MyTestException {
        if(value==null) {
            throw new MyTestException();
        }
        return value.length();
    }

    @Test(expected = MyTestException.class)
    public void testFunctionRaisingException() throws MyTestException {
        Stream.of("ciao", null, "hello").<Integer>map(rethrowFunction(s -> transform(s))).collect(toList());
    }

}]]></Answer>
<Answer><![CDATA[import java.io.IOException;
interface Function<T, R, E extends Throwable> {
    // Declare you throw E, whatever that is.
    R apply(T t) throws E;
}   

interface Stream<T> {
    // Pass through E, whatever mapper defined for E.
    <R, E extends Throwable> Stream<R> map(Function<? super T, ? extends R, E> mapper) throws E;
}   

class Main {
    public static void main(final String... args) throws ClassNotFoundException {
        final Stream<String> s = null;

        // Works: E is ClassNotFoundException.
        s.map(Class::forName);

        // Works: E is RuntimeException (probably).
        s.map(Main::convertClass);

        // Works: E is ClassNotFoundException.
        s.map(Main::throwSome);

        // Doesn't work: E is Exception.
        s.map(Main::throwSomeMore);  // error: unreported exception Exception; must be caught or declared to be thrown
    }   

    public static Class convertClass(final String s) {
        return Main.class;
    }   

    static class FooException extends ClassNotFoundException {}

    static class BarException extends ClassNotFoundException {}

    public static Class throwSome(final String s) throws FooException, BarException {
        throw new FooException();
    }   

    public static Class throwSomeMore(final String s) throws ClassNotFoundException, IOException  {
        throw new FooException();
    }   
}]]></Answer>
<Answer><![CDATA[public List<Class> getClasses() throws ClassNotFoundException {
    List<Class> classes;
    try {
        classes = Stream.of("java.lang.Object", "java.lang.Integer", "java.lang.String").map(className -> {
            try {
                return Class.forName(className);
            } catch (ClassNotFoundException e) {
                throw new UndeclaredThrowableException(e);
            }
        }).collect(Collectors.toList());
    } catch (UndeclaredThrowableException e) {
        if (e.getCause() instanceof ClassNotFoundException) {
            throw (ClassNotFoundException) e.getCause();
        } else {
            // this should never happen
            throw new IllegalStateException(e.getMessage(), e);
        }
    }
    return classes;
}]]></Answer>
<Answer><![CDATA[import java.io.FileWriter;
import java.io.IOException;

//lambda expressions and the execute around method (EAM) pattern to
//manage resources

public class FileWriterEAM  {
  private final FileWriter writer;

  private FileWriterEAM(final String fileName) throws IOException {
    writer = new FileWriter(fileName);
  }
  private void close() throws IOException {
    System.out.println("close called automatically...");
    writer.close();
  }
  public void writeStuff(final String message) throws IOException {
    writer.write(message);
  }
  //...

  public static void use(final String fileName, final UseInstance<FileWriterEAM, IOException> block) throws IOException {

    final FileWriterEAM writerEAM = new FileWriterEAM(fileName);    
    try {
      block.accept(writerEAM);
    } finally {
      writerEAM.close();
    }
  }

  public static void main(final String[] args) throws IOException {

    FileWriterEAM.use("eam.txt", writerEAM -> writerEAM.writeStuff("sweet"));

    FileWriterEAM.use("eam2.txt", writerEAM -> {
        writerEAM.writeStuff("how");
        writerEAM.writeStuff("sweet");      
      });

    FileWriterEAM.use("eam3.txt", FileWriterEAM::writeIt);     

  }


 void writeIt() throws IOException{
     this.writeStuff("How ");
     this.writeStuff("sweet ");
     this.writeStuff("it is");

 }

}]]></Answer>
<Answer><![CDATA[public final class LambdaExceptionUtil {

@FunctionalInterface
public interface Consumer_WithExceptions<T, E extends Exception> {
    void accept(T t) throws E;
    }

@FunctionalInterface
public interface BiConsumer_WithExceptions<T, U, E extends Exception> {
    void accept(T t, U u) throws E;
    }

@FunctionalInterface
public interface Function_WithExceptions<T, R, E extends Exception> {
    R apply(T t) throws E;
    }

@FunctionalInterface
public interface Supplier_WithExceptions<T, E extends Exception> {
    T get() throws E;
    }

@FunctionalInterface
public interface Runnable_WithExceptions<E extends Exception> {
    void run() throws E;
    }

/** .forEach(rethrowConsumer(name -> System.out.println(Class.forName(name)))); or .forEach(rethrowConsumer(ClassNameUtil::println)); */
public static <T, E extends Exception> Consumer<T> rethrowConsumer(Consumer_WithExceptions<T, E> consumer) throws E {
    return t -> {
        try { consumer.accept(t); }
        catch (Exception exception) { throwAsUnchecked(exception); }
        };
    }

public static <T, U, E extends Exception> BiConsumer<T, U> rethrowBiConsumer(BiConsumer_WithExceptions<T, U, E> biConsumer) throws E {
    return (t, u) -> {
        try { biConsumer.accept(t, u); }
        catch (Exception exception) { throwAsUnchecked(exception); }
        };
    }

/** .map(rethrowFunction(name -> Class.forName(name))) or .map(rethrowFunction(Class::forName)) */
public static <T, R, E extends Exception> Function<T, R> rethrowFunction(Function_WithExceptions<T, R, E> function) throws E {
    return t -> {
        try { return function.apply(t); }
        catch (Exception exception) { throwAsUnchecked(exception); return null; }
        };
    }

/** rethrowSupplier(() -> new StringJoiner(new String(new byte[]{77, 97, 114, 107}, "UTF-8"))), */
public static <T, E extends Exception> Supplier<T> rethrowSupplier(Supplier_WithExceptions<T, E> function) throws E {
    return () -> {
        try { return function.get(); }
        catch (Exception exception) { throwAsUnchecked(exception); return null; }
        };
    }

/** uncheck(() -> Class.forName("xxx")); */
public static void uncheck(Runnable_WithExceptions t)
    {
    try { t.run(); }
    catch (Exception exception) { throwAsUnchecked(exception); }
    }

/** uncheck(() -> Class.forName("xxx")); */
public static <R, E extends Exception> R uncheck(Supplier_WithExceptions<R, E> supplier)
    {
    try { return supplier.get(); }
    catch (Exception exception) { throwAsUnchecked(exception); return null; }
    }

/** uncheck(Class::forName, "xxx"); */
public static <T, R, E extends Exception> R uncheck(Function_WithExceptions<T, R, E> function, T t) {
    try { return function.apply(t); }
    catch (Exception exception) { throwAsUnchecked(exception); return null; }
    }

@SuppressWarnings ("unchecked")
private static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }

}]]></Answer>
<Answer><![CDATA[List test = new ArrayList();
        try {
            test.forEach(obj -> {

                //let say some functionality throws an exception
                try {
                    throw new IOException("test");
                }
                catch(Exception e) {
                    throw new RuntimeException(e);
                }
            });
        }
        catch (RuntimeException re) {
            if(re.getCause() instanceof IOException) {
                //do your logic for catching checked
            }
            else 
                throw re; // it might be that there is real runtime exception
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27563785" questionTitle="JavaFX controller to controller - access to UI Controls">
<Answer><![CDATA[public class JavaFXApplication23 extends Application {

    @Override
    public void start(Stage stage1) throws IOException {
        final SomeDataObject data = new SomeDataObject();
        final Stage stage2 = new Stage();

        Parent form1 = load(data, "FXMLDocument_1.fxml");
        Parent form2 = load(data, "FXMLDocument_2.fxml");

        Scene scene1 = new Scene(form1);
        Scene scene2 = new Scene(form2);

        stage1.setScene(scene1);
        stage1.show();

        stage2.setScene(scene2);
        stage2.show();
    }

    private Parent load(SomeDataObject data, String resource) throws IOException {
        final FXMLLoader loader = new FXMLLoader(getClass().getResource(resource));
        final Parent parent = loader.load();
        final Controller controller = loader.getController();
        controller.setData(data);
        return parent;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

}

public class SomeDataObject {

    private final StringProperty stringProp = new SimpleStringProperty("");

    public StringProperty getStringProp() {
        return stringProp;
    }

}

public interface Controller {

    void setData(SomeDataObject data);

}

public class Form1Controller implements Controller {

    private SomeDataObject data;

    @FXML
    private void handleButtonAction(ActionEvent event) {
        data.getStringProp().set(data.getStringProp().get() + "Merry Christmas!\n");
    }

    @Override
    public void setData(SomeDataObject data) {
        this.data = data;
    }

}

public class Form2Controller implements Controller {

    @FXML
    private Label label;

    private SomeDataObject data;

    @Override
    public void setData(SomeDataObject data) {
        this.data = data;
        label.setText(data.getStringProp().get());
        data.getStringProp()
                .addListener((ObservableValue<? extends String> observable, 
                        String oldValue, String newValue) -> {
            label.setText(newValue);
        });
    }

}]]></Answer>
<Answer><![CDATA[public class EditorController {

    @FXML
    private TextField nameTextField ;

    private ObjectProperty<Person> person = new SimpleObjectProperty<>();
    public ObjectProperty<Person> personProperty() {
        return person ;
    }
    public final Person getPerson() {
        return personProperty().get();
    }
    public final void setPerson(Person person) {
        personProperty().set(person);
    }

    public void initialize() {

        // update text field bindings when person changes:
        personProperty().addListener((obs, oldPerson, newPerson) -> {
            if (oldPerson != null) {
                oldPerson.nameProperty().unbindBidirectional(nameTextField.textProperty());
            }
            if (newPerson != null) {
                newPerson.nameProperty().bindBidirectional(nameTextField.textProperty());
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27547519" questionTitle="Most efficient way to get the last element of a stream">
<Answer><![CDATA[import java.util.Spliterator;
import static java.util.Spliterator.ORDERED;
import java.util.stream.Stream;

/**
 * @param <T>    the type of elements in the stream
 * @param stream a stream
 * @return the last element in the stream
 * @throws AssertionError if the stream is unordered
 */
public static <T> Optional<T> getLastElement(Stream<T> stream)
{
    Spliterator<T> spliterator = stream.spliterator();
    assert (spliterator.hasCharacteristics(ORDERED)): "Operation makes no sense on unordered streams";

    // First we skip as many elements as possible
    Consumer<T> noOp = input -> {};
    while (true) {
        // trySplit() moves the first spliterator forward by the size of the second spliterator
        Spliterator<T> second = spliterator.trySplit();
        if (second == null)
            break;
        if (!spliterator.tryAdvance(noOp)) {
            // If the first spliterator is empty, continue splitting the second spliterator
            spliterator = second;
        }
    }

    // Then we consume the last element(s)
    LastElementConsumer<T> consumer = new LastElementConsumer<>();
    spliterator.forEachRemaining(consumer);
    return consumer.get();
}]]></Answer>
<Answer><![CDATA[static <T> T getLast(Stream<T> stream) {
    Spliterator<T> sp=stream.spliterator();
    if(sp.hasCharacteristics(Spliterator.SIZED|Spliterator.SUBSIZED)) {
        for(;;) {
            Spliterator<T> part=sp.trySplit();
            if(part==null) break;
            if(sp.getExactSizeIfKnown()==0) {
                sp=part;
                break;
            }
        }
    }
    T value=null;
    for(Iterator<T> it=recursive(sp); it.hasNext(); )
        value=it.next();
    return value;
}

private static <T> Iterator<T> recursive(Spliterator<T> sp) {
    Spliterator<T> prev=sp.trySplit();
    if(prev==null) return Spliterators.iterator(sp);
    Iterator<T> it=recursive(sp);
    if(it!=null && it.hasNext()) return it;
    return recursive(prev);
}]]></Answer>
<Answer><![CDATA[@Test
@DisplayName("last sequential sized")
void last_sequential_sized() throws Exception {
    long expected = 10_000_000L;
    AtomicLong count = new AtomicLong();
    Stream<Long> stream = LongStream.rangeClosed(1, expected).boxed();
    stream = stream.skip(50_000).peek(num -> count.getAndIncrement());

    assertThat(Streams.last(stream)).hasValue(expected);
    assertThat(count).hasValue(9_950_000L);
}

@Test
@DisplayName("last sequential unsized")
void last_sequential_unsized() throws Exception {
    long expected = 10_000_000L;
    AtomicLong count = new AtomicLong();
    Stream<Long> stream = LongStream.rangeClosed(1, expected).boxed();
    stream = StreamSupport.stream(((Iterable<Long>) stream::iterator).spliterator(), stream.isParallel());
    stream = stream.skip(50_000).peek(num -> count.getAndIncrement());

    assertThat(Streams.last(stream)).hasValue(expected);
    assertThat(count).hasValue(9_950_000L);
}

@Test
@DisplayName("last parallel sized")
void last_parallel_sized() throws Exception {
    long expected = 10_000_000L;
    AtomicLong count = new AtomicLong();
    Stream<Long> stream = LongStream.rangeClosed(1, expected).boxed().parallel();
    stream = stream.skip(50_000).peek(num -> count.getAndIncrement());

    assertThat(Streams.last(stream)).hasValue(expected);
    assertThat(count).hasValue(1);
}

@Test
@DisplayName("getLast parallel unsized")
void last_parallel_unsized() throws Exception {
    long expected = 10_000_000L;
    AtomicLong count = new AtomicLong();
    Stream<Long> stream = LongStream.rangeClosed(1, expected).boxed().parallel();
    stream = StreamSupport.stream(((Iterable<Long>) stream::iterator).spliterator(), stream.isParallel());
    stream = stream.peek(num -> count.getAndIncrement());

    assertThat(Streams.last(stream)).hasValue(expected);
    assertThat(count).hasValue(1);
}

@Test
@DisplayName("last parallel unsized with skip")
void last_parallel_unsized_with_skip() throws Exception {
    long expected = 10_000_000L;
    AtomicLong count = new AtomicLong();
    Stream<Long> stream = LongStream.rangeClosed(1, expected).boxed().parallel();
    stream = StreamSupport.stream(((Iterable<Long>) stream::iterator).spliterator(), stream.isParallel());
    stream = stream.skip(50_000).peek(num -> count.getAndIncrement());

    // Unfortunately unsized parallel streams does not work very well with skip
    //assertThat(Streams.last(stream)).hasValue(expected);
    //assertThat(count).hasValue(1);

    // @Holger implementation gives wrong answer!!
    //assertThat(Streams.getLast(stream)).hasValue(9_950_000L); //!!!
    //assertThat(count).hasValue(1);

    // This is also not a very good answer better
    assertThat(Streams.last(stream)).isEmpty();
    assertThat(count).hasValue(0);
}]]></Answer>
<Answer><![CDATA[public class LastElementFinderExample {
    public static void main(String[] args){
        String s = getLast(
            LongStream.range(0, 10_000_000_000L).mapToObj(i-> {
                System.out.println("potential heavy operation on "+i);
                return String.valueOf(i);
            }).parallel()
        );
        System.out.println(s);
    }

    public static <T> T getLast(Stream<T> stream){
        Spliterator<T> sp = stream.spliterator();
        if(isSized(sp)) {
            sp = getLastSplit(sp);
        }
        return getIteratorLastValue(getLastIterator(sp));
    }

    private static boolean isSized(Spliterator<?> sp){
        return sp.hasCharacteristics(Spliterator.SIZED|Spliterator.SUBSIZED);
    }

    private static <T> Spliterator<T> getLastSplit(Spliterator<T> sp){
        return splitUntil(sp, s->s.getExactSizeIfKnown() == 0);
    }

    private static <T> Iterator<T> getLastIterator(Spliterator<T> sp) {
        return Spliterators.iterator(splitUntil(sp, null));
    }

    private static <T> T getIteratorLastValue(Iterator<T> it){
        T result = null;
        while (it.hasNext()){
            result = it.next();
        }
        return result;
    }

    private static <T> Spliterator<T> splitUntil(Spliterator<T> sp, Predicate<Spliterator<T>> condition){
        Spliterator<T> result = sp;
        for (Spliterator<T> part = sp.trySplit(); part != null; part = result.trySplit()){
            if (condition == null || condition.test(result)){
                result = part;
            }
        }
        return result;      
    }   
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27494048" questionTitle="Synchronizing a sequence of asynchronous calls">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ProcessTaskResultsSequentially extends Application {

    @Override
    public void start(Stage primaryStage) {
        ListView<String> results = new ListView<>();

        List<Task<Integer>> taskList = new ArrayList<>();
        for (int i = 1; i<= 10 ; i++) {
            taskList.add(new SimpleTask(i));
        }

        ExecutorService exec = Executors.newCachedThreadPool(r -> {
            Thread t = new Thread(r);
            t.setDaemon(true);
            return t ;
        });


        Thread processThread = new Thread(() -> {
            for (Task<Integer> task : taskList) {
                try {
                    int result = task.get();
                    Platform.runLater(() -> {
                        results.getItems().add("Result: "+result);
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        processThread.setDaemon(true);
        processThread.start();

        taskList.forEach(exec::submit);

        primaryStage.setScene(new Scene(new BorderPane(results), 250, 400));
        primaryStage.show();
    }

    public static class SimpleTask extends Task<Integer> {
        private final int index ;

        private final static Random rng = new Random();

        public SimpleTask(int index) {
            this.index = index ;
        }

        @Override
        public Integer call() throws Exception {
            System.out.println("Task "+index+" called");
            Thread.sleep(rng.nextInt(1000)+1000);
            System.out.println("Task "+index+" finished");
            return index ;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[WebEngine webEngine = new WebEngine();
ChangeListener<State> initialListener = new ChangeListener<State>() {
    @Override
    public void changed(ObservableValue<? extends State> obs, State oldState, State newState) {
        if (newState == State.SUCCEEDED) {
            webEngine.getLoadWorker().stateProperty().removeListener(this);
            List<String> allCarsOnTheWebsite = webEngine.getDocument()... ;
            loadPagesConsecutively(allCarsOnTheWebsite, webEngine);
        }
    }
};
webEngine.getLoadWorker().addListener(initialListener);      
webEngine.loadPage("http://www.something.com/list-of-cars");

// ...

private void loadPagesConsecutively(List<String> pages, WebEngine webEngine) {
    LinkedList<String> pageStack = new LinkedList<>(pages);
    ChangeListener<State> nextPageListener = new ChangeListener<State>() {
        @Override
        public void changed(ObservableValue<? extends State> obs, State oldState, State newState) {
            if (newState == State.SUCCEEDED ) {
                // process current page data
                // ...
                if (pageStack.isEmpty()) {
                    webEngine.getLoadWorker().stateProperty().removeListener(this);
                } else {
                    // load next page:
                    webEngine.load(pageStack.pop());
                }
            }               
        }
    };
    webEngine.getLoadWorker().stateProperty().addListener(nextPageListener);

    // load first page (assumes pages is not empty):
    webEngine.load(pageStack.pop());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27475123" questionTitle="creating RadioButton in TableView Column">
<Answer><![CDATA[public static class RadioButtonCell<S,T extends Enum<T>> extends TableCell<S,T>{

    private EnumSet<T> enumeration;

    public RadioButtonCell(EnumSet<T> enumeration) {
        this.enumeration = enumeration;
    }

    @Override
    protected void updateItem(T item, boolean empty)
    {
        super.updateItem(item, empty);
        if (!empty) 
        {
            // gui setup
            HBox hb = new HBox(7);
            hb.setAlignment(Pos.CENTER);
            final ToggleGroup group = new ToggleGroup();

            // create a radio button for each 'element' of the enumeration
            for (Enum<T> enumElement : enumeration) {
                RadioButton radioButton = new RadioButton(enumElement.toString());
                radioButton.setUserData(enumElement);
                radioButton.setToggleGroup(group);
                hb.getChildren().add(radioButton);
                if (enumElement.equals(item)) {
                    radioButton.setSelected(true);
                }
            }

            // issue events on change of the selected radio button
            group.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {

                @SuppressWarnings("unchecked")
                @Override
                public void changed(ObservableValue<? extends Toggle> observable,
                        Toggle oldValue, Toggle newValue) {
                    getTableView().edit(getIndex(), getTableColumn());
                    RadioButtonCell.this.commitEdit((T) newValue.getUserData());
                }
            });
            setGraphic(hb);
        } 
    }
}]]></Answer>
<Answer><![CDATA[import java.util.EnumSet;

import javafx.application.Application;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Toggle;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class TableViewSample extends Application {

    private final TableView<Person> table = new TableView<>();
    private final ObservableList<Person> data =
            FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com",Participation.MAYBE),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com",Participation.MAYBE),
            new Person("Ethan", "Williams", "ethan.williams@example.com",Participation.MAYBE),
            new Person("Emma", "Jones", "emma.jones@example.com",Participation.MAYBE),
            new Person("Michael", "Brown", "michael.brown@example.com",Participation.MAYBE));
    final HBox hb = new HBox();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(650);
        stage.setHeight(550);

        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));

        table.setEditable(true);
        table.setMinWidth(640);

        TableColumn<Person,String> firstNameCol = new TableColumn("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory<>("firstName"));

        TableColumn<Person,String>lastNameCol = new TableColumn("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory<>("lastName"));

        TableColumn<Person,String> emailCol = new TableColumn("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory<>("email"));

        TableColumn<Person,Participation> participationColumn = new TableColumn("Participation");
        participationColumn.setCellFactory((param) -> new RadioButtonCell<Person, Participation>(EnumSet.allOf(Participation.class)));
        participationColumn.setCellValueFactory(new PropertyValueFactory<Person, Participation>("participation"));
        participationColumn.setOnEditCommit(
                new EventHandler<CellEditEvent<Person, Participation>>() {
                    @Override
                    public void handle(CellEditEvent<Person, Participation> t) {
                        ((Person) t.getTableView().getItems().get(
                            t.getTablePosition().getRow())
                            ).setParticipation(t.getNewValue());
                    }
                }
            );


        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol, participationColumn );

        final TextField addFirstName = new TextField();
        addFirstName.setPromptText("First Name");
        addFirstName.setMaxWidth(firstNameCol.getPrefWidth());
        final TextField addLastName = new TextField();
        addLastName.setMaxWidth(lastNameCol.getPrefWidth());
        addLastName.setPromptText("Last Name");
        final TextField addEmail = new TextField();
        addEmail.setMaxWidth(emailCol.getPrefWidth());
        addEmail.setPromptText("Email");

        final Button addButton = new Button("Add");
        addButton.setOnAction((ActionEvent e) -> {
            data.add(new Person(
                    addFirstName.getText(),
                    addLastName.getText(),
                    addEmail.getText(),
                    Participation.NO
                    ));
            addFirstName.clear();
            addLastName.clear();
            addEmail.clear();
        });

        hb.getChildren().addAll(addFirstName, addLastName, addEmail, addButton);
        hb.setSpacing(3);

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table, hb);

        ((Group) scene.getRoot()).getChildren().addAll(vbox);

        stage.setScene(scene);
        stage.show();
    }


    public static enum Participation {
        YES,
        NO,
        MAYBE;

        public String toString() {
            return super.toString().toLowerCase();
        };
    }

    public static class Person {

        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;
        private final SimpleObjectProperty<Participation> participation = new SimpleObjectProperty<Participation>();

        private Person(String fName, String lName, String email, Participation p ) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
            this.participation.setValue(p);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String fName) {
            firstName.set(fName);
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String fName) {
            lastName.set(fName);
        }

        public String getEmail() {
            return email.get();
        }

        public void setEmail(String fName) {
            email.set(fName);
        }

        public void setParticipation(Participation p){
            participation.set(p);
        }

        public Participation getParticipation(){
            return participation.get();
        }
    }





    public static class RadioButtonCell<S,T extends Enum<T>> extends TableCell<S,T>{

        private EnumSet<T> enumeration;

        public RadioButtonCell(EnumSet<T> enumeration) {
            this.enumeration = enumeration;
        }

        @Override
        protected void updateItem(T item, boolean empty)
        {
            super.updateItem(item, empty);
            if (!empty) 
            {
                // gui setup
                HBox hb = new HBox(7);
                hb.setAlignment(Pos.CENTER);
                final ToggleGroup group = new ToggleGroup();

                // create a radio button for each 'element' of the enumeration
                for (Enum<T> enumElement : enumeration) {
                    RadioButton radioButton = new RadioButton(enumElement.toString());
                    radioButton.setUserData(enumElement);
                    radioButton.setToggleGroup(group);
                    hb.getChildren().add(radioButton);
                    if (enumElement.equals(item)) {
                        radioButton.setSelected(true);
                    }
                }

                // issue events on change of the selected radio button
                group.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {

                    @SuppressWarnings("unchecked")
                    @Override
                    public void changed(ObservableValue<? extends Toggle> observable,
                            Toggle oldValue, Toggle newValue) {
                        getTableView().edit(getIndex(), getTableColumn());
                        RadioButtonCell.this.commitEdit((T) newValue.getUserData());
                    }
                });
                setGraphic(hb);
            } 
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27433899" questionTitle="Spinner control value">
<Answer><![CDATA[public class SpinnerAutoCommit<T> extends Spinner<T> {

    public SpinnerAutoCommit() {
        super();
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(int min, int max, int initialValue) {
        super(min, max, initialValue);
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(int min, int max, int initialValue, int amountToStepBy) {
        super(min, max, initialValue, amountToStepBy);
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(double min, double max, double initialValue) {
        super(min, max, initialValue);
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(double min, double max, double initialValue, double amountToStepBy) {
        super(min, max, initialValue, amountToStepBy);
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(ObservableList<T> items) {
        super(items);
        addListenerKeyChange();
    }

    public SpinnerAutoCommit(SpinnerValueFactory<T> valueFactory) {
        super(valueFactory);
        addListenerKeyChange();
    }

    private void addListenerKeyChange() {
        getEditor().textProperty().addListener((observable, oldValue, newValue) -> {
            commitEditorText();
        });
    }

    private void commitEditorText() {
        if (!isEditable()) return;
        String text = getEditor().getText();
        SpinnerValueFactory<T> valueFactory = getValueFactory();
        if (valueFactory != null) {
            StringConverter<T> converter = valueFactory.getConverter();
            if (converter != null) {
                T value = converter.fromString(text);
                valueFactory.setValue(value);
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[private final Spinner sp = new Spinner();

@Override
public void start(Stage primaryStage) {
    SpinnerValueFactory svf = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 100);
    sp.setValueFactory(svf);
    sp.setEditable(true);
    sp.setPrefWidth(80);

    // Commit on TAB
    sp.addEventFilter(KeyEvent.ANY, e->{
        if (sp.isEditable() && e.getCode().equals(KeyCode.TAB)) {
            doCommit();
            e.consume();
        }
    });

    // Override Commit on ENTER
    sp.getEditor().setOnAction(e->{
        if(sp.isEditable()) {
            doCommit();
            e.consume();
        }
    });

    Scene scene = new Scene(new StackPane(sp), 300, 250);

    primaryStage.setScene(scene);
    primaryStage.show();        
}

/*
    Commit new value, checking conversion to integer, 
    restoring old valid value in case of exception
*/
private void doCommit(){
    String text = sp.getEditor().getText();
    SpinnerValueFactory<Integer> valueFactory = sp.getValueFactory();
    if (valueFactory != null) {
        StringConverter<Integer> converter = valueFactory.getConverter();
        if (converter != null) {
            try{
                Integer value = converter.fromString(text);
                valueFactory.setValue(value);
            } catch(NumberFormatException nfe){
                sp.getEditor().setText(converter.toString(valueFactory.getValue()));
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[private boolean isInteger(String value) {
        if (value == null) {
            return false;
        }
        try {
            new Integer(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        } 
    }


    valueSpinner.getEditor().textProperty().addListener((observable, oldValue, newValue) -> {
        try {
            if (isInteger(newValue)) {
                valueSpinner.getValueFactory().setValue(Integer.parseInt(newValue));
            }
        } catch (NumberFormatException e) {
            if (isInteger(oldValue)) {
                valueSpinner.getValueFactory().setValue(Integer.parseInt(oldValue));
            }
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27392389" questionTitle="ScheduledExecutorService - program not ending after one-shot action">
<Answer><![CDATA[public static void main(String[] args) {
        int delay = 1000;

        class DaemonFactory implements ThreadFactory
        {
            @Override
            public Thread newThread(Runnable r)
            {
                Thread t = new Thread(r);
                t.setDaemon(true);
                return t;
            }
        }

        ThreadFactory tf = new DaemonFactory();
        ScheduledExecutorService ex = Executors.newSingleThreadScheduledExecutor(tf);
        ex.schedule(() -> {
            System.out.println("executed");
        }, delay, TimeUnit.MILLISECONDS);
    }]]></Answer>
<Answer><![CDATA[public MyActivity extends Activity
{
ScheduledExecutorService scheduledExecutorService;
    ScheduledFuture<?> scheduledFuture;
    private int apiThreshold = 10;//seconds


onCreate()
{
    startScheduler();
 }

onDestroy()
{
    if (scheduledFuture != null) 
{ 
 stopScheduler(); 
}
 shutDownService();
  super.onDestroy();
 }

 public void startScheduler() {
        Debug.e(TAG, "inside start scheduler");
        scheduledExecutorService = Executors.newScheduledThreadPool(1);

        scheduledFuture = scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                // call method to do your task/perform your repeated task
            }
        }, 4, apiThreshold, TimeUnit.SECONDS);
    }


public void shutDownService()
    {
        if (scheduledExecutorService != null) {
            Log.e(“test,"in shutDown service close if not null");
            scheduledExecutorService.shutdownNow(); // shutdown will allow the final iteration to finish
            // executing where shutdownNow() will kill it immediately

            Log.e(“test,"is service shutdown(true/false)=="+scheduledExecutorService.isShutdown());
        }
    }

 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27386639" questionTitle="Execute service method periodically">
<Answer><![CDATA[@Stateless
public void SomeService implements TimerDemoRemote{

    @Resource
   private SessionContext context;

    public void MyTimer(long duration) {
      //There are many variants of createTimer you can choose the one that you require.
      context.getTimerService().createTimer(Long initialDuration,long intervalDuration,Serializable info);
   }

    @Timeout
public void doMyTask(Timer timer){
      //call those methods that you require I mean someAction() etc.. 
   }


    public void someAction() {
        ...
    }
}]]></Answer>
<Answer><![CDATA[@Singleton
@Startup
public class RepeatableService {

    @EJB
    private SomeService service;

    @Resource
    private TimerService timerService;

    private long repeatInterval = 1234000L; // in milliseconds

    @PostConstruct
    public void init() {
        timerService.createIntervalTimer(0L,
                repeatInterval, new TimerConfig(null, false));
    }

    @Timeout
    public void process(Timer timer) {
        doAction();
    }

    public void doAction() {
        System.out.println("Action called!");
        service.someAction();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27356577" questionTitle="Scale at pivot point in an already scaled node">
<Answer><![CDATA[class SceneGestures {
    private double oldx;
    private double oldy;
    double ttx=0;
    double tty=0;
    private static final double MAX_SCALE = 10.0d;
    private static final double MIN_SCALE = .1d;

    private DragContext sceneDragContext = new DragContext();

    PannableCanvas canvas;

    public SceneGestures( PannableCanvas canvas) {
        this.canvas = canvas;
    }

    public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
        return onMousePressedEventHandler;
    }

    public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
        return onMouseDraggedEventHandler;
    }

    public EventHandler<ScrollEvent> getOnScrollEventHandler() {
        return onScrollEventHandler;
    }

    private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            sceneDragContext.mouseAnchorX = event.getSceneX();
            sceneDragContext.mouseAnchorY = event.getSceneY();

            sceneDragContext.translateAnchorX = canvas.getTranslateX();
            sceneDragContext.translateAnchorY = canvas.getTranslateY();

        }

    };

    private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
        public void handle(MouseEvent event) {

            // right mouse button => panning
            if( !event.isSecondaryButtonDown())
                return;

            canvas.setTranslateX(sceneDragContext.translateAnchorX + event.getSceneX() - sceneDragContext.mouseAnchorX);
            canvas.setTranslateY(sceneDragContext.translateAnchorY + event.getSceneY() - sceneDragContext.mouseAnchorY);

            event.consume();
        }
    };

    /**
     * Mouse wheel handler: zoom to pivot point
     */
    private EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<ScrollEvent>() {

        @Override
        public void handle(ScrollEvent event) {

            double delta = 1;

            double scale = canvas.getScale(); // currently we only use Y, same value is used for X
            double oldScale = scale;

            if (event.getDeltaY() < 0)
                scale -= delta;
            else
                scale += delta;

            if (scale <= MIN_SCALE) {
                scale = MIN_SCALE;
            } else if (scale >= MAX_SCALE) {
                scale = MAX_SCALE;
            }



            if (oldx==0){
             ttx=event.getSceneX() ;  
             tty=event.getSceneY() ;
            }else{
            if (oldx!=event.getSceneX()){
            ttx=((event.getSceneX()+oldx)/2) ;    
            }
            if (oldy!=event.getSceneY()){
            tty=((event.getSceneY()+oldy)/2);    
            }
            }
            // pivot value must be untransformed, i. e. without scaling
            canvas.setPivot( 
                    ((ttx- canvas.getBoundsInParent().getMinX()) / oldScale),
                    ((tty- canvas.getBoundsInParent().getMinY()) / oldScale)
                    );
         //    if (oldx==0){
            oldx=event.getSceneX();
            oldy=event.getSceneY();
         //   }
            //try {
             //   Robot rbt=new Robot();
             //   rbt.mouseMove(512, 384);
            //} catch (AWTException ex) {
            //    System.out.println(ex.getMessage());
           // }

             canvas.setScale( scale);


            System.out.println( "new pivot x: " + canvas.scaleTransform.getPivotX() + "/" + canvas.scaleTransform.getPivotY() + ", new scale: " + scale);
            System.out.println( "bounds: " + canvas.getBoundsInParent());       
            System.out.println( "old: " + oldx+"  "+oldy);  
            System.out.println( "tt: " + ttx+"  "+tty);  
            event.consume();

        }

    };


}]]></Answer>
<Answer><![CDATA[public class ZoomApplication extends Application {
    static public class PannableCanvas extends Pane {

        DoubleProperty myScale = new SimpleDoubleProperty(1.0);

        public PannableCanvas() {

            setPrefSize(600, 600);
            setStyle("-fx-background-color: lightgrey; -fx-border-color: blue;");

            // add scale transform
            scaleXProperty().bind(myScale);
            scaleYProperty().bind(myScale);

            // logging
            addEventFilter(MouseEvent.MOUSE_PRESSED, event -> { 
                System.out.println( 
                        "canvas event: " + ( ((event.getSceneX() - getBoundsInParent().getMinX()) / getScale()) + ", scale: " + getScale())
                        );
                System.out.println( "canvas bounds: " + getBoundsInParent());   
            });

        }

        /**
         * Add a grid to the canvas, send it to back
         */
        public void addGrid() {

            double w = getBoundsInLocal().getWidth();
            double h = getBoundsInLocal().getHeight();

            // add grid
            Canvas grid = new Canvas(w, h);

            // don't catch mouse events
            grid.setMouseTransparent(true);

            GraphicsContext gc = grid.getGraphicsContext2D();

            gc.setStroke(Color.GRAY);
            gc.setLineWidth(1);

            // draw grid lines
            double offset = 50;
            for( double i=offset; i < w; i+=offset) {
                // vertical
                gc.strokeLine( i, 0, i, h);
                // horizontal
                gc.strokeLine( 0, i, w, i);
            }

            getChildren().add( grid);

            grid.toBack();
        }

        public double getScale() {
            return myScale.get();
        }

        /**
         * Set x/y scale
         * @param myScale
         */
        public void setScale( double scale) {
            myScale.set(scale);
        }

        /**
         * Set x/y pivot points
         * @param x
         * @param y
         */
        public void setPivot( double x, double y) {
            setTranslateX(getTranslateX()-x);
            setTranslateY(getTranslateY()-y);
        }
    }


    /**
     * Mouse drag context used for scene and nodes.
     */
    class DragContext {

        double mouseAnchorX;
        double mouseAnchorY;

        double translateAnchorX;
        double translateAnchorY;

    }

    /**
     * Listeners for making the nodes draggable via left mouse button. Considers if parent is zoomed.
     */
    class NodeGestures {

        private DragContext nodeDragContext = new DragContext();

        PannableCanvas canvas;

        public NodeGestures( PannableCanvas canvas) {
            this.canvas = canvas;

        }

        public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
            return onMousePressedEventHandler;
        }

        public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
            return onMouseDraggedEventHandler;
        }

        private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

            public void handle(MouseEvent event) {

                // left mouse button => dragging
                if( !event.isPrimaryButtonDown())
                    return;

                nodeDragContext.mouseAnchorX = event.getSceneX();
                nodeDragContext.mouseAnchorY = event.getSceneY();

                Node node = (Node) event.getSource();

                nodeDragContext.translateAnchorX = node.getTranslateX();
                nodeDragContext.translateAnchorY = node.getTranslateY();

            }

        };

        private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
            public void handle(MouseEvent event) {

                // left mouse button => dragging
                if( !event.isPrimaryButtonDown())
                    return;

                double scale = canvas.getScale();

                Node node = (Node) event.getSource();

                node.setTranslateX(nodeDragContext.translateAnchorX + (( event.getSceneX() - nodeDragContext.mouseAnchorX) / scale));
                node.setTranslateY(nodeDragContext.translateAnchorY + (( event.getSceneY() - nodeDragContext.mouseAnchorY) / scale));

                event.consume();

            }
        };
    }

    /**
     * Listeners for making the scene's canvas draggable and zoomable
     */
    class SceneGestures {

        private static final double MAX_SCALE = 10.0d;
        private static final double MIN_SCALE = .1d;

        private DragContext sceneDragContext = new DragContext();

        PannableCanvas canvas;

        public SceneGestures( PannableCanvas canvas) {
            this.canvas = canvas;
        }

        public EventHandler<MouseEvent> getOnMousePressedEventHandler() {
            return onMousePressedEventHandler;
        }

        public EventHandler<MouseEvent> getOnMouseDraggedEventHandler() {
            return onMouseDraggedEventHandler;
        }

        public EventHandler<ScrollEvent> getOnScrollEventHandler() {
            return onScrollEventHandler;
        }

        private EventHandler<MouseEvent> onMousePressedEventHandler = new EventHandler<MouseEvent>() {

            public void handle(MouseEvent event) {

                // right mouse button => panning
                if( !event.isSecondaryButtonDown())
                    return;

                sceneDragContext.mouseAnchorX = event.getSceneX();
                sceneDragContext.mouseAnchorY = event.getSceneY();

                sceneDragContext.translateAnchorX = canvas.getTranslateX();
                sceneDragContext.translateAnchorY = canvas.getTranslateY();

            }

        };

        private EventHandler<MouseEvent> onMouseDraggedEventHandler = new EventHandler<MouseEvent>() {
            public void handle(MouseEvent event) {

                // right mouse button => panning
                if( !event.isSecondaryButtonDown())
                    return;

                canvas.setTranslateX(sceneDragContext.translateAnchorX + event.getSceneX() - sceneDragContext.mouseAnchorX);
                canvas.setTranslateY(sceneDragContext.translateAnchorY + event.getSceneY() - sceneDragContext.mouseAnchorY);

                event.consume();
            }
        };

        /**
         * Mouse wheel handler: zoom to pivot point
         */
        private EventHandler<ScrollEvent> onScrollEventHandler = new EventHandler<ScrollEvent>() {

            @Override
            public void handle(ScrollEvent event) {


                double scale = canvas.getScale(); // currently we only use Y, same value is used for X
                double oldScale = scale;

                scale *= Math.pow(1.01, event.getDeltaY());

                if (scale <= MIN_SCALE) {
                    scale = MIN_SCALE;
                } else if (scale >= MAX_SCALE) {
                    scale = MAX_SCALE;
                }

                double f = (scale / oldScale)-1;

                double dx = (event.getSceneX() - (canvas.getBoundsInParent().getWidth()/2 + canvas.getBoundsInParent().getMinX()));
                double dy = (event.getSceneY() - (canvas.getBoundsInParent().getHeight()/2 + canvas.getBoundsInParent().getMinY()));


                canvas.setScale( scale);
                canvas.setPivot(f*dx, f*dy);

                event.consume();

            }

        };


    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {

        Group group = new Group();

        // create canvas
        PannableCanvas canvas = new PannableCanvas();

        // we don't want the canvas on the top/left in this example => just
        // translate it a bit
        canvas.setTranslateX(100);
        canvas.setTranslateY(100);

        // create sample nodes which can be dragged
        NodeGestures nodeGestures = new NodeGestures( canvas);

        Label label1 = new Label("Draggable node 1");
        label1.setTranslateX(10);
        label1.setTranslateY(10);
        label1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label2 = new Label("Draggable node 2");
        label2.setTranslateX(100);
        label2.setTranslateY(100);
        label2.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label2.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Label label3 = new Label("Draggable node 3");
        label3.setTranslateX(200);
        label3.setTranslateY(200);
        label3.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        label3.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Circle circle1 = new Circle( 300, 300, 50);
        circle1.setStroke(Color.ORANGE);
        circle1.setFill(Color.ORANGE.deriveColor(1, 1, 1, 0.5));
        circle1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        circle1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        Rectangle rect1 = new Rectangle(100,100);
        rect1.setTranslateX(450);
        rect1.setTranslateY(450);
        rect1.setStroke(Color.BLUE);
        rect1.setFill(Color.BLUE.deriveColor(1, 1, 1, 0.5));
        rect1.addEventFilter( MouseEvent.MOUSE_PRESSED, nodeGestures.getOnMousePressedEventHandler());
        rect1.addEventFilter( MouseEvent.MOUSE_DRAGGED, nodeGestures.getOnMouseDraggedEventHandler());

        canvas.getChildren().addAll(label1, label2, label3, circle1, rect1);

        group.getChildren().add(canvas);

        // create scene which can be dragged and zoomed
        Scene scene = new Scene(group, 1024, 768);

        SceneGestures sceneGestures = new SceneGestures(canvas);
        scene.addEventFilter( MouseEvent.MOUSE_PRESSED, sceneGestures.getOnMousePressedEventHandler());
        scene.addEventFilter( MouseEvent.MOUSE_DRAGGED, sceneGestures.getOnMouseDraggedEventHandler());
        scene.addEventFilter( ScrollEvent.ANY, sceneGestures.getOnScrollEventHandler());

        stage.setScene(scene);
        stage.show();

        canvas.addGrid();

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27349957" questionTitle="How to Convert java.io.ObjectInputStream to java.util.stream.Stream?">
<Answer><![CDATA[public static <T> Stream<T> toStream(final ObjectInputStream stream,
                              final Class<T> cls) {

    Spliterator<T> spliterator = Spliterators.spliteratorUnknownSize(new Iterator<T>() {

        private T next;
        private boolean read = false;

        @Override
        public boolean hasNext() {
            if (!read) {
                try {
                    next = cls.cast(stream.readUnshared());
                } catch (EOFException e) {
                    next = null;
                } catch (ClassNotFoundException e) {
                    throw new RuntimeException(e);
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
                read = true;
            }
            return next != null;
        }

        @Override
        public T next() {
            read = false;
            return next;
        }
    }, Spliterator.DISTINCT | Spliterator.IMMUTABLE |
            Spliterator.ORDERED | Spliterator.NONNULL);

    return StreamSupport.stream(spliterator, false).onClose(() -> {
        try {
            stream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    });
}]]></Answer>
<Answer><![CDATA[public Stream<Object> toStream(final ObjectInputStream stream) {
    return Stream.generate(() -> readObject(stream)).onClose(
        () -> close(stream));
}

private static Object readObject(ObjectInputStream stream) {
    try {
        return stream.readObject();
    } catch (IOException e) {
        throw new UncheckedIOException(e);
    } catch (ClassNotFoundException e) {
        throw new RuntimeException(e);
    }
}

private static void close(Closeable c) {
    try {
        c.close();
    } catch (IOException e) {
        logger.log(Level.WARNING, "Couldn't close " + c, e);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27302875" questionTitle="Set Bar Chart column width size">
<Answer><![CDATA[...
    Scene scene  = new Scene(bc,800,600);
    bc.getData().addAll(series1, series2, series3);
    stage.setScene(scene);
    stage.show();

    double maxBarWidth=40;
    double minCategoryGap=10;

    scene.widthProperty().addListener((obs,n,n1)->{
        if(bc.getData().size()==0) return;

        if(n!=null && (n1.doubleValue()>n.doubleValue())){
            double barWidth=0;
            do{
                double catSpace = xAxis.getCategorySpacing();
                double avilableBarSpace = catSpace - (bc.getCategoryGap() + bc.getBarGap());
                barWidth = (avilableBarSpace / bc.getData().size()) - bc.getBarGap();
                if (barWidth >maxBarWidth){
                    avilableBarSpace=(maxBarWidth + bc.getBarGap())* bc.getData().size();
                    bc.setCategoryGap(catSpace-avilableBarSpace-bc.getBarGap());
                }
            } while(barWidth>maxBarWidth);
        }

        if(n!=null && (n1.doubleValue()<n.doubleValue()) && bc.getCategoryGap()>minCategoryGap){
            double barWidth=0;
            do{
                double catSpace = xAxis.getCategorySpacing();
                double avilableBarSpace = catSpace - (minCategoryGap + bc.getBarGap());
                barWidth = Math.min(maxBarWidth, (avilableBarSpace / bc.getData().size()) - bc.getBarGap());
                avilableBarSpace=(barWidth + bc.getBarGap())* bc.getData().size();
                bc.setCategoryGap(catSpace-avilableBarSpace-bc.getBarGap());
            } while(barWidth < maxBarWidth && bc.getCategoryGap()>minCategoryGap);
        }
    });]]></Answer>
<Answer><![CDATA[Pane barchart1 = new Pane;
 CategoryAxis xAxis = new CategoryAxis();
 NumberAxis yAxis = new NumberAxis(0,25,1);
 BarChart<String, Number> bc1 =
        new BarChart<String, Number>(xAxis, yAxis);
    // create Player chart
    bc1.setTitle(G.getPlayerName(0));
    bc1.setTitle(null);
    xAxis1.setLabel("Round");
    yAxis1.setLabel("Points");
    XYChart.Series series1 = new XYChart.Series();
    series1.setName("Pegging");
    XYChart.Series series3 = new XYChart.Series();
    series3.setName("Hand");
    XYChart.Series series5 = new XYChart.Series();
    series5.setName("Box");

    for (int i = 0; i < G.getRoundsSize(); i++) {
        series1.getData().add(new XYChart.Data(Integer.toString(i + 1), G.getRound(i).getPlayerRoundData(0).getPegPoints()));
        series3.getData().add(new XYChart.Data(Integer.toString(i + 1), G.getRound(i).getPlayerRoundData(0).getHandPoints()));
        series5.getData().add(new XYChart.Data(Integer.toString(i + 1), G.getRound(i).getPlayerRoundData(0).getBoxPoints()));
    }
    bc1.getData(). addAll(series1, series3, series5);
    bc1.setBarGap(0);
    bc1.setCategoryGap(1.0);
    bc1.setMaxHeight(180);
    bc1.setMinHeight(180);
    if(G.getRoundsSize() < 8){
        int wid = ((G.getRoundsSize() * 100) + 30);
        bc1.setMaxWidth(wid);
        bc1.setMinWidth(wid);
    } else {
        bc1.setMaxWidth(830);
        bc1.setMinWidth(830);
    }
    barchart1.getChildren().add(bc1);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27290316" questionTitle="JavaFX FXML: Cannot bind to static property">
<Answer><![CDATA[public final class Scaling {

    public double value;

    public Scaling() {
        value = getDefaultScaling();
    }

    private double getDefaultScaling() {
        int width =  GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
        return width / 1920;
    }

    public double getValue() {
        return value;
    }

    public double getValue100() {
        return value*100;
    }
    public double getValue200() {
        return value*200;
    }
    public double getValue300() {
        return value*300;
    }
    /* etc.*/]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>
<?import securechat.helpers.Scaling?>

<AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="securechat.controllers.MainController">
    <children>
        <fx:define>
            <Scaling fx:id="dpi"></Scaling>
        </fx:define>
        <HBox AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0"  AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <VBox fx:id="chatsVBox" maxWidth="${dpi.value*200}" minWidth="${dpi.value*200}" prefWidth="${dpi.value*200}" HBox.hgrow="NEVER">
               <children>
                      <Button fx:id="openNewChatWindowButton" onAction="#openNewChatDialog" text="%button.openNewChatDialog" maxHeight="${dpi.value*40}" minHeight="${dpi.value*40}" prefHeight="${dpi.value*40}" prefWidth="${dpi.value*200}" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" VBox.vgrow="NEVER" />
                      <ListView fx:id="chatsListView" VBox.vgrow="ALWAYS" />
               </children>
            </VBox>
            <VBox fx:id="chatVBox" HBox.hgrow="ALWAYS">
               <children>
                      <ListView fx:id="chatMessagesListView"  VBox.vgrow="ALWAYS" />
                      <TextField fx:id="chatMessageTextField" onAction="#sendChatMessage" maxHeight="${dpi.value*40}" minHeight="${dpi.value*40}"  prefHeight="${dpi.value*40}" promptText="%textfield.chatMessagePrompt" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" VBox.vgrow="NEVER" />
               </children>
            </VBox>
         </children>
      </HBox>
    </children>
</AnchorPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27211517" questionTitle="How can I draw a hexagon in Java Scene Builder 2.0?">
<Answer><![CDATA[<Polygon fill="DODGERBLUE" layoutX="108.0" layoutY="121.0" stroke="BLACK" strokeType="INSIDE">
 <points>

<Double fx:value="-50.0" />
<Double fx:value="30.0" />

<Double fx:value="0.0" />
<Double fx:value="60.0" />

<Double fx:value="50.0" />
<Double fx:value="30.0" />

<Double fx:value="50.0" />
<Double fx:value="-30.0" />

<Double fx:value="0.0" />
<Double fx:value="-60.0" />

<Double fx:value="-50.0" />
<Double fx:value="-30.0" />



 </points>
</Polygon>]]></Answer>
<Answer><![CDATA[class Hexagon {
    double [] points;
    double center;
    public Hexagon(double side){
      center = getH(side);
      points = new double[12];
      //     X                          Y
      points[0] = 0.0;           points[1] = 0.0;
      points[2] = side;          points[3] = 0.0;
      points[4] = side+(side/2); points[5] = center;
      points[6] = side;          points[7] = center * 2;
      points[8] = 0.0;           points[9] = center * 2;
      points[10] = -side/2;      points[11] = center;

    }

    private double getH(double side) {
      return ((sqrt(3)/2)*side);
    }
    public double [] getPoints(){
      return points;
    }
  }]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.Double?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.shape.Polygon?>

<AnchorPane xmlns="http://javafx.com/javafx/8.0.102" xmlns:fx="http://javafx.com/fxml/1" fx:controller="mypackage.MainController">
   <children>

             <Polygon fill="DODGERBLUE" rotate="90.0" AnchorPane.bottomAnchor="50.0" AnchorPane.leftAnchor="100.0" AnchorPane.rightAnchor="100.0" AnchorPane.topAnchor="50.0">
             <points>

                    <Double fx:value="-150.0" />
                <Double fx:value="90.0" />

                    <Double fx:value="0.0" />
                <Double fx:value="180.0" />

                    <Double fx:value="150.0" />
                <Double fx:value="90.0" />

                    <Double fx:value="150.0" />
                <Double fx:value="-90.0" />

                    <Double fx:value="0.0" />
                <Double fx:value="-180.0" />

                    <Double fx:value="-150.0" />
                <Double fx:value="-90.0" />
            </points>
        </Polygon>
   </children>
</AnchorPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27210819" questionTitle="javafx, dragging optimisation - various ideas">
<Answer><![CDATA[float xo, yo; // render offsets

void drag(float x, float y) {
    xo = x;
    yo = y;
}

void dragEnd(float x, float y) {
    setPosition(x, y);
    for (Node node : nodes) {
        node.dragEnd(x, y);
    }
}

void render(float xo, float yo) {
    xo += this.xo;
    yo += this.yo;

    screen.draw(this.x + xo, this.y + yo); // render with at offset
    for (Node node : nodes) {
        node.render(xo, yo);
    }
}]]></Answer>
<Answer><![CDATA[public class DragMany extends Application {
    Point2D lastXY = null;
    Scene myScene;
    long lastDrag;
    ImageView dragImage; 


    void fill(Group box) {
        Color colors[] = new Color[]{Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.PINK, Color.MAGENTA };
        for (int i = 0; i < 100000; i++) {
            Circle c = new Circle(2);
            box.getChildren().add(c);
            c.setFill(colors[(i/17) % colors.length]);
            c.setLayoutX(i % 30 * 3);
            c.setLayoutY((i/20) % 30*3);
        }
        box.setLayoutX(40);
        box.setLayoutY(40);

    }
    void drag1(Pane pane, Group box) {
        box.setOnMousePressed(event -> {
            lastXY = new Point2D(event.getSceneX(), event.getSceneY());
            lastDrag = System.currentTimeMillis();
        });
        box.setOnMouseDragged(event -> {
            event.setDragDetect(false);
            Node on = box;
            double dx = event.getSceneX() - lastXY.getX();
            double dy = event.getSceneY() - lastXY.getY();
            on.setLayoutX(on.getLayoutX()+dx);
            on.setLayoutY(on.getLayoutY()+dy);
            lastXY = new Point2D(event.getSceneX(), event.getSceneY());
            event.consume();
        });

        box.setOnMouseReleased(d ->  lastXY = null);
    }

    void drag3(Pane pane, Group box) {
        box.setOnMousePressed(event -> {
            long now = System.currentTimeMillis();

            lastXY = new Point2D(event.getSceneX(), event.getSceneY());
            SnapshotParameters params = new SnapshotParameters();
            params.setFill(Color.TRANSPARENT);
            WritableImage image = box.snapshot(params, null);
            dragImage = new ImageView(image);
            dragImage.setLayoutX(box.getLayoutX());
            dragImage.setLayoutY(box.getLayoutY());
            dragImage.setTranslateX(box.getTranslateX());
            dragImage.setTranslateY(box.getTranslateY());
            pane.getChildren().add(dragImage);
            dragImage.setOpacity(0.5);
            box.setVisible(false);
            System.out.println("Snap "+(System.currentTimeMillis()-now)+"ms");

            pane.setOnMouseDragged(e -> {
                if (dragImage == null) return;
                Node on = dragImage;
                double dx = e.getSceneX() - lastXY.getX();
                double dy = e.getSceneY() - lastXY.getY();
                on.setTranslateX(on.getTranslateX()+dx);
                on.setTranslateY(on.getTranslateY()+dy);
                lastXY = new Point2D(e.getSceneX(), e.getSceneY());
                e.consume();
            });
            pane.setOnMouseReleased(e -> {
                if (dragImage != null) {
                    box.setTranslateX(dragImage.getTranslateX());
                    box.setTranslateY(dragImage.getTranslateY());
                    pane.getChildren().remove(dragImage);
                    box.setVisible(true);
                    dragImage = null;
                }
                lastXY = null;
                e.consume();
            });

            lastDrag = System.currentTimeMillis();
            event.consume();
        });
    }

    public void start(Stage primaryStage) {
        Pane mainPane = new Pane(); 
        myScene = new Scene(mainPane, 500, 500);
        primaryStage.setScene(myScene);
        primaryStage.show();

        Group all = new Group();
        fill(all);
        mainPane.getChildren().add(all);
        drag3(mainPane, all);
    }

    public static void main(String[] args) {
        launch(args);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27121384" questionTitle="javafx how to disable one item in checkboxTreeItem?">
<Answer><![CDATA[private TreeView<String> cbTreeView; 
private final List<Wrap> disableList = new ArrayList<>();

@Override
public void start(Stage primaryStage) {
    cbTreeView = new TreeView();

    CheckBoxTreeItem<String> rootItem = new CheckBoxTreeItem("Serial No.");
    final List<CheckBoxTreeItem<String>> treeItems = new ArrayList<>(6);
    for (int i = 0; i < 6; i++) {
        CheckBoxTreeItem<String> item = new CheckBoxTreeItem("0"+i+"");
        item.setIndependent(true);
        treeItems.add(item);  
        disableList.add(new Wrap("0"+i+""));
    }
    rootItem.getChildren().addAll(treeItems);

    rootItem.setExpanded(true);
    rootItem.setIndependent(true);
    CheckBoxTreeItem<String> rootItem2 = new CheckBoxTreeItem("child1");
    final List<CheckBoxTreeItem<String>> treeItems2 = new ArrayList<>(6);
    for (int i = 0; i < 6; i++) {
        CheckBoxTreeItem<String> item = new CheckBoxTreeItem("1"+i+"");
        item.setIndependent(true);
        treeItems2.add(item); 
        disableList.add(new Wrap("1"+i+""));
    }
    rootItem2.getChildren().addAll(treeItems2);
    rootItem2.setIndependent(true);
    rootItem.getChildren().set(2,rootItem2);

    cbTreeView.setRoot(rootItem);]]></Answer>
<Answer><![CDATA[import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.TreeItem;
import javafx.scene.control.cell.CheckBoxTreeCell;


public class CheckBoxTreeCellExt<T> extends CheckBoxTreeCell<T> implements ChangeListener<Boolean>
{
    protected SimpleBooleanProperty linkedDisabledProperty;

    @Override
    public void updateItem(T item, boolean empty)
    {
        super.updateItem(item, empty);

        if(item != null)
        {
            TreeItem<T> treeItem = treeItemProperty().getValue();
            if(treeItem != null)
            {
                if(treeItem instanceof CheckBoxTreeItemExt<?>)
                {
                    CheckBoxTreeItemExt<T> checkItem = (CheckBoxTreeItemExt<T>)treeItem;
                    if(checkItem != null)
                    {                               
                        if(linkedDisabledProperty != null)
                        {
                            linkedDisabledProperty.removeListener(this);
                            linkedDisabledProperty = null;
                        }

                        linkedDisabledProperty = checkItem.disabledProperty;                        
                        linkedDisabledProperty.addListener(this);

                        setDisable(linkedDisabledProperty.get());
                    }
                }
            }           
        }
    }

    @Override
    public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldVal, Boolean newVal)
    {       
        setDisable(newVal);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27110468" questionTitle="How to implement independent cells in JavaFX?">
<Answer><![CDATA[public class Seats extends Application {
    String theater1 = "20x__16x\n.20x__16x\n__18x__14x\n.20x__16x\n20x__16x\n.20x__16x\n20x__16x\n";
    String theater2 = "11x_10x_11x\n11x_10x_11x\n11x_10x_11x\n\n11x_10x_11x\n11x_10x_11x\n11x_10x_11x\n";

    static class Seat extends Group {
        Color freeColor = Color.rgb(30, 250, 40);
        Color reservedColor = Color.rgb(170, 40,  40);

        BooleanProperty iamReserved = new SimpleBooleanProperty(false);
        int myNo;
        public Seat(int no) {
            myNo = no;
            Circle pillow = new Circle(12);
            pillow.setFill(freeColor);
            pillow.setStrokeWidth(1);
            pillow.setStroke(Color.rgb(30, 40, 40));
            getChildren().add(pillow);

            Text lable = new Text(""+no);
            lable.setFont(lable.getFont().font(7));
            lable.setTextAlignment(TextAlignment.CENTER);
            lable.setTextOrigin(VPos.CENTER);
            lable.setLayoutX(-lable.getLayoutBounds().getWidth()/2);
            getChildren().add(lable);

            iamReserved.addListener((e, o, n) -> {
                pillow.setFill(n ? reservedColor : freeColor);
            });
            setOnMouseClicked(m -> {
                iamReserved.set(!iamReserved.get());
            });
        }

        static double width() { return 26; }
        static double height() { return 36; }
    }
    Pane theater1(Pane pane, String theater) {
        double x = 20;
        double y = 40;
        int no = 1;
        for (String row : theater.split("\n")) {
            int count = 0;
            for (int c : row.toCharArray()) {
                switch (c) {
                    case 'x': 
                        while (count-- > 0) {
                            Seat seat = new Seat(no++);
                            seat.setLayoutX(x); 
                            x+= Seat.width();
                            seat.setLayoutY(y);
                            pane.getChildren().add(seat);
                        }
                        count = 0;
                        break;
                    case '0': case '1': case '2': case '3': case '4': case '5': case'6': case '7': case '8': case '9':
                        count = 10*count + (c-'0');
                        break;
                    case '_':
                        x+= Seat.width();
                        break;
                    case '.':
                        x+= Seat.width()/2;
                        break;
                    default: System.out.println("Unknown char: '"+(char)c+"'");
                }
            }
            y += Seat.height();
            count = 0;
            x = 20;
        }
        return pane;
    }

    LinkedList<Node> myPages = new LinkedList<Node>();
    void addTab(String label, Region node) {
        myPages.add(node);
        node.setBackground(new Background(new BackgroundFill(Color.rgb(200, 170, 200), new CornerRadii(0), new Insets(0))));
    }


    @Override
    public void start(Stage primaryStage) throws Exception {        
        primaryStage.setTitle("Background of Panes");

        BorderPane border = new BorderPane();
        Pagination pages = new Pagination();
        Scene scene = new Scene(border,900,400,Color.WHITE);
        primaryStage.setScene(scene);      

        addTab("1", theater1(new Pane(), theater1));
        addTab("2", theater1(new Pane(), theater2));

        pages.setPageCount(myPages.size());
        pages.setPageFactory(no -> myPages.get(no));

        border.setCenter(pages);

        primaryStage.show();   
    }

    public static void main(String[] args) { launch(args); }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {

    TableView<MyObject> table = new TableView<>();
    table.setPrefSize(800, 600);

    int[] rowsColumns = new int[]{10,20}; // [0] = rows : [1] = columns
    ObservableList<MyObject> list = FXCollections.observableArrayList();
    for (int i = 0; i < rowsColumns[0]; i++) {
        list.add(new MyObject(rowsColumns[1],true));
    }

    List<TableColumn<MyObject,Boolean>> tableColumns = new ArrayList<>(rowsColumns[1]);
    IntStream.range(0, rowsColumns[1]).boxed().forEach(i-> {
        TableColumn<MyObject,Boolean> tableColumn = new TableColumn<>(String.valueOf(i+1));
        tableColumn.setId(String.valueOf(i));
        tableColumn.setPrefWidth((table.getPrefWidth()-15)/rowsColumns[1]);
        tableColumn.setCellValueFactory(param -> {
            int col=Integer.parseInt(param.getTableColumn().getId());
            return param.getValue().colDisponibilityProperty(col);
        });
        tableColumn.setCellFactory(param -> 
             new DisponibilityCell(Integer.parseInt(param.getId())));
        tableColumn.setSortable(false);
        tableColumns.add(tableColumn);
    });
    table.getColumns().addAll(tableColumns);

    table.getItems().addAll(list);
    table.getSelectionModel().setCellSelectionEnabled(true);
    table.setEditable(true);

    Scene scene = new Scene(table, 800, 600);

    primaryStage.setScene(scene);
    primaryStage.show();

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27089627" questionTitle="JavaFX Switch scene with slide effect">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Group root1 = new Group();
    Group root2 = new Group();

    Scene scene1 = new Scene(root1, 300, 250);
    Scene scene2 = new Scene(root2, 300, 250);

    Rectangle rectangle2 = new Rectangle(300, 250);
    rectangle2.setFill(Color.BLUE);
    root2.getChildren().add(rectangle2);

    Rectangle rectangle1 = new Rectangle(300, 250);
    rectangle1.setFill(Color.RED);
    root1.getChildren().add(rectangle1);

    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene1);
    primaryStage.show();

    rectangle1.setOnMouseClicked(e->{
        // Create snapshots with the last state of the scenes
        WritableImage wi = new WritableImage(300, 250);
        Image img1 = root1.snapshot(new SnapshotParameters(),wi);
        ImageView imgView1= new ImageView(img1);
        wi = new WritableImage(300, 250);
        Image img2 = root2.snapshot(new SnapshotParameters(),wi);
        ImageView imgView2= new ImageView(img2);
        // Create new pane with both images
        imgView1.setTranslateX(0);
        imgView2.setTranslateX(300);
        StackPane pane= new StackPane(imgView1,imgView2);
        pane.setPrefSize(300,250);
        // Replace root1 with new pane
        root1.getChildren().setAll(pane);
        // create transtition
        Timeline timeline = new Timeline();
        KeyValue kv = new KeyValue(imgView2.translateXProperty(), 0, Interpolator.EASE_BOTH);
        KeyFrame kf = new KeyFrame(Duration.seconds(1), kv);
        timeline.getKeyFrames().add(kf);
        timeline.setOnFinished(t->{
            // remove pane and restore scene 1
            root1.getChildren().setAll(rectangle1);
            // set scene 2
            primaryStage.setScene(scene2);
        });
        timeline.play();
    });
    rectangle2.setOnMouseClicked(e->{
        // Create snapshots with the last state of the scenes
        WritableImage wi = new WritableImage(300, 250);
        Image img1 = root1.snapshot(new SnapshotParameters(),wi);
        ImageView imgView1= new ImageView(img1);
        wi = new WritableImage(300, 250);
        Image img2 = root2.snapshot(new SnapshotParameters(),wi);
        ImageView imgView2= new ImageView(img2);
        // Create new pane with both images
        imgView2.setTranslateX(0);
        imgView1.setTranslateX(300);
        StackPane pane= new StackPane(imgView2,imgView1);
        pane.setPrefSize(300,250);
        // Replace root2 with new pane
        root2.getChildren().setAll(pane);
        // create transtition
        Timeline timeline = new Timeline();
        KeyValue kv = new KeyValue(imgView1.translateXProperty(), 0, Interpolator.EASE_BOTH);
        KeyFrame kf = new KeyFrame(Duration.seconds(1), kv);
        timeline.getKeyFrames().add(kf);
        timeline.setOnFinished(t->{
            // remove pane and restore scene 2
            root2.getChildren().setAll(rectangle2);
            // set scene 1
            primaryStage.setScene(scene1);
        });
        timeline.play();
    });

}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class SlidingViews extends Application {

    @Override
    public void start(Stage primaryStage) {
        Rectangle rectangle1 = new Rectangle(300, 250);
        rectangle1.setFill(Color.RED);

        Button nextView = new Button("Next");
        nextView.setPadding(new Insets(10));
        BorderPane view1 = new BorderPane(rectangle1, null, null, nextView, null);
        BorderPane.setAlignment(nextView, Pos.CENTER);

        Group view2 = new Group();
        Rectangle rectangle2 = new Rectangle(300, 250);
        rectangle2.setFill(Color.BLUE);
        view2.getChildren().add(rectangle2);

        StackPane root = new StackPane(view1);

        nextView.setOnAction(event -> {
            root.getChildren().add(view2);
            double width = root.getWidth();
            KeyFrame start = new KeyFrame(Duration.ZERO,
                    new KeyValue(view2.translateXProperty(), width),
                    new KeyValue(view1.translateXProperty(), 0));
            KeyFrame end = new KeyFrame(Duration.seconds(1),
                    new KeyValue(view2.translateXProperty(), 0),
                    new KeyValue(view1.translateXProperty(), -width));
            Timeline slide = new Timeline(start, end);
            slide.setOnFinished(e -> root.getChildren().remove(view1));
            slide.play();
        });

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27062315" questionTitle="Tableview Integer sorting bugged?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class TableViewSortTest extends Application {

private TableView<Person> table = new TableView<>();
final ObservableList<Person> data = FXCollections.observableArrayList(
        new Person(1, "Smith", "jacob.smith@example.com"),
        new Person(9, "Johnson", "isabella.johnson@example.com"),
        new Person(444, "Williams", "ethan.williams@example.com")

);

@Override
public void start(Stage stage) {
    table.getItems().addAll(data);

    Scene scene = new Scene(new Group());

    stage.setTitle(
            "Table View Sample");
    stage.setWidth(
            300);
    stage.setHeight(
            500);

    final Label label = new Label("Address Book");

    label.setFont(
            new Font("Arial", 20));

    TableColumn<Person, Integer> idCol = new TableColumn<>("Id");
    TableColumn<Person, String> lastNameCol = new TableColumn<>("Last Name");
    TableColumn<Person, String> emailCol = new TableColumn<>("Email");

    idCol.setCellValueFactory(
            new PropertyValueFactory<Person, Integer>("id")
    );
    lastNameCol.setCellValueFactory(
            new PropertyValueFactory<Person, String>("name")
    );
    emailCol.setCellValueFactory(
            new PropertyValueFactory<Person, String>("email")
    );

    table.getColumns()
            .addAll(idCol, lastNameCol, emailCol);

    final VBox vbox = new VBox();

    vbox.setSpacing(
            5);
    vbox.setPadding(
            new Insets(10, 0, 0, 10));
    vbox.getChildren()
            .addAll(label, table);

    ((Group) scene.getRoot()).getChildren().addAll(vbox);

    stage.setScene(scene);

    stage.show();
}

public static class Person {
    private final IntegerProperty id = new SimpleIntegerProperty(this, "id");
    private final StringProperty name = new SimpleStringProperty(this, "name");
    private final StringProperty email = new SimpleStringProperty(this, "email");

    public Person(int id, String name, String email) {
        this.id.set(id);
        this.name.set(name);
        this.email.set(email);
    }

    public final IntegerProperty idProperty() {
        return this.id;
    }

    public final int getId() {
        return this.idProperty().get();
    }

    public final void setId(final int id) {
        this.idProperty().set(id);
    }

    public final StringProperty nameProperty() {
        return this.name;
    }

    public final java.lang.String getName() {
        return this.nameProperty().get();
    }

    public final void setName(final java.lang.String name) {
        this.nameProperty().set(name);
    }

    public final StringProperty emailProperty() {
        return this.email;
    }

    public final java.lang.String getEmail() {
        return this.emailProperty().get();
    }

    public final void setEmail(final java.lang.String email) {
        this.emailProperty().set(email);
    }


}

/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
<Answer><![CDATA[private class CustomComparator implements Comparator<String>{

    @Override
    public int compare(String o1, String o2) {
        if (o1 == null && o2 == null) return 0;
        if (o1 == null) return -1;
        if (o2 == null) return 1;

        Integer i1=null;
        try{ i1=Integer.valueOf(o1); } catch(NumberFormatException ignored){}
        Integer i2=null;
        try{ i2=Integer.valueOf(o2); } catch(NumberFormatException ignored){}

        if(i1==null && i2==null) return o1.compareTo(o2);
        if(i1==null) return -1;
        if(i2==null) return 1;

        return i1-i2;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27047447" questionTitle="Customized context menu on javafx webview/webengine">
<Answer><![CDATA[private PopupWindow getPopupWindow() {
    @SuppressWarnings("deprecation") 
    final Iterator<Window> windows = Window.impl_getWindows();

    while (windows.hasNext()) {
        final Window window = windows.next();

        if (window instanceof ContextMenu) {
            if(window.getScene()!=null && window.getScene().getRoot()!=null){ 
                Parent root = window.getScene().getRoot();

                // access to context menu content
                if(root.getChildrenUnmodifiable().size()>0){
                    Node popup = root.getChildrenUnmodifiable().get(0);
                    if(popup.lookup(".context-menu")!=null){
                        Node bridge = popup.lookup(".context-menu");
                        ContextMenuContent cmc= (ContextMenuContent)((Parent)bridge).getChildrenUnmodifiable().get(0);

                        VBox itemsContainer = cmc.getItemsContainer();
                        for(Node n: itemsContainer.getChildren()){
                            MenuItemContainer item=(MenuItemContainer)n;
                            // customize text:
                            item.getItem().setText("My Custom: "+item.getItem().getText());
                            // customize graphic:
                            item.getItem().setGraphic(new ImageView(new Image(getClass().getResource("unlock24.png").toExternalForm())));
                        }
                        // remove some item:
                        // itemsContainer.getChildren().remove(0);

                        // adding new item:
                        MenuItem menuItem = new MenuItem("Save page");
                        menuItem.setOnAction(new EventHandler<ActionEvent>() {

                            @Override
                            public void handle(ActionEvent e) {
                                System.out.println("Save Page");
                            }
                        });
                        // add new item:
                        cmc.getItemsContainer().getChildren().add(cmc.new MenuItemContainer(menuItem));

                        return (PopupWindow)window;
                    }
                }
            }
            return null;
        }
    }
    return null;
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.BorderPane;
import javafx.scene.web.WebView;
import javafx.stage.Stage;


public class WebViewContextMenuTest extends Application {

    private final String START_URL = 
            "http://stackoverflow.com/questions/27047447/customized-context-menu-on-javafx-webview-webengine/27047830#27047830";

    @Override
    public void start(Stage primaryStage) {
        TextField locationField = new TextField(START_URL);
        WebView webView = new WebView();
        webView.getEngine().load(START_URL);

        webView.setContextMenuEnabled(false);
        createContextMenu(webView);

        locationField.setOnAction(e -> {
            webView.getEngine().load(getUrl(locationField.getText()));
        });
        BorderPane root = new BorderPane(webView, locationField, null, null, null);
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();

    }

    private void createContextMenu(WebView webView) {
        ContextMenu contextMenu = new ContextMenu();
        MenuItem reload = new MenuItem("Reload");
        reload.setOnAction(e -> webView.getEngine().reload());
        MenuItem savePage = new MenuItem("Save Page");
        savePage.setOnAction(e -> System.out.println("Save page..."));
        MenuItem hideImages = new MenuItem("Hide Images");
        hideImages.setOnAction(e -> System.out.println("Hide Images..."));
        contextMenu.getItems().addAll(reload, savePage, hideImages);

        webView.setOnMousePressed(e -> {
            if (e.getButton() == MouseButton.SECONDARY) {
                contextMenu.show(webView, e.getScreenX(), e.getScreenY());
            } else {
                contextMenu.hide();
            }
        });
    }

    private String getUrl(String text) {
        if (text.indexOf("://")==-1) {
            return "http://" + text ;
        } else {
            return text ;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27018443" questionTitle="javaFX: a custom control(made with scene builder) contain a buttom with an onAction">
<Answer><![CDATA[public class MyCustomControl extends ... {


private final ObjectProperty<EventHandler<MyCustomActionEvent>> onMyCustomAction = new ObjectPropertyBase<EventHandler<MyCustomActionEvent>>() {
    @Override
    protected void invalidated() {
        setEventHandler(MyCustomActionEvent.MY_CUSTOM_ACTION, get());
    }

    @Override
    public Object getBean() {
        return MyCustomControl.this;
    }

    @Override
    public String getName() {
        return "onMyCustomAction";
    }
};

...

public MyCustomControl () {
    <load fx:root based FXML>
}

...

public final EventHandler<MyCustomActionEvent> getOnMyCustomAction() {
    return onMyCustomActionProperty().get();
}

public final void setOnMyCustomAction(EventHandler<MyCustomActionEvent> onMyCustomAction) {
    onMyCustomActionProperty().set(onMyCustomAction);
}

public ObjectProperty<EventHandler<MyCustomActionEvent>> onMyCustomActionProperty() {
    return onMyCustomAction;
}

...

@FXML
private void handleMyButtonOnAction(ActionEvent event) {
    fireEvent(new MyCustomActionEvent(<someData>);
}]]></Answer>
<Answer><![CDATA[public class myControl {
    private Button button;
    private Callback<Void, Void> buttonCallback;
    public myControl() {
        button.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                if(getButtonCallback() !=  null){
                    getButtonCallback().call(null);
                }

            }
        });


    }
    public Callback<Void, Void> getButtonCallback() {
        return buttonCallback;
    }
    public void setButtonCallback(Callback<Void, Void> buttonCallback) {
        this.buttonCallback = buttonCallback;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26964288" questionTitle="how to generate a random numbers for a credit card">
<Answer><![CDATA[public String getIssuerCode(String issuerSymbol) {
    String creditCardNumber = null;

    System.out.println(issuerSymbol);

    switch (issuerSymbol) {
        case ISSUER_MASTER_CARD:
            System.out.println("Card was of type: " + ISSUER_MASTER_CARD);
            creditCardNumber = generateMasterCard();
            break;
        case ISSUER_AMER_EXPRESS:
             System.out.println("Card was of type: " + ISSUER_AMER_EXPRESS);
             creditCardNumber = generateAmericanExpress();
             break;
        case ISSUER_VISA:
             System.out.println("Card was of type: " + ISSUER_VISA);
             creditCardNumber = generateVisa();
             break;
        default:
             System.out.println("Card is NOT one of the expected type!");
             break;
        }
    }

    System.out.println("Generated credit card number is : " + creditCardNumber);

    return creditCardNumber;
}]]></Answer>
<Answer><![CDATA[public String getIssuerCode(String issuerSymbol) {
    String creditCardNumber = null;

    for (int i = 0; i < 15; i++) {

        switch (issuerSymbol) {
            case ISSUER_MASTER_CARD :
                creditCardNumber = generateMasterCard();
                break;
            case ISSUER_AMER_EXPRESS :
                creditCardNumber = generateAmericanExpress();
                break;
            case ISSUER_VISA:
                creditCardNumber = generateVisa();
                break;
            default:
                break;
        }

    }

    return creditCardNumber;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26951431" questionTitle="How to get an ObservableFloatArray from a Stream?">
<Answer><![CDATA[float[] arrayVertices = listVertices.stream()
    .flatMapToDouble(vertex->DoubleStream.of(vertex.x, vertex.y, vertex.z))
    .collect(FaCollector::new, FaCollector::add, FaCollector::join)
    .toArray();

static class FaCollector {
    float[] curr=new float[64];
    int size;
    void add(double d) {
        if(curr.length==size) curr=Arrays.copyOf(curr, size*2);
        curr[size++]=(float)d;
    }
    void join(FaCollector other) {
        if(size+other.size > curr.length)
            curr=Arrays.copyOf(curr, size+other.size);
        System.arraycopy(other.curr, 0, curr, size, other.size);
        size+=other.size;
    }
    float[] toArray() {
        if(size!=curr.length) curr=Arrays.copyOf(curr, size);
        return curr;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.List;
import java.util.ListIterator;
import java.util.Random;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import javafx.scene.shape.TriangleMesh;

public class StreamFloatsTest {

    public static void main(String[] args) {

        // The following declaration works in Eclipse 4.4
        // however it won't compile from the command line:
        // Collector<Float, List<Float>, float[]> toFloatArray =

        // This declaration works:

        Collector<Float, ?, float[]> toFloatArray =
                Collectors.collectingAndThen(Collectors.toList(), floatList -> {
                    float[] array = new float[floatList.size()];
                    for (ListIterator<Float> iterator = floatList.listIterator(); iterator.hasNext();) {
                        array[iterator.nextIndex()] = iterator.next();
                    }
                    return array ;
                });


        // Random vertex list for demo purposes:
        Random rng = new Random();
        List<Vertex> vertices = IntStream.range(0, 100)
                .mapToObj(i -> new Vertex(rng.nextFloat(), rng.nextFloat(), rng.nextFloat()))
                .collect(Collectors.toList());

        float[] vertexArray = vertices.stream()
                .flatMap(v -> Stream.of(v.getX(), v.getY(), v.getZ()))
                .collect(toFloatArray);


        TriangleMesh mesh = new TriangleMesh();

        mesh.getPoints().addListener(obs -> System.out.println("mesh invalidated"));
        mesh.getPoints().addListener((array, sizeChanged, from, to) -> System.out.println("mesh changed"));
        mesh.getPoints().addAll(vertexArray);

    }

    public static class Vertex {
        private final float x ;
        private final float y ;
        private final float z ;
        public Vertex(float x, float y, float z) {
            this.x = x ;
            this.y = y ;
            this.z = z ;
        }
        public float getX() {
            return x;
        }
        public float getY() {
            return y;
        }
        public float getZ() {
            return z;
        }
        public float[] getCoordinates() {
            return new float[] {x, y, z};
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26941699" questionTitle="How to implement Checkbox / Radio cell depending on the data type in JavaFX">
<Answer><![CDATA[enum QuestionType { Multiple, Single };
public static class Question {
    IntegerProperty myIdx = new SimpleIntegerProperty();
    StringProperty myName = new SimpleStringProperty();
    QuestionType myType = QuestionType.Multiple;

    ObservableList<Answer> myAnswers = FXCollections.observableArrayList();

    public Question() {
        myAnswers.addListener((ListChangeListener.Change<? extends Answer> l) -> {myAnswers.forEach(a -> a.setQuestion(this));});
    }

    public void applyCorrectPolicy(Answer on) {
        switch (myType) {
            case Single:
                if (on.getCorrect()) {
                    myAnswers.forEach(a -> {if (a != on) a.setCorrect(false);});
                }
                break;
            default: break;
        }
    }

    public void setIdx(int idx) { myIdx.set(idx); }
    public void setType(QuestionType type) { myType = type;}
    public void setName(String name) { myName.set(name); }
    public void setAnswers(Collection<Answer> list) { myAnswers.clear(); myAnswers.addAll(list); }

    public int getIdx() { return myIdx.get(); }
    public QuestionType getType() { return myType;}
    public String getName() { return myName.get(); }
    public Collection<Answer> getAnswers() { return myAnswers; }
}

public static class Answer {
    Question       myQuestion;
    StringProperty myName = new SimpleStringProperty();
    BooleanProperty myCorrect = new SimpleBooleanProperty();

    public Answer(String name, boolean check) {
        myName.set(name);
        myCorrect.set(check);
        myCorrect.addListener(l -> {
            if (myQuestion != null) myQuestion.applyCorrectPolicy(this);
        });
    }

    public QuestionType getType() { return myQuestion.getType(); }

    public void setQuestion(Question question) { myQuestion = question; }

    public BooleanProperty correctProperty() { return myCorrect; }
    public StringProperty  nameProperty()    { return myName; }

    public void setCorrect(boolean correct) { myCorrect.set(correct); }
    public boolean getCorrect() { return myCorrect.get(); }
}]]></Answer>
<Answer><![CDATA[private void questionSelected(Question newQuestion) {
    if (newQuestion != null) {
        currentQuestionIsToggle = newQuestion.getType() == 1;

        ObservableList<Answer> data = FXCollections.observableArrayList();
        data.addAll(newQuestion.getAnswers());
        tbDetails.setItems(data);
    }
}

    ...
    // Only once for the tbDetails table:
    tcAction.setCellValueFactory(p -> p.getValue().correctProperty());
    tcAction.setCellFactory(p -> {
        CheckBoxTableCell box = new CheckBoxTableCell(){
            @Override public void updateItem(Object on, boolean empty) {
                super.updateItem(on, empty);
                if (on != null) {
                    Answer answer = tbDetails.getItems().get(getIndex());
                    answer.correctProperty().addListener((a) -> {
                        if (answer.getCorrect() && currentQuestionIsToggle) {
                            for (Answer other : tbDetails.getItems()) {
                                if (other != answer) other.setCorrect(false);
                            }
                        }
                    });
                }
            }
        };
        return box;
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26921891" questionTitle="Restrict text input inside combobox">
<Answer><![CDATA[ObservableList<String> myChoices = FXCollections.observableArrayList();

void testComboBoxCheck(VBox box) {
    myChoices.add("A");
    myChoices.add("B");
    myChoices.add("C");

    ComboBox<String> first = new ComboBox<String>();
    first.setItems(myChoices);
    first.setEditable(true);
    first.editorProperty().getValue().textProperty().addListener((v, o, n) -> {
        if (myChoices.contains(n.toUpperCase())) {
            first.setBackground(new Background(new BackgroundFill(Color.rgb(30,30,30), new CornerRadii(0), new Insets(0))));
        } else {
            first.setBackground(new Background(new BackgroundFill(Color.RED, new CornerRadii(0), new Insets(0))));
        }
    });

    box.getChildren().addAll(first);
}]]></Answer>
<Answer><![CDATA[ComboBox<Integer> integerComboBox = new ComboBox<Integer>();
integerComboBox.setEditable(true);
integerComboBox.getEditor().textProperty()
            .addListener(new ChangeListener<String>() {

                // The max length of the input
                int maxLength = 2;

                // The regular expression controlling the input, in this case we only allow number 0 to 9.
                String restriction = "[0-9]";

                private boolean ignore;

                @Override
                public void changed(
                        ObservableValue<? extends String> observableValue,
                        String oldValue, String newValue) {
                    if (ignore || newValue == null) {
                        return;
                    }

                    if (newValue.length() > maxLength) {
                        ignore = true;
                        integerComboBox.getEditor().setText(
                                newValue.substring(0, maxLength));
                        ignore = false;
                    }

                    if (!newValue.matches(restriction + "*")) {
                        ignore = true;
                        integerComboBox.getEditor().setText(oldValue);
                        ignore = false;
                    }
                }
            });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26916195" questionTitle="How to get a JavaFX MenuItem to respond to a TAB KeyPress?">
<Answer><![CDATA[private ContextMenuContent.MenuItemContainer itemSelected=null;

@Override
public void start(Stage primaryStage) {

    MenuItem cmItem1 = new MenuItem("Item 1");
    cmItem1.setOnAction(e->System.out.println("Item 1"));
    MenuItem cmItem2 = new MenuItem("Item 2");
    cmItem2.setOnAction(e->System.out.println("Item 2"));

    final ContextMenu cm = new ContextMenu(cmItem1,cmItem2);

    Scene scene = new Scene(new StackPane(), 300, 250);
    scene.setOnMouseClicked(t -> {
        if(t.getButton()==MouseButton.SECONDARY || t.isControlDown()){
            cm.show(scene.getWindow(),t.getScreenX(),t.getScreenY());

            ContextMenuContent cmc= (ContextMenuContent)cm.getSkin().getNode();

            cmc.setOnKeyPressed(ke->{
                switch (ke.getCode()) {
                    case UP:    break;
                    case DOWN:  break;
                    case TAB:   ke.consume();
                                if(itemSelected!=null){
                                    itemSelected.getItem().fire();
                                }
                                cm.hide();
                                break;
                    default: break;
                }
            });
            VBox itemsContainer = cmc.getItemsContainer();
            itemsContainer.getChildren().forEach(n->{
                ContextMenuContent.MenuItemContainer item=(ContextMenuContent.MenuItemContainer)n;
                item.focusedProperty().addListener((obs,b,b1)->{
                    if(b1){
                        itemSelected=item;
                    }
                });
            });
        }
    });

    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public class MenuItemHandler_CMC <T extends Event> implements EventHandler {
    public ContextMenuContent m_cmc;

    public AddressCompletionMenuItemHandler_CMC(ContextMenuContent cmc){
        m_cmc = cmc;
    }

    @Override
    public void handle(Event event){
        KeyEvent ke = (KeyEvent)event;
        switch(ke.getCode()){
        case TAB: 
            ke.consume();
            MenuItem focused_menu_item = findFocusedMenuItem();
            if(focused_menu_item != null){
                focused_menu_item.fire();
            }
            break;
        default: break;
        }
    }

    public MenuItem findFocusedMenuItem() {
        VBox items_container = m_cmc.getItemsContainer();
        for (int i = 0; i < items_container.getChildren().size(); i++) {
            Node n = items_container.getChildren().get(i);
            if (n.isFocused()) {
                ContextMenuContent.MenuItemContainer menu_item_container = (ContextMenuContent.MenuItemContainer)n;
                MenuItem menu_item = menu_item_container.getItem();
                return menu_item;
            }
        }
        return null;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26895534" questionTitle="JavaFX Split Menu Button Arrow Trigger Event">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.Scene;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SplitMenuButton;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class SplitMenuButtonTest extends Application {

    @Override
    public void start(Stage primaryStage) {

        IntegerProperty count = new SimpleIntegerProperty();

        SplitMenuButton splitMenuButton = new SplitMenuButton();
        splitMenuButton.setText("Action");
        splitMenuButton.showingProperty().addListener((obs, wasShowing, isNowShowing) -> {
            if (isNowShowing) {
                int c = count.get() + 1;
                count.set(c);
                splitMenuButton.getItems().clear();
                for (int choice = 1; choice <= 3; choice++) {
                    MenuItem mi = new MenuItem("Choice "+choice+" (" + c + ")");
                    splitMenuButton.getItems().add(mi);
                }
            }
        });

        BorderPane root = new BorderPane(null, splitMenuButton, null, null, null);
        primaryStage.setScene(new Scene(root, 350, 150));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    SplitMenuButton m = new SplitMenuButton();
    m.showingProperty().addListener((ov,b,b1)->{
        if(b1){
            System.out.println("popup visible");
            MenuItem menuItem = new MenuItem("New Option");
            if(m.getItems().stream().noneMatch(i->i.getText().equals(menuItem.getText()))){
                menuItem.setOnAction(e -> System.out.println("New Option added"));
                m.getItems().add(menuItem);
            }
        }
    });
    m.setText("Click the arrow ->");                
    m.getItems().add(new MenuItem("First option"));

    StackPane root = new StackPane(m);
    Scene scene = new Scene(root, 300, 250);
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26881887" questionTitle="Using texture for triangle mesh without having to read/write an image file">
<Answer><![CDATA[Pane testImage2(Pane pane) {
    Pane inner = new Pane();
    inner.prefWidthProperty().bind(pane.widthProperty());
    inner.prefHeightProperty().bind(pane.heightProperty());
    pane.getChildren().add(inner);

    SVGPath texture = new SVGPath();
    texture.setStroke(Color.GREEN);
    texture.setStrokeWidth(2.5);
    texture.setFill(Color.TRANSPARENT);
    texture.setContent("M 10 10 C 40 10 10 70 70 20");

    SnapshotParameters params = new SnapshotParameters();
    params.setViewport(new Rectangle2D(-5, -5, 70, 50));
    Image image = texture.snapshot(params, null);

    Paint paint = new ImagePattern(image, 5,5, 20, 20, false);
    inner.setBackground(new Background(new BackgroundFill(paint, new CornerRadii(0), new Insets(inset))));
    return pane;
}]]></Answer>
<Answer><![CDATA[public static Image colorPallete(int numColors){
    int width=(int)Math.sqrt(numColors);
    int height=numColors/width;

    WritableImage img = new WritableImage(width, height);
    PixelWriter   pw  = img.getPixelWriter();
    AtomicInteger count = new AtomicInteger();
    IntStream.range(0, height).boxed()
            .forEach(y->IntStream.range(0, width).boxed()
                    .forEach(x->pw.setColor(x, y, getColor(count.getAndIncrement(),numColors))));

    // save for testing purposes
    try {            
        ImageIO.write(SwingFXUtils.fromFXImage(img, null), "jpg", new File("palette.jpg"));
    } catch (IOException ex) { }
    return img;
}

private Color getColor(int iColor, int numColors){
    // nice palette of colors 
    java.awt.Color c = java.awt.Color.getHSBColor((float) iColor / (float) numColors, 1.0f, 1.0f);
    return Color.rgb(c.getRed(), c.getGreen(), c.getBlue());

    // raw palette
    //return Color.rgb((iColor >> 16) & 0xFF, (iColor >> 8) & 0xFF, iColor & 0xFF);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26868255" questionTitle="JavaFX spring physics">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.StrokeType;
import javafx.stage.Stage;

public class SpringField extends Application {
    MouseGestures mg = new MouseGestures();
    double damping = 0.995;
    double speedo = 0.001;

    List<Particle> particles = new ArrayList<>();
    List<Spring> springs = new ArrayList<>();

    public static void main(String[] args) {
        launch(args);
    }

    Particle addParticle(Group parent, Paint p, double x, double y, double mass) {
        Particle particle = new Particle(p, x, y, mass);
        mg.makeDraggable(particle);
        particles.add(particle);
        parent.getChildren().add(particle);
        return particle;
    }

    void addSpring(Group parent, Particle p1, Particle p2, double length, double strength) {
        Spring spring = new Spring(parent, p1, p2, length, strength);
        springs.add(spring);
    }

    @Override
    public void start(Stage primaryStage) {

        Group root = new Group();

        // create particles
        Particle pRed = addParticle(root, Color.RED, 300, 100, 10);
        Particle pBlue = addParticle(root, Color.BLUE, 600, 200, 1);
        Particle pGreen = addParticle(root, Color.GREEN, 300, 300, 1);


        // add springs
        addSpring(root, pRed, pBlue, 100, 0.5);
        addSpring(root, pGreen, pBlue, 100, 0.5);
        addSpring(root, pGreen, pRed, 100, 0.5);

        primaryStage.setScene(new Scene(root, 1024, 768));
        primaryStage.show();

        // animate
        startAnimation();

    }

    private void startAnimation() {

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {

                // move particles
                for (Particle p : particles) {

                    if (!p.selected) {
                        p.move();
                    }

                }

                // apply springs
                for (Spring s : springs) {
                    s.update();
                }

                // move particles to new location
                for (Particle p : particles) {

                    p.updateLocation();

                }

            }
        };
        timer.start();

    }

    /**
     * The spring constraint and calculation. Updates particle
     */
    public class Spring {

        Particle p1;
        Particle p2;

        double length; // length it tries to obtain
        double strength; //  how quickly it tries to reach that length

        public Spring(Group parent, Particle p1, Particle p2, double length, double strength) {
            this.p1 = p1;
            this.p2 = p2;
            this.length = length;
            this.strength = strength;

            Line lineRedBlue = new Line(100, 100, 500, 500);
            lineRedBlue.setStroke(Color.BLACK);
            lineRedBlue.setStrokeWidth(5);
            lineRedBlue.startXProperty().bind(p1.centerXProperty());
            lineRedBlue.startYProperty().bind(p1.centerYProperty());
            lineRedBlue.endXProperty().bind(p2.centerXProperty());
            lineRedBlue.endYProperty().bind(p2.centerYProperty());
            parent.getChildren().add(lineRedBlue);
        }

        public void update() {
            double stop = 1.0;
            double dx = p1.getCenterX() - p2.getCenterX();
            double dy = p1.getCenterY() - p2.getCenterY();

            double dist = Math.hypot(dx, dy);
            double theta = Math.atan2(dy, dx);
            double force = (length - dist) * strength;
            if (force > 0) { force *= 4; stop = 0.9; }

            // System.out.println( dist + ", " + Math.toDegrees( theta) + ", " + force);
            Point2D p1v = new Point2D(force*Math.cos(theta)*speedo/p1.mass, force*Math.sin(theta)*speedo/p1.mass);
            Point2D p2v = new Point2D(-force*Math.cos(theta)*speedo/p2.mass, -force*Math.sin(theta)*speedo/p2.mass);
            p1.vector = p1.vector.add(p1v).multiply(stop);
            p2.vector = p2.vector.add(p2v).multiply(stop);
        }
    }

    /**
     * The particle itself
     */
    public class Particle extends Circle {

        double x;
        double y;

        Point2D vector = new Point2D(0, 0);

        double mass = 1;

        boolean selected = false;

        public Particle(Paint color, double x, double y, double mass) {

            super(x, y, 50);

            this.x = x;
            this.y = y;
            this.mass = mass;

            setFill(color);
            setStroke(color);
            setStrokeWidth(2);
            setStrokeType(StrokeType.OUTSIDE);

        }

        public void move() {

            x += vector.getX();
            y += vector.getY(); 
            vector = vector.multiply(damping);

        }

        public void updateLocation() {
            setCenterX( x);
            setCenterY( y);
        }
    }

    /**
     * Allow movement of objects via mouse.
     */
    public class MouseGestures {

        double orgSceneX, orgSceneY;
        double orgTranslateX, orgTranslateY;

        public void makeDraggable( Node node) {
            node.setOnMousePressed(circleOnMousePressedEventHandler);
            node.setOnMouseDragged(circleOnMouseDraggedEventHandler);
            node.setOnMouseReleased(circleOnMouseReleasedEventHandler);
        }

        EventHandler<MouseEvent> circleOnMousePressedEventHandler = new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent t) {

                orgSceneX = t.getSceneX();
                orgSceneY = t.getSceneY();

                Particle p = ((Particle) (t.getSource()));
                p.selected = true;

                orgTranslateX = p.getCenterX();
                orgTranslateY = p.getCenterY();
            }
        };

        EventHandler<MouseEvent> circleOnMouseReleasedEventHandler = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent t) {

                Particle p = ((Particle) (t.getSource()));
                p.selected = false;

            };

        };

        EventHandler<MouseEvent> circleOnMouseDraggedEventHandler = new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent t) {

                double offsetX = t.getSceneX() - orgSceneX;
                double offsetY = t.getSceneY() - orgSceneY;

                double newTranslateX = orgTranslateX + offsetX;
                double newTranslateY = orgTranslateY + offsetY;

                Particle p = ((Particle) (t.getSource()));

                p.x = newTranslateX;
                p.y = newTranslateY;
            }
        };

    }
}]]></Answer>
<Answer><![CDATA[public void solve() {
   // calculate the distance between the two PointMasss
   Point3D diff = new Point3D(
      p1.getPosition().getX() - p2.getPosition().getX(),
      p1.getPosition().getY() - p2.getPosition().getY(),
      p1.getPosition().getZ() - p2.getPosition().getZ()
   );
   double d = diff.magnitude();
   double difference = (distance - d) / d;
   double im1 = 1 / p1.getMass();
   double im2 = 1 / p2.getMass();
   double scalarP1 = (im1 / (im1 + im2)) * stiffness;
   double scalarP2 = stiffness - scalarP1;

   p1.position.x = (float) (p1.getPosition().x + diff.x * scalarP1 * difference);
   p1.position.y = (float) (p1.getPosition().y + diff.y * scalarP1 * difference);
   p1.position.z = (float) (p1.getPosition().z + diff.z * scalarP1 * difference);
   p2.position.x = (float) (p2.getPosition().x - diff.x * scalarP2 * difference);
   p2.position.y = (float) (p2.getPosition().y - diff.y * scalarP2 * difference);
   p2.position.z = (float) (p2.getPosition().z - diff.z * scalarP2 * difference);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26863407" questionTitle="AspectJ Maven Plugin cannot compile my project">
<Answer><![CDATA[<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>aspectj-maven-plugin</artifactId>
    <version>1.6</version>
    <configuration>
        <complianceLevel>1.7</complianceLevel>
        <source>1.7</source>
        <target>1.7</target>
        <encoding>UTF-8</encoding>
    </configuration>
    <executions>
        <execution>
            <phase>process-sources</phase>
            <goals>
                <goal>compile</goal>
            </goals>
            <configuration>
                <complianceLevel>1.7</complianceLevel>
                <source>1.7</source>
                <target>1.7</target>
            </configuration>
        </execution>
    </executions>
</plugin>]]></Answer>
<Answer><![CDATA[<properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.source-target.version>1.8</java.source-target.version>
        <aspectj.version>1.8.4</aspectj.version>
    </properties>

    <build>
        <pluginManagement>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>aspectj-maven-plugin</artifactId>
                    <version>1.7</version>
                    <configuration>
                        <showWeaveInfo>true</showWeaveInfo>
                        <source>${java.source-target.version}</source>
                        <target>${java.source-target.version}</target>
                        <Xlint>ignore</Xlint>
                        <complianceLevel>${java.source-target.version}</complianceLevel>
                        <encoding>UTF-8</encoding>
                        <verbose>true</verbose>
                    </configuration>
                    <executions>
                        <execution>
                            <!-- IMPORTANT -->
                            <phase>process-sources</phase>
                            <goals>
                                <goal>compile</goal>
                                <goal>test-compile</goal>
                            </goals>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjtools</artifactId>
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${aspectj.version}</version>
                <scope>runtime</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>
    </dependencies>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26860308" questionTitle="java fx multiple selection with mouse like in excel">
<Answer><![CDATA[ObservableList <Node> entries = mainTable.getChildren();
for (Node elem : entries){
    elem.setOnDragDetected(new EventHandler<MouseEvent>() {
        @Override public void handle(MouseEvent e) {
            StackPane entry = (StackPane) elem;
            Dragboard db = entry.startDragAndDrop(TransferMode.ANY);
            ClipboardContent cb = new ClipboardContent();
            cb.put(DataFormat.PLAIN_TEXT, "");
            db.setContent(cb);
            Text tEntry = (Text) entry.getChildren().get(0);
            tEntry.setFill(Color.BLUE);
        }
    });
    elem.setOnDragOver(new EventHandler<DragEvent>() {
        @Override public void handle(DragEvent e) {
            e.acceptTransferModes(TransferMode.ANY);
            StackPane entry = (StackPane) elem;
            Text tEntry = (Text) entry.getChildren().get(0);
            tEntry.setFill(Color.BLUE);
        }
    });
}]]></Answer>
<Answer><![CDATA[import java.util.HashSet;
import java.util.Set;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableSet;
import javafx.collections.SetChangeListener.Change;
import javafx.css.PseudoClass;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.stage.Stage;

public class SelectableGridPane extends Application {

    private final ObservableSet<Label> selectedLabels =
            FXCollections.observableSet();


    private final int ROWS = 10 ;
    private final int COLS = 10 ;

    private final Label[][] labels = new Label[COLS][ROWS];

    private final PseudoClass SELECTED =
            PseudoClass.getPseudoClass("selected");

    @Override
    public void start(Stage primaryStage) {
        GridLocation mouseDownLoc = new GridLocation();
        GridPane grid = new GridPane();
        grid.setHgap(5);
        grid.setVgap(5);
        grid.setGridLinesVisible(true);

        for (int i = 0; i < COLS; i++) {
            for (int j = 0; j < ROWS; j++) {
                addLabel(grid, i, j, mouseDownLoc);
            }
        }

        selectedLabels.addListener((Change<? extends Label> change) -> {
            if (change.wasAdded()) {
                Label label = change.getElementAdded();
                label.pseudoClassStateChanged(SELECTED, true);
            } else if (change.wasRemoved()) {
                Label label = change.getElementRemoved();
                label.pseudoClassStateChanged(SELECTED, false);
            }
        });

        Scene scene = new Scene(grid, 800, 800);
        scene.getStylesheets().add("dragging-grid-pane.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void addLabel(GridPane grid, int col, int row,
            GridLocation mouseDownLoc) {
        Label label = new Label("Cell ["+(col+1)+", "+(row+1)+"]");
        labels[col][row] = label ;

        grid.add(label, col, row);
        GridPane.setFillWidth(label, true);
        GridPane.setHgrow(label, Priority.ALWAYS);
        GridPane.setVgrow(label, Priority.ALWAYS);

        label.setAlignment(Pos.CENTER);
        label.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);


        label.setOnDragDetected(event -> {
            mouseDownLoc.x = col ;
            mouseDownLoc.y = row ;
            selectedLabels.clear();
            selectedLabels.add(label);
            label.startFullDrag();
        });

        label.setOnMouseDragEntered(event -> 
                recomputeSelection(mouseDownLoc, col, row));

    }

    private void recomputeSelection(GridLocation mouseDown, 
            int x, int y) {
        Set<Label> newSelection = new HashSet<>();
        int startX = Math.min(x,  mouseDown.x);
        int endX = Math.max(x, mouseDown.x);
        int startY = Math.min(y, mouseDown.y);
        int endY = Math.max(y, mouseDown.y);

        for (int j = startY; j <= endY; j++) {
            for (int i = startX; i <= endX; i++) {
                newSelection.add(labels[i][j]);
            }
        }

        // remove anything in selectedLabels 
        // that is not in newSelection:
        selectedLabels.retainAll(newSelection);

        // add everything from newSelection
        // to selectedLabels (will not duplicate):
        selectedLabels.addAll(newSelection);
    }

    private static class GridLocation {
        int x, y ;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26826988" questionTitle="How to delay the Drag-Start to combine move and Drag-And-Drop dynamically">
<Answer><![CDATA[package fx.samples;

import java.io.File;
import java.util.LinkedList;

import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Bounds;
import javafx.geometry.Point2D;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.SnapshotParameters;
import javafx.scene.image.WritableImage;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.DataFormat;
import javafx.scene.input.Dragboard;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import javax.imageio.ImageIO;


public class DragRectangle extends Application {
    Point2D lastXY = null;

    public void start(Stage primaryStage) {
        Pane mainPane = new Pane(); 
        Scene scene = new Scene(mainPane, 500, 500);
        primaryStage.setScene(scene);
        primaryStage.show();

        Rectangle area = new Rectangle(0, 0, 500 , 500);

        Rectangle rect = new Rectangle(0, 0, 30, 30);
        rect.setFill(Color.RED);
        mainPane.getChildren().add(rect);

        rect.setOnMouseDragged(event -> {
            System.out.println("Move");
            event.setDragDetect(false);
            Node on = (Node)event.getTarget();
            if (lastXY == null) {
                lastXY = new Point2D(event.getSceneX(), event.getSceneY());
            }
            double dx = event.getSceneX() - lastXY.getX();
            double dy = event.getSceneY() - lastXY.getY();
            on.setTranslateX(on.getTranslateX()+dx);
            on.setTranslateY(on.getTranslateY()+dy);
            lastXY = new Point2D(event.getSceneX(), event.getSceneY());
            if (!area.intersects(event.getSceneX(), event.getSceneY(), 1, 1)) event.setDragDetect(true);
            event.consume();
        });

        rect.setOnDragDetected(event -> {
            System.out.println("Drag:"+event);
            Node on = (Node)event.getTarget();
            Dragboard db = on.startDragAndDrop(TransferMode.COPY);
            db.setContent(makeClipboardContent(event, on, "red rectangle"));
            event.consume();
        });

        rect.setOnMouseReleased(d ->  lastXY = null);
    }

    public static ClipboardContent makeClipboardContent(MouseEvent event, Node child, String text) {
        ClipboardContent cb = new ClipboardContent();
        if (text != null) {
            cb.put(DataFormat.PLAIN_TEXT, text);
        }
        if (!event.isShiftDown()) {
            SnapshotParameters params = new SnapshotParameters();
            params.setFill(Color.TRANSPARENT);
            Bounds b = child.getBoundsInParent();
            double f = 10;
            params.setViewport(new Rectangle2D(b.getMinX()-f, b.getMinY()-f, b.getWidth()+f+f, b.getHeight()+f+f));

            WritableImage image = child.snapshot(params, null);
            cb.put(DataFormat.IMAGE, image);

            try {
                File tmpFile = File.createTempFile("snapshot", ".png");
                LinkedList<File> list = new LinkedList<File>();
                ImageIO.write(SwingFXUtils.fromFXImage(image, null),
                        "png", tmpFile);
                list.add(tmpFile);
                cb.put(DataFormat.FILES, list);
            } catch (Exception e) {

            }
        }
        return cb;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Pane mainPane = new Pane();

    Rectangle rect = new Rectangle(0, 0, 30, 30);
    rect.setFill(Color.RED);
    mainPane.getChildren().add(rect);

    Scene scene = new Scene(mainPane, 500, 500);
    primaryStage.setScene(scene);
    primaryStage.show();

    rect.setOnDragDetected(event -> {
        Node on = (Node)event.getSource();
        Dragboard db = on.startDragAndDrop(TransferMode.ANY);
        db.setContent(makeClipboardContent(event, on, null));
        event.consume();
    });

    mainPane.setOnDragOver(e->{
        e.acceptTransferModes(TransferMode.ANY);
    });

    mainPane.setOnDragExited(e->{
        rect.setLayoutX(e.getSceneX()-rect.getWidth()/2d);
        rect.setLayoutY(e.getSceneY()-rect.getHeight()/2d);
    });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26808261" questionTitle="Action Buttons css style in JavaFX ControlFX dialog">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    Alert alert = new Alert(AlertType.CONFIRMATION);
    alert.setTitle("Confirmation Dialog");
    alert.setHeaderText("This is a Custom Confirmation Dialog");
    alert.setContentText("We override the style classes of dialog.css");

    Button button = new Button("Click to display an alert");
    button.setOnAction(e->{
        Optional<ButtonType> result = alert.showAndWait();
        result.ifPresent(System.out::println);
    });

    Scene scene = new Scene(new StackPane(button), 300, 200);
    primaryStage.setScene(scene);
    primaryStage.show();

    DialogPane dialogPane = alert.getDialogPane();
// root
    dialogPane.setStyle("-fx-background-color: greenyellow;");

// 1. Grid
    // remove style to customize header
    dialogPane.getStyleClass().remove("alert");

    GridPane grid = (GridPane)dialogPane.lookup(".header-panel"); 
    grid.setStyle("-fx-background-color: cadetblue; "
            + "-fx-font-style: italic;");

    // custom icon
    StackPane stackPane = new StackPane(new ImageView(
            new Image(getClass().getResourceAsStream("lock24.png"))));
    stackPane.setPrefSize(24, 24);
    stackPane.setAlignment(Pos.CENTER);
    dialogPane.setGraphic(stackPane);

// 2. ContentText with just a Label
    dialogPane.lookup(".content.label").setStyle("-fx-font-size: 16px; "
            + "-fx-font-weight: bold; -fx-fill: blue;");

// 3- ButtonBar
    ButtonBar buttonBar = (ButtonBar)alert.getDialogPane().lookup(".button-bar");
    buttonBar.setStyle("-fx-font-size: 24px;"
            + "-fx-background-color: indianred;");
    buttonBar.getButtons().forEach(b->b.setStyle("-fx-font-family: \"Andalus\";"));

}]]></Answer>
<Answer><![CDATA[.dialog > .dialog-pane {
    -fx-background-color: greenyellow;
}

.dialog > .dialog-pane > .button-bar {
    -fx-font-size: 24px;
    -fx-background-color: indianred;
    -fx-font-family: "Andalus";
}

.dialog > .dialog-pane > .content.label {
    -fx-font-size: 16px;
    -fx-font-weight: bold; 
    -fx-fill: blue;
}

.dialog:header > .dialog-pane .header-panel {
    -fx-background-color: cadetblue;
    -fx-font-style: italic;
}

.alert.confirmation.dialog-pane {
    -fx-graphic: url("lock24.png");
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26804941" questionTitle="How can I have JAX-RS return a Java 8 LocalDateTime property as a JavaScript-style Date String?">
<Answer><![CDATA[<jackson.version>2.8.0</jackson.version>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>]]></Answer>
<Answer><![CDATA[<dependency>
    <groupId>org.glassfish.jersey.media</groupId>
    <artifactId>jersey-media-json-jackson</artifactId>
    <version>${jersey.version}</version>
</dependency>

public class LocalDateTimeAdapter extends XmlAdapter<String, LocalDateTime> {
    @Override
    public LocalDateTime unmarshal(String s) throws Exception {
        return LocalDateTime.parse(s);
    }
    @Override
    public String marshal(LocalDateTime dateTime) throws Exception {
        return dateTime.toString();
    }   
}

// Getter for model class
@XmlJavaTypeAdapter(LocalDateTimeAdapter.class)
public LocalDateTime getDateTime() {
    return dateTime;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26803380" questionTitle="How to combine scatter chart with line chart to show line of regression? JavaFX">
<Answer><![CDATA[@Override
public void start(Stage stage) {
    final LineChart<Number,Number> sc = new LineChart<>(new NumberAxis(),new NumberAxis());

    XYChart.Series series1 = new XYChart.Series();
    series1.setName("Equities");
    series1.getData().add(new XYChart.Data(4.2, 193.2));
    series1.getData().add(new XYChart.Data(2.8, 33.6));
    series1.getData().add(new XYChart.Data(6.8, 23.6));

    XYChart.Series series2 = new XYChart.Series();
    series2.setName("Mutual funds");
    series2.getData().add(new XYChart.Data(5.2, 229.2));
    series2.getData().add(new XYChart.Data(2.4, 37.6));
    series2.getData().add(new XYChart.Data(6.4, 15.6));

    sc.setAnimated(false);
    sc.setCreateSymbols(true);

    sc.getData().addAll(series1, series2);

    Scene scene  = new Scene(sc, 500, 400);
    scene.getStylesheets().add(getClass().getResource("root.css").toExternalForm());
    stage.setScene(scene);
    stage.show();
}]]></Answer>
<Answer><![CDATA[final ScatterChart<Number,Number> sc = new
    ScatterChart<Number,Number>(xAxis,yAxis);
final LineChart<Number,Number> lc = new
    LineChart<Number,Number>(xAxis,yAxis);

XYChart.Series series1 = new XYChart.Series();
series1.setName("Equities");
series1.getData().add(new XYChart.Data(4.2, 193.2));
series1.getData().add(new XYChart.Data(2.8, 33.6));

XYChart.Series series2 = new XYChart.Series();
series2.setName("Mutual funds");
series2.getData().add(new XYChart.Data(5.2, 229.2));
series2.getData().add(new XYChart.Data(2.4, 37.6));

sc.getData().addAll(series1);
lc.getData().addAll(series2);

Pane pane=new Pane();
pane.getChildren().add(sc);
pane.getChildren().add(lc);

lc.setOpacity(0.5);

Scene scene  = new Scene(pane, 500, 400);
stage.setScene(scene);
stage.show();
}

public static void main(String[] args) {
  launch(args);
}]]></Answer>
<Answer><![CDATA[import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class Exemple158bis_JavaFX_Overlaid_Stacked_Charts extends Application {

@Override
public void start(Stage stage) throws Exception {

    NumberAxis xAxis = new NumberAxis();
    NumberAxis yAxis = new NumberAxis();

    final ScatterChart<Number, Number> sc = new ScatterChart<>(xAxis, yAxis);
    final LineChart<Number, Number> lc = new LineChart<>(xAxis, yAxis);

    XYChart.Series series1 = new XYChart.Series();
    series1.setName("Equities");
    series1.getData().add(new XYChart.Data(4.2, 193.2));
    series1.getData().add(new XYChart.Data(2.8, 33.6));

    XYChart.Series series2 = new XYChart.Series();
    series2.setName("Mutual funds");
    series2.getData().add(new XYChart.Data(5.2, 229.2));
    series2.getData().add(new XYChart.Data(2.4, 37.6));

    sc.getData().addAll(series1);
    lc.getData().addAll(series2);

    Pane pane = new Pane();
    pane.getChildren().add(sc);
    pane.getChildren().add(lc);

    lc.setOpacity(0.5);

    Scene scene = new Scene(pane, 800, 600);
    stage.setScene(scene);
    stage.show();
}

public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26795514" questionTitle="TreeView - How to count all children (including collapsed)">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.util.*;
import java.util.stream.*;

public class TreeViewSample extends Application {

    // limits on randomly generated tree size.
    private static final int MAX_DEPTH = 8;
    private static final int MAX_CHILDREN_PER_NODE = 6;
    private static final double EXPANSION_PROPABILITY = 0.2;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Label numItemsLabel = new Label();

        // create a tree.
        TreeItem<String> rootItem = TreeFactory.createTree(
                MAX_DEPTH,
                MAX_CHILDREN_PER_NODE,
                EXPANSION_PROPABILITY
        );
        rootItem.setExpanded(true);
        TreeView<String> tree = new TreeView<>(rootItem);

        numItemsLabel.setText(
            "Num Items: " + countExpandedItemsUsingStream(rootItem)
        );

        // display the number of items and the tree.
        VBox layout = new VBox(10, numItemsLabel, tree);
        layout.setPadding(new Insets(10));

        stage.setScene(new Scene(layout, 300, 250));
        stage.show();
    }

    // unused method demonstrating alternate solution.
    private long countItemsUsingIterator(TreeItem<String> rootItem) {
        TreeItemIterator<String> iterator = new TreeItemIterator<>(rootItem);

        int nItems = 0;
        while (iterator.hasNext()) {
            nItems++;
            iterator.next();
        }

        return nItems;
    }

    private long countExpandedItemsUsingStream(TreeItem<String> rootItem) {
        return
                TreeItemStreamSupport.stream(rootItem)
                        .filter(TreeItem::isExpanded)
                        .count();
    }

    // unused method demonstrating alternate Jens-Peter Haack solution.
    private long countItemsUsingRecursion(TreeItem<?> node) {
        int count = 1;

        for (TreeItem child : node.getChildren()) {
            count += countItemsUsingRecursion(child);
        }

        return count;
    }

    /**
     * Random Tree generation algorithm.
     */
    private static class TreeFactory {
        private static final Random random = new Random(42);

        static TreeItem<String> createTree(
                int maxDepth,
                int maxChildrenPerNode,
                double expansionProbability
        ) {
            TreeItem<String> root = new TreeItem<>("Root 0:0");
            Stack<DepthTreeItem> itemStack = new Stack<>();
            itemStack.push(new DepthTreeItem(root, 0));

            while (!itemStack.isEmpty()) {
                int numChildren = random.nextInt(maxChildrenPerNode + 1);

                DepthTreeItem nextItem = itemStack.pop();
                int childDepth = nextItem.depth + 1;

                for (int i = 0; i < numChildren; i++) {
                    TreeItem<String> child = new TreeItem<>(
                        "Item " + childDepth + ":" + i
                    );
                    child.setExpanded(random.nextDouble() < expansionProbability);
                    nextItem.treeItem.getChildren().add(child);
                    if (childDepth < maxDepth) {
                        itemStack.push(new DepthTreeItem(child, childDepth));
                    }
                }
            }

            return root;
        }

        static class DepthTreeItem {
            DepthTreeItem(TreeItem<String> treeItem, int depth) {
                this.treeItem = treeItem;
                this.depth = depth;
            }
            TreeItem<String> treeItem;
            int depth;
        }
    }
}

/**
 * Provide a stream of tree items from a root tree item.
 */
class TreeItemStreamSupport {
    public static <T> Stream<TreeItem<T>> stream(TreeItem<T> rootItem) {
        return asStream(new TreeItemIterator<>(rootItem));
    }

    private static <T> Stream<TreeItem<T>> asStream(TreeItemIterator<T> iterator) {
        Iterable<TreeItem<T>> iterable = () -> iterator;

        return StreamSupport.stream(
                iterable.spliterator(),
                false
        );
    }
}

/**
 * Iterate over items in a tree.
 * The tree should not be modified while this iterator is being used.
 *
 * @param <T> the type of items stored in the tree.
 */
class TreeItemIterator<T> implements Iterator<TreeItem<T>> {
    private Stack<TreeItem<T>> stack = new Stack<>();

    public TreeItemIterator(TreeItem<T> root) {
        stack.push(root);
    }

    @Override
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    @Override
    public TreeItem<T> next() {
        TreeItem<T> nextItem = stack.pop();
        nextItem.getChildren().forEach(stack::push);

        return nextItem;
    }
}]]></Answer>
<Answer><![CDATA[static class InfiniteNumberItem extends TreeItem<String> {
    boolean expanded = false;
    public InfiniteNumberItem(String name) {
        super(name);
    }

    @Override public ObservableList<TreeItem<String>> getChildren() {
        if (!expanded) {
            for (int i = 0; i < 10; i++)  {
                super.getChildren().add(new InfiniteNumberItem(""+i));
            }
            expanded = true;
        }
        return super.getChildren();
    }
    @Override public boolean isLeaf() {
        return false;
    }
}

void testTreeInfinite(VBox box) { 
    TreeView<String> tree = new TreeView<String>();
    tree.prefHeightProperty().bind(box.heightProperty());

    tree.setRoot(new InfiniteNumberItem("3."));
    box.getChildren().add(tree);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26775676" questionTitle="Explicit use of LambdaMetafactory">
<Answer><![CDATA[public class MetafactoryTest {

    public static void main(String[] args) throws Throwable {

        MethodHandles.Lookup caller = MethodHandles.lookup();
        MethodType methodType = MethodType.methodType(Object.class);
        MethodType actualMethodType = MethodType.methodType(String.class);
        MethodType invokedType = MethodType.methodType(Supplier.class);
        CallSite site = LambdaMetafactory.metafactory(caller, 
                                                      "get", 
                                                      invokedType, 
                                                      methodType, 
                                                      caller.findStatic(MetafactoryTest.class, "print", actualMethodType), 
                                                      methodType);
        MethodHandle factory = site.getTarget();
        Supplier<String> r = (Supplier<String>) factory.invoke();
        System.out.println(r.get());
    }

    private static String print() {
        return "hello world";
    }    
}]]></Answer>
<Answer><![CDATA[public class Demo {
    public static void main(String[] args) throws Throwable {
        Consumer<String> consumer = s -> System.out.println("CONSUMED: " + s + ".");

        consumer.accept("foo");

        MethodHandles.Lookup caller = MethodHandles.lookup();

        MethodType lambdaBodyMethodType = MethodType.methodType(void.class, String.class);
        MethodHandle lambdaBody = caller.findStatic(
                Demo.class, "my$lambda$main$0", lambdaBodyMethodType);

        // Because of the type erasure we must use Object here
        // instead of String (Consumer<String> -> Consumer).
        MethodType functionalInterfaceMethodType =
                MethodType.methodType(void.class, Object.class);

        // we must return consumer, no closure -> no additional parameters
        MethodType callSiteType = MethodType.methodType(Consumer.class);

        CallSite site = LambdaMetafactory.metafactory(
                // provided by invokedynamic:
                caller, "accept", callSiteType,
                // additional bootstrap method arguments:
                functionalInterfaceMethodType,
                lambdaBody,
                lambdaBodyMethodType);

        MethodHandle factory = site.getTarget();
        Consumer<String> r = (Consumer<String>) factory.invoke();

        r.accept("foo");
        r.accept("bar");
    }

    private static void my$lambda$main$0(String s) {
        System.out.println("CONSUMED: " + s + ".");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26715450" questionTitle="JavaFX task communication">
<Answer><![CDATA[@FXML private TextField tfCmd;
@FXML private TextArea taTerminal;
@FXML private Button btStart;
@FXML private Button btRefresh;

public Task<String> task; 

public FXML_ExecuteInfiniteController() 
{
    this.task = new Task<String>() 
    {
        @Override protected String call() throws Exception 
        {
            String cmd = tfCmd.getText();
            BufferedReader reader = SSH.execute(cmd);

            String linea;
            String outputText = "";
            while ((linea = reader.readLine()) != null) 
            {
                System.out.println(linea);
                outputText = outputText + linea +"\n" ;
                updateMessage(outputText);

            }
            return outputText;
        }
    };
}  

@FXML private void actionStart(ActionEvent event1)throws Exception
{
    Thread th = new Thread(task);
    th.start();
}

@FXML private void actionRefresh(ActionEvent event1)throws Exception
{
    taTerminal.setText(task.getMessage());
}]]></Answer>
<Answer><![CDATA[@FXML private void actionStart(ActionEvent event1)throws Exception
{
    final String cmd = tfCmd.getText();
    final Task<Void> task = new Task<Void>() 
    {
        @Override protected Void call() throws Exception 
        {
            BufferedReader reader = SSH.execute(cmd);

            String linea;
            String outputText = "";
            while ((linea = reader.readLine()) != null) 
            {
                System.out.println(linea);
                outputText = outputText + linea +"\n" ;
                updateMessage(outputText);

            }
            return null;
        }
    };

    task.messageProperty().addListener(new ChangeListener<String>() {
        @Override
        public void changed(ObservableValue<? extends String> obs, String oldMessage, String newMessage) {
            taTerminal.setText(task.getMessage());
        }
    });

    Thread th = new Thread(task);
    th.start();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26537548" questionTitle="JavaFX ListView with touch events for scrolling up and down">
<Answer><![CDATA[import com.sun.javafx.scene.control.skin.VirtualFlow;
import com.sun.javafx.scene.control.skin.VirtualScrollBar;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.property.IntegerProperty;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;

public class ListViewHelper
{
    public static VirtualFlow getVirtualFlow(ListView lv)
    {
        return (VirtualFlow) lv.lookup(".virtual-flow");
    }

    public static VirtualScrollBar getVbar(VirtualFlow vf)
    {
        try {
            final Method method = VirtualFlow.class.getDeclaredMethod("getVbar");
            method.setAccessible(true);
            return (VirtualScrollBar) method.invoke(vf);
        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException |
                InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }
    }

    public static VirtualScrollBar getHbar(VirtualFlow vf)
    {
        try {
            final Method method = VirtualFlow.class.getDeclaredMethod("getHbar");
            method.setAccessible(true);
            return (VirtualScrollBar) method.invoke(vf);
        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException |
                InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }
    }

}]]></Answer>
<Answer><![CDATA[package myproject.utils;

import javafx.event.Event;
import javafx.event.EventTarget;
import javafx.scene.input.ScrollEvent;

public class CustomScrollEvent {

public void fireVerticalScroll(int deltaY, Object source, EventTarget target){

    ScrollEvent newScrollEvent = null;
    newScrollEvent = new ScrollEvent(source,
               target,
               ScrollEvent.SCROLL,
               0,
               0,
               0,
               0,
               false,
               false,
               false,
               false,
               false,
               false,
               0,
               deltaY,
               0,
               0,
               ScrollEvent.HorizontalTextScrollUnits.CHARACTERS,
               0,
               ScrollEvent.VerticalTextScrollUnits.NONE,
               deltaY,
               0,
               null);

        Event.fireEvent(target, newScrollEvent);
}
}]]></Answer>
<Answer><![CDATA[public class ScrollList {

protected double lastYposition = 0;
private double last_value = 0;
protected double firstYposition = 0;
protected ScrollBar scrollbar = null;
private int autoValue = 0;
private int maxScroll = 0;

public ScrollList(ListView list) {

list.setOnMousePressed(new EventHandler<MouseEvent>() {
    @Override
    public void handle(MouseEvent event) {

        lastYposition = event.getSceneY();
        //Config.prints(lastYposition + "");

        firstYposition = lastYposition;

    }
});

Platform.runLater(new Runnable() {
    @Override
    public void run() {
        if (scrollbar == null) {
            for (Node node : list.lookupAll(".scroll-bar")) {
                if (node instanceof ScrollBar) {
                    ScrollBar bar = (ScrollBar) node;
                    if (bar.getOrientation().equals(Orientation.VERTICAL)) {
                        scrollbar = bar;
                    }
                }
            }

            scrollbar.setOnMouseReleased(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {

                    lastYposition = event.getSceneY();

                    last_value = autoValue;

                }
            });

            /* //in case the list has already a scroll value, like when 
            //return to fontes list, it should has the last choosed fontes selected 
            IndexedCell first = flow.getFirstVisibleCellWithinViewPort();
            autoValue = first.getIndex();*/
            VirtualFlow flow = (VirtualFlow) list.lookup(".virtual-flow");
            last_value = autoValue;
            maxScroll = flow.getCellCount();

            flow.addEventFilter(Event.ANY, new EventHandler<Event>() {
                @Override
                public void handle(Event eventus) {
                    IndexedCell first = flow.getFirstVisibleCellWithinViewPort();
                    autoValue = first.getIndex();
                    Config.prints(last_value + "");
                }
            });
        }
    }
});

list.setOnMouseDragged(new EventHandler<MouseEvent>() {
    @Override
    public void handle(MouseEvent event) {

        double newYposition = event.getSceneY();

        //Config.prints(newYposition + "");
        double diff = newYposition - lastYposition;
        lastYposition = newYposition;

        if ((firstYposition - lastYposition) > Config.TOUCH_SCREEN_NOISE && (firstYposition - lastYposition) > 0 || (firstYposition - lastYposition) < (Config.TOUCH_SCREEN_NOISE * -1) && (firstYposition - lastYposition) < 0) {
            list.getSelectionModel().clearSelection();
        }

        if (diff > 0 && diff > Config.MIN_SCROLL_VELOCITY) {
            diff = Config.MIN_SCROLL_VELOCITY;
        } else if (diff < 0 && diff < Config.MIN_SCROLL_VELOCITY * -1) {
            diff = Config.MIN_SCROLL_VELOCITY * -1;
        }

        if (diff > 0 && diff > Config.MAX_SCROLL_VELOCITY) {
            diff = Config.MAX_SCROLL_VELOCITY;
        } else if (diff < 0 && diff < Config.MAX_SCROLL_VELOCITY * -1) {
            diff = Config.MAX_SCROLL_VELOCITY * -1;
        }

        //prints("diff=>" + diff + " || last_value=>" + last_value);
        last_value -= diff;
        //Config.prints("last_value=>" + last_value);
        if (last_value < 0) {
            last_value = 0;
        }else if(last_value > maxScroll){
            last_value = maxScroll;
        } 
        list.scrollTo((int) last_value);
    }
});

}

//if you want the scroll to start from a specific position

    public void setAutoValue(int index) {


       this.autoValue = index;
    }
  }
}

public static double MAX_SCROLL_VELOCITY = 1;

public static double MIN_SCROLL_VELOCITY = 0.5;]]></Answer>
<Answer><![CDATA[public class ScrollListener {

    private BooleanProperty scrolling = new ReadOnlyBooleanWrapper(false);

    private EventHandler<? super MouseEvent> dragDetectedFilter = e -> scrolling.set(true);

    private EventHandler<? super MouseEvent> mouseClickedFilter = evt -> {
        if (scrolling.get()) {
            scrolling.set(false);
            evt.consume();
        }
    };

    private EventHandler<? super MouseEvent> mouseExitedHandler = e -> scrolling.set(false);

    private Node observableNode;

    public ScrollListener(Node observableNode) {
        this.observableNode = observableNode;
    }

    public void enable() {
        observableNode.addEventFilter(MouseEvent.DRAG_DETECTED, dragDetectedFilter);
        observableNode.addEventFilter(MouseEvent.MOUSE_CLICKED, mouseClickedFilter);
        observableNode.addEventHandler(MouseEvent.MOUSE_EXITED, mouseExitedHandler);
    }

    public void disable() {
        observableNode.removeEventFilter(MouseEvent.DRAG_DETECTED, dragDetectedFilter);
        observableNode.removeEventFilter(MouseEvent.MOUSE_CLICKED, mouseClickedFilter);
        observableNode.removeEventHandler(MouseEvent.MOUSE_EXITED, mouseExitedHandler);
    }

    public ReadOnlyBooleanProperty scrollingProperty() {
        return scrolling;
    }

    public boolean isScrolling() {
        return scrolling.get();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26511506" questionTitle="How to perform filtering by Key on KeyValue objects using Lambda-Expressions?">
<Answer><![CDATA[private List<AttributeEntity> getAttributeEntities(List<String> keys, Document value) {
    final List<AttributeEntity> documentAttributeList = value.getAttributeList();

    boolean allKeysPresentInAnyAttribute = keys.stream()
            .allMatch(key ->
                    documentAttributeList.stream()
                            .filter(attrbiute ->
                                    attrbiute.getAttribute_key().equals(key)
                            )
                            .findAny()
                            .isPresent()
            );
    if (allKeysPresentInAnyAttribute) {
        return documentAttributeList.stream()
                .filter(attribute ->
                    keys.contains(attribute.getAttribute_key())
                )
                .collect(Collectors.toList());
    }
    return new ArrayList<>();
}]]></Answer>
<Answer><![CDATA[public class Main {

    private static List<AttributeEntity> documentAttributeList;

    static {
        documentAttributeList = new ArrayList<>();
        documentAttributeList.add(new AttributeEntity("key1", "value1"));
        documentAttributeList.add(new AttributeEntity("key2", "value2"));
        documentAttributeList.add(new AttributeEntity("key3", "value3"));
    }

    public static void main(String[] args) {
        Main main = new Main();
        List<AttributeEntity> attributeEntities = main.getAttributeEntities(Arrays.asList("key1", "key2"));
        for (AttributeEntity attributeEntity : attributeEntities) {
            System.out.println(attributeEntity.getKey());
        }
    }

    private List<AttributeEntity> getAttributeEntities(List<String> keys) {
        if(hasInvalidKey(keys)){
            return new ArrayList<>();
        } else {
            return documentAttributeList.stream().filter(attribute -> keys.contains(attribute.getKey())).collect(toList());
        }
    }

    private boolean hasInvalidKey(List<String> keys) {
        List<String> attributeKeys = getAttributeKeys();
        return keys.stream().anyMatch(key -> !attributeKeys.contains(key));
    }

    private List<String> getAttributeKeys() {
        return documentAttributeList.stream().map(attribute -> attribute.getKey()).collect(toList());
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26494865" questionTitle="JavaFX 8: Changing title of primary stage">
<Answer><![CDATA[package application;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.fxml.FXMLLoader;


public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("TitleSetter.fxml"));
            loader.setControllerFactory((Class<?> type) -> {
                try {
                    Object controller = type.newInstance();
                    if (controller instanceof PrimaryStageAware) {
                        ((PrimaryStageAware) controller).setPrimaryStage(primaryStage);
                    }
                    return controller ;
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            });
            HBox root = loader.load();
            Scene scene = new Scene(root,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class ChangeTitle extends Application {

  public static void main(String[] args) {
    launch(args);
  }

  @Override
  public void start(Stage primaryStage) throws Exception {
    Parent root = FXMLLoader.load(getClass().getResource("ChangeTitle.fxml"));

    Scene scene = new Scene(root);
    primaryStage.setTitle("Change me");

    primaryStage.setScene(scene);
    primaryStage.show();
  }

}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    private static Main instance;
    public static Main getInstance() {
        return instance;
    }

    private Stage primaryStage;

    @Override
    public void start(Stage primaryStage) throws Exception{
        instance = this;
        this.primaryStage = primaryStage;
        Parent root = FXMLLoader.load(getClass().getResource("main.fxml"));
        this.primaryStage.setTitle("Init title");
        this.primaryStage.setScene(new Scene(root, 900, 650));
        this.primaryStage.show();
        FlatterFX.style();
    }

    public static void main(String[] args) {
        launch(args);
    }

    public void updateTitle(String title) {
        primaryStage.setTitle(title);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26454149" questionTitle="Make JavaFX wait and continue with code">
<Answer><![CDATA[import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class HelloWorld extends Application {

    private static Label label;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Hello World!");
        label = new Label();
        label.setText("Waiting...");
        StackPane root = new StackPane();
        root.getChildren().add(label);
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();

        Task<Void> sleeper = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                }
                return null;
            }
        };
        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {
                label.setText("Hello World");
            }
        });
        new Thread(sleeper).start();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.beans.property.*;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Duration;

public class BeatingHeart extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage stage) {
        ImageView heart = new ImageView(HEART_IMAGE_LOC);

        animateUsingTimeline(heart);
//        animateUsingScaleTransition(heart);

        StackPane layout = new StackPane(heart);
        layout.setPrefWidth(heart.getImage().getWidth() * 2);
        layout.setPrefHeight(heart.getImage().getHeight() * 2);

        Scene scene = new Scene(layout);
        stage.setScene(scene);
        stage.show();
    }

    private void animateUsingTimeline(ImageView heart) {
        DoubleProperty scale = new SimpleDoubleProperty(1);
        heart.scaleXProperty().bind(scale);
        heart.scaleYProperty().bind(scale);

        Timeline beat = new Timeline(
            new KeyFrame(Duration.ZERO,         event -> scale.setValue(1)),
            new KeyFrame(Duration.seconds(0.5), event -> scale.setValue(1.1))
        );
        beat.setAutoReverse(true);
        beat.setCycleCount(Timeline.INDEFINITE);
        beat.play();
    }

    private void animateUsingScaleTransition(ImageView heart) {
        ScaleTransition scaleTransition = new ScaleTransition(
            Duration.seconds(1), heart
        );
        scaleTransition.setFromX(1);
        scaleTransition.setFromY(1);
        scaleTransition.setFromZ(1);
        scaleTransition.setToX(1.1);
        scaleTransition.setToY(1.1);
        scaleTransition.setToZ(1.1);
        scaleTransition.setAutoReverse(true);
        scaleTransition.setCycleCount(Animation.INDEFINITE);
        scaleTransition.play();
    }

    private static final String HEART_IMAGE_LOC =
            "http://icons.iconarchive.com/icons/mirella-gabriele/valentine/128/Heart-red-icon.png";
    // icon obtained from: http://www.iconarchive.com/show/valentine-icons-by-mirella-gabriele/Heart-red-icon.html
    // icon license: Free for non-commercial use, commercial use not allowed.
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26403319" questionTitle="Skip last x elements in Stream&lt;T&gt;">
<Answer><![CDATA[static <T> Stream<T> skipLastElements(Stream<T> s, int count) {
    if(count<=0) {
      if(count==0) return s;
      throw new IllegalArgumentException(count+" < 0");
    }
    ArrayDeque<T> pending=new ArrayDeque<T>(count+1);
    Spliterator<T> src=s.spliterator();
    return StreamSupport.stream(new Spliterator<T>() {
        public boolean tryAdvance(Consumer<? super T> action) {
            while(pending.size()<=count && src.tryAdvance(pending::add));
            if(pending.size()>count) {
              action.accept(pending.remove());
              return true;
            }
          return false;
        }
        public Spliterator<T> trySplit() {
            return null;
        }
        public long estimateSize() {
            return src.estimateSize()-count;
        }
        public int characteristics() {
            return src.characteristics();
        }
    }, false);
}
public static void main(String[] args) {
    skipLastElements(Stream.of("foo", "bar", "baz", "hello", "world"), 2)
    .forEach(System.out::println);
}]]></Answer>
<Answer><![CDATA[private static final Object NULL_VALUE = new Object();

public static <T> Stream<T> skipLast(Stream<T> input, int n)                   
{
   ArrayDeque<T> queue;

   if (n <= 0)
      return(input);

   queue = new ArrayDeque<>(n + 1);

   input = input.
      map(item -> item != null ? item : NULL_VALUE).
      peek(queue::add).
      skip(n).
      map(item -> queue.pop()).
      map(item -> item != NULL_VALUE ? item : null);

   return(input);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26344172" questionTitle="How can I externally update a JavaFX scene?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class TestApp extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        // launch app:
        DataModel data = new DataModel("Testing");
        Test test = new Test(data);
        primaryStage.setScene(new Scene(test.getView(), 300, 250));
        primaryStage.show();

        // update text in 5 seconds:

        Thread thread = new Thread(() -> {
            try {
                Thread.sleep(5000);
            } catch (InterruptedException exc) {
                throw new Error("Unexpected interruption", exc);
            }

            // Update text on FX Application Thread:
            Platform.runLater(() -> data.setText("Hello World!"));
        });
        thread.setDaemon(true);
        thread.start();

    }    
}]]></Answer>
<Answer><![CDATA[package javafxtest;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 * @author ericjbruno
 */
public class ShowJFXWindow {
    {
        // Clever way to init JavaFX once
        JFXPanel fxPanel = new JFXPanel();
    }

    public static void main(String[] args) {
        ShowJFXWindow dfx = new ShowJFXWindow();
        dfx.showWindow();
    }

    public void showWindow() {
        // JavaFX stuff needs to be done on JavaFX thread
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                openJFXWindow();
            }
        });
    }

    public void openJFXWindow() {
        Button btn = new Button();
        btn.setText("Say 'Hello World'");
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                System.out.println("Hello World!");
            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(btn);

        Scene scene = new Scene(root, 300, 250);
        Stage stage = new Stage();
        stage.setTitle("Hello World!");
        stage.setScene(scene);
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26340688" questionTitle="Group by and sum objects like in SQL with Java lambdas?">
<Answer><![CDATA[import static org.jooq.lambda.tuple.Tuple.tuple;

import java.util.List;
import java.util.stream.Collectors;

import org.jooq.lambda.Seq;
import org.jooq.lambda.tuple.Tuple;
// ...

List<Foo> list =

// FROM Foo
Seq.of(
    new Foo(1, "P1", 300, 400),
    new Foo(2, "P2", 600, 400),
    new Foo(3, "P3", 30, 20),
    new Foo(3, "P3", 70, 20),
    new Foo(1, "P1", 360, 40),
    new Foo(4, "P4", 320, 200),
    new Foo(4, "P4", 500, 900))

// GROUP BY f1, f2
.groupBy(
    x -> tuple(x.f1, x.f2),

// SELECT SUM(f3), SUM(f4)
    Tuple.collectors(
        Collectors.summingInt(x -> x.f3),
        Collectors.summingInt(x -> x.f4)
    )
)

// Transform the Map<Tuple2<Integer, String>, Tuple2<Integer, Integer>> type to List<Foo>
.entrySet()
.stream()
.map(e -> new Foo(e.getKey().v1, e.getKey().v2, e.getValue().v1, e.getValue().v2))
.collect(Collectors.toList());]]></Answer>
<Answer><![CDATA[public class Test {
    private static class Foo {
        public int id, targetCost, actualCost;
        public String ref;

        public Foo(int id, String ref, int targetCost, int actualCost) {
            this.id = id;
            this.targetCost = targetCost;
            this.actualCost = actualCost;
            this.ref = ref;
        }

        @Override
        public String toString() {
            return String.format("Foo(%d,%s,%d,%d)",id,ref,targetCost,actualCost);
        }
    }

    public static void main(String[] args) {
        List<Foo> list = Arrays.asList(
            new Foo(1, "P1", 300, 400), 
            new Foo(2, "P2", 600, 400),
            new Foo(3, "P3", 30, 20),
            new Foo(3, "P3", 70, 20),
            new Foo(1, "P1", 360, 40),
            new Foo(4, "P4", 320, 200),
            new Foo(4, "P4", 500, 900));

        List<Foo> transform = list.stream()
            .collect(Collectors.groupingBy(foo -> foo.id))
            .entrySet().stream()
            .map(e -> e.getValue().stream()
                .reduce((f1,f2) -> new Foo(f1.id,f1.ref,f1.targetCost + f2.targetCost,f1.actualCost + f2.actualCost)))
                .map(f -> f.get())
                .collect(Collectors.toList());
        System.out.println(transform);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26319222" questionTitle="Change panels with Combo box">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class ComboBoxIssue extends Application {
    @Override
    public void start(Stage primaryStage) {
        final ComboBox comboBox = new ComboBox();
        comboBox.getItems().addAll("Show Blue", "Show Green");

        final Label label = new Label();

        final StackPane stack = new StackPane();

        Button btn = new Button();
        btn.setText("Read comboBox");

        /**
         * Uncomment this to run on button selection
         * 
         */
        /*btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                setVisibility(stack, comboBox, label);
            }
        });*/


        comboBox.getSelectionModel().selectedIndexProperty()
                .addListener((ObservableValue<? extends Number> observable,
                            Number oldValue, Number newValue) ->
                        setVisibility(stack, comboBox, label)
        );

        stack.getChildren().add(new Rectangle(100, 100, Color.BLUE));
        stack.getChildren().add(new Rectangle(100, 100, Color.GREEN));

        // Placing it after adding rectangle to stack
        // will trigger the changelistener to show default rectangle
        comboBox.setValue("Show Blue");

        VBox vBox = new VBox();
        vBox.setPadding(new Insets(5, 5, 5, 5));
        vBox.setSpacing(5);
        vBox.getChildren().addAll(label, comboBox, btn, stack);

        StackPane root = new StackPane();
        root.getChildren().add(vBox);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    public void setVisibility(Pane pane, ComboBox comboBox, Label label) {

        //Set Label
        label.setText("selectd: " + comboBox.getValue());

        // Make all children invisible
        for (Node node : pane.getChildren()) {
            node.setVisible(false);
        }
        // make the selected rectangle visible
        int selectedIndex = comboBox.getSelectionModel()
                .selectedIndexProperty().getValue();
        pane.getChildren().get(selectedIndex).setVisible(true);

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class MainApp extends Application {
  @Override
  public void start(Stage primaryStage) {
    Rectangle blueRectangle = new Rectangle(100,100, Color.BLUE);
    Rectangle grinRectangle = new Rectangle(100,100, Color.GREEN);

    StackPane stackPane = new StackPane();
    stackPane.getChildren().add(0, blueRectangle);
    stackPane.getChildren().add(1, grinRectangle);

    ComboBox<String> comboBox = new ComboBox<>();
    comboBox.getItems().addAll("Blue rectangle", "Green rectangle");
    comboBox.setValue("Green rectangle");
    comboBox.setOnAction(e -> {
      switch (comboBox.getValue()) {
        case "Blue rectangle":
          blueRectangle.toFront();
          break;
        case "Green rectangle":
          grinRectangle.toFront();
          break;
      }
    });

    VBox vBox = new VBox();
    vBox.setAlignment(Pos.CENTER);
    vBox.setPadding(new Insets(5, 5, 5, 5));
    vBox.setSpacing(10);
    vBox.getChildren().addAll(comboBox, stackPane);

    Scene scene = new Scene(vBox, 300, 250);
    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
  }

  public static void main(String[] args) {
    launch(args);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26298337" questionTitle="TableView: adjust number of visible rows">
<Answer><![CDATA[/**
 * TableView with visibleRowCountProperty.
 * 
 * @author Jeanette Winzenburg, Berlin
 */
public class TableViewWithVisibleRowCount<T> extends TableView<T> {

    private IntegerProperty visibleRowCount = new SimpleIntegerProperty(this, "visibleRowCount", 10);


    public IntegerProperty visibleRowCountProperty() {
        return visibleRowCount;
    }

    @Override
    protected Skin<?> createDefaultSkin() {
        return new TableViewSkinX<T>(this);
    }

    /**
     * Skin that respects table's visibleRowCount property.
     */
    public static class TableViewSkinX<T> extends TableViewSkin<T> {

        public TableViewSkinX(TableViewWithVisibleRowCount<T> tableView) {
            super(tableView);
            registerChangeListener(tableView.visibleRowCountProperty(), "VISIBLE_ROW_COUNT");
            handleControlPropertyChanged("VISIBLE_ROW_COUNT");
        }

        @Override
        protected void handleControlPropertyChanged(String p) {
            super.handleControlPropertyChanged(p);
            if ("VISIBLE_ROW_COUNT".equals(p)) {
                needCellsReconfigured = true;
                getSkinnable().requestFocus();
            }
        }

        /**
         * Returns the visibleRowCount value of the table.
         */
        private int getVisibleRowCount() {
            return ((TableViewWithVisibleRowCount<T>) getSkinnable()).visibleRowCountProperty().get();
        }

        /**
         * Calculates and returns the pref height of the 
         * for the given number of rows.
         * 
         * If flow is of type MyFlow, queries the flow directly
         * otherwise invokes the method.
         */
        protected double getFlowPrefHeight(int rows) {
            double height = 0;
            if (flow instanceof MyFlow) {
                height = ((MyFlow) flow).getPrefLength(rows);
            }
            else {
                for (int i = 0; i < rows && i < getItemCount(); i++) {
                    height += invokeFlowCellLength(i);
                }
            }    
            return height + snappedTopInset() + snappedBottomInset();

        }

        /**
         * Overridden to compute the sum of the flow height and header prefHeight.
         */
        @Override
        protected double computePrefHeight(double width, double topInset,
                double rightInset, double bottomInset, double leftInset) {
            // super hard-codes to 400 .. doooh
            double prefHeight = getFlowPrefHeight(getVisibleRowCount());
            return prefHeight + getTableHeaderRow().prefHeight(width);
        }

        /**
         * Reflectively invokes protected getCellLength(i) of flow.
         * @param index the index of the cell.
         * @return the cell height of the cell at index.
         */
        protected double invokeFlowCellLength(int index) {
            double height = 1.0;
            Class<?> clazz = VirtualFlow.class;
            try {
                Method method = clazz.getDeclaredMethod("getCellLength", Integer.TYPE);
                method.setAccessible(true);
                return ((double) method.invoke(flow, index));
            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
                e.printStackTrace();
            }
            return height;
        }

        /**
         * Overridden to return custom flow.
         */
        @Override
        protected VirtualFlow createVirtualFlow() {
            return new MyFlow();
        }

        /**
         * Extended to expose length calculation per a given # of rows.
         */
        public static class MyFlow extends VirtualFlow {

            protected double getPrefLength(int rowsPerPage) {
                double sum = 0.0;
                int rows = rowsPerPage; //Math.min(rowsPerPage, getCellCount());
                for (int i = 0; i < rows; i++) {
                    sum += getCellLength(i);
                }
                return sum;
            }

        }

    }

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger.getLogger(TableViewWithVisibleRowCount.class
            .getName());
}]]></Answer>
<Answer><![CDATA[public static <S> void ensureDisplayingRows(@NotNull TableView<S> table, @Null Integer rowCount) {
    DoubleProperty headerRowHeightProperty = new SimpleDoubleProperty();
    table.skinProperty().addListener((observable, oldValue, newValue) -> {
        if (!Objects.equals(oldValue, newValue)) {
            TableHeaderRow headerRow = headerRow(table);
            // TableHeaderRow not defined until CSS is applied.
            if (headerRow == null) {
                assert table.getFixedCellSize() > 0.0 : "TableView '" + table.getId() + "' is not 'fixedCellSize'."; // TODO Find a better way to control.
                headerRowHeightProperty.setValue(table.getFixedCellSize()); // Approximation. // TODO Find a better approximation.
            } else {
                headerRowHeightProperty.bind(headerRow.heightProperty());
            }
        }
    });

    IntegerBinding itemsCountBinding = Bindings.size(table.getItems()); // NB: table.getItems() may not (yet) contains all/"new" items, may contain the "old" items.
    IntegerBinding maxRowsCountBinding = (rowCount == null) ? itemsCountBinding :
            (IntegerBinding) Bindings.min(
                    rowCount,
                    itemsCountBinding
            );
    IntegerBinding rowCountBinding = (IntegerBinding) Bindings.max(
            1, // Ensure to display at least 1 row, for JavaFX "No contents" message when table.items.isEmpty.
            maxRowsCountBinding
    );

    DoubleBinding tableHeightBinding = headerRowHeightProperty
            .add(rowCountBinding.multiply(table.getFixedCellSize()))
            .add(10); // TODO Understand why we need to add a dozen of pixels.

    table.minHeightProperty().bind(tableHeightBinding);
    table.prefHeightProperty().bind(tableHeightBinding);
    table.maxHeightProperty().bind(tableHeightBinding);
}

@Null
public static TableHeaderRow headerRow(@NotNull TableView<?> table) {
    TableHeaderRow tableHeaderRow = (TableHeaderRow) table.lookup("TableHeaderRow");
    return tableHeaderRow;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26220896" questionTitle="Showing tooltips in JavaFx at specific row position in the TableView">
<Answer><![CDATA[import java.util.function.Function;

import javafx.scene.control.TableRow;
import javafx.scene.control.Tooltip;

public class TooltipTableRow<T> extends TableRow<T> {

  private Function<T, String> toolTipStringFunction;

  public TooltipTableRow(Function<T, String> toolTipStringFunction) {
    this.toolTipStringFunction = toolTipStringFunction;
  }

  @Override
  protected void updateItem(T item, boolean empty) {
    super.updateItem(item, empty);
    if(item == null) {
      setTooltip(null);
    } else {
      Tooltip tooltip = new Tooltip(toolTipStringFunction.apply(item));
      setTooltip(tooltip);
    }
  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.Tooltip;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
;

public class TableViewSample extends Application {

    private final TableView<Person> table = new TableView<>();
    private final ObservableList<Person> data =
        FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com")
        );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(450);
        stage.setHeight(500);

        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));

        table.setEditable(true);

        table.setRowFactory(tv -> new TableRow<Person>() {
            private Tooltip tooltip = new Tooltip();
            @Override
            public void updateItem(Person person, boolean empty) {
                super.updateItem(person, empty);
                if (person == null) {
                    setTooltip(null);
                } else {
                    tooltip.setText(person.getFirstName()+" "+person.getLastName());
                    setTooltip(tooltip);
                }
            }
        });

        TableColumn<Person, String> firstNameCol = new TableColumn<>("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory<>("firstName"));

        TableColumn<Person, String> lastNameCol = new TableColumn<>("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory<>("lastName"));

        TableColumn<Person, String> emailCol = new TableColumn<>("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory<>("email"));

        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table);

        ((Group) scene.getRoot()).getChildren().addAll(vbox);

        stage.setScene(scene);
        stage.show();
    }

    public static class Person {

        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;

        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String fName) {
            firstName.set(fName);
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String fName) {
            lastName.set(fName);
        }

        public String getEmail() {
            return email.get();
        }

        public void setEmail(String fName) {
            email.set(fName);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26195252" questionTitle="How to support different versions of main (and test) source sets for different Java versions (6, 7, 8)">
<Answer><![CDATA[<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.1</version>
    <executions>
        <execution>
            <id>compile-1.6</id>
            <goals>
                <id>compile</id>
            </goals>
            <phase>compile</phase>
            <configuration>
                <source>1.6</source>
                <target>1.6</target>
                <executable>${env.JAVA_HOME_6}/bin/javac</executable>
                <outputFileName>mylib-1.6.jar</outputFileName>
            </configuration>
<!-- START EDIT -->
            <dependencies>
                <dependency>
                    <groupId>com.mycompany</groupId>
                    <artifactId>ABC</artifactId>
                    <version>1.0</version>
                </dependency>
            </dependencies>
<!-- END EDIT -->
        </execution>
        <execution>
            <id>compile-1.7</id>
            <phase>compile</phase>
            <goals>
                <id>compile</id>
            </goals>
            <configuration>
                <source>1.7</source>
                <target>1.7</target>
                <executable>${env.JAVA_HOME_7}/bin/javac</executable>
                <outputFileName>mylib-1.7.jar</outputFileName>
            </configuration>
<!-- START EDIT -->
            <dependencies>
                <dependency>
                    <groupId>com.mycompany</groupId>
                    <artifactId>XYZ</artifactId>
                    <version>2.0</version>
                </dependency>
            </dependencies>
<!-- END EDIT -->
        </execution>

        <!-- one more execution for 1.8, elided to save space -->

    </executions>
</plugin>]]></Answer>
<Answer><![CDATA[<profiles>
    <profile>
        <id>java-6</id>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.5</version>
                    <executions>
                        <execution>
                            <id>add-sources</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>add-source</goal>
                            </goals>
                            <configuration>
                                <sources>
                                    <source>${basedir}/src/main/java-1.6</source>
                                </sources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    </profile>
    <profile>
        <id>java-7</id>
        (...)
                                    <source>${basedir}/src/main/java-1.7</source>
    </profile>
    <profile>
        <id>java-8</id>
        (...)
                                    <source>${basedir}/src/main/java-1.8</source>
    </profile>
</profiles>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26163645" questionTitle="Java8 - &quot;effectively final&quot;">
<Answer><![CDATA[/**
 * Make a final one of these to hold non-final things in.
 *
 * @param <T>
 */
public class Holder<T> {
  private T held = null;

  public Holder() {
  }

  public Holder(T it) {
    held = it;
  }

  public void hold(T it) {
    held = it;
  }

  public T held() {
    return held;
  }

  public boolean isEmpty() {
    return held == null;
  }

  @Override
  public String toString() {
    return String.valueOf(held);
  }

}]]></Answer>
<Answer><![CDATA[public rx.Observable<Game> findGame(
        long templateId, 
        GameModelType game_model, 
        GameStateType state) {

    return context.findGame(templateId, state)
    .flatMap(gameRawReply -> {
        switch(game_model) {
        case SINGLE: {
            return ebs.map(t1 -> {
                Game game;
                if (!singleGame.contains(0) {
                    game = new Game();
                    singleGames.put(0, game);
                } else {
                    game = singleGames.get(0);
                }
                return game;
            });
        }
        }

        return rx.Observable.just(null);
    });
}]]></Answer>
<Answer><![CDATA[@Override
    public Observable<Game> call(RxMessage<byte[]> gameRawReply) {

        Game[] game = new Game[1];

        switch(game_model) {

            case SINGLE: {

                ebs.subscribe(new Action1<RxMessage<byte[]>>() {

                    @Override
                    public void call(RxMessage<byte[]> t1) {

                        if(!singleGame.contains(0) {
                            game[0] = new Game();       
                            singleGames.put(0, game[0]);
                        } else {
                          game[0] = singleGames.get(0);
                        }
                    }
                });
            }
        }

        return rx.Observable.from(game[0]);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26162407" questionTitle="Is there an equivalent of Scala's Either in Java 8?">
<Answer><![CDATA[abstract class Either<L,R>
{
    public static <L,R> Either<L,R> left(L value) {
        return new Either<L,R>() {
            @Override public <T> T map(Function<? super L, ? extends T> lFunc,
                                       Function<? super R, ? extends T> rFunc) {
                return lFunc.apply(value);
            }
        };
    }
    public static <L,R> Either<L,R> right(R value) {
        return new Either<L,R>() {
            @Override public <T> T map(Function<? super L, ? extends T> lFunc,
                                       Function<? super R, ? extends T> rFunc) {
                return rFunc.apply(value);
            }

        };
    }
    private Either() {}
    public abstract <T> T map(
      Function<? super L, ? extends T> lFunc, Function<? super R, ? extends T> rFunc);

    public <T> Either<T,R> mapLeft(Function<? super L, ? extends T> lFunc) {
        return this.<Either<T,R>>map(t -> left(lFunc.apply(t)), t -> (Either<T,R>)this);
    }
    public <T> Either<L,T> mapRight(Function<? super R, ? extends T> lFunc) {
        return this.<Either<L,T>>map(t -> (Either<L,T>)this, t -> right(lFunc.apply(t)));
    }
    public void apply(Consumer<? super L> lFunc, Consumer<? super R> rFunc) {
        map(consume(lFunc), consume(rFunc));
    }
    private <T> Function<T,Void> consume(Consumer<T> c) {
        return t -> { c.accept(t); return null; };
    }
}]]></Answer>
<Answer><![CDATA[Xor.primary("hello")
    .map(s->s+" world")

 //Primary["hello world"]

 Xor.secondary("hello")
    .map(s->s+" world")

 //Secondary["hello"]

 Xor.secondary("hello")
    .swap()
    .map(s->s+" world")

 //Primary["hello world"]

Xor.accumulateSecondary(ListX.of(Xor.secondary("failed1"),
                                 Xor.secondary("failed2"),
                                 Xor.primary("success")),
                                 Semigroups.stringConcat)

//failed1failed2]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26161705" questionTitle="How to parse three numbers to a LocalDate using a Locale?">
<Answer><![CDATA[import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.FormatStyle;
import java.util.Locale;

public class IntegerDateTest {

    public static void main(String args[]) {
        int[][] dates = {{10, 02, 2014}, {02, 10, 2014}, {2014, 10, 02}};
        Locale[] locales = {Locale.ENGLISH, Locale.FRENCH, Locale.JAPANESE};

        for (int i = 0; i < 3; i++) {
            int[] dateParts = dates[i];
            Locale locale = locales[i];
            String date = String.format("%02d/%02d/%02d", dateParts[0] % 100,
                    dateParts[1] % 100, dateParts[2] % 100);
            System.out.printf("Locale : %s, Str Date : %s,", locale, date);
            DateTimeFormatter df = new DateTimeFormatterBuilder().append(
                    DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT))
                    .toFormatter(locale);
            System.out.printf(" Parsed Date : %s\n",LocalDate.from(df.parse(date)));
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class T {

    public static void main(String[] args) throws ParseException {
        Locale enLocale = Locale.ENGLISH;
        Locale nlLocale = new Locale("nl");         

        List<String> enInput = Arrays.asList("10", "2", "2014");
        List<String> nlInput = Arrays.asList("2", "10", "2014");
        Map<String, Integer> enPositionMap = getPositionMap(enLocale, enInput);
        Map<String, Integer> nlPositionMap = getPositionMap(nlLocale, nlInput);
        System.out.println("EN date " + LocalDate.of(enPositionMap.get("y"), enPositionMap.get("m"), enPositionMap.get("d")));
        System.out.println("NL date " + LocalDate.of(nlPositionMap.get("y"), nlPositionMap.get("m"), nlPositionMap.get("d")));

    }

    public static Map<String, Integer> getPositionMap(Locale locale, List<String> input) {
        final DateFormat dateInstance = DateFormat.getDateInstance(DateFormat.SHORT, locale);

        Map<String, Integer> map = new HashMap<>();

        if (dateInstance instanceof SimpleDateFormat) {
            String pattern = ((SimpleDateFormat) dateInstance).toPattern();
            String separator = String.valueOf(pattern.charAt(1));

            String[] chunks = pattern.split(separator);

            for (int i = 0; i < chunks.length; i++) {
                switch (chunks[i]) {
                    case "M":
                        map.put("m", Integer.parseInt(input.get(i)));
                        break;
                    case "d":
                        map.put("d", Integer.parseInt(input.get(i)));
                        break;
                    case "yy":
                        map.put("y", Integer.parseInt(input.get(i)));
                        break;
                }
            }

        }

        return map;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26094200" questionTitle="What is StampedLock in Java?">
<Answer><![CDATA[executor.submit(() -> {
            long stamp = lock.tryOptimisticRead();
            try {
                System.out.println("Optimistic Lock Valid: " + lock.validate(stamp));
                Thread.sleep(100);
                System.out.println("Optimistic Lock Valid: " + lock.validate(stamp));
                Thread.sleep(1000);
                System.out.println("Optimistic Lock Valid: " + lock.validate(stamp));
            } catch (Exception e) {
            } finally {
                lock.unlock(stamp);
            }
        });

        executor.submit(() -> {
            long stamp = lock.writeLock();
            try {
                System.out.println("Write Lock acquired");
                Thread.sleep(100);
            } catch (Exception e) {
            } finally {
                lock.unlock(stamp);
                System.out.println("Write done");
            }
        });]]></Answer>
<Answer><![CDATA[class Point {
   private double x, y;
   private final StampedLock sl = new StampedLock();

   void move(double deltaX, double deltaY) { // an exclusively locked method
     long stamp = sl.writeLock();
     try {
       x += deltaX;
       y += deltaY;
     } finally {
       sl.unlockWrite(stamp);
     }
   }

   double distanceFromOrigin() { // A read-only method
     long stamp = sl.tryOptimisticRead();
     double currentX = x, currentY = y;
     if (!sl.validate(stamp)) {
        stamp = sl.readLock();
        try {
          currentX = x;
          currentY = y;
        } finally {
           sl.unlockRead(stamp);
        }
     }
     return Math.sqrt(currentX * currentX + currentY * currentY);
   }

   void moveIfAtOrigin(double newX, double newY) { // upgrade
     // Could instead start with optimistic, not read mode
     long stamp = sl.readLock();
     try {
       while (x == 0.0 && y == 0.0) {
         long ws = sl.tryConvertToWriteLock(stamp);
         if (ws != 0L) {
           stamp = ws;
           x = newX;
           y = newY;
           break;
         }
         else {
           sl.unlockRead(stamp);
           stamp = sl.writeLock();
         }
       }
     } finally {
       sl.unlock(stamp);
     }
   }
 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25896336" questionTitle="Java 8 stream from a JPA Repository">
<Answer><![CDATA[@Repository
  public class MyEntityRepository extends CrudRepository<MyEntity, Long> {           
  }

  @Component
  public class MyEntityService {

       @Autowired
       private MyEntityRepository myEntityRepository;


       public void() {
            // if the findAll() method returns List
            Stream<MyEntity> streamFromList = myEntityRepository.findAll().stream();


            // if the findAll() method returns Iterable
            Stream<MyEntity> streamFromIterable = StreamSupport.stream(myEntityRepository.findAll().spliterator(), true);

       }
  }]]></Answer>
<Answer><![CDATA[public class RepositorySpliterator<T> implements Spliterator<T> {

    private Slice<T> slice;
    private Function<Pageable, Slice<T>> getSlice;
    private Iterator<T> sliceIterator;

    public RepositorySpliterator(Pageable pageable, Function<Pageable, Slice<T>> getSlice) {
        this.getSlice = getSlice;
        this.slice = this.getSlice.apply(pageable);
        this.sliceIterator = slice.iterator();
    }

    @Override
    public boolean tryAdvance(Consumer<? super T> action) {
        if(sliceIterator.hasNext()) {
            action.accept(sliceIterator.next());
            return true;
        } else if (slice.hasNext()) {
            this.slice = getSlice.apply(slice.nextPageable());
            this.sliceIterator = this.slice.iterator();
            if(sliceIterator.hasNext()){
                action.accept(sliceIterator.next());
                return true;
            }
        }
        return false;
    }

    public Stream<T> getStream(boolean parallel){
        return StreamSupport.stream(this, parallel);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25885005" questionTitle="Insert only numbers in Spinner Control">
<Answer><![CDATA[// imports omitted

public class MainApp extends Application {

protected static final String INITAL_VALUE = "0";

public static void main(String[] args) {
    Application.launch(args);
}

@Override
public void start(Stage stage) {
    final Spinner spinner = new Spinner();

    spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 10000,
            Integer.parseInt(INITAL_VALUE)));
    spinner.setEditable(true);

    EventHandler<KeyEvent> enterKeyEventHandler;

    enterKeyEventHandler = new EventHandler<KeyEvent>() {

        @Override
        public void handle(KeyEvent event) {

            // handle users "enter key event"
            if (event.getCode() == KeyCode.ENTER) {

                try {
    // yes, using exception for control is a bad solution ;-)
            Integer.parseInt(spinner.getEditor().textProperty().get());
                }
                catch (NumberFormatException e) {

                    // show message to user: "only numbers allowed"

                    // reset editor to INITAL_VALUE
                    spinner.getEditor().textProperty().set(INITAL_VALUE);
                }
            }
        }
    };

    // note: use KeyEvent.KEY_PRESSED, because KeyEvent.KEY_TYPED is to late, spinners
    // SpinnerValueFactory reached new value before key released an SpinnerValueFactory will
    // throw an exception
    spinner.getEditor().addEventHandler(KeyEvent.KEY_PRESSED, enterKeyEventHandler);

    GridPane grid = new GridPane();
    grid.setHgap(10);
    grid.setVgap(10);
    grid.setPadding(new Insets(10));

    int row = 0;

    grid.add(new Label("Spinner:"), 0, row);
    grid.add(spinner, 1, row);

    Scene scene = new Scene(grid, 350, 300);

    stage.setTitle("Hello Spinner");
    stage.setScene(scene);
    stage.show();
}
}]]></Answer>
<Answer><![CDATA[// get a localized format for parsing
NumberFormat format = NumberFormat.getIntegerInstance();
UnaryOperator<TextFormatter.Change> filter = c -> {
    if (c.isContentChange()) {
        ParsePosition parsePosition = new ParsePosition(0);
        // NumberFormat evaluates the beginning of the text
        format.parse(c.getControlNewText(), parsePosition);
        if (parsePosition.getIndex() == 0 ||
                parsePosition.getIndex() < c.getControlNewText().length()) {
            // reject parsing the complete text failed
            return null;
        }
    }
    return c;
};
TextFormatter<Integer> priceFormatter = new TextFormatter<Integer>(
        new IntegerStringConverter(), 0, filter);

spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(
        0, 10000, Integer.parseInt(INITAL_VALUE)));
spinner.setEditable(true);
spinner.getEditor().setTextFormatter(priceFormatter);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25791416" questionTitle="Localizing JavaFx Controls">
<Answer><![CDATA[import com.sun.javafx.scene.control.skin.resources.ControlResources;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
// rest of the imports is ommitted

private void putResourceBundleInCache(String baseName, Charset cs) throws ReflectiveOperationException, IOException {
    Locale currentLocale = Locale.getDefault();
    ResourceBundle.Control control = ResourceBundle.Control.getControl(ResourceBundle.Control.FORMAT_DEFAULT);
    String resourceName = control.toResourceName(control.toBundleName(baseName, currentLocale), "properties");
    ResourceBundle bundle;
    try (Reader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(resourceName), cs)) {
        bundle = new PropertyResourceBundle(reader);
    }
    Class<?> cacheKeyClass = Class.forName("java.util.ResourceBundle$CacheKey");
    Constructor<?> cacheKeyClassConstructor = cacheKeyClass.getDeclaredConstructor(String.class, Locale.class, ClassLoader.class);
    cacheKeyClassConstructor.setAccessible(true);
    Object cacheKey = cacheKeyClassConstructor.newInstance(baseName, currentLocale, ControlResources.class.getClassLoader());
    Method putBundleInCache = ResourceBundle.class.getDeclaredMethod("putBundleInCache", cacheKeyClass, ResourceBundle.class, ResourceBundle.Control.class);
    putBundleInCache.setAccessible(true);
    putBundleInCache.invoke(null, cacheKey, bundle, control);
}]]></Answer>
<Answer><![CDATA[import java.util.Locale;
import java.util.ResourceBundle;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.BorderPane;


public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
            System.out.println(ResourceBundle.getBundle("com/sun/javafx/scene/control/skin/resources/controls").getString("ProgressIndicator.doneString"));

            BorderPane root = new BorderPane();
            ProgressIndicator progressIndicator = new ProgressIndicator(1);
            root.setCenter(progressIndicator);
            Scene scene = new Scene(root,400,400);
            primaryStage.setScene(scene);
            primaryStage.show();
    }

    public static void main(String[] args) {
        Locale.setDefault(new Locale("fi", "FI"));
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[/**
 * The class with all messages of this application.
 */
public abstract class Messages {

    private static ResourceBundle BUNDLE;

    private static final String FIELD_NAME = "lookup";
    private static final String BUNDLE_NAME = "messages/messages";
    private static final String CONTROLS_BUNDLE_NAME = "com/sun/javafx/scene/control/skin/resources/controls";

    public static final String MAIN_APP_TITLE;

    public static final String DIALOG_HEADER;
    public static final String MAIN_CONTROLLER_CONTENT_TEXT;
    public static final String MAIN_CONTROLLER_HELLO_TEXT;
    public static final String MAIN_CONTROLLER_GOODBYE_TEXT;

    static {
        final Locale locale = Locale.getDefault();
        final ClassLoader classLoader = ControlResources.class.getClassLoader();

        final ResourceBundle controlBundle = getBundle(CONTROLS_BUNDLE_NAME,
                locale, classLoader, PropertyLoader.getInstance());

        final ResourceBundle overrideBundle = getBundle(CONTROLS_BUNDLE_NAME,
                PropertyLoader.getInstance());

        final Map override = getUnsafeFieldValue(overrideBundle, FIELD_NAME);
        final Map original = getUnsafeFieldValue(controlBundle, FIELD_NAME);

        //noinspection ConstantConditions,ConstantConditions,unchecked
        original.putAll(override);

        BUNDLE = getBundle(BUNDLE_NAME, PropertyLoader.getInstance());

        MAIN_APP_TITLE = BUNDLE.getString("MainApp.title");

        DIALOG_HEADER = BUNDLE.getString("Dialog.information.header");
        MAIN_CONTROLLER_CONTENT_TEXT = BUNDLE.getString("MainController.contentText");
        MAIN_CONTROLLER_HELLO_TEXT = BUNDLE.getString("MainController.helloText");
        MAIN_CONTROLLER_GOODBYE_TEXT = BUNDLE.getString("MainController.goodbyeText");
    }

    public static ResourceBundle GetBundle() {
        return BUNDLE;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25789526" questionTitle="JavaFX launch Application standalone OR from another application">
<Answer><![CDATA[public class MainApp extends Application implements Runnable{
    public MainApp(){}  // constructor

    @Override
    public void start(Stage stage){
        Text text = new Text("MainApp");
        Button startUpdate = new Button("Start Update");

        // When this button is pressed. It will launch UpdateApp Application
        startUpdate.setOnAction( e -> {
            Platform.runLater(new Runnable(){
                @Override
                public void run(){
                    new UpdateApp().start(new Stage());
                }
            });
        });

        Group root = new Group(text);
        Scene scene = new Scene(root,300,400);
        stage.setScene(scene);
        stage.setX(0);
        stage.setY(0);
        stage.show();
    }

    // This method will be used when you first start an Application for
    // which main method is required
    public static void main(String[] args){
        launch(args);
    }

    // This will be used when you call this Application from another JavaFX application
    // if you have closed this application before
    @Override
    public void run(){
        launch();
    }
}]]></Answer>
<Answer><![CDATA[public class MainApp extends Application {

    private Parent uiContent ;

    public static final double DEFAULT_WIDTH = 800 ;
    public static final double DEFAULT_HEIGHT = 600 ;

    public Parent getContent() {
        if (uiContent == null) {
            uiContent = initializeUI();
        }
        return uiContent ;
    }

    public Scene createScene() {
        return new Scene(getContent(), DEFAULT_WIDTH, DEFAULT_HEIGHT);
    }

    public void initializeAndShowStage(Stage stage) {
        stage.setScene(createScene());
        stage.show();
    }

    private Parent initializeUI() {
        // probably wise to check we are on the FX Application thread here...
        Pane root = ... ;
        // build ui....
        return root ;
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        initializeAndShowStage(primaryStage);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25780721" questionTitle="getting corresponding filename of image once button pressed">
<Answer><![CDATA[List<Path> pathlist2 = new ArrayList<>();
...
// provide language specific text for "Download"
ResourceBundle myResourceBundle = ...;
...
DownloadRenderer downloadRenderer = new DownloadRenderer(myResourceBundle);
...
// the dafault renderer would set the text property to path.toString()
DataButton<Path> downloadbtn = new DataButton<>(downloadRenderer);
downloadbtn.setData(pathlist2.get(index));
downloadbtn.setOnAction((actionEvent) -> {
            Path path = downloadbtn.getData();
            ...   
     }); 

...

private static class DownloadRenderer extends AbstractDataRenderer<Object> {

    private final ResourceBundle myResourceBundle;

    public DownloadRenderer(final ResourceBundle myResourceBundle) {
        this.myResourceBundle = myResourceBundle;
    }

    @Override
    public String getText(Object item) {
        return myResourceBundle.getString("downloadbtn.text");
    }
}]]></Answer>
<Answer><![CDATA[btnar = new ArrayList<>();

for (int i=0; i < filelist1.length; i++) {
        downloadbtn = new Button("Download");
        btnar.add(downloadbtn);
        final int index=i;
        downloadbtn.setId(String.valueOf(index));
        downloadbtn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent arg0) {
                try {
                    System.out.println("sssss");                             
                    System.out.println(filelist1[index].getName());   

                } catch (Exception ex) {
                    Logger.getLogger(HomeUI_2Controller.class.getName()).log(Level.SEVERE, null, ex);
                }


            }
        });
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25758782" questionTitle="Fire Button's onAction with Enter in JavaFX">
<Answer><![CDATA[public class FocusedButton extends javafx.scene.control.Button {

    public FocusedButton ( ) {
        super ( );
        bindFocusToDefault ( );
    }

    public FocusedButton ( String text ) {
        super ( text );
        bindFocusToDefault ( );
    }

    public FocusedButton ( String text, Node graphic ) {
        super ( text, graphic );
        bindFocusToDefault ( );
    }

    private void bindFocusToDefault ( ) {
        defaultButtonProperty().bind(focusedProperty());
    }

}]]></Answer>
<Answer><![CDATA[public static void overrideEnterKeyPressEvent(KeyEvent evt) {
    EventTarget eventTarget = evt.getTarget();

    if ((eventTarget instanceof TextArea) || (eventTarget instanceof TableView)) {
        return;
    }

    if (eventTarget instanceof Button) {
        Platform.runLater(() -> {
            KeyEvent newEventPressed = new KeyEvent(KeyEvent.KEY_PRESSED, " ", " ", KeyCode.SPACE, false, false, false, false);
            Event.fireEvent(eventTarget, newEventPressed);
            KeyEvent newEventReleased = new KeyEvent(KeyEvent.KEY_RELEASED, " ", " ", KeyCode.SPACE, false, false, false, false);
            Event.fireEvent(eventTarget, newEventReleased);
        });
        evt.consume();
        return;
    }

    Platform.runLater(() -> {
        KeyEvent tabEvent = new KeyEvent(KeyEvent.KEY_PRESSED, "", "\t", KeyCode.TAB, evt.isShiftDown(), false, false, false);
        Event.fireEvent(eventTarget, tabEvent);
    });
    evt.consume();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25747499" questionTitle="Java 8: Calculate difference between two LocalDateTime">
<Answer><![CDATA[private void getChronoUnitForSecondAfterFirst(LocalDateTime firstLocalDateTime, LocalDateTime secondLocalDateTime, long[] chronoUnits) {
    /*Separate LocaldateTime on LocalDate and LocalTime*/
    LocalDate firstLocalDate = firstLocalDateTime.toLocalDate();
    LocalTime firstLocalTime = firstLocalDateTime.toLocalTime();

    LocalDate secondLocalDate = secondLocalDateTime.toLocalDate();
    LocalTime secondLocalTime = secondLocalDateTime.toLocalTime();

    /*Calculate the time difference*/
    Duration duration = Duration.between(firstLocalDateTime, secondLocalDateTime);
    long durationDays = duration.toDays();
    Duration throughoutTheDayDuration = duration.minusDays(durationDays);
    Logger.getLogger(PeriodDuration.class.getName()).log(Level.INFO,
            "Duration is: " + duration + " this is " + durationDays
            + " days and " + throughoutTheDayDuration + " time.");

    Period period = Period.between(firstLocalDate, secondLocalDate);

    /*Correct the date difference*/
    if (secondLocalTime.isBefore(firstLocalTime)) {
        period = period.minusDays(1);
        Logger.getLogger(PeriodDuration.class.getName()).log(Level.INFO,
                "minus 1 day");
    }

    Logger.getLogger(PeriodDuration.class.getName()).log(Level.INFO,
            "Period between " + firstLocalDateTime + " and "
            + secondLocalDateTime + " is: " + period + " and duration is: "
            + throughoutTheDayDuration
            + "\n-----------------------------------------------------------------");

    /*Calculate chrono unit values and  write it in array*/
    chronoUnits[0] = period.getYears();
    chronoUnits[1] = period.getMonths();
    chronoUnits[2] = period.getDays();
    chronoUnits[3] = throughoutTheDayDuration.toHours();
    chronoUnits[4] = throughoutTheDayDuration.toMinutes() % 60;
    chronoUnits[5] = throughoutTheDayDuration.getSeconds() % 60;
}]]></Answer>
<Answer><![CDATA[def fromDateTime = LocalDateTime.of(1968, 6, 14, 0, 13, 0)
def toDateTime = LocalDateTime.now()
def listOfUnits = [
    ChronoUnit.YEARS, ChronoUnit.MONTHS, ChronoUnit.DAYS,
    ChronoUnit.HOURS, ChronoUnit.MINUTES, ChronoUnit.SECONDS,
    ChronoUnit.MILLIS]

println calcDurationInTextualForm(listOfUnits, fromDateTime, toDateTime)    

String calcDurationInTextualForm(List<ChronoUnit> listOfUnits, LocalDateTime ts, LocalDateTime to)
{
    def result = []

    listOfUnits.each { chronoUnit ->
        long amount = ts.until(to, chronoUnit)
        ts = ts.plus(amount, chronoUnit)

        if (amount) {
            result << "$amount ${chronoUnit.toString()}"
        }
    }

    result.join(', ')
}]]></Answer>
<Answer><![CDATA[LocalDateTime fromDateTime = LocalDateTime.of(1984, 12, 16, 7, 45, 55);
LocalDateTime toDateTime = LocalDateTime.of(2014, 9, 10, 6, 40, 45);

LocalDateTime tempDateTime = LocalDateTime.from( fromDateTime );

long years = tempDateTime.until( toDateTime, ChronoUnit.YEARS);
tempDateTime = tempDateTime.plusYears( years );

long months = tempDateTime.until( toDateTime, ChronoUnit.MONTHS);
tempDateTime = tempDateTime.plusMonths( months );

long days = tempDateTime.until( toDateTime, ChronoUnit.DAYS);
tempDateTime = tempDateTime.plusDays( days );


long hours = tempDateTime.until( toDateTime, ChronoUnit.HOURS);
tempDateTime = tempDateTime.plusHours( hours );

long minutes = tempDateTime.until( toDateTime, ChronoUnit.MINUTES);
tempDateTime = tempDateTime.plusMinutes( minutes );

long seconds = tempDateTime.until( toDateTime, ChronoUnit.SECONDS);

System.out.println( years + " years " + 
        months + " months " + 
        days + " days " +
        hours + " hours " +
        minutes + " minutes " +
        seconds + " seconds.");

//prints: 29 years 8 months 24 days 22 hours 54 minutes 50 seconds.]]></Answer>
<Answer><![CDATA[import java.time.*;
import java.util.*;
import java.time.format.DateTimeFormatter;
public class MyClass {
    public static void main(String args[]) {
       DateTimeFormatter T = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
       Scanner h = new Scanner(System.in);

       System.out.print("Enter date of birth[dd/mm/yyyy hh:mm]: ");
       String b = h.nextLine();

       LocalDateTime bd = LocalDateTime.parse(b,T);
       LocalDateTime cd = LocalDateTime.now();

       int hr = cd.getHour() - bd.getHour();
       int mn = cd.getMinute() - bd.getMinute();

       Period time = Period.between(bd.toLocalDate(),cd.toLocalDate());

       System.out.print("Age is: "+time.getYears()+ " years,"+time.getMonths()+ " months, " +time.getDays()+ " days, "+hr+ " hours, " +mn+ " minutes old");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25579693" questionTitle="JavaFX Snake Thread.Sleep() does not load FXML">
<Answer><![CDATA[Thread gameLoop = new Thread(() ->
{
     while (KEEP_PLAYING)
     {
         printGrid(); //<- I assume this prints the state of the grid to the console, and so is safe to execute off of the FX Application Thread
         try
         {
             Thread.sleep(1000);
         }
         catch (InterruptedException ex) {}
         Platform.runLater(() ->
         {
             generateNextGrid(); //<- execute this on the FX Application Thread as it modifies your UI
         });
     }
     if (WON_GAME)
     {
         ...
     }
     else
     {
         ...
     }
});
gameLoop.start();]]></Answer>
<Answer><![CDATA[Task<Boolean> gameTask = new Task() {

        @Override
        protected Object call() throws Exception {
            while (KEEP_PLAYING) {
                generateNextGrid();
                try {
                    Thread.sleep(GAME_SPEED_DELAY);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SnakeGUIController.class.getName()).log(Level.SEVERE, null, ex);
                }
                Platform.runLater(() -> printGridToGUI());
            }
            /*Stop continuing to play. You either won or lost.*/
            if (WON_GAME) {
                System.out.println("Congratulations!");
            } else {
                System.out.println("You lose.");
            }
            return true;
        }
    };
    Thread gameThread = new Thread(gameTask);
    gameThread.start();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25439277" questionTitle="Lambdas, multiple forEach with casting">
<Answer><![CDATA[public List<ContextInfo> list() {
    final List<ContextInfo> list = new ArrayList<ContextInfo>();
    final StandardServer server = getServer();

    Arrays.stream(server.findServices())
        .filter(service -> service.getContainer() instanceof Engine)
        .map(service -> (Engine)service.getContainer())
        .flatMap(engine -> Arrays.stream(engine.findChildren()))
        .filter(possibleHost -> possibleHost instanceof Host)
        .map(possibleHost -> (Host)possibleHost)
        .flatMap(host -> Arrays.stream(host.findChildren()))
        .filter(possibleContext -> possibleContext instanceof Context)
        .map(possibleContext -> (Context)possibleContext)
        .forEach(context -> {
            // copy to another object -- not the important part
            final ContextInfo info = new ContextInfo(context.getPath());
            info.setThisPart(context.getThisPart());
            info.setNotImportant(context.getNotImportant());
            list.add(info);
        });
    return list;
}]]></Answer>
<Answer><![CDATA[public static class SlambdaIterator<T> implements Iterator<T> {
    // Ya put your Lambdas in there
    public static interface Advancer<T> {
        T advance() throws NoSuchElementException;
    }
    private final Advancer<T> advancer;
    private T next;

    protected SlambdaIterator(final Advancer<T> advancer) {
        this.advancer = advancer;
    }

    @Override
    public boolean hasNext() {
        if (next != null) return true;

        try {
            next = advancer.advance();

            return next != null;
        } catch (final NoSuchElementException e) {
            return false;
        }
    }

    @Override
    public T next() {
        if (!hasNext()) throw new NoSuchElementException();

        final T v = next;
        next = null;
        return v;
    }

    @Override
    public void remove() {
        throw new UnsupportedOperationException();
    }
}]]></Answer>
<Answer><![CDATA[public List<ContextInfo> list() {
    final List<ContextInfo> list = new ArrayList<>();
    final StandardServer server = getServer();

    return server.findServices()
            .stream()
            .map(Service::getContainer)
            .filter(Engine.class::isInstance)
            .map(Engine.class::cast)
            .flatMap(engine -> Arrays.stream(engine.findChildren()))
            .filter(Host.class::isInstance)
            .map(Host.class::cast)
            .flatMap(host -> mapContainers(
                Arrays.stream(host.findChildren()), host.getName())
            )
            .collect(Collectors.toList());
}

private static Stream<ContextInfo> mapContainers(Stream<Container> containers,
    String hostname) {
    return containers
            .filter(Context.class::isInstance)
            .map(Context.class::cast)
            .map(context -> {
                ContextInfo info = new ContextInfo(context.getPath());
                info.setThisPart(context.getThisPart());
                info.setNotImportant(context.getNotImportant());
                info.setHostname(hostname); // The Bonus Challenge
                return info;
            });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25415049" questionTitle="Getting HTML input value in JavaFX WebView?">
<Answer><![CDATA[package webviewinputvalue;

public class WebviewInputValue extends Application {

    private WebView InitWebview(){

        //Create browser
        WebView browser = new WebView();
        WebEngine render = browser.getEngine();

        //Load simple HTML
        String editor = WebviewInputValue.class.getResource("editor.html").toExternalForm();
        render.load(editor);

        //Listen for state change
        render.getLoadWorker().stateProperty().addListener((ov, o, n) -> {
            if (Worker.State.SUCCEEDED == n) {
                render.setOnStatusChanged(webEvent -> {

                    //Call value change
                    onValueChange(webEvent.getData());
                });
            }
        });

        return browser;
    }

    //called when value changes
    private void onValueChange(String data){

        //Print out data
        System.out.println(data);

        //If the data is equal to "exit", close the program
        if("exit".equals(data)){

            //Print goodbye message
            System.out.println("Received exit command! Goodbye :D");

            //Exit
            System.exit(0);
        }
    }

    @Override
    public void start(Stage primaryStage) {

        //Create browser
        WebView browser = InitWebview();

        StackPane root = new StackPane();
        root.getChildren().add(browser);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[Runnable check = () -> {            
    WebEngine engine = webView.getEngine();
    if (engine != null) {
        Document document = engine.getDocument();
        if (document != null) {
            Element element = document.getElementById("samlResponse");
            if (element instanceof HTMLTextAreaElement) {
                HTMLTextAreaElement textArea = (HTMLTextAreaElement) element;
                String text = textArea.getValue();
                if (text != null && !text.isEmpty()) {
                    System.out.println("BINGO:\n" + text);
                    System.exit(0);
                }
            }
        }
    }
};

new Thread(() -> {
    while (true) {
        Platform.runLater(check);

        try {
            Thread.sleep(1_000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}).start();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25408350" questionTitle="Is there a good way to extract chunks of data from a java 8 stream?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Spliterator;
import java.util.Spliterators.AbstractSpliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class PartitioningSpliterator<E> extends AbstractSpliterator<List<E>>
{
  private final Spliterator<E> spliterator;
  private final int partitionSize;

  public PartitioningSpliterator(Spliterator<E> toWrap, int partitionSize) {
    super(toWrap.estimateSize(), toWrap.characteristics() | Spliterator.NONNULL);
    if (partitionSize <= 0) throw new IllegalArgumentException(
        "Partition size must be positive, but was " + partitionSize);
    this.spliterator = toWrap;
    this.partitionSize = partitionSize;
  }

  public static <E> Stream<List<E>> partition(Stream<E> in, int size) {
    return StreamSupport.stream(new PartitioningSpliterator(in.spliterator(), size), false);
  }

  public static <E> Stream<List<E>> partition(Stream<E> in, int size, int batchSize) {
    return StreamSupport.stream(
        new FixedBatchSpliterator<>(new PartitioningSpliterator<>(in.spliterator(), size), batchSize), false);
  }

  @Override public boolean tryAdvance(Consumer<? super List<E>> action) {
    final ArrayList<E> partition = new ArrayList<>(partitionSize);
    while (spliterator.tryAdvance(partition::add) 
           && partition.size() < partitionSize);
    if (partition.isEmpty()) return false;
    action.accept(partition);
    return true;
  }

  @Override public long estimateSize() {
    final long est = spliterator.estimateSize();
    return est == Long.MAX_VALUE? est
         : est / partitionSize + (est % partitionSize > 0? 1 : 0);
  }
}]]></Answer>
<Answer><![CDATA[@Test
public void streamTest(){

    Stream<Integer> data = Stream.generate(() -> {
        //Block on IO
        return blockOnIO();
    });


    AtomicInteger countDown = new AtomicInteger(1000);
    final ArrayList[] buffer = new ArrayList[]{new ArrayList<Integer>()};
    Object syncO = new Object();
    data.parallel().unordered().map(i -> i * 1000).forEach(i->{
        System.out.println(String.format("FE %s %d",Thread.currentThread().getName(), buffer[0].size()));
        int c;
        ArrayList<Integer> export=null;
        synchronized (syncO) {
            c = countDown.addAndGet(-1);
            buffer[0].add(i);
            if (c == 0) {
                export=buffer[0];
                buffer[0] = new ArrayList<Integer>();
                countDown.set(1000);
            }
        }
        if(export !=null){
            sendBatch(export);
        }

    });
    //export any remaining
    sendBatch(buffer[0]);
}

Integer blockOnIO(){
    try {
        Thread.sleep(50);
        return Integer.valueOf((int)Math.random()*1000);
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }
}

void sendBatch(ArrayList al){
    assert al.size() == 1000;
    System.out.println(String.format("LOAD %s %d",Thread.currentThread().getName(), al.size()));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25307349" questionTitle="Apply style to TreeView children nodes in javaFX">
<Answer><![CDATA[private static final String HIGHLIGHT_STYLE = "child-highlight";
private TreeTableView<MyRowContentObject> treeTableView = new TreeTableView<>();
private void setRowFactory() {
    treeTableView.setRowFactory(e -> {
        TreeTableRow<MyRowContentObject> hoverRow = new TreeTableRow<MyRowContentObject>();
        hoverRow.hoverProperty().addListener(new ChangeListener<Boolean>() {
             //you can use a lambda expression for the listener if you want
            @Override
            public void changed(ObservableValue<? extends Boolean> observableValue, Boolean oldStatus, Boolean newStatus) {
                List<Node> rows = getRowsList();
                //on mouse hover
                if(newStatus){
                    TreeItem<MyRowContentObject> item = hoverRow.getTreeItem();
                    //validates if there is a node on the hovered row, is expanded and has children
                    if(item != null && item.isExpanded() && item.getChildren().size() > 0) {
                        //row index of the last child of the expanded and hovered node
                        int lastChildIndex = treeTableView.getRow(item.getChildren().get(item.getChildren().size() - 1));
                        //highlights the childs
                        for (int i = hoverRow.getIndex() + 1; i < lastChildIndex + 1; i++)
                            rows.get(i).getStyleClass().add(HIGHLIGHT_STYLE);
                    }
                } else {
                    //on mouse out cleans every single row, because its hard to keep track of the highlighted rows
                    for (Node row : rows)
                        row.getStyleClass().remove(HIGHLIGHT_STYLE);
                }
            }
        });
        return hoverRow;
    });
}

//fetches all rows from the treeTableView
private List<Node> getRowsList(){
    return new ArrayList<>(treeTableView.lookupAll("TreeTableRow"));
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.Label;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;
public class TreeTest extends Application {  
    @Override  
    public void start(Stage primaryStage) throws Exception {  
        final StackPane stackPane = new StackPane();  

        TreeItem<Integer> root = createTreeItem(1);

        final TreeView<Integer> tree = new TreeView<>(root);  
        tree.setCellFactory(treeView -> {  
            final Label label = new Label();
            final Label anotherLabel = new Label("Item:");
            label.getStyleClass().add("highlight-on-hover");
            final HBox hbox = new HBox(5, anotherLabel, label);
            TreeCell<Integer> cell =  new TreeCell<Integer>() {  
                @Override  
                protected void updateItem(Integer item, boolean empty) {  
                    super.updateItem(item, empty);  
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(hbox);
                    }
                }  
            };  
            cell.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            cell.itemProperty().addListener((obs, oldItem, newItem) -> 
                label.setText(newItem != null ? String.valueOf(newItem) : ""));
            return cell ;
        });  
        stackPane.getChildren().add(tree);  
        final Scene scene = new Scene(stackPane);  

        scene.getStylesheets().add(getClass().getResource("tree-hover.css").toExternalForm());

        primaryStage.setScene(scene);  
        primaryStage.setTitle(getClass().getSimpleName());  
        primaryStage.show();  
    }  

    private TreeItem<Integer> createTreeItem(int value) {
        TreeItem<Integer> item = new TreeItem<>(value);
        if (value < 10000) {
            for (int i=0; i<10; i++) {
                item.getChildren().add(createTreeItem(10*value+i));
            }
        }
        return item ;
    }

    public static void main(String[] args) {  
        launch(args);  
    }  
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25299653" questionTitle="Java idiom for lambdas with non-SAM interfaces">
<Answer><![CDATA[import java.util.function.Consumer;

public interface WindowBridge {

    // SAM for this method
    public abstract class WindowOpened extends WindowAdapter {
        public abstract void windowOpened(Event e);
    }

    // factory bridge
    public static WindowOpened windowOpened(Consumer<Event> c) {
        return new WindowOpened() {
            public void windowOpened(Event e){
                c.accept(e);
            }
        };
    }

    // SAM for this method
    public abstract class WindowClosing extends WindowAdapter {
        public abstract void windowClosing(Event e);
    }

    // factory bridge
    public static WindowClosing windowClosing(Consumer<Event> c) {
        return new WindowClosing() {
            public void windowClosing(Event e){
                c.accept(e);
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[import java.awt.event.ComponentListener;
import java.awt.event.MouseListener;
import java.awt.event.WindowListener;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.function.Consumer;
import java.util.function.Function;

class LambdaDelegatorTest
{
    public static void main(String args[])
    {
        WindowListener w =
            LambdaDelegators.create(WindowListener.class, "windowClosed",
                e -> System.out.println("Window closed"));

        w.windowActivated(null);
        w.windowClosed(null);

        MouseListener m =
            LambdaDelegators.create(MouseListener.class, "mouseExited",
                e -> System.out.println("Mouse exited"));

        m.mouseClicked(null);
        m.mouseExited(null);

        ComponentListener c =
            LambdaDelegators.create(ComponentListener.class, "componentShown",
                e -> System.out.println("Component shown"));

        c.componentHidden(null);
        c.componentShown(null);

    }
}

class LambdaDelegators
{
    public static <T> T create(Class<T> c, String methodName,
        Consumer<Object[]> consumer)
    {
        Function<Object[], Object> function = new Function<Object[], Object>()
        {
            @Override
            public Object apply(Object[] t)
            {
                consumer.accept(t);
                return null;
            }
        };
        return createFromFunction(c, methodName, function);
    }

    @SuppressWarnings("unchecked")
    private static <T> T createFromFunction(Class<T> c, String methodName,
        Function<Object[], Object> function)
    {
        Class<?> classes[] = new Class[1];
        classes[0] = c;
        Object proxy =
            Proxy.newProxyInstance(c.getClassLoader(), classes,
                new LambdaDelegator(methodName, function));
        return (T) proxy;
    }

    private LambdaDelegators()
    {

    }
}

class LambdaDelegator implements InvocationHandler
{
    private static final Method hashCodeMethod;
    private static final Method equalsMethod;
    private static final Method toStringMethod;
    static
    {
        try
        {
            hashCodeMethod = Object.class.getMethod(
                "hashCode", (Class<?>[]) null);
            equalsMethod = Object.class.getMethod(
                "equals", new Class[] { Object.class });
            toStringMethod = Object.class.getMethod(
                "toString", (Class<?>[]) null);
        }
        catch (NoSuchMethodException e)
        {
            throw new NoSuchMethodError(e.getMessage());
        }
    }

    private final String methodName;
    private final Function<Object[], Object> function;

    public LambdaDelegator(String methodName,
        Function<Object[], Object> function)
    {
        this.methodName = methodName;
        this.function = function;
    }

    public Object invoke(Object proxy, Method m, Object[] args)
        throws Throwable
    {
        Class<?> declaringClass = m.getDeclaringClass();
        if (declaringClass == Object.class)
        {
            if (m.equals(hashCodeMethod))
            {
                return proxyHashCode(proxy);
            }
            else if (m.equals(equalsMethod))
            {
                return proxyEquals(proxy, args[0]);
            }
            else if (m.equals(toStringMethod))
            {
                return proxyToString(proxy);
            }
            else
            {
                throw new InternalError(
                    "unexpected Object method dispatched: " + m);
            }
        }
        else
        {
            if (m.getName().equals(methodName))
            {
                return function.apply(args);
            }
        }
        return null;
    }

    private Integer proxyHashCode(Object proxy)
    {
        return new Integer(System.identityHashCode(proxy));
    }

    private Boolean proxyEquals(Object proxy, Object other)
    {
        return (proxy == other ? Boolean.TRUE : Boolean.FALSE);
    }

    private String proxyToString(Object proxy)
    {
        return proxy.getClass().getName() + '@' +
            Integer.toHexString(proxy.hashCode());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25262580" questionTitle="How to get length of path using java 8 streams">
<Answer><![CDATA[class DistanceHelper {
    private double sum = 0;
    private Vector3D first = null;
    private Vector3D last = null;

    public void add(Vector3D vector3d) {
        if (first == null)
            first = vector3d;
        if (last != null)
            sum += vector3d.distance(last);
        last = vector3d;
    }

    public void combine(DistanceHelper otherHelper) {
        //add distance of path from current thread with distance of path
        //from other thread
        sum += otherHelper.sum;
        //also add distance between paths handled by separate threads like
        // when path of Thread1 is A->B and Thread2 is C->D then we need to 
        // include path from `B` to `C`
        if (this.last!=null && otherHelper.first!=null)
            sum += this.last.distance(otherHelper.first);
        this.last = otherHelper.last;
    }

    public double getSum() {
        return sum;
    }
}]]></Answer>
<Answer><![CDATA[public class Distance implements Collector<Vector3D, Distance.Helper, Double> {

    public static final Distance COLLECTOR = new Distance();

    static final class Helper {
        private double sum = 0;
        private Vector3D first = null, previous = null;
    }
    public Set<Characteristics> characteristics() {
        return Collections.emptySet();
    }
    public Supplier<Helper> supplier() {
        return Helper::new;
    }
    public BiConsumer<Helper, Vector3D> accumulator() {
        return (helper,vector3d)-> {
            if (helper.previous != null)
                helper.sum += vector3d.distance(helper.previous);
            else helper.first = vector3d;
            helper.previous = vector3d;
        };
    }
    public BinaryOperator<Helper> combiner() {
        return (h1,h2)-> {
            h2.sum += h1.sum;
            if(h1.previous!=null && h2.first!=null) {
                h2.sum += h1.previous.distance(h2.first);
                h2.first=h1.first;
            }
            return h2;
        };
    }
    public Function<Helper, Double> finisher() {
        return helper -> helper.sum;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25229735" questionTitle="JavaFX: editable TableView without JavaFX-style properties">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;


public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();
        TableView<Person> table = new TableView<>();

        TableColumn<Person, String> firstNameCol = new TableColumn<>("First Name");

        firstNameCol.setCellFactory(TextFieldTableCell.forTableColumn());
        firstNameCol.setOnEditCommit(
                event -> event.getRowValue().setFirstName(event.getNewValue()));
        firstNameCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().getFirstName()));

        TableColumn<Person, String> lastNameCol = new TableColumn<>("Last Name");
        lastNameCol.setCellFactory(TextFieldTableCell.forTableColumn());
        lastNameCol.setOnEditCommit(
                event -> event.getRowValue().setLastName(event.getNewValue()));
        lastNameCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().getLastName()));

        table.getColumns().addAll(firstNameCol, lastNameCol);
        table.setEditable(true);

        Button button = new Button("Show data");
        button.setOnAction(event -> table.getItems().forEach(System.out::println));

        HBox controls = new HBox(5, button);

        root.setCenter(table);
        root.setBottom(controls);

        table.getItems().addAll(
                new Person("Jacob", "Smith"),
                new Person("Isabella", "Johnson"),
                new Person("Ethan", "Williams"),
                new Person("Emma", "Jones"),
                new Person("Michael", "Brown")
        );

        Scene scene = new Scene(root, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.NamedArg;
import javafx.beans.value.ObservableValue;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.util.Callback;
import sun.util.logging.PlatformLogger;
import sun.util.logging.PlatformLogger.Level;

import com.sun.javafx.property.PropertyReference;
import com.sun.javafx.scene.control.Logging;

// Original code from PropertyValueFactory
// Replacing ReadOnlyObjectWrapper with new ReadableWritableObservableValue
public class WritablePropertyValueFactory<S, T> implements Callback<CellDataFeatures<S, T>, ObservableValue<T>>
{
    private final String property;

    private Class<?> columnClass;
    private String previousProperty;
    private PropertyReference<T> propertyRef;

    public WritablePropertyValueFactory(@NamedArg("property") String property)
    {
        this.property = property;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ObservableValue<T> call(CellDataFeatures<S, T> param)
    {
        return getCellDataReflectively((T) param.getValue());
    }

    public final String getProperty()
    {
        return this.property;
    }

    private ObservableValue<T> getCellDataReflectively(T rowData)
    {
        if (getProperty() == null || getProperty().isEmpty() || rowData == null)
            return null;
        try
        {
            if (this.columnClass == null || this.previousProperty == null ||
                    !this.columnClass.equals(rowData.getClass()) ||
                    !this.previousProperty.equals(getProperty()))
            {
                this.columnClass = rowData.getClass();
                this.previousProperty = getProperty();
                this.propertyRef = new PropertyReference<T>(rowData.getClass(), getProperty());
            }
            if (this.propertyRef.hasProperty())
            {
                return this.propertyRef.getProperty(rowData);
            }
            else
            {
                // Create ReadableWritableObservableValue instead of ReadOnlyObjectWrapper
                return new ReadableWritableObservableValue<T>(
                        () -> this.propertyRef.get(rowData),
                        (value) -> this.propertyRef.set(rowData, value));
            }
        }
        catch (IllegalStateException e)
        {
            final PlatformLogger logger = Logging.getControlsLogger();
            if (logger.isLoggable(Level.WARNING))
            {
                logger.finest("Can not retrieve property '" + getProperty() +
                        "' in PropertyValueFactory: " + this +
                        " with provided class type: " + rowData.getClass(), e);
            }
        }
        return null;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25194811" questionTitle="unhandled exception on button event">
<Answer><![CDATA[import java.io.IOException;
import java.io.PrintWriter;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.HPos;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class CompanyParoll extends Application {
    private TextField tfNumOfEmployees = new TextField();
    private TextField tfEmpFirstName = new TextField();
    private TextField tfEmpLastName = new TextField();
    private TextField tfEmpPayRate = new TextField();
    private TextField tfEmpHoursWorked = new TextField();
    private Button btEnterNum = new Button("Submit");
    private Button btNextEmp = new Button("Add Employee");
    private Button btRunReport = new Button("Run Report");
    private Button btQuit = new Button("Quit");

    // Declare Variables
    int totalEmployees;
    int index = 0;
    String[] firstName = new String[totalEmployees];
    String[] lastName = new String[totalEmployees];
    double[] payRate = new double[totalEmployees];
    double[] hoursWorked = new double[totalEmployees];
    Stage stage2;

    @Override
    // Override the start method in the Application class
    public void start(Stage primaryStage) {
        // Create the UI
        GridPane gridPane = new GridPane();
        GridPane gridPane2 = new GridPane();
        gridPane.setHgap(75);
        gridPane.setVgap(15);
        gridPane.add(new Label("Employee's First Name:"), 0, 0);
        gridPane.add(tfEmpFirstName, 1, 0);
        gridPane.add(new Label("Employee's Last Name:"), 0, 1);
        gridPane.add(tfEmpLastName, 1, 1);
        gridPane.add(new Label("Employee's Hourly Pay Rate:"), 0, 2);
        gridPane.add(tfEmpPayRate, 1, 2);
        gridPane.add(new Label("Hours Worked by Employee"), 0, 3);
        gridPane.add(tfEmpHoursWorked, 1, 3);
        gridPane.add(btNextEmp, 1, 4);
        gridPane.add(btQuit, 0, 6);
        gridPane.add(btRunReport, 1, 6);

        // Set properties
        gridPane.setAlignment(Pos.CENTER);
        tfEmpFirstName.setAlignment(Pos.BOTTOM_RIGHT);
        tfEmpLastName.setAlignment(Pos.BOTTOM_RIGHT);
        tfEmpPayRate.setAlignment(Pos.BOTTOM_RIGHT);
        tfEmpHoursWorked.setAlignment(Pos.BOTTOM_RIGHT);
        GridPane.setHalignment(btQuit, HPos.LEFT);
        GridPane.setHalignment(btRunReport, HPos.RIGHT);
        GridPane.setHalignment(btNextEmp, HPos.RIGHT);

        gridPane2.setHgap(75);
        gridPane2.setVgap(15);
        gridPane2.add(new Label("Enter the Number of Employees:"), 0, 0);
        gridPane2.add(tfNumOfEmployees, 0, 1);
        gridPane2.add(btEnterNum, 0, 2);

        gridPane2.setAlignment(Pos.CENTER);
        tfNumOfEmployees.setAlignment(Pos.BOTTOM_RIGHT);
        GridPane.setHalignment(btEnterNum, HPos.CENTER);

        btEnterNum.setOnAction(e -> getArraySize());
        btRunReport.setOnAction(e -> outputReport());
        btNextEmp.setOnAction(e -> addEmployeeData());
        btQuit.setOnAction(e -> quitApplication());

        // Create a scene and place it in the stage
        Scene scene = new Scene(gridPane, 400, 250);
        primaryStage.setTitle("Payroll Calculator"); // Set title
        primaryStage.setScene(scene); // Place the scene in t he stage
        primaryStage.show(); // Display the stage

        // Create new window to get number of employees
        stage2 = new Stage();
        Scene scene2 = new Scene(gridPane2, 200, 150);
        stage2.setTitle("Number of Employees");
        stage2.setScene(scene2);
        stage2.show();
    }

    public void getArraySize() {
        totalEmployees = Integer.parseInt(tfNumOfEmployees.getText());
        stage2.close();
    }

    public void addEmployeeData() {

        while (index < firstName.length) {
            firstName[index] = tfEmpFirstName.getText();
            lastName[index] = tfEmpLastName.getText();
            payRate[index] = Double.parseDouble(tfEmpPayRate.getText());
            hoursWorked[index] = Integer.parseInt(tfEmpHoursWorked.getText());

            index++;
            break;
        }

        tfEmpFirstName.clear();
        tfEmpLastName.clear();
        tfEmpPayRate.clear();
        tfEmpHoursWorked.clear();
    }

    public void outputReport() {
        try {
            PrintWriter empPayroll = new PrintWriter("Payroll.txt");

            double regularHours = 0;
            double overtimeHours = 0;
            double regularPay = 0;
            double overtimePay = 0;
            double totalPay = 0;

            for (index = 0; index < firstName.length; index++) {
                if (hoursWorked[index] >= 40)
                    regularHours = 40;
                else
                    regularHours = hoursWorked[index];

                if (hoursWorked[index] > 40)
                    overtimeHours = hoursWorked[index] - 40;
                else
                    overtimeHours = 0;

                regularPay = (payRate[index] * regularHours);

                overtimePay = ((payRate[index] * 1.5) * overtimeHours);

                totalPay = regularPay + overtimePay;

                empPayroll.println("\nName: " + firstName[index] + " "
                        + lastName[index]);
                empPayroll.println("Pay Rate: " + payRate[index]);
                empPayroll.println("Regular Hours Worked: " + regularHours);
                empPayroll.println("Overtime Hours Worked: " + overtimeHours);
                empPayroll.println("Regular Pay: " + regularPay);
                empPayroll.println("Overtime Pay: " + overtimePay);
                empPayroll.println("Total Gross Pay: " + totalPay);
            }
            empPayroll.close();
        } catch (IOException exp) {
            exp.printStackTrace();
        }

    }

    public void quitApplication() {
        Platform.exit(); // Close application
    }

    public static void main(String[] args) {
        Application.launch();
    }
}]]></Answer>
<Answer><![CDATA[import java.io.PrintWriter;
import java.io.FileNotFoundException;

public class PWriter
{
    public static void main(String[] args)
    {
        PrintWriter empPayroll = null;

        try
        {
            empPayroll = new PrintWriter("d:\\tests\\test.txt");
            empPayroll.println("Test");
        }
        catch (FileNotFoundException ex)
        {
            ex.printStackTrace();
        }
        finally
        {
            empPayroll.close();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25186616" questionTitle="Persistence Class in Java">
<Answer><![CDATA[class MySqlBookDAOImpl implements BookDAO{
        private Connection conn;
        private Connection getConnection(){
           if(conn==null)
                conn = mySqlConnectionPool.getConnection();
           return conn;
        };

        @Override
        public Book create(Book book){
           Connection conn = getConnection();
           String query = "INSERT... "
        };

        @Override
        public List<Book> read(){
           Connection conn = getConnection();
           String query = "SELECT... "
        };

        @Override
        public Book update(Book book){
           Connection conn = getConnection();
           String query = "UPDATE... "
        };

        @Override
        public Book delete(Book book){
           Connection conn = getConnection();
           String query = "DELETE... "
        };
}]]></Answer>
<Answer><![CDATA[public class User implements Entity<Integer> {

    private Integer id;

    public User(Integer id) {
        this.id = id;
    }

    @Override
    public Integer getId() {
        return id;
    }

}

public class UserDao implements Dao<Integer, User> {

    @Override
    public User create(User entity) {
        // build query
    }

    @Override
    public User update(User entity) {
        // build query
    }

    @Override
    public User delete(User entity) {
        // build query
    }

    @Override
    public User get(Integer id) {
        // build query
    }

    @Override
    public List<User> getAll() {
        // build query
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25138187" questionTitle="Custom Cells in TableView">
<Answer><![CDATA[TableColumn<Person, String> column = new TableColumn<>("Login");
column.setCellValueFactory(data -> data.getValue().favoriteColorProperty());

column.setCellFactory( col -> {

    TableCell<Person, String> cell = new TableCell<>();

    Button button = new Button("Login");
    button.setOnAction(event -> {
        System.out.println("pressed the button");
        // you can call cell.getItem() if you want to do something specific for this cell
    });

    cell.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);

    cell.itemProperty().addListener((obs, oldItem, newItem) -> {
        if (newItem == null) {
            cell.setGraphic(null);
        } else {
            cell.setGraphic(button);
        }
    });

    return cell ;
});]]></Answer>
<Answer><![CDATA[new TableColumn[Person, String] {
  text = "Login" 
  cellValueFactory = { _.value.name } //it actually doesn't matter which value you choose here
  cellFactory = { _ =>
    val cell = new TableCell[Person, String]()
    val btn = new Button {
      text = "Login"
      onAction = { (e: ActionEvent) =>
        println("Button pressed")
      }
    }
    cell.setContentDisplay(ContentDisplay.GRAPHIC_ONLY)

    cell.itemProperty().addListener(new ChangeListener[String] {
      override def changed(obs: ObservableValue[_ <: String], oldItem: String, newItem: String): Unit = {
        if (newItem == null) {
          cell.setGraphic(null)
        } else {
          cell.setGraphic(btn)
        }
      }
    })

    cell
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25135775" questionTitle="How can I speed up maven builds of JavaFX application?">
<Answer><![CDATA[<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-assembly-plugin</artifactId>
    <configuration>
        <appendAssemblyId>false</appendAssemblyId>
        <archive>
            <manifest>
                <mainClass>${mainClass}</mainClass>
            </manifest>
        </archive>
        <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
        </descriptorRefs>
    </configuration> 
    <executions>
        <execution>
            <id>my-assembly</id>
            <phase>package</phase>
            <goals>
                <goal>assembly</goal>
            </goals>
        </execution>
    </executions>
</plugin>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project ...>
    ...
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                ...
                <executions>
                    <!-- take this out of here
                    <execution>
                        <id>unpack-dependencies</id>
                        ...
                    </execution>
                    -->
                    <execution>
                        ...
                    </execution>
                </executions>
            </plugin>
            ...
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>javafxpackager</id>
            <build>
                <plugins>
                    <!-- INSERT THE exec-maven-plugin HERE, ONLY
                         WITH THE unpack-dependencies EXECUTION -->
                </plugins>
            </build>
        </profile>
    </profiles>
</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24953856" questionTitle="Print a list as a table in jsp">
<Answer><![CDATA[var numbers = [['A','0','1'],['A','0','0'],['B','0','1'],['C','1','1'],['C','0','1']];

 var rows = "";

 for(var i=0; i < numbers .length; i++){

    rows = rows  + "<tr>"

    for(var j=0; j < 3; j++){

         if(i != '0' && numbers[i][j]==numbers[i-1][j]){
              rows = rows  + "<td>"+"-"+"</td>" 
         }else{
              rows = rows  + "<td>"+numbers[i][j]+"</td>" 
         }
    } 

    rows = rows  + "</tr>"
 }

 var table ="<table>" + rows  +"</table>"
//you can append it to DIV or any element in JSP]]></Answer>
<Answer><![CDATA[var depth = arr.map(function(item){
    return item.map(function(){
        return 0;
    });
});

var arrLength = arr.length;
for(var index=0;index<arrLength;index++){

    var subArr = arr[index];
    var subLength = subArr.length;
    var tIndex;
    var maxtIndex = arrLength;

    if(index < arrLength -1) {       
        for(var i=0;i<subLength;i++){
            tIndex = index + 1;
            while(depth[index][i] != -1 && tIndex<maxtIndex){
                if(subArr[i] == arr[tIndex][i]){
                    depth[index][i] = depth[index][i]+1;
                    depth[tIndex][i] = -1;
                } else {
                    break;
                }
                tIndex++;
                maxtIndex = tIndex;
            }

            if(depth[index][i] == 0){
                break;
            }
        }       
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24933164" questionTitle="javafx adding image in tableview">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ImageViewInTableView extends Application {

    public Parent createContent() {

        /* layout */
        BorderPane layout = new BorderPane();

        /* layout -> center */
        TableView<CustomImage> tableview = new TableView<CustomImage>();

        /* layout -> center -> tableview */

        /* initialize two CustomImage objects and add them to the observable list */
        ObservableList<CustomImage> imgList = FXCollections.observableArrayList();
        CustomImage item_1 = new CustomImage(new ImageView(new Image("Icon_AddNewPatient.png")));
        CustomImage item_2 = new CustomImage(new ImageView(new Image("Icon_EditPatient.png")));
        imgList.addAll(item_1, item_2);

        /* initialize and specify table column */
        TableColumn<CustomImage, ImageView> firstColumn = new TableColumn<CustomImage, ImageView>("Images");
        firstColumn.setCellValueFactory(new PropertyValueFactory<CustomImage, ImageView>("image"));
        firstColumn.setPrefWidth(60);

        /* add column to the tableview and set its items */
        tableview.getColumns().add(firstColumn);
        tableview.setItems(imgList);

        /* add TableView to the layout */
        layout.setCenter(tableview);
        return layout;
    }

    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent()));
        stage.setWidth(200);
        stage.setHeight(200);
        stage.show();
    }

    public static void main(String args[]) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import java.net.URL;
import java.util.ResourceBundle;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class FXMLDocumentController implements Initializable 
{
    //Going to need access to the table view.  I used JavaFx Scene Builder to create the tableview. 
    //You can use the .fxml document also.
    @FXML private TableView tvMain;    

    @Override
    public void initialize(URL url, ResourceBundle rb) 
    {        
        /* initialize two CustomImage objects and add them to the observable list */
        ObservableList<CustomImage> imgList = FXCollections.observableArrayList();
        CustomImage item_1 = new CustomImage(new ImageView(new Image("aulogo02.jpg")), "hello");
        CustomImage item_2 = new CustomImage(new ImageView(new Image("aulogo02.jpg")), "world");
        imgList.addAll(item_1, item_2);

        /* initialize and specify table column */
        TableColumn tcC1 = new TableColumn<>("Picture");
        tcC1.setCellValueFactory(new PropertyValueFactory<>("image"));
        tcC1.setPrefWidth(130);//set this to what you prefer.

        TableColumn tcX = new TableColumn<>("Text");
        tcX.setCellValueFactory(new PropertyValueFactory<>("string"));

        /* add column to the tableview and set its items */
        tvMain.getColumns().add(tcC1);
        tvMain.getColumns().add(tcX);
        tvMain.setItems(imgList);       
    }    

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24872995" questionTitle="Why does my Eclipse Luna 4.4 crash on Debian Wheezy 7.4 with Oracle JDK8 64bit?">
<Answer><![CDATA[-startup
plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.200.v20140603-1326
-product
org.eclipse.epp.package.jee.product
--launcher.defaultAction
openFile
-showsplash
org.eclipse.platform
--launcher.XXMaxPermSize
256m
--launcher.defaultAction
openFile
--launcher.GTK_version
2
-vm
/opt/jdk/jdk1.7.0_67/bin/java
-vmargs
-Dosgi.requiredJavaVersion=1.6
-XX:MaxPermSize=256m
-Xms40m
-Xmx512m]]></Answer>
<Answer><![CDATA[-startup
 plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.200.v20140603-1326
-product
org.eclipse.epp.package.java.product
--launcher.defaultAction
openFile
-showsplash
org.eclipse.platform
--launcher.XXMaxPermSize
256m
--launcher.defaultAction
openFile
--launcher.GTK_version
2
--launcher.appendVmargs
-vmargs
-Dosgi.requiredJavaVersion=1.6
-XX:MaxPermSize=256m
-Xms40m
-Xmx512m]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24840138" questionTitle="Javafx canvas draw only moving object without redraw the background">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class LayeredCanvas extends Application {

    @Override
    public void start(Stage primaryStage) {
        Canvas layer1 = new Canvas(700, 300);
        Canvas layer2 = new Canvas(700, 300);
        GraphicsContext gc1 = layer1.getGraphicsContext2D();
        GraphicsContext gc2 = layer2.getGraphicsContext2D();

        gc1.setFill(Color.GREEN);
        gc1.setFont(new Font("Comic sans MS", 100));
        gc1.fillText("BACKGROUND", 0, 100);
        gc1.fillText("LAYER", 0, 200);
        gc1.setFont(new Font(30));
        gc1.setFill(Color.RED);
        gc1.fillText("Hold a key", 0, 270);

        gc2.setFill(Color.BLUE);
        Pane root = new Pane(layer1, layer2);
        Scene scene = new Scene(root);

        primaryStage.setScene(scene);
        primaryStage.show();

        scene.setOnKeyPressed((evt) -> {
            gc2.clearRect(0, 0, layer2.getWidth(), layer2.getHeight());
            gc2.fillOval(Math.random() * layer2.getWidth(), Math.random() * layer2.getHeight(), 20, 30);
        });
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[class Rectangle {
//x position
int x;
//y position
int y;
//size for width
int xSize;
//size for height
int ySize;
//to draw on the canvas
GraphicsContext graphics;

//used to create a rectangle object
public Rectangle(GraphicsContext graphics, int x, int y, int xSize, int ySize) {
    //sets fields used for the rectangle
    this.x = x;
    this.y = y;
    this.xSize = xSize;
    this.ySize = ySize;
    this.graphics = graphics;

        graphics.fillRect(x, y, xSize, ySize);
}

    //used to get rid of rectangles
public void delete(Rectangle rectangle) {
    //erase the rectangle
    (rectangle.graphics).clearRect(rectangle.x, rectangle.y, rectangle.xSize, rectangle.ySize);

    //erase its fields
    rectangle.x = -1;
    rectangle.y = -1;
    rectangle.xSize = -1;
    rectangle.ySize = -1;
}

//will redraw the rectangle
public void reDraw(Rectangle rectangle) {
    (rectangle.graphics).fillRect(rectangle.x, rectangle.y, rectangle.xSize, rectangle.ySize);
}

//will move the rectangle
public void move(Rectangle rectangle, int x, int y) {
    (rectangle.graphics).clearRect(rectangle.x, rectangle.y, rectangle.xSize+1, rectangle.ySize+1);

        (rectangle.graphics).fillRect(x, y, rectangle.xSize, rectangle.ySize);
    }
    //redifine the fields
    this.x = x;
    this.y = y; } }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24808243" questionTitle="How to convert an observableset to an observablelist">
<Answer><![CDATA[package de.fluxparticle.lab;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.ObservableSet;
import javafx.collections.SetChangeListener;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.Collections;
import java.util.Random;
import java.util.TreeSet;

import static javafx.collections.FXCollections.observableSet;

/**
 * Created by sreinck on 23.01.17.
 */
public class Set2List extends Application {

    private final ObservableSet<Integer> setModel = observableSet(new TreeSet<Integer>());

    @Override
    public void start(Stage primaryStage) throws Exception {
        TableView<Integer> tableView = new TableView<>();
        addColumn(tableView, "Number");

        ObservableList<Integer> list = convertSetToList(setModel);
        tableView.setItems(list);

        Random rnd = new Random();
        scheduleTask(Duration.millis(1000), () -> setModel.add(rnd.nextInt(10)));

        primaryStage.setScene(new Scene(tableView, 800, 600));
        primaryStage.setTitle("Set2List");
        primaryStage.show();
    }

    private static void scheduleTask(Duration interval, Runnable task) {
        Timeline timeline = new Timeline(new KeyFrame(interval, event -> task.run()));
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
    }

    private static ObservableList<Integer> convertSetToList(ObservableSet<Integer> set) {
        ObservableList<Integer> list = FXCollections.observableArrayList(set);

        set.addListener((SetChangeListener<Integer>) change -> {
            if (change.wasAdded()) {
                Integer added = change.getElementAdded();
                int idx = -Collections.binarySearch(list, added)-1;
                list.add(idx, added);
            } else {
                Integer removed = change.getElementRemoved();
                int idx = Collections.binarySearch(list, removed);
                list.remove(idx);
            }
        });

        return list;
    }

    private static void addColumn(TableView<Integer> tableView, String text) {
        TableColumn<Integer, String> column = new TableColumn<>(text);
        column.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().toString()));
        tableView.getColumns().add(column);
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import com.sun.javafx.collections.VetoableListDecorator;

public class CustomObservableList<E> extends VetoableListDecorator<E> {

    public CustomObservableList(ObservableList<E> decorated) {
        super(decorated);
    }

    @Override
    protected void onProposedChange(List<E> toBeAdded, int... indexes) {
        for (E e : toBeAdded) {
            if (contains(e)) {
                throw new IllegalArgumentException("Duplicament element added");
            }
        }
    }
}

class Test {
    public static void main(String[] args) {
        Object o1 = new Object();
        Object o2 = new Object();

        Set<Object> set = new HashSet<Object>();
        set.add(o1);
        CustomObservableList<Object> list = new CustomObservableList<Object>(FXCollections.observableArrayList(set));
        list.add(o2);
        list.add(o1); // throw Exception
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24691472" questionTitle="Set proxy on JavaFX WebEngine?">
<Answer><![CDATA[public void changeProxySettings(String ip, String port) {

    StringBuffer output = new StringBuffer();

    System.setProperty("java.net.useSystemProxies", "true");

    String ENABLE_PROXY_CMD = " reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" \n" + "    /v ProxyEnable /t REG_DWORD /d 1 /f";

    String CHANGE_PROXY_CMD = "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" \n" + "    /v ProxyServer /t REG_SZ /d " + ip + ":" + port + "  /f";

    String DISABLE_PROXY_CMD = "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" \n" + "    /v ProxyEnable /t REG_DWORD /d 0 /f";

    Process processEnableProxy, processChangeProxy, processDisableProxy;
    try {
        processEnableProxy = Runtime.getRuntime().exec(ENABLE_PROXY_CMD);

        processEnableProxy.waitFor();//makes the current thread to wait until system settings are applied

        processChangeProxy = Runtime.getRuntime().exec(CHANGE_PROXY_CMD);

        processChangeProxy.waitFor();

        BufferedReader reader = new BufferedReader(new InputStreamReader(processEnableProxy.getInputStream()));

        String line = "";
        while ((line = reader.readLine()) != null) {
            output.append(line + "\n");
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

    System.out.println(output.toString());

}]]></Answer>
<Answer><![CDATA[class KludgeWebView extends WebView {
  String myProxy;
  String myProxyPort;
  String sysProxy;
  String sysProxyPort;

  KludgeWebView()
  {
    super();

    sysProxy = System.getProperty("http.proxy");
    sysProxyPort = System.getProperty("http.proxyPort");
  }

  public void load(String url)
  {
    useProxy();
    super.load(url);
    revertProxy();
  }

  public void useProxy()
  {
    System.setProperty("http.proxy",myProxy);
    System.setProperty("http.proxyPort", myProxyPort);
  }

  public void revertProxy()
  {
    System.setProperty("http.proxy",sysProxy);
    System.setProperty("http.proxyPort", sysProxyPort);    
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24630963" questionTitle="Java 8 NullPointerException in Collectors.toMap">
<Answer><![CDATA[public class LambdaUtilities {

  /**
   * In contrast to {@link Collectors#toMap(Function, Function)} the result map
   * may have null values.
   */
  public static <T, K, U, M extends Map<K, U>> Collector<T, M, M> toMapWithNullValues(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper) {
    return toMapWithNullValues(keyMapper, valueMapper, HashMap::new);
  }

  /**
   * In contrast to {@link Collectors#toMap(Function, Function, BinaryOperator, Supplier)}
   * the result map may have null values.
   */
  public static <T, K, U, M extends Map<K, U>> Collector<T, M, M> toMapWithNullValues(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, Supplier<Map<K, U>> supplier) {
    return new Collector<T, M, M>() {

      @Override
      public Supplier<M> supplier() {
        return () -> {
          @SuppressWarnings("unchecked")
          M map = (M) supplier.get();
          return map;
        };
      }

      @Override
      public BiConsumer<M, T> accumulator() {
        return (map, element) -> {
          K key = keyMapper.apply(element);
          if (map.containsKey(key)) {
            throw new IllegalStateException("Duplicate key " + key);
          }
          map.put(key, valueMapper.apply(element));
        };
      }

      @Override
      public BinaryOperator<M> combiner() {
        return (map1, map2) -> {
          map1.putAll(map2);
          return map1;
        };
      }

      @Override
      public Function<M, M> finisher() {
        return Function.identity();
      }

      @Override
      public Set<Collector.Characteristics> characteristics() {
        return Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));
      }

    };
  }

}]]></Answer>
<Answer><![CDATA[class Answer {
    private int id;
    private Optional<Boolean> answer;

    Answer() {
    }

    Answer(int id, Boolean answer) {
        this.id = id;
        this.answer = Optional.ofNullable(answer);
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the answer which can be a null value. Use {@link #getAnswerAsOptional()} instead.
     *
     * @return the answer which can be a null value
     */
    public Boolean getAnswer() {
        // What should be the default value? If we return null the callers will be at higher risk of having NPE
        return answer.orElse(null);
    }

    /**
     * Gets the optional answer.
     *
     * @return the answer which is contained in {@code Optional}.
     */
    public Optional<Boolean> getAnswerAsOptional() {
        return answer;
    }

    /**
     * Gets the answer or the supplied default value.
     *
     * @return the answer or the supplied default value.
     */
    public boolean getAnswerOrDefault(boolean defaultValue) {
        return answer.orElse(defaultValue);
    }

    public void setAnswer(Boolean answer) {
        this.answer = Optional.ofNullable(answer);
    }
}

public class Main {
    public static void main(String[] args) {
        List<Answer> answerList = new ArrayList<>();

        answerList.add(new Answer(1, true));
        answerList.add(new Answer(2, true));
        answerList.add(new Answer(3, null));

        // map with optional answers (i.e. with null)
        Map<Integer, Optional<Boolean>> answerMapWithOptionals = answerList.stream()
                .collect(Collectors.toMap(Answer::getId, Answer::getAnswerAsOptional));

        // map in which null values are removed
        Map<Integer, Boolean> answerMapWithoutNulls = answerList.stream()
                .filter(a -> a.getAnswerAsOptional().isPresent())
                .collect(Collectors.toMap(Answer::getId, Answer::getAnswer));

        // map in which null values are treated as false by default
        Map<Integer, Boolean> answerMapWithDefaults = answerList.stream()
                .collect(Collectors.toMap(a -> a.getId(), a -> a.getAnswerOrDefault(false)));

        System.out.println("With Optional: " + answerMapWithOptionals);
        System.out.println("Without Nulls: " + answerMapWithoutNulls);
        System.out.println("Wit Defaults: " + answerMapWithDefaults);
    }
}]]></Answer>
<Answer><![CDATA[class Answer {
    private int id;
    private Optional<String> answer;

    Answer(int id, String answer) {
        setId(id);
        setAnswer(answer);
    }
    // setter/getter for id

    public Optional<String> getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        setAnswer(Optional.ofNullable(answer));
    }

    public void setAnswer(Optional<String> answer) {
        this.answer = answer;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24611789" questionTitle="How to pass parameters to JavaFX application?">
<Answer><![CDATA[List<String> parameters;
int parameterIndex;
String parameter;

parameters =
  getParameters().getRaw();

for (parameterIndex = 0;
  parameterIndex < parameters.size();
  parameterIndex++) {

  parameter =
    parameters.get(
      parameterIndex);

  if (parameter.contains("configurationIndex")) {
    configurationIndex =
      Integer.valueOf(
        parameters.get(parameterIndex).
        split("=")[1]);
  }
}]]></Answer>
<Answer><![CDATA[@Override
public void init () throws Exception
{
  super.init ();

  Parameters parameters = getParameters ();

  Map<String, String> namedParameters = parameters.getNamed ();
  List<String> rawArguments = parameters.getRaw ();
  List<String> unnamedParameters = parameters.getUnnamed ();

  System.out.println ("\nnamedParameters -");
  for (Map.Entry<String, String> entry : namedParameters.entrySet ())
    System.out.println (entry.getKey () + " : " + entry.getValue ());

  System.out.println ("\nrawArguments -");
  for (String raw : rawArguments)
    System.out.println (raw);

  System.out.println ("\nunnamedParameters -");
  for (String unnamed : unnamedParameters)
    System.out.println (unnamed);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24587342" questionTitle="How to animate LinearGradient on JavaFX?">
<Answer><![CDATA[public class FilledRegion extends Region {
private final Random rand;
private ObjectProperty<Color> externalColor = new SimpleObjectProperty();
private ObjectProperty<Color> internalColor = new SimpleObjectProperty();
private Color oldExternalColor;
private Color oldInternalColor;
private Background bg;
private Timeline timeline;
private int duration;

public FilledRegion() {
    rand = new Random();
    this.setMinWidth(75);
    oldExternalColor = getRandomColor(AnimatedGradients.baseExternalColor, AnimatedGradients.externalDelta);
    oldInternalColor = getRandomColor(AnimatedGradients.baseInternalColor, AnimatedGradients.internalDelta);
    externalColor.set( oldExternalColor );
    internalColor.set( oldInternalColor );
    setBackground();
    internalColor.addListener((obs, oldColor, newColor) -> {
        setBackground();
    });
}

public void startAnimation() {
    timeline = new Timeline();
    createTimelineContent();
    timeline.setOnFinished(ActionEvent -> {
        createTimelineContent();
        timeline.play();
    });
    timeline.play();
}

private void createTimelineContent() {
    timeline.getKeyFrames().clear();
    duration = getRandomDuration();
    KeyFrame kf1 =
        new KeyFrame(Duration.ZERO,
            new KeyValue( externalColor, oldExternalColor ),
            new KeyValue( internalColor, oldInternalColor ));
    oldExternalColor = getRandomColor(AnimatedGradients.baseExternalColor, AnimatedGradients.externalDelta);
    oldInternalColor = getRandomColor(AnimatedGradients.baseInternalColor, AnimatedGradients.internalDelta);
    KeyFrame kf2 =
        new KeyFrame(new Duration(duration),
            new KeyValue( externalColor, oldExternalColor ),
            new KeyValue( internalColor, oldInternalColor ));
    timeline.getKeyFrames().addAll( kf1, kf2 );
}

private void setBackground() {
    bg = new Background(
        new BackgroundFill(
            new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE,
                new Stop[] { new Stop(0, externalColor.get()), new Stop(0.5, internalColor.get()), new Stop(1, externalColor.get())}
            ),
            new CornerRadii(0),
            new Insets(0, 0, 0, 0)
        )
    );
    this.setBackground(bg);
}

private Color getRandomColor(Color color, double delta) {
    int index = (int)( (color.getRed()+getRandomCoefficient(delta))*255 );
    int r = ( index > 255 ) ? 255 : ( (index < 0) ? 0 : index );
    index = (int)( (color.getGreen()+getRandomCoefficient(delta))*255 );
    int g = ( index > 255 ) ? 255 : ( (index < 0) ? 0 : index );
    index = (int)( (color.getBlue()+getRandomCoefficient(delta))*255 );
    int b = ( index > 255 ) ? 255 : ( (index < 0) ? 0 : index );
    return Color.rgb(r, g, b);
}

private double getRandomCoefficient(double delta) {
    return ( rand.nextDouble()*2 - 1 ) * delta;
}

private int getRandomDuration() {
    return (int)(( rand.nextDouble()*2 - 1 ) * AnimatedGradients.durationDelta * AnimatedGradients.baseDuration) + AnimatedGradients.baseDuration;
}}]]></Answer>
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Duration;



public class AnimatedGradient extends Application {
    @Override
    public void start(Stage primaryStage) {
        StackPane root = new StackPane();
        Label label = new Label("Animated gradient");
        root.getChildren().add(label);
        label.getStyleClass().add("animated-gradient");
        Scene scene = new Scene(root,400,400);
        scene.getStylesheets().add(getClass().getResource("animated-gradient.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();

        ObjectProperty<Color> baseColor = new SimpleObjectProperty<>();

        KeyValue keyValue1 = new KeyValue(baseColor, Color.RED);
        KeyValue keyValue2 = new KeyValue(baseColor, Color.YELLOW);
        KeyFrame keyFrame1 = new KeyFrame(Duration.ZERO, keyValue1);
        KeyFrame keyFrame2 = new KeyFrame(Duration.millis(500), keyValue2);
        Timeline timeline = new Timeline(keyFrame1, keyFrame2);

        baseColor.addListener((obs, oldColor, newColor) -> {
            label.setStyle(String.format("-gradient-base: #%02x%02x%02x; ", 
                    (int)(newColor.getRed()*255),
                    (int)(newColor.getGreen()*255),
                    (int)(newColor.getBlue()*255)));
        });

        timeline.setAutoReverse(true);
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();

    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24554762" questionTitle="JDK8: Getting back the JDK7 look for javadoc">
<Answer><![CDATA[@import "stylesheetOrig.css";

body {
   font-family: Arial, Helvetica, sans-serif;
   font-size: 12px; }

pre {
   font-family: monospace;
   font-size: 12px; }

code, tt, dt code, table tr td dt code  {
   font-family: monospace;
   font-size: 12px; }

.contentContainer .description dl dt, .contentContainer .details dl dt, .serializedFormContainer dl dt {
   font-size: 13px; }

.contentContainer .description dl dd, .contentContainer .details dl dd, .serializedFormContainer dl dd {
   margin-left: 20px;
   font-size: 12px;
   font-family: inherit; }

div.block {
   font-size: 12px;
   font-family: inherit; }

h4 {
   font-size: 15px; }

.memberSummary caption {
   padding-top: 0; }

div.summary th {
   border: 1px solid #9eadc0; }
div.summary td {
   border-left: 1px solid #9eadc0;
   border-right: 1px solid #9eadc0; }
div.summary th.colFirst,
div.summary td.colFirst {
   border-right: none; }
div.summary th.colLast,
div.summary td.colLast {
   border-left: none; }
div.summary table {
   border-bottom: 1px solid #9eadc0;
   margin-bottom: 15px; }
div.summary ul.blockList ul.blockList ul.blockList {
   margin-top: 20px; }
ul.blockList ul.blockList li.blockList,
ul.blockList ul.blockList ul.blockList li.blockList,
ul.blockList ul.blockList ul.blockListLast li.blockList {
   border: 1px solid #9eadc0; }
div.summary ul.blockList ul.blockList ul.blockList li.blockList h3,
div.details ul.blockList ul.blockList ul.blockList li.blockList h4,
div.details ul.blockList ul.blockList ul.blockListLast li.blockList h4 {
   border-bottom: 1px solid #9eadc0; }]]></Answer>
<Answer><![CDATA[<target name="_fixJDK8JavadocCSS" depends="_rawJavadoc" if="atLeastJDK8">
  <property name="file" value="build/api/stylesheet.css" />
  <echo>Fixing JDK 8 CSS in ${file}</echo>

  <!-- Tell that it's modified: -->
  <replaceregexp
      file="${file}" flags="gs" encoding="utf-8"
      match="/\* (Javadoc style sheet) \*/" replace="/\* \1 - JDK 8 usability fix regexp substitutions applied \*/"
  />

  <!-- Remove broken link: -->
  <replaceregexp
      file="${file}" flags="gs" encoding="utf-8"
      match="@import url\('resources/fonts/dejavu.css'\);\s*" replace=""
  />

  <!-- Font family fixes: -->
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="['&quot;]DejaVu Sans['&quot;]" replace="Arial"
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="['&quot;]DejaVu Sans Mono['&quot;]" replace="'Courier New'"
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="['&quot;]DejaVu Serif['&quot;]" replace="Arial"
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="(?&lt;=[\s,:])serif\b" replace="sans-serif"
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="(?&lt;=[\s,:])Georgia,\s*" replace=""
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="['&quot;]Times New Roman['&quot;],\s*" replace=""
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="(?&lt;=[\s,:])Times,\s*" replace=""
  />
  <replaceregexp
      file="${file}" flags="gsi" encoding="utf-8"
      match="(?&lt;=[\s,:])Arial\s*,\s*Arial\b" replace="Arial"
  />

  <!-- "Parameters:", "Returns:", "Throws:", "Since:", "See also:" etc. fixes: -->
  <property name="ddSelectorStart" value="(?:\.contentContainer\s+\.(?:details|description)|\.serializedFormContainer)\s+dl\s+dd\b.*?\{[^\}]*\b" />
  <property name="ddPropertyEnd" value="\b.+?;" />
  <!-- - Put back description (dd) indentation: -->
  <replaceregexp
      file="${file}" flags="gs" encoding="utf-8"
      match="(${ddSelectorStart})margin${ddPropertyEnd}" replace="\1margin: 5px 0 10px 20px;"
  />
  <!-- - No monospace font for the description (dd) part: -->
  <replaceregexp
      file="${file}" flags="gs" encoding="utf-8"
      match="(${ddSelectorStart})font-family${ddPropertyEnd}" replace="\1"
  />
</target>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24540630" questionTitle="How to draw a gradient over the scene on JavaFX?">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

    <?import java.lang.*?>
    <?import javafx.scene.control.*?>
    <?import javafx.scene.layout.*?>
    <?import javafx.scene.shape.*?>

    <StackPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="br.TestController">
        <children>
        <Pane fx:id="mainPane" prefHeight="98.0" prefWidth="600.0">
        <children>
            <TableView layoutX="-2.0" layoutY="99.0" prefHeight="300.0" prefWidth="600.0">
                <columns>
                    <TableColumn prefWidth="75.0" text="Nome" />
                    <TableColumn prefWidth="75.0" text="RG" />
                    <TableColumn prefWidth="75.0" text="CPF" />
                    <TableColumn prefWidth="75.0" text="Idade" />
                </columns>
            </TableView>
            <Label layoutX="162.0" layoutY="41.0" style="-fx-font-size: 32;" text="Informe o cliente" />
            <Line endX="500.0" layoutX="100.0" layoutY="98.0" startX="-100.0" />
        </children>
        </Pane>
        <Pane fx:id="overlayPane" opacity="0.8" prefHeight="200.0" prefWidth="200.0" />
    </children>
    </StackPane>]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.effect.BoxBlur;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.stage.Stage;

// java 8
// click on the scene to place a shaded lens effect over the scene.
public class ShadedScene extends Application {
    @Override
    public void start(Stage stage) {
        StackPane layout = new StackPane(
                new Label("Click to shade/unshade")
        );
        layout.setPrefSize(400, 300);

        Scene scene = new Scene(layout);
        makeShadeable(scene);

        stage.setScene(scene);
        stage.show();
    }

    /**
     * Applies a lens effect gradient to a scene root node.
     * The effect is kind of like a flashlight shining against the wall in the dark.
     *
     * For the gradient to be applied, the scene's root must be defined and a Pane
     * to which the effect can added and removed as a child.
     * 
     * @param scene the scene to have the effect applied.
     */
    private void makeShadeable(Scene scene) {
        if (scene.getRoot() == null ||
            !(scene.getRoot() instanceof Pane)) {
            return;
        }

        Pane shade = new Pane();
        RadialGradient shadePaint = new RadialGradient(
                0, 0, 0.5, 0.5, 1, true, CycleMethod.NO_CYCLE,
                new Stop(1, Color.BLACK),
                new Stop(0, Color.TRANSPARENT)
        );

        shade.setBackground(
                new Background(
                        new BackgroundFill(
                                shadePaint, null, new Insets(-10)
                        )
                )
        );

        // blur helps reduce visible banding of the radial gradient.
        shade.setEffect(new BoxBlur(5, 5, 3));

        Pane root = (Pane) scene.getRoot();
        scene.setOnMouseClicked(event -> {
            if (root.getChildren().contains(shade)) {
                root.getChildren().remove(shade);
            } else {
                root.getChildren().add(shade);
            }
        });
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24533556" questionTitle="How to make canvas Resizable in javaFX?">
<Answer><![CDATA[public class ResizableCanvas extends Canvas {

@Override
public double minHeight(double width)
{
    return 64;
}

@Override
public double maxHeight(double width)
{
    return 1000;
}

@Override
public double prefHeight(double width)
{
    return minHeight(width);
}

@Override
public double minWidth(double height)
{
    return 0;
}

@Override
public double maxWidth(double height)
{
    return 10000;
}

@Override
public boolean isResizable()
{
    return true;
}

@Override
public void resize(double width, double height)
{
    super.setWidth(width);
    super.setHeight(height);
    <paint>
}]]></Answer>
<Answer><![CDATA[/**
 * Tip 1: A canvas resizing itself to the size of
 *        the parent pane.
 */
public class Tip1ResizableCanvas extends Application {

    class ResizableCanvas extends Canvas {

        public ResizableCanvas() {
            // Redraw canvas when size changes.
            widthProperty().addListener(evt -> draw());
            heightProperty().addListener(evt -> draw());
        }

        private void draw() {
            double width = getWidth();
            double height = getHeight();

            GraphicsContext gc = getGraphicsContext2D();
            gc.clearRect(0, 0, width, height);

            gc.setStroke(Color.RED);
            gc.strokeLine(0, 0, width, height);
            gc.strokeLine(0, height, width, 0);
        }

        @Override
        public boolean isResizable() {
            return true;
        }

        @Override
        public double prefWidth(double height) {
            return getWidth();
        }

        @Override
        public double prefHeight(double width) {
            return getHeight();
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24491260" questionTitle="Mocking time in Java 8's java.time API">
<Answer><![CDATA[public class TimeMachine {

    private static Clock clock = Clock.systemDefaultZone();
    private static ZoneId zoneId = ZoneId.systemDefault();

    public static LocalDateTime now() {
        return LocalDateTime.now(getClock());
    }

    public static void useFixedClockAt(LocalDateTime date){
        clock = Clock.fixed(date.atZone(zoneId).toInstant(), zoneId);
    }

    public static void useSystemDefaultZoneClock(){
        clock = Clock.systemDefaultZone();
    }

    private static Clock getClock() {
        return clock ;
    }
}]]></Answer>
<Answer><![CDATA[import java.time.Clock;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import org.junit.Test;

public class MyServiceTest {
  // (...)
  private int year = 2017;  // Be this a specific 
  private int month = 2;    // date we need 
  private int day = 3;      // to simulate.

  @Test
  public void doExecuteTest() throws Exception {
    // (...) EasyMock stuff like mock(..), expect(..), replay(..) and whatnot

    MyService myService = new MyService();
    Clock mockClock =
      Clock.fixed(
        LocalDateTime.of(year, month, day, 0, 0).toInstant(OffsetDateTime.now().getOffset()),
        Clock.systemDefaultZone().getZone() // or java.util.TimeZone.getDefault().toZoneId()
      );
    myService.setClock(mockClock); // set it before calling the tested method

    myService.doExecute(); // calling tested method 

    myService.initDefaultClock(); // reset the clock to default right afterwards with our own previously created method

    // (...) remaining EasyMock stuff: verify(..) and assertEquals(..)
    }
  }]]></Answer>
<Answer><![CDATA[import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized

import java.time.Clock
import java.time.Instant

import static java.time.ZoneOffset.UTC
import static org.junit.runners.Parameterized.Parameters

@RunWith(Parameterized)
class TimeMachineTest {

    @Parameters(name = "{0} - {2}")
    static data() {
        [
            ["01:22:00", true,  "in interval"],
            ["23:59:59", false, "before"],
            ["06:01:00", false, "after"],
        ]*.toArray()
    }

    String time
    boolean expected

    TimeMachineTest(String time, boolean expected, String testName) {
        this.time = time
        this.expected = expected
    }

    @Test
    void test() {
        TimeMachine timeMachine = new TimeMachine()
        timeMachine.clock = Clock.fixed(Instant.parse("2010-01-01T${time}Z"), UTC)
        def result = timeMachine.isInInterval()
        assert result == expected
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24472170" questionTitle="How can we make text auto scroll continuious loop?">
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Scroll extends Application {

    @Override
    public void start(Stage primaryStage) {
        VBox vbox = new VBox();
        for (int i = 0; i < 30; i++)
            vbox.getChildren().add(new Text("line " + i));
        //add a copy of the first 12 lines that will be showing as wrapped
        for (int i = 0; i < 12; i++)
            vbox.getChildren().add(new Text("line " + i));

        ScrollPane sp = new ScrollPane(vbox);
        Scene scene = new Scene(sp, 300, 10*12);//guess height

        primaryStage.setScene(scene);
        primaryStage.show();
        //resize to exactly 12 lines
        double textHeight = vbox.getHeight() / vbox.getChildren().size();
        primaryStage.setHeight(textHeight*12+primaryStage.getHeight()-scene.getHeight());

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyValue kv = new KeyValue(sp.vvalueProperty(), sp.getVmax());
        KeyFrame kf = new KeyFrame(Duration.millis(5000), kv);
        timeline.getKeyFrames().addAll(kf);
        timeline.play();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Point3D;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.PointLight;
import javafx.scene.Scene;
import javafx.scene.SnapshotParameters;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Cylinder;
import javafx.scene.text.Text;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Scroll extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        //a vbox to take a picture of
        VBox vbox = new VBox();
        for (int i = 0; i < 30; i++)
            vbox.getChildren().add(new Text(" longer line of text " + i + " "));

        //take a sideways picture to fit the cylinder
        SnapshotParameters snapshotParameters = new SnapshotParameters();
        snapshotParameters.setTransform(new Rotate(90));
        WritableImage snapshot = vbox.snapshot(snapshotParameters, null);

        //make sideways cyl with image
        PhongMaterial material = new PhongMaterial();
        final Cylinder cylinder = new Cylinder(500, snapshot.getWidth(),30);
        material.setDiffuseMap(snapshot);
        cylinder.setMaterial(material);
        cylinder.setRotate(-90);
        cylinder.setTranslateX(snapshot.getWidth());
        cylinder.setTranslateY(500);

        //lights camera show
        final Group root = new Group();
        root.getChildren().add(cylinder);

        final Scene scene = new Scene(root, snapshot.getWidth()*2, cylinder.getRadius()*2, true);
        PointLight pointLight = new PointLight(Color.ALICEBLUE);
        pointLight.setTranslateX(150);
        pointLight.setTranslateY(500);
        pointLight.setTranslateZ(-1000);
        PerspectiveCamera cam = new PerspectiveCamera(false);
        scene.setCamera(cam);
        root.getChildren().addAll(pointLight, cam);

        primaryStage.setScene(scene);
        primaryStage.show();

        //I'll spin bob 
        Rotate rx = new Rotate();
        rx.setAxis(Rotate.Y_AXIS);
        cylinder.getTransforms().add(rx);
        cam.setRotationAxis(Point3D.ZERO);
        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        final KeyValue kv = new KeyValue(rx.angleProperty(), -360);
        final KeyFrame kf = new KeyFrame(Duration.millis(10000), kv);
        timeline.getKeyFrames().add(kf);
        timeline.play();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24471935" questionTitle="ressources mapping in spring mvc 3">
<Answer><![CDATA[<import resource="data-config.xml"/>

     <mvc:resources mapping="/assets/**" location="/WEB-INF/assets/" />

     <tx:annotation-driven transaction-manager="transactionManager"/>

     <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
        p:location="classpath:/META-INF/spring/jdbc.properties" />


     <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}" />  
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaAdapter" />
        <property name="persistenceUnitName" value="persistence" />

    </bean>

     <bean id="jpaAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
        <property name="generateDdl" value="true" />
        <property name="showSql" value="true" />
    </bean>

    <context:component-scan base-package="com.bd"  annotation-config="true" /> 

    <mvc:annotation-driven /> 


    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    </beans>]]></Answer>
<Answer><![CDATA[<beans ...>

    <import resource="data-config.xml"/>

    <context:component-scan base-package="com.bd" /> 
    <context:property-placeholder location="classpath:/META-INF/spring/jdbc.properties" />

    <mvc:annotation-driven />

    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="language" />
        </bean>
    </mvc:interceptors>

    <mvc:default-servlet-handler/> 
    <mvc:resources mapping="/assets/**" location="/WEB-INF/assets/" />

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}" />  
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaAdapter" />
        <property name="persistenceUnitName" value="persistence" />
    </bean>

     <bean id="jpaAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
        <property name="generateDdl" value="true" />
        <property name="showSql" value="true" />
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24466277" questionTitle="How to use the variable inside the foreach loop in Java8?">
<Answer><![CDATA[public static void main(String[] args) {
  final List<PromotionEntity> pestudents = ...your initialization...
  final Map<String, Integer> freqs = pestudents.stream().map(pe -> {
    final List<ClassAttendanceChild> attendancelist = session.createQuery(
           "from ClassAttendanceChild where attendanceadded='" + day + 
           "' and pid.pId='" + promotionEntity.getpId() + "'")
      .list();
    return attendancelist.isEmpty()? "nottaken" 
        : attendancelist.get(0).getStatus().equalsIgnoreCase("yes")?
            "present" : "absent";
  }).collect(toFrequencyMap());
  System.out.println(freqs);
}

static Integer zeroForNull(Integer i) { return i == null? 0 : i; }

static <K> Collector<K, Map<K, Integer>, Map<K, Integer>> toFrequencyMap() {
  return Collector.of(
      HashMap<K, Integer>::new,
      (acc, key) -> acc.compute(key, (x, count) -> zeroForNull(count) + 1),
      (acc, source) -> {
        source.forEach((key, sourceCount) ->
          acc.compute(key, (x,accCount) ->
            sourceCount + zeroForNull(accCount)));
        return acc;
      },
      Collector.Characteristics.UNORDERED);
}]]></Answer>
<Answer><![CDATA[AtomicInteger present = new AtomicInteger();
AtomicInteger absent = new AtomicInteger();
AtomicInteger nottaken = new AtomicInteger();

pestudents.parallelStream().forEach(promotionEntity -> {
        List<ClassAttendanceChild> attendancelist = session.createQuery("from ClassAttendanceChild where attendanceadded='" + day + "' and pid.pId='" + promotionEntity.getpId() + "'").list();
        if (!attendancelist.isEmpty()) {
             ClassAttendanceChild attendenceDetails = (ClassAttendanceChild) attendancelist.get(0);
              if (attendenceDetails.getStatus().equalsIgnoreCase("yes")) {
                  present.incrementAndGet();
                  System.out.println("present = " + present);
            } else {
                  absent.incrementAndGet();
                  System.out.println("Absent = " + Absent);
            }
        } else {
              nottaken.incrementAndGet();
              System.out.println("nottaken = " + nottaken);
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24426438" questionTitle="NumberFormat rounding issue with Java 8 only">
<Answer><![CDATA[case HALF_UP:
            if (digits[maximumDigits] >= '5') {
                // We should not round up if the rounding digits position is
                // exactly the last index and if digits were already rounded.
                if ((maximumDigits == (count - 1)) &&
                    (alreadyRounded))
                    return false;

                // Value was exactly at or was above tie. We must round up.
                return true;
            }
            break;
        case HALF_DOWN:
            if (digits[maximumDigits] > '5') {
                return true;
            } else if (digits[maximumDigits] == '5' ) {
                if (maximumDigits == (count - 1)) {
                    // The rounding position is exactly the last index.
                    if (allDecimalDigits || alreadyRounded)
                        /* FloatingDecimal rounded up (value was below tie),
                         * or provided the exact list of digits (value was
                         * an exact tie). We should not round up, following
                         * the HALF_DOWN rounding rule.
                         */
                        return false;
                    else
                        // Value was above the tie, we must round up.
                        return true;
                }

                // We must round up if it gives a non null digit after '5'.
                for (int i=maximumDigits+1; i<count; ++i) {
                    if (digits[i] != '0') {
                        return true;
                    }
                }
            }
            break;]]></Answer>
<Answer><![CDATA[import java.math.BigDecimal;

public class Test {
    public static void main(String... args) {
        round(6.2088, 3);
        round(6.2089, 3);
    }

    private static void round(double num, int numDecimal) {
        BigDecimal bd = new BigDecimal(num);
        BigDecimal bd2 = BigDecimal.valueOf(num);
        System.out.println("new BigDecimal: " + bd);
        System.out.println("BigDecimal.valueOf: " + bd2);
        System.out.printf("%." + numDecimal + "f%n", num);
        System.out.printf("%." + numDecimal + "f%n", bd);
        System.out.printf("%." + numDecimal + "f%n", bd2);
        System.out.printf("%f%n", round3(num));
        System.out.printf("%s%n", round3(num));
        System.out.printf("%f%n", bd.setScale(numDecimal, BigDecimal.ROUND_HALF_UP));
        System.out.printf("%s%n", bd.setScale(numDecimal, BigDecimal.ROUND_HALF_UP));
        System.out.printf("%f%n", bd2.setScale(numDecimal, BigDecimal.ROUND_HALF_UP));
        System.out.printf("%s%n", bd2.setScale(numDecimal, BigDecimal.ROUND_HALF_UP));
    }

    private static double round3(double num) {
        final double factor = 1e3;
        return Math.round(num * factor) / factor;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24389077" questionTitle="Declaring an object to itself using reflection">
<Answer><![CDATA[public class A {
    protected AA serviceVar;

    public A() {
        this.serviceVar = new AA();
    }

    public void methodThatDoesStuff() {
        System.out.println(serviceVar);
    }

    protected class AA {
        protected String message;

        public AA() {
            message = "AA";
        }

        public String toString() {
            return message;
        }
    }
}

public class B extends A {
    public B() {
        this.serviceVar = new BB();
    }

    public class BB extends AA {
        public BB() {
            this.message = "BB";
        }
    }
}

public class Test {
    public static void main(String[] args) {
        A a = new A();
        A b = new B();
        a.methodThatDoesStuff();
        b.methodThatDoesStuff();
    }
}]]></Answer>
<Answer><![CDATA[public class A{

    public void methodThatDoesStuff(){
        AA aa = getAA();
        // use aa
    }

    protected class AA{
        //does most of the stuff here
    }

    // Function to create AA instances. Subclasses
    // can override this.
    protected AA getAA() {
        return new AA();
    }
}

public class B extends A{
    public class BB extends AA{
    }

    @Override
    protected AA getAA() {
       return new BB();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24307259" questionTitle="How to limit max value in textfield with handler javafx">
<Answer><![CDATA[// fired by every text property change
textField.textProperty().addListener(
  (observable, oldValue, newValue) -> {
    // Your validation rules, anything you like
      // (! note 1 !) make sure that empty string (newValue.equals("")) 
      //   or initial text is always valid
      //   to prevent inifinity cycle
    // do whatever you want with newValue

    // If newValue is not valid for your rules
    ((StringProperty)observable).setValue(oldValue);
      // (! note 2 !) do not bind textProperty (textProperty().bind(someProperty))
      //   to anything in your code.  TextProperty implementation
      //   of StringProperty in TextFieldControl
      //   will throw RuntimeException in this case on setValue(string) call.
      //   Or catch and handle this exception.

    // If you want to change something in text
      // When it is valid for you with some changes that can be automated.
      // For example change it to upper case
    ((StringProperty)observable).setValue(newValue.toUpperCase());
  }
);]]></Answer>
<Answer><![CDATA[import java.util.concurrent.Callable;
import java.util.regex.Pattern;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.IndexRange;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class RestrictedTextFieldExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        final TextField restrictedTextField = new TextField() {

            private final Pattern numberPattern = Pattern.compile("\\d{1,3}");
            @Override
            public void replaceText(int start, int end, String text) {
                if (valid(start, end, text)) {
                    super.replaceText(start, end, text);
                }
            }

            @Override
            public void replaceSelection(String text) {
                IndexRange selectionRange = getSelection();
                if (valid(selectionRange.getStart(), selectionRange.getEnd(), text)) {
                    super.replaceSelection(text);
                }
            }


            private boolean valid(int start, int end, String text) {
                String attemptedText = 
                        getText().substring(0, start)
                        + text
                        + getText().substring(end);
                if (attemptedText.length() == 0) {
                    return true ;
                }
                if (numberPattern.matcher(attemptedText).matches()) {
                    int value = Integer.parseInt(attemptedText);
                    if (value >= 0 && value <= 127) {
                        return true ;
                    }
                }
                return false ;
            }
        };

        IntegerProperty value = new SimpleIntegerProperty();
        value.bind(Bindings.createIntegerBinding(new Callable<Integer>(){

            @Override
            public Integer call() throws Exception {
                String text = restrictedTextField.getText();
                if (text.isEmpty()) {
                    return 0 ;
                } else {
                    return Integer.parseInt(text);
                }
            }

        }, restrictedTextField.textProperty()));

        value.addListener(new ChangeListener<Number>() {

            @Override
            public void changed(ObservableValue<? extends Number> observable,
                    Number oldValue, Number newValue) {
                System.out.printf("Value changed from %d to %d%n", oldValue.intValue(), newValue.intValue());
            }

        });

        VBox root = new VBox(5);
        root.getChildren().add(restrictedTextField);
        Scene scene = new Scene(root, 250, 150);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24238858" questionTitle="Property sheet example with use of a PropertyEditor (ControlsFX)">
<Answer><![CDATA[public class CustomPropertyItem implements PropertySheet.Item {
    public static Map<String, Object> customDataMap = new LinkedHashMap<>();
    static {
        customDataMap.put("basic.My Text", "Same text"); // Creates a TextField in property sheet
        customDataMap.put("basic.My Date", LocalDate.of(2016, Month.JANUARY, 1)); // Creates a DatePicker
        customDataMap.put("misc.My Enum", SomeEnum.ALPHA); // Creates a ChoiceBox
        customDataMap.put("misc.My Boolean", false); // Creates a CheckBox
        customDataMap.put("misc.My Number", 500); // Creates a NumericField
        customDataMap.put("misc.My Color", Color.ALICEBLUE); // Creates a ColorPicker
    }

    private String key;
    private String category, name;

    public CustomPropertyItem(String key) 
    {
        this.key = key;
        String[] skey = key.split("\\.", 2);
        category = skey[0];
        name = skey[1];
    }

    @Override
    public Class<?> getType() {
        return customDataMap.get(key).getClass();
    }

    @Override
    public String getCategory() {
        return category;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public String getDescription() {
        // doesn't really fit into the map
        return null;
    }

    @Override
    public Object getValue() {
        return customDataMap.get(key);
    }

    @Override
    public void setValue(Object value) {
        customDataMap.put(key, value);
    }

    @Override
    public Optional<ObservableValue<? extends Object>> getObservableValue() {
        return Optional.empty();
    }

    @Override
    public Optional<Class<? extends PropertyEditor<?>>> getPropertyEditorClass() {
        // for an item of type number, specify the type of editor to use
        if (Number.class.isAssignableFrom(getType())) return Optional.of(NumberSliderEditor.class);

        // ... return other editors for other types

        return Optional.empty();
    }
}]]></Answer>
<Answer><![CDATA[public class PropertySheetExample extends VBox {
    private static Map<String, Object> customDataMap = new LinkedHashMap<>();
    static {
        customDataMap.put("Group 1#My Text", "Same text"); // Creates a TextField in property sheet
        customDataMap.put("Group 1#My Date", LocalDate.of(2000, Month.JANUARY, 1)); // Creates a DatePicker
        customDataMap.put("Group 2#My Enum Choice", SomeEnumType.EnumValue); // Creates a ChoiceBox
        customDataMap.put("Group 2#My Boolean", false); // Creates a CheckBox
        customDataMap.put("Group 2#My Number", 500); // Creates a NumericField
    }

    class CustomPropertyItem implements PropertySheet.Item {
        private String key;
        private String category, name;

        public CustomPropertyItem(String key) {
            this.key = key;
            String[] skey = key.split("#");
            category = skey[0];
            name = skey[1];
        }

        @Override
        public Class<?> getType() {
            return customDataMap.get(key).getClass();
        }

        @Override
        public String getCategory() {
            return category;
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public String getDescription() {
            return null;
        }

        @Override
        public Object getValue() {
            return customDataMap.get(key);
        }

        @Override
        public void setValue(Object value) {
            customDataMap.put(key, value);
        }
    }

    public PropertySheetExample {
        ObservableList<PropertySheet.Item> list = FXCollections.observableArrayList();
        for (String key : customDataMap.keySet())
            list.add(new CustomPropertyItem(key));

        PropertySheet propertySheet = new PropertySheet(list);
        VBox.setVgrow(propertySheet, Priority.ALWAYS);
        getChildren().add(propertySheet);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24231610" questionTitle="JavaFX: Red border for text field">
<Answer><![CDATA[import java.util.Collections;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class ValidatingTextFieldExample extends Application {

    @Override
    public void start(Stage primaryStage) {
        GridPane root = new GridPane();
        TextField nameTF = new TextField();
        TextField emailTF = new TextField();

        root.add(new Label("Name:"), 0, 0);
        root.add(nameTF, 1, 0);
        root.add(new Label("Email:"), 0, 1);
        root.add(emailTF, 1, 1);

        setUpValidation(nameTF);
        setUpValidation(emailTF);

        Scene scene = new Scene(root, 250, 150);
        scene.getStylesheets().add(getClass().getResource("text-field-red-border.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void setUpValidation(final TextField tf) { 
        tf.textProperty().addListener(new ChangeListener<String>() {

            @Override
            public void changed(ObservableValue<? extends String> observable,
                    String oldValue, String newValue) {
                validate(tf);
            }

        });

        validate(tf);
    }

    private void validate(TextField tf) {
        ObservableList<String> styleClass = tf.getStyleClass();
        if (tf.getText().trim().length()==0) {
            if (! styleClass.contains("error")) {
                styleClass.add("error");
            }
        } else {
            // remove all occurrences:
            styleClass.removeAll(Collections.singleton("error"));                    
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public void initialize(URL arg0, ResourceBundle arg1) {
    removeRed(tfFirstName);
    removeRed(tfLastName);
}

public void OKButtonClicked() {
    try{
        //also: call validation class here
        removeRed(tfFirstName);
        removeRed(tfLastName);
    } catch(ValidationException e) {
        setRed(tfFirstName);
        setRed(tfLastName);
    }

}

private void setRed(TextField tf) {
    ObservableList<String> styleClass = tf.getStyleClass();

    if(!styleClass.contains("tferror")) {
        styleClass.add("tferror");
    }
}


private void removeRed(TextField tf) {
    ObservableList<String> styleClass = tf.getStyleClass();
    styleClass.removeAll(Collections.singleton("tferror"));
}]]></Answer>
<Answer><![CDATA[import java.util.Collections;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.css.PseudoClass;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class ValidatingTextFieldExample extends Application {
private final PseudoClass errorClass = PseudoClass.getPseudoClass("error");
@Override
public void start(Stage primaryStage) {
    GridPane root = new GridPane();
    TextField nameTF = new TextField();
    TextField emailTF = new TextField();

    root.add(new Label("Name:"), 0, 0);
    root.add(nameTF, 1, 0);
    root.add(new Label("Email:"), 0, 1);
    root.add(emailTF, 1, 1);

    setUpValidation(nameTF);
    setUpValidation(emailTF);

    Scene scene = new Scene(root, 250, 150);
    scene.getStylesheets().add(getClass().getResource("text-field-red-border.css").toExternalForm());
    primaryStage.setScene(scene);
    primaryStage.show();
}

private void setUpValidation(final TextField tf) { 
    tf.textProperty().addListener(new ChangeListener<String>() {

        @Override
        public void changed(ObservableValue<? extends String> observable,
                String oldValue, String newValue) {
            validate(tf);
        }

    });

    validate(tf);
}

private void validate(TextField tf) {
    ObservableList<String> styleClass = tf.getStyleClass();
    if (tf.getText().trim().length()==0) {
        tf.pseudoClassStateChanged(errorClass, true);
    }
    else{
        tf.pseudoClassStateChanged(errorClass, false);
    }

}

public static void main(String[] args) {
    launch(args);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24183246" questionTitle="CompletableFuture swallows exceptions?">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.Supplier;

public class CompletableFutureTest
{
    public static void main(String[] args) 
        throws InterruptedException, ExecutionException
    {
        CompletableFuture<String> contentsCF = readPage();
        CompletableFuture<List<String>> linksCF = 
            contentsCF.thenApply(CompletableFutureTest::getLinks);

        CompletableFuture<Void> completionStage = linksCF.thenAccept(list -> 
        {
            String a = null;
            System.out.println(a.toString());
        });        

        // This will NOT cause an exception to be thrown, because
        // the part that was passed to "thenAccept" will NOT be
        // evaluated (it will be executed, but the exception will
        // not show up)
        List<String> result = linksCF.get();
        System.out.println("Got "+result);


        // This will cause the exception to be thrown and
        // wrapped into an ExecutionException. The cause
        // of this ExecutionException can be obtained:
        try
        {
            completionStage.get();
        }
        catch (ExecutionException e)
        {
            System.out.println("Caught "+e);
            Throwable cause = e.getCause();
            System.out.println("cause: "+cause);
        }

        // Alternatively, the exception may be handled by
        // the future directly:
        completionStage.exceptionally(e -> 
        { 
            System.out.println("Future exceptionally finished: "+e);
            return null; 
        });

        try
        {
            completionStage.get();
        }
        catch (Throwable t)
        {
            System.out.println("Already handled by the future "+t);
        }

    }

    private static List<String> getLinks(String s)
    {
        System.out.println("Getting links...");
        List<String> links = new ArrayList<String>();
        for (int i=0; i<10; i++)
        {
            links.add("link"+i);
        }
        dummySleep(1000);
        return links;
    }

    private static CompletableFuture<String> readPage()
    {
        return CompletableFuture.supplyAsync(new Supplier<String>() 
        {
            @Override
            public String get() 
            {
                System.out.println("Getting page...");
                dummySleep(1000);
                return "page";
            }
        });
    }

    private static void dummySleep(int ms)
    {
        try
        {
            Thread.sleep(ms);
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
            Thread.currentThread().interrupt();
        }
    }
}]]></Answer>
<Answer><![CDATA[/**
 * Make a future launch an exception in the accept.
 *
 * This will simulate:
 *  - a readPage service called asynchronously that return a String after 1 second
 *  - a call to that service that uses the result then throw (eventually) an exception, to be processed by the exceptionnaly method.
 *
 */
public class CompletableFutureTest2
{
    public static void main(String[] args)
        throws InterruptedException, ExecutionException
    {
        CompletableFuture<String> future = readPage();

        CompletableFuture<Void> future2 = future.thenAccept(page->{
            System.out.println(page);
            throw new IllegalArgumentException("unexpected exception");
        });

        future2.exceptionally(e->{
          e.printStackTrace(System.err);
          return null;
        });

    }

    private static CompletableFuture<String> readPage()
    {

      CompletableFuture<String> future = new CompletableFuture<>();
      new Thread(()->{
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
        }

        // FUTURE: normal process
        future.complete("page");

      }).start();
        return future;
    }


}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24117319" questionTitle="Javafx load a new fxml file into a scrollpane">
<Answer><![CDATA[package ic.ac.uk.relationshipvisualiser.app;

import java.io.FileInputStream;
import java.io.InputStream;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class tmpTest extends Application {

    public static void main(String[] args) {
        System.out.println("Start tmpTest");
        launch(args);
        System.out.println("Start tmpTest");
    }
    final Group m_root = new Group();

    @Override
    public void start(Stage primaryStage) throws Exception {
        InputStream stream = new FileInputStream("c:\\test.fxml");
        FXMLLoader l = new FXMLLoader();
        Group mG = (Group) l.load(stream);

        m_root.getChildren().add(mG);
        primaryStage.setScene(new Scene(m_root));
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[package ic.ac.uk.relationshipvisualiser.app;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class tmpTest extends Application {

    public static void main(String[] args) {
        System.out.println("Start tmpTest");
        launch(args);
        System.out.println("Start tmpTest");
    }

    final Group m_root = new Group();

    @Override
    public void start(Stage primaryStage) throws Exception {
        String sample_fxml = 
                "<?import javafx.scene.control.Label?>" +
                "<?import javafx.scene.Group?>" +
                "<Group xmlns:fx=\"http://javafx.com/fxml\">" +
                "       <Label fx:id=\"Name\" style=\"-fx-font-weight: bold;\" alignment=\"CENTER\">It worked</Label>" +        
                "</Group>";

        InputStream stream = new ByteArrayInputStream(sample_fxml.getBytes("UTF-8"));
        FXMLLoader l = new FXMLLoader();

        Group mG = (Group) l.load(stream);

        m_root.getChildren().add(mG);

        primaryStage.setScene(new Scene(m_root));

        primaryStage.show();

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24106046" questionTitle="Create JavaFX Image from PGM or TIFF as fast as possible">
<Answer><![CDATA[import java.io.DataInputStream;
import java.io.IOException;

import javax.imageio.IIOException;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class PGMTest extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws IOException {
        Label root = new Label();
        Image image;

        long start = System.currentTimeMillis();
        DataInputStream input = new DataInputStream(getClass().getResourceAsStream("/house.l.pgm"));
        try {
            image = readImage(input);
        } finally {
            input.close();
        }
        System.out.printf("Read image (%f x %f) in: %d ms\n", image.getWidth(), image.getHeight(), System.currentTimeMillis() - start);

        root.setGraphic(new ImageView(image));
        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Image readImage(final DataInputStream input) throws IOException {
        // First parse PGM header
        PNMHeader header = PNMHeader.parse(input);

        WritableImage image = new WritableImage(header.getWidth(), header.getHeight());
        PixelWriter pixelWriter = image.getPixelWriter();

        int maxSample = header.getMaxSample(); // Needed for normalization

//        PixelFormat<ByteBuffer> gray = PixelFormat.createByteIndexedInstance(createGrayColorMap());

        byte[] rowBuffer = new byte[header.getWidth()];
        for (int y = 0; y < header.getHeight(); y++) {
            input.readFully(rowBuffer); // Read one row

//            normalize(rowBuffer, maxSample);
//            pixelWriter.setPixels(0, y, width, 1, gray, rowBuffer, 0, width); // Gives weird NPE for me...

            // As I can't get setPixels to work, we'll set pixels directly
            // Performance is probably worse than setPixels, but it seems "ok"-ish
            for (int x = 0; x < rowBuffer.length; x++) {
                int gray = (rowBuffer[x] & 0xff) * 255 / maxSample; // Normalize [0...255]
                pixelWriter.setArgb(x, y, 0xff000000 | gray << 16 | gray << 8 | gray);
            }
        }

        return image;
    }

    private int[] createGrayColorMap() {
        int[] colors = new int[256];
        for (int i = 0; i < colors.length; i++) {
            colors[i] = 0xff000000 | i << 16 | i << 8 | i;
        }
        return colors;
    }

    /**
     * Simplified version of my PNMHeader parser
     */
    private static class PNMHeader {
        public static final int PGM = 'P' << 8 | '5';

        private final int width;
        private final int height;
        private final int maxSample;

        private PNMHeader(final int width, final int height, final int maxSample) {
            this.width = width;
            this.height = height;
            this.maxSample = maxSample;
        }

        public int getWidth() {
            return width;
        }

        public int getHeight() {
            return height;
        }

        public int getMaxSample() {
            return maxSample;
        }

        public static PNMHeader parse(final DataInputStream input) throws IOException {
            short type = input.readShort();

            if (type != PGM) {
                throw new IIOException(String.format("Only PGM binay (P5) supported for now: %04x", type));
            }

            int width = 0;
            int height = 0;
            int maxSample = 0;

            while (width == 0 || height == 0 || maxSample == 0) {
                String line = input.readLine(); // For PGM I guess this is ok...

                if (line == null) {
                    throw new IIOException("Unexpeced end of stream");
                }

                if (line.indexOf('#') >= 0) {
                    // Skip comment
                    continue;
                }

                line = line.trim();

                if (!line.isEmpty()) {
                    // We have tokens...
                    String[] tokens = line.split("\\s");
                    for (String token : tokens) {
                        if (width == 0) {
                            width = Integer.parseInt(token);
                        } else if (height == 0) {
                            height = Integer.parseInt(token);
                        } else if (maxSample == 0) {
                            maxSample = Integer.parseInt(token);
                        } else {
                            throw new IIOException("Unknown PBM token: " + token);
                        }
                    }
                }
            }

            return new PNMHeader(width, height, maxSample);
        }
    }
}]]></Answer>
<Answer><![CDATA[String pathToImage = "D:\\ABC.TIF";
ImageInputStream is;
try {
is = ImageIO.createImageInputStream(new File(pathToImage));  //read tiff using imageIO (JAI component)
if (is == null || is.length() == 0) {
    System.out.println("Image is null");
}

Iterator<ImageReader> iterator = ImageIO.getImageReaders(is);
if (iterator == null || !iterator.hasNext()) {
    throw new IOException("Image file format not supported by ImageIO: " + pathToImage);
}
ImageReader reader = (ImageReader) iterator.next();
reader.setInput(is);
int nbPages = reader.getNumImages(true);
BufferedImage bf = reader.read(0);   //1st page of tiff file
BufferedImage bf1 = reader.read(1);  //2nd page of tiff file
WritableImage wr = null;
WritableImage wr1 = null;
if (bf != null) {
    wr= SwingFXUtils.toFXImage(bf, null);   //convert bufferedImage (awt) into Writable Image(fx)
}
if (bf != null) {
    wr1= SwingFXUtils.toFXImage(bf1, null);  //convert bufferedImage (awt) into Writable Image(fx)
}
img_view1.setImage(wr);
img_view2.setImage(wr1);

} catch (FileNotFoundException ex) {
        Logger.getLogger(Image_WindowController.class.getName()).log(Level.SEVERE, null, ex);
} catch (IOException ex) {
        Logger.getLogger(Image_WindowController.class.getName()).log(Level.SEVERE, null, ex);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24082063" questionTitle="Chessboard with automatic resizing">
<Answer><![CDATA[public class ResizeChessboard extends Application {
    GridPane root = new GridPane();
    final int size = 8;

    public void start(Stage primaryStage) {
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                Rectangle square = new Rectangle();
                Color color;
                if ((row + col) % 2 == 0) color = Color.WHITE;
                else color = Color.BLACK;
                square.setFill(color);
                root.add(square, col, row);
                square.widthProperty().bind(root.widthProperty().divide(size));
                square.heightProperty().bind(root.heightProperty().divide(size));
            }
        }
        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.control.Control;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Chessboard extends Application {

    @Override
    public void start(Stage primaryStage) {
        GridPane root = new GridPane();
        final int size = 8 ;
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col ++) {
                StackPane square = new StackPane();
                String color ;
                if ((row + col) % 2 == 0) {
                    color = "white";
                } else {
                    color = "black";
                }
                square.setStyle("-fx-background-color: "+color+";");
                root.add(square, col, row);
            }
        }
        for (int i = 0; i < size; i++) {
            root.getColumnConstraints().add(new ColumnConstraints(5, Control.USE_COMPUTED_SIZE, Double.POSITIVE_INFINITY, Priority.ALWAYS, HPos.CENTER, true));
            root.getRowConstraints().add(new RowConstraints(5, Control.USE_COMPUTED_SIZE, Double.POSITIVE_INFINITY, Priority.ALWAYS, VPos.CENTER, true));
        }
        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24010109" questionTitle="Java 8 stream reverse order">
<Answer><![CDATA[public static <T> Stream<T> reverse(Stream<T> stream) {
    Objects.requireNonNull(stream, "stream");

    class ReverseSpliterator implements Spliterator<T> {
        private Spliterator<T> spliterator;
        private final Deque<T> deque = new ArrayDeque<>();

        private ReverseSpliterator(Spliterator<T> spliterator) {
            this.spliterator = spliterator;
        }

        @Override
        @SuppressWarnings({"StatementWithEmptyBody"})
        public boolean tryAdvance(Consumer<? super T> action) {
            while(spliterator.tryAdvance(deque::addFirst));
            if(!deque.isEmpty()) {
                action.accept(deque.remove());
                return true;
            }
            return false;
        }

        @Override
        public Spliterator<T> trySplit() {
            // After traveling started the spliterator don't contain elements!
            Spliterator<T> prev = spliterator.trySplit();
            if(prev == null) {
                return null;
            }

            Spliterator<T> me = spliterator;
            spliterator = prev;
            return new ReverseSpliterator(me);
        }

        @Override
        public long estimateSize() {
            return spliterator.estimateSize();
        }

        @Override
        public int characteristics() {
            return spliterator.characteristics();
        }

        @Override
        public Comparator<? super T> getComparator() {
            Comparator<? super T> comparator = spliterator.getComparator();
            return (comparator != null) ? comparator.reversed() : null;
        }

        @Override
        public void forEachRemaining(Consumer<? super T> action) {
            // Ensure that tryAdvance is called at least once
            if(!deque.isEmpty() || tryAdvance(action)) {
                deque.forEach(action);
            }
        }
    }

    return StreamSupport.stream(new ReverseSpliterator(stream.spliterator()), stream.isParallel());
}]]></Answer>
<Answer><![CDATA[import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;

import org.hamcrest.Matchers;
import org.junit.Test;

import com.google.common.collect.Lists;

public class TestReverseCollector {
    private final Object t1 = new Object();
    private final Object t2 = new Object();
    private final Object t3 = new Object();
    private final Object t4 = new Object();

    private final Collector<Object, List<Object>, List<Object>> inReverse = inReverse();
    private final Supplier<List<Object>> supplier = inReverse.supplier();
    private final BiConsumer<List<Object>, Object> accumulator = inReverse.accumulator();
    private final Function<List<Object>, List<Object>> finisher = inReverse.finisher();
    private final BinaryOperator<List<Object>> combiner = inReverse.combiner();

    @Test public void associative() {
        final List<Object> a1 = supplier.get();
        accumulator.accept(a1, t1);
        accumulator.accept(a1, t2);
        final List<Object> r1 = finisher.apply(a1);

        final List<Object> a2 = supplier.get();
        accumulator.accept(a2, t1);
        final List<Object> a3 = supplier.get();
        accumulator.accept(a3, t2);
        final List<Object> r2 = finisher.apply(combiner.apply(a2, a3));

        assertThat(r1, Matchers.equalTo(r2));
    }

    @Test public void identity() {
        final List<Object> a1 = supplier.get();
        accumulator.accept(a1, t1);
        accumulator.accept(a1, t2);
        final List<Object> r1 = finisher.apply(a1);

        final List<Object> a2 = supplier.get();
        accumulator.accept(a2, t1);
        accumulator.accept(a2, t2);
        final List<Object> r2 = finisher.apply(combiner.apply(a2, supplier.get()));

        assertThat(r1, equalTo(r2));
    }

    @Test public void reversing() throws Exception {
        final List<Object> a2 = supplier.get();
        accumulator.accept(a2, t1);
        accumulator.accept(a2, t2);

        final List<Object> a3 = supplier.get();
        accumulator.accept(a3, t3);
        accumulator.accept(a3, t4);

        final List<Object> r2 = finisher.apply(combiner.apply(a2, a3));

        assertThat(r2, contains(t4, t3, t2, t1));
    }

    public static <T> Collector<T, List<T>, List<T>> inReverse() {
        return Collector.of(
            ArrayList::new,
            (l, t) -> l.add(t),
            (l, r) -> {l.addAll(r); return l;},
            Lists::<T>reverse);
    }
}]]></Answer>
<Answer><![CDATA[import static java.lang.Integer.MAX_VALUE;
import static org.junit.Assert.*;

@Test
public void testReverseStream_emptyArrayCreatesEmptyStream() {
    Assert.assertEquals(0, reverseStream(new double[0]).count());
}

@Test
public void testReverseStream_singleElementCreatesSingleElementStream() {
    Assert.assertEquals(1, reverseStream(new double[1]).count());
    final double[] singleElementArray = new double[] { 123.4 };
    assertArrayEquals(singleElementArray, reverseStream(singleElementArray).toArray(), EXACT_MATCH);
}

@Test
public void testReverseStream_multipleElementsAreStreamedInReversedOrder() {
    final double[] arr = new double[] { 1d, 2d, 3d };
    final double[] revArr = new double[] { 3d, 2d, 1d };
    Assert.assertEquals(arr.length, reverseStream(arr).count());
    Assert.assertArrayEquals(revArr, reverseStream(arr).toArray(), EXACT_MATCH);
}

@Test
public void testCountdownFrom_returnsAllElementsFromTopToZeroInReverseOrder() {
    assertArrayEquals(new int[] { 4, 3, 2, 1, 0 }, countdownFrom(4).toArray());
}

@Test
public void testCountdownFrom_countingDownStartingWithZeroOutputsTheNumberZero() {
    assertArrayEquals(new int[] { 0 }, countdownFrom(0).toArray());
}

@Test
public void testCountdownFrom_doesNotChokeOnIntegerMaxValue() {
    assertEquals(true, countdownFrom(MAX_VALUE).anyMatch(x -> x == MAX_VALUE));
}

@Test
public void testCountdownFrom_givesZeroLengthCountForNegativeValues() {
    assertArrayEquals(new int[0], countdownFrom(-1).toArray());
    assertArrayEquals(new int[0], countdownFrom(-4).toArray());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23956861" questionTitle="How to span columns of a gridpane manually in javafx?">
<Answer><![CDATA[public class Main extends Application {

@Override
public void start(Stage primaryStage) throws Exception {
    Group root = new Group();
    primaryStage.setTitle("Hello World");
    Scene scene = new Scene(root, 650, 550);



    VBox zoneTopLeft = createBaseContainer(300,300);
    VBox zoneTopRight = createBaseContainer(300,300);
    VBox zoneBottomLeft = createBaseContainer(200,200);
    VBox zoneBottomRight = createBaseContainer(400,200);


    GridPane page=new GridPane();
    page.setHgap(10);
    page.setVgap(10);
    page.add(zoneTopLeft, 0, 0);
    page.setColumnSpan(zoneTopLeft, 2);
    page.add(zoneTopRight, 2, 0);
    page.setColumnSpan(zoneTopRight,2);
    page.add(zoneBottomLeft, 0, 1);
    page.add(zoneBottomRight, 1, 1);
    page.setColumnSpan(zoneBottomRight,3);

    root.getChildren().addAll(page);


    primaryStage.setScene(scene);
    primaryStage.show();


}

private VBox createBaseContainer(double width,double height) {
    VBox base = new VBox(); // box
    base.setPrefWidth(width);
   base.setPrefHeight(height);
    base.setStyle("-fx-border-width: 1;-fx-border-color: red");
    //  base.prefWidthProperty().bind(scene.widthProperty());

    BorderPane top = new BorderPane(); // top area of base
    top.prefWidthProperty().bind(base.prefWidthProperty());
    top.setPrefHeight(33);
    top.setLeft(setBaseTitle());
    top.setRight(setBaseButtons());
    top.setStyle("-fx-border-width: 1;-fx-border-color: blue");

    StackPane bottom = new StackPane(); // bottom are of base, content keeper

    base.getChildren().addAll(top, bottom);
    return base;
}


private Node setBaseButtons() {
    return new HBox();
}

private Node setBaseTitle() {

    return new Label();
}


public static void main(String[] args) {
    launch(args);
}]]></Answer>
<Answer><![CDATA[Node topLeft ;
Node topRight ;
Node bottomLeft ;
Node bottomRight ;

GridPane page = new GridPane();
// page.add(Node, colIndex, rowIndex, colSpan, rowSpan):
page.add(topLeft, 0, 0, 2, 1);
page.add(topRight, 2, 0, 1, 1);
page.add(bottomLeft, 0, 2, 1, 1);
page.add(bottomRight, 1, 1, 2, 1);


ColumnConstraints col1Constraints = new ColumnConstraints();
col1Constraints.setPercentWidth(40);
ColumnConstraints col2Constraints = new ColumnConstraints();
col2Constraints.setPercentWidth(10);
ColumnConstraints col3Constraints = new ColumnConstraints();
col3Constraints.setPercentWidth(50);
page.getColumnConstraints().addAll(col1Constraints, col2Constraints, col3Constraints);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23886879" questionTitle="Adding different buttons to TableView">
<Answer><![CDATA[private void addAddButton() {
        Button b = new Button(" + ");
        final Item item = new Item(="<new>",
                "<new>", b);
        b.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                Button deleteButton = new Button(" - ");
                deleteButton.setOnAction(new EventHandler<ActionEvent>() {
                    @Override
                    public void handle(ActionEvent t) {
                        selectedItems.remove(item); // a predefined list of selected items
                        myTable.getItems().clear();
                        for (Item current : selectedItems) {
                            myTable.getItems().add(current);
                        }
                        addAddButton();
                    }
                });
                item.setButton(deleteButton);
                selectedItems.add(item);

                myTable.getItems().clear();
                for (Item current : selectedItems) {
                    myTable.getItems().add(current);
                }
                addAddButton();
            }
        });

        tableAvailabilites.getItems().add(ga1);
    }]]></Answer>
<Answer><![CDATA[@FXML
TableView myTable;

@Override
public void initialize(URL url, ResourceBundle rb) {
    TableColumn<Item, String> firstColumn = new TableColumn<>("First Column");
    firstColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Item, String>, ObservableValue<String>>() {
        @Override
        public ObservableValue<String> call(TableColumn.CellDataFeatures<Item, String> p) {
            return new ReadOnlyObjectWrapper(p.getValue().column1);
        }
    });

    TableColumn<Item, String> secondColumn = new TableColumn<>("Second Column");
    secondColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Item, String>, ObservableValue<String>>() {
        @Override
        public ObservableValue<String> call(TableColumn.CellDataFeatures<Item, String> p) {
            return new ReadOnlyObjectWrapper(p.getValue().column2);
        }
    });

    TableColumn<Item, Button> buttonCol = new TableColumn<>("ButtonColumn");
    buttonCol.setSortable(false);
    buttonCol.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Item, Button>, ObservableValue<Button>>() {
        @Override
        public ObservableValue<Button> call(TableColumn.CellDataFeatures<Item, Button> features) {
            return new ReadOnlyObjectWrapper(features.getValue().button);
        }
    });
    myTable.getColumns().add(buttonCol);
    myTable.getColumns().add(firstColumn);
    myTable.getColumns().add(secondColumn);
    myTable.getItems().add(new Item("Test 1", "Test 1", new Button("Test 1"), new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent t) {
            //ON ACTION CODE HERE
            System.out.println("TEST 1 CLICKED!");
        }
    }));
    myTable.getItems().add(new Item("Test 2", "Test 2", new Button("Test 2"), new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent t) {
            //ON ACTION CODE HERE
            System.out.println("TEST 2 BUTTON CLICKED");
        }
    }));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23872477" questionTitle="Change the color of a single data cell in a TableView">
<Answer><![CDATA[reader.getSampleController().xmlMatch.setCellFactory(new Callback<TableColumn<String, String>, TableCell<String, String>>() {
        @Override
        public TableCell call(TableColumn p) {
            return new TableCell<String, String>() {
                @Override
                public void updateItem(final String item, final boolean empty) {
                    super.updateItem(item, empty);
                    if (item != null) {
                        setText(item);
                        setAlignment(Pos.CENTER);
                        //setStyle("");

                        if (item.equals("OK")) {
                            setStyle("-fx-text-fill: green; -fx-font-weight:bold;");
                        }
                        else if (item.equals("N/A")) {
                            setStyle("-fx-text-fill: black; -fx-font-weight:bold;");
                        }
                        else if (item.equals("KO") ) {
                            setStyle("-fx-text-fill: red; -fx-font-weight:bold;");
                        }
                        else setStyle("");


                    } else {
                        setText(null);
                    }
                }
            };


        }
    });]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.util.Callback;

public class TableColors extends Application {

    @Override
    public void start(Stage primaryStage) {
        TableView<String> tv = new TableView<>();
        TableColumn<String, String> tcName = new TableColumn("name");
        ObservableList<String> items = FXCollections.observableArrayList("OK","KO","N/A","Normal");
        tv.setItems(items);
        tv.getColumns().add(tcName);
        tcName.setCellValueFactory((p) -> new SimpleStringProperty(p.getValue()));
        tcName.setCellFactory(new Callback<TableColumn<String, String>, TableCell<String, String>>() {
            @Override
            public TableCell call(TableColumn p) {
                return new TableCell<String, String>() {
                    @Override
                    public void updateItem(final String item, final boolean empty) {
                        super.updateItem(item, empty);//*don't forget!
                        if (item != null) {
                            setText(item);
                            setAlignment(Pos.CENTER);
                            if (item.equals("OK")) {
                                setStyle("-fx-text-fill: green; -fx-font-weight:bold;");
                            }
                            else if (item.equals("N/A")) {
                                setStyle("-fx-text-fill: black; -fx-font-weight:bold;");
                            }
                            else if (item.equals("KO")) {
                                setStyle("-fx-text-fill: red; -fx-font-weight:bold;");
                            } 
                            else setStyle("");
                        } else {
                            setText(null);
                        }
                    }
                };
            }
        });

        tv.setOnMouseClicked((MouseEvent event) -> {
            if (event.getButton()==MouseButton.PRIMARY) items.add("OK");
            else items.add("KO");
        });

        Scene scene = new Scene(tv, 300, 250);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23837561" questionTitle="JPA 2.0 many-to-many with extra column">
<Answer><![CDATA[@Entity
public class Employer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @OneToMany(mappedBy = "employer")
    private List<EmployerDeliveryAgent> deliveryAgentAssoc;

    // other properties and getters and setters
}

@Entity
public class DeliveryAgent {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @OneToMany(mappedBy = "deliveryAgent")
    private List<EmployerDeliveryAgent> employerAssoc;

    // other properties and getters and setters
}]]></Answer>
<Answer><![CDATA[@Entity
public class Employee {
  @Id
  private long id;
  ...
  @OneToMany(mappedBy="employee")
  private List<ProjectAssociation> projects;
  ...
}

@Entity
public class Project {

  @PersistenceContext
  EntityManager em;

  @Id
  private long id;
  ...
  @OneToMany(mappedBy="project")
  private List<ProjectAssociation> employees;
  ...
  // Add an employee to the project.
  // Create an association object for the relationship and set its data.
  public void addEmployee(Employee employee, boolean teamLead) {
    ProjectAssociation association = new ProjectAssociation();
    association.setEmployee(employee);
    association.setProject(this);
    association.setEmployeeId(employee.getId());
    association.setProjectId(this.getId());
    association.setIsTeamLead(teamLead);
    em.persist(association);

    this.employees.add(association);
    // Also add the association object to the employee.
    employee.getProjects().add(association);
  }
}

@Entity
@Table(name="PROJ_EMP")
@IdClass(ProjectAssociationId.class)
public class ProjectAssociation {
  @Id
  private long employeeId;
  @Id
  private long projectId;
  @Column(name="IS_PROJECT_LEAD")
  private boolean isProjectLead;
  @ManyToOne
  @JoinColumn(name = "employeeId", updatable = false, insertable = false, referencedColumnName = "id")

  private Employee employee;
  @ManyToOne
  @JoinColumn(name = "projectId", updatable = false, insertable = false, referencedColumnName = "id")

  private Project project;
  ...
}

public class ProjectAssociationId implements Serializable {

  private long employeeId;

  private long projectId;
  ...

  public int hashCode() {
    return (int)(employeeId + projectId);
  }

  public boolean equals(Object object) {
    if (object instanceof ProjectAssociationId) {
      ProjectAssociationId otherId = (ProjectAssociationId) object;
      return (otherId.employeeId == this.employeeId) && (otherId.projectId == this.projectId);
    }
    return false;
  }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23815430" questionTitle="Dynamically adding data in Hashmap to TableView in JavaFX">
<Answer><![CDATA[import java.util.Map;
import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.MapChangeListener;
import javafx.collections.ObservableMap;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.converter.NumberStringConverter;

public class MapTable extends Application {

    @Override
    public void start(Stage primaryStage) {
        final ObservableMap<String, Number> obsMap = FXCollections.observableHashMap();
        for (int i = 0; i < 3; i++)  obsMap.put("key "+i, i*10d);

        final TableView<ObservableMap.Entry<String, Number>> tv = new TableView(FXCollections.observableArrayList(obsMap.entrySet()));
        tv.setEditable(true);

        obsMap.addListener((MapChangeListener.Change<? extends String, ? extends Number> change) -> {
            tv.setItems(FXCollections.observableArrayList(obsMap.entrySet()));
        });

        TableColumn<ObservableMap.Entry<String, Number>,String> keyCol = new TableColumn<>("key");
        TableColumn<ObservableMap.Entry<String, Number>,Number> priceCol = new TableColumn<>("price");
        tv.getColumns().addAll(keyCol,priceCol);

        keyCol.setCellValueFactory((p) -> {
            return new SimpleStringProperty(p.getValue().getKey());
        });

        keyCol.setCellFactory(TextFieldTableCell.forTableColumn());
        keyCol.setOnEditCommit((TableColumn.CellEditEvent<Map.Entry<String,Number>, String> t) -> {
            final String oldKey = t.getOldValue();
            final Number oldPrice = obsMap.get(oldKey);
            obsMap.remove(oldKey);
            obsMap.put(t.getNewValue(),oldPrice);
        });

        priceCol.setCellValueFactory((p) -> {
            return new ReadOnlyObjectWrapper<>(p.getValue().getValue());
        });

        priceCol.setCellFactory(TextFieldTableCell.forTableColumn(new NumberStringConverter()));
        priceCol.setOnEditCommit((TableColumn.CellEditEvent<Map.Entry<String,Number>, Number> t) -> {
            obsMap.put(t.getTableView().getItems().get(t.getTablePosition().getRow()).getKey(),//key
                       t.getNewValue());//val);
        });

        Button btn1 = new Button();
        btn1.setText("Add data");
        btn1.setOnAction((ActionEvent event) -> {
            obsMap.put("hi",100);
        });

        Button btn2 = new Button();
        btn2.setText("verify data");
        btn2.setOnAction((ActionEvent event) -> {
            for (Map.Entry<String,Number> me : obsMap.entrySet())
                System.out.println("key "+me.getKey()+" val "+me.getValue());
        });

        VBox root = new VBox(tv,btn1,btn2);
        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Map Table test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }



    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[public class Demo {

 public static void main(String[] args) {

     // Use Java Collections to create the List.
     Map<String,String> map = new HashMap<String,String>();

     // Now add observability by wrapping it with ObservableList.
    ObservableMap<String,String> observableMap = FXCollections.observableMap(map);
    observableMap.addListener(new MapChangeListener() {
        @Override
        public void onChanged(MapChangeListener.Change change) {
            System.out.println("Detected a change! ");
        }
    });

    // Changes to the observableMap WILL be reported.
    observableMap.put("key 1","value 1");
    System.out.println("Size: "+observableMap.size());

    // Changes to the underlying map will NOT be reported.
    map.put("key 2","value 2");
    System.out.println("Size: "+observableMap.size());

  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23773024" questionTitle="Functional style of Java 8's Optional.ifPresent and if-not-Present?">
<Answer><![CDATA[public class OptionalEx {
    private boolean isPresent;

    private OptionalEx(boolean isPresent) {
        this.isPresent = isPresent;
    }

    public void orElse(Runnable runner) {
        if (!isPresent) {
            runner.run();
        }
    }

    public static <T> OptionalEx ifPresent(Optional<T> opt, Consumer<? super T> consumer) {
        if (opt.isPresent()) {
            consumer.accept(opt.get());
            return new OptionalEx(true);
        }
        return new OptionalEx(false);
    }
}]]></Answer>
<Answer><![CDATA[public class Opt<T> {

    private final Optional<T> optional;

    private Opt(final Optional<T> theOptional) {
        this.optional = theOptional;
    }

    public static <T> Opt<T> of(final T value) {
        return new Opt<>(Optional.of(value));
    }

    public static <T> Opt<T> of(final Optional<T> optional) {
        return new Opt<>(optional);
    }

    public static <T> Opt<T> ofNullable(final T value) {
        return new Opt<>(Optional.ofNullable(value));
    }

    public static <T> Opt<T> empty() {
        return new Opt<>(Optional.empty());
    }

    private final BiFunction<Consumer<T>, Runnable, Void> ifPresent = (present, notPresent) -> {
        if (this.optional.isPresent()) {
            present.accept(this.optional.get());
        } else {
            notPresent.run();
        }
        return null;
    };

   private final BiFunction<Runnable, Consumer<T>, Void> ifNotPresent = (notPresent, present) -> {
        if (!this.optional.isPresent()) {
            notPresent.run();
        } else {
            present.accept(this.optional.get());
        }
        return null;
    };

    public Fkt<Consumer<T>, Fkt<Runnable, Void>> ifPresent() {
        return Opt.curry(this.ifPresent);
    }

    public Fkt<Runnable, Fkt<Consumer<T>, Void>> ifNotPresent() {
        return Opt.curry(this.ifNotPresent);
    }

    private static <X, Y, Z> Fkt<X, Fkt<Y, Z>> curry(final BiFunction<X, Y, Z> function) {
        return (final X x) -> (final Y y) -> function.apply(x, y);
    }
}]]></Answer>
<Answer><![CDATA[public class OptionalConsumer<T> {
    private Optional<T> optional;

    private OptionalConsumer(Optional<T> optional) {
        this.optional = optional;
    }

    public static <T> OptionalConsumer<T> of(Optional<T> optional) {
        return new OptionalConsumer<>(optional);
    }

    public OptionalConsumer<T> ifPresent(Consumer<T> c) {
        optional.ifPresent(c);
        return this;
    }

    public OptionalConsumer<T> ifNotPresent(Runnable r) {
        if (!optional.isPresent())
            r.run();
        return this;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23710164" questionTitle="Drag context menu with Parent">
<Answer><![CDATA[public class MainApp2 extends Application
{
    @Override
    public void start( Stage stage ) throws Exception
    {
        stage.setTitle( "Validation Demo" );
        BorderPane borderPane = new BorderPane();

        borderPane.setCenter( loadLoginScreen() );
        Scene scene = new Scene( borderPane, 700, 500 );
        scene.getStylesheets().add(MainApp.class.getResource("/styles/context.css").toExternalForm());
        stage.setScene( scene );
        stage.show();
    }

    public static void main( String[] args )
    {
        launch( args );
    }

    private GridPane loadLoginScreen()
    {
        GridPane grid = new GridPane();
        grid.setAlignment( Pos.CENTER );
        grid.setHgap( 10 );
        grid.setVgap( 10 );
        grid.setPadding( new Insets( 25, 25, 25, 25 ) );

        Text scenetitle = new Text( "Welcome" );
        scenetitle.setFont( Font.font( "Tahoma", FontWeight.NORMAL, 20 ) );
        grid.add( scenetitle, 0, 0, 2, 1 );

        Label userName = new Label( "User Name:" );
        grid.add( userName, 0, 1 );

        final TextField userTextField = new TextField();
        grid.add( userTextField, 1, 1 );

        final Label usernameValidator = new Label("Please enter Username");
        usernameValidator.setStyle( "-fx-background-color:#FCFBBD; -fx-padding: 5; -fx-border-color: #BFBD3B" );
        usernameValidator.setVisible( false );
        usernameValidator.setManaged( false );
        grid.add( usernameValidator, 2, 1 );

        Label pw = new Label( "Password:" );
        grid.add( pw, 0, 2 );

        final PasswordField pwBox = new PasswordField();
        grid.add( pwBox, 1, 2 );

        Button btn = new Button( "Sign in" );
        HBox hbBtn = new HBox( 10 );
        hbBtn.setAlignment( Pos.BOTTOM_RIGHT );
        hbBtn.getChildren().add( btn );
        grid.add( hbBtn, 1, 4 );

        final Text actiontarget = new Text();
        grid.add( actiontarget, 1, 6 );


        // Action on button press
        btn.setOnAction( new EventHandler<ActionEvent>()
        {
            @Override
            public void handle( ActionEvent e )
            {
                // Clearing message if any
                actiontarget.setText( "" );

                // Checking if the userTextField is empty
                if ( userTextField.getText().equals( "" ) )
                {
                    usernameValidator.setVisible( true );
                    usernameValidator.setManaged( true );
                }

                // Checking if the pwBox is empty
                if ( pwBox.getText().equals( "" ) )
                {
                    pwBox.setStyle( "-fx-background-color: orangered, derive(orangered,80%); -fx-prompt-text-fill: purple;" );
                    pwBox.setPromptText( "Please enter Password" );
                }
                // If both of the above textFields have values
                if ( !pwBox.getText().equals( "" )
                        && !userTextField.getText().equals( "" ) )
                {
                    actiontarget.setFill( Color.GREEN );
                    actiontarget.setText( "Welcome" );
                }
            }
        } );

        userTextField.focusedProperty().addListener( new ChangeListener<Boolean>()
        {
            @Override
            public void changed( ObservableValue<? extends Boolean> arg0,
                    Boolean oldPropertyValue, Boolean newPropertyValue )
            {
                if ( newPropertyValue )
                {
                    // Clearing message if any
                    actiontarget.setText( "" );
                    // Hiding the error message
                    usernameValidator.setVisible( false );
                    usernameValidator.setManaged( false );
                }
            }
        } );

        pwBox.focusedProperty().addListener( new ChangeListener<Boolean>()
        {
            @Override
            public void changed( ObservableValue<? extends Boolean> arg0,
                    Boolean oldPropertyValue, Boolean newPropertyValue )
            {
                if ( newPropertyValue )
                {
                    // Clearing message if any
                    actiontarget.setText( "" );
                    // Hiding the error message
                    pwBox.setStyle( null );
                }
            }
        } );

        return grid;
    }
}]]></Answer>
<Answer><![CDATA[public class MainApp extends Application
{
    private Popup usernameValidator;
    private ContextMenu passValidator;

    @Override
    public void start( Stage stage ) throws Exception
    {
        stage.setTitle( "Validation Demo" );
        BorderPane borderPane = new BorderPane();

        borderPane.setCenter( loadLoginScreen() );
        Scene scene = new Scene( borderPane, 700, 500 );
        scene.getStylesheets().add(MainApp.class.getResource("/styles/context.css").toExternalForm());
        stage.setScene( scene );
        stage.show();

        stage.xProperty().addListener( new ChangeListener<Number>()
        {
            @Override
            public void changed( ObservableValue<? extends Number> arg0, Number oldX, Number newX )
            {
                double delta = oldX.doubleValue() - newX.doubleValue();

                if ( usernameValidator.isShowing() ) adjustX( usernameValidator, delta );
                if ( passValidator.isShowing() ) adjustX( passValidator, delta );
            }

            private void adjustX( PopupWindow menu, double delta )
            {
                menu.setX( menu.getX() - delta );
            }
        } );

        stage.yProperty().addListener( new ChangeListener<Number>()
        {
            @Override
            public void changed( ObservableValue<? extends Number> arg0, Number oldY, Number newY )
            {
                double delta = oldY.doubleValue() - newY.doubleValue();

                if ( usernameValidator.isShowing() ) adjustY( usernameValidator, delta );
                if ( passValidator.isShowing() ) adjustY( passValidator, delta );
            }

            private void adjustY( PopupWindow menu, double delta )
            {
                menu.setY( menu.getY() - delta );
            }
        } );

        stage.focusedProperty().addListener( new ChangeListener<Boolean>()
        {
            @Override
            public void changed( ObservableValue<? extends Boolean> arg0, Boolean wasFocused, Boolean isFocused )
            {
                if ( wasFocused && ! isFocused )
                {
                    if ( usernameValidator.isShowing() ) usernameValidator.hide();
                    if ( passValidator.isShowing() ) passValidator.hide();
                }
            }
        } );

        stage.setResizable( false );
    }

    public static void main( String[] args )
    {
        launch( args );
    }

    private GridPane loadLoginScreen()
    {
        GridPane grid = new GridPane();
        grid.setAlignment( Pos.CENTER );
        grid.setHgap( 10 );
        grid.setVgap( 10 );
        grid.setPadding( new Insets( 25, 25, 25, 25 ) );

        Text scenetitle = new Text( "Welcome" );
        scenetitle.setFont( Font.font( "Tahoma", FontWeight.NORMAL, 20 ) );
        grid.add( scenetitle, 0, 0, 2, 1 );

        Label userName = new Label( "User Name:" );
        grid.add( userName, 0, 1 );

        final TextField userTextField = new TextField();
        grid.add( userTextField, 1, 1 );

        Label pw = new Label( "Password:" );
        grid.add( pw, 0, 2 );

        final PasswordField pwBox = new PasswordField();
        grid.add( pwBox, 1, 2 );

        Button btn = new Button( "Sign in" );
        HBox hbBtn = new HBox( 10 );
        hbBtn.setAlignment( Pos.BOTTOM_RIGHT );
        hbBtn.getChildren().add( btn );
        grid.add( hbBtn, 1, 4 );

        final Text actiontarget = new Text();
        grid.add( actiontarget, 1, 6 );

        // Context Menu for error messages
        // usernameValidator = new ContextMenu();
        // usernameValidator.setAutoHide(false);
        usernameValidator = new Popup();
        passValidator = new ContextMenu();
        passValidator.setAutoHide( false );

        Label mesaj = new Label( "Please enter Username" );
        mesaj.setStyle( "-fx-background-color:#FCFBBD; -fx-padding: 5; -fx-border-color: #BFBD3B" );
        usernameValidator.getContent().add( mesaj );

        // Action on button press
        btn.setOnAction( new EventHandler<ActionEvent>()
        {
            @Override
            public void handle( ActionEvent e )
            {
                // Clearing message if any
                actiontarget.setText( "" );

                // Checking if the userTextField is empty
                if ( userTextField.getText().equals( "" ) )
                {
                    double  x, y;
                    Window  win = userTextField.getScene().getWindow();
                    x = win.getX() + userTextField.localToScene( 0, 0 ).getX() + userTextField.getScene().getX() + userTextField.getWidth();
                    y = win.getY() + userTextField.localToScene( 0, 0 ).getY() + userTextField.getScene().getY();
                    usernameValidator.show( userTextField, x, y );
                }
                // Checking if the pwBox is empty
                if ( pwBox.getText().equals( "" ) )
                {
                    passValidator.getItems().clear();
                    passValidator.getItems().add(
                            new MenuItem( "Please enter Password" ) );
                    passValidator.show( pwBox, Side.RIGHT, 10, 0 );
                }
                // If both of the above textFields have values
                if ( !pwBox.getText().equals( "" )
                        && !userTextField.getText().equals( "" ) )
                {
                    actiontarget.setFill( Color.GREEN );
                    actiontarget.setText( "Welcome" );
                }
            }
        } );

        userTextField.focusedProperty().addListener( new ChangeListener<Boolean>()
        {
            @Override
            public void changed( ObservableValue<? extends Boolean> arg0,
                    Boolean oldPropertyValue, Boolean newPropertyValue )
            {
                if ( newPropertyValue )
                {
                    // Clearing message if any
                    actiontarget.setText( "" );
                    // Hiding the error message
                    usernameValidator.hide();
                }
            }
        } );

        pwBox.focusedProperty().addListener( new ChangeListener<Boolean>()
        {
            @Override
            public void changed( ObservableValue<? extends Boolean> arg0,
                    Boolean oldPropertyValue, Boolean newPropertyValue )
            {
                if ( newPropertyValue )
                {
                    // Clearing message if any
                    actiontarget.setText( "" );
                    // Hiding the error message
                    passValidator.hide();
                }
            }
        } );

        return grid;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23705654" questionTitle="Bind Font Size in JavaFX?">
<Answer><![CDATA[package org.jewelsea.measure;

public class Measurement {
  private double em;
  public  void   setEm(double em) { this.em = em; }
  public  double getEm()          { return em; }
}

. . .

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import org.jewelsea.measure.Measurement?>
<?scenebuilder-classpath-element .?>

<StackPane xmlns:fx="http://javafx.com/fxml">
  <fx:define>
    <Measurement fx:id="u" em="26.0" />
  </fx:define>
  <AnchorPane id="AnchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="${22*u.em}" prefWidth="${14*u.em}">
    <children>
      <Button layoutX="${4*u.em}" layoutY="${ 5*u.em}" prefWidth="${6*u.em}" text="Top" />
      <Button layoutX="${4*u.em}" layoutY="${10*u.em}" prefWidth="${6*u.em}" text="Middle" />
      <Button layoutX="${4*u.em}" layoutY="${15*u.em}" prefWidth="${6*u.em}" text="Bottom" />
    </children>
  </AnchorPane>
</StackPane>]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FontBind extends Application {

    private DoubleProperty fontSize = new SimpleDoubleProperty(10);
    private IntegerProperty blues = new SimpleIntegerProperty(50);

    @Override
    public void start(Stage primaryStage) {
        Button btn = new Button("click me, I change color");
        btn.setOnAction((evt)->{blues.set(blues.get()+20);});//max?
        Label lbl = new Label("I'm a label");
        TextArea ta = new TextArea("Lots of text can be typed\nand even number 1234567890");
        HBox hbox = new HBox(new Label("I never change"));
        VBox child = new VBox(btn, lbl, ta);
        VBox root = new VBox(child, hbox);
        Scene scene = new Scene(root, 300, 250);

        fontSize.bind(scene.widthProperty().add(scene.heightProperty()).divide(50));
        child.styleProperty().bind(Bindings.concat("-fx-font-size: ", fontSize.asString(), ";"
                                                  ,"-fx-base: rgb(100,100,",blues.asString(),");"));

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23646109" questionTitle="Whats the best way to notify admin about new exceptions of the Java application?">
<Answer><![CDATA[class UserDao extends CommonDao
{

  try
   {

   }catch(Exception e)
   {
      saveException(e);
   }
}

class CommonDao
{

  public void saveException(Exception e)
  {
    //write code to insert data into database
  }
}]]></Answer>
<Answer><![CDATA[public class MailUtil {
public static void sendEmail(String messageString, String subject, Properties props) {

    try {
        Session mailSession = null;
        final String userName = props.getProperty("mail.from");
        final String password = props.getProperty("mail.from.password");
        mailSession = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(userName, password);
            }
        });

        Transport transport = mailSession.getTransport();

        MimeMessage message = new MimeMessage(mailSession);

        message.setSubject(subject);
        message.setFrom(new InternetAddress(props.getProperty("mail.from")));
        String[] to = props.getProperty("mail.to").split(",");
        for (String email : to) {

            message.addRecipient(Message.RecipientType.TO, new InternetAddress(email));
        }

        String body = messageString;
        message.setContent(body, "text/html");
        transport.connect();

        transport.sendMessage(message, message.getRecipients(Message.RecipientType.TO));
        transport.close();
    } catch (Exception exception) {
        exception.printStackTrace();
    }
}

public static void sendEmail(String subject, String messageString) {
    try {
        Session mailSession = null;
        Properties props=new Properties();
        FileInputStream fileInputStream = new FileInputStream(new File("mail-config.properties"));
        props.load(fileInputStream);
        fileInputStream.close();

        final String fromUsername = props.getProperty("mail.from");
        final String fromPassword = props.getProperty("mail.from.password");

        mailSession = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(fromUsername, fromPassword);
            }
        });

        Transport transport = mailSession.getTransport();

        MimeMessage message = new MimeMessage(mailSession);

        message.setSubject(subject);
        message.setFrom(new InternetAddress(fromUsername));
        String[] to = props.getProperty("mail.to").split(",");
        for (String email : to) {
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(email));
        }

        String body = messageString;
        message.setContent(body, "text/html");
        transport.connect();

        transport.sendMessage(message, message.getRecipients(Message.RecipientType.TO));
        transport.close();
    } catch (Exception exception) {
        exception.printStackTrace();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23575067" questionTitle="Timeout with default value in Java 8 CompletableFuture">
<Answer><![CDATA[private static final ScheduledExecutorService schedulerExecutor = 
                                 Executors.newScheduledThreadPool(10);
private static final ExecutorService executorService = 
                                 Executors.newCachedThreadPool();


public static <T> CompletableFuture<T> supplyAsync(
        final Supplier<T> supplier, long timeoutValue, TimeUnit timeUnit,
        T defaultValue) {

    final CompletableFuture<T> cf = new CompletableFuture<T>();

    // as pointed out by Peti, the ForkJoinPool.commonPool() delivers a 
    // ForkJoinTask implementation of Future, that doesn't interrupt when cancelling
    // Using Executors.newCachedThreadPool instead in the example
    // submit task
    Future<?> future = executorService.submit(() -> {
        try {
            cf.complete(supplier.get());
        } catch (Throwable ex) {
            cf.completeExceptionally(ex);
        }
    });

    //schedule watcher
    schedulerExecutor.schedule(() -> {
        if (!cf.isDone()) {
            cf.complete(defaultValue);
            future.cancel(true);
        }

    }, timeoutValue, timeUnit);

    return cf;
}]]></Answer>
<Answer><![CDATA[public class TimeoutDefault {
    public static <T> CompletableFuture<T> with(T t, int ms) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                Thread.sleep(ms);
            } catch (InterruptedException e) { }
            return t;
        });
    }

    public static <T> Supplier<T> with(Supplier<T> supplier, T t, int ms) {
        return () -> CompletableFuture.supplyAsync(supplier)
            .applyToEither(TimeoutDefault.with(t, ms), i -> i).join();
    }
}

CompletableFuture<Void> future = CompletableFuture
        .supplyAsync(Example::createFoo)
        .acceptEither(
            TimeoutDefault.with("default", 1000),
            Example::doStuffWithFoo);

CompletableFuture<Void> future = CompletableFuture
        .supplyAsync(TimeoutDefault.with(Example::createFoo, "default", 1000))
        .thenAccept(Example::doStuffWithFoo);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23563046" questionTitle="JavaFX handlers not triggered">
<Answer><![CDATA[listView.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
        @Override
        public ListCell<String> call(ListView<String> p) {
            Label usernameLabel = new Label();
            usernameLabel.setFont(Font.font("Arial", FontWeight.BOLD, 12));
            Button callButton = new Button("Call");

            HBox usernameBox = new HBox(5);
            usernameBox.setAlignment(Pos.CENTER_LEFT);
            usernameBox.getChildren().addAll(usernameLabel);

            BorderPane borderPane = new BorderPane();
            borderPane.setLeft(usernameBox);
            borderPane.setRight(callButton);

            VBox vbox = new VBox(3);
            vbox.getChildren().addAll(borderPane);

            ListCell<String> cell = new ListCell<String>() {

                @Override
                protected void updateItem(String t, boolean empty) {
                    super.updateItem(t, empty);
                    if (t != null) {
                        usernameLabel.setText(t);
                        setGraphic(vbox);
                    } else {
                        setGraphic(null); // you will have weird bugs without this: don't omit it
                    }
                }
            };

            callButton.setOnAction(e -> System.out.println("action: "+cell.getItem())); 
            callButton.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> System.out.println("entered "+ cell.getItem()));
            callButton.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> System.out.println("clicked "+ cell.getItem())); 

            return cell;
        }
    });]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class App extends Application {
    public static void main(String[] args) { launch(args); }

    @Override
    public void start(Stage stage) throws Exception {

        Button callButton = new Button("", getIconAndResizeTo16("Phone"));
        callButton.setOnAction(e -> System.out.println("clicked1")); // not working
        callButton.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> System.out.println("entered"));
        callButton.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> System.out.println("clicked"));  // not working

        Button chatButton = new Button("", getIconAndResizeTo16("Chat") );
        chatButton.setOnAction(e -> System.out.println("clicked2")); // not working

        HBox callIconBox = new HBox(3);
        callIconBox.setAlignment(Pos.CENTER_RIGHT);
        callIconBox.getChildren().addAll(callButton, chatButton);

        stage.setScene(new Scene(callIconBox));
        stage.show();
    }

    private Node getIconAndResizeTo16(String s) {
        Label l = new Label("Consumes " + s + " Events");
        l.addEventHandler(MouseEvent.MOUSE_PRESSED, e -> { e.consume(); });
        l.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> { e.consume(); });
        return l;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23535853" questionTitle="JavaFX not positioning the node in the parent node">
<Answer><![CDATA[public class AnchorDemo extends Application {

    private final AnchorPane anchorPaneParent = new AnchorPane();
    private final AnchorPane anchorPaneChild = new AnchorPane(new Label("TEXT TEXT TEXT TEXT TEXT"));

    @Override
    public void start(Stage primaryStage) {
        anchorPaneParent.setStyle("-fx-border-color:red");
        anchorPaneChild.setStyle("-fx-border-color:green");
        anchorPaneParent.getChildren().add(anchorPaneChild);

        anchorPaneParent.layoutBoundsProperty().addListener(new ChangeListener<Bounds>() {
            @Override
            public void changed(ObservableValue<? extends Bounds> arg0, Bounds oldBound, Bounds newBound) {
                System.out.println("oldBound = " + oldBound);
                System.out.println("newBound = " + newBound);
                System.out.println("");
                if (oldBound.getHeight() != newBound.getHeight() || oldBound.getWidth() != newBound.getWidth()) {
                    updateChildAnchorConstraint();
                }
            }
        });

        Scene scene = new Scene(anchorPaneParent, 300, 250);
        primaryStage.setScene(scene);
        primaryStage.show();
        updateChildAnchorConstraint();

    }

    private void updateChildAnchorConstraint() {
        AnchorPane.setTopAnchor(anchorPaneChild, anchorPaneParent.getHeight() / 2 - anchorPaneChild.getHeight() / 2);
        AnchorPane.setLeftAnchor(anchorPaneChild, anchorPaneParent.getWidth() / 2 - anchorPaneChild.getWidth() / 2);
    }

    public static void main(String[] args) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[public void showDialog(final Dialog dialog) {
dialogStack.add(dialog);

dialogCanvas.toFront();
dialog.toFront();

dialogCanvas.setVisible(true);
dialog.setVisible(true);

getChildren().add(dialog);
dialog.widthProperty().addListener(new ChangeListener<Number>() {
    @Override
    public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
        if(newValue.doubleValue() > 0) {
            centerDialog(dialog);
        }
    }
});
}

public void centerDialog(final Dialog dialog) {
    Platform.runLater(new Runnable() {
        @Override
        public void run() {
            double width = getWidth();
            double height = getHeight();

            dialog.setLayoutX(width / 2 - dialog.getWidth() / 2);
            dialog.setLayoutY(height / 2 - dialog.getHeight() / 2);
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23489993" questionTitle="Nested Java 8 parallel forEach loop perform poor. Is this behavior expected?">
<Answer><![CDATA[import java.util.stream.IntStream;

public class NestedParallelForEachTest {
    // Setup: Inner loop task 0.01 sec in worse case. Outer loop task: 10 sec + inner loop. This setup: (100 * 0.01 sec + 10 sec) * 24/8 = 33 sec.
    static final int numberOfTasksInOuterLoop = 24;  // In real applications this can be a large number (e.g. > 1000).
    static final int numberOfTasksInInnerLoop = 100;                // In real applications this can be a large number (e.g. > 1000).
    static final int concurrentExecutionsLimitForStreams    = 8;    // java.util.concurrent.ForkJoinPool.common.parallelism

    public static void main(String[] args) {
        testNestedLoops(false, false);
        testNestedLoops(false, true);
        testNestedLoops(true, false);
        testNestedLoops(true, true);
    }

    public static void testNestedLoops(boolean isInnerStreamParallel, boolean isCPUTimeBurned) {
        System.out.println("isInnerStreamParallel: " + isInnerStreamParallel + ", isCPUTimeBurned: " + isCPUTimeBurned);
        long start = System.nanoTime();

        System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism",Integer.toString(concurrentExecutionsLimitForStreams));
        System.out.println("java.util.concurrent.ForkJoinPool.common.parallelism = " + System.getProperty("java.util.concurrent.ForkJoinPool.common.parallelism"));

        // Outer loop
        IntStream.range(0, numberOfTasksInOuterLoop).parallel().forEach(i -> {
//            System.out.println(i + "\t" + Thread.currentThread());
            if(i < 10) burnTime(10 * 1000, isCPUTimeBurned);

            IntStream range = IntStream.range(0, numberOfTasksInInnerLoop);
            if (isInnerStreamParallel) {
                // Inner loop as parallel: worst case (sequential) it takes 10 * numberOfTasksInInnerLoop millis
                range = range.parallel();
            } else {
                // Inner loop as sequential
            }
            range.forEach(j -> burnTime(10, isCPUTimeBurned));

            if(i >= 10) burnTime(10 * 1000, isCPUTimeBurned);
        });

        long end = System.nanoTime();

        System.out.printf("Done in %.1f seconds.%n", (end - start) / 1e9);
    }

    static void burnTime(long millis, boolean isCPUTimeBurned) {
        if (isCPUTimeBurned) {
            long end = System.nanoTime() + millis * 1000000;
            while (System.nanoTime() < end)
                ;

        } else {
            try {
                Thread.sleep(millis);
            } catch (InterruptedException e) {
                throw new AssertionError(e);
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.lang.reflect.UndeclaredThrowableException;
import java.util.concurrent.*;
import java.util.function.IntConsumer;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class NestedParallelForEachTest1 {
    static final boolean isInnerStreamParallel = true;

    // Setup: Inner loop task 0.01 sec in worse case. Outer loop task: 10 sec + inner loop. This setup: (100 * 0.01 sec + 10 sec) * 24/8 = 33 sec.
    static final int numberOfTasksInOuterLoop = 24;  // In real applications this can be a large number (e.g. > 1000).
    static final int numberOfTasksInInnerLoop = 100; // In real applications this can be a large number (e.g. > 1000).
    static final int concurrentExecutionsLimitForStreams = 8;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        System.out.println(System.getProperty("java.version")+" "+System.getProperty("java.home"));
        new NestedParallelForEachTest1().testNestedLoops();
        E.shutdown();
    }

    final static ThreadPoolExecutor E = new ThreadPoolExecutor(
        concurrentExecutionsLimitForStreams, concurrentExecutionsLimitForStreams,
        2, TimeUnit.MINUTES, new SynchronousQueue<>(), (r,e)->r.run() );

    public static void parallelForEach(IntStream s, IntConsumer c) {
        s.mapToObj(i->E.submit(()->c.accept(i))).collect(Collectors.toList())
         .forEach(NestedParallelForEachTest1::waitOrHelp);
    }
    static void waitOrHelp(Future f) {
        while(!f.isDone()) {
            Runnable r=E.getQueue().poll();
            if(r!=null) r.run();
        }
        try { f.get(); }
        catch(InterruptedException ex) { throw new RuntimeException(ex); }
        catch(ExecutionException eex) {
            Throwable t=eex.getCause();
            if(t instanceof RuntimeException) throw (RuntimeException)t;
            if(t instanceof Error) throw (Error)t;
            throw new UndeclaredThrowableException(t);
        }
    }
    public void testNestedLoops(NestedParallelForEachTest1 this) {
        long start = System.nanoTime();
        // Outer loop
        parallelForEach(IntStream.range(0,numberOfTasksInOuterLoop), i -> {
            if(i < 10) sleep(10 * 1000);
            if(isInnerStreamParallel) {
                // Inner loop as parallel: worst case (sequential) it takes 10 * numberOfTasksInInnerLoop millis
                parallelForEach(IntStream.range(0,numberOfTasksInInnerLoop), j -> sleep(10));
            }
            else {
                // Inner loop as sequential
                IntStream.range(0,numberOfTasksInInnerLoop).sequential().forEach(j -> sleep(10));
            }
            if(i >= 10) sleep(10 * 1000);
        });
        long end = System.nanoTime();
        System.out.println("Done in "+TimeUnit.NANOSECONDS.toSeconds(end-start)+" sec.");
    }
    static void sleep(int milli) {
        try {
            Thread.sleep(milli);
        } catch (InterruptedException ex) {
            throw new AssertionError(ex);
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.concurrent.ForkJoinPool;
import java.util.stream.IntStream;

public class ParallelPerf {

    private static final Object LOCK = new Object();

    private static void runInNewPool(Runnable task) {
        ForkJoinPool pool = new ForkJoinPool();
        try {
            pool.submit(task).join();
        } finally {
            pool.shutdown();
        }
    }

    private static <T> T runInNewPool(Callable<T> task) {
        ForkJoinPool pool = new ForkJoinPool();
        try {
            return pool.submit(task).join();
        } finally {
            pool.shutdown();
        }
    }

    private static void innerLoop() {
        IntStream.range(0, 32).parallel().forEach(i -> {
//          System.out.println(Thread.currentThread().getName());
            try {
                Thread.sleep(5);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        });
    }

    public static void main(String[] args) {
        System.out.println("==DEFAULT==");
        long startTime = System.nanoTime();
        IntStream.range(0, 32).parallel().forEach(i -> {
            synchronized (LOCK) {
                innerLoop();
            }
//          System.out.println(" outer: " + Thread.currentThread().getName());
        });
        System.out.println(System.nanoTime() - startTime);

        System.out.println("==NEW POOLS==");
        startTime = System.nanoTime();
        IntStream.range(0, 32).parallel().forEach(i -> {
            synchronized (LOCK) {
                runInNewPool(() -> innerLoop());
            }
//          System.out.println(" outer: " + Thread.currentThread().getName());
        });
        System.out.println(System.nanoTime() - startTime);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23488721" questionTitle="How to check if string matches date pattern using time API?">
<Answer><![CDATA[static final String[] PATTERNS = {"dd.MM.yyyy", "M/dd/yyyy"};
static final DateTimeFormatter[] FORMATTERS = new DateTimeFormatter[PATTERNS.length];

static {
  for (int i = 0; i < PATTERNS.length; i++) {
    FORMATTERS[i] = DateTimeFormatter.ofPattern(PATTERNS[i]);
  }
}

public static LocalDate parse(String input) {
  ParsePosition pos = new ParsePosition();
  for (int i = 0; i < patterns.length; i++) {
    try {
      TemporalAccessor tacc = FORMATTERS[i].parseUnresolved(input, pos);
      if (pos.getErrorIndex < 0) {
        return LocalDate.from(tacc); // possibly throwing DateTimeException => validation failure
      }
    } catch (DateTimeException ex) { // catches also possible DateTimeParseException
      // go to next pattern
    }
    pos.setIndex(0);
    pos.setErrorIndex(-1);
  }
  throw new IllegalArgumentException("Input does not match any pattern: " + input);
}]]></Answer>
<Answer><![CDATA[public class Test {
    public static void main(String[] args){
        MyFormatter format = new MyFormatter("dd.MM.yyyy", "M/dd/yyyy");
        LocalDate  date = format.parse("3/30/2014"); //2014-03-30
        LocalDate  date2 = format.parse("30.03.2014"); //2014-03-30
    }
}

class MyFormatter {
    private final String[] patterns;

    public MyFormatter(String... patterns){
        this.patterns = patterns;
    }

    public LocalDate parse(String text){
        for(int i = 0; i < patterns.length; i++){
            try{
                return LocalDate.parse(text, DateTimeFormatter.ofPattern(patterns[i]));
            }catch(DateTimeParseException excep){}
        }
        throw new IllegalArgumentException("Not able to parse the date for all patterns given");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23454952" questionTitle="Uses for Optional">
<Answer><![CDATA[public final class NodeDescriptor<V>
{
    private final Optional<String> label;
    private final List<NodeDescriptor<V>> children;

    private NodeDescriptor(final Builder<V> builder)
    {
        label = Optional.fromNullable(builder.label);
        final ImmutableList.Builder<NodeDescriptor<V>> listBuilder
            = ImmutableList.builder();
        for (final Builder<V> element: builder.children)
            listBuilder.add(element.build());
        children = listBuilder.build();
    }

    public static <E> Builder<E> newBuilder()
    {
        return new Builder<E>();
    }

    public void verify(@Nonnull final Node<V> node)
    {
        final NodeAssert<V> nodeAssert = new NodeAssert<V>(node);
        nodeAssert.hasLabel(label);
    }

    public static final class Builder<V>
    {
        private String label;
        private final List<Builder<V>> children = Lists.newArrayList();

        private Builder()
        {
        }

        public Builder<V> withLabel(@Nonnull final String label)
        {
            this.label = Preconditions.checkNotNull(label);
            return this;
        }

        public Builder<V> withChildNode(@Nonnull final Builder<V> child)
        {
            Preconditions.checkNotNull(child);
            children.add(child);
            return this;
        }

        public NodeDescriptor<V> build()
        {
            return new NodeDescriptor<V>(this);
        }
    }
}]]></Answer>
<Answer><![CDATA[Optional<String> optinalString= null;
optinalString.ifPresent(System.out::println);



package optinalTest;

import java.util.Optional;

public class OptionalTest {

    public Optional<String> getOptionalNullString() {
        return null;
//      return Optional.of("TESt");
    }

    public static void main(String[] args) {

        OptionalTest optionalTest = new OptionalTest();

        Optional<Optional<String>> optionalNullString =    Optional.ofNullable(optionalTest.getOptionalNullString());
        if (optionalNullString.isPresent()) {

            System.out.println(optionalNullString.get());

        }

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23440980" questionTitle="How show specific part of an image in javafx">
<Answer><![CDATA[@Override
public void start(Stage stage) {

    Group root = new Group();
    Image image = new Image(this.getClass().getResource("your.png").toExternalForm());

    final int numberOfFrames = 6; // in image
    double frameWidth = image.getWidth() / numberOfFrames;
    Scene scene = new Scene(root, frameWidth, image.getHeight());
    final ImageView view = new ImageView(image);

    Rectangle mask = new Rectangle(frameWidth, image.getHeight());
    view.setClip(mask);

    Timeline timeline = new Timeline();

    for (int i = 0; i <= numberOfFrames; i++) {
        KeyFrame kf = new KeyFrame(Duration.seconds(i), new KeyValue(view.xProperty(), -frameWidth * i, Interpolator.DISCRETE));
        timeline.getKeyFrames().add(kf);
    }
    timeline.setCycleCount(Timeline.INDEFINITE);
    timeline.play();

    root.getChildren().add(view);
    stage.setScene(scene);
    stage.show();

}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.beans.property.*;
import javafx.event.*;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Control;
import javafx.scene.effect.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Duration;

class ExploadableImageView extends ImageView {
    private final Rectangle2D[] cellClips;
    private int numCells;
    private final Duration FRAME_TIME = Duration.seconds(.5);

    public ExploadableImageView(Image explosionImage, int numCells) {
        this.numCells = numCells;

        double cellWidth  = explosionImage.getWidth() / numCells;
        double cellHeight = explosionImage.getHeight();

        cellClips = new Rectangle2D[numCells];
        for (int i = 0; i < numCells; i++) {
            cellClips[i] = new Rectangle2D(
                    i * cellWidth, 0,
                    cellWidth, cellHeight
            );
        }

        setImage(explosionImage);
        setViewport(cellClips[0]);
    }

    public void explode(EventHandler<ActionEvent> onFinished) {
        final IntegerProperty frameCounter = new SimpleIntegerProperty(0);
        Timeline kaboom = new Timeline(
                new KeyFrame(FRAME_TIME, event -> {
                    frameCounter.set((frameCounter.get() + 1) % numCells);
                    setViewport(cellClips[frameCounter.get()]);
                })
        );
        kaboom.setCycleCount(numCells);
        kaboom.setOnFinished(onFinished);
        kaboom.play();
    }
}

class ExplodableItem extends StackPane {
    public ExplodableItem(Image objectImage, Image explosionImage, int numCells) {
        ImageView objectView = new ImageView(objectImage);
        ExploadableImageView explosionView = new ExploadableImageView(
                explosionImage, numCells
        );

        setMinSize(
                Math.max(
                        objectImage.getWidth(),
                        explosionView.getViewport().getWidth()
                ),
                Math.max(
                        objectImage.getHeight(),
                        explosionView.getViewport().getHeight()
                )
        );

        objectView.setPickOnBounds(false);
        objectView.setOnMouseClicked(event -> {
            getChildren().setAll(explosionView);
            explosionView.explode(complete -> getChildren().setAll(objectView));
        });

        DropShadow drop = new DropShadow(10, Color.GOLD);
        drop.setInput(new Glow());
        objectView.setOnMouseEntered(event -> objectView.setEffect(drop));
        objectView.setOnMouseExited(event -> objectView.setEffect(null));

        getChildren().setAll(objectView);
    }
}

public class CatWhack extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    private static final int NUM_CELLS_PER_EXPLOSION = 6;

    @Override
    public void start(Stage stage) {
        Image objectImage    = new Image("http://icons.iconarchive.com/icons/iconka/meow/96/cat-box-icon.png");  // cat icon linkware: backlink to http://www.iconka.com required
        // looks likes imgur may have blocked direct access to following png from a Java app (somehow).
        // but you can still download the QMqbQ.png from that location 
        // and save it locally in the same directory as the CatWhack program
        // then pick it up by replacing the new Image call with:
        //    new Image(CatWhack.class.getResourceAsStream("QMqbQ.png")); 
        Image explosionImage = new Image("http://i.stack.imgur.com/QMqbQ.png");

        TilePane tiles = new TilePane();
        tiles.setPrefColumns(4);
        for (int i = 0; i <16; i++) {
            tiles.getChildren().add(
                    new ExplodableItem(objectImage, explosionImage, NUM_CELLS_PER_EXPLOSION)
            );
        }
        tiles.setMinSize(Control.USE_PREF_SIZE, Control.USE_PREF_SIZE);

        stage.setTitle("Cat Whack - Click a cat to whack it!");
        stage.setScene(new Scene(tiles));
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23423078" questionTitle="Java 8 grouping by from one-to-many">
<Answer><![CDATA[import java.util.AbstractMap;
import java.util.List;
import java.util.Map;

import static java.util.Arrays.asList;
import static java.util.Map.Entry;
import static java.util.stream.Collectors.*;

public class SO {

    public static void main(String... args) {

        List<Album> albums = asList(
                new Album(
                        asList(
                                new Artist("bob"),
                                new Artist("tom")
                        )
                ),
                new Album(asList(new Artist("bill")))
        );

        Map<Artist, List<Album>> x = albums.stream()
                .flatMap(album -> album.getArtist().stream().map(artist -> pair(artist, album)))
                .collect(groupingBy(Entry::getKey, mapping(Entry::getValue, toList())));

        x.entrySet().stream().forEach(System.out::println);
    }

    static class Artist {
        private final String name;

        Artist(String name) {
            this.name = name;
        }

        public String toString() {return name;}

    }

    static class Album {
        private List<Artist> artist;

        Album(List<Artist> artist) {
            this.artist = artist;
        }

        List<Artist> getArtist() {
            return artist;
        }

    }

    private static <T,U> AbstractMap.SimpleEntry<T,U> pair(T t, U u) {
        return new AbstractMap.SimpleEntry<T,U>(t,u);
    }


}]]></Answer>
<Answer><![CDATA[import java.util.AbstractMap;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class GroupSubject {
    public static void main(String[] args) {

        List<ContentItem> items = Arrays.asList(new ContentItem("maths"), new ContentItem("science"),
                new ContentItem("social"), new ContentItem("chemistry"), new ContentItem("maths"));

        Map<String, List<ContentItem>> x = (Map<String, List<ContentItem>>) items.stream()
                .flatMap(item -> item.getSubjects().stream().map(subject -> pair(subject, item)))
                .collect(Collectors.groupingBy(e -> ((SimpleEntry<String, ContentItem>) e).getKey(), Collectors
                        .mapping(e -> ((SimpleEntry<String, ContentItem>) e).getValue(), Collectors.toList())));

        System.out.println(x);

    }

    private static <T, U> AbstractMap.SimpleEntry<T, U> pair(T t, U u) {
        return new AbstractMap.SimpleEntry<T, U>(t, u);
    }

}

class ContentItem {

    private List<String> subjects = new ArrayList<String>();

    public ContentItem(String string) {
        subjects.add(string);
    }

    public List<String> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<String> subjects) {
        this.subjects = subjects;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23345612" questionTitle="ExecutorService fixed threads rejecting">
<Answer><![CDATA[ExecutorService executor = Executors.newFixedThreadPool(5);`
executor.execute(new MyRunnableWorker());

public class MyRunnableWorker implements Runnable{
    private String ip;
    private String threadName;
    private int threadTimeout = 10;

    public MyRunnableWorker(String ip){
        this.ip = ip;
    }

    public MyRunnableWorker(String ip,int threadTimeout,String threadName){
        this.ip = ip;
        this.threadTimeout = threadTimeout;
        this.threadName = threadName;

        System.out.prinln("MyRunnableWorker constructor has been called!");
    }

    @Override
    public void run(){    {
        // do some stuff that takes time ....
    }
}]]></Answer>
<Answer><![CDATA[public class FileProcessor
{

    public static void main(String[] args)
    {

        List<String> lines = readFile();
        System.out.println("Starting threads ...");
        ExecutorService executor = Executors.newFixedThreadPool(5);

        for(String line : lines)
        {
            try
            {
                executor.submit(new MyCustomThread(line));
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }

        try
        {
            executor.shutdown();
            executor.awaitTermination(10, TimeUnit.SECONDS);
        }
        catch (InterruptedException e)
        {
            System.out.println("A processor took longer than the await time to complete.");
        }
        executor.shutdownNow();

    }

    protected static List<String> readFile()
    {
        List<String> lines = new ArrayList<String>();
        try
        {
            String filename = "/temp/data.dat";
            FileReader fileReader = new FileReader(filename );
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                lines.add(line);
            }
            bufferedReader.close();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return lines;
    }
}

public class MyCustomThread implements Runnable
{

    String line;

    MyCustomThread(String line)
    {
        this.line = line;
    }

    @Override
    public void run()
    {
        System.out.println(Thread.currentThread().getName() + " processed line:" + line);

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23303087" questionTitle="Bind ToggleGroup bidirectionally in javafx">
<Answer><![CDATA[public final class BindingUtils {

private BindingUtils() {
}

public static <T> void bindToggleGroupToProperty(final ToggleGroup toggleGroup, final ObjectProperty<T> property) {
    // Check all toggles for required user data
    toggleGroup.getToggles().forEach(toggle -> {
        if (toggle.getUserData() == null) {
            throw new IllegalArgumentException("The ToggleGroup contains at least one Toggle without user data!");
        }
    });
    // Select initial toggle for current property state
    for (Toggle toggle : toggleGroup.getToggles()) {
        if (property.getValue() != null && property.getValue().equals(toggle.getUserData())) {
            toggleGroup.selectToggle(toggle);
            break;
        }
    }
    // Update property value on toggle selection changes
    toggleGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {
        property.setValue((T) newValue.getUserData());
    });
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.List;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class Main extends Application {
    Child myChild = new Child();
    @Override
    public void start( Stage stage ) throws Exception {
        stage.setTitle( "ToggleGroupValue Example" );
        GridPane gridPane = new GridPane();
        int rowIndex = 0;
        gridPane.add( new Label("Nickname: "), 0, rowIndex );

        ToggleGroupValue toggleGroupValue = new ToggleGroupValue();
        rowIndex = createAddRadioButtons( gridPane, rowIndex, toggleGroupValue );

        gridPane.add( new Label("Selected Nickname: "), 0, rowIndex );
        Label selectedNickNameValueLabel = new Label();
        gridPane.add( selectedNickNameValueLabel, 1, rowIndex );

        myChild.nicknameProperty().bindBidirectional( toggleGroupValue.valueProperty() );
        selectedNickNameValueLabel.textProperty().bind( toggleGroupValue.valueProperty() );

        stage.setScene( new Scene( gridPane, 300, 100 ) );
        stage.show();
    }

    private int createAddRadioButtons( GridPane gridPane, int rowIndex, ToggleGroupValue toggleGroupValue ) {
        RadioButton radioButtonPunkin = new RadioButton();
        radioButtonPunkin.setUserData( "Punkin" );
        RadioButton radioButtonLittleBoy = new RadioButton();
        radioButtonLittleBoy.setUserData( "Little Boy" );
        RadioButton radioButtonBuddy = new RadioButton();
        radioButtonBuddy.setUserData( "Buddy" );
        List<RadioButton> radioButtons = Arrays.asList( radioButtonPunkin, radioButtonLittleBoy, radioButtonBuddy );
        for ( RadioButton radioButton : radioButtons ) {
            toggleGroupValue.add( radioButton, radioButton.getUserData() );
            radioButton.setText( radioButton.getUserData().toString() );
            gridPane.add( radioButton, 1, rowIndex++ );
        }
        return rowIndex;
    }

    private static class Child {
        private StringProperty nickname = new SimpleStringProperty();
        public StringProperty nicknameProperty() {
            return nickname;
        }
        public String getNickname() {
            return nickname.get();
        }
        public void setNickname( String notesProperty ) {
            this.nickname.set( notesProperty );
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23284437" questionTitle="JavaFX TableColumn resize to fit cell content">
<Answer><![CDATA[/*
 * FIXME: Naive implementation ahead
 * Attempts to resize column based on the pref width of all items contained
 * in this column. This can be potentially very expensive if the number of
 * rows is large.
 */
@Override protected void resizeColumnToFitContent(TableColumn<T, ?> tc, int maxRows) {
    if (!tc.isResizable()) return;

// final TableColumn<T, ?> col = tc;
    List<?> items = itemsProperty().get();
    if (items == null || items.isEmpty()) return;

    Callback/*<TableColumn<T, ?>, TableCell<T,?>>*/ cellFactory = tc.getCellFactory();
    if (cellFactory == null) return;

    TableCell<T,?> cell = (TableCell<T, ?>) cellFactory.call(tc);
    if (cell == null) return;

    // set this property to tell the TableCell we want to know its actual
    // preferred width, not the width of the associated TableColumnBase
    cell.getProperties().put(TableCellSkin.DEFER_TO_PARENT_PREF_WIDTH, Boolean.TRUE);

    // determine cell padding
    double padding = 10;
    Node n = cell.getSkin() == null ? null : cell.getSkin().getNode();
    if (n instanceof Region) {
        Region r = (Region) n;
        padding = r.snappedLeftInset() + r.snappedRightInset();
    } 

    int rows = maxRows == -1 ? items.size() : Math.min(items.size(), maxRows);
    double maxWidth = 0;
    for (int row = 0; row < rows; row++) {
        cell.updateTableColumn(tc);
        cell.updateTableView(tableView);
        cell.updateIndex(row);

        if ((cell.getText() != null && !cell.getText().isEmpty()) || cell.getGraphic() != null) {
            getChildren().add(cell);
            cell.applyCss();
            maxWidth = Math.max(maxWidth, cell.prefWidth(-1));
            getChildren().remove(cell);
        }
    }

    // dispose of the cell to prevent it retaining listeners (see RT-31015)
    cell.updateIndex(-1);

    // RT-36855 - take into account the column header text / graphic widths.
    // Magic 10 is to allow for sort arrow to appear without text truncation.
    TableColumnHeader header = getTableHeaderRow().getColumnHeaderFor(tc);
    double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);
    Node graphic = header.label.getGraphic();
    double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();
    double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();
    maxWidth = Math.max(maxWidth, headerWidth);

    // RT-23486
    maxWidth += padding;
    if(tableView.getColumnResizePolicy() == TableView.CONSTRAINED_RESIZE_POLICY) {
        maxWidth = Math.max(maxWidth, tc.getWidth());
    }

    tc.impl_setWidth(maxWidth);
}]]></Answer>
<Answer><![CDATA[import com.sun.javafx.scene.control.skin.TableViewSkin;
import javafx.scene.control.Skin;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class GUIUtils {
    private static Method columnToFitMethod;

    static {
        try {
            columnToFitMethod = TableViewSkin.class.getDeclaredMethod("resizeColumnToFitContent", TableColumn.class, int.class);
            columnToFitMethod.setAccessible(true);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }

    public static void autoFitTable(TableView tableView) {
        tableView.getItems().addListener(new ListChangeListener<Object>() {
            @Override
            public void onChanged(Change<?> c) {
                for (Object column : tableView.getColumns()) {
                    try {
                        columnToFitMethod.invoke(tableView.getSkin(), column, -1);
                    } catch (IllegalAccessException | InvocationTargetException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23194428" questionTitle="Collect arguments to apply to curried functions in Java/Scala">
<Answer><![CDATA[import scala.language.higherKinds

object Main extends App {
  val builder1 = HCons(23, HCons("Hello", HNil))
  val builder2 = HCons(42L, builder1)

  val res1:String = builder1.apply(i => s => i + s)
  val res2:String = builder2.apply(l => i => s => (i+l) + s)
  println(res1) // 23Hello
  println(res2) // 65Hello
}

sealed trait HList {
  type F[Res]
  def apply[Res]: F[Res] => Res
}
case class HCons[Head, HTail <: HList](head: Head, tail: HTail) extends HList {
  type F[Res] = Head => (tail.type)#F[Res]
  def apply[Res]: F[Res] => Res = f => tail.apply(f(head))
}
case object HNil extends HList {
  type F[Res] = Res
  def apply[Res]: F[Res] => Res = identity
}]]></Answer>
<Answer><![CDATA[template <typename Param, typename Tail>
struct foo {
    Param _param;
    Tail _tail;
    template <typename P>
    auto param(P p) {
        return foo<P, foo>{p, *this};
    }
    template <typename Function>
    auto apply(Function function) {
        return _tail.apply(function)(_param);
    }
};

struct bar {
    template <typename P>
    auto param(P p) {
        return foo<P, bar>{p, *this};
    }
    template <typename Function>
    auto apply(Function function) {
        return function;
    }
};]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23170832" questionTitle="Java 8's streams: why parallel stream is slower?">
<Answer><![CDATA[public static void main(String... args) {
    String[] array = new String[1000000];
    Arrays.fill(array, "AbabagalamagA");
    System.out.println("Warmup...");
    for (int i = 0; i < 100; ++i) {
        sequential(array);
        parallel(array);
    }
    System.out.println("Benchmark...");
    for (int i = 0; i < 5; ++i) {
        System.out.printf("Run %d:  sequential %s  -  parallel %s\n",
            i,
            test(() -> sequential(array)),
            test(() -> parallel(array)));
    }
}
private static void sequential(String[] array) {
    Arrays.stream(array).map(String::toLowerCase).collect(Collectors.toList());
}
private static void parallel(String[] array) {
    Arrays.stream(array).parallel().map(String::toLowerCase).collect(Collectors.toList());
}
private static String test(Runnable runnable) {
    long start = System.currentTimeMillis();
    runnable.run();
    long elapsed = System.currentTimeMillis() - start;
    return String.format("%4.2fs", elapsed / 1000.0);
}]]></Answer>
<Answer><![CDATA[[GC (Allocation Failure)  512K->432K(130560K), 0.0024130 secs]
[GC (Allocation Failure)  944K->520K(131072K), 0.0015740 secs]
[GC (Allocation Failure)  1544K->777K(131072K), 0.0032490 secs]
[GC (Allocation Failure)  1801K->1027K(132096K), 0.0023940 secs]
# Run progress: 0.00% complete, ETA 00:00:20
# VM invoker: /Users/src/jdk/jdk8-b132.jdk/Contents/Home/jre/bin/java
# VM options: -verbose:gc
# Fork: 1 of 1
[GC (Allocation Failure)  512K->424K(130560K), 0.0015460 secs]
[GC (Allocation Failure)  933K->552K(131072K), 0.0014050 secs]
[GC (Allocation Failure)  1576K->850K(131072K), 0.0023050 secs]
[GC (Allocation Failure)  3075K->1561K(132096K), 0.0045140 secs]
[GC (Allocation Failure)  1874K->1059K(132096K), 0.0062330 secs]
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.stackoverflow.questions.SO23170832.parallel
# Warmup Iteration   1: [GC (Allocation Failure)  7014K->5445K(132096K), 0.0184680 secs]
[GC (Allocation Failure)  7493K->6346K(135168K), 0.0068380 secs]
[GC (Allocation Failure)  10442K->8663K(135168K), 0.0155600 secs]
[GC (Allocation Failure)  12759K->11051K(139776K), 0.0148190 secs]
[GC (Allocation Failure)  18219K->15067K(140800K), 0.0241780 secs]
[GC (Allocation Failure)  22167K->19214K(145920K), 0.0208510 secs]
[GC (Allocation Failure)  29454K->25065K(147456K), 0.0333080 secs]
[GC (Allocation Failure)  35305K->30729K(153600K), 0.0376610 secs]
[GC (Allocation Failure)  46089K->39406K(154624K), 0.0406060 secs]
[GC (Allocation Failure)  54766K->48299K(164352K), 0.0550140 secs]
[GC (Allocation Failure)  71851K->62725K(165376K), 0.0612780 secs]
[GC (Allocation Failure)  86277K->74864K(184320K), 0.0649210 secs]
[GC (Allocation Failure)  111216K->94203K(185856K), 0.0875710 secs]
[GC (Allocation Failure)  130555K->114932K(199680K), 0.1030540 secs]
[GC (Allocation Failure)  162548K->141952K(203264K), 0.1315720 secs]
[Full GC (Ergonomics)  141952K->59696K(159232K), 0.5150890 secs]
[GC (Allocation Failure)  105613K->85547K(184832K), 0.0738530 secs]
1.183 ops/s]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23153333" questionTitle="Is there any way to change style of one row in tableview in javafx?">
<Answer><![CDATA[personTable.setRowFactory(new Callback<TableView<Person>, TableRow<Person>>() {
            @Override
            public TableRow<Person> call(TableView<Person> personTableView) {
                return new TableRow<Person>() {
                    @Override
                    protected void updateItem(Person person, boolean b) {
                        super.updateItem(person, b);
                        if(.../*my requirements*/) { 
                            ObservableList<String> styles = getStyleClass();
                            if (! styles.contains("priorityLow")) {                    
                                getStyleClass().add("priorityLow");
                            }
                        } else {
                            // Remove all occurrences of "priorityLow":
                            styles.removeAll(Collections.singleton("priorityLow"));
                        }
                    }
                };
            }
        });]]></Answer>
<Answer><![CDATA[personTable.setRowFactory(new Callback<TableView<Person>, TableRow<Person>>() 
{
    @Override public TableRow<Person> call(TableView<Person> personTableView) 
    {
        return new TableRow<Person>() 
        {
            @Override protected void updateItem(Person person, boolean b) 
            {
                super.updateItem(person, b);

                if (person == null)
                    return;

                if(Priority.LOW.equals(person.getPriority())) // Example requirement
                {                     
                    getStyleClass().add("priorityLow");
                }
            }
        };
    }
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23128335" questionTitle="java8 - annotating compareTo &lt;T&gt; of Comparable&lt;T&gt; adds annotations to compareTo(Object o)">
<Answer><![CDATA[public int compareTo(Customer);
descriptor: (LCustomer;)I
flags: ACC_PUBLIC
Code:
  stack=1, locals=2, args_size=2
     0: iconst_0      
     1: ireturn       
  LineNumberTable:
    line 11: 0
MethodParameters:
  Name                           Flags
  o                              
RuntimeVisibleAnnotations:
  0: #15()

public int compareTo(java.lang.Object);
descriptor: (Ljava/lang/Object;)I
flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
Code:
  stack=2, locals=2, args_size=2
     0: aload_0       
     1: aload_1       
     2: checkcast     #2                  // class Customer
     5: invokevirtual #3                  // Method compareTo:(LCustomer;)I
     8: ireturn       
  LineNumberTable:
    line 7: 0
MethodParameters:
  Name                           Flags
  o                              synthetic  <-- see the name copied to the bridge method
RuntimeVisibleAnnotations:
  0: #15()]]></Answer>
<Answer><![CDATA[@Target(value = {ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@interface ParamAnnotation {}

@Target(value = {ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface MethodAnnotation {}

abstract class T<A,B> {
    B m(A a){return null;}
 }

 class CovariantReturnType extends T<Integer, Integer> {
     @MethodAnnotation
     Integer m(@ParamAnnotation Integer i) {
         return i;
     }

    public class VisibilityChange extends CovariantReturnType {}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23050921" questionTitle="I'm trying to convert some scala code to Java 8 to fell the new Lambda and parallel collections">
<Answer><![CDATA[public class ParallelTest {
    private static <T> T measure(Supplier<T> func) {
        long start = System.nanoTime();
        T result = func.get();
        long elapsed = System.nanoTime() - start;
        System.out.printf("Execution time %dns\n", elapsed);
        return result;
    }
    private static void measure(Runnable runnable) {
        measure(() -> { runnable.run(); return ""; });
    }
    private static int sum = 0; // Warning: data race
    private static void heavyComputation() {
        Permutations.of("abcdefghij").forEach(i -> ++sum);
    }
    public static void main(String... args) {
        measure(ParallelTest::heavyComputation);
        System.out.printf("Sum: %s\n", sum);
        measure(() -> IntStream.range(0, 10).forEach(i -> heavyComputation()));
        measure(() -> IntStream.range(0, 10).parallel().forEach(i -> heavyComputation()));
        System.out.printf("Sum: %s\n", sum);
    }
}]]></Answer>
<Answer><![CDATA[import com.google.common.collect.*;
import java.util.function.Supplier;

public class ParalelTest {

  // if the function returns something
  public static <T> T measure(Supplier<T> func) {
    long start = System.nanoTime();
    T result = func.get();
    long elapsed = System.nanoTime() - start;
    System.out.println(String.format("Method execution took %s ns", elapsed));
    return result;
  }

  // if the function doesn't return anything
  public static void measure(Runnable func) {
    long start = System.nanoTime();
    func.run();
    long elapsed = System.nanoTime() - start;
    System.out.println(String.format("Method execution took %s ns", elapsed));
  }

  public static void heavyComputation() {
    Collections2.permutations(Lists.charactersOf("abcdefghij")).stream().forEach(i -> sum += 1);
  }

  public static volatile int sum = 0;

  public static void main(String[] args) {
    measure(ParalelTest::heavyComputation);
    System.out.println("Sum of permutations: " + sum);
    measure(() -> {
        ContiguousSet.create(Range.closed(0, 9), DiscreteDomain.integers()).stream().forEach(i -> heavyComputation());
    });
    measure(() -> {
        ContiguousSet.create(Range.closed(0, 9), DiscreteDomain.integers()).parallelStream().forEach(i -> heavyComputation());
    });
    System.out.println("Sum of permutations: " + sum);
  }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23048212" questionTitle="Jersey... how to log all exceptions, but still invoke ExceptionMappers">
<Answer><![CDATA[public class ExceptionLogger implements ApplicationEventListener, RequestEventListener {

    private static final Logger log = LoggerFactory.getLogger(RequestExceptionLogger.class);

    @Override
    public void onEvent(final ApplicationEvent applicationEvent) {
    }

    @Override
    public RequestEventListener onRequest(final RequestEvent requestEvent) {
        return this;
    }

    @Override
    public void onEvent(RequestEvent paramRequestEvent) {
        if(paramRequestEvent.getType() == Type.ON_EXCEPTION) {
            log.error("", paramRequestEvent.getException());
        }
    }
}]]></Answer>
<Answer><![CDATA[@Provider
public class RestExceptionMapper implements ExceptionMapper<Throwable>
{
    private static final Logger log = LoggerFactory.getLogger(RestExceptionMapper.class);

    @Override
    public Response toResponse(Throwable exception)
    {
        log.error("toResponse() caught exception", exception);

        return Response.status(getStatusCode(exception))
                .entity(getEntity(exception))
                .build();
    }

    /*
     * Get appropriate HTTP status code for an exception.
     */
    private int getStatusCode(Throwable exception)
    {
        if (exception instanceof WebApplicationException)
        {
            return ((WebApplicationException)exception).getResponse().getStatus();
        }

        return Response.Status.INTERNAL_SERVER_ERROR.getStatusCode();
    }

    /*
     * Get response body for an exception.
     */
    private Object getEntity(Throwable exception)
    {
        // return stack trace for debugging (probably don't want this in prod...)
        StringWriter errorMsg = new StringWriter();
        exception.printStackTrace(new PrintWriter(errorMsg));
        return errorMsg.toString();            
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="23011547" questionTitle="WebService Client Generation Error with JDK8">
<Answer><![CDATA[<plugin>
        <!-- Needed to run the plugin xjc en Java 8 or superior -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0-alpha-2</version>
        <executions>
            <execution>
                <id>set-additional-system-properties</id>
                <goals>
                    <goal>set-system-properties</goal>
                </goals>
            </execution>
        </executions>
        <configuration>
            <properties>
                <property>
                    <name>javax.xml.accessExternalSchema</name>
                    <value>all</value>
                </property>
                <property>
                    <name>javax.xml.accessExternalDTD</name>
                    <value>all</value>
                </property>
            </properties>
        </configuration>
    </plugin>]]></Answer>
<Answer><![CDATA[<plugins>
    <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jaxws-maven-plugin</artifactId>
        <version>2.4.1</version>
        <executions>
            <execution>

                <goals>
                    <goal>wsimport</goal>
                </goals>
                <configuration>
                    <wsdlDirectory>path/to/dir/wsdl</wsdlDirectory>
                </configuration>
                <id>wsimport-web-service</id>
                <phase>generate-sources</phase>
            </execution>
        </executions>
        <dependencies>
            <dependency>
                <groupId>javax.xml</groupId>
                <artifactId>webservices-api</artifactId>
                <version>${webservices-api-version}</version>
            </dependency>
        </dependencies>
        <configuration>
            <vmArgs>
                <vmArg>-Djavax.xml.accessExternalSchema=all</vmArg>
            </vmArgs>
            <sourceDestDir>generated-sources/jaxws-wsimport</sourceDestDir>
            <xnocompile>true</xnocompile>
            <verbose>true</verbose>
            <extension>true</extension>
            <sei>/</sei>
        </configuration>
    </plugin>
</plugins>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22971222" questionTitle="Multiple Tasks JavaFX">
<Answer><![CDATA[task = new Task<Integer>() {
    protected Integer call() throws Exception {
        int iterations;
        for (iterations = 0; iterations < 1001; iterations++) {
            if (isCancelled()) {
                updateMessage("Cancelled");
                break;
            }
            updateProgress(iterations, 1001);
            updateMessage("Test");

            try {
                Thread.sleep(10);
            } catch (InterruptedException interrupted) {
                if (isCancelled()) {
                    //updateMessage("Cancelled");
                    break;
                }
            }
        }
        return iterations;
    }

    @Override
    protected void succeeded() {
        super.succeeded();
        updateMessage("Done");
        bar.progressProperty().unbind();
        bar.progressProperty().bind(task2.progressProperty());
        new Thread(task2).start();
    }
};]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    DropShadow shadow = new DropShadow();
    Button button = new Button("Start");
    Task<Integer> task;
    Task<Integer> task2;
    Label label1 = new Label("Status: NOT STARTED");
    ProgressBar bar = new ProgressBar(0);
    ProgressIndicator pi = new ProgressIndicator(0);
    Thread th = new Thread();

    public void start(Stage stage) {
        task = new Task<Integer>() {
            protected Integer call() throws Exception {
                int iterations;
                for (iterations = 0; iterations < 1001; iterations++) {
                    if (isCancelled()) {
                        updateMessage("Cancelled");
                        break;
                    }
                    updateProgress(iterations, 1001);
                    updateMessage("Test");

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException interrupted) {
                        if (isCancelled()) {
                            //updateMessage("Cancelled");
                            break;
                        }
                    }
                }
                return iterations;
            }
        };

        task2 = new Task<Integer>() {
            protected Integer call() throws Exception {
                int iterations;
                for (iterations = 0; iterations < 1001; iterations++) {
                    if (isCancelled()) {
                        updateMessage("Cancelled");
                        break;
                    }
                    updateProgress(iterations, 1001);
                    updateMessage("Test");

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException interrupted) {
                        if (isCancelled()) {
                            //updateMessage("Cancelled");
                            break;
                        }
                    }
                }
                return iterations;
            }
        };

    task.setOnSucceeded(new EventHandler<WorkerStateEvent>(){

        public void handle(WorkerStateEvent arg0) {
            label1.setText("Done");
            bar.progressProperty().unbind();
            bar.progressProperty().bind(task2.progressProperty());
        }
    });

    final int numTasks = 2 ;

    DoubleBinding totalProgress = Bindings.createDoubleBinding(new Callable<Double>() {
        @Override
        public Double call() {
            return ( Math.max(0, task1.getProgress())
                   + Math.max(0, task2.getProgress()) ) / numTasks ;
        },
        task1.progressProperty(), task2.progressProperty());

   pi.progressProperty().bind(totalProgress);

        Group root = new Group();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.setTitle("Progress Controls");

        final Slider slider = new Slider();
        slider.setMin(0);
        slider.setMax(50);

        bar.progressProperty().bind(task.progressProperty());
        //  pi.progressProperty().bind(task.progressProperty());
        label1.textProperty().bind(task.messageProperty());

        final ExecutorService exec = Executors.newSingleThreadExecutor();

        button.addEventHandler(MouseEvent.MOUSE_PRESSED, new EventHandler<MouseEvent>() {
            public void handle(MouseEvent e) {
                button.setEffect(shadow);
                exec.submit(task);
                exec.submit(task2);
            }
        });

        button.addEventHandler(MouseEvent.MOUSE_RELEASED, new EventHandler <MouseEvent>() {
            public void handle(MouseEvent arg0) {
                button.setEffect(null);
            }
        });

        final HBox hb = new HBox();
        hb.setSpacing(5);
        hb.setAlignment(Pos.CENTER);
        hb.getChildren().addAll(bar, pi, button, label1);
        scene.setRoot(hb);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22917518" questionTitle="Create a HashSet By Enumeration">
<Answer><![CDATA[public class MonthNumbers {

public enum months {
    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER;

    public static int getMonth(String monthName) {
        for(months m : months.values()) {
            if(m.toString().toLowerCase().equals(monthName.toLowerCase().trim())) {
                return m.ordinal();
            }
        }
        return -1;
    }
}


public static void main(String[] args) {
    System.out.println("January is " + months.getMonth("january"));
System.out.println("February is " + months.getMonth("February"));
System.out.println("March is " + months.getMonth("mArCh"));
System.out.println("April is " + months.getMonth("APRIL"));
}]]></Answer>
<Answer><![CDATA[@Entity
 @Table(name = "PROJECT_INDICATOR")
   public class Project_Indicator {

@Id
@GeneratedValue(strategy = GenerationType.AUTO)
private long id;
@NotNull
@ManyToOne
private Indicator indicator;
@NotNull
@ManyToOne
private Project project;
@NotNull
private int year;
public enum Months {
    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER;

    public static int getMonth(String monthName) {
        for(Months m : Months.values()) {
            if(m.toString().toLowerCase().equals(monthName.toLowerCase().trim())) {
                return m.ordinal();
            }
        }
        return -1;
    }
}]]></Answer>
<Answer><![CDATA[public enum MonthAbbreviation
{
    Jan(1),
    Feb(7);

    private final int monthValue;

    private MonthAbbreviation(final int monthValue)
    {
        this.monthValue = monthValue;
    }

    public int getValue()
    {
        return monthValue;
    }
}

public class Main
{
    public static void main(String[] args)
    {
        MonthAbbreviation monthAbbreviation;

        monthAbbreviation = MonthAbbreviation.valueOf("Jan");
        System.out.println(
            "Month: " +
            monthAbbreviation.toString() +
            " value: " +
            monthAbbreviation.getValue());

        monthAbbreviation = MonthAbbreviation.valueOf("Feb");
        System.out.println(
            "Month: " +
            monthAbbreviation.toString() +
            " value: " +
            monthAbbreviation.getValue());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22902568" questionTitle="Validating text fields completeness with logical conditions">
<Answer><![CDATA[/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package textfieldlogic;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

/**
 *
 * @author reegan
 */
public class TextFieldLogic extends Application {

    @Override
    public void start(Stage primaryStage) {
        FormattedTextField btn = new FormattedTextField("^[1-9]+$");
        btn.setText("Only Enter Numbers");

        FormattedTextField btn1 = new FormattedTextField("^[a-z]+$");
        btn1.setText("Only Enter Characters");

        VBox vBox = new VBox(20);
        vBox.getChildren().addAll(btn,btn1);

        StackPane root = new StackPane();
        root.getChildren().add(vBox);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * The main() method is ignored in correctly deployed JavaFX application.
     * main() serves only as fallback in case the application can not be
     * launched through deployment artifacts, e.g., in IDEs with limited FX
     * support. NetBeans ignores main().
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    public class FormattedTextField extends TextField {

    Matcher matcher;

    public FormattedTextField(String regex) {
        Pattern pattern = Pattern.compile(regex);
        matcher = pattern.matcher("");
        EventHandler<KeyEvent> filter = new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
                String s = getText() + t.getCharacter();
                matcher.reset(s);
                if (!( matcher.matches() || matcher.hitEnd())) {
                    t.consume();
                }
            }
        };
        addEventFilter(KeyEvent.KEY_TYPED, filter);
    } 
}

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.BooleanBinding;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class SimpleTextFieldValidation extends Application {

    @Override
    public void start(Stage primaryStage) {
        TextField tf1 = new TextField();
        TextField tf2 = new TextField();
        TextField tf3 = new TextField();
        TextField tf4 = new TextField();
        TextField tf5 = new TextField();
        TextField tf6 = new TextField();
        Button button = new Button("Submit");

        button.disableProperty().bind(
            emptyTextFieldBinding(tf1)
                .or(emptyTextFieldBinding(tf2))
                .or(emptyTextFieldBinding(tf3))
                .or(emptyTextFieldBinding(tf4))
                .or(emptyTextFieldBinding(tf5))
                .or(emptyTextFieldBinding(tf6))
             );

        VBox root = new VBox(5, tf1, tf2, tf3, tf4, tf5, tf6, button);
        root.setAlignment(Pos.CENTER);
        root.setPadding(new Insets(10));
        Scene scene = new Scene(root, 150, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private BooleanBinding emptyTextFieldBinding(TextField textField) {
        return Bindings.length(textField.textProperty()).isEqualTo(0);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22796742" questionTitle="Fit JavaFX WebView Browser content to window">
<Answer><![CDATA[package com.ruemerc;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Screen;
import javafx.stage.Stage;

public class MainWindow extends Application{

public static void main(String[] args) {
        launch(args);

    }

    @Override
    public void start(Stage primaryStage) throws Exception {

        WebView webview = new WebView();
        StackPane stackPane=new StackPane();
        stackPane.getChildren().add(webview);

        WebEngine webEngine= webview.getEngine();
        webEngine.setJavaScriptEnabled(true);       
        webEngine.load("http://www.ruemerc.co.ke/apps/smsgateway");
        webEngine.getLoadWorker().stateProperty().addListener(
                  new ChangeListener<Worker.State>() {
                  public void changed(@SuppressWarnings("rawtypes") ObservableValue ov, Worker.State oldState, Worker.State newState) {                               

                         if(newState.toString().equals("FAILED")){                       

                         webEngine.loadContent("<!DOCTYPE html><html><head><title>Page Title</title></head><body>"
                                + "<h1>Error:</h1>"
                                + "<p>Internet connection Problem.</p>" +"<button onclick=\"window.location.href='http://www.ruemerc.co.ke/apps/smsgateway/'\">Retry</button>"

                                + "</body></html>");
                         }

                  }


              });

        Scene scene=new Scene(stackPane);
        primaryStage.setTitle("Ruemerc SMS");
        primaryStage.getIcons().add(new Image("images/logoedtrack.png"));

        primaryStage.setScene(scene);

        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();

        //set Stage boundaries to visible bounds of the main screen
        primaryStage.setX(primaryScreenBounds.getMinX());
        primaryStage.setY(primaryScreenBounds.getMinY());
        primaryStage.setWidth(primaryScreenBounds.getWidth());
        primaryStage.setHeight(primaryScreenBounds.getHeight());

        primaryStage.show();

    }

}]]></Answer>
<Answer><![CDATA[package webscale;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javafx.application.Platform;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.transform.Scale;
import javafx.scene.web.WebView;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

public class WebScale extends JApplet {
    static ZoomingPane zoomingPane;
    private static JFXPanel fxContainer;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                final JFrame frame = new JFrame("JavaFX 2 in Swing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                JApplet applet = new WebScale();
                applet.init();

                frame.setContentPane(applet.getContentPane());

                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

                applet.start();

                frame.addComponentListener(new java.awt.event.ComponentAdapter() {
                    @Override
                    public void componentResized(java.awt.event.ComponentEvent evt) {
                        if (zoomingPane != null) {
                            zoomingPane.setZoomFactors((double)(frame.getWidth()/ 1280.0), (double)(frame.getHeight() / 800.0));
                        }
                    }
                });
            }
        });
    }

    @Override
    public void init() {
        fxContainer = new JFXPanel();
        fxContainer.setPreferredSize(new Dimension(300, 200));
        add(fxContainer, BorderLayout.CENTER);
        // create JavaFX scene
        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                createScene();
            }
        });
    }

    private void createScene() {
        WebView webView = new WebView();
        zoomingPane = new ZoomingPane(webView);
        BorderPane bp = new BorderPane();
        bp.setCenter(zoomingPane);
        fxContainer.setScene(new Scene(bp));
        webView.getEngine().load("http://google.pl");
    }

    private class ZoomingPane extends Pane {
        Node content;
        private final DoubleProperty zoomFactor = new SimpleDoubleProperty(1);
        private double zoomFactory = 1.0;

        private ZoomingPane(Node content) {
            this.content = content;
            getChildren().add(content);
            final Scale scale = new Scale(1, 1);
            content.getTransforms().add(scale);

            zoomFactor.addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
                    scale.setX(newValue.doubleValue());
                    scale.setY(zoomFactory);
                    requestLayout();
                }
            });
        }

        @Override
        protected void layoutChildren() {
            Pos pos = Pos.TOP_LEFT;
            double width = getWidth();
            double height = getHeight();
            double top = getInsets().getTop();
            double right = getInsets().getRight();
            double left = getInsets().getLeft();
            double bottom = getInsets().getBottom();
            double contentWidth = (width - left - right)/zoomFactor.get();
            double contentHeight = (height - top - bottom)/zoomFactory;
            layoutInArea(content, left, top,
                    contentWidth, contentHeight,
                    0, null,
                    pos.getHpos(),
                    pos.getVpos());
        }

        public final Double getZoomFactor() {
            return zoomFactor.get();
        }
        public final void setZoomFactor(Double zoomFactor) {
            this.zoomFactor.set(zoomFactor);
        }
        public final void setZoomFactors(Double zoomFactorx, Double Zoomfactory) {
            this.zoomFactory = Zoomfactory;
            this.zoomFactor.set(zoomFactorx);
        }

        public final DoubleProperty zoomFactorProperty() {
            return zoomFactor;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22789449" questionTitle="Export Stage into PDF">
<Answer><![CDATA[public class PrinterNodetExample extends Application {


@Override
public void start(Stage primaryStage) {
    Button btn = new Button();
    StackPane root = new StackPane();
    root.getChildren().add(btn);

    Scene scene = new Scene(root, 300, 250);
    btn.setText("Say 'Hello World'");
    btn.setOnAction(new EventHandler<ActionEvent>() {

        @Override
        public void handle(ActionEvent event) {
            System.out.println("To Printer!");
            PrinterJob job = PrinterJob.createPrinterJob();
            if(job != null){
            job.showPrintDialog(primaryStage); 
            job.printPage(root);
            job.endJob();
    }
        }
    });



    primaryStage.setTitle("Printer");
    primaryStage.setScene(scene);
    primaryStage.show();



}


public static void main(String[] args) {
    launch(args);
}}]]></Answer>
<Answer><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.SnapshotParameters;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.control.Button;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javax.imageio.ImageIO;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
 import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;


 public class NodeToPdf extends Application {

@Override
public void start(Stage primaryStage) {

    CategoryAxis xAxis = new CategoryAxis();
    xAxis.setLabel("x");
     NumberAxis yAxis = new NumberAxis();
    yAxis.setLabel("y");
    BarChart bar = new BarChart(xAxis, yAxis);
    bar.setMaxSize(300, 300);
    bar.setTitle("Bar node" );
    bar.setTranslateY(-100);

    Button btn = new Button();
    btn.setTranslateY(100);
    btn.setText("To Pdf'");



    btn.setOnAction(new EventHandler<ActionEvent>() {

        @Override
        public void handle(ActionEvent event) {
            WritableImage nodeshot = bar.snapshot(new SnapshotParameters(), null);
            File file = new File("chart.png");

try {
    ImageIO.write(SwingFXUtils.fromFXImage(nodeshot, null), "png", file);
} catch (IOException e) {

}

            PDDocument doc    = new PDDocument();
            PDPage page = new PDPage();
            PDImageXObject pdimage;
            PDPageContentStream content;
            try {
                pdimage = PDImageXObject.createFromFile("chart.png",doc);
                content = new PDPageContentStream(doc, page);
                content.drawImage(pdimage, 100, 100);
                content.close();
                doc.addPage(page);
                doc.save("pdf_file.pdf");
                doc.close();
                file.delete();
            } catch (IOException ex) {
                Logger.getLogger(NodeToPdf.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    });


    StackPane root = new StackPane();

    root.getChildren().add(btn);
    root.getChildren().add(bar);




    Scene scene = new Scene(root, 600, 600);


    primaryStage.setScene(scene);
    primaryStage.show();
}


public static void main(String[] args) {
    launch(args);
}

 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22780369" questionTitle="Make a label update while dragging a slider">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Demo extends Application {

    @Override
    public void start(Stage primaryStage) {
        // Add a scene
        VBox root = new VBox();
        Scene scene = new Scene(root, 500, 200);

        final Label betLabel = new Label("sdsd");

        final Slider betSlider = new Slider();
        betSlider.valueProperty().addListener(new ChangeListener() {

            @Override
            public void changed(ObservableValue arg0, Object arg1, Object arg2) {
                betLabel.textProperty().setValue(
                        String.valueOf((int) betSlider.getValue()));

            }
        });

        root.getChildren().addAll(betSlider, betLabel);
        betLabel.textProperty().setValue("abc");

        // show the stage
        primaryStage.setTitle("Demo");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Slide extends Application {
    @Override public void start(Stage stage) {   
        Label  label  = new Label();
        Slider slider = new Slider(1, 11, 5);

        label.textProperty().bind(
            Bindings.format(
                "%.2f",
                slider.valueProperty()
            )
        );

        VBox layout = new VBox(10, label, slider);
        layout.setStyle("-fx-padding: 10px; -fx-alignment: baseline-right");

        stage.setScene(new Scene(layout));
        stage.setTitle("Goes to");
        stage.show();
    }

    public static void main(String[] args) { launch(args); }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22714268" questionTitle="How to limit the amount of characters a javafx textfield">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TextFieldLimit extends Application {
    private static final int LIMIT = 10;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(final Stage primaryStage) {

        final TextField textField = new TextField();
        textField.lengthProperty().addListener(new ChangeListener<Number>() {

            @Override
            public void changed(ObservableValue<? extends Number> observable,
                    Number oldValue, Number newValue) {
                if (newValue.intValue() > oldValue.intValue()) {
                    // Check if the new character is greater than LIMIT
                    if (textField.getText().length() >= LIMIT) {

                        // if it's 11th character then just setText to previous
                        // one
                        textField.setText(textField.getText().substring(0, LIMIT));
                    }
                }
            }
        });

        VBox vbox = new VBox(20);
        vbox.getChildren().add(textField);

        Scene scene = new Scene(vbox, 400, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Objects;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.scene.control.TextField;   

public class LimitedTextField extends TextField {

    private final IntegerProperty maxLength;

    public LimitedTextField() {
        super();
        this.maxLength = new SimpleIntegerProperty(-1);
    }

    public IntegerProperty maxLengthProperty() {
        return this.maxLength;
    }

    public final Integer getMaxLength() {
        return this.maxLength.getValue();
    }

    public final void setMaxLength(Integer maxLength) {
        Objects.requireNonNull(maxLength, "Max length cannot be null, -1 for no limit");
        this.maxLength.setValue(maxLength);
    }

    @Override
    public void replaceText(int start, int end, String insertedText) {
        if (this.getMaxLength() <= 0) {
            // Default behavior, in case of no max length
            super.replaceText(start, end, insertedText);
        }
        else {
            // Get the text in the textfield, before the user enters something
            String currentText = this.getText() == null ? "" : this.getText();

            // Compute the text that should normally be in the textfield now
            String finalText = currentText.substring(0, start) + insertedText + currentText.substring(end);

            // If the max length is not excedeed
            int numberOfexceedingCharacters = finalText.length() - this.getMaxLength();
            if (numberOfexceedingCharacters <= 0) {
                // Normal behavior
                super.replaceText(start, end, insertedText);
            }
            else {
                // Otherwise, cut the the text that was going to be inserted
                String cutInsertedText = insertedText.substring(
                        0, 
                        insertedText.length() - numberOfexceedingCharacters
                );

                // And replace this text
                super.replaceText(start, end, cutInsertedText);
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22687943" questionTitle="Is it possible to declare that a Supplier&lt;T&gt; needs to throw an Exception?">
<Answer><![CDATA[@FunctionalInterface
public interface CheckedSupplier<T, E extends Exception> {
    public T get() throws E;
}

private <R> R getFromConfig(final String entryKey, final Function<String, R> converter) throws IOException {
    Objects.requireNonNull(entryKey);
    Objects.requireNonNull(converter);
    configLastModified = Files.getLastModifiedTime(configFile);
    return ConfigFileUtils.readFileEntry(configFile, entryKey, converter);
}

private <T> T handleIOException(final CheckedSupplier<T, IOException> supplier) {
    Objects.requireNonNull(supplier);
    try {
        return supplier.get();
    } catch (IOException ex) {
        throw new IllegalStateException("The config file (\"" + configFile + "\") has not been found.");
    }
}]]></Answer>
<Answer><![CDATA[// We need to describe supplier which can throw exceptions
@FunctionalInterface
public interface ThrowingSupplier<T> {
    T get() throws Exception;
}

// Now, wrapper
private <T> T callMethod(ThrowingSupplier<T> supplier) {
    try {
        return supplier.get();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
        return null;
}

// And usage example
String methodThrowsException(String a, String b, String c) throws Exception {
    // do something
}

String result = callMethod(() -> methodThrowsException(x, y, z));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22663681" questionTitle="JavaFX effect on background">
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.*;
import javafx.beans.property.*;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Insets;
import javafx.scene.*;
import javafx.scene.control.Label;
import javafx.scene.effect.*;
import javafx.scene.Cursor;
import javafx.scene.Node;
import javafx.scene.image.*;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Duration;

public class FrostyTech extends Application {

    private static final double BLUR_AMOUNT = 10;

    private static final Effect frostEffect =
        new BoxBlur(BLUR_AMOUNT, BLUR_AMOUNT, 3);

    private static final ImageView background = new ImageView();
    private static final StackPane layout = new StackPane();

    @Override public void start(Stage stage) {
        layout.getChildren().setAll(background, createContent());
        layout.setStyle("-fx-background-color: null");

        Scene scene = new Scene(
                layout,
                200, 300,
                Color.TRANSPARENT
        );

        Platform.setImplicitExit(false);

        scene.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2) Platform.exit();
        });
        makeSmoke(stage);

        stage.initStyle(StageStyle.TRANSPARENT);
        stage.setScene(scene);
        stage.show();

        background.setImage(copyBackground(stage));
        background.setEffect(frostEffect);

        makeDraggable(stage, layout);
    }

    // copy a background node to be frozen over.
    private Image copyBackground(Stage stage) {
        final int X = (int) stage.getX();
        final int Y = (int) stage.getY();
        final int W = (int) stage.getWidth();
        final int H = (int) stage.getHeight();

        try {
            java.awt.Robot robot = new java.awt.Robot();
            java.awt.image.BufferedImage image = robot.createScreenCapture(new java.awt.Rectangle(X, Y, W, H));

            return SwingFXUtils.toFXImage(image, null);
        } catch (java.awt.AWTException e) {
            System.out.println("The robot of doom strikes!");
            e.printStackTrace();

            return null;
        }
    }

    // create some content to be displayed on top of the frozen glass panel.
    private Label createContent() {
        Label label = new Label("Create a new question for drop shadow effects.\n\nDrag to move\n\nDouble click to close");
        label.setPadding(new Insets(10));

        label.setStyle("-fx-font-size: 15px; -fx-text-fill: green;");
        label.setMaxWidth(250);
        label.setWrapText(true);

        return label;
    }

    // makes a stage draggable using a given node.
    public void makeDraggable(final Stage stage, final Node byNode) {
        final Delta dragDelta = new Delta();
        byNode.setOnMousePressed(mouseEvent -> {
            // record a delta distance for the drag and drop operation.
            dragDelta.x = stage.getX() - mouseEvent.getScreenX();
            dragDelta.y = stage.getY() - mouseEvent.getScreenY();
            byNode.setCursor(Cursor.MOVE);
        });
        final BooleanProperty inDrag = new SimpleBooleanProperty(false);

        byNode.setOnMouseReleased(mouseEvent -> {
            byNode.setCursor(Cursor.HAND);

            if (inDrag.get()) {
                stage.hide();

                Timeline pause = new Timeline(new KeyFrame(Duration.millis(50), event -> {
                    background.setImage(copyBackground(stage));
                    layout.getChildren().set(
                            0,
                            background
                    );
                    stage.show();
                }));
                pause.play();
            }

            inDrag.set(false);
        });
        byNode.setOnMouseDragged(mouseEvent -> {
            stage.setX(mouseEvent.getScreenX() + dragDelta.x);
            stage.setY(mouseEvent.getScreenY() + dragDelta.y);

            layout.getChildren().set(
                    0,
                    makeSmoke(stage)
            );

            inDrag.set(true);
        });
        byNode.setOnMouseEntered(mouseEvent -> {
            if (!mouseEvent.isPrimaryButtonDown()) {
                byNode.setCursor(Cursor.HAND);
            }
        });
        byNode.setOnMouseExited(mouseEvent -> {
            if (!mouseEvent.isPrimaryButtonDown()) {
                byNode.setCursor(Cursor.DEFAULT);
            }
        });
    }

    private javafx.scene.shape.Rectangle makeSmoke(Stage stage) {
        return new javafx.scene.shape.Rectangle(
                stage.getWidth(),
                stage.getHeight(),
                Color.WHITESMOKE.deriveColor(
                        0, 1, 1, 0.08
                )
        );
    }

    /** records relative x and y co-ordinates. */
    private static class Delta {
        double x, y;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[// copy a background node to be frozen over.
    private Image copyBackground(Stage stage) {
        final int X = (int) stage.getX();
        final int Y = (int) stage.getY();
        final int W = (int) stage.getWidth();
        final int H = (int) stage.getHeight();
        final Screen screen = Screen.getPrimary();
        try {

            Robot rbt = com.sun.glass.ui.Application.GetApplication().createRobot();
            Pixels p = rbt.getScreenCapture(
                (int)screen.getBounds().getMinX(),
                (int)screen.getBounds().getMinY(), 
                (int)screen.getBounds().getWidth(), 
                (int)screen.getBounds().getHeight(), 
                true
            );

            WritableImage dskTop = new WritableImage((int)screen.getBounds().getWidth(), (int)screen.getBounds().getHeight());
            dskTop.getPixelWriter().setPixels(
                (int)screen.getBounds().getMinX(),
                (int)screen.getBounds().getMinY(),
                (int)screen.getBounds().getWidth(),
                (int)screen.getBounds().getHeight(),
                PixelFormat.getByteBgraPreInstance(),
                p.asByteBuffer(), 
                (int)(screen.getBounds().getWidth() * 4)
            );

            WritableImage image = new WritableImage(W,H);
            image.getPixelWriter().setPixels(0, 0, W, H, dskTop.getPixelReader(), X, Y);

            return image;
        } catch (Exception e) {
            System.out.println("The robot of doom strikes!");
            e.printStackTrace();

            return null;
        }
    }]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage primaryStage) {
    StackPane root = new StackPane();
    root.setStyle("-fx-background-color: null;");
    root.setPadding(new Insets(10));

    DoubleProperty doubleProperty = new SimpleDoubleProperty(0);

    Region region = new Region();
    region.styleProperty().bind(Bindings
            .concat("-fx-background-radius:20; -fx-background-color: rgba(56, 176, 209, ")
            .concat(doubleProperty)
            .concat(");"));
    region.setEffect(new DropShadow(10, Color.GREY));

    Slider slider = new Slider(0, 1, .3);
    doubleProperty.bind(slider.valueProperty());

    root.getChildren().addAll(region, slider);

    primaryStage.initStyle(StageStyle.TRANSPARENT);
    Scene scene = new Scene(root, 300, 250);
    scene.setFill(Color.TRANSPARENT);

    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22658322" questionTitle="Java 8: performance of Streams vs Collections">
<Answer><![CDATA[public static void main(String[] args) {
    //Calculating square root of even numbers from 1 to N       
    int min = 1;
    int max = 10000000;

    List<Integer> sourceList = new ArrayList<>();
    for (int i = min; i < max; i++) {
        sourceList.add(i);
    }

    List<Double> result = new LinkedList<>();


    //Collections approach
    long t0 = System.nanoTime();
    long elapsed = 0;
    for (Integer i : sourceList) {
        if(i % 2 == 0){
            result.add( doSomeCalculate(i));
        }
    }
    elapsed = System.nanoTime() - t0;       
    System.out.printf("Collections: Elapsed time:\t %d ns \t(%f seconds)%n", elapsed, elapsed / Math.pow(10, 9));


    //Stream approach
    Stream<Integer> stream = sourceList.stream();       
    t0 = System.nanoTime();
    result = stream.filter(i -> i%2 == 0).map(i -> doSomeCalculate(i))
            .collect(Collectors.toList());
    elapsed = System.nanoTime() - t0;       
    System.out.printf("Streams: Elapsed time:\t\t %d ns \t(%f seconds)%n", elapsed, elapsed / Math.pow(10, 9));


    //Parallel stream approach
    stream = sourceList.stream().parallel();        
    t0 = System.nanoTime();
    result = stream.filter(i -> i%2 == 0).map(i ->  doSomeCalculate(i))
            .collect(Collectors.toList());
    elapsed = System.nanoTime() - t0;       
    System.out.printf("Parallel streams: Elapsed time:\t %d ns \t(%f seconds)%n", elapsed, elapsed / Math.pow(10, 9));      
}

static double doSomeCalculate(int input) {
    for(int i=0; i<100000; i++){
        Math.sqrt(i+input);
    }
    return Math.sqrt(input);
}]]></Answer>
<Answer><![CDATA[@OutputTimeUnit(TimeUnit.NANOSECONDS)
@BenchmarkMode(Mode.AverageTime)
@OperationsPerInvocation(StreamVsVanilla.N)
public class StreamVsVanilla {
    public static final int N = 10000;

    static List<Integer> sourceList = new ArrayList<>();
    static {
        for (int i = 0; i < N; i++) {
            sourceList.add(i);
        }
    }

    @Benchmark
    public List<Double> vanilla() {
        List<Double> result = new ArrayList<>(sourceList.size() / 2 + 1);
        for (Integer i : sourceList) {
            if (i % 2 == 0){
                result.add(Math.sqrt(i));
            }
        }
        return result;
    }

    @Benchmark
    public List<Double> stream() {
        return sourceList.stream()
                .filter(i -> i % 2 == 0)
                .map(Math::sqrt)
                .collect(Collectors.toCollection(
                    () -> new ArrayList<>(sourceList.size() / 2 + 1)));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22637292" questionTitle="JavaFX TableView with Custom Cell Datepicker &quot;OnEditCommit&quot; is not invoked">
<Answer><![CDATA[public class DatePickerCell extends TableCell<Deduction, LocalDate> {

    private DatePicker datePicker;
   private TableColumn column;
   // private TableCell cell;

    public DatePickerCell(TableColumn column) { //
        super();

        this.column = column;
        this.datePicker = new DatePicker(getDate());

    }

    @Override
    public void startEdit() {
            if (!isEmpty()) {
                    super.startEdit();
                    createDatePicker();
                    setText(null);
                    setGraphic(datePicker);

                    Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                    datePicker.requestFocus();
                            }
                    });
                    //Platform.runLater(datePicker::requestFocus);
            }
    }

    @Override
    public void updateItem(LocalDate item, boolean empty) {

        super.updateItem(item, empty);

      //  SimpleDateFormat smp = new SimpleDateFormat("dd/MM/yyyy");

       /* if (null == this.datePicker) {
            System.out.println("datePicker is NULL");
        }*/ //TO be reviewed

        if (empty) {
            setText(null);
            setGraphic(null);
        } else {

            if (isEditing()) {
                 if (datePicker != null) {
                        datePicker.setValue(getItem());
                    }
                    setText(null);
                    setGraphic(datePicker);

            } else {
                setText(getItem().toString());
                setGraphic(null);

            }
        }
    }


    private LocalDate getDate() {
            return getItem() == null ? LocalDate.now() : getItem();
        }

    private void createDatePicker() {
        this.datePicker = new DatePicker(getDate());
        datePicker.setMinWidth(this.getWidth() - this.getGraphicTextGap() * 2);

        this.datePicker.editableProperty().bind(column.editableProperty());
        this.datePicker.disableProperty().bind(column.editableProperty().not());

        this.datePicker.setOnShowing(event -> {

            final TableView tableView = getTableView();
            tableView.getSelectionModel().select(getTableRow().getIndex());
            tableView.edit(tableView.getSelectionModel().getSelectedIndex(), column);       


        });

         datePicker.setOnAction((e) -> {
             commitEdit(datePicker.getValue());

                TableColumn nextColumn = getNextColumn(true);

            if (nextColumn != null) {
                    getTableView().edit(getTableRow().getIndex(),
                                    nextColumn);
            }

            });


        datePicker.focusedProperty().addListener(
            new ChangeListener<Boolean>() {
                    @Override
                    public void changed(
                                    ObservableValue<? extends Boolean> arg0,
                                    Boolean arg1, Boolean arg2) {
                            if (!arg2) {


                                    commitEdit(datePicker.getValue());

                            }
                    }
            });



        datePicker.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
              //   System.out.println("setOnKeyPressed datapicker get value  ...." + t.getCode());
                   /* if (t.getCode() == KeyCode.ENTER) {
                            commitEdit(datePicker.getValue());
                            System.out.println("Enter datapicker get value " + datePicker.getValue());
                    } else */if (t.getCode() == KeyCode.ESCAPE) {
                            cancelEdit();
                    } else if (t.getCode() == KeyCode.ENTER){
                            commitEdit(datePicker.getValue());
                       //     System.out.println("Tab datapicker get value " + datePicker.getValue());
                            TableColumn nextColumn = getNextColumn(!t.isShiftDown());
                         //   System.out.println("nextColumn datapicker get value " + nextColumn.getId());
                    if (nextColumn != null) {
                            getTableView().edit(getTableRow().getIndex(),
                                            nextColumn);
                    }

                    }
            }

        });


        addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {

            @Override
            public void handle(KeyEvent event) {
                if (event.getCode() == KeyCode.TAB) {

                    commitEdit(LocalDate.parse(datePicker.getEditor().getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                     TableColumn nextColumn = getNextColumn(true);
                    if (nextColumn != null) {
                            getTableView().edit(getTableRow().getIndex(),
                                            nextColumn);
                    }
                }

            }

        });




//     
//    //    setAlignment(Pos.CENTER);
    }

    @Override
    public void cancelEdit() {
        super.cancelEdit();

            setText(getItem().toString());
            setGraphic(null);
    }



    public DatePicker getDatePicker() {
        return datePicker;
    }


    public void setDatePicker(DatePicker datePicker) {
        this.datePicker = datePicker;
    }

                private String getString() {
            return getItem() == null ? "" : getItem().toString();
        }

        private TableColumn<Deduction, ?> getNextColumn(boolean forward) {
            List<TableColumn<Deduction, ?>> columns = new ArrayList<>();
            for (TableColumn<Deduction, ?> column : getTableView().getColumns()) {
                columns.addAll(getLeaves(column));
            }
            // There is no other column that supports editing.
            if (columns.size() < 2) {
                return null;
            }
            int currentIndex = columns.indexOf(getTableColumn());
            int nextIndex = currentIndex;
            if (forward) {
                nextIndex++;
                if (nextIndex > columns.size() - 1) {
                    nextIndex = 0;
                }
            } else {
                nextIndex--;
                if (nextIndex < 0) {
                    nextIndex = columns.size() - 1;
                }
            }
            return columns.get(nextIndex);
        }

        private List<TableColumn<Deduction, ?>> getLeaves(
                TableColumn<Deduction, ?> root) {
            List<TableColumn<Deduction, ?>> columns = new ArrayList<>();
            if (root.getColumns().isEmpty()) {
                // We only want the leaves that are editable.
                if (root.isEditable()) {
                    columns.add(root);
                }
                return columns;
            } else {
                for (TableColumn<Deduction, ?> column : root.getColumns()) {
                    columns.addAll(getLeaves(column));
                }
                return columns;
            }
        }

}]]></Answer>
<Answer><![CDATA[public class ColorPickerTableCell<Inputs> extends TableCell<Inputs, Color>{
private ColorPicker cp;

public ColorPickerTableCell(){        
    cp = new ColorPicker(); 
    cp.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
            commitEdit(cp.getValue());
            updateItem(cp.getValue(), isEmpty());
            ((Inputs) getTableView().getItems().get(
                    getTableRow().getIndex())
                    ).setColor(cp.getValue());
        }            
    });                
    setGraphic(cp);
    setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    setEditable(true);        
}     
@Override
protected void updateItem(Color item, boolean empty) {
    super.updateItem(item, empty);
    cp.setVisible(!empty);
    this.setItem(item);
    cp.setValue(item);
}
}]]></Answer>
<Answer><![CDATA[public class ColorTableCell<T> extends TableCell<T, Color> {    
    private final ColorPicker colorPicker;

    public ColorTableCell(TableColumn<T, Color> column) {
    this.colorPicker = new ColorPicker();
    this.colorPicker.editableProperty().bind(column.editableProperty());
    this.colorPicker.disableProperty().bind(column.editableProperty().not());
    this.colorPicker.setOnShowing(event -> {
        final TableView<T> tableView = getTableView();
        tableView.getSelectionModel().select(getTableRow().getIndex());
        tableView.edit(tableView.getSelectionModel().getSelectedIndex(), column);       
    });
    this.colorPicker.valueProperty().addListener((observable, oldValue, newValue) -> {
        if(isEditing()) {
        commitEdit(newValue);
        }
    });     
    setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    }

    @Override
    protected void updateItem(Color item, boolean empty) {
    super.updateItem(item, empty);  

    setText(null);  
    if(empty) {     
        setGraphic(null);
    } else {        
        this.colorPicker.setValue(item);
        this.setGraphic(this.colorPicker);
    } 
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22582706" questionTitle="Javafx select multiple rows">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TableTest extends Application {

    @Override
    public void start(Stage primaryStage) {
        ObservableList<LineItem> items = FXCollections.observableArrayList();
        items.addAll(new LineItem("hello",123.45),
                     new LineItem("paid in full",0.01),
                     new LineItem("paid",0.01),
                     new LineItem("due",0.01),
                     new LineItem("paid",0.01));

        ObservableList<LineItem> filteredItems = FXCollections.observableArrayList(items);
        TableView<LineItem> tableView = new TableView<>(filteredItems);
        ObservableList<TablePosition> selectedCells = FXCollections.observableArrayList();

        Button multi = new Button("Multi-select");
        multi.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                multi.setText((multi.getText().equals("Multi-select"))?"Single-select":"Multi-select");
                selectedCells.clear();
            }
        });

        TableColumn<LineItem,String> descCol = new TableColumn<>("desc");
        descCol.setCellValueFactory(new PropertyValueFactory<>("desc"));

        TableColumn<LineItem, Double> amountCol = new TableColumn<>("amount");
        amountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));

        tableView.getColumns().addAll(descCol,amountCol);
        tableView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        tableView.getSelectionModel().setCellSelectionEnabled(true);

        //maybe you want onTouchPressed here for tablet
        tableView.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                if (multi.getText().equals("Single-select")) return;
                selectedCells.add(
                    tableView.getSelectionModel().getSelectedCells().get(
                        tableView.getSelectionModel().getSelectedCells().size()-1
                    )
                );
                for (TablePosition tp : selectedCells){
                    tableView.getSelectionModel().select(tp.getRow(), tp.getTableColumn());
                }
            }
        });

        VBox root = new VBox();
        root.getChildren().addAll(tableView, multi);
        Scene scene = new Scene(root, 300, 300);

        primaryStage.setTitle("multi select table test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }


    public class LineItem {

        private final StringProperty desc = new SimpleStringProperty();
        private final DoubleProperty amount = new SimpleDoubleProperty();

        public StringProperty descProperty() {return desc;}
        public DoubleProperty amountProperty() {return amount;}

        public LineItem(String dsc, double amt) {
            desc.set(dsc); amount.set(amt);
        }
    }

}]]></Answer>
<Answer><![CDATA[boxTable.setRowFactory(new Callback<TableView<Box>, TableRow<Box>>() {
    @Override
    public TableRow<Box> call(TableView<Box> tableView2)
    {
        final TableRow<Box> row = new TableRow<>();

        row.addEventFilter(MouseEvent.MOUSE_PRESSED, new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event)
            {
                final int index = row.getIndex();

                if (index >= 0 && index < boxTable.getItems().size())
                {
                    if(boxTable.getSelectionModel().isSelected(index))
                        boxTable.getSelectionModel().clearSelection(index);
                    else
                        boxTable.getSelectionModel().select(index);

                    event.consume();
                }
            }
        });
        return row;
    }
});]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22569040" questionTitle="Reader#lines() parallelizes badly due to nonconfigurable batch size policy in its spliterator">
<Answer><![CDATA[public Stream<String> lines() {
    Iterator<String> iter = new Iterator<String>() {
        String nextLine = null;

        @Override
        public boolean hasNext() {
            if (nextLine != null) {
                return true;
            } else {
                try {
                    nextLine = readLine();
                    return (nextLine != null);
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            }
        }

        @Override
        public String next() {
            if (nextLine != null || hasNext()) {
                String line = nextLine;
                nextLine = null;
                return line;
            } else {
                throw new NoSuchElementException();
            }
        }
    };
    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
            iter, Spliterator.ORDERED | Spliterator.NONNULL), false);
}]]></Answer>
<Answer><![CDATA[import static java.util.Spliterators.spliterator;
import static java.util.stream.StreamSupport.stream;

import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class FixedBatchSpliteratorWrapper<T> implements Spliterator<T> {
  private final Spliterator<T> spliterator;
  private final int batchSize;
  private final int characteristics;
  private long est;

  public FixedBatchSpliteratorWrapper(Spliterator<T> toWrap, long est, int batchSize) {
    final int c = toWrap.characteristics();
    this.characteristics = (c & SIZED) != 0 ? c | SUBSIZED : c;
    this.spliterator = toWrap;
    this.est = est;
    this.batchSize = batchSize;
  }
  public FixedBatchSpliteratorWrapper(Spliterator<T> toWrap, int batchSize) {
    this(toWrap, toWrap.estimateSize(), batchSize);
  }

  public static <T> Stream<T> toFixedBatchStream(Stream<T> in, int batchSize) {
    return stream(new FixedBatchSpliteratorWrapper<>(in.spliterator(), batchSize), true);
  }

  @Override public Spliterator<T> trySplit() {
    final HoldingConsumer<T> holder = new HoldingConsumer<>();
    if (!spliterator.tryAdvance(holder)) return null;
    final Object[] a = new Object[batchSize];
    int j = 0;
    do a[j] = holder.value; while (++j < batchSize && tryAdvance(holder));
    if (est != Long.MAX_VALUE) est -= j;
    return spliterator(a, 0, j, characteristics());
  }
  @Override public boolean tryAdvance(Consumer<? super T> action) {
    return spliterator.tryAdvance(action);
  }
  @Override public void forEachRemaining(Consumer<? super T> action) {
    spliterator.forEachRemaining(action);
  }
  @Override public Comparator<? super T> getComparator() {
    if (hasCharacteristics(SORTED)) return null;
    throw new IllegalStateException();
  }
  @Override public long estimateSize() { return est; }
  @Override public int characteristics() { return characteristics; }

  static final class HoldingConsumer<T> implements Consumer<T> {
    Object value;
    @Override public void accept(T value) { this.value = value; }
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22481540" questionTitle="Hibernate exception _$$_javassist_0 cannot be cast to javassist.util.proxy.Proxy">
<Answer><![CDATA[<org.hibernate.version>4.2.15.Final</org.hibernate.version>
<org.pentaho.di>6.0.1.0-386</org.pentaho.di>


<dependency>
            <groupId>pentaho-kettle</groupId>
            <artifactId>kettle-core</artifactId>
            <version>${org.pentaho.di}</version>
            <exclusions>
                <exclusion>
                    <artifactId>xercesImpl</artifactId>
                    <groupId>xerces</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>javassist</artifactId>
                    <groupId>javassist</groupId>
                </exclusion>
            </exclusions>
        </dependency>



    <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>${org.hibernate.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>ehcache-core</artifactId>
                    <groupId>net.sf.ehcache</groupId>
                </exclusion>
            </exclusions>
        </dependency>

+- org.hibernate:hibernate-ehcache:jar:4.2.15.Final:compile
[INFO] |  +- org.jboss.logging:jboss-logging:jar:3.1.0.GA:compile
[INFO] |  \- org.hibernate:hibernate-core:jar:4.2.15.Final:compile
[INFO] |     +- antlr:antlr:jar:2.7.7:compile
[INFO] |     +- (org.jboss.logging:jboss-logging:jar:3.1.0.GA:compile - omitted for duplicate)
[INFO] |     +- (dom4j:dom4j:jar:1.6.1:compile - omitted for duplicate)
[INFO] |     +- org.javassist:javassist:jar:3.18.1-GA:compile]]></Answer>
<Answer><![CDATA[<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>${hibernate.version}</version>
    <exclusions>
        <exclusion>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>${hibernate.version}</version>
    <exclusions>
        <exclusion>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
        </exclusion>
    </exclusions>
</dependency>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22407801" questionTitle="Merge 2 XML &amp; Extract this data using java and store it in db table">
<Answer><![CDATA[package com.techassignment;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class Class1 {
    static public void main(String[] arg)
    {
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    DocumentBuilder db = null;
    Document doc = null;
    Document doc2 = null;
    {
    try {
            db = dbf.newDocumentBuilder();
            doc = db.parse(new File("C:\\Users\\mkar\\workspace\\techassignment - new\\src\\com\\techassignment\\1st.xml"));
            doc2 = db.parse(new File("C:\\Users\\mkar\\workspace\\techassignment - new\\src\\com\\techassignment\\2nd.xml"));
            NodeList ndListFirstFile = doc.getElementsByTagName("person");

            Node nodeSalary = doc.importNode(doc2.getElementsByTagName("salary").item(0), true);
            Node nodePension = doc.importNode(doc2.getElementsByTagName("pension").item(0), true);
            Node nodeSalary1 = doc.importNode(doc2.getElementsByTagName("salary").item(1), true);
            Node nodePension1 = doc.importNode(doc2.getElementsByTagName("pension").item(1), true);

            ndListFirstFile.item(0).appendChild(nodeSalary);
            ndListFirstFile.item(0).appendChild(nodePension);
            ndListFirstFile.item(1).appendChild(nodeSalary1);
            ndListFirstFile.item(1).appendChild(nodePension1);

          TransformerFactory tFactory = TransformerFactory.newInstance();
          Transformer transformer = tFactory.newTransformer();
          transformer.setOutputProperty(OutputKeys.INDENT, "yes");  

          DOMSource source = new DOMSource(doc);
          StreamResult result = new StreamResult(new StringWriter());
          transformer.transform(source, result); 


          Writer output = null ;      
          output = new BufferedWriter(new FileWriter("C:\\Users\\mkar\\workspace\\techassignment - new\\src\\com\\techassignment\\testFinal.xml"));
          String xmlOutput = result.getWriter().toString();

          output.write(xmlOutput);

          output.close();
          System.out.println("XML Merged");

    } catch (ParserConfigurationException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } catch (SAXException e2) {
        // TODO Auto-generated catch block
        e2.printStackTrace();
    } catch (IOException e3) {
        // TODO Auto-generated catch block
        e3.printStackTrace();
    } catch (TransformerException e4) {
        // TODO Auto-generated catch block
        e4.printStackTrace();
    }

    }
    }
}]]></Answer>
<Answer><![CDATA[Document xml1 = new SAXBuilder().build(new StringReader("<geodata>\n"
                + " <person name=\"tom\">\n"
                + "       <address>2344 States Drive, MA 01213, USA</address>\n"
                + "       <phonenumber>333-222-2222</phonenumber>\n"
                + " </person>\n"
                + " <person name=\"mat\">\n"
                + "       <address>2345 Gates Drive, PA 11213, USA</address>\n"
                + "       <phonenumber>444-222-2222</phonenumber>\n"
                + " </person>\n"
                + "</geodata>"));
        Document xml2 = new SAXBuilder().build(new StringReader("<salarydata>\n"
                + " <person name=\"mat\">\n"
                + "       <salary>$3000</salary>\n"
                + "       <pension>$500</pension>\n"
                + " </person>\n"
                + " <person name=\"tom\">\n"
                + "       <salary>$3500</salary>\n"
                + "       <pension>$700</pension>\n"
                + " </person>\n"
                + "</salarydata>"));

        List<Element> geodata = xml1.getRootElement().getChildren();
        List<Element> salarydata = xml2.getRootElement().getChildren();
        //Element root = new Element("persondata");
        for (Element e : geodata) {
            for (Element e2 : salarydata) {
                if (e.getAttributeValue("name").equals(e2.getAttributeValue("name"))) {
                    e.addContent(e2.removeContent());
                }
            }
        }
        Element rootNode = xml1.getRootElement();
        rootNode.setName("persondata");
        new XMLOutputter().output(xml1, System.out);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22382453" questionTitle="Java 8 Streams FlatMap method example">
<Answer><![CDATA[List<Task> tasks =
            Arrays.asList(
                    new Task(
                            false,//completed sign
                            "My important task",//task name (text)
                            LocalDateTime.now().plus(2, ChronoUnit.DAYS),//first reminder(start)
                            true,//is task repetitive?
                            1,//reminder interval
                            ChronoUnit.DAYS,//interval unit
                            5//total number of reminders
                    )
            );

tasks.stream().flatMap(
        x -> LongStream.iterate(
                x.getStart().toEpochSecond(ZoneOffset.UTC),
                p -> (p + x.getRepeatPeriod()*x.getRepeatUnit().getDuration().getSeconds())
        ).limit(x.getRepeatCount()).boxed()
        .map( y -> new Task(x,LocalDateTime.ofEpochSecond(y,0,ZoneOffset.UTC)))
).forEach(System.out::println);]]></Answer>
<Answer><![CDATA[public class SalesTerritories
{
    private static final Set<SalesTerritory> territories
        = new HashSet<>(
            Arrays.asList(
                new SalesTerritory[]{
                    new SalesTerritory( "North-East, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Maine", "New Hampshire", "Vermont",
                                                                                    "Rhode Island", "Massachusetts", "Connecticut",
                                                                                    "New York", "New Jersey", "Delaware", "Maryland",
                                                                                    "Eastern Pennsylvania", "District of Columbia" } ) ) ),
                    new SalesTerritory( "Appalachia, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "West-Virgina", "Kentucky",
                                                                                    "Western Pennsylvania" } ) ) ),
                    new SalesTerritory( "South-East, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Virginia", "North Carolina", "South Carolina",
                                                                                    "Georgia", "Florida", "Alabama", "Tennessee",
                                                                                    "Mississippi", "Arkansas", "Louisiana" } ) ) ),
                    new SalesTerritory( "Mid-West, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Ohio", "Michigan", "Wisconsin", "Minnesota",
                                                                                    "Iowa", "Missouri", "Illinois", "Indiana" } ) ) ),
                    new SalesTerritory( "Great Plains, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Oklahoma", "Kansas", "Nebraska",
                                                                                    "South Dakota", "North Dakota",
                                                                                    "Eastern Montana",
                                                                                    "Wyoming", "Colorada" } ) ) ),
                    new SalesTerritory( "Rocky Mountain, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Western Montana", "Idaho", "Utah", "Nevada" } ) ) ),
                    new SalesTerritory( "South-West, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Arizona", "New Mexico", "Texas" } ) ) ),
                    new SalesTerritory( "Pacific North-West, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "Washington", "Oregon", "Alaska" } ) ) ),
                    new SalesTerritory( "Pacific South-West, USA",
                                        new HashSet<>( Arrays.asList( new String[]{ "California", "Hawaii" } ) ) )
                }
            )
        );

    public static Set<SalesTerritory> getAllTerritories()
    {
        return Collections.unmodifiableSet( territories );
    }

    private SalesTerritories()
    {
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22375891" questionTitle="Annotating the functional interface of a Lambda Expression">
<Answer><![CDATA[import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.TypePath;
import org.objectweb.asm.TypeReference;

public class Java8Example {
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE_USE)
    public @interface MyTypeAnnotation {
        public String value();
    }

    public static void main(String[] args) {
        List<String> list = Arrays.asList("World!", "Type Annotations!");
        testTypeAnnotation(list, new @MyTypeAnnotation("Hello ") Consumer<String>() {
            @Override
            public void accept(String str) {
                System.out.println(str);
            }
        });
        list = Arrays.asList("Type-Cast Annotations!");
        testTypeAnnotation(list,(@MyTypeAnnotation("Hello ") Consumer<String>) (p -> System.out.println(p)));
    }

    public static void testTypeAnnotation(List<String> list, Consumer<String> consumer){
        MyTypeAnnotation annotation = null;
        for (AnnotatedType t :  consumer.getClass().getAnnotatedInterfaces()) {
            annotation = t.getAnnotation(MyTypeAnnotation.class);
            if (annotation != null) {
                break;
            }
        }
        if (annotation == null) {
            // search for annotated parameter instead
            loop: for (Method method : consumer.getClass().getMethods()) {
                for (AnnotatedType t : method.getAnnotatedParameterTypes()) {
                    annotation = t.getAnnotation(MyTypeAnnotation.class);
                    if (annotation != null) {
                        break loop;
                    }
                }
            }
        }
        if (annotation == null) {
            annotation = findCastAnnotation();
        }
        for (String str : list) {
            if (annotation != null) {
                System.out.print(annotation.value());
            }
            consumer.accept(str);
        }
    }

    private static MyTypeAnnotation findCastAnnotation() {
        // foundException gets thrown, when the cast annotation is found or the search ends.
        // The found annotation will then be stored at foundAnnotation[0]
        final RuntimeException foundException = new RuntimeException();
        MyTypeAnnotation[] foundAnnotation = new MyTypeAnnotation[1];
        try {
            // (1) find the calling method
            StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
            StackTraceElement previous = null;
            for (int i = 0; i < stackTraceElements.length; i++) {
                if (stackTraceElements[i].getMethodName().equals("testTypeAnnotation")) {
                    previous = stackTraceElements[i+1];
                }
            }
            if (previous == null) {
                // shouldn't happen
                return null;
            }
            final String callingClassName = previous.getClassName();
            final String callingMethodName = previous.getMethodName();
            final int callingLineNumber = previous.getLineNumber();
            // (2) read and visit the calling class
            ClassReader cr = new ClassReader(callingClassName);
            cr.accept(new ClassVisitor(Opcodes.ASM5) {
                @Override
                public MethodVisitor visitMethod(int access, String name,String desc, String signature, String[] exceptions) {
                    if (name.equals(callingMethodName)) {
                        // (3) visit the calling method
                        return new MethodVisitor(Opcodes.ASM5) {
                            int lineNumber;
                            String type;
                            public void visitLineNumber(int line, Label start) {
                                this.lineNumber = line;
                            };
                            public void visitTypeInsn(int opcode, String type) {
                                if (opcode == Opcodes.CHECKCAST) {
                                    this.type = type;
                                } else{
                                    this.type = null;
                                }
                            };
                            public AnnotationVisitor visitInsnAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {
                                if (lineNumber == callingLineNumber) {
                                    // (4) visit the annotation, if this is the calling line number AND the annotation is 
                                    // of type MyTypeAnnotation AND it was a cast expression to "java.util.function.Consumer"
                                    if (desc.endsWith("Java8Example$MyTypeAnnotation;") && this.type != null && this.type.equals("java/util/function/Consumer")) {
                                        TypeReference reference = new TypeReference(typeRef);
                                        if (reference.getSort() == TypeReference.CAST) {
                                            return new AnnotationVisitor(Opcodes.ASM5) {
                                                public void visit(String name, final Object value) {
                                                    if (name.equals("value")) {
                                                        // Heureka! - we found the Cast Annotation
                                                        foundAnnotation[0] = new MyTypeAnnotation() {
                                                            @Override
                                                            public Class<? extends Annotation> annotationType() {
                                                                return MyTypeAnnotation.class;
                                                            }
                                                            @Override
                                                            public String value() {
                                                                return value.toString();
                                                            }
                                                        };
                                                        // stop search (Annotation found)
                                                        throw foundException;
                                                    }
                                                };
                                            };
                                        }
                                    }
                                } else if (lineNumber > callingLineNumber) {
                                    // stop search (Annotation not found)
                                    throw foundException;
                                }
                                return null;
                            };

                        };
                    }
                    return null;
                }
            }, 0);
        } catch (Exception e) {
            if (foundException == e) {
                return foundAnnotation[0];
            } else{
                e.printStackTrace();
            }
        }
        return null;
    }
}]]></Answer>
<Answer><![CDATA[import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.function.Consumer;

public class Main
{
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE_USE)
    public @interface MyAnnotation {
        public String value();
    }

    @MyAnnotation("Get this")
    interface AnnotatedConsumer<T> extends Consumer<T>{};

    public static void main( String[] args )
    {
        printMyAnnotationValue( (AnnotatedConsumer<?>)value->{} );
    }

    public static void printMyAnnotationValue( Consumer<?> consumer )
    {
        Class<?> clas = consumer.getClass();
        MyAnnotation annotation = clas.getAnnotation( MyAnnotation.class );
        for( Class<?> infClass : clas.getInterfaces() ){
            annotation = infClass.getAnnotation( MyAnnotation.class );
            System.out.println( "MyAnnotation value: " + annotation.value() );
        }
    }
}]]></Answer>
<Answer><![CDATA[public class Calculator {

public static void main(String[] args) {

    try(Scanner scanner=new Scanner(System.in)){
    System.out.println("Enter the operation to perform");
    String key=scanner.next();
    int i,j;
    switch (key) {
    case "Add":
        System.out.println("Input 2 values for addtion");
        i =scanner.nextInt();
        j=scanner.nextInt();
        Calculate<Integer> add=(Integer a, Integer b)-> a+b;
        System.out.println("After Addition of values="+add.calculate(i, j));
        break;

    case "Multiply":
        System.out.println("Input 2 values for Multiplication");
         i=scanner.nextInt();
         j=scanner.nextInt();
         Calculate<Integer> multiplication=(a,b)->a*b;
         System.out.println("After Multiplication of values="+multiplication.calculate(i, j));
        break;
    case "Subtract":
        System.out.println("Input 2 values for Subtraction");
         i=scanner.nextInt();
         j=scanner.nextInt();
         Calculate<Integer> subtract=(a,b)->a-b;
        System.out.println("After Subtraction of values="+subtract.calculate(i, j));
        break;
    case "Division":
        System.out.println("Input 2 values for Division");
         i=scanner.nextInt();
         j=scanner.nextInt();
         Calculate<Integer> division=(a,b)->a/b;
         if(j>0){
        System.out.println("After Division of values="+division.calculate(i, j));
         }else{
             throw new Exception("Second value is 0. Please change the value");
         }
        break;

    default:
        break;
    }
    }catch(Exception e){
        e.printStackTrace();
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22363925" questionTitle="JSR-353 How to add null values using javax.json.JsonObjectBuilder">
<Answer><![CDATA[public final class SafeJson {
    private static final String KEY = "1";

    //private ctor with exception throwing

    public static JsonValue nvl(final String ref) {
        if (ref == null) {
            return JsonValue.NULL;
        }
        return Json.createObjectBuilder().add(KEY, ref).build().get(KEY);
    }

    public static JsonValue nvl(final Integer ref) {
        if (ref == null) {
            return JsonValue.NULL;
        }
        return Json.createObjectBuilder().add(KEY, ref).build().get(KEY);
    }

    public static JsonValue nvl(final java.sql.Date ref) {
        if (ref == null) {
            return JsonValue.NULL;
        }
        return Json.createObjectBuilder().add(KEY, ref.getTime()).build().get(KEY);
    }
}]]></Answer>
<Answer><![CDATA[public class NullAwareJsonObjectBuilder implements JsonObjectBuilder {
    // Use the Factory Pattern to create an instance.
    public static JsonObjectBuilder wrap(JsonObjectBuilder builder) {
      if (builder == null) {
        throw new IllegalArgumentException("Can't wrap nothing.");
      }
      return new NullAwareJsonObjectBuilder(builder);
    }

    // Decorated object per Decorator Pattern.
    private final JsonObjectBuilder builder;

    private NullAwareJsonObjectBuilder(JsonObjectBuilder builder) {
      this.builder = builder;
    }

    public JsonObjectBuilder add(String name, JsonValue value) {
      builder.add(name, (value == null) ? JsonValue.NULL : value);
    }

    // Implement all other JsonObjectBuilder methods.
    ..
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22319089" questionTitle="Maven 3 :How to copy a file to test directory , when the file does not exist">
<Answer><![CDATA[<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.6</version>
        <executions>
            <execution>
                <phase>test</phase>
                <configuration>
                    <tasks>
                        <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                        <if>
                            <available file="/path/to/your/file "/>
                            <then>
                                <!-- Do something with it -->
                                <copy file="/your/file" tofile="/some/destination/path" />
                            </then>
                        </if>
                    </tasks>
                </configuration>
                <goals>
                    <goal>run</goal>
                </goals>
            </execution>
        </executions>
    </plugin>]]></Answer>
<Answer><![CDATA[<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-antrun-plugin</artifactId>
    <version>1.8</version>
    <executions>
        <execution>
            <phase>test</phase>
            <configuration>
                <target>
                    <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.dependency.classpath" />
                    <if>
                        <available file="/path/to/your/file "/>
                        <then>
                            <!-- Do something with it -->
                            <copy file="/your/file" tofile="/some/destination/path" />
                        </then>
                    </if>
                </target>
            </configuration>
            <goals>
                <goal>run</goal>
            </goals>
        </execution>
    </executions>
    <dependencies>
        <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
                <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-nodeps</artifactId>
            <version>1.8.1</version>
        </dependency>
    </dependencies>
</plugin>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22308823" questionTitle="Extending List&lt;T&gt; in Java 8">
<Answer><![CDATA[import java.util.*;
import java.util.function.Function;
import java.util.stream.Stream;

public class MappingList<E> extends AbstractList<E> {
  // using this helper class we avoid carrying <S> with the public API
  static final class Source<E,S> {
      final List<S> list;
      final Function<? super S, ? extends E> mapper;
      Source(List<S> l, Function<? super S, ? extends E> m) {
          list=l;
          mapper=m;
      }
      E get(int index) { return mapper.apply(list.get(index)); }
      <T> Source map(Function<? super E, ? extends T> f) {
          Objects.requireNonNull(f);
          return new Source<>(list, mapper.andThen(f));
      }
      Stream<E> stream() { return list.stream().map(mapper); }
      Stream<E> parallelStream() { return list.parallelStream().map(mapper); }
    }
    final Source<E,?> source;

    private MappingList(Source<E,?> s) {
        Objects.requireNonNull(s);
        source=s;
    }
    @Override
    public E get(int index) {
        return source.get(index);
    }
    @Override
    public int size() {
        return source.list.size();
    }
    @Override
    public Stream<E> stream() {
        return source.stream();
    }
    @Override
    public Stream<E> parallelStream() {
        return source.parallelStream();
    }
    public <T> MappingList<T> map(Function<? super E, ? extends T> f) {
        return new MappingList<>(source.map(f));
    }
    public static <S,T> MappingList<T> map(
      List<S> l, Function<? super S, ? extends T> f) {
        Objects.requireNonNull(l);
        if(l instanceof MappingList)
            return ((MappingList<S>)l).map(f);
        return new MappingList<>(new Source<>(l, f));
    }
}]]></Answer>
<Answer><![CDATA[public final class StreamExtender<T>
{
    private final Stream<T> _inputStream;

    public static <T> StreamExtender<T> extend(final Stream<T> inputStream)
    {
        return new StreamExtender<>(inputStream);
    }

    private StreamExtender(final Stream<T> inputStream)
    {
        this._inputStream = inputStream;
    }

    public <U> List<U> extensionMethod(final Function<T, U> f)
    {
        // your own code.
        return _inputStream.map(f).collect(Collectors.toList());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22253497" questionTitle="Permanent text in a textfield in Java">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Text extends Application {

    @Override
    public void start(Stage primaryStage) {
        TextField txtUser = new TextField();
        txtUser.setStyle("-fx-background-color: transparent;-fx-border-color:blue;");
        Label txtBG = new Label(" (miles)");
        Label labelUser = new Label();
        labelUser.textProperty().bind(txtUser.textProperty());
        Label labelAll = new Label();
        labelAll.textProperty().bind(Bindings.concat(
                labelUser.textProperty())
                .concat(txtBG.textProperty()));

        StackPane sp = new StackPane();
        sp.getChildren().addAll(txtBG, txtUser);
        sp.setPrefSize(100, 12);

        VBox root = new VBox();
        root.getChildren().addAll(sp,labelUser,labelAll);
        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("transparent text test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class TextBinding extends Application {

@Override
public void start(Stage primaryStage) {
    final TextField user = new TextField();
    TextField demo = new TextField();
    user.setStyle("-fx-background-color: transparent;-fx-border-color:blue;");
    user.focusedProperty().addListener(new ChangeListener<Boolean>()
            {
                @Override
                public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue)
                {
                    if (newPropertyValue)
                    {
                        user.setText(user.getText().replace(" miles", ""));
                    }
                    else
                    {
                        user.setText(user.getText().concat(" miles"));
                    }
                }
            });
    VBox root = new VBox();
    root.getChildren().addAll(user,demo);
    Scene scene = new Scene(root, 300, 250);

    primaryStage.setTitle("transparent text test");
    primaryStage.setScene(scene);
    primaryStage.show();
}

public static void main(String args[]) {
    launch(args);
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22191369" questionTitle="Fork Join optimization">
<Answer><![CDATA[import java.io.FileWriter;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class Testing {

static int SEQ_THRESHOLD;

public static void main(String[] args) throws Exception {
    int size = 100000;
    int[] v1 = new int[size];
    int[] v2 = new int[size];
    int[] v3 = new int[size];
    for (int i = 0; i < size; i++) {
        v1[i] = i;  // Arbitrary initialization
        v2[i] = 2 * i; // Arbitrary initialization
    }
    FileWriter fileWriter = new FileWriter("OutTime.dat");

    // Increment SEQ_THRESHOLD and save time taken by the code to run in a file
    for (SEQ_THRESHOLD = 10; SEQ_THRESHOLD < size; SEQ_THRESHOLD += 50) {
        double avgTime = 0.0;
        int samples = 5;
        for (int i = 0; i < samples; i++) {
            long startTime = System.nanoTime();
            ForkJoinPool fjp = new ForkJoinPool();
            fjp.invoke(new VectorAddition(0, size, v1, v2, v3));
            long endTime = System.nanoTime();
            double secsTaken = (endTime - startTime) / 1.0e9;
            avgTime += secsTaken;
        }
        fileWriter.write(SEQ_THRESHOLD + " " + (avgTime / samples) + "\n");
    }

    fileWriter.close();
}
}

class VectorAddition extends RecursiveAction {

int[] v1, v2, v3;
int start, end;

VectorAddition(int start, int end, int[] v1, int[] v2, int[] v3) {
    this.start = start;
    this.end = end;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
}

int SEQ_THRESHOLD = Testing.SEQ_THRESHOLD;

@Override
protected void compute() {
    if (end - start < SEQ_THRESHOLD) {
        // Simple vector addition
        for (int i = start; i < end; i++) {
            v3[i] = v1[i] + v2[i];
        }
    } else {
        int mid = (start + end) / 2;
        invokeAll(new VectorAddition(start, mid, v1, v2, v3),
                new VectorAddition(mid, end, v1, v2, v3));
    }
}
}]]></Answer>
<Answer><![CDATA[private int calcThreshold(int nbr_elements, int passed_threshold) {

  // total threads in session
  // total elements in array
  int threads = getNbrThreads();
  int count   = nbr_elements + 1;

  // When only one thread, it doesn't pay to decompose the work,
  //   force the threshold over array length
  if  (threads == 1) return count;    

  /*
   * Whatever it takes
   * 
   */
  int threshold = passed_threshold;

  // When caller suggests a value
  if  (threshold > 0) {

      // just go with the caller's suggestion or do something with the suggestion

  } else {
      // do something usful such as using about 8 times as many tasks as threads or
      //   the default of 32k
      int temp = count / (threads << 3);
      threshold = (temp < 32768) ? 32768 : temp;

  } // endif    

  // whatever
  return threshold;

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22190370" questionTitle="how to set width of drop down of combobox in java fx">
<Answer><![CDATA[combo.setCellFactory(new Callback<ListView<T>, ListCell<T>>() {

        @Override
        public ListCell<T> call(ListView<T> param) {
            ListCell cell = new ListCell<T>() {
                @Override
                public void updateItem(T item, boolean empty) {
                    super.updateItem(item, empty);

                    getListView().setMaxWidth(LIST_VIEW_MAX_HEIGHT);
                    if (!empty) {
                        setText(converter.toString(item));
                    } else {
                        setText(null);
                    }
                }
            };
            return cell;
        }
    });]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class SizedComboBoxSampleWithCss extends Application {
    public static void main(String[] args) { launch(args); }

    @Override public void start(Stage stage) {
        final ComboBox<String> combo = new ComboBox<>();

        combo.setValue(Font.getDefault().getFamily());
        combo.getItems().setAll(Font.getFamilies());
        combo.getStylesheets().add(
                getClass().getResource(
                        "combo-size.css"
                ).toExternalForm()
        );

        StackPane layout = new StackPane(combo);
        layout.setPadding(new Insets(10));

        stage.setScene(new Scene(layout));
        stage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22174826" questionTitle="Javafx 8 3D Complex Shape">
<Answer><![CDATA[/*
 Let the radius from the center of the hole to the center of the torus tube be "c", 
 and the radius of the tube be "a". 
 Then the equation in Cartesian coordinates for a torus azimuthally symmetric about the z-axis is
 (c-sqrt(x^2+y^2))^2+z^2=a^2
 and the parametric equations are
 x = (c + a * cos(v)) * cos(u)  
 y = (c + a * cos(v)) * sin(u)  
 z =  a * sin(v)    
 (for u,v in [0,2pi). 

 Three types of torus, known as the standard tori, are possible, 
 depending on the relative sizes of a and c. c>a corresponds to the ring torus (shown above), 
 c=a corresponds to a horn torus which is tangent to itself at the point (0, 0, 0), 
 and c<a corresponds to a self-intersecting spindle torus (Pinkall 1986). 
 */
public static TriangleMesh createToroidMesh(float radius, float tRadius, int tubeDivisions, int radiusDivisions) {
    int POINT_SIZE = 3, TEXCOORD_SIZE = 2, FACE_SIZE = 6;
    int numVerts = tubeDivisions * radiusDivisions;
    int faceCount = numVerts * 2;
    float[] points = new float[numVerts * POINT_SIZE],
            texCoords = new float[numVerts * TEXCOORD_SIZE];
    int[] faces = new int[faceCount * FACE_SIZE],
          smoothingGroups;

    int pointIndex = 0, texIndex = 0, faceIndex = 0, smoothIndex = 0;
    float tubeFraction = 1.0f / tubeDivisions;
    float radiusFraction = 1.0f / radiusDivisions;
    float x, y, z;

    int p0 = 0, p1 = 0, p2 = 0, p3 = 0, t0 = 0, t1 = 0, t2 = 0, t3 = 0;

    // create points
    for (int tubeIndex = 0; tubeIndex < tubeDivisions; tubeIndex++) {

        float radian = tubeFraction * tubeIndex * 2.0f * 3.141592653589793f;

        for (int radiusIndex = 0; radiusIndex < radiusDivisions; radiusIndex++) {

            float localRadian = radiusFraction * radiusIndex * 2.0f * 3.141592653589793f;

            points[pointIndex]     = x = (radius + tRadius * ((float) Math.cos(radian))) * ((float) Math.cos(localRadian));
            points[pointIndex + 1] = y = (radius + tRadius * ((float) Math.cos(radian))) * ((float) Math.sin(localRadian));
            points[pointIndex + 2] = z = (tRadius * (float) Math.sin(radian));

            pointIndex += 3;

            float r = radiusIndex < tubeDivisions ? tubeFraction * radiusIndex * 2.0F * 3.141592653589793f : 0.0f;
            texCoords[texIndex] = (0.5F + (float) (Math.sin(r) * 0.5D));;
            texCoords[texIndex + 1] = ((float) (Math.cos(r) * 0.5D) + 0.5F);

            texIndex += 2;

        }

    }
    //create faces        
    for (int point = 0; point < (tubeDivisions) ; point++) {
        for (int crossSection = 0; crossSection < (radiusDivisions) ; crossSection++) {
            p0 = point * radiusDivisions + crossSection;
            p1 = p0 >= 0 ? p0 + 1 : p0 - (radiusDivisions);
                p1 = p1 % (radiusDivisions) != 0 ? p0 + 1 : p0 - (radiusDivisions - 1);
            p2 = (p0 + radiusDivisions) < ((tubeDivisions * radiusDivisions)) ? p0 + radiusDivisions : p0 - (tubeDivisions * radiusDivisions) + radiusDivisions ;
            p3 = p2 < ((tubeDivisions * radiusDivisions) - 1) ? p2 + 1 : p2 - (tubeDivisions * radiusDivisions) + 1;
                p3 = p3 % (radiusDivisions) != 0 ? p2 + 1 : p2 - (radiusDivisions - 1); 

            t0 = point * (radiusDivisions) + crossSection;
            t1 = t0 >= 0 ? t0 + 1 : t0 - (radiusDivisions);
                t1 = t1 % (radiusDivisions) != 0 ? t0 + 1 : t0 - (radiusDivisions - 1);
            t2 = (t0 + radiusDivisions) < ((tubeDivisions * radiusDivisions)) ? t0 + radiusDivisions : t0 - (tubeDivisions * radiusDivisions) + radiusDivisions ;
            t3 = t2 < ((tubeDivisions * radiusDivisions) - 1) ? t2 + 1 : t2 - (tubeDivisions * radiusDivisions) + 1;
                t3 = t3 % (radiusDivisions) != 0 ? t2 + 1 : t2 - (radiusDivisions - 1);

            try {
                faces[faceIndex]     = (p2);
                faces[faceIndex + 1] = (t3);
                faces[faceIndex + 2] = (p0);
                faces[faceIndex + 3] = (t2);
                faces[faceIndex + 4] = (p1);
                faces[faceIndex + 5] = (t0);

                faceIndex += FACE_SIZE;

                faces[faceIndex]     = (p2);
                faces[faceIndex + 1] = (t3);
                faces[faceIndex + 2] = (p1);
                faces[faceIndex + 3] = (t0);
                faces[faceIndex + 4] = (p3);
                faces[faceIndex + 5] = (t1);
                faceIndex += FACE_SIZE;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    TriangleMesh localTriangleMesh = new TriangleMesh();
    localTriangleMesh.getPoints().setAll(points);
    localTriangleMesh.getTexCoords().setAll(texCoords);
    localTriangleMesh.getFaces().setAll(faces);


    return localTriangleMesh;
}]]></Answer>
<Answer><![CDATA[import com.interactivemesh.jfx.importer.Viewpoint;
import com.interactivemesh.jfx.importer.col.ColAsset;
import com.interactivemesh.jfx.importer.col.ColModelImporter;
//import com.interactivemesh.jfx.importer.stl.StlMeshImporter;

import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Translate;

import java.io.File;
import java.util.Map;

public class Importer3D extends Application {
    //you'll have to make your own file in sketchup and save it as *.dae
    //http://help.sketchup.com/en/article/114347
    private static final String DAE_FILENAME = ("2x6stud-1.dae");

    private static final int VIEWPORT_SIZE = 800;

    private Group root;

    public Rotate rx = new Rotate();
    { rx.setAxis(Rotate.X_AXIS); }
    public Rotate ry = new Rotate();
    { ry.setAxis(Rotate.Y_AXIS); }
    public Rotate rz = new Rotate();
    { rz.setAxis(Rotate.Z_AXIS); }
    Translate t = new Translate();

    static Node[] loadNodes() {
        File file = new File(DAE_FILENAME);
        ColModelImporter importer = new ColModelImporter();
        importer.read(file);
        Node[] nodes = importer.getImport();

        ColAsset colAsset = importer.getAsset();
        System.out.println("asset title " + colAsset.getTitle());
        System.out.println("asset unit name " + colAsset.getUnitName());
        System.out.println("asset unit meter " + colAsset.getUnitMeter());
        System.out.println("asset up axis " + colAsset.getUpAxis());
        Map<String, PhongMaterial> materials = importer.getNamedMaterials();
        for (Map.Entry<String, PhongMaterial> e : materials.entrySet()) {
            System.out.println("phong material " + e.getKey() + " -> " + e.getValue());
        }
        Map<String, Node> namedNodes = importer.getNamedNodes();
        for (Map.Entry<String, Node> e : namedNodes.entrySet()) {
            System.out.println("nodes " + e.getKey() + " -> " + e.getValue());
        }
        Viewpoint[] viewpoints = importer.getViewpoints();
        if (viewpoints != null) for (Viewpoint v : viewpoints) {
                System.out.println("viewpoint " + v);
            }

        return nodes;
    }

    private Group buildScene() {
        Node[] nodes = loadNodes();
        root = new Group(nodes);
        return root;
    }

    private PerspectiveCamera addCamera(Scene scene) {
        PerspectiveCamera camera = new PerspectiveCamera();
        camera.getTransforms().addAll(t, rz, ry, rx);

        camera.setVerticalFieldOfView(true);
        camera.setFieldOfView(10d);
        System.out.println("Near Clip: " + camera.getNearClip());
        System.out.println("Far Clip:  " + camera.getFarClip());
        System.out.println("FOV:       " + camera.getFieldOfView());

        scene.setCamera(camera);
        return camera;
    }

    @Override
    public void start(Stage stage) {
        Group group = buildScene();
        group.setScaleX(10);
        group.setScaleY(10);
        group.setScaleZ(10);
        group.setTranslateX(VIEWPORT_SIZE / 2);
        group.setTranslateY(VIEWPORT_SIZE / 2);

        Scene scene = new Scene(group, VIEWPORT_SIZE, VIEWPORT_SIZE, true);
        scene.setFill(Color.rgb(10, 10, 40));
        addCamera(scene);
        stage.setTitle("Collada importer");
        stage.setScene(scene);
        stage.show();

        scene.setOnKeyPressed((evt) -> {
            switch (evt.getCode()) {
                case UP:
                    rx.setAngle(rx.getAngle() + 5);
                    break;
                case DOWN:
                    rx.setAngle(rx.getAngle() - 5);
                    break;
                case RIGHT:
                    t.setX(t.getX() + 10);
                    //camera.setTranslateX(camera.getTranslateX()+10);
                    break;
                case LEFT:
                    t.setX(t.getX() - 10);
                    //camera.setTranslateX(camera.getTranslateX()-10);
                    break;
                case Z:
                    double zoom = evt.isShortcutDown() ? -10 : +10;
                    t.setZ(t.getZ() + zoom);
                    //camera.setTranslateZ(camera.getTranslateZ()+zoom);
                    break;
            }
        });
    }

    public static void main(String[] args) {
        System.setProperty("prism.dirtyopts", "false");
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22139615" questionTitle="Dragging buttons in Javafx">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ButtonDraggable extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        BorderPane borderPane = new BorderPane();
        borderPane.setPrefSize(800, 600);
        final Button button = new Button("Drag ME !");

        final Delta dragDelta = new Delta();
        button.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                // record a delta distance for the drag and drop operation.
                dragDelta.x = button.getLayoutX() - mouseEvent.getSceneX();
                dragDelta.y = button.getLayoutY() - mouseEvent.getSceneY();
                button.setCursor(Cursor.MOVE);
            }
        });
        button.setOnMouseReleased(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                button.setCursor(Cursor.HAND);
            }
        });
        button.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                button.setLayoutX(mouseEvent.getSceneX() + dragDelta.x);
                button.setLayoutY(mouseEvent.getSceneY() + dragDelta.y);
            }
        });
        button.setOnMouseEntered(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                button.setCursor(Cursor.HAND);
            }
        });

        borderPane.setCenter(button);

        Scene scene = new Scene(borderPane);

        stage.setScene(scene);
        stage.show();

    }

    // records relative x and y co-ordinates.
    class Delta {
        double x, y;
    }

    public static void main(String args[]) {
        launch(args);
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class ButtonDraggable extends Application{
    @Override
    public void start(Stage primaryStage){
        // button and pane are created
        Button btOK = new Button("OK");
        Pane pane = new Pane();
        // this code drags the button
        btOK.setOnMouseDragged(e -> {
        btOK.setLayoutX(e.getSceneX());
        btOK.setLayoutY(e.getSceneY());
         });
        // button added to pane and pane added to scene
        pane.getChildren().add(btOK);
        Scene scene = new Scene(pane,200, 250);
        primaryStage.setTitle("A Draggable button");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args){
        Application.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22128153" questionTitle="JavaFX HTMLEditor text change listener">
<Answer><![CDATA[public class HtmlEditorListener {
    private final BooleanProperty editedProperty;

    private String htmlRef;

    public HtmlEditorListener(final HTMLEditor editor) {
        editedProperty = new SimpleBooleanProperty();
        editedProperty.addListener((ov, o, n) -> htmlRef = n? null: editor.getHtmlText());
        editedProperty.set(false);

        editor.setOnMouseClicked(e -> checkEdition(editor.getHtmlText()));
        editor.addEventFilter(KeyEvent.KEY_TYPED, e -> checkEdition(editor.getHtmlText()));
    }

    public BooleanProperty editedProperty() {
        return editedProperty;
    }

    private void checkEdition(final String html) {
        if (editedProperty.get()) {
            return;
        }
        editedProperty.set(htmlRef != null
                && html.length() != htmlRef.length()
                || !html.equals(htmlRef));
    }
}]]></Answer>
<Answer><![CDATA[package application;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.web.HTMLEditor;
import javafx.stage.Stage;

public class Main extends Application
{
  @Override
  public void start(Stage primaryStage)
  {
    try
    {
      final HTMLEditor editor = new HTMLEditor();
      Scene scene = new Scene(editor);
      primaryStage.setScene(scene);

      editor.setOnKeyReleased(new EventHandler<KeyEvent>()
      {
        @Override
        public void handle(KeyEvent event)
        {
          if (isValidEvent(event))
          {
            System.out.println(editor.getHtmlText());
          }
        }

        private boolean isValidEvent(KeyEvent event)
        {
          return !isSelectAllEvent(event)
              && ((isPasteEvent(event)) || isCharacterKeyReleased(event));
        }

        private boolean isSelectAllEvent(KeyEvent event)
        {
          return event.isShortcutDown() && event.getCode() == KeyCode.A;
        }

        private boolean isPasteEvent(KeyEvent event)
        {
          return event.isShortcutDown() && event.getCode() == KeyCode.V;
        }

        private boolean isCharacterKeyReleased(KeyEvent event)
        {
          // Make custom changes here..
          switch (event.getCode())
          {
            case ALT:
            case COMMAND:
            case CONTROL:
            case SHIFT:
              return false;
            default:
              return true;
          }
        }
      });

      primaryStage.show();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public static void main(String[] args)
  {
    launch(args);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22089022" questionTitle="Line Chart Live update">
<Answer><![CDATA[import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.stage.Stage;

import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;


public class AnimatedLineChart extends Application {

    private static final int MAX_DATA_POINTS = 50;
    private int xSeriesData = 0;
    private XYChart.Series<Number, Number> series1 = new XYChart.Series<>();
    private XYChart.Series<Number, Number> series2 = new XYChart.Series<>();
    private XYChart.Series<Number, Number> series3 = new XYChart.Series<>();
    private ExecutorService executor;
    private ConcurrentLinkedQueue<Number> dataQ1 = new ConcurrentLinkedQueue<>();
    private ConcurrentLinkedQueue<Number> dataQ2 = new ConcurrentLinkedQueue<>();
    private ConcurrentLinkedQueue<Number> dataQ3 = new ConcurrentLinkedQueue<>();

    private NumberAxis xAxis;

    private void init(Stage primaryStage) {

        xAxis = new NumberAxis(0, MAX_DATA_POINTS, MAX_DATA_POINTS / 10);
        xAxis.setForceZeroInRange(false);
        xAxis.setAutoRanging(false);
        xAxis.setTickLabelsVisible(false);
        xAxis.setTickMarkVisible(false);
        xAxis.setMinorTickVisible(false);

        NumberAxis yAxis = new NumberAxis();

        // Create a LineChart
        final LineChart<Number, Number> lineChart = new LineChart<Number, Number>(xAxis, yAxis) {
            // Override to remove symbols on each data point
            @Override
            protected void dataItemAdded(Series<Number, Number> series, int itemIndex, Data<Number, Number> item) {
            }
        };

        lineChart.setAnimated(false);
        lineChart.setTitle("Animated Line Chart");
        lineChart.setHorizontalGridLinesVisible(true);

        // Set Name for Series
        series1.setName("Series 1");
        series2.setName("Series 2");
        series3.setName("Series 3");

        // Add Chart Series
        lineChart.getData().addAll(series1, series2, series3);

        primaryStage.setScene(new Scene(lineChart));
    }


    @Override
    public void start(Stage stage) {
        stage.setTitle("Animated Line Chart Sample");
        init(stage);
        stage.show();


        executor = Executors.newCachedThreadPool(new ThreadFactory() {
            @Override
            public Thread newThread(Runnable r) {
                Thread thread = new Thread(r);
                thread.setDaemon(true);
                return thread;
            }
        });

        AddToQueue addToQueue = new AddToQueue();
        executor.execute(addToQueue);
        //-- Prepare Timeline
        prepareTimeline();
    }

    private class AddToQueue implements Runnable {
        public void run() {
            try {
                // add a item of random data to queue
                dataQ1.add(Math.random());
                dataQ2.add(Math.random());
                dataQ3.add(Math.random());

                Thread.sleep(500);
                executor.execute(this);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
    }

    //-- Timeline gets called in the JavaFX Main thread
    private void prepareTimeline() {
        // Every frame to take any data from queue and add to chart
        new AnimationTimer() {
            @Override
            public void handle(long now) {
                addDataToSeries();
            }
        }.start();
    }

    private void addDataToSeries() {
        for (int i = 0; i < 20; i++) { //-- add 20 numbers to the plot+
            if (dataQ1.isEmpty()) break;
            series1.getData().add(new XYChart.Data<>(xSeriesData++, dataQ1.remove()));
            series2.getData().add(new XYChart.Data<>(xSeriesData++, dataQ2.remove()));
            series3.getData().add(new XYChart.Data<>(xSeriesData++, dataQ3.remove()));
        }
        // remove points to keep us at no more than MAX_DATA_POINTS
        if (series1.getData().size() > MAX_DATA_POINTS) {
            series1.getData().remove(0, series1.getData().size() - MAX_DATA_POINTS);
        }
        if (series2.getData().size() > MAX_DATA_POINTS) {
            series2.getData().remove(0, series2.getData().size() - MAX_DATA_POINTS);
        }
        if (series3.getData().size() > MAX_DATA_POINTS) {
            series3.getData().remove(0, series3.getData().size() - MAX_DATA_POINTS);
        }
        // update
        xAxis.setLowerBound(xSeriesData - MAX_DATA_POINTS);
        xAxis.setUpperBound(xSeriesData - 1);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class AnimatedLineChart extends Application {

private LineChart<Number, Number> chart;

private XYChart.Series<Number, Number> dataSeries;

private NumberAxis xAxis;

private Timeline animation;

private double sequence = 0;

private double y = 10;

private final int MAX_DATA_POINTS = 25, MAX = 10, MIN = 5;;

public AnimatedLineChart() {

    // create timeline to add new data every 60th of second
    animation = new Timeline();
    animation.getKeyFrames()
            .add(new KeyFrame(Duration.millis(1000), 
                    (ActionEvent actionEvent) -> plotTime()));
    animation.setCycleCount(Animation.INDEFINITE);
}

public Parent createContent() {

    xAxis = new NumberAxis(0, MAX_DATA_POINTS + 1, 2);
    final NumberAxis yAxis = new NumberAxis(MIN - 1, MAX + 1, 1);
    chart = new LineChart<>(xAxis, yAxis);

    // setup chart
    chart.setAnimated(false);
    chart.setLegendVisible(false);
    chart.setTitle("Animated Line Chart");
    xAxis.setLabel("X Axis");
    xAxis.setForceZeroInRange(false);

    yAxis.setLabel("Y Axis");
    yAxis.setTickLabelFormatter(new NumberAxis.DefaultFormatter(yAxis, "$", null));

    // add starting data
    dataSeries = new XYChart.Series<>();
    dataSeries.setName("Data");

    // create some starting data
    dataSeries.getData()
            .add(new XYChart.Data<Number, Number>(++sequence, y));

    chart.getData().add(dataSeries);

    return chart;
}

private void plotTime() {
    dataSeries.getData().add(new XYChart.Data<Number, Number>(++sequence, getNextValue()));

    // after 25hours delete old data
    if (sequence > MAX_DATA_POINTS) {
        dataSeries.getData().remove(0);
    }

    // every hour after 24 move range 1 hour
    if (sequence > MAX_DATA_POINTS - 1) {
        xAxis.setLowerBound(xAxis.getLowerBound() + 1);
        xAxis.setUpperBound(xAxis.getUpperBound() + 1);
    }
}

private int getNextValue(){     
    Random rand = new Random();
    return rand.nextInt((MAX - MIN) + 1) + MIN;     
}

public void play() {
    animation.play();
}

@Override
public void stop() {
    animation.pause();
}

@Override
public void start(Stage primaryStage) throws Exception {
    primaryStage.setScene(new Scene(createContent()));
    primaryStage.setTitle("Animated Line Chart");
    primaryStage.show();
    play();
}

/**
 * 
 * Java main for when running without JavaFX launcher
 * 
 */
public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22088217" questionTitle="How to Get First Column Value on click in JavaFX TableView like JTable in swing?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.*;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class TableViewSample extends Application {

    private TableView<IdentifiedName> table = new TableView<>();
    private final ObservableList<IdentifiedName> data =
        FXCollections.observableArrayList(
            new IdentifiedName(3, "three"),
            new IdentifiedName(4, "four"),
            new IdentifiedName(7, "seven"),
            new IdentifiedName(8, "eight"),
            new IdentifiedName(9, "nineses")
        );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        TableColumn<IdentifiedName, Integer> idColumn = new TableColumn<>("No");
        idColumn.setMinWidth(100);
        idColumn.setCellValueFactory(
                new PropertyValueFactory<>("id")
        );

        TableColumn<IdentifiedName, String> nameColumn = new TableColumn<>("Name");
        nameColumn.setMinWidth(100);
        nameColumn.setCellValueFactory(
                new PropertyValueFactory<>("name")
        );

        table.setItems(data);
        table.getColumns().setAll(idColumn, nameColumn);
        table.setPrefHeight(180);

        final Label selected = new Label();
        table.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                selected.setText("");
                return;
            }

            selected.setText("Selected Number: " + newValue.getId());
        });

        final VBox layout = new VBox(10);
        layout.setPadding(new Insets(10));
        layout.getChildren().addAll(table, selected);
        VBox.setVgrow(table, Priority.ALWAYS);

        stage.setScene(new Scene(layout));
        stage.show();
    }

    public static class IdentifiedName {
        private final int    id;
        private final String name;

        private IdentifiedName(int id, String name) {
            this.id   = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }
    }
}]]></Answer>
<Answer><![CDATA[tableview.getSelectionModel().selectedItemProperty().addListener(new ChangeListener() {
            @Override
            public void changed(ObservableValue observableValue, Object oldValue, Object newValue) {
                //Check whether item is selected and set value of selected item to Label
                if (tableview.getSelectionModel().getSelectedItem() != null) {
                    TableView.TableViewSelectionModel selectionModel = tableview.getSelectionModel();
                    ObservableList selectedCells = selectionModel.getSelectedCells();

                    TablePosition tablePosition = (TablePosition) selectedCells.get(0);


                    tablePosition.getTableView().getSelectionModel().getTableView().getId();
                    //gives you selected cell value..
                    Object GetSinglevalue = tablePosition.getTableColumn().getCellData(newValue);

                    getbothvalue = tableview.getSelectionModel().getSelectedItem().toString();
                //gives you first column value..
                    Finalvaluetablerow = getbothvalue.toString().split(",")[0].substring(1);
                    System.out.println("The First column value of row.." + Finalvaluetablerow);
                }
            }
        });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22083689" questionTitle="Is it possible to extend enum in Java 8?">
<Answer><![CDATA[public interface HasName {

    public String name();
}

public interface PoliteEnum extends HasName {

    default String politeName() {
        return name().replace("_", " ");
    }
}

public interface Lookup<P, Q> {

    public Q lookup(P p);
}

public interface ReverseLookup<T extends Enum<T>> extends Lookup<String, T> {

    @Override
    default T lookup(String s) {
        return (T) useMap(this, s);
    }

}

// Probably do somethiong better than this in the final version.
static final Map<String, Enum> theMap = new HashMap<>();

static Enum useMap(Object o, String s) {
    if (theMap.isEmpty()) {
        try {
            // Yukk!!
            Enum it = (Enum)o;
            Class c = it.getDeclaringClass();
            // Reflect to call the static method.
            Method method = c.getMethod("values");
            // Yukk!!
            Enum[] enums = (Enum[])method.invoke(null);
            // Walk the enums.
            for ( Enum e : enums) {
                theMap.put(e.name(), e);
            }
        } catch (Exception ex) {
            // Ewwww
        }
    }
    return theMap.get(s);
}

public enum X implements PoliteEnum, ReverseLookup<X> {

    A_For_Ism,
    B_For_Mutton,
    C_Forth_Highlanders;
}

public void test() {
    for (X x : X.values()) {
        System.out.println(x.politeName());
    }
    for (X x : X.values()) {
        System.out.println(x.lookup(x.name()));
    }
}]]></Answer>
<Answer><![CDATA[public class ValueOfHelper<E extends Enum<E>> {
    private final Map<String, E> map = new HashMap<String, E>();

    public ValueOfHelper(Class<E> cls) {
        for(E e : EnumSet.allOf(cls))
            map.put(e.name(), e);
    }

    public E valueOfOrNull(String name) {
        return map.get(name);
    }
}

public enum Composed {
    A, B, C;

    private static final ValueOfHelper<Composed> HELPER = (
        new ValueOfHelper<Composed>(Composed.class)
    );

    public static Composed valueOfOrNull(String name) {
        return HELPER.valueOfOrNull(name);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21987552" questionTitle="How to make a JavaFX TableView cell editable without first pressing Enter?">
<Answer><![CDATA[public class EditingCell extends TableCell<OrderItem, String> {
    private TextField textField;
    @Override
    public void startEdit() {
        if (!isEmpty()) {
            super.startEdit();
            if (textField == null) {
                createTextField();
            }
            setText(null);
            setGraphic(textField);
            setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            textField.requestFocus();
        }
    }

    @Override
    public void cancelEdit() {
        super.cancelEdit();
        setText(String.valueOf(getItem()));
        setContentDisplay(ContentDisplay.TEXT_ONLY);
    }

    @Override
    public void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);
        if (empty) {
            setText(null);
            setGraphic(null);
        } else {
            if (isEditing()) {
                if (textField != null) {
                    textField.setText(getString());
                }
                setGraphic(textField);
                setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            } else {
                setText(getString());
                setContentDisplay(ContentDisplay.TEXT_ONLY);
            }
        }
    }

    private void createTextField() {
        textField = new TextField(getString());
        textField.setMinWidth(this.getWidth() - this.getGraphicTextGap() * 2);
        textField.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
                if (t.getCode() == KeyCode.ENTER) {
                    commitEdit(textField.getText());
                    EditingCell.this.getTableView().requestFocus();//why does it lose focus??
                    EditingCell.this.getTableView().getSelectionModel().selectBelowCell();
                } else if (t.getCode() == KeyCode.ESCAPE) {
                    cancelEdit();
                }
            }
        });

        textField.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
                if (t.getCode().isDigitKey()) {
                    if (CellField.isLessOrEqualOneSym()) {
                        CellField.addSymbol(t.getText());
                    } else {
                        CellField.setText(textField.getText());
                    }
                    textField.setText(CellField.getText());
                    textField.deselect();
                    textField.end();
                    textField.positionCaret(textField.getLength() + 2);//works sometimes

                }
            }
        });
    }

    private String getString() {
        return getItem() == null ? "" : getItem();
    }
}]]></Answer>
<Answer><![CDATA[package easyedit;

import java.text.NumberFormat;
import java.util.Stack;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.util.Callback;


public class EasyEditTable{
    private String lastKey = null;

    public TableView makeTable(ObservableList<LineItem> items) {
        TableView tv = new TableView(items);
        tv.setEditable(true);

        Stack<LineItem> deletedLines = new Stack<>();
        tv.setUserData(deletedLines);
        Callback<TableColumn<LineItem,String>, TableCell<LineItem,String>> txtCellFactory = 
                (TableColumn<LineItem,String> p) -> {return new EditingCell();};

        TableColumn<LineItem,String> descCol = new TableColumn<>("desc");
        descCol.setCellValueFactory(new PropertyValueFactory<>("desc"));
        descCol.setCellFactory(txtCellFactory);
        descCol.setOnEditCommit((TableColumn.CellEditEvent<LineItem, String> evt) -> {
            evt.getTableView().getItems().get(evt.getTablePosition().getRow())
                    .descProperty().setValue(evt.getNewValue());
        });


        final NumberFormat currFmt = NumberFormat.getCurrencyInstance();
        TableColumn<LineItem, String> amountCol = new TableColumn<>("amount");
        amountCol.setCellValueFactory((TableColumn.CellDataFeatures<LineItem, String> p) -> {
                return new SimpleStringProperty(currFmt.format(p.getValue().amountProperty().get()));
        });
        amountCol.setCellFactory(txtCellFactory);
        amountCol.setOnEditCommit((TableColumn.CellEditEvent<LineItem, String> evt) -> {
            try {
              evt.getTableView().getItems().get(evt.getTablePosition().getRow())
                        .amountProperty().setValue(Double.parseDouble(evt.getNewValue().replace("$","")));
            } catch (NumberFormatException nfe) {
                //handle error properly somehow
            }
        });
        amountCol.setComparator((String o1, String o2) -> {
            try {//only works in $ countries, use currFmt.parse() instead
                return Double.compare(Double.parseDouble(o1.replace("$", "")),
                                      Double.parseDouble(o2.replace("$", "")));
            } catch (NumberFormatException numberFormatException) {
                return 0;
            }
        });

        TableColumn<LineItem,String> sortCol = new TableColumn<>("sort");
        sortCol.setCellValueFactory(new PropertyValueFactory("sort"));
        sortCol.setCellFactory(txtCellFactory);
        sortCol.setOnEditCommit((TableColumn.CellEditEvent<LineItem, String> evt) -> {
            evt.getTableView().getItems().get(evt.getTablePosition().getRow())
                    .sortProperty().setValue(Integer.parseInt(evt.getNewValue()));//throws nfe
        });

        tv.getColumns().setAll(descCol, amountCol, sortCol);
        tv.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        tv.getSelectionModel().setCellSelectionEnabled(true);
        tv.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);

        tv.addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent t) -> {
            if (tv.getEditingCell() == null && t.getCode() == KeyCode.ENTER) {
                if (t.isShiftDown()) {
                    tv.getSelectionModel().selectAboveCell();
                } else {
                    tv.getSelectionModel().selectBelowCell();
                }
                t.consume();
            }
            //I decided not to override the default tab behavior
            //using ctrl tab for cell traversal, but arrow keys are better
            if (t.isControlDown() && t.getCode() == KeyCode.TAB) {
                if (t.isShiftDown()) {
                    tv.getSelectionModel().selectLeftCell();
                } else {
                    tv.getSelectionModel().selectRightCell();
                }
                t.consume();
            }
        });

        tv.setOnKeyPressed((KeyEvent t) -> {
            TablePosition tp;
            if (!t.isControlDown() && 
               (t.getCode().isLetterKey() || t.getCode().isDigitKey())) {
                lastKey = t.getText();
                tp = tv.getFocusModel().getFocusedCell();
                tv.edit(tp.getRow(),tp.getTableColumn());
                lastKey = null;
            }
        });

        tv.setOnKeyReleased((KeyEvent t) -> {
            TablePosition tp;
            switch (t.getCode()) {
                case INSERT:
                    items.add(new LineItem("",0d,0));//maybe try adding at position
                    break;
                case DELETE:
                    tp = tv.getFocusModel().getFocusedCell();
                    if (tp.getTableColumn() == descCol) {
                        deletedLines.push(items.remove(tp.getRow()));
                    } else { //maybe delete cell value
                    }
                    break;
                case Z:
                    if (t.isControlDown()) {
                        if (!deletedLines.isEmpty()) {
                            items.add(deletedLines.pop());
                        }
                    }
            }
        });

        return tv;
    }

    private class EditingCell extends TableCell{

        private TextField textField;

        @Override
        public void startEdit() {
            if (!isEmpty()) {
                super.startEdit();
                createTextField();
                setText(null);
                setGraphic(textField);
                //setContentDisplay(ContentDisplay.GRAPHIC_ONLY); 
                Platform.runLater(() -> {//without this space erases text, f2 doesn't
                    textField.requestFocus();//also selects
                });
                if (lastKey != null) {
                    textField.setText(lastKey);
                    Platform.runLater(() -> {
                        textField.deselect();
                        textField.end();
                    });
                }
            }
        }

        public void commit(){
            commitEdit(textField.getText());
        }

        @Override
        public void cancelEdit() {
            super.cancelEdit();
            try {
                setText(getItem().toString());
            } catch (Exception e) {}
            setGraphic(null);
        }

        @Override
        public void updateItem(Object item, boolean empty) {
            super.updateItem(item, empty);

            if (empty) {
                setText(null);
                setGraphic(null);
            } else if (isEditing()) {
                if (textField != null) {
                    textField.setText(getString());
                }
                setText(null);
                setGraphic(textField);
            } else {
                setText(getString());
                setGraphic(null);
                if (getTableColumn().getText().equals("amount"))
                setAlignment(Pos.CENTER_RIGHT);
            }
        } 

        private void createTextField() {
            textField = new TextField(getString());

            //doesn't work if clicking a different cell, only focusing out of table
            textField.focusedProperty().addListener(
                    (ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean arg2) -> {
                if (!arg2) commitEdit(textField.getText());
            });

            textField.setOnKeyReleased((KeyEvent t) -> {
                if (t.getCode() == KeyCode.ENTER) {
                    commitEdit(textField.getText());
                    EditingCell.this.getTableView().getSelectionModel().selectBelowCell();
                }
                if (t.getCode() == KeyCode.ESCAPE) {
                    cancelEdit();
                }
            });

            textField.addEventFilter(KeyEvent.KEY_RELEASED, (KeyEvent t) -> {
                if (t.getCode() == KeyCode.DELETE) {
                    t.consume();//stop from deleting line in table keyevent
                }
            });
        }

        private String getString() {
            return getItem() == null ? "" : getItem().toString();
        }
    }

}]]></Answer>
<Answer><![CDATA[tv.setOnKeyReleased((KeyEvent t) -> {
        TablePosition tp;
        switch (t.getCode()) {
            //other code cut out here
            case Z:
                if (t.isControlDown()) {
                    if (!deletedLines.isEmpty()) {
                        items.add(deletedLines.pop());
                    }
                    break; //don't break for regular Z
                }
            default: 
                if (t.getCode().isLetterKey() || t.getCode().isDigitKey()) {
                    lastKey = t.getText();
                    tp = tv.getFocusModel().getFocusedCell();
                    tv.edit(tp.getRow(), tp.getTableColumn());
                    lastKey = null;
                }
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21972572" questionTitle="Is it possible to reasonably emulate yield-syntax, perhaps with help of Java 8?">
<Answer><![CDATA[public class Problem0004 {

    public static void main(String[] args) {
        int maxNumber = 999 * 999;
        //with a loop
        for (int i = maxNumber; i > 0; i--) {
            if (isPalindrome(i) && has3DigitsFactors(i)) {
                System.out.println(i);
                break;
            }
        }
        //with a stream
        IntStream.iterate(maxNumber, i -> i - 1)
                .parallel()
                .filter(i -> isPalindrome(i) && has3DigitsFactors(i))
                .limit(1)
                .forEach(System.out::println);
    }

    private static boolean isPalindrome(int n) {
        StringBuilder numbers = new StringBuilder(String.valueOf(n));
        return numbers.toString().equals(numbers.reverse().toString());
    }

    private static boolean has3DigitsFactors(int n) {
        for (int i = 999; i > 0; i--) {
            if (n % i == 0 && n / i < 1000) {
                return true;
            }
        }
        return false;
    }
}]]></Answer>
<Answer><![CDATA[import java.util.Iterator;
import java.util.NoSuchElementException;

public abstract class Yield<E> implements Iterable<E> {
  protected interface Flow<T> { void yield(T item); }
  private final class State implements Runnable, Iterator<E>, Flow<E> {
    private E nextValue;
    private boolean finished, value;

    public synchronized boolean hasNext() {
      while(!(value|finished)) try { wait(); } catch(InterruptedException ex){}
      return value;
    }
    public synchronized E next() {
      while(!(value|finished)) try { wait(); } catch(InterruptedException ex){}
      if(!value) throw new NoSuchElementException();
      final E next = nextValue;
      value=false;
      notify();
      return next;
    }
    public void remove() { throw new UnsupportedOperationException(); }
    public void run() {
      try { produce(this); }
      finally {
        synchronized(this) {
          finished=true;
          notify();
        }
      }
    }
    public synchronized void yield(E next) {
      while(value) try { wait(); } catch(InterruptedException ex){}
      nextValue=next;
      value=true;
      notify();
    }
  }

  protected abstract void produce(Flow<E> f);

  public Iterator<E> iterator() {
    final State state = new State();
    new Thread(state).start();
    return state;
  }
}]]></Answer>
<Answer><![CDATA[class Generator extends Spliterators.AbstractIntSpliterator {
    final int min;
    final int max;
    int i;
    int j;

    public Generator(int min, int max) {
        super((max - min) * (max - min), 0);
        this.min = min;
        this.max = max;
        i = min;
        j = min;
    }

    public boolean tryAdvance(IntConsumer ic) {
        if (i == max) {
            return false;
        }
        ic.accept(i * j);
        j++;
        if (j == max) {
            i++;
            j = min;
        }
        return true;
    }
}

public static void main(String[] args) {
    Generator gen = new Generator(100, 1000);
    System.out.println(
        StreamSupport.intStream(gen, false)
            .filter(i -> isPalindrome(i))
            .max()
            .getAsInt());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21956515" questionTitle="How to create an infinite Stream&lt;E&gt; out of an Iterator&lt;E&gt;?">
<Answer><![CDATA[public class Fibonacci {
    private static class FibonacciGenerator extends Spliterators.AbstractIntSpliterator
    {
        private IntPredicate hasNextPredicate;
        private int beforePrevious = 0;
        private int previous = 0;

        protected FibonacciGenerator(IntPredicate hasNextPredicate)
        {
            super(Long.MAX_VALUE, 0);
            this.hasNextPredicate = hasNextPredicate;
        }

        @Override
        public boolean tryAdvance(IntConsumer action)
        {
            if (action == null)
            {
                throw new NullPointerException();
            }

            int next = Math.max(1, beforePrevious + previous);
            beforePrevious = previous;
            previous = next;

            if (!hasNextPredicate.test(next))
            {
                return false;
            }

            action.accept(next);

            return true;
        }

        @Override
        public boolean tryAdvance(Consumer<? super Integer> action)
        {
            if (action == null)
            {
                throw new NullPointerException();
            }

            int next = Math.max(1, beforePrevious + previous);
            beforePrevious = previous;
            previous = next;

            if (!hasNextPredicate.test(next))
            {
                return false;
            }

            action.accept(next);

            return true;
        }
    }

    public static void main(String args[])
    {
        Stream<Integer> infiniteStream = StreamSupport.stream(
                new FibonacciGenerator(i -> true), false);

        Stream<Integer> finiteStream = StreamSupport.stream(
                new FibonacciGenerator(i -> i < 100), false);

        // Print with a side-effect for the demo
        infiniteStream.limit(10).forEach(System.out::println);
        finiteStream.forEach(System.out::println);
    }
}]]></Answer>
<Answer><![CDATA[public final class IntRange implements Spliterator.OfInt {
    private int first, last;
    public IntRange(int first, int last) {
        this.first = first;
        this.last = last;
    }
    public boolean tryAdvance(IntConsumer action) {
        if (first < last) {
            action.accept(first++);
            return true;
        } else {
            return false;
        }
    }
    public OfInt trySplit() {
        int size = last - first;
        if (size >= 10) {
            int temp = first;
            first += size / 2;
            return new IntRange(temp, first);
        } else {
            return null;
        }
    }
    public long estimateSize() {
        return Math.max(last - first, 0);
    }
    public int characteristics() {
        return ORDERED | DISTINCT | SIZED | NONNULL
            | IMMUTABLE | CONCURRENT | SUBSIZED;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21887358" questionTitle="Reflection type inference on Java 8 Lambdas">
<Answer><![CDATA[// getting the SerializedLambda
public static SerializedLambda getSerializedLambda(Object function) {
    if (function == null || !(function instanceof java.io.Serializable)) {
        throw new IllegalArgumentException();
    }

    for (Class<?> clazz = function.getClass(); clazz != null; clazz = clazz.getSuperclass()) {
        try {
            Method replaceMethod = clazz.getDeclaredMethod("writeReplace");
            replaceMethod.setAccessible(true);
            Object serializedForm = replaceMethod.invoke(function);

            if (serializedForm instanceof SerializedLambda) {
                return (SerializedLambda) serializedForm;
            }
        }
        catch (NoSuchMethodError e) {
            // fall through the loop and try the next class
        }
        catch (Throwable t) {
            throw new RuntimeException("Error while extracting serialized lambda", t);
        }
    }

    throw new Exception("writeReplace method not found");
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.function.Function;

public class Erasure {

    static class RetainedFunction implements Function<Integer,String> {
        public String apply(Integer t) {
            return String.valueOf(t);
        }
    }

    public static void main(String[] args) throws Exception {
        Function<Integer,String> f0 = new RetainedFunction();
        Function<Integer,String> f1 = new Function<Integer,String>() {
            public String apply(Integer t) {
                return String.valueOf(t);
            }
        };
        Function<Integer,String> f2 = String::valueOf;
        Function<Integer,String> f3 = i -> String.valueOf(i);

        for (Function<Integer,String> f : Arrays.asList(f0, f1, f2, f3)) {
            try {
                System.out.println(f.getClass().getMethod("apply", Integer.class).toString());
            } catch (NoSuchMethodException e) {
                System.out.println(f.getClass().getMethod("apply", Object.class).toString());
            }
            System.out.println(Arrays.toString(f.getClass().getGenericInterfaces()));
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21713096" questionTitle="JavaFX: Adding rows to TableView with a HashMap binding">
<Answer><![CDATA[import java.util.HashMap;
import java.util.Map;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.StringConverter;

public class TableViewSample extends Application {

    public static final String Column1MapKey = "A";
    public static final String Column2MapKey = "B";

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(300);
        stage.setHeight(500);

        final Label label = new Label("Student IDs");
        label.setFont(new Font("Arial", 20));

        TableColumn<Map, String> firstDataColumn = new TableColumn<>("Class A");
        TableColumn<Map, String> secondDataColumn = new TableColumn<>("Class B");

        firstDataColumn.setCellValueFactory(new MapValueFactory(Column1MapKey));
        firstDataColumn.setMinWidth(130);
        secondDataColumn.setCellValueFactory(new MapValueFactory(Column2MapKey));
        secondDataColumn.setMinWidth(130);

        TableView table_view = new TableView<>(generateDataInMap());

        table_view.setEditable(true);
        table_view.getSelectionModel().setCellSelectionEnabled(true);
        table_view.getColumns().setAll(firstDataColumn, secondDataColumn);
        Callback<TableColumn<Map, String>, TableCell<Map, String>>
            cellFactoryForMap = new Callback<TableColumn<Map, String>,
                TableCell<Map, String>>() {
                    @Override
                    public TableCell call(TableColumn p) {
                        return new TextFieldTableCell(new StringConverter() {
                            @Override
                            public String toString(Object t) {
                                return t.toString();
                            }
                            @Override
                            public Object fromString(String string) {
                                return string;
                            }                                    
                        });
                    }
        };
        firstDataColumn.setCellFactory(cellFactoryForMap);
        secondDataColumn.setCellFactory(cellFactoryForMap);

        final VBox vbox = new VBox();

        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table_view);

        ((Group) scene.getRoot()).getChildren().addAll(vbox);

        stage.setScene(scene);

        stage.show();
    }

    private ObservableList<Map> generateDataInMap() {
        int max = 10;
        ObservableList<Map> allData = FXCollections.observableArrayList();
        for (int i = 1; i < max; i++) {
            Map<String, String> dataRow = new HashMap<>();

            String value1 = "A" + i;
            String value2 = "B" + i;

            dataRow.put(Column1MapKey, value1);
            dataRow.put(Column2MapKey, value2);

            allData.add(dataRow);
        }
        return allData;
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.MapChangeListener;
import javafx.collections.ObservableMap;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.util.Callback;

public class ObservableMapValueFactory<V> implements
        Callback<TableColumn.CellDataFeatures<ObservableMap, V>, ObservableValue<V>> {

    private final Object key;

    public ObservableMapValueFactory(Object key) {
        this.key = key;
    }

    @Override
    public ObservableValue<V> call(CellDataFeatures<ObservableMap, V> features) {
        final ObservableMap map = features.getValue();
        final ObjectProperty<V> property = new SimpleObjectProperty<V>((V) map.get(key));
        map.addListener(new MapChangeListener<Object, V>() {
            public void onChanged(Change<?, ? extends V> change) {
                if (key.equals(change.getKey())) {
                    property.set((V) map.get(key));
                }
            }
        });
        return property;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21704598" questionTitle="How to show grid lines for rows in TreeTableView">
<Answer><![CDATA[.tree-table-row-cell {
    -fx-background-color: -fx-table-cell-border-color, -fx-control-inner-background;
    -fx-background-insets: 0, 0 0 1 0;
    -fx-padding: 0.0em;
    -fx-text-fill: -fx-text-inner-color;
}
.tree-table-row-cell:selected {
    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-focus-color;
    -fx-background-insets: 0, 1, 2;
}

.tree-table-row-cell:odd {
    -fx-background-color: -fx-table-cell-border-color, derive(-fx-control-inner-background,-5%);
    -fx-background-insets: 0, 0 0 1 0;
}

.tree-table-row-cell:selected:odd {
    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-focus-color;
    -fx-background-insets: 0, 1, 2;
}]]></Answer>
<Answer><![CDATA[.tree-table-row-cell {
    -fx-background-color: -fx-table-cell-border-color, -fx-control-inner-background;
    -fx-background-insets: 0, 0 0 1 0;
}

.tree-table-row-cell:odd {
    -fx-background-color: -fx-table-cell-border-color, #F9F9F9;
    -fx-background-insets: 0, 0 0 1 0;
}

.tree-table-row-cell:selected,
.tree-table-row-cell:selected:odd {
    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-focus-color;
    -fx-background-insets: 0, 1, 2;
}

.tree-table-row-cell:selected .tree-table-cell {
    -fx-text-fill: white;
}

.tree-table-row-cell:empty {
    -fx-background-color: transparent;
}

.tree-table-row-cell:empty .tree-table-cell {
    -fx-border-width: 0px;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21670451" questionTitle="How to send multiple asynchronous requests to different web services?">
<Answer><![CDATA[ExecutorService pool = Executors.newFixedThreadPool(10);

    List<Callable<List<StudentsResults>>> stasks = new ArrayList<>();
    List<Callable<List<DoctorsResults>>> dtasks = new ArrayList<>();
    List<Callable<List<PatientsResults>>> ptasks = new ArrayList<>();

    stasks.add(new Callable<List<StudentsResults>>() {
        public List<StudentsResults> call() throws Exception {
            return retrieveStdWS1();
        }

    });
    stasks.add(new Callable<List<StudentsResults>>() {
        public List<StudentsResults> call() throws Exception {
            return retrieveStdWS2();
        }

    });
    stasks.add(new Callable<List<StudentsResults>>() {
        public List<StudentsResults> call() throws Exception {
            return retrieveStdWS3();
        }

    });

    dtasks.add(new Callable<List<DoctorsResults>>() {
        public List<DoctorsResults> call() throws Exception {
            return retrieveDocWS4();
        }

    });
    dtasks.add(new Callable<List<DoctorsResults>>() {
        public List<DoctorsResults> call() throws Exception {
            return retrieveDocWS5();
        }

    });
    dtasks.add(new Callable<List<DoctorsResults>>() {
        public List<DoctorsResults> call() throws Exception {
            return retrieveDocWS6();
        }

    });

    ptasks.add(new Callable<List<PatientsResults>>() {
        public List<PatientsResults> call() throws Exception {
            return retrievePtWS7();
        }

    });
    ptasks.add(new Callable<List<PatientsResults>>() {
        public List<PatientsResults> call() throws Exception {
            return retrievePtWS8();
        }

    });
    ptasks.add(new Callable<List<PatientsResults>>() {
        public List<PatientsResults> call() throws Exception {
            return retrievePtWS9();
        }

    });

    List<Future<List<StudentsResults>>> sresults = pool.invokeAll(stasks);
    List<Future<List<DoctorsResults>>> dresults = pool.invokeAll(dtasks);
    List<Future<List<PatientsResults>>> presults = pool.invokeAll(ptasks);

    for (Future<List<StudentsResults>> future : sresults) {
       this.studentsResults.addAll(future.get());
    }
    for (Future<List<DoctorsResults>> future : dresults) {
       this.doctorsResults.addAll(future.get());
    }
    for (Future<List<PatientsResults>> future : presults) {
       this.patientsResults.addAll(future.get());
    }
    pool.shutdown();]]></Answer>
<Answer><![CDATA[public void retrieveAllLists() throws ExecutionException{
    // first fire all requests
    Response<List<StudentsResults>> students1 = ws1.getStudents();
    Response<List<StudentsResults>> students2 = ws2.getStudents();
    Response<List<StudentsResults>> students3 = ws3.getStudents();

    Response<List<DoctorsResults>> doctors1 = ws4.getDoctors();
    Response<List<DoctorsResults>> doctors2 = ws5.getDoctors();
    Response<List<DoctorsResults>> doctors3 = ws6.getDoctors();

    Response<List<PatientsResults>> patients1 = ws7.getPatients();
    Response<List<PatientsResults>> patients2 = ws8.getPatients();
    Response<List<PatientsResults>> patients3 = ws9.getPatients();

    // then await and collect all the responses
    studentsResults.addAll(students1.get());
    studentsResults.addAll(students2.get());
    studentsResults.addAll(students3.get());

    doctorsResults.addAll(doctors1.get());
    doctorsResults.addAll(doctors2.get());
    doctorsResults.addAll(doctors3.get());

    patientsResults.addAll(patients1.get());
    patientsResults.addAll(patients2.get());
    patientsResults.addAll(patients3.get());
}]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;

public class ThreadingExample
{
    private ArrayList <MyThread> myThreads;

    public static class MyRunnable implements Runnable
    {
        private String data;

        public String getData()
        {
            return data;
        }

        public void setData(String data)
        {
            this.data = data;
        }

        @Override
        public void run()
        {
        }
    }

    public static class MyThread extends Thread
    {
        private MyRunnable myRunnable;

        MyThread(MyRunnable runnable)
        {
            super(runnable);
            setMyRunnable(runnable);
        }

        /**
         * @return the myRunnable
         */
        public MyRunnable getMyRunnable()
        {
            return myRunnable;
        }

        /**
         * @param myRunnable the myRunnable to set
         */
        public void setMyRunnable(MyRunnable myRunnable)
        {
            this.myRunnable = myRunnable;
        }
    }

    public ThreadingExample()
    {
        myThreads = new ArrayList <MyThread> ();
    }

    public ArrayList <String> retrieveMyData ()
    {
        ArrayList <String> allmyData = new ArrayList <String> ();

        if (isComplete() == false)
        {
            // Sadly we aren't done
            return (null);
        }

        for (MyThread myThread : myThreads)
        {
            allmyData.add(myThread.getMyRunnable().getData());
        }

        return (allmyData);
    }

    private boolean isComplete()
    {
        boolean complete = true;

        // wait for all of them to finish
        for (MyThread x : myThreads)
        {
            if (x.isAlive())
            {
                complete = false;
                break;
            }
        }
        return (complete);
    }

    public void kickOffQueries()
    {
        myThreads.clear();

        MyThread a = new MyThread(new MyRunnable()
        {
            @Override
            public void run()
            {
                // This is where you make the call to external services
                // giving the results to setData("");
                setData("Data from list A");
            }
        });
        myThreads.add(a);

        MyThread b = new MyThread (new MyRunnable()
        {
            @Override
            public void run()
            {
                // This is where you make the call to external services
                // giving the results to setData("");
                setData("Data from list B");
            }
        });
        myThreads.add(b);

        for (MyThread x : myThreads)
        {
            x.start();
        }

        boolean done = false;

        while (done == false)
        {
            if (isComplete())
            {
                done = true;
            }
            else
            {
                // Sleep for 10 milliseconds
                try
                {
                    Thread.sleep(10);
                }
                catch (InterruptedException e)
                {
                    e.printStackTrace();
                }
            }
        }
    }


    public static void main(String [] args)
    {
        ThreadingExample example = new ThreadingExample();
        example.kickOffQueries();

        ArrayList <String> data = example.retrieveMyData();
        if (data != null)
        {
            for (String s : data)
            {
                System.out.println (s);
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21655790" questionTitle="JavaFX PopOver From ControlFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.controlsfx.control.PopOver;

/**
 *
 * @author Sedrick
 */
public class JavaFXApplication35 extends Application {

    @Override
    public void start(Stage primaryStage) {


        //Build PopOver look and feel
        Label lblName = new Label("John Doe");
        Label lblStreet = new Label("123 Hello Street");
        Label lblCityStateZip = new Label("MadeUpCity, XX 55555");   
        VBox vBox = new VBox(lblName, lblStreet, lblCityStateZip);
        //Create PopOver and add look and feel
        PopOver popOver = new PopOver(vBox);


        Label label = new Label("Mouse mouse over me");
        label.setOnMouseEntered(mouseEvent -> {
            //Show PopOver when mouse enters label
            popOver.show(label);
        });

        label.setOnMouseExited(mouseEvent -> {
            //Hide PopOver when mouse exits label
            popOver.hide();
        });


        StackPane root = new StackPane();
        root.getChildren().add(label);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }    
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.ListView;
import javafx.scene.control.Slider;
import javafx.scene.control.TitledPane;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

import org.controlsfx.ControlsFXSample;
import org.controlsfx.control.popover.PopOver;
import org.controlsfx.control.popover.PopOverController;
import org.controlsfx.control.popover.PopOverHeader;
import org.controlsfx.control.popover.PopOverTitledPane;
import org.controlsfx.samples.Utils;

public class HelloPopOver extends ControlsFXSample {
    private PopOverController<PopOver, Button> controller = new MyController();

    @Override
    public Node getPanel(Stage stage) {
        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setAlignment(Pos.CENTER);
        grid.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent evt) {
                controller.hidePopOver();
            }
        });

        for (int i = 0; i < 10; i++) {
            final Button button = new Button("Button " + i);
            grid.add(button, i % 2, i / 2);

            button.setOnMouseClicked(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent evt) {
                    controller.hidePopOver();

                    if (evt.getClickCount() == 2) {
                        controller.setupPopOver(button);
                        controller.showPopOver(button, evt.getScreenX(),
                                evt.getScreenY());
                    }
                }
            });
        }

        return grid;
    }

    class MyController extends PopOverController<PopOver, Button> {
        @Override
        protected PopOver createPopOver(final Button button) {
            PopOver editor = new PopOver();

            PopOverHeader<?> header = (PopOverHeader<?>) editor.getHeader();
            header.setTitle(button.getText() + " (edit me)");
            header.setSubtitle("Just some random controls (edit me)");

            editor.setDetachedTitle(button.getText());

            editor.getPanes().add(createTitledPane("Start Time & Duration"));
            editor.getPanes().add(createTitledPane("Dependencies"));
            editor.getPanes().add(createTitledPane("Priority"));
            editor.getPanes().add(createTitledPane("Assignments / Resources"));
            editor.setExpandedPane(editor.getPanes().get(0));
            editor.setFooter(new Footer());

            ColorPicker picker = (ColorPicker) header.getExtra();
            picker.valueProperty().addListener(new ChangeListener<Color>() {
                @Override
                public void changed(ObservableValue<? extends Color> value,
                        Color oldColor, Color newColor) {
                    button.setBackground(new Background(new BackgroundFill(
                            newColor, CornerRadii.EMPTY, Insets.EMPTY)));
                }
            });

            return editor;
        }
    }

    private TitledPane createTitledPane(String title) {
        VBox box = new VBox(5);
        box.getChildren().add(new Button("Test"));
        box.getChildren().add(new Slider());

        ListView<String> view = new ListView<>();
        view.setPrefHeight(100);
        box.getChildren().add(view);
        final TitledPane pane = new PopOverTitledPane(title, box);
        pane.setTextAlignment(TextAlignment.LEFT);

        Pane connectivityArrow = (Pane) pane.lookup(".arrow");
        if (connectivityArrow != null) {
            connectivityArrow.translateXProperty().bind(
                    pane.widthProperty().subtract(
                            connectivityArrow.widthProperty().multiply(2)));
        }

        return pane;
    }

    class Footer extends FlowPane {
        public Footer() {
            super(Orientation.HORIZONTAL);

            setAlignment(Pos.CENTER_RIGHT);

            Button delete = new Button("Delete");
            getChildren().add(delete);
            delete.setOnAction(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent evt) {
                }
            });
        }
    }

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public String getSampleName() {
        return "PopOver";
    }

    @Override
    public String getJavaDocURL() {
        return Utils.JAVADOC_BASE
                + "org/controlsfx/control/popover/PopOver.html";
    }

    @Override
    public String getSampleDescription() {
        return "An implementation of a pop over control as used by Apple for its iCal application. A pop over allows"
                + "the user to see and edit an objects properties. The pop over gets displayed in its own popup window and"
                + "can be torn off in order to create several instances of it.";
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21639108" questionTitle="JavaFX TableView Objects with Maps">
<Answer><![CDATA[public class PersonSimple {
String firstName;
String lastName;
String age;
Map<Integer, Double> map;

public PersonSimple(String fn, String ln, String age, Double gr0, Double gr1, Double gr2)
{
    this.firstName = fn;
    this.lastName = ln;
    this.age = age;
    map = new LinkedHashMap<>();
    map.put(0, gr0);
    map.put(1, gr1);
    map.put(2, gr2);
}

public String getFirstName()
{
    return firstName;
}

public String getLastName()
{
    return firstName;
}
public String getAge()
{
    return age;
}

private Double getFromMap(Integer key)
{
    Set<Entry<Integer, Double>> s = map.entrySet();
    Iterator<Entry<Integer, Double>> iter = s.iterator();
    int index = 0;
    while(iter.hasNext())
    {
        Entry<Integer, Double> e = iter.next();
        if(index == key.intValue())
        {
            return e.getValue();
        }
        index++;
    }
    return null;
}

public Double getFM0()
{
    return getFromMap(0);
}

public Double getFM1()
{
    return getFromMap(1);
}

public Double getFM2()
{
    return getFromMap(2);
}]]></Answer>
<Answer><![CDATA[import java.util.HashMap;
import java.util.LinkedHashMap;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;

public class AssTable extends Application {

    @Override
    public void start(Stage primaryStage) {
        ObservableList<Student> students = FXCollections.observableArrayList(
            new Student("jack"),new Student("john"),new Student("jill"),new Student("jane"));
        TableView<Student> studentTable = new TableView(students);
        TableColumn<Student, String> firstNameColumn = new TableColumn("name");
            firstNameColumn.setCellValueFactory(new PropertyValueFactory("firstName"));
        studentTable.getColumns().add(firstNameColumn);

        int maxAss = 0;
        for (Student student : students)
            maxAss = Math.max(maxAss, student.map.size());

        Callback<TableColumn.CellDataFeatures<Student, String>, ObservableValue<String>> callBack = 
                new Callback<TableColumn.CellDataFeatures<Student, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<Student, String> param) {
                return param.getValue().map.containsKey(
                        "ass"+Integer.toString((int)param.getTableColumn().getUserData()))
                        ? new SimpleStringProperty(String.format("%.1f",100d*param.getValue().map.get(
                            "ass"+Integer.toString((int)param.getTableColumn().getUserData()))))
                        :new SimpleStringProperty("");
            }
        };

        ObservableList<TableColumn<Student, String>> assCols = FXCollections.observableArrayList();
        for (int i = 1; i<=maxAss; i++){
            TableColumn<Student, String> tmpCol = new TableColumn("ass"+Integer.toString(i));
            tmpCol.setUserData(i);
            tmpCol.setCellValueFactory(callBack);
            assCols.add(tmpCol);
        }
        studentTable.getColumns().addAll(assCols);

        VBox root = new VBox(studentTable);
        Scene scene = new Scene(root, 500, 250);

        primaryStage.setTitle("Table with map");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public class Student {

        private final StringProperty firstName = new SimpleStringProperty();
        public StringProperty firstNameProperty(){return firstName;}
        public final HashMap<String, Double> map;

        public Student(String fn) {
            firstName.set(fn);
            map = new LinkedHashMap<>();
            for (int i = 1; i <= 10; i++) {
                double grade = Math.random();
                if (grade > .5) {
                    map.put("ass" + Integer.toString(i), grade);
                }
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21500254" questionTitle="How does Servlet/JSP MVC patterns translate to JSF/Facelets (in particular the service and controller parts)?">
<Answer><![CDATA[package app.controllers;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;
import javax.persistence.NoResultException;

import app.entities.User;
import app.service.UserService;

@ManagedBean
@ViewScoped
public class UserController {

    // https://stackoverflow.com/a/10691832/281545
    private User user;
    @EJB // do not inject stateful beans (?)
    // @Inject
    private UserService service;

    public User getUser() {
        return user;
    }

    @PostConstruct
    void init() {
        // https://stackoverflow.com/questions/3406555/why-use-postconstruct
        user = new User();
    }

    public String login() { return null; }

    public String register() {
        FacesContext context = FacesContext.getCurrentInstance();
        user = service.register(user);
        if (user.getIduser() == 0) {
            context.addMessage(null, new FacesMessage(
                FacesMessage.SEVERITY_ERROR, "Registration failed", null));
            return null;
        }
        context.getExternalContext().getSessionMap().put("user", user);
        return "/index.xhtml?faces-redirect=true";
    }

    public String logout() { return null; }

    @ManagedBean
    @RequestScoped
    public static class UniqueUsernameValidator implements Validator {

        @EJB
        private UserService service;

        @Override
        public void validate(FacesContext context, UIComponent component,
                Object value) throws ValidatorException {
            if (value == null) return; // Let required="true" handle, if any.
            try {
                if (!service.isUsernameUnique((String) value)) {
                    throw new ValidatorException(new FacesMessage(
                        FacesMessage.SEVERITY_ERROR,
                        "Username is already in use.", null));
                }
            } catch (Exception e) {}
        }
}]]></Answer>
<Answer><![CDATA[// we talk about the big picture here, not about how jsf is built 
// but how your app is built


// model
package com.foo.domain.registration.entity;

@Entity
public class User { 
    // fields
}

package com.foo.domain.registration.service;

// also model
@Stateless
public class RegistrationService {

    @PersistenceContext 
    EntityManager em;

    public void register(User u) { 
        em.persist(u);
    } 
}

package com.foo.presentation

// controller
@Named
@ViewScoped
public class RegistrationController { 

    @Inject
    RegistrationService rs;

    User current = new User();

    public void register() { 
        rs.register(u);
    }

    // get set for current user
}

// view
// quite a lot boilerplate omitted
// form omitted which displays all the necessary field of your current user
// via value="#{registrationContoller.current.name}"
<h:commandButton value="submit" type="submit" action="#{registrationController.register}" />]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21383984" questionTitle="Invoking a Class and Method Using Variables In Java">
<Answer><![CDATA[public class SettingsClass {

    public static final boolean BOOT_TEST = true;
    public static final String BOOT_CLASS = "MyClass";
    public static final String BOOT_METHOD = "doMain";

}

public class MyClass {
    public static void doMain() {
    }
}

public class MainClass {


    public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException {

        if(SettingsClass.BOOT_TEST) {
            Class<?> clazz = Class.forName(SettingsClass.BOOT_CLASS);
            Method m = clazz.getMethod(SettingsClass.BOOT_METHOD);
            m.invoke(null);
            System.exit(1);
        }]]></Answer>
<Answer><![CDATA[import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MainClass {

  public static final boolean BOOT_TEST = true;
  public static final String BOOT_CLASS = "MainClass";
  public static final String BOOT_METHOD = "someMethod";

  public static void main(String[] args) throws InstantiationException,
      IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {

    if (MainClass.BOOT_TEST) {
      Class bootClass = Class.forName(BOOT_CLASS);
      Method bootMethod = bootClass.getDeclaredMethod(BOOT_METHOD, null);
      bootMethod.invoke(null, null);
    }
  }

  public static void someMethod() {
    System.out.println("Some method executing...");
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21171249" questionTitle="How to reload the screen when changing languages​ in JavaFX?">
<Answer><![CDATA[public class Main extends Application {
private static Locale locale = new Locale("pt", "BR");
private static Image icone = new Image("picture.jpg");
private Scene scene;
public static Stage stage;

/**
 *
 * @param st
 * @throws Exception
 */

@Override
public void start(Stage st) throws Exception {
    Parent root = FXMLLoader.load(getClass().getResource("Home.fxml"), ResourceBundle.getBundle("label", locale));
    stage = st;
    scene = new Scene(root);
    stage.setTitle("GUI");
    stage.getIcons().add(icone);
    stage.setScene(scene);
    stage.show();
}

public static Image getIcone() {
    return icone;
}

public static Locale getLocale() {
    return locale;
}

public static void setLocale(Locale locale) {
    Main.locale = locale;
}

public void reload() throws IOException {
    Parent root = FXMLLoader.load(getClass().getResource("Home.fxml"), ResourceBundle.getBundle("label", locale));
    scene = new Scene(root);
    stage.setTitle("GUI");
    stage.getIcons().add(icone);
    stage.setScene(scene);
    stage.show();

}

public static void main(String[] args) {
    launch(args);
}

}]]></Answer>
<Answer><![CDATA[public class JavaFXController extends I18NController implements Initializable
{
    @FXML private DatePicker dpDate;
    @FXML private RadioButton rdoArabic;
    @FXML private RadioButton rdoEnglish;

    // ...

    @Override
    public void initialize(URL location, ResourceBundle resources)
    {
        // ...

        rdoEnglish.setOnAction(e ->
        {
            try
            {
                changeLanguage(AppSettings.Language.ENGLISH);
            }
            catch(IOException e1)
            {
                e1.printStackTrace();
            }
        });

        rdoArabic.setOnAction(e ->
        {
            try
            {
                changeLanguage(AppSettings.Language.ARABIC);
            }
            catch(IOException e1)
            {
                e1.printStackTrace();
            }
        });
    }

    // ...

    @Override
    protected ResourceBundle getResourceBundle(Locale locale)
    {
        return ResourceBundle.getBundle("com/stackoverflow/gui/resources/JavaFXResourceBundle", locale, new UTF8Control());
    }

    @Override
    protected URL getFXMLResource()
    {
        return getClass().getResource("resources/JavaFXDocument.fxml");
    }

    @Override
    protected void onSaveState(StateBundle stateBundle)
    {
        LocalDate localDate = dpDate.getValue();
        boolean isRdoArabicSelected = rdoArabic.isSelected();
        boolean isRdoEnglishSelected = rdoEnglish.isSelected();

        stateBundle.putData("localDate", localDate);
        stateBundle.putData("isRdoArabicSelected", isRdoArabicSelected);
        stateBundle.putData("isRdoEnglishSelected", isRdoEnglishSelected);
    }

    @Override
    protected void onLoadState(I18NController newController, I18NLanguage newLanguage, ResourceBundle resourceBundle, StateBundle stateBundle)
    {
        JavaFXController controller = (JavaFXController) newController;
        controller.getPrimaryStage().setTitle(resourceBundle.getString("window.title"));
        NodeOrientation nodeOrientation = newLanguage.getNodeOrientation();

        LocalDate localDate = stateBundle.getDate("localDate", LocalDate.class);
        boolean isRdoArabicSelected = stateBundle.getDate("isRdoArabicSelected", Boolean.class);
        boolean isRdoEnglishSelected = stateBundle.getDate("isRdoEnglishSelected", Boolean.class);

        controller.dpDate.setValue(localDate);
        controller.rdoArabic.setSelected(isRdoArabicSelected);
        controller.rdoEnglish.setSelected(isRdoEnglishSelected);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21170414" questionTitle="Create an entity with two fields that are mutually exclusive">
<Answer><![CDATA[class Exclusive{

  private String value1 = null;
  private Enum value2 = null;

  public Exclusive(){
   ....
  }

  public void setValue1(String s){
    value1 = s;
    value2 = null;
  }

 public void setValue2(Enum e){
    value2 = e;
    value1 = null;
 }

}]]></Answer>
<Answer><![CDATA[@Entity
public class MutuallyExclusive1 {
    @Id
    @GeneratedValue
    private int Id;
    private String strValue;
    @Enumerated(EnumType.STRING)
    private MyEnum enumValue;

    public MutuallyExclusive1() {
        // do nothing
    }

    public void setEnum(final MyEnum enumValue) {
        if (strValue != null) {
            throw new IllegalStateException("stgValue and enumValue cannot be populated at the same time!");
        }
        this.enumValue = enumValue;
    }

    public void setString(final String strValue) {
        if (enumValue != null) {
            throw new IllegalStateException("stgValue and enumValue cannot be populated at the same time!");
        }
        this.strValue = strValue;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="21024637" questionTitle="Handling Hibernate Transactions">
<Answer><![CDATA[public class HibernateUtil {

      private static final SessionFactory sessionFactory = buildSessionFactory();

      @SuppressWarnings("deprecation")
    private static SessionFactory buildSessionFactory() {
        try {
          // Create the SessionFactory from Annotation
          return new AnnotationConfiguration().configure().buildSessionFactory();
        }
        catch (Throwable ex) {
          // Make sure you log the exception, as it might be swallowed
          System.err.println("Initial SessionFactory creation failed." + ex);
          throw new ExceptionInInitializerError(ex);
        }
      }

      public static SessionFactory getSessionFactory() {
        return sessionFactory;
      }
    }]]></Answer>
<Answer><![CDATA[package com.project.stackoverflow;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class HibernateUtil {

    private static final ThreadLocal threadSession = new ThreadLocal();
    private static SessionFactory sessionFactory;

    /**
     * A public method to get the Session.
     * 
     * @return Session
     */
    public static Session getSession() {
        Session session = (Session) threadSession.get();

        // Open a Session, if this thread has none yet
        if ((null == session) || !session.isOpen()) {
            logger.info("Null Session");
            session = sessionFactory.openSession();
            logger.info("Session Opened");
            threadSession.set(session);
        }

        return session;
    }

    public static void closeSession() {
        Session session = (Session) threadSession.get();

        // Open a Session, if this thread has none yet
        if (null != session) {
            session.close();
            session = null;
            threadSession.set(null);
        }
    }

        return sessionFactory;
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        logger.info("Inside set session Factory");
        this.sessionFactory = sessionFactory;
        logger.info("After set session Factory");
    }

    public static void save(Object obj) {
        getSession().save(obj);
        getSession().flush();
    }

    public static void saveOrUpdate(Object obj) {
        getSession().saveOrUpdate(obj);
        getSession().flush();
    }
    public static void batchUpdate(Object obj) {
        getSession().saveOrUpdate(obj);
        getSession().flush();
    }

    public static void update(Object obj) {
        getSession().update(obj);
        getSession().flush();
    }

    public static void delete(Object obj) {
        getSession().delete(obj);
        getSession().flush();
    }
}]]></Answer>
<Answer><![CDATA[<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
    destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
    p:url="${jdbc.databaseurl}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

    <beans:bean id="sessionFactory"
    class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <beans:property name="dataSource" ref="dataSource" />
    <beans:property name="configLocation">
        <beans:value>classpath:hibernate.cfg.xml</beans:value>
    </beans:property>
    <beans:property name="configurationClass">
        <beans:value>org.hibernate.cfg.AnnotationConfiguration</beans:value>
    </beans:property>
    <beans:property name="hibernateProperties">
        <beans:props>
            <beans:prop key="hibernate.dialect">${jdbc.dialect}</beans:prop>
            <beans:prop key="hibernate.show_sql">true</beans:prop>
        </beans:props>
    </beans:property>
</beans:bean>

<beans:bean id="transactionManager"
    class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <beans:property name="sessionFactory" ref="sessionFactory" />
</beans:bean>

<tx:annotation-driven transaction-manager="transactionManager" />]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20936101" questionTitle="Get ListCell via ListView">
<Answer><![CDATA[public class ListViewTest extends Application {


    @Override
    public void start(Stage stage) throws Exception {

        VBox root = new VBox();
        final ObservableList<MyObject> allObjects = FXCollections.observableArrayList(new MyObject("object0"), new MyObject("object1"),new MyObject("object2"),new MyObject("object3"),new MyObject("object4"));
       final  ListView<MyObject> listView = new ListView<>(allObjects);
        listView.setCellFactory(new Callback<ListView<MyObject>, ListCell<MyObject>>() {
            @Override
            public ListCell<MyObject> call(ListView<MyObject> myObjectListView) {
                ListCell<MyObject> cell = new ListCell<MyObject>(){
                    @Override
                    protected void updateItem(MyObject myObject, boolean b) {
                        super.updateItem(myObject, b);
                        if(myObject != null) {
                            setText(myObject.getName());
                            if("selected".equalsIgnoreCase(myObject.getSpecialIndicator())) {
                                System.out.println("Setting new CSS/graphics for index retun from service." + myObject.getName());
                                setText("I am selected Index from Service");
                            } else if("selectedplusone".equalsIgnoreCase(myObject.getSpecialIndicator())) {
                                System.out.println("Setting new CSS/Graphics for index+1 returned from service" + myObject.getName());
                                setText("I am selected Index +1  from Service");
                            }
                            myObject.setSpecialIndicator(""); // reset it back to empty
                        }
                    }
                };

                return cell;
            }
        });
        Button serviceIndex2 = new Button("ServiceIndex2");
        serviceIndex2.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                int indexFromService =2;
                listView.getItems().get(indexFromService).setSpecialIndicator("selected");
                listView.getItems().get(indexFromService+1).setSpecialIndicator("selectedplusone");
                listView.setItems(null);
                listView.setItems(allObjects);
            }
        });
        root.getChildren().addAll(listView,serviceIndex2);
        Scene scene = new Scene(root,500,500);
        stage.setScene(scene);
        stage.show();

    }

    public static void main(String[] args) {
        launch(args);
    }

    class MyObject {

        private StringProperty name;
        private StringProperty specialIndicator;

        MyObject(String name) {
            this.name = new SimpleStringProperty(name);
            this.specialIndicator = new SimpleStringProperty();
        }

        public String getName() {
            return name.get();
        }

        public StringProperty nameProperty() {
            return name;
        }

        public void setName(String name) {
            this.name.set(name);
        }

        public String getSpecialIndicator() {
            return specialIndicator.get();
        }

        public StringProperty specialIndicatorProperty() {
            return specialIndicator;
        }

        public void setSpecialIndicator(String specialIndicator) {
            this.specialIndicator.set(specialIndicator);
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.concurrent.Callable;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.binding.BooleanBinding;
import javafx.beans.binding.IntegerBinding;
import javafx.beans.binding.ObjectBinding;
import javafx.beans.binding.StringBinding;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.util.Callback;

public class ListViewStyleAroundSelection extends Application {

    @Override
    public void start(Stage primaryStage) {
        final ListView<MyDataType> listView = new ListView<>();
        for (int i=0; i<=20; i++) {
            listView.getItems().add(new MyDataType("Item "+i, false));
        }
        final HBox controls = new HBox(5);
        controls.setPadding(new Insets(5));
        final Button button = new Button("Set selection");
        final TextField indexField = new TextField();

        button.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                try {
                    int index = Integer.parseInt(indexField.getText());
                    if (index >= 0 && index < listView.getItems().size()) {
                        final MyDataType item = listView.getItems().get(index);
                        item.setSelected( ! item.isSelected() );
                    }
                } catch (NumberFormatException nfe) {
                    indexField.setText("");
                }
            }

        });

        controls.getChildren().addAll(new Label("Enter selection index:"), indexField, button);
        final BorderPane root = new BorderPane();
        root.setCenter(listView);
        root.setBottom(controls);

        listView.setCellFactory(new Callback<ListView<MyDataType>, ListCell<MyDataType>>() {

            @Override
            public ListCell<MyDataType> call(ListView<MyDataType> lv) {
                final ListCell<MyDataType> cell = new ListCell<>();
                final IntegerBinding previousIndex = cell.indexProperty().subtract(1);
                final ObjectBinding<MyDataType> previousItem = Bindings.valueAt(listView.getItems(), previousIndex);
                final BooleanBinding previousItemSelected = Bindings.selectBoolean(previousItem, "selected");
                final StringBinding thisItemName = Bindings.selectString(cell.itemProperty(), "name");
                final BooleanBinding thisItemSelected = Bindings.selectBoolean(cell.itemProperty(), "selected");
                cell.textProperty().bind(Bindings.createStringBinding(new Callable<String>() {

                    @Override
                    public String call() throws Exception {
                        if (cell.getItem() == null) {
                            return null ;
                        } else {
                            String value = cell.getItem().getName();
                            if (thisItemSelected.get()) {
                                value = value + " (selected) " ;
                            } else if (previousItemSelected.get()) {
                                value = value + " (selected item is above)";
                            }
                            return value ;
                        }
                    }

                }, thisItemName, thisItemSelected, previousItemSelected));
                return cell;
            }

        });

        final Scene scene = new Scene(root, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static class MyDataType {
        private final BooleanProperty selected ;
        private final StringProperty name ;
        public MyDataType(String name, boolean selected) {
            this.name = new SimpleStringProperty(this, "name", name);
            this.selected = new SimpleBooleanProperty(this, "selected", selected);
        }
        public final String getName() {
            return name.get();
        }
        public final void setName(String name) {
            this.name.set(name);
        }
        public final StringProperty nameProperty() {
            return name ;
        }
        public final boolean isSelected() {
            return selected.get();
        }
        public final void setSelected(boolean selected) {
            this.selected.set(selected);
        }
        public final BooleanProperty selectedProperty() {
            return selected;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20879242" questionTitle="Get Checkbox value in a table in JavaFX">
<Answer><![CDATA[package checkboxtablecelltest;

import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

/**
 *
 * @author reegan
 */
public class CheckBoxTableCellTest extends Application {

    @Override   
    public void start(Stage primaryStage) {
        final TableView<Person> tableView = new TableView<Person>();
        tableView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        tableView.setItems(FXCollections.observableArrayList(
                new Person("Robert", "Plant"),
                new Person("Neil", "Young"),
                new Person("Willie", "Nelson"),
                new Person("Natalie", "Merchant")));
        tableView.getItems().get(3).setVegetarian(true);
        final TableColumn<Person, String> firstNameCol = new TableColumn<Person, String>("First Name");
        final TableColumn<Person, String> lastNameCol = new TableColumn<Person, String>("Last Name");
        final TableColumn<Person, Boolean> vegetarianCol = new TableColumn<Person, Boolean>("Vegetarian");
        tableView.getColumns().addAll(firstNameCol, lastNameCol, vegetarianCol);
        firstNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>("firstName"));
        lastNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>("lastName"));
        vegetarianCol.setCellValueFactory(new PropertyValueFactory<Person, Boolean>("vegetarian"));
        vegetarianCol.setCellFactory(CheckBoxTableCell.forTableColumn(vegetarianCol));
        vegetarianCol.setEditable(true);
        tableView.setEditable(true);

        final BorderPane root = new BorderPane();
        root.setCenter(tableView);

        final HBox controls = new HBox(5);
        final Button infoButton = new Button("Show details");
        infoButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                for (Person p : tableView.getItems()) {
                    System.out.printf("%s %s (%svegetarian)%n", p.getFirstName(),
                            p.getLastName(), p.isVegetarian() ? "" : "not ");
                            System.out.println(tableView.getSelectionModel().getSelectedItems());

                }
                System.out.println();
            }
        });
        controls.getChildren().add(infoButton);
        root.setBottom(controls);

        Scene scene = new Scene(root, 300, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    public static class Person {

        private StringProperty firstName;
        private StringProperty lastName;
        private BooleanProperty vegetarian;

        public Person(String firstName, String lastName) {
            this.firstName = new SimpleStringProperty(firstName);
            this.lastName = new SimpleStringProperty(lastName);
            this.vegetarian = new SimpleBooleanProperty(false);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public String getLastName() {
            return lastName.get();
        }

        public boolean isVegetarian() {
            return vegetarian.get();
        }

        public void setFirstName(String firstName) {
            this.firstName.set(firstName);
        }

        public void setLastName(String lastName) {
            this.lastName.set(lastName);
        }

        public void setVegetarian(boolean vegetarian) {
            this.vegetarian.set(vegetarian);
        }

        public StringProperty firstNameProperty() {
            return firstName;
        }

        public StringProperty lastNameProperty() {
            return lastName;
        }

        public BooleanProperty vegetarianProperty() {
            return vegetarian;
        }
    }
}]]></Answer>
<Answer><![CDATA[public static class Member {
    private StringProperty myName;
    private BooleanProperty myCheck;

    public Member(String name, boolean checked) {
        myName = new SimpleStringProperty(name);
        myCheck = new SimpleBooleanProperty(checked);
    }

    public StringProperty nameProperty() { return myName; }    
    public BooleanProperty checkProperty() { return myCheck; }
}

VBox testTable6(VBox box) { // check box bind to cell property
    ObservableList<Member> members = FXCollections.observableArrayList();

    members.add(new Member("peter", true));
    members.add(new Member("gernot", true));
    members.add(new Member("fritz", false));

    TableView<Member> table = new TableView<Member>();
    table.prefHeightProperty().bind(box.heightProperty());
    table.setItems(members);

    TableColumn<Member,String> c1 = new TableColumn<Member,String>("Name");
    c1.setCellValueFactory(new PropertyValueFactory<Member,String>("name"));
    table.getColumns().add(c1);

    TableColumn<Member,Boolean> c2 = new TableColumn<Member,Boolean>("Membercheck");
    c2.setCellValueFactory(new PropertyValueFactory<Member,Boolean>("check"));
    c2.setCellFactory(column -> new TableCell<Member, Boolean>(){
        public void updateItem(Boolean check, boolean empty) {
            super.updateItem(check, empty);
            if (check == null || empty) {
                setGraphic(null);
            } else {
                CheckBox box = new CheckBox();
                BooleanProperty checked = (BooleanProperty)column.getCellObservableValue(getIndex());
                box.setSelected(checked.get());
                box.selectedProperty().bindBidirectional(checked);
                setGraphic(box);
            }
        }
    }
            );
    table.getColumns().add(c2);

    box.getChildren().addAll(table);
    return box;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20802208" questionTitle="Delete a row from a JavaFX table using context menu">
<Answer><![CDATA[TableView<LineItem> tv = new TableView<>(items);
Stack<LineItem> deletedLines = new Stack<>();
tv.setUserData(deletedLines);
MenuItem mnuDel = new MenuItem("Delete row");
mnuDel.setOnAction(new EventHandler<ActionEvent>() {
    @Override
    public void handle(ActionEvent t) {
        LineItem item = items.get(tv.getSelectionModel().getSelectedIndex());
        if (item != null){ 
            String fn = item.getFirstName();
            deletedLines.push(items.remove(item));
        }
    }
});
MenuItem mnuUnDel = new MenuItem("Undo Delete");
mnuUnDel.setOnAction(new EventHandler<ActionEvent>() {
    @Override
    public void handle(ActionEvent t) {
        if (!deletedLines.isEmpty())items.add(deletedLines.pop());
    }
});
tv.setContextMenu(new ContextMenu(mnuDel,mnuUnDel));]]></Answer>
<Answer><![CDATA[private TableView<Person> table = new TableView<Person>();

...

table.setRowFactory(new Callback<TableView<Person>, TableRow<Person>>() {  
        @Override  
        public TableRow<Person> call(TableView<Person> tableView) {  
            final TableRow<Person> row = new TableRow<>();  
            final ContextMenu contextMenu = new ContextMenu();  
            final MenuItem removeMenuItem = new MenuItem("Remove");  
            removeMenuItem.setOnAction(new EventHandler<ActionEvent>() {  
                @Override  
                public void handle(ActionEvent event) {  
                    table.getItems().remove(row.getItem());  
                }  
            });  
            contextMenu.getItems().add(removeMenuItem);  
           // Set context menu on row, but use a binding to make it only show for non-empty rows:  
            row.contextMenuProperty().bind(  
                    Bindings.when(row.emptyProperty())  
                    .then((ContextMenu)null)  
                    .otherwise(contextMenu)  
            );  
            return row ;  
        }  
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20779880" questionTitle="How to achieved collision detection in Translate Transition (in JavaFX)?">
<Answer><![CDATA[ObservableBooleanValue colliding = Bindings.createBooleanBinding(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            return rect1.getBoundsInParent().intersects(rect2.getBoundsInParent());
        }

    }, rect1.boundsInParentProperty(), rect2.boundsInParentProperty());

    colliding.addListener(new ChangeListener<Boolean>() {
        @Override
        public void changed(ObservableValue<? extends Boolean> obs,
                Boolean oldValue, Boolean newValue) {
            if (newValue) {
                System.out.println("Colliding");
            } else {
                System.out.println("Not colliding");
            }
        }
    });]]></Answer>
<Answer><![CDATA[import javafx.animation.Animation;
import javafx.animation.ParallelTransition;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.beans.Observable;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;
import javafx.util.Duration;

/**
 *
 * @author Dub-Laptop
 */
public class CollisionTesting extends Application {

    private TranslateTransition cAnim;

    @Override
    public void start(Stage primaryStage) {        

        Group root = new Group();

        Scene scene = new Scene(root);

        primaryStage.setTitle("Collision Testing");
        primaryStage.setScene(scene);
        primaryStage.show();

        Rectangle r = new Rectangle(100,50, Color.AQUA);
        r.setLayoutX(10);
        r.setLayoutY(200);

        CollidableCircle c = new CollidableCircle(50, Color.GREEN);
        c.setLayoutX(800);
        c.setLayoutY(200);

        /* can change this to anything you like 
           I used translateXProperty for simplicity
        */                                  
        c.translateXProperty().addListener((Observable observable) -> {
            c.checkCollision(c, r);
        });

        root.getChildren().addAll(r, c);

        TranslateTransition rAnim = new TranslateTransition();

        rAnim.setToX(600);
        rAnim.setAutoReverse(true);
        rAnim.setCycleCount(Animation.INDEFINITE);
        rAnim.setDuration(Duration.seconds(5));
        rAnim.setNode(r);

        cAnim = new TranslateTransition();

        cAnim.setToX(-590);
        cAnim.setAutoReverse(true);
        cAnim.setCycleCount(Animation.INDEFINITE);
        cAnim.setDuration(Duration.seconds(5));
        cAnim.setNode(c);

        rAnim.play();
        cAnim.play();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    private class CollidableCircle extends Circle implements Collidable{

        public CollidableCircle(double radius, Paint fill) {
            super(radius, fill);
            new AnimationTimer(){
                @Override
                public void handle(long now) {
                    root.getChildren().filtered((Node n)->{
                        return !n.equals(CollidableCircle.this) && n instanceof Shape;
                    }).forEach(other ->{
                        checkCollision(CollidableCircle.this, (Shape)other);
                    });
                }
            }.start();
            // I added this for local property changes to this node
            collisionStateProperty().addListener((ObservableValue<? extends CollisionState> observable, CollisionState oldValue, CollisionState newValue) -> {
                if(newValue.equals(CollisionState.TOUCHING)){  
                    setScaleX(1.25);
                    setScaleY(1.25);
                    setFill(Color.GREENYELLOW);
                    cAnim.pause();
                }else if(newValue.equals(CollisionState.WAITING)){      
                    setScaleX(1.0);
                    setScaleY(1.0);
                    setFill(Color.GREEN);
                    cAnim.play();
                }
            });
        }

        @Override
        public void handleCollision(Shape other) {            
           // handle updates that affect other node here
           System.out.println("Collided with : " + other.getClass().getSimpleName());
        }

    }    

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20776877" questionTitle="Increase Combobox text size">
<Answer><![CDATA[comboBox.setValue("Item 1");

        comboBox.setCellFactory(
                new Callback<ListView<String>, ListCell<String>>() {
                    @Override
                    public ListCell<String> call(ListView<String> param) {
                        final ListCell<String> cell = new ListCell<String>() {
                            @Override
                            public void updateItem(String item,
                                    boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null) {
                                    setText(item);
                                    setFont(this.getFont().font(this.getFont().getName(), 30.0)); //set your desired size
                                } else {
                                    setText(null);
                                }
                            }
                        };
                        return cell;
                    }

                });

        final Label label = new Label();]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;

/**
 *
 * @author reegan
 */
public class JavaFXComboBoxStack extends Application {

    @Override
    public void start(Stage primaryStage) {

        final ComboBox comboBox = new ComboBox();
        comboBox.getItems().addAll(
                "Item 1",
                "Item 2",
                "Item 3",
                "Item 4");
        comboBox.setValue( "Item 1");

       comboBox.setMaxWidth(10);


       comboBox.setMaxSize(25, 25);

        comboBox.setCellFactory(
                new Callback<ListView<String>, ListCell<String>>() {
            @Override
            public ListCell<String> call(ListView<String> param) {
                final ListCell<String> cell = new ListCell<String>() {
                    {
                        super.setPrefWidth(10); // Set Drop Down Width 
                    }

                    @Override
                    public void updateItem(String item,
                            boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null) {
                            setText(item);

                        } else {
                            setText(null);
                        }
                    }
                };
                return cell;
            }
        });
        final Label label = new Label();

        Button btn = new Button();
        btn.setText("Read comboBox");
        btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                label.setText("selectd: " + comboBox.getValue());
            }
        });

        VBox vBox = new VBox();
        vBox.setPadding(new Insets(5, 5, 5, 5));
        vBox.setSpacing(5);
        vBox.getChildren().addAll(label, comboBox, btn);

        StackPane root = new StackPane();
        root.getChildren().add(vBox);

        Scene scene = new Scene(root, 300, 250);
        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20743668" questionTitle="Word wrapping inside a TitledPane that is inside VBox">
<Answer><![CDATA[package nimrandsLibrary.fantasyCraft.characterBuilder

import javafx.scene.control._
import javafx.scene.layout._
import javafx.scene._

class TiltedTextExample extends javafx.application.Application {
  private def createTitledPane(title: String) = {
    val titledPane = new HorizontalContentBiasTitledPane()
    titledPane.setText(title)
    val label = new Label("Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.")
    label.setWrapText(true)
    titledPane.setContent(label)
    titledPane.setExpanded(false)
    titledPane
  }

  def start(stage: javafx.stage.Stage) {
    val vBox = new VBox()
    vBox.getChildren().add(createTitledPane("Expand Me #1"))
    vBox.getChildren().add(createTitledPane("Expand Me #2"))
    vBox.getChildren().add(createTitledPane("Expand Me #3"))
    stage.setScene(new Scene(vBox, 300, 300))
    stage.show()
  }
}

object TiltedTextExample extends App {
  javafx.application.Application.launch(classOf[TiltedTextExample])
}

class HorizontalContentBiasTitledPane extends javafx.scene.control.TitledPane {
  override def getContentBias() = javafx.geometry.Orientation.HORIZONTAL

  override def computeMinWidth(height: Double) = 0

  this.setSkin(new com.sun.javafx.scene.control.skin.TitledPaneSkin(this) {
    private val getTransitionMethod = classOf[com.sun.javafx.scene.control.skin.TitledPaneSkin].getDeclaredMethod("getTransition")
    getTransitionMethod.setAccessible(true)

    override protected def computePrefHeight(width: Double) = {
      val contentContainer = getChildren().get(0)
      val titleRegion = getChildren().get(1)
      val headerHeight = Math.max(com.sun.javafx.scene.control.skin.TitledPaneSkin.MIN_HEADER_HEIGHT, snapSize(titleRegion.prefHeight(-1)));
      var contentHeight = 0.0;
      if (getSkinnable().getParent() != null && getSkinnable().getParent().isInstanceOf[com.sun.javafx.scene.control.skin.AccordionSkin]) {
        contentHeight = contentContainer.prefHeight(width);
      } else {
        contentHeight = contentContainer.prefHeight(width) * getTransitionMethod.invoke(this).asInstanceOf[java.lang.Double].toDouble
      }
      headerHeight + snapSize(contentHeight) + snapSpace(getInsets().getTop()) + snapSpace(getInsets().getBottom());
    }
  })
}]]></Answer>
<Answer><![CDATA[@Override
  public void start(Stage primaryStage) {
    StackPane root = new StackPane();

    primaryStage.setScene(new Scene(root, 300, 250));

    primaryStage.setTitle("Hello World!");

    VBox vBox = new VBox();
    TitledPane tPane = new TitledPane();
    tPane.setText("expand me");
    tPane.setPrefWidth(root.getWidth());

    Text text = new Text();
    text.setText("Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.  Some really long text here.");
    text.setWrappingWidth(tPane.getPrefWidth());

    tPane.setContent(text);

    vBox.getChildren().add(tPane);

    root.getChildren().add(vBox);

    primaryStage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20676176" questionTitle="Is this possible that i can add context menu at TreeItem rather then TreeView in JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class TVexample extends Application {
public abstract class AbstractTreeItem extends TreeItem{
    public abstract ContextMenu getMenu();
}

public class ProviderTreeItem extends AbstractTreeItem{
    // make class vars here like psswd
    public ProviderTreeItem(String name) {
        this.setValue(name);
    }

    @Override
    public ContextMenu getMenu(){
        MenuItem addInbox = new MenuItem("add inbox");
        addInbox.setOnAction(new EventHandler() {
            public void handle(Event t) {
                BoxTreeItem newBox = new BoxTreeItem("inbox");
                    getChildren().add(newBox);
            }
        });
        return new ContextMenu(addInbox);
    }
}

public class BoxTreeItem extends AbstractTreeItem{
    //private List<String> emails = new LinkedList<>();
    public BoxTreeItem(String name) {
        this.setValue(name);
    }

    @Override
    public ContextMenu getMenu() {
        return new ContextMenu(new MenuItem("test"));
    }
}

private final class TreeCellImpl extends TreeCell<String> {

    @Override
    public void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);

        if (empty) {
            setText(null);
            setGraphic(null);
        } else {
            setText(getItem() == null ? "" : getItem().toString());
            setGraphic(getTreeItem().getGraphic());
            setContextMenu(((AbstractTreeItem) getTreeItem()).getMenu());
        }
    }
}

@Override
public void start(Stage primaryStage) {
    StackPane sceneRoot = new StackPane();
    TreeItem treeRoot = new TreeItem();
    treeRoot.setExpanded(true);
    ProviderTreeItem gm = new ProviderTreeItem("gmail");
    ProviderTreeItem yh = new ProviderTreeItem("yahoo");
    treeRoot.getChildren().addAll(gm,yh);
    TreeView<String> treeView = new TreeView<String>(treeRoot);
    treeView.setShowRoot(false);
    treeView.setCellFactory(new Callback<TreeView<String>,TreeCell<String>>(){
        @Override
        public TreeCell<String> call(TreeView<String> p) {
            return new TreeCellImpl();
        }
    });
    sceneRoot.getChildren().add(treeView);
    Scene scene = new Scene(sceneRoot, 300, 500);


    primaryStage.setScene(scene);
    primaryStage.show();
}]]></Answer>
<Answer><![CDATA[public static <T> void setCellFactory(TreeView<T> treeView,
                                      ToStringConverter<T> converter,
                                      ContextMenu contextMenu) {

treeView.setCellFactory(tc -> {

  TreeCell<T> cell = new TreeCell<T>() {

    @Override
    protected void updateItem(T item, boolean empty) {
      super.updateItem(item, empty);
      if (empty) {
        setText(null);
      } else {
        setText(converter.toString(item));
      }
    }

  };

  cell.emptyProperty()
      .addListener((obs, wasEmpty, isNowEmpty) -> {
        if (isNowEmpty) {
          cell.setContextMenu(null);
        } else {
          cell.setContextMenu(contextMenu);
        }
      });

  return cell;

  });

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20604974" questionTitle="setButtonCell for ComboBox">
<Answer><![CDATA[public class JavaFXApplication5 extends Application
{
    public static void main( String[] args )
    {
        launch( args );
    }


    public class ProgressData
    {
        private final DoubleProperty  progressProp = new SimpleDoubleProperty();
        private final StringProperty  progressName = new SimpleStringProperty();

        public ProgressData( String name, double progress )
        {
            progressProp.set( progress );
            progressName.set( name );
        }

        public DoubleProperty progressProperty()
        {
            return  progressProp;
        }

        public StringProperty nameProperty()
        {
            return  progressName;
        }

        @Override
        //  Lazy hack for the combo button.
        public String toString()
        {
            return progressName.get();
        }
    }


    @Override
    public void start( Stage primaryStage )
    {
        ProgressData vb1 = new ProgressData( "Progressbar 1", -1 );
        ProgressData vb2 = new ProgressData( "Progressbar 2", 0.2 );
        ProgressData vb3 = new ProgressData( "Progressbar 3", 0.3 );

        TextChooser textChooser = new TextChooser( vb1, vb2, vb3 );

        textChooser.setStyle( "-fx-font: 10px \"Verdana\";" );

        StackPane root = new StackPane();
        root.getChildren().add( textChooser );

        Scene scene = new Scene( root, 300, 250 );

        primaryStage.setTitle( "Hello World!" );
        primaryStage.setScene( scene );
        primaryStage.show();
    }

    public static class TextChooser extends StackPane
    {
        private final Label label = new Label();

        private final ComboBox<ProgressData> combo = new ComboBox<>();

        public TextChooser(ProgressData... options)
        {
            StackPane.setAlignment( label, Pos.CENTER_LEFT );
            StackPane.setAlignment( combo, Pos.CENTER_LEFT );


            final ProgressBar  labelBar = new ProgressBar();
            label.visibleProperty().bind( combo.visibleProperty().not() );
            label.setContentDisplay( ContentDisplay.RIGHT );
            label.setGraphic( labelBar );


            combo.getItems().setAll( options );

            //  This will change the label's text and the progress bar value.
            combo.getSelectionModel().selectedItemProperty().addListener( new ChangeListener<ProgressData>()
            {
                @Override
                public void changed( ObservableValue<? extends ProgressData> observable, ProgressData oldValue, ProgressData newValue )
                {
                    if ( labelBar.progressProperty().isBound() )
                    {
                        labelBar.progressProperty().unbind();
                    }

                    labelBar.progressProperty().bind( newValue.progressProperty() );
                    label.setText( newValue.nameProperty().get() );
                }
            } );

            combo.setCellFactory( new Callback<ListView<ProgressData>, ListCell<ProgressData>>()
            {
                @Override
                public ListCell<ProgressData> call( ListView<ProgressData> p )
                {
                    return new ListCell<ProgressData>()
                    {
                        private final ProgressBar  cellBar = new ProgressBar();
                        {
                            cellBar.setMouseTransparent( true );
                            setContentDisplay( ContentDisplay.RIGHT );
                            setGraphic( cellBar );
                        }

                        @Override
                        protected void updateItem( ProgressData item, boolean empty )
                        {
                            super.updateItem( item, empty );

                            if ( item != null && ! empty )
                            {
                                if ( cellBar.progressProperty().isBound() )
                                {
                                    cellBar.progressProperty().unbind();
                                }
                                cellBar.progressProperty().bind( item.progressProperty() );
                                setText( item.nameProperty().get() );
                            }
                        }
                    };
                }
            } );

            combo.getSelectionModel().select( 0 );
            combo.setVisible( true );

            label.setOnMouseEntered( new EventHandler<MouseEvent>()
            {
                @Override
                public void handle( MouseEvent event )
                {
                    combo.setVisible( true );
                }
            } );

            combo.showingProperty().addListener( new InvalidationListener()
            {
                @Override
                public void invalidated( Observable observable )
                {
                    if ( !combo.isShowing() )
                    {
                        combo.setVisible( false );
                    }
                }
            } );

            combo.setOnMouseExited( new EventHandler<MouseEvent>()
            {
                @Override
                public void handle( MouseEvent event )
                {
                    if ( !combo.isShowing() )
                    {
                        combo.setVisible( false );
                    }
                }
            } );

            getChildren().setAll( label, combo );
        }

    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressBar;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class JavaFXApplication4 extends Application
{

@Override
public void start(Stage primaryStage)
{
    double y1 = 15;
    ProgressBar p1 = new ProgressBar();
    p1.setLayoutY(y1);
    HBox vb1 = new HBox(10);
    vb1.getChildren().addAll(new Label("Progressbar 1"), p1);

    double y2 = 15;
    ProgressBar p2 = new ProgressBar();
    p2.setLayoutY(y2);
    HBox vb2 = new HBox(10);
    vb2.getChildren().addAll(new Label("Progressbar 2"), p2);

    double y3 = 15;
    ProgressBar p3 = new ProgressBar();
    p3.setLayoutY(y3);
    HBox vb3 = new HBox(10);
    vb3.getChildren().addAll(new Label("Progressbar 3"), p3);

    TextChooser textChooser = new TextChooser(
        vb1, vb2, vb3
    );

    textChooser.setStyle("-fx-font: 10px \"Verdana\";");

    StackPane root = new StackPane();
    root.getChildren().add(textChooser);

    Scene scene = new Scene(root, 300, 250);

    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
}

public static void main(String[] args) {
   launch(args);
}
}

class TextChooser extends StackPane
{
private Label label = new Label();

private ComboBox<HBox> combo = new ComboBox<>();

public TextChooser(HBox... options)
{
    StackPane.setAlignment(label, Pos.CENTER_LEFT);
    StackPane.setAlignment(combo, Pos.CENTER_LEFT);

    label.graphicProperty().bind(
        //combo.getSelectionModel().selectedItemProperty()
        combo.getSelectionModel().selectedItemProperty()
    );
    label.visibleProperty().bind(
        combo.visibleProperty().not()
    );
    //label.setPadding(new Insets(0, 0, 0, 10));

    combo.getItems().setAll(options);

    combo.setCellFactory(new Callback<ListView<HBox>, ListCell<HBox>>()
    {
        @Override
        public ListCell<HBox> call(ListView<HBox> p)
        {
            return new ListCell<HBox>()
            {
                @Override
                protected void updateItem(HBox item, boolean empty)
                {
                    super.updateItem(item, empty);

                    if (item == null || empty)
                    {
                        setGraphic(null);
                    }
                    else
                    {
                        setGraphic(item);
                    }
                }
            };
        }
    });

    combo.getSelectionModel().select(0);
    combo.setVisible(true);

    label.setOnMouseEntered(new EventHandler<MouseEvent>() {

        @Override
        public void handle(MouseEvent arg0) {
            combo.setVisible(true);

        }

    });
    combo.showingProperty().addListener(new ChangeListener<Boolean>() {

        @Override
        public void changed(ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean newVal) {
            if (!combo.isShowing())
            {
                combo.setVisible(false);
            }                   
        }
    });


    combo.setOnMouseExited(new EventHandler<MouseEvent>() 
    {
        @Override
        public void handle(MouseEvent arg0) {
             if (!combo.isShowing())
                {
                    combo.setVisible(false);
                }
        }
    });

    getChildren().setAll(label, combo);
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20571514" questionTitle="How to use CDI and Dependency Injection">
<Answer><![CDATA[@SessionScoped
public class Pata implements Serializable {
    @Inject
    @SessionUser // inject here using the producer method
    private  User user;

    public String getFuzzyName() {
        return user.getName();
    }
}
@SessionScoped
public class Farma implements Serializable {
    @Produces
    @SessionUser    // qualifier to tie injection points to this method
    @SessionScoped  // to ensure it will be called once per session for any number of injection points
    public User produceUser() {
        System.out.println("Creating user");
        User u = new User();
        u.setName("User");
        return u;
    }
}
////// that's your custom qualifier, it's in a separate file
@Qualifier
@Retention(RetentionPolicy.RUNTIME)
@Target({METHOD, FIELD, PARAMETER, TYPE})
public @interface SessionUser {}

// no scopes here, it is defined by the producer method
public class User implements Serializable {
    private String name;
    public void setName(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
}]]></Answer>
<Answer><![CDATA[@Named
@SessionScoped
public class Pata implements Serializable {
    @Inject
    private User user;

    public String getFuzzyName() {
        System.out.println(user.getName());
        return user.getName();
    }

    public User getUser() {
        return user;
    }

    public void setUser(final User user) {
        this.user = user;
    }
}

@Named
@SessionScoped
public class Farma implements Serializable {
    @Inject
    private User user;

    @PostConstruct
    public void initialize() {
        user.setName("MyName");
    }

    // Getters and Setters

    public User getUser() {
        return user;
    }

    public void setUser(final User user) {
        this.user = user;
    }
}


@Named
@SessionScoped
public class User implements Serializable {
    private String name = "Default";

    public String getName() {
        return name;
    }

    public void setName(final String name) {
        this.name = name;
    }
}


<h:outputText value="#{farma}"></h:outputText><br />
<h:outputText value="#{pata}"></h:outputText><br />
<h:outputText value="#{pata.fuzzyName}"></h:outputText>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20517779" questionTitle="Ant task for deploying Java EE app to TomEE as WAR, instead of as EAR">
<Answer><![CDATA[<!-- War -->
<target name="war" depends="compile,jar">
    <war destfile="${dist}/${warname}" webxml="${web}/WEB-INF/web.xml">
      <zipfileset dir="${web}">
        <include name="*.jsp"/>
        <include name="*.css"/>
        <include name="*.js"/>
      </zipfileset>
      <zipfileset dir="${dist}">
            <include name="${jarname}"/>
       </zipfileset>
      <classes dir="build">
        <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/servlet/*.class"/>
        <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/entity/*.class"/>
        <include name="messages/*.properties"/>  
        <include name="log4j.properties"/>
      </classes>
      <lib dir="lib">
        <include name="log4j-1.2.8.jar"/>
      </lib>
    </war>
</target>

<!-- Jar -->    
<target name="jar" depends="compile">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/${jarname}">
        <zipfileset dir="${build}/META-INF" prefix="META-INF">
            <include name="persistence.xml"/>
        </zipfileset>           
        <zipfileset dir="${build}">
            <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/session/*.class"/>
            <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/entity/*.class"/>
        </zipfileset>                   
    </jar>
</target>


<!-- Deploy  -->
<target name="deploy" depends="war">
    <copy todir="${tomee.dir}/webapps">
        <fileset dir="${dist}" includes="${warname}" />
    </copy>     
</target>]]></Answer>
<Answer><![CDATA[<!-- War -->
<target name="war" depends="compile">
    <war destfile="${dist}/${warname}" webxml="${web}/WEB-INF/web.xml">
      <zipfileset dir="${web}">
        <include name="*.jsp"/>
        <include name="*.css"/>
        <include name="*.js"/>
      </zipfileset>
      <zipfileset dir="${build}/META-INF" prefix="META-INF">
        <include name="persistence.xml"/>
      </zipfileset>
      <classes dir="build">
        <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/servlet/*.class"/>
        <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/entity/*.class"/>
        <include name="rs/ac/uns/ftn/informatika/mbs2/vezbe09/primer01/server/session/*.class"/>
        <include name="messages/*.properties"/>  
        <include name="log4j.properties"/>
      </classes>
      <lib dir="lib">
        <include name="log4j-1.2.8.jar"/>
      </lib>
    </war>
</target>

<!-- Deploy  -->
<target name="deploy" depends="war">
    <copy todir="${tomee.dir}/webapps">
        <fileset dir="${dist}" includes="${warname}" />
    </copy>     
</target>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20429986" questionTitle="Catching multiple exceptions and do same operations">
<Answer><![CDATA[try {
    ...
} catch(Exception e) {
    if(e instanceof RollbackException ||
       e instanceof HeuristicMixedException ||
       e instanceof HeuristicRollbackException) {
        if(log.isErrorEnabled()) {
            log.error(e);
        }

        try {
            trans.rollback();
        } catch(Exception e1) {
            if(e1 instanceof RollbackException ||
               e1 instanceof HeuristicMixedException ||
               e1 instanceof HeuristicRollbackException ||
               e1 instanceof SystemException) {
                e1.printStacktrace();
            } else {
                throw e1;
            }
        }

    } else {
        throw e;
    }
}]]></Answer>
<Answer><![CDATA[try{
    try{
        trans.commit();
    } catch (HeuristicMixedException e) {
        if(log.isErrorEnabled()){
            log.error(e);
        }
        trans.rollback(); //catch SystemException at another level
        //Note: We are now leaving this catch block as if
        //  the program state is okay again.
    } catch (RollbackException|HeuristicRollbackException e){
        if(log.isErrorEnabled()){
            log.error(e);
        }
        //don't need to rollback

        //Note: We are now leaving this catch block as if
        //  the program state is okay again.
    }
    //let SystemException propagate
}catch(SystemException e){
    //!do something
    //fix it or rethrow
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20412962" questionTitle="Show drop down menu on mouse over">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class Hoverboard extends Application {

    public class TextChooser extends StackPane {
        private Label label = new Label();
        private ComboBox<String> combo = new ComboBox<>();

        public TextChooser(String... options) {
            StackPane.setAlignment(label, Pos.CENTER_LEFT);
            StackPane.setAlignment(combo, Pos.CENTER_LEFT);

            label.textProperty().bind(
                combo.getSelectionModel().selectedItemProperty()
            );
            label.visibleProperty().bind(
                combo.visibleProperty().not()
            );
            label.setPadding(new Insets(0, 0, 0, 9));

            combo.getItems().setAll(options);
            combo.getSelectionModel().select(0);
            combo.setVisible(false);

            label.setOnMouseEntered(event -> combo.setVisible(true));
            combo.showingProperty().addListener(observable -> {
                if (!combo.isShowing()) {
                    combo.setVisible(false);
                }
            });
            combo.setOnMouseExited(event -> {
                if (!combo.isShowing()) {
                    combo.setVisible(false);
                }
            });

            getChildren().setAll(label, combo);
        }
    }

    @Override
    public void start(Stage stage) throws Exception {
        TextChooser textChooser = new TextChooser(
            "xyzzy", "frobozz", "foobar"
        );

        VBox layout = new VBox(textChooser);
        layout.setPadding(new Insets(10));

        stage.setScene(new Scene(layout));
        stage.show();
    }

    public static void main(String[] args) {
        launch(Hoverboard.class);
    }

}]]></Answer>
<Answer><![CDATA[public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{
        HBox root = new HBox();
        primaryStage.setTitle("Combo Box Style From Css");


        ComboBox combobox = new ComboBox<String>(FXCollections.observableArrayList("One", "Two", "Three"));
        combobox.getSelectionModel().select(0);
        combobox.setId("changed");

        ComboBox normalCombobox = new ComboBox<String>(FXCollections.observableArrayList("One", "Two", "Three"));
        normalCombobox.getSelectionModel().select(0);

        root.getChildren().addAll(combobox, normalCombobox);
        Scene scene = new Scene(root, 300, 275);
        scene.setFill(Color.WHITE);
        String css = Main.class.getResource("styles.css").toExternalForm();
        scene.getStylesheets().clear();
        scene.getStylesheets().add(css);

        primaryStage.setScene(scene);
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20369447" questionTitle="Datepicker in JavaFX 8">
<Answer><![CDATA[package test;

import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.layout.HBox;

import com.sun.javafx.scene.control.skin.DatePickerContent;
import com.sun.javafx.scene.control.skin.DatePickerSkin;

public class DateTimePickerSkin extends DatePickerSkin {

    private DateTimePicker datePicker;
    private DatePickerContent ret;

    public DateTimePickerSkin(DateTimePicker datePicker){
        super(datePicker);
        this.datePicker = datePicker;
    }

    @Override 
    public Node getPopupContent() {
        if (ret == null){
            ret = (DatePickerContent) super.getPopupContent();

            Slider hours = new Slider(0, 23, (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getMinute() : 0));      
            Label hoursValue = new Label("Hours: " + (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getHour() : "") + " ");

            Slider minutes = new Slider(0, 59, (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getMinute() : 0));
            Label minutesValue =  new Label("Minutes: " + (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getMinute() : "") + " ");

            Slider seconds = new Slider(0, 59, (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getSecond() : 0));        
            Label secondsValue = new Label("Seconds: " + (datePicker.getTimeValue() != null ? datePicker.getTimeValue().getSecond() : "") + " ");

            ret.getChildren().addAll(new HBox(hoursValue, hours), new HBox(minutesValue, minutes), new HBox(secondsValue, seconds));

            hours.valueProperty().addListener((observable, oldValue, newValue) -> {
                datePicker.setTimeValue(datePicker.getTimeValue().withHour(newValue.intValue()));
                hoursValue.setText("Hours: " + String.format("%02d", datePicker.getTimeValue().getHour()) + " ");
            });

            minutes.valueProperty().addListener((observable, oldValue, newValue) -> {
                datePicker.setTimeValue(datePicker.getTimeValue().withMinute(newValue.intValue()));
                minutesValue.setText("Minutes: " + String.format("%02d", datePicker.getTimeValue().getMinute()) + " ");
            });

            seconds.valueProperty().addListener((observable, oldValue, newValue) -> {
                datePicker.setTimeValue(datePicker.getTimeValue().withSecond(newValue.intValue()));
                secondsValue.setText("Seconds: " + String.format("%02d", datePicker.getTimeValue().getSecond()) + " ");
            });

        }
        return ret;
    }


}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.stage.Stage;

import java.time.LocalDate;

public class PickerDemo extends Application {
    @Override public void start(Stage stage) {
        final DatePicker datePicker = new DatePicker(LocalDate.now());
        datePicker.setOnAction(event -> {
            LocalDate date = datePicker.getValue();
            System.out.println("Selected date: " + date);
        });

        stage.setScene(
            new Scene(datePicker)
        );
        stage.show();
    }
    public static void main(String[] args) { launch(args); }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20364236" questionTitle="Java 8: Class to AnnotatedType">
<Answer><![CDATA[public static void main(String[] args) {
    Class<?> fooClass = Foo.class;
    AnnotatedType type = fooClass.getAnnotatedSuperclass();
    System.out.println(type);
    System.out.println(Bar.class == type.getType());
    System.out.println(Arrays.toString(type.getAnnotations()));
    System.out.println(Arrays.toString(type.getDeclaredAnnotations()));
}

public static class Bar {
}

public static class Foo extends @Custom Bar {
}

// So that annotation metadata is available at run time
@Retention(RetentionPolicy.RUNTIME)
// TYPE_USE being the important one
@Target(value = {ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE,
        METHOD, PACKAGE, PARAMETER, TYPE, TYPE_PARAMETER, TYPE_USE}) 
public @interface Custom {
}]]></Answer>
<Answer><![CDATA[import java.lang.annotation.*;

public class AnnotationTest {

    @Target(ElementType.TYPE_USE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface First { }

    @Target(ElementType.TYPE_USE)
    @Retention(RetentionPolicy.RUNTIME)
    @interface Second { }

    class A { }

    class B extends @First @Second A { }

    public static void main(String[] args) {
        Annotation[] anns = B.class.getAnnotatedSuperclass().getAnnotations();
        System.out.printf("There are %d annotations on B's use of its superclass.%n", anns.length);
        for (Annotation a : anns)
            System.out.println(a.annotationType().getName());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20224683" questionTitle="Unit Testing for Java 8 Lambdas">
<Answer><![CDATA[public static void processFile(String fileName, Function<String, BufferedReader> readerSupplier) {
    // do some magic..
    Function<String, List<String>> reader = (name) -> {
        List<String> items = new ArrayList<>();
        try(BufferedReader br = readerSupplier.apply(name)){
            String output;
            while ((output = br.readLine()) != null) {
                items.add(output);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return items;
    };

    List<String> lines = reader.apply(fileName);
    // do some more magic..
}

public static void main(String[] args) {
    // mocked call
    processFile("file.csv", name -> new BufferedReader(new StringReader("line1\nline2\n")));

    //original call
    processFile("1.csv", name -> {
        try {
            return new BufferedReader(new FileReader(name));
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    });
}]]></Answer>
<Answer><![CDATA[void processAnActualFile() {
    List<Item> items = processFile(
        "file.csv",
        fname -> new BufferedReader(new FileReader(fname)),
                // ERROR: uncaught IOException
        br -> {
            List<String> result = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                result.add(line);
            }
            return result;
        },      // ERROR: uncaught IOException
        stringList -> {
            List<Item> result = new ArrayList<>();
            for (String line : stringList) {
                result.add(new Item(line));
            }
            return result;
        });
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20094620" questionTitle="Set Icon on Stage in JavaFX">
<Answer><![CDATA[public class Main extends Application
{
    private static final Logger LOGGER = Logger.getLogger(Main.class);

    @Override
    public void start(Stage primaryStage)
        {
            try
                {
                    // BorderPane root = new BorderPane();
                    BorderPane root = (BorderPane) FXMLLoader
                            .load(getClass().getResource("/org/geeksynergy/view/layout/FrontPageBorder.fxml"));
                    root.setAccessibleText("good");

                    Scene scene = new Scene(root, 400, 400);
                    scene.getStylesheets().add(getClass()
                            .getResource("/org/geeksynergy/view/cssstyle/application.css").toExternalForm());
                    primaryStage.setScene(scene);
                    primaryStage.setTitle("AiRJuke");
                    primaryStage.getIcons().add(new Image("/org/geeksymergy/resource/images/download.png"));
                    primaryStage.show();
                    AnchorPane personOverview = (AnchorPane) FXMLLoader
                            .load(getClass().getResource("/org/geeksynergy/view/layout/Ui.fxml"));

                    root.setCenter(personOverview);

                    // added this line to save the playlist , when we close
                    // application window
                    Platform.setImplicitExit(false);

                    primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>()
                        {
                            public void handle(WindowEvent event)
                                {
                                    M3UPlayList.defaultSavePlaylist();
                                    Platform.setImplicitExit(true);
                                    primaryStage.hide();
                                }
                        });

                } catch (Exception e)
                {

                    LOGGER.error("Exception while loding application", e);
                }
        }

    public static void main(String[] args)
        {
            launch(args);
        }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
               import javafx.event.ActionEvent;
               import javafx.event.EventHandler;
               import javafx.scene.Scene;
               import javafx.scene.control.Button;
               import javafx.scene.image.Image;
               import javafx.scene.layout.StackPane;
               import javafx.stage.Stage;

              /**
                *
                * @author Manikant gautam
                * This is a beginner's sample application
                * using JAVAFX
                * 
              */
       public class Helloworld extends Application {

@Override
public void start(Stage primaryStage) {
    Button btn = new Button();
    btn.setText("Say 'Hello World'");
    btn.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
            System.out.println("Hello World!");
        }
    });

    StackPane root = new StackPane();
    root.getChildren().add(btn);

    Scene scene = new Scene(root, 300, 250);
    // Set Icon From Here.
    primaryStage.getIcons().add(
            new Image("/resource/graphics/app_logo.png"));
    primaryStage.setTitle("Hello World!");
    primaryStage.setScene(scene);
    primaryStage.show();
}


public static void main(String[] args) {
    launch(args);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20051564" questionTitle="Java GUI to display webpages and return HTML">
<Answer><![CDATA[public class TestFX extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        try {
            final WebView webView = new WebView();
            final WebEngine webEngine = webView.getEngine();

            Scene scene = new Scene(webView);

            stage.setScene(scene);
            stage.setWidth(1200);
            stage.setHeight(600);
            stage.show();

            webEngine.getLoadWorker().stateProperty().addListener(new ChangeListener<Worker.State>() {
                @Override
                public void changed(ObservableValue<? extends State> ov, State t, State t1) {
                    if (t1 == Worker.State.SUCCEEDED) {
                        try {
                            printDocument(webEngine.getDocument(), System.out);
                        } catch (Exception e) { e.printStackTrace(); }
                    }
                }
            });

            webView.getEngine().load("http://www.google.com");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void printDocument(Document doc, OutputStream out) throws IOException, TransformerException {
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.transform(new DOMSource(doc), new StreamResult(new OutputStreamWriter(out, "UTF-8")));
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.scene.layout.*;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;

public class SimpleBrowser extends Pane {
    protected final WebView webView = new WebView();
    protected final WebEngine webEngine = webView.getEngine();

    protected boolean useFirebug;

    public WebView getWebView() {
        return webView;
    }

    public WebEngine getEngine() {
        return webView.getEngine();
    }

    public SimpleBrowser load(String location) {
        return load(location, null);
    }

    public SimpleBrowser load(String location, final Runnable onLoad) {
        webEngine.load(location);

        webEngine.getLoadWorker().stateProperty().addListener(new ChangeListener<Worker.State>() {
            @Override
            public void changed(ObservableValue<? extends Worker.State> ov, Worker.State t, Worker.State t1) {
                if (t1 == Worker.State.SUCCEEDED) {
                    if(useFirebug){
                        webEngine.executeScript("if (!document.getElementById('FirebugLite')){E = document['createElement' + 'NS'] && document.documentElement.namespaceURI;E = E ? document['createElement' + 'NS'](E, 'script') : document['createElement']('script');E['setAttribute']('id', 'FirebugLite');E['setAttribute']('src', 'https://getfirebug.com/' + 'firebug-lite.js' + '#startOpened');E['setAttribute']('FirebugLite', '4');(document['getElementsByTagName']('head')[0] || document['getElementsByTagName']('body')[0]).appendChild(E);E = new Image;E['setAttribute']('src', 'https://getfirebug.com/' + '#startOpened');}");
                    }
                    if(onLoad != null){
                        onLoad.run();
                    }
                }
            }
        });

        return this;
    }

    public String getHTML() {
        return (String)webEngine.executeScript("document.getElementsByTagName('html')[0].innerHTML");
    }

    public SimpleBrowser useFirebug(boolean useFirebug) {
        this.useFirebug = useFirebug;
        return this;
    }

    public SimpleBrowser() {
        this(false);
    }

    public SimpleBrowser(boolean useFirebug) {
        this.useFirebug = useFirebug;

        getChildren().add(webView);

        webView.prefWidthProperty().bind(widthProperty());
        webView.prefHeightProperty().bind(heightProperty());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20047713" questionTitle="Use of Functional Interface in Java 8">
<Answer><![CDATA[import java.util.Arrays;

class Sort {
    public int compareByLength(String s1, String s2) {
        return (s1.length() - s2.length());
    }
}

public class LambdaReferenceExample1 {
    public static void main(String[] javalatteLambda) {
        String[] str = {"one", "two", "3", "four", "five", "sixsix", 
            "sevennnnn", "eight"};
        Sort sort = new Sort();
        Arrays.sort(str, sort::compareByLength);

        for (String s : str) {
            System.out.println(s);
        }
    }
}]]></Answer>
<Answer><![CDATA[public class TestingLambda {

    public static void main(String[] args) {
        int value1 = method(TestingLambda::customMethod1);
        int value2 = method(TestingLambda::customMethod2);

        System.out.println("Value from customMethod1: " + value1);
        System.out.println("Value from customMethod2: " + value2);
    } 

    public static int customMethod1(int arg){
        return arg + 1;
    }

    public static int customMethod2(int arg){
        return arg + 2;
    }

    public static int method(MyCustomInterface ob){
        return ob.apply(1);
    }

    @FunctionalInterface
    interface MyCustomInterface{
        int apply(int arg);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20030168" questionTitle="Remove .jsp from page names">
<Answer><![CDATA[package com.filters;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;

@WebFilter("*")  // give your url mapping  eg..//you can write for "/yoururlspec/*"
public class CommonFilter implements Filter {

    @Override
    public void init(FilterConfig config) throws ServletException {
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws ServletException, IOException {
        HttpServletRequest request = (HttpServletRequest) req;
        String path="";
        if (request.getRequestURI().length() > request.getContextPath().length())
        {path=request.getRequestURI().substring(request.getContextPath().length()+1, request.getRequestURI().length());
        req.getRequestDispatcher(path+".jsp").forward(req, res);
        }
    }

    @Override
    public void destroy() {
    }
}]]></Answer>
<Answer><![CDATA[package filters;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashSet;

@WebFilter("*")
public class URLFilter implements Filter {
    HashSet<String> invalidExts = new HashSet<String>();

    @Override
    public void init(FilterConfig config) throws ServletException {
        invalidExts.add(".css");
        invalidExts.add(".js");
        invalidExts.add(".img");
        invalidExts.add(".png");
        invalidExts.add(".jpg");
        invalidExts.add(".jpeg");
        invalidExts.add(".gif");
        invalidExts.add(".woff");
        invalidExts.add(".woff2");
        invalidExts.add(".ttf");
        invalidExts.add(".eot");
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws ServletException, IOException {
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;

        String context = request.getContextPath();
        String uri = request.getRequestURI();
        String qStr = request.getQueryString();

        if (!uri.endsWith("/") && uri.length() > context.length() && isPage(uri)) {
            if (uri.endsWith(".jsp")) {
                String path = uri.substring(0, uri.lastIndexOf(".jsp"));
                if (qStr != null && qStr.length() > 0)
                    path += "?" + qStr;
                response.sendRedirect(path);
            } else {
                String path = uri.substring(context.length()).replace("-", "_");
                req.getRequestDispatcher(path + ".jsp").forward(req, res);
            }
        } else chain.doFilter(req, res);
    }

    @Override
    public void destroy() {
    }

    private boolean isPage(String uri) {
        boolean result = true;
        String ext = null;

        if (uri != null) {
            if (uri.contains("."))
                ext = uri.substring(uri.lastIndexOf("."));

            if (ext != null && invalidExts.contains(ext))
                result = false;
        }

        return result;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19940319" questionTitle="Can you split a stream into two streams?">
<Answer><![CDATA[public class MyProcess {
    /* Return a Predicate that performs a bail-out action on non-matching items. */
    private static <T> Predicate<T> withAltAction(Predicate<T> pred, Consumer<T> altAction) {
    return x -> {
        if (pred.test(x)) {
            return true;
        }
        altAction.accept(x);
        return false;
    };

    /* Example usage in non-trivial pipeline */
    public void processItems(Stream<Item> stream) {
        stream.filter(Objects::nonNull)
              .peek(this::logItem)
              .map(Item::getSubItems)
              .filter(withAltAction(SubItem::isValid,
                                    i -> logError(i, "Invalid")))
              .peek(this::logSubItem)
              .filter(withAltAction(i -> i.size() > 10,
                                    i -> logError(i, "Too large")))
              .map(SubItem::toDisplayItem)
              .forEach(this::display);
    }
}]]></Answer>
<Answer><![CDATA[class PredicateSplitterConsumer<T> implements Consumer<T>
{
  private Predicate<T> predicate;
  private Consumer<T>  positiveConsumer;
  private Consumer<T>  negativeConsumer;

  public PredicateSplitterConsumer(Predicate<T> predicate, Consumer<T> positive, Consumer<T> negative)
  {
    this.predicate = predicate;
    this.positiveConsumer = positive;
    this.negativeConsumer = negative;
  }

  @Override
  public void accept(T t)
  {
    if (predicate.test(t))
    {
      positiveConsumer.accept(t);
    }
    else
    {
      negativeConsumer.accept(t);
    }
  }
}]]></Answer>
<Answer><![CDATA[import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;

public class Test {

    public static <T, L, R> Pair<L, R> splitStream(Stream<T> inputStream, Predicate<T> predicate,
            Function<Stream<T>, L> trueStreamProcessor, Function<Stream<T>, R> falseStreamProcessor) {

        Map<Boolean, List<T>> partitioned = inputStream.collect(Collectors.partitioningBy(predicate));
        L trueResult = trueStreamProcessor.apply(partitioned.get(Boolean.TRUE).stream());
        R falseResult = falseStreamProcessor.apply(partitioned.get(Boolean.FALSE).stream());

        return new ImmutablePair<L, R>(trueResult, falseResult);
    }

    public static void main(String[] args) {

        Stream<Integer> stream = Stream.iterate(0, n -> n + 1).limit(10);

        Pair<List<Integer>, String> results = splitStream(stream,
                n -> n > 5,
                s -> s.filter(n -> n % 2 == 0).collect(Collectors.toList()),
                s -> s.map(n -> n.toString()).collect(Collectors.joining("|")));

        System.out.println(results);
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19896562" questionTitle="Flip a card animation">
<Answer><![CDATA[Rectangle front = new Rectangle(50, 50);

ScaleTransition stHideFront = new ScaleTransition(Duration.millis(1500), front);
stHideFront.setFromX(1);
stHideFront.setToX(0);

Rectangle back = new Rectangle(50, 50, Color.RED);
back.setScaleX(0);

ScaleTransition stShowBack = new ScaleTransition(Duration.millis(1500), back);
stShowBack.setFromX(0);
stShowBack.setToX(1);

stHideFront.setOnFinished(new EventHandler<ActionEvent>() {
    @Override
    public void handle(ActionEvent t) {
        stShowBack.play();
    }
});

StackPane root = new StackPane();
root.getChildren().addAll(front, back);
Scene scene = new Scene(root, 300, 250);
primaryStage.setScene(scene);

primaryStage.show();
stHideFront.play();]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

public class CardFlip extends Application {
    final Image CARD_IMAGE = new Image(
        "http://fc05.deviantart.net/fs70/i/2010/345/7/7/vitam_et_mortem_by_obviouschild-d34oni2.png"
        // sourced from: http://obviouschild.deviantart.com/art/Vitam-et-Mortem-189267194
    );
    final int W = (int) (CARD_IMAGE.getWidth()  / 2);
    final int H = (int) CARD_IMAGE.getHeight();

    @Override
    public void start(Stage stage) throws Exception {
        Node card = createCard();

        stage.setScene(createScene(card));
        stage.show();

        RotateTransition rotator = createRotator(card);
        rotator.play();
    }

    private Scene createScene(Node card) {
        StackPane root = new StackPane();
        root.getChildren().addAll(card, new AmbientLight(Color.WHITE));

        Scene scene = new Scene(root, W + 200, H + 200, true, SceneAntialiasing.BALANCED);
        scene.setFill(Color.MIDNIGHTBLUE.darker().darker().darker().darker());
        scene.setCamera(new PerspectiveCamera());

        return scene;
    }

    private RotateTransition createRotator(Node card) {
        RotateTransition rotator = new RotateTransition(Duration.millis(10000), card);
        rotator.setAxis(Rotate.Y_AXIS);
        rotator.setFromAngle(0);
        rotator.setToAngle(360);
        rotator.setInterpolator(Interpolator.LINEAR);
        rotator.setCycleCount(10);

        return rotator;
    }

    private Node createCard() {
        MeshView card = new MeshView(createCardMesh());

        PhongMaterial material = new PhongMaterial();
        material.setDiffuseMap(CARD_IMAGE);
        card.setMaterial(material);

        return card;
    }

    private TriangleMesh createCardMesh() {
        TriangleMesh mesh = new TriangleMesh();

        mesh.getPoints().addAll(-1 * W/2, -1 * H/2 , 0, 1 * W/2, -1 * H/2, 0, -1 * W/2, 1 * H/2, 0, 1 * W/2, 1 * H/2, 0);
        mesh.getFaces().addAll(0, 0, 2, 2, 3, 3, 3, 3, 1, 1, 0, 0);
        mesh.getFaces().addAll(0, 4, 3, 7, 2, 6, 3, 7, 0, 4, 1, 5);
        mesh.getTexCoords().addAll(0, 0, 0.5f, 0, 0, 1, 0.5f, 1, 0.5f, 0, 1, 0, 0.5f, 1, 1, 1);

        return mesh;
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19896352" questionTitle="Customize JPA field name mapping using EclipseLink">
<Answer><![CDATA[public class CamelCaseSessionCustomizer implements SessionCustomizer {

@Override
public void customize(Session session) throws SQLException {
    for (ClassDescriptor descriptor : session.getDescriptors().values()) {
        // Only change the table name for non-embedable entities with no
        // @Table already
        if (!descriptor.getTables().isEmpty() && descriptor.getAlias().equalsIgnoreCase(descriptor.getTableName())) {
            String tableName = addUnderscores(descriptor.getTableName());
            descriptor.setTableName(tableName);
            for (IndexDefinition index : descriptor.getTables().get(0).getIndexes()) {
                index.setTargetTable(tableName);
            }
        }
        for (DatabaseMapping mapping : descriptor.getMappings()) {
            // Only change the column name for non-embedable entities with
            // no @Column already

            if (mapping instanceof AggregateObjectMapping) {
                for (Association association : ((AggregateObjectMapping) mapping).getAggregateToSourceFieldAssociations()) {
                    DatabaseField field = (DatabaseField) association.getValue();
                    field.setName(addUnderscores(field.getName()));

                    for (DatabaseMapping attrMapping : session.getDescriptor(((AggregateObjectMapping) mapping).getReferenceClass()).getMappings()) {
                        if (attrMapping.getAttributeName().equalsIgnoreCase((String) association.getKey())) {
                            ((AggregateObjectMapping) mapping).addFieldTranslation(field, addUnderscores(attrMapping.getAttributeName()));
                            ((AggregateObjectMapping) mapping).getAggregateToSourceFields().remove(association.getKey());
                            break;
                        }
                    }
                }
            } else if (mapping instanceof ObjectReferenceMapping) {
                for (DatabaseField foreignKey : ((ObjectReferenceMapping) mapping).getForeignKeyFields()) {
                    foreignKey.setName(addUnderscores(foreignKey.getName()));
                }
            } else if (mapping instanceof DirectMapMapping) {
                for (DatabaseField referenceKey : ((DirectMapMapping) mapping).getReferenceKeyFields()) {
                    referenceKey.setName(addUnderscores(referenceKey.getName()));
                }
                for (DatabaseField sourceKey : ((DirectMapMapping) mapping).getSourceKeyFields()) {
                    sourceKey.setName(addUnderscores(sourceKey.getName()));
                }
            } else {
                DatabaseField field = mapping.getField();
                if (field != null && !mapping.getAttributeName().isEmpty() && field.getName().equalsIgnoreCase(mapping.getAttributeName())) {
                    field.setName(addUnderscores(mapping.getAttributeName()));
                }
            }
        }
    }
}

private static String addUnderscores(String name) {
    if (name.equalsIgnoreCase("begintime")) {
        System.err.println();
    }
    StringBuffer buf = new StringBuffer(name.replace('.', '_'));
    for (int i = 1; i < buf.length() - 1; i++) {
        if (Character.isLowerCase(buf.charAt(i - 1)) && Character.isUpperCase(buf.charAt(i)) && Character.isLowerCase(buf.charAt(i + 1))) {
            buf.insert(i++, '_');
        }
    }
    return buf.toString().toLowerCase();
}

}]]></Answer>
<Answer><![CDATA[import java.sql.SQLException;
import java.util.Locale;
import java.util.Vector;
import org.eclipse.persistence.config.SessionCustomizer;
import org.eclipse.persistence.descriptors.ClassDescriptor;
import org.eclipse.persistence.internal.helper.DatabaseField;
import org.eclipse.persistence.mappings.DatabaseMapping;
import org.eclipse.persistence.sessions.Session;
import org.eclipse.persistence.tools.schemaframework.IndexDefinition;

public class CamelNamingStrategy implements SessionCustomizer {
    public static String unqualify(final String qualifiedName) {
        int loc = qualifiedName.lastIndexOf(".");
        return loc < 0 ? qualifiedName : qualifiedName.substring(qualifiedName.lastIndexOf(".") + 1);
    }

    @Override
    public void customize(final Session session) throws SQLException {
        for (ClassDescriptor descriptor : session.getDescriptors().values()) {
            if (!descriptor.getTables().isEmpty()) {
                // Take table name from @Table if exists
                String tableName = null;
                if (descriptor.getAlias().equalsIgnoreCase(descriptor.getTableName())) {
                    tableName = unqualify(descriptor.getJavaClassName());
                } else {
                    tableName = descriptor.getTableName();
                }
                tableName = camelCaseToUnderscore(tableName);
                descriptor.setTableName(tableName);
                for (IndexDefinition index : descriptor.getTables().get(0).getIndexes()) {
                    index.setTargetTable(tableName);
                }
                Vector<DatabaseMapping> mappings = descriptor.getMappings();
                camelCaseToUnderscore(mappings);
            } else if (descriptor.isAggregateDescriptor() || descriptor.isChildDescriptor()) {
                camelCaseToUnderscore(descriptor.getMappings());
            }
        }
    }

    private void camelCaseToUnderscore(Vector<DatabaseMapping> mappings) {
        for (DatabaseMapping mapping : mappings) {
            DatabaseField field = mapping.getField();
            if (mapping.isDirectToFieldMapping() && !mapping.isPrimaryKeyMapping()) {
                String attributeName = mapping.getAttributeName();
                String underScoredFieldName = camelCaseToUnderscore(attributeName);
                field.setName(underScoredFieldName);
            }
        }
    }

    private String camelCaseToUnderscore(final String name) {
        StringBuffer buf = new StringBuffer(name.replace('.', '_'));
        for (int i = 1; i < buf.length() - 1; i++) {
            if (Character.isLowerCase(buf.charAt(i - 1)) && Character.isUpperCase(buf.charAt(i))
                    && Character.isLowerCase(buf.charAt(i + 1))) {
                buf.insert(i++, '_');
            }
        }
        return buf.toString().toLowerCase(Locale.ENGLISH);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19876971" questionTitle="Posting a multipart request with image in Android?">
<Answer><![CDATA[int bytesRead, bytesAvailable, bufferSize;
byte[] buffer;
int maxBufferSize = 1 * 1024 * 1024;
FileInputStream fileInputStream = new FileInputStream(file);

dos.writeBytes(twoHyphens + boundary + lineEnd); 
dos.writeBytes("Content-Disposition: form-data; name=\"attachment_0\";filename=\"" + file.getName() + "\"" + lineEnd);
dos.writeBytes("Content-Type: text/pdf" + lineEnd);
dos.writeBytes("Content-Length: " + file.length() + lineEnd);    
dos.writeBytes(lineEnd);        
bytesAvailable = fileInputStream.available(); 
bufferSize = Math.min(bytesAvailable, maxBufferSize);
buffer = new byte[bufferSize];
bytesRead = fileInputStream.read(buffer, 0, bufferSize);  

while (bytesRead > 0) 
{             
    dos.write(buffer, 0, bufferSize);
    bytesAvailable = fileInputStream.available();
    bufferSize = Math.min(bytesAvailable, maxBufferSize);
    bytesRead = fileInputStream.read(buffer, 0, bufferSize); 
}   

dos.writeBytes(lineEnd);
dos.writeBytes(twoHyphens + boundary + lineEnd);
fileInputStream.close();
}]]></Answer>
<Answer><![CDATA[public class WebConnector {
String boundary = "-------------" + System.currentTimeMillis();
private static final String LINE_FEED = "\r\n";
private static final String TWO_HYPHENS = "--";


private StringBuilder url;
private String protocol;
private HashMap<String, String> params;
private JSONObject postData;
private List<String> fileList;
private int count = 0;
private DataOutputStream dos;

public WebConnector(StringBuilder url, String protocol,
                    HashMap<String, String> params, JSONObject postData) {
    super();
    this.url = url;
    this.protocol = protocol;
    this.params = params;
    this.postData = postData;
    createServiceUrl();
}

public WebConnector(StringBuilder url, String protocol,
                    HashMap<String, String> params, JSONObject postData, List<String> fileList) {
    super();
    this.url = url;
    this.protocol = protocol;
    this.params = params;
    this.postData = postData;
    this.fileList = fileList;
    createServiceUrl();
}

public String connectToMULTIPART_POST_service(String postName) {


    System.out.println(">>>>>>>>>url : " + url);

    StringBuilder stringBuilder = new StringBuilder();

    String strResponse = "";
    InputStream inputStream = null;
    HttpURLConnection urlConnection = null;

    try {
        urlConnection = (HttpURLConnection) new URL(url.toString()).openConnection();
        urlConnection.setRequestProperty("Accept", "application/json");
        urlConnection.setRequestProperty("Connection", "close");
        urlConnection.setRequestProperty("User-Agent", "Mozilla/5.0 ( compatible ) ");
        urlConnection.setRequestProperty("Authorization", "Bearer " + Config.getConfigInstance().getAccessToken());
        urlConnection.setRequestProperty("Content-type", "multipart/form-data; boundary=" + boundary);

        urlConnection.setDoOutput(true);
        urlConnection.setDoInput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setChunkedStreamingMode(1024);
        urlConnection.setRequestMethod("POST");
        dos = new DataOutputStream(urlConnection.getOutputStream());

        Iterator<String> keys = postData.keys();
        while (keys.hasNext()) {
            try {
                String id = String.valueOf(keys.next());
                addFormField(id, "" + postData.get(id));
                System.out.println(id + " : " + postData.get(id));
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        try {
            dos.writeBytes(LINE_FEED);
            dos.flush();
            dos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (fileList != null && fileList.size() > 0 && !fileList.isEmpty()) {
            for (int i = 0; i < fileList.size(); i++) {

                File file = new File(fileList.get(i));
                if (file != null) ;
                addFilePart("photos[" + i + "][image]", file);
            }
        }
        // forming th java.net.URL object

        build();
        urlConnection.connect();
        int statusCode = 0;
        try {
            urlConnection.connect();
            statusCode = urlConnection.getResponseCode();
        } catch (EOFException e1) {
            if (count < 5) {
                urlConnection.disconnect();
                count++;
                String temp = connectToMULTIPART_POST_service(postName);
                if (temp != null && !temp.equals("")) {
                    return temp;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        // 200 represents HTTP OK
        if (statusCode == HttpURLConnection.HTTP_OK) {
            inputStream = new BufferedInputStream(urlConnection.getInputStream());
            strResponse = readStream(inputStream);
        } else {
            System.out.println(urlConnection.getResponseMessage());
            inputStream = new BufferedInputStream(urlConnection.getInputStream());
            strResponse = readStream(inputStream);
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (null != inputStream)
                inputStream.close();
        } catch (IOException e) {
        }
    }
    return strResponse;
}

public void addFormField(String fieldName, String value) {
    try {
        dos.writeBytes(TWO_HYPHENS + boundary + LINE_FEED);
        dos.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\"" + LINE_FEED + LINE_FEED/*+ value + LINE_FEED*/);
        /*dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + LINE_FEED);*/
        dos.writeBytes(value + LINE_FEED);
    } catch (IOException e) {
        e.printStackTrace();
    }

}

public void addFilePart(String fieldName, File uploadFile) {
    try {
        dos.writeBytes(TWO_HYPHENS + boundary + LINE_FEED);
        dos.writeBytes("Content-Disposition: form-data; name=\"" + fieldName + "\";filename=\"" + uploadFile.getName() + "\"" + LINE_FEED);
        dos.writeBytes(LINE_FEED);

        FileInputStream fStream = new FileInputStream(uploadFile);
        int bufferSize = 1024;
        byte[] buffer = new byte[bufferSize];
        int length = -1;

        while ((length = fStream.read(buffer)) != -1) {
            dos.write(buffer, 0, length);
        }
        dos.writeBytes(LINE_FEED);
        dos.writeBytes(TWO_HYPHENS + boundary + TWO_HYPHENS + LINE_FEED);
    /* close streams */
        fStream.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}

public void addHeaderField(String name, String value) {
    try {
        dos.writeBytes(name + ": " + value + LINE_FEED);
    } catch (IOException e) {
        e.printStackTrace();
    }

}

public void build() {
    try {
        dos.writeBytes(LINE_FEED);
        dos.flush();
        dos.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}

private static String readStream(InputStream in) {
    StringBuilder sb = new StringBuilder();
    try {
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String nextLine = "";
        while ((nextLine = reader.readLine()) != null) {
            sb.append(nextLine);
        }
    /* Close Stream */
        if (null != in) {
            in.close();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return sb.toString();
}

private void createServiceUrl() {
    if (null == params) {
        return;
    }
    final Iterator<Map.Entry<String, String>> it = params.entrySet().iterator();
    boolean isParam = false;
    while (it.hasNext()) {
        final Map.Entry<String, String> mapEnt = (Map.Entry<String, String>) it.next();
        url.append(mapEnt.getKey());
        url.append("=");
        try {
            url.append(URLEncoder.encode(mapEnt.getValue(), "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
        url.append(WSConstants.AMPERSAND);
        isParam = true;
    }
    if (isParam) {
        url.deleteCharAt(url.length() - 1);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19845213" questionTitle="How to get the MethodInfo of a Java 8 method reference?">
<Answer><![CDATA[public class MethodReferenceUtils {

    @FunctionalInterface
    public static interface MethodRefWith1Arg<T, A1> {
        void call(T t, A1 a1);
    }

    public static <T, A1> Method getReferencedMethod(Class<T> clazz, MethodRefWith1Arg<T, A1> methodRef) {
        return findReferencedMethod(clazz, t -> methodRef.call(t, null));
    }

    @SuppressWarnings("unchecked")
    private static <T> Method findReferencedMethod(Class<T> clazz, Consumer<T> invoker) {
        AtomicReference<Method> ref = new AtomicReference<>();
        Enhancer enhancer = new Enhancer();
        enhancer.setSuperclass(clazz);
        enhancer.setCallback(new MethodInterceptor() {
            @Override
            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
                ref.set(method);
                return null;
            }
        });
        try {
            invoker.accept((T) enhancer.create());
        } catch (ClassCastException e) {
            throw new IllegalArgumentException(String.format("Invalid method reference on class [%s]", clazz));
        }

        Method method = ref.get();
        if (method == null) {
            throw new IllegalArgumentException(String.format("Invalid method reference on class [%s]", clazz));
        }

        return method;
    }
}]]></Answer>
<Answer><![CDATA[import sun.reflect.ConstantPool;

import java.lang.reflect.Method;
import java.util.function.Consumer;

public class Main {
    private Consumer<String> consumer;

    Main() {
        consumer = this::test;
    }

    public void test(String val) {
        System.out.println("val = " + val);
    }

    public void run() throws Exception {
        ConstantPool oa = sun.misc.SharedSecrets.getJavaLangAccess().getConstantPool(consumer.getClass());
        for (int i = 0; i < oa.getSize(); i++) {
            try {
                Object v = oa.getMethodAt(i);
                if (v instanceof Method) {
                    System.out.println("index = " + i + ", method = " + v);
                }
            } catch (Exception e) {
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().run();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19803058" questionTitle="Java 8 Stream, getting head and tail">
<Answer><![CDATA[class Tuple2<T1, T2> {
    final T1 v1;
    final T2 v2;

    Tuple2(T1 v1, T2 v2) {
        this.v1 = v1;
        this.v2 = v2;
    }

    static <T1, T2> Tuple2<T1, T2> tuple(T1 v1, T2 v2) {
        return new Tuple<>(v1, v2);
    }
}

static <T> Tuple2<Optional<T>, Stream<T>> splitAtHead(Stream<T> stream) {
    Iterator<T> it = stream.iterator();
    return tuple(
        it.hasNext() ? Optional.of(it.next()) : Optional.empty,
        StreamSupport.stream(Spliterators.spliteratorUnknownSize(
            it, Spliterator.ORDERED
        ), false)
    );
}]]></Answer>
<Answer><![CDATA[import java.util.PrimitiveIterator;
    import java.util.stream.IntStream;
    import java.util.stream.Stream;

    public class Prime {
        private final IntStream candidates;
        private final int current;

        private Prime(int current, IntStream candidates)
        {
            this.current = current;
            this.candidates = candidates;
        }

        private Prime next()
        {
            PrimitiveIterator.OfInt it = candidates.filter(n -> n % current != 0).iterator();

            int head = it.next();
            IntStream tail = IntStream.generate(it::next);

            return new Prime(head, tail);
        }

        public static Stream<Integer> stream() {
            IntStream possiblePrimes = IntStream.iterate(3, i -> i + 1);

            return Stream.iterate(new Prime(2, possiblePrimes), Prime::next)
                         .map(p -> p.current);
        }
    }]]></Answer>
<Answer><![CDATA[package com.company;

import rx.Observable;

import java.util.function.IntPredicate;
import java.util.stream.IntStream;

public class Main {

    public static void main(String[] args) {

        final IntPredicate[] p={(x)->true};
        IntStream primesStream=IntStream.iterate(2,n->n+1).filter(i -> p[0].test(i)).peek(i->p[0]=p[0].and(v->v%i!=0)   );

        Observable primes = Observable.from(()->primesStream.iterator());

        primes.take(10).forEach((x) -> System.out.println(x.toString()));


    }

}]]></Answer>
<Answer><![CDATA[package com.company;

import com.nurkiewicz.lazyseq.LazySeq;

public class Main {

    public static void main(String[] args) {

        LazySeq<Integer> ints = integers(2);
        LazySeq primes = sieve(ints);
        primes.take(10).forEach(p -> System.out.println(p));

    }

    private static LazySeq<Integer> sieve(LazySeq<Integer> s) {
        return LazySeq.cons(s.head(), () -> sieve(s.filter(x -> x % s.head() != 0)));
    }

    private static LazySeq<Integer> integers(int from) {
        return LazySeq.cons(from, () -> integers(from + 1));
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19757300" questionTitle="Java 8: Lambda-Streams, Filter by Method with Exception">
<Answer><![CDATA[public final class UtilException {

@FunctionalInterface
public interface Consumer_WithExceptions<T, E extends Exception> {
    void accept(T t) throws E;
    }

@FunctionalInterface
public interface BiConsumer_WithExceptions<T, U, E extends Exception> {
    void accept(T t, U u) throws E;
    }

@FunctionalInterface
public interface Function_WithExceptions<T, R, E extends Exception> {
    R apply(T t) throws E;
    }

@FunctionalInterface
public interface Supplier_WithExceptions<T, E extends Exception> {
    T get() throws E;
    }

@FunctionalInterface
public interface Runnable_WithExceptions<E extends Exception> {
    void run() throws E;
    }

/** .forEach(rethrowConsumer(name -> System.out.println(Class.forName(name)))); or .forEach(rethrowConsumer(ClassNameUtil::println)); */
public static <T, E extends Exception> Consumer<T> rethrowConsumer(Consumer_WithExceptions<T, E> consumer) throws E {
    return t -> {
        try { consumer.accept(t); }
        catch (Exception exception) { throwAsUnchecked(exception); }
        };
    }

public static <T, U, E extends Exception> BiConsumer<T, U> rethrowBiConsumer(BiConsumer_WithExceptions<T, U, E> biConsumer) throws E {
    return (t, u) -> {
        try { biConsumer.accept(t, u); }
        catch (Exception exception) { throwAsUnchecked(exception); }
        };
    }

/** .map(rethrowFunction(name -> Class.forName(name))) or .map(rethrowFunction(Class::forName)) */
public static <T, R, E extends Exception> Function<T, R> rethrowFunction(Function_WithExceptions<T, R, E> function) throws E {
    return t -> {
        try { return function.apply(t); }
        catch (Exception exception) { throwAsUnchecked(exception); return null; }
        };
    }

/** rethrowSupplier(() -> new StringJoiner(new String(new byte[]{77, 97, 114, 107}, "UTF-8"))), */
public static <T, E extends Exception> Supplier<T> rethrowSupplier(Supplier_WithExceptions<T, E> function) throws E {
    return () -> {
        try { return function.get(); }
        catch (Exception exception) { throwAsUnchecked(exception); return null; }
        };
    }

/** uncheck(() -> Class.forName("xxx")); */
public static void uncheck(Runnable_WithExceptions t)
    {
    try { t.run(); }
    catch (Exception exception) { throwAsUnchecked(exception); }
    }

/** uncheck(() -> Class.forName("xxx")); */
public static <R, E extends Exception> R uncheck(Supplier_WithExceptions<R, E> supplier)
    {
    try { return supplier.get(); }
    catch (Exception exception) { throwAsUnchecked(exception); return null; }
    }

/** uncheck(Class::forName, "xxx"); */
public static <T, R, E extends Exception> R uncheck(Function_WithExceptions<T, R, E> function, T t) {
    try { return function.apply(t); }
    catch (Exception exception) { throwAsUnchecked(exception); return null; }
    }

@SuppressWarnings ("unchecked")
private static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }

}]]></Answer>
<Answer><![CDATA[public class PropagateExceptionsSample {
    // a simplified version of Throwables#propagate
    public static RuntimeException runtime(Throwable e) {
        if (e instanceof RuntimeException) {
            return (RuntimeException)e;
        }

        return new RuntimeException(e);
    }

    // this is a new one, n/a in public libs
    // Callable just suits as a functional interface in JDK throwing Exception 
    public static <V> V propagate(Callable<V> callable){
        try {
            return callable.call();
        } catch (Exception e) {
            throw runtime(e);
        }
    }

    public static void main(String[] args) {
        class Account{
            String name;    
            Account(String name) { this.name = name;}

            public boolean isActive() throws IOException {
                return name.startsWith("a");
            }
        }


        List<Account> accounts = new ArrayList<>(Arrays.asList(new Account("andrey"), new Account("angela"), new Account("pamela")));

        Stream<Account> s = accounts.stream();

        s
          .filter(a -> propagate(a::isActive))
          .map(a -> a.name)
          .forEach(System.out::println);
    }
}]]></Answer>
<Answer><![CDATA[@FunctionalInterface
public interface ThrowingPredicate<T, X extends Throwable> {
    public boolean test(T t) throws X;
}

@FunctionalInterface
public interface ThrowingFunction<T, R, X extends Throwable> {
    public R apply(T t) throws X;
}

@FunctionalInterface
public interface ThrowingSupplier<R, X extends Throwable> {
    public R get() throws X;
}

public interface ThrowingStream<T, X extends Throwable> {
    public ThrowingStream<T, X> filter(
            ThrowingPredicate<? super T, ? extends X> predicate);

    public <R> ThrowingStream<T, R> map(
            ThrowingFunction<? super T, ? extends R, ? extends X> mapper);

    public <A, R> R collect(Collector<? super T, A, R> collector) throws X;

    // etc
}

class StreamAdapter<T, X extends Throwable> implements ThrowingStream<T, X> {
    private static class AdapterException extends RuntimeException {
        public AdapterException(Throwable cause) {
            super(cause);
        }
    }

    private final Stream<T> delegate;
    private final Class<X> x;

    StreamAdapter(Stream<T> delegate, Class<X> x) {
        this.delegate = delegate;
        this.x = x;
    }

    private <R> R maskException(ThrowingSupplier<R, X> method) {
        try {
            return method.get();
        } catch (Throwable t) {
            if (x.isInstance(t)) {
                throw new AdapterException(t);
            } else {
                throw t;
            }
        }
    }

    @Override
    public ThrowingStream<T, X> filter(ThrowingPredicate<T, X> predicate) {
        return new StreamAdapter<>(
                delegate.filter(t -> maskException(() -> predicate.test(t))), x);
    }

    @Override
    public <R> ThrowingStream<R, X> map(ThrowingFunction<T, R, X> mapper) {
        return new StreamAdapter<>(
                delegate.map(t -> maskException(() -> mapper.apply(t))), x);
    }

    private <R> R unmaskException(Supplier<R> method) throws X {
        try {
            return method.get();
        } catch (AdapterException e) {
            throw x.cast(e.getCause());
        }
    }

    @Override
    public <A, R> R collect(Collector<T, A, R> collector) throws X {
        return unmaskException(() -> delegate.collect(collector));
    }
}]]></Answer>
<Answer><![CDATA[@Test
public void testPredicate() throws MyTestException {
    List<String> nonEmptyStrings = Stream.of("ciao", "")
            .filter(rethrowPredicate(s -> notEmpty(s)))
            .collect(toList());
    assertEquals(1, nonEmptyStrings.size());
    assertEquals("ciao", nonEmptyStrings.get(0));
}

private class MyTestException extends Exception { }

private boolean notEmpty(String value) throws MyTestException {
    if(value==null) {
        throw new MyTestException();
    }
    return !value.isEmpty();
}

@Test
public void testPredicateRaisingException() throws MyTestException {
    try {
        Stream.of("ciao", null)
                .filter(rethrowPredicate(s -> notEmpty(s)))
                .collect(toList());
        fail();
    } catch (MyTestException e) {
        //OK
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19588029" questionTitle="Customize ListView in JavaFX with FXML">
<Answer><![CDATA[package demo;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.util.Callback;
import java.io.IOException;
import java.util.Set;

public class ListViewController
{
    @FXML
    private ListView listView;
    private Set<String> stringSet;
    ObservableList observableList = FXCollections.observableArrayList();

    public ListViewController()
    {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/fxml/listview.fxml"));
        fxmlLoader.setController(this);
        try
        {
            Parent parent = (Parent)fxmlLoader.load();
            Scene scene = new Scene(parent, 400.0 ,500.0);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public void setListView()
    {
        stringSet.add("String 1");
        stringSet.add("String 2");
        stringSet.add("String 3");
        stringSet.add("String 4");
        observableList.setAll(stringSet);
        listView.setItems(observableList);
        listView.setCellFactory(new Callback<ListView<String>, javafx.scene.control.ListCell<String>>()
        {
            @Override
            public ListCell<String> call(ListView<String> listView)
            {
                return new ListViewCell();
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[public class ListViewController 
 {

     @FXML private   ResourceBundle      resources;

     @FXML private   URL                 location;

     @FXML private   ListView            listView;

     private         List<String>        stringList     = new ArrayList<>(5);
     private         ObservableList      observableList = FXCollections.observableArrayList();

     public void setListView(){

         stringList.add("String 1");
         stringList.add("String 2");
         stringList.add("String 3");
         stringList.add("String 4");

         observableList.setAll(stringList);

         listView.setItems(observableList);

         listView.setCellFactory(
             new Callback<ListView<String>, javafx.scene.control.ListCell<String>>() {
                 @Override
                 public ListCell<String> call(ListView<String> listView) {
                     return new ListViewCell();
                 }
             });
     }

     @FXML
     void initialize() {
         assert listView != null : "fx:id=\"listView\" was not injected: check your FXML file 'CustomList.fxml'.";

         setListView();
     }

 }//ListViewController]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19573662" questionTitle="How to avoid many if-else with many condition">
<Answer><![CDATA[interface ToStringer {
    void appendTo(StringBuilder sb);
}

class NullToStringer implements ToStringer {
    public void appendTo(StringBuilder sb) {
        // Do nothing
    }
}

class IntegerToStringer implements ToStringer {
    private String fieldName;
    private Integer val;
    public IntegerToStringer(String fieldName, Integer val) {
        this.fieldName = fieldName;
        this.val = val;
    }


    public void appendTo(StringBuilder sb) {
        sb.append(field).append(" = ").append(val);
    }
}

public class ToStringFactory {
    public ToStringer getToStringer(String fieldName, Integer val) {
        if (val == null) {
            return new NullToStringer();
        } else {
            return new IntegerToStringer(fieldName, val);
        }
    }       

    public ToStringer getToStringer(String fieldName, String val) {
        ...
    }
}

public String build(Model m){
    ArrayList<ToStringInstance> list = ...;
    list.add(ToStringFactory.getToStringer("f", m.f));
    list.add(ToStringFactory.getToStringer("g", m.g));
    list.add(ToStringFactory.getToStringer("h", m.h));

    StringBuilder sb = ...;

    for (ToStringInstance tsi : list) {
       tsi.appendTo(sb);
    }

    return sb.toString();

}]]></Answer>
<Answer><![CDATA[public class Service {
    public StringBuilder query = null;  
    public Service(){
        query = new StringBuilder("Select * from A where ");
    }
    public String build(Model m) {
        boolean added = first;
        first &= !maybeAdd("a", m.a, first);
        first &= !maybeAdd("b", m.b, first);
        . . . // all the rest of the fields of m
    }

    /**
     * Add an equality test to an SQL query if the value is not {@code null}.
     * @param key the field name for the query
     * @param value the value to test for equality
     * @param first flag indicating that no conditions have been added
     * @return {@code true} if the value was appended; {@code false} otherwise.
     */    
    private boolean maybeAdd(String key, Object value, boolean first) {
        if (value != null) {
            if (!first) {
                query.append(" AND ");
            }
            query.append(key).append('=').append(value);
            return true;
        }
        return false;
    }
}]]></Answer>
<Answer><![CDATA[public String build(Model m) {
    // use this to know when to add " AND " to separate existing values
    boolean appended = false;

    if (m.a != null) {
        query.append("a=" + m.a);
        appended = true;
    }
    if (m.b != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("b=" + m.b);
        appended = true;
    }
    if (m.c != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("c=" + m.c);
        appended = true;
    }
    if (m.d != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("d=" + m.d);
        appended = true;
    }
    if (m.e != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("e=" + m.e);
        appended = true;
    }
    if (m.f != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("f=" + m.f);
        appended = true;
    }
    if (m.g != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("g=" + m.g);
        appended = true;
    }
    if (m.h != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("h=" + m.h);
        appended = true;
    }
    if (m.i != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("i=" + m.i);
        appended = true;
    }
    if (m.j != null) {
        if (appended) {
            query.append(" AND ");
        }
        query.append("j=" + m.j);
        appended = true;
    }
    return query.toString();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19446510" questionTitle="How do I include jquery in javafx webview?">
<Answer><![CDATA[WebView browser;
StringBuilder jQueryContents = new StringBuilder; 
        // load this string with your jQuery file contents

BufferedReader reader = new BufferedReader(new InputStreamReader(
        App.class.getResourceAsStream("/jquery.min.js")));

String line = reader.readLine();

while (line != null){
    jQueryContents.append(line);
    line = reader.readLine();
}

JSObject jQuery = null;
try{
    jQuery = (JSObject) browser.getEngine().executeScript("$");
}catch (JSException jse){}

if (jQuery == null){ // Don't load jQuery if there already is one, or you
                     // will destroy any $(document).ready() handlers that
                     // were declared previously
    browser.getEngine().executeScript(jQueryContents.toString());
}]]></Answer>
<Answer><![CDATA[/**
 * Executes a script which may reference jQuery function on a document.
 * Checks if the document loaded in a webEngine has a version of jQuery corresponding to 
 * the minimum required version loaded, and, if not, then loads jQuery into the document 
 * from the default JQUERY_LOCATION.
 * @param engine the webView engine to be used.
 * @Param jQueryLocation the location of the jQuery script to be executed.
 * @param minVersion the minimum version of jQuery which needs to be included in the document.
 * @param script provided javascript script string (which may include use of jQuery functions on the document).
 * @return the result of the script execution.
 */ 
private static Object executejQuery(final WebEngine engine, String minVersion, String jQueryLocation, String script) {
  return engine.executeScript(
    "(function(window, document, version, callback) { "
      + "var j, d;"
      + "var loaded = false;"
      + "if (!(j = window.jQuery) || version > j.fn.jquery || callback(j, loaded)) {"
      + "  var script = document.createElement(\"script\");"
      + "  script.type = \"text/javascript\";"
      + "  script.src = \"" + jQueryLocation + "\";"
      + "  script.onload = script.onreadystatechange = function() {"
      + "    if (!loaded && (!(d = this.readyState) || d == \"loaded\" || d == \"complete\")) {"
      + "      callback((j = window.jQuery).noConflict(1), loaded = true);"
      + "      j(script).remove();"
      + "    }"
      + "  };"
      + "  document.documentElement.childNodes[0].appendChild(script) "
      + "} "
      + "})(window, document, \"" + minVersion + "\", function($, jquery_loaded) {" + script + "});"
  );
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19429667" questionTitle="Implement recursive lambda function using Java 8">
<Answer><![CDATA[import java.util.function.Function;

class recursion{

Function<Integer,Integer>  factorial_lambda;  // The positions of the lambda declaration and initialization must be as is.

public static void main(String[] args) {  new recursion();}

public recursion() {
 factorial_lambda=(i)->{
        if(i==1)
            return 1;
        else
            return i*(factorial_lambda.apply(i-1));
    };
    System.out.println(factorial_lambda.apply(5));
 }
}

// Output 120]]></Answer>
<Answer><![CDATA[public class LambdaExperiments {

  @FunctionalInterface
  public interface RFunction<T, R> extends Function<T, R> {
    R recursiveCall(Function<? super T, ? extends R> func, T in);

    default R apply(T in) {
      return recursiveCall(this, in);
    }
  }

  @FunctionalInterface
  public interface RConsumer<T> extends Consumer<T> {
    void recursiveCall(Consumer<? super T> func, T in);

    default void accept(T in) {
      recursiveCall(this, in);
    }
  }

  @FunctionalInterface
  public interface RBiConsumer<T, U> extends BiConsumer<T, U> {
    void recursiveCall(BiConsumer<T, U> func, T t, U u);

    default void accept(T t, U u) {
      recursiveCall(this, t, u);
    }
  }

  public static void main(String[] args) {
    RFunction<Integer, Integer> fibo = (f, x) -> x > 1 ? f.apply(x - 1) + f.apply(x - 2) : x;

    RConsumer<Integer> decreasingPrint = (f, x) -> {
      System.out.println(x);
      if (x > 0) f.accept(x - 1);
    };

    System.out.println("Fibonnaci(15):" + fibo.apply(15));

    decreasingPrint.accept(5);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19375438" questionTitle="Keeping current running thread instance in a map?">
<Answer><![CDATA[class PrintTask {
    private Map map = Collections.synchronizedMap(new HashMap());
    public synchronized void methodToBeExecutedByThread(String key, Map value) {
        map.put(key, value);
    }
    public Map getMap() {
        return map;
    }
} 


class PrintTaskThread {
    private PrintTask task;
    private String name;
    public PrintTaskThread(PrintTask task, String name) { 
        this.task = task;
        this.name = name;
    }
    public void run() {
        Map map = Collections.synchronizedMap(new HashMap());
        //populate map as requires
        task.methodToBeExecutedByThread(name, map);
    }
}]]></Answer>
<Answer><![CDATA[public class Container {
    private final static Map<PrintTask, Map<String, String>> values = new HashMap<>();

    public static void putTaskToMap(PrintTask key, Map<String, String> values) {
        synchronized(values) {
            values.put(key, values);
        }
    }

    public static Map<String, String> getValues(PrintTask key) {
        syncronized (values) {
        Map<String, String> retVal = values.get(key);
        if(retVal == null) {
             retVal = Collections.synchronizedMap(new HashMap<String, String>());
             values.put(retVal);
        }
        return retVal;
        }
    }
}

public class PrintTask extends Runnable {
@Override
public void run() {
    Map<String, String> map = Container.getValues(this);
    map.put(name + " is running", name + " is running");
    System.out.println(name + " is running");

    try {
        Thread.sleep(5000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

    System.out.println(name + " is running");
}

public void someOtherMethod() {
    Map<String, String> values = Container.getValues(this);
    // the values here will always be the _same_ Map containing the same contents as the one in run.
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19372666" questionTitle="javafx adjust setMnemonicParsing(true) alt key">
<Answer><![CDATA[stage.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {

    @Override
    public void handle(KeyEvent event) {
        if(menu1 .isShowing() || menu2 .isShowing() || menu2 .isShowing()) {

            if(event.getCode() == KeyCode.RIGHT) {

                log.debug("right");
                event.consume(); // remove event for next step

                if(menu1.isShowing()) {
                    menu1.hide();
                    menu2.show();
                }
                else if(menu2.isShowing()) {
                    menu2.hide();
                    menu3.show();
                }
                else if(menu3.isShowing()) {
                    menu3.hide();
                    menu1.show();
                }
            }
            else if(event.getCode() == KeyCode.LEFT) {

                log.debug("left");
                event.consume();

                if(menu1.isShowing()) {
                    menu1.hide();
                    menu3.show();
                }
                else if(menu2.isShowing()) {
                    menu2.hide();
                    menu1.show();
                }
                else if(menu3.isShowing()) {
                    menu3.hide();
                    menu2.show();
                }
            }
        }
    }
});]]></Answer>
<Answer><![CDATA[MenuBar menuBar; // given a menuBar not null and not empty
KeyEvent evt; // and some event hook not currently consumed

boolean handled = true;

HANDLED:
do
{
do
{
    // do your handling

    Node n = menuBar;
    try
    {
        while (!(n instanceof MenuButton) && (n instanceof Parent))
        {
            n = ((Parent)n).getChildrenUnmodifiable().get(0);
        }
    }
    catch (IndexOutOfBoundsException e)
    {
        // This should not be possible if there exists menu items in the menu bar...
        break;
    }

    if (!(n instanceof MenuButton))
    {
        // This should not be possible if there exists menu items in the menu bar...
        break;
    }


    // avoid null exceptions in glass pane on immediate click up/down
    // and PREVENT unwanted style changes in de-selected state display. 
    EventHandler<? super MouseEvent> mouseHandler = n.getOnMouseEntered();
    if (mouseHandler != null)
    {
        mouseHandler.handle(null);
    }

    // perform the "focusing and invocation" of the menu button
    Event.fireEvent(n, MouseEvent.impl_mouseEvent(0, 0, 0, 0, MouseButton.PRIMARY, 1, false, false, false, false, false, true, false, false, false, MouseEvent.MOUSE_PRESSED));

    // null out the state machine where the mouse is concerned
    // prevent null exceptions in glasspane handlers in subsequent navigation movements
    Event.fireEvent(n, MouseEvent.impl_mouseEvent(0, 0, 0, 0, MouseButton.PRIMARY, 0, false, false, false, false, false, false, false, false, false, MouseEvent.MOUSE_RELEASED));

    break HANDLED;
} while (false);
// non-standard termination
handled = false;
} while (false);

if (handled)
{
    evt.consume();
}]]></Answer>
<Answer><![CDATA[stage.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {

        @Override
        public void handle(KeyEvent event) {
            final int size = menuBar.getMenus().size();

            boolean showing = false;
            int index = 0;
            for(index = 0; index < menuBar.getMenus().size(); ++index) {
                if(menuBar.getMenus().get(index).isShowing()) {
                    showing = true;
                    break;
                }
            }
            index = (index < 0 ? menuBar.getMenus().size() + index : index) % size;

            if(showing) {
                Menu menu1 = null, menu2 = null;
                menu1 = menuBar.getMenus().get(index);

                if(event.getCode() == KeyCode.RIGHT) {

                    event.consume(); // remove event for next step
                    menu2 = menuBar.getMenus().get((index + 1) % size);

                    menu1.hide();
                    menu2.show();
                }
                else if(event.getCode() == KeyCode.LEFT) {

                    event.consume(); // remove event for next step

                    menu1 = menuBar.getMenus().get(index);
                    menu2 = menuBar.getMenus().get((index - 1) < 0 ? size + (index - 1) : (index - 1));

                    menu1.hide();
                    menu2.show();
                }
            }
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19311194" questionTitle="Making a db conn global">
<Answer><![CDATA[public class SQL {

Connection conn = null;
Statement stmt = null;
ResultSet rs = null;


public SQL(){

    try{
    Class.forName("com.mysql.jdbc.Driver").newInstance();

    String connectionUrl = "jdbc:mysql://localhost:3306/bank";
    String connectionUser = "admin";
    String connectionPassword = "root";

    conn = DriverManager.getConnection(connectionUrl, connectionUser,      connectionPassword);
    stmt = conn.createStatement();
    }
    catch(Exception e){
        e.printStackTrace();
    }

}]]></Answer>
<Answer><![CDATA[public static class SQL {

Connection connection = null;
String connectionUrl = "jdbc:mysql://localhost:3306/bank";
String connectionUser = "admin";
String connectionPassword = "root";


public SQL(){}

public Connection getConnection () {

  if (connection != null) {
    return connection;
  }
  try{

  Class.forName("com.mysql.jdbc.Driver").newInstance();
  connection = DriverManager.getConnection(connectionUrl, connectionUser, connectionPassword);
  return connection; 
 }
  catch(Exception e){
    e.printStackTrace();
}
　return null;　　　
　}
  }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19284411" questionTitle="How to make the MenuItems in a JavaFX context menu support an onMouseOver event">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Tooltip;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

public class MainTest extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        // TODO Auto-generated method stub
        AnchorPane anchorPane = new AnchorPane();
        Scene scene = new Scene(anchorPane);
        stage.setScene(scene);

        Line linea = new Line(0, 0, 50, 50);
        linea.setFill(Color.BLACK);
        final Tooltip t = new Tooltip("Line 1");
        linea.setOnMouseEntered(new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                Line line = (Line) event.getSource();
                line.setStroke(Color.RED);

                t.show((Line) event.getSource(), event.getScreenX(),
                        event.getScreenY());

            }
        });
        linea.setOnMouseExited(new EventHandler<MouseEvent>() {

            @Override
            public void handle(MouseEvent event) {
                Line line = (Line) event.getSource();
                line.setStroke(Color.BLACK);
                t.hide();
            }
        });
        anchorPane.getChildren().add(linea);
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.effect.DropShadow;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class ContextMenuDemo extends Application {

    private DropShadow ds = new DropShadow();

    @Override
    public void start(Stage primaryStage) {

        final Line line1 = new Line(60, 10, 150, 10);
        final Line line2 = new Line(60, 30, 150, 50);
        final Line line3 = new Line(60, 60, 150, 90);

        final ContextMenu cm = new ContextMenu();
        cm.getItems().add(getMenuItemForLine("line 1", line1));
        cm.getItems().add(getMenuItemForLine("line 2", line2));
        cm.getItems().add(getMenuItemForLine("line 3", line3));

        final Rectangle rectangle = new Rectangle(70, 70, Color.TAN);
        rectangle.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                if (e.getButton() == MouseButton.SECONDARY) {
                    cm.show(rectangle, e.getScreenX(), e.getScreenY());
                }
            }
        });

        Group root = new Group();
        root.getChildren().addAll(rectangle, line1, line2, line3);
        Scene scene = new Scene(root, 300, 250);
        // load style of modified paddings for menuitems
        scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private MenuItem getMenuItemForLine(String menuName, final Line line) {

        Label menuLabel = new Label(menuName);
        // apply style to occupy larger space for label
        menuLabel.setStyle("-fx-padding: 5 10 5 10");
        MenuItem mi = new MenuItem();
        mi.setGraphic(menuLabel);
        line.setStroke(Color.BLUE);

        menuLabel.addEventHandler(MouseEvent.MOUSE_ENTERED, new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                line.setStroke(Color.RED);
                line.setEffect(ds);
            }
        });

        menuLabel.addEventHandler(MouseEvent.MOUSE_EXITED, new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                line.setStroke(Color.BLUE);
                line.setEffect(null);
            }
        });

        return mi;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19242747" questionTitle="JavaFx Editable ComboBox : Showing toString on item selection">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.stage.Stage;
import javafx.util.StringConverter;

import java.util.Arrays;
import java.util.List;

public class ComboBoxTest extends Application {
    private ComboBox<Integer> cmb_year = new ComboBox<>();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Group root = new Group();
        root.getChildren().add(cmb_year);
        cmb_year.setPrefWidth(150);
        Scene scene = new Scene(root, 500, 500);
        primaryStage.setScene(scene);
        primaryStage.show();

        List<Integer> ints = Arrays.asList(2012, 2013, 2014, 2015);
        cmb_year.getItems().addAll(ints);

        cmb_year.setConverter(
            new StringConverter<Integer>() {
                @Override
                public String toString(Integer integer) {
                    if (integer == null) {
                        return "";
                    } else {
                        return "that's a year: " + integer.intValue();
                    }
                }

                @Override
                public Integer fromString(String s) {
                    try {
                        return Integer.parseInt(s);
                    } catch (NumberFormatException e) {
                        return null;
                    }
                }
            });

        cmb_year.setPromptText("select year");
        cmb_year.setEditable(true);

        Button distraction = new Button("distraction");
        distraction.setLayoutX(100);
        distraction.setLayoutY(100);
        root.getChildren().add(distraction);
    }
}]]></Answer>
<Answer><![CDATA[mainComboBox.setButtonCell(
    new ListCell<Object>() {
        @Override
        protected void updateItem(Object t, boolean bln) {
            super.updateItem(t, bln);
            if (bln) {
                setText("");
            } else {
                setText(getStringField(t));
            }
        }
    });

mainComboBox.setConverter(
    new StringConverter() {
        private Map<String, Object> map = new HashMap<>();

        @Override
        public String toString(Object t) {
            if (t != null) {
                String str = getStringField(t);
                map.put(str, t);
                return str;
            } else {
                return "";
            }
        }

        @Override
        public Object fromString(String string) {
            if (validate && !map.containsKey(string)) {
                mainComboBox.setValue(null);
                mainComboBox.getEditor().clear();
                return null;
            }
            return map.get(string);
        }
    });

mainComboBox.setCellFactory(
    new Callback<ListView<Object>, ListCell<Object>>() {
        @Override
        public ListCell<Object> call(ListView<Object> p) {
            ListCell cell = new ListCell<Object>() {
                @Override
                protected void updateItem(Object item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setText("");
                    } else {
                        setText(getStringField(item));
                    }
                }
            };return cell;
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19198951" questionTitle="Create wizard in JavaFX">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.AnchorPane?>
<?import org.controlsfx.dialog.*?>
<AnchorPane xmlns="http://javafx.com/javafx/8.0.112" xmlns:fx="http://javafx.com/fxml/1"
        fx:controller="WizardController"
>
    <WizardPane fx:id="step1Pane" headerText="Step 1">
        <content>
            <Label text="Do action 1, then action 2."/>
            <ButtonBar>
                <buttons>
                    <Button text="Action 1" onAction="#displayScreenForAction1"/>
                </buttons>
            </ButtonBar>
        </content>
    </WizardPane>
    <WizardPane fx:id="step2Pane" headerText="Step 2">
        ...
    </WizardPane>
</AnchorPane>]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.*;
import javafx.beans.value.*;
import javafx.collections.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.Stack;

/**
 * This class displays a survey using a wizard
 */
public class Survey extends Application {
    public static void main(String[] args) throws Exception {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        // configure and display the scene and stage.
        stage.setScene(new Scene(new SurveyWizard(stage), 400, 250));
        stage.show();
    }
}

/**
 * basic wizard infrastructure class
 */
class Wizard extends StackPane {
    private static final int UNDEFINED = -1;
    private ObservableList<WizardPage> pages = FXCollections.observableArrayList();
    private Stack<Integer> history = new Stack<>();
    private int curPageIdx = UNDEFINED;

    Wizard(WizardPage... nodes) {
        pages.addAll(nodes);
        navTo(0);
        setStyle("-fx-padding: 10; -fx-background-color: cornsilk;");
    }

    void nextPage() {
        if (hasNextPage()) {
            navTo(curPageIdx + 1);
        }
    }

    void priorPage() {
        if (hasPriorPage()) {
            navTo(history.pop(), false);
        }
    }

    boolean hasNextPage() {
        return (curPageIdx < pages.size() - 1);
    }

    boolean hasPriorPage() {
        return !history.isEmpty();
    }

    void navTo(int nextPageIdx, boolean pushHistory) {
        if (nextPageIdx < 0 || nextPageIdx >= pages.size()) return;
        if (curPageIdx != UNDEFINED) {
            if (pushHistory) {
                history.push(curPageIdx);
            }
        }

        WizardPage nextPage = pages.get(nextPageIdx);
        curPageIdx = nextPageIdx;
        getChildren().clear();
        getChildren().add(nextPage);
        nextPage.manageButtons();
    }

    void navTo(int nextPageIdx) {
        navTo(nextPageIdx, true);
    }

    void navTo(String id) {
        if (id == null) {
            return;
        }

        pages.stream()
                .filter(page -> id.equals(page.getId()))
                .findFirst()
                .ifPresent(page ->
                                navTo(pages.indexOf(page))
                );
    }

    public void finish() {
    }

    public void cancel() {
    }
}

/**
 * basic wizard page class
 */
abstract class WizardPage extends VBox {
    Button priorButton = new Button("_Previous");
    Button nextButton = new Button("N_ext");
    Button cancelButton = new Button("Cancel");
    Button finishButton = new Button("_Finish");

    WizardPage(String title) {
        Label label = new Label(title);
        label.setStyle("-fx-font-weight: bold; -fx-padding: 0 0 5 0;");
        setId(title);
        setSpacing(5);
        setStyle("-fx-padding:10; -fx-background-color: honeydew; -fx-border-color: derive(honeydew, -30%); -fx-border-width: 3;");

        Region spring = new Region();
        VBox.setVgrow(spring, Priority.ALWAYS);
        getChildren().addAll(getContent(), spring, getButtons());

        priorButton.setOnAction(event -> priorPage());
        nextButton.setOnAction(event -> nextPage());
        cancelButton.setOnAction(event -> getWizard().cancel());
        finishButton.setOnAction(event -> getWizard().finish());
    }

    HBox getButtons() {
        Region spring = new Region();
        HBox.setHgrow(spring, Priority.ALWAYS);
        HBox buttonBar = new HBox(5);
        cancelButton.setCancelButton(true);
        finishButton.setDefaultButton(true);
        buttonBar.getChildren().addAll(spring, priorButton, nextButton, cancelButton, finishButton);
        return buttonBar;
    }

    abstract Parent getContent();

    boolean hasNextPage() {
        return getWizard().hasNextPage();
    }

    boolean hasPriorPage() {
        return getWizard().hasPriorPage();
    }

    void nextPage() {
        getWizard().nextPage();
    }

    void priorPage() {
        getWizard().priorPage();
    }

    void navTo(String id) {
        getWizard().navTo(id);
    }

    Wizard getWizard() {
        return (Wizard) getParent();
    }

    public void manageButtons() {
        if (!hasPriorPage()) {
            priorButton.setDisable(true);
        }

        if (!hasNextPage()) {
            nextButton.setDisable(true);
        }
    }
}

/**
 * This class shows a satisfaction survey
 */
class SurveyWizard extends Wizard {
    Stage owner;

    public SurveyWizard(Stage owner) {
        super(new ComplaintsPage(), new MoreInformationPage(), new ThanksPage());
        this.owner = owner;
    }

    public void finish() {
        System.out.println("Had complaint? " + SurveyData.instance.hasComplaints.get());
        if (SurveyData.instance.hasComplaints.get()) {
            System.out.println("Complaints: " + 
                    (SurveyData.instance.complaints.get().isEmpty() 
                            ? "No Details" 
                            : "\n" + SurveyData.instance.complaints.get())
            );
        }
        owner.close();
    }

    public void cancel() {
        System.out.println("Cancelled");
        owner.close();
    }
}

/**
 * Simple placeholder class for the customer entered survey response.
 */
class SurveyData {
    BooleanProperty hasComplaints = new SimpleBooleanProperty();
    StringProperty complaints = new SimpleStringProperty();
    static SurveyData instance = new SurveyData();
}

/**
 * This class determines if the user has complaints.
 * If not, it jumps to the last page of the wizard.
 */
class ComplaintsPage extends WizardPage {
    private RadioButton yes;
    private RadioButton no;
    private ToggleGroup options = new ToggleGroup();

    public ComplaintsPage() {
        super("Complaints");

        nextButton.setDisable(true);
        finishButton.setDisable(true);
        yes.setToggleGroup(options);
        no.setToggleGroup(options);
        options.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
            @Override
            public void changed(ObservableValue<? extends Toggle> observableValue, Toggle oldToggle, Toggle newToggle) {
                nextButton.setDisable(false);
                finishButton.setDisable(false);
            }
        });
    }

    Parent getContent() {
        yes = new RadioButton("Yes");
        no = new RadioButton("No");
        SurveyData.instance.hasComplaints.bind(yes.selectedProperty());
        return new VBox(
                5,
                new Label("Do you have complaints?"), yes, no
        );
    }

    void nextPage() {
        // If they have complaints, go to the normal next page
        if (options.getSelectedToggle().equals(yes)) {
            super.nextPage();
        } else {
            // No complaints? Short-circuit the rest of the pages
            navTo("Thanks");
        }
    }
}

/**
 * This page gathers more information about the complaint
 */
class MoreInformationPage extends WizardPage {
    public MoreInformationPage() {
        super("More Info");
    }

    Parent getContent() {
        TextArea textArea = new TextArea();
        textArea.setWrapText(true);
        textArea.setPromptText("Tell me what's wrong Dave...");
        nextButton.setDisable(true);
        textArea.textProperty().addListener((observableValue, oldValue, newValue) -> {
            nextButton.setDisable(newValue.isEmpty());
        });
        SurveyData.instance.complaints.bind(textArea.textProperty());
        return new VBox(
                5,
                new Label("Please enter your complaints."),
                textArea
        );
    }
}

/**
 * This page thanks the user for taking the survey
 */
class ThanksPage extends WizardPage {
    public ThanksPage() {
        super("Thanks");
    }

    Parent getContent() {
        StackPane stack = new StackPane(
                new Label("Thanks!")
        );
        VBox.setVgrow(stack, Priority.ALWAYS);
        return stack;
    }
}]]></Answer>
<Answer><![CDATA[/**
   * run the wizard with the given title
   * @param title - of the wizard
   * @param resourcePath - where to load the fxml files from
   * @param pageNames - without .fxml extenion
   * @throws Exception - e.g. IOException
   */
  public void runWizard(String title,String resourcePath,String ...pageNames) throws Exception {
    Wizard wizard = new Wizard();
    wizard.setTitle(title);

    WizardPane[] pages = new WizardPane[pageNames.length];
    int i = 0;
    for (String pageName : pageNames) {
      Parent root = FXMLLoader.load(getClass()
          .getResource(resourcePath + pageName + ".fxml"));
      WizardPane page = new WizardPane();
      page.setHeaderText(I18n.get(pageName));
      page.setContent(root);
      pages[i++] = page;
    }
    wizard.setFlow(new LinearFlow(pages));
    wizard.showAndWait().ifPresent(result -> {
      if (result == ButtonType.FINISH) {
        System.out
            .println("Wizard finished, settings: " + wizard.getSettings());
      }
    });
  }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19167750" questionTitle="Control keyboard input into javafx TextField">
<Answer><![CDATA[@FXML
private TextField txt_Numeric;
@FXML
private TextField txt_Letters;

@Override
public void initialize(URL url, ResourceBundle rb) {
    /* add Event Filter to your TextFields **************************************************/
    txt_Numeric.addEventFilter(KeyEvent.KEY_TYPED , numeric_Validation(10));
    txt_Letters.addEventFilter(KeyEvent.KEY_TYPED , letter_Validation(10));
}

/* Numeric Validation Limit the  characters to maxLengh AND to ONLY DigitS *************************************/
public EventHandler<KeyEvent> numeric_Validation(final Integer max_Lengh) {
    return new EventHandler<KeyEvent>() {
        @Override
        public void handle(KeyEvent e) {
            TextField txt_TextField = (TextField) e.getSource();                
            if (txt_TextField.getText().length() >= max_Lengh) {                    
                e.consume();
            }
            if(e.getCharacter().matches("[0-9.]")){ 
                if(txt_TextField.getText().contains(".") && e.getCharacter().matches("[.]")){
                    e.consume();
                }else if(txt_TextField.getText().length() == 0 && e.getCharacter().matches("[.]")){
                    e.consume(); 
                }
            }else{
                e.consume();
            }
        }
    };
}    
/*****************************************************************************************/

 /* Letters Validation Limit the  characters to maxLengh AND to ONLY Letters *************************************/
public EventHandler<KeyEvent> letter_Validation(final Integer max_Lengh) {
    return new EventHandler<KeyEvent>() {
        @Override
        public void handle(KeyEvent e) {
            TextField txt_TextField = (TextField) e.getSource();                
            if (txt_TextField.getText().length() >= max_Lengh) {                    
                e.consume();
            }
            if(e.getCharacter().matches("[A-Za-z]")){ 
            }else{
                e.consume();
            }
        }
    };
}    
/*****************************************************************************************/]]></Answer>
<Answer><![CDATA[package limitedtextfield;
import javafx.scene.control.TextField;

public class LimitedTextField extends TextField
{
    private String characters;
    private int max;
    private boolean capital = false;
    private boolean space = true;

    static public final String CharactersNumbers = "[qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890èéòàùì ]";
    static public final String Characters = "[qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNMèéòàùì ]";
    static public final String Numbers = "[1234567890 ]";
    static public final String NumbersPoint = "[1234567890. ]";

    public LimitedTextField(String l){
        super();
        characters = l;
        max=0;
    }

    public LimitedTextField(){
        super();
        characters = "";
        max=0;
    }

    public LimitedTextField(String l, int max){
        super();
        characters = l;
        this.max=max;
        //System.out.println("Costruttore");
    }

    public LimitedTextField(int max){
        super();
        characters = "";
        this.max=max;
    }

    @Override
    public void replaceText(int start, int end, String text)
    {
        if(!characters.equals("")){
            if (validateCh(text))
            {
                text = check(text);
                super.replaceText(start, end, text);
                if(max>0)
                    verifyLengh();
            }
        }else{
            text = check(text);
            super.replaceText(start, end, text);
            if(max>0)
                verifyLengh();
        }
    }

    @Override
    public void replaceSelection(String text)
    {
        if(!characters.equals("")){
            if (validateCh(text))
            {
                text = check(text);
                super.replaceSelection(text);
                if(max>0)
                    verifyLengh();
            }  
        }else{
            text = check(text);
            super.replaceSelection(text);
            if(max>0)
                verifyLengh();
        }
    }

    private boolean validateCh(String text)
    {
        /*
        [abc] Find any of the characters between the brackets 
        [0-9] Find any of the digits between the brackets 
        (x|y) Find any of the alternatives separated with | 
        */
        return ("".equals(text) || text.matches(characters));
    }

    private void verifyLengh() {
        if (getText().length() > max) {
            setText(getText().substring(0, max));//use this line if you want to delete the newer characters inserted
            //setText(getText().substring(getText().length()-max, getText().length()));//use this line if you want to delete the older characters inserted
            positionCaret(max);//set the cursor position
        }

    }

    private String check(String text){
        if(capital)
            text = text.toUpperCase();
        if(!space)
            text = text.replace(" ", "");

        return text;
    }
    public void setLimitCharachters(String s){
        this.characters = s;
    }
    public String getLimitCharachters(){
        return characters;
    }
    public void setMaxLenght(int s){
        this.max= s;
    }
    public int getMaxLenght(){
        return max;
    }
    public boolean getCapital(){
        return this.capital;
    }
    public void setCapital(boolean t){
        this.capital = t;
    }
    public boolean getSpace(){
        return this.space;
    }
    public void setSpace(boolean t){
        this.space = t;
    }
}]]></Answer>
<Answer><![CDATA[import javafx.scene.control.TextField;

public class AttributeTextField extends TextField{

    public AttributeTextField() {
        setMinWidth(25);
        setMaxWidth(25);
    }

    public void replaceText(int start, int end, String text) {
        String oldValue = getText();
        if (!text.matches("[A-Za-z]") && !text.matches("[\\\\!\"#$%&()*+,./:;<=>?@\\[\\]^_{|}~]+")) {
            super.replaceText(start, end, text);
        }
        if (getText().length() > 2 ) {
            setText(oldValue);
        }
    }

    public void replaceSelection(String text) {
        String oldValue = getText();
        if (!text.matches("[A-Za-z]") && !text.matches("[\\\\!\"#$%&()*+,./:;<=>?@\\[\\]^_{|}~]+")) {
            super.replaceSelection(text);
        }
        if (getText().length() > 2 ) {
            setText(oldValue);
        }
    }
}]]></Answer>
<Answer><![CDATA[public class FilterMaxValue implements EventHandler<KeyEvent> {

        private int maxVal;

        public FilterMaxValue (int i) {
            this.maxVal= i;
        }

        public void handle(KeyEvent arg0) {

            TextField tx = (TextField) arg0.getSource();
            String chara = arg0.getCharacter();
            if (tx.getText().equals(""))
                return;

            Double valor;
            if (chara.equals(".")) {
                valor = Double.parseDouble(tx.getText() + chara + "0");
            } else {
                try {
                    valor = Double.parseDouble(tx.getText() + chara);
                } catch (NumberFormatException e) {
                    //The other filter will prevent this from hapening
                    return;
                }
            }
            if (valor > maxVal) {
                arg0.consume();
            }

        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19010619" questionTitle="JavaFX - Filtered ComboBox">
<Answer><![CDATA[import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;

public class FilterComboBox extends ComboBox<String> {
    private ObservableList<String> initialList;
    private ObservableList<String> bufferList = FXCollections.observableArrayList();
    private String previousValue = "";

    public FilterComboBox(ObservableList<String> items) {
        super(items);
        super.setEditable(true);
        this.initialList = items;

        this.configAutoFilterListener();
    }

    private void configAutoFilterListener() {
        final FilterComboBox currentInstance = this;
        this.getEditor().textProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                previousValue = oldValue;
                final TextField editor = currentInstance.getEditor();
                final String selected = currentInstance.getSelectionModel().getSelectedItem();

                if (selected == null || !selected.equals(editor.getText())) {
                    filterItems(newValue, currentInstance);

                    currentInstance.show();
                    if (currentInstance.getItems().size() == 1) {
                        setUserInputToOnlyOption(currentInstance, editor);
                    }
                }
            }
        });
    }

    private void filterItems(String filter, ComboBox<String> comboBox) {
        if (filter.startsWith(previousValue) && !previousValue.isEmpty()) {
            ObservableList<String> filteredList = this.readFromList(filter, bufferList);
            bufferList.clear();
            bufferList = filteredList;
        } else {
            bufferList = this.readFromList(filter, initialList);
        }
        comboBox.setItems(bufferList);
    }

    private ObservableList<String> readFromList(String filter, ObservableList<String> originalList) {
        ObservableList<String> filteredList = FXCollections.observableArrayList();
        for (String item : originalList) {
            if (item.toLowerCase().startsWith(filter.toLowerCase())) {
                filteredList.add(item);
            }
        }

        return filteredList;
    }

    private void setUserInputToOnlyOption(ComboBox<String> currentInstance, final TextField editor) {
        final String onlyOption = currentInstance.getItems().get(0);
        final String currentText = editor.getText();
        if (onlyOption.length() > currentText.length()) {
            editor.setText(onlyOption);
            Platform.runLater(new Runnable() {
                @Override
                public void run() {
                    editor.selectRange(currentText.length(), onlyOption.length());
                }
            });
        }
    }
}]]></Answer>
<Answer><![CDATA[public class AutoCompleteComboBoxListener<T> implements EventHandler<KeyEvent> {

    private ComboBox comboBox;
    private StringBuilder sb;
    private ObservableList<T> data;
    private boolean moveCaretToPos = false;
    private int caretPos;

    public AutoCompleteComboBoxListener(final ComboBox comboBox) {
        this.comboBox = comboBox;
        sb = new StringBuilder();
        data = comboBox.getItems();

        this.comboBox.setEditable(true);
        this.comboBox.setOnKeyPressed(new EventHandler<KeyEvent>() {

            @Override
            public void handle(KeyEvent t) {
                comboBox.hide();
            }
        });
        this.comboBox.setOnKeyReleased(AutoCompleteComboBoxListener.this);
    }

    @Override
    public void handle(KeyEvent event) {
        ListView lv = ((ComboBoxListViewSkin) comboBox.getSkin()).getListView();

        if(event.getCode() == KeyCode.UP) {
            caretPos = -1;
            moveCaret(comboBox.getEditor().getText().length());
            return;
        } else if(event.getCode() == KeyCode.DOWN) {
            if(!comboBox.isShowing()) {
                comboBox.show();
            }
            caretPos = -1;
            moveCaret(comboBox.getEditor().getText().length());
            return;
        } else if(event.getCode() == KeyCode.BACK_SPACE) {
            moveCaretToPos = true;
            caretPos = comboBox.getEditor().getCaretPosition();
        } else if(event.getCode() == KeyCode.DELETE) {
            moveCaretToPos = true;
            caretPos = comboBox.getEditor().getCaretPosition();
        }

        if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.LEFT
                || event.isControlDown() || event.getCode() == KeyCode.HOME
                || event.getCode() == KeyCode.END || event.getCode() == KeyCode.TAB) {
            return;
        }

        ObservableList list = FXCollections.observableArrayList();
        for (int i=0; i<data.size(); i++) {
            if(data.get(i).toString().toLowerCase().startsWith(
                AutoCompleteComboBoxListener.this.comboBox
                .getEditor().getText().toLowerCase())) {
                list.add(data.get(i));
            }
        }
        String t = comboBox.getEditor().getText();

        comboBox.setItems(list);
        comboBox.getEditor().setText(t);
        if(!moveCaretToPos) {
            caretPos = -1;
        }
        moveCaret(t.length());
        if(!list.isEmpty()) {
            comboBox.show();
        }
    }

    private void moveCaret(int textLength) {
        if(caretPos == -1) {
            comboBox.getEditor().positionCaret(textLength);
        } else {
            comboBox.getEditor().positionCaret(caretPos);
        }
        moveCaretToPos = false;
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class MCVE extends Application {
    public void start(Stage stage) {
        HBox root = new HBox();

        ComboBox<String> cb = new ComboBox<String>();
        cb.setEditable(true);

        // Create a list with some dummy values.
        ObservableList<String> items = FXCollections.observableArrayList("One", "Two", "Three", "Four", "Five", "Six",
                "Seven", "Eight", "Nine", "Ten");

        // Create a FilteredList wrapping the ObservableList.
        FilteredList<String> filteredItems = new FilteredList<String>(items, p -> true);

        // Add a listener to the textProperty of the combobox editor. The
        // listener will simply filter the list every time the input is changed
        // as long as the user hasn't selected an item in the list.
        cb.getEditor().textProperty().addListener((obs, oldValue, newValue) -> {
            final TextField editor = cb.getEditor();
            final String selected = cb.getSelectionModel().getSelectedItem();

            // This needs run on the GUI thread to avoid the error described
            // here: https://bugs.openjdk.java.net/browse/JDK-8081700.
            Platform.runLater(() -> {
                // If the no item in the list is selected or the selected item
                // isn't equal to the current input, we refilter the list.
                if (selected == null || !selected.equals(editor.getText())) {
                    filteredItems.setPredicate(item -> {
                        // We return true for any items that starts with the
                        // same letters as the input. We use toUpperCase to
                        // avoid case sensitivity.
                        if (item.toUpperCase().startsWith(newValue.toUpperCase())) {
                            return true;
                        } else {
                            return false;
                        }
                    });
                }
            });
        });

        cb.setItems(filteredItems);

        root.getChildren().add(cb);

        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18998671" questionTitle="Set Height and Width of Stage and Scene in javafx">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

public class Test extends Application {

    @Override
    public void start(final Stage stage) throws Exception {

        AnchorPane anchor1 = new AnchorPane();
        final Scene scene1 = new Scene(anchor1, 250, 250);
        Button boton1 = new Button();
        anchor1.getChildren().add(boton1);

        AnchorPane anchor2 = new AnchorPane();
        final Scene scene2 = new Scene(anchor2, 500, 500);
        Button boton2 = new Button();
        anchor2.getChildren().add(boton2);

        boton2.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                // TODO Auto-generated method stub
                stage.setScene(scene1);
                stage.setHeight(1000);
                stage.setWidth(1000);
            }
        });

        boton1.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                // TODO Auto-generated method stub
                stage.setScene(scene2);
                stage.setHeight(1000);
                stage.setWidth(1000);
            }
        });
        stage.setScene(scene1);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.beans.value.ChangeListener;
    import javafx.beans.value.ObservableValue;
    import javafx.fxml.FXMLLoader;
    import javafx.scene.Parent;
    import javafx.scene.Scene;
    import javafx.stage.Stage;

    import java.io.IOException;

    class LoginController  {

        private Stage stage;
        private Scene scene;
        private Parent parent;
        @FXML  
        private Button gotoHomeButton;        

        public LoginController()  throws Exception {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
            fxmlLoader.setController(this);
            try {
                parent = (Parent) fxmlLoader.load();
                // set height and width here for this login scene
                scene = new Scene(parent, 1000, 800);
            } catch (IOException ex) {
                System.out.println("Error displaying login window");
                throw new RuntimeException(ex);
            }
        }

        // create a launcher method for this. Here I am going to take like below--
        public void launchLoginScene(Stage stage) {
           this.stage = stage;
            stage.setScene(scene);
            stage.setResizable(true);

            stage.widthProperty().addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> observableValue, Number number, Number number2) {
                    setCurrentWidthToStage(number2); 
                }
            });

            stage.heightProperty().addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> observableValue, Number number, Number number2) {
                    setCurrentHeightToStage(number2);
                }
            });

            //Don't forget to add below code in every controller
            stage.hide();
            stage.show();

        }

         @FXML
        public void authenticateUser(ActionEvent actionEvent) { 

        // write your logic to authenticate user


         // 
         new HomeController().displayHomeScreen(stage);

        } 

        private void setCurrentWidthToStage(Number number2) {
            stage.setWidth((double) number2);
        }

        private void setCurrentHeightToStage(Number number2) {
            stage.setHeight((double) number2);
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18944539" questionTitle="Abstract Class:-Real Time Example">
<Answer><![CDATA[abstract class WagonX
{
   public abstract void model();
   public abstract void color();
   public static void baseEngine()
    {
     // your logic here
    }
   public static void size()
   {
   // logic here
   }
}
class Car extends WagonX
{
public void model()
{
// logic here
}
public void color()
{
// logic here
}
}]]></Answer>
<Answer><![CDATA[abstract class MainProcess {
  public static class Metrics {
    int skipped;
    int processed;
    int stored;
    int error;
  }
  private Metrics metrics;
  protected abstract Iterator<Item> readObjectsFromSource();
  protected abstract boolean storeItem(Item item);
  protected Item processItem(Item item) {
    /* do something on item and return it to store, or null to skip */
    return item;
  }
  public Metrics getMetrics() {
    return metrics;
  }
  /* Main method */
  final public void process() {
    this.metrics = new Metrics();
    Iterator<Item> items = readObjectsFromSource();
    for(Item item : items) {
      metrics.processed++;
      item = processItem(item);
      if(null != item) {

        if(storeItem(item))
          metrics.stored++;
        else
          metrics.error++;
      }
      else {
        metrics.skipped++;
      }
    }
  } 
}

class ProcessFromDatabase extends MainProcess {
  ProcessFromDatabase(String query) {
    this.query = query;
  }
  protected Iterator<Item> readObjectsFromSource() {
    return sessionFactory.getCurrentSession().query(query).list();
  }
  protected boolean storeItem(Item item) {
    return sessionFactory.getCurrentSession().saveOrUpdate(item);
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18928333" questionTitle="How to program Back and Forward buttons in JavaFX with WebView and WebEngine?">
<Answer><![CDATA[public String goBack()
  {    
    final WebHistory history=eng.getHistory();
    ObservableList<WebHistory.Entry> entryList=history.getEntries();
    int currentIndex=history.getCurrentIndex();
//    Out("currentIndex = "+currentIndex);
//    Out(entryList.toString().replace("],","]\n"));

    Platform.runLater(new Runnable() { public void run() { history.go(-1); } });
    return entryList.get(currentIndex>0?currentIndex-1:currentIndex).getUrl();
  }

  public String goForward()
  {    
    final WebHistory history=eng.getHistory();
    ObservableList<WebHistory.Entry> entryList=history.getEntries();
    int currentIndex=history.getCurrentIndex();
//    Out("currentIndex = "+currentIndex);
//    Out(entryList.toString().replace("],","]\n"));

    Platform.runLater(new Runnable() { public void run() { history.go(1); } });
    return entryList.get(currentIndex<entryList.size()-1?currentIndex+1:currentIndex).getUrl();
  }]]></Answer>
<Answer><![CDATA[public void goBack()
{ 
  final WebHistory history = webEngine.getHistory();
  ObservableList<WebHistory.Entry> entryList = history.getEntries();
  int currentIndex = history.getCurrentIndex();

  Platform.runLater(() -> 
  {
    history.go(entryList.size() > 1 
      && currentIndex > 0
            ? -1
            : 0); 
  });        
}

public void goForward()
{
  final WebHistory history = webEngine.getHistory();   
  ObservableList<WebHistory.Entry> entryList = history.getEntries();
  int currentIndex = history.getCurrentIndex();

  Platform.runLater(() -> 
  {
    history.go(entryList.size() > 1
      && currentIndex < entryList.size() - 1
                    ? 1
                    : 0); 
  });    
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18889141" questionTitle="How to optimize my code to handle this special event">
<Answer><![CDATA[long REFRESH_TIMEOUT=100;
Timer timer = null;
MyTask myTask = null;
public void listenToEvent(Event event, long timestamp){
    if(event.getName().equals("ADD")){
        timer = new Timer();
        timer.schedule(myTask = new MyTask(event), REFRESH_TIMEOUT);
    }
    if(event.getName().equals("DELETE")){
        if (myTask!=null && !myTask.expired){
            processRefresh(event);
            timer.cancel();
        }else{
            processDelete(event);
        }
    }
}

private static class MyTask extends TimerTask {
    Event event;
    boolean expired;
    public MyTask(Event event){
        this.event=event;
    }
    @Override
    public void run() {
        expired=true;
        processAdd(event);
    }
}

private void processAdd(Event e){
    ...
}
private void processDelete(Event e){
    ...
}
private void processRefrsh(Event e){
    ...
}]]></Answer>
<Answer><![CDATA[private long timeout = 1000;
private long addEventTime;
private long deleteEventTime;
private long refreshEventTime;

public void listenToEvent(Event event, long timestamp){
     if(event.getName().equals("ADD")){
           Thread.sleep(timeout);
           addEventTime = System.currentTimeMillis();
           if((refreshEventTime - addEventTime) >timout){
               //handle ADD event
            }


     }else if(event.getName().equals("DELETE")){
           Thread.sleep(timeout);
           deleteEventTime = System.currentTimeMillis();
           if((refreshEventTime - deleteEventTime) >timout){
               //handle DELETE event
            }


    }else if(event.getName().equals("REFRESH")){
          refreshEventTime = System.currentTimeMillis();
          //handle REFRESH event

    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18869686" questionTitle="How to consume a SOAP web service in Java">
<Answer><![CDATA[String endpointUrl = ...;

QName serviceName = new QName("http://com/ibm/was/wssample/echo/",
 "EchoService");
QName portName = new QName("http://com/ibm/was/wssample/echo/",
 "EchoServicePort");

/** Create a service and add at least one port to it. **/ 
Service service = Service.create(serviceName);
service.addPort(portName, SOAPBinding.SOAP11HTTP_BINDING, endpointUrl);

/** Create a Dispatch instance from a service.**/ 
Dispatch<SOAPMessage> dispatch = service.createDispatch(portName, 
SOAPMessage.class, Service.Mode.MESSAGE);

/** Create SOAPMessage request. **/
// compose a request message
MessageFactory mf = MessageFactory.newInstance(SOAPConstants.SOAP_1_1_PROTOCOL);

// Create a message.  This example works with the SOAPPART.
SOAPMessage request = mf.createMessage();
SOAPPart part = request.getSOAPPart();

// Obtain the SOAPEnvelope and header and body elements.
SOAPEnvelope env = part.getEnvelope();
SOAPHeader header = env.getHeader();
SOAPBody body = env.getBody();

// Construct the message payload.
SOAPElement operation = body.addChildElement("invoke", "ns1",
 "http://com/ibm/was/wssample/echo/");
SOAPElement value = operation.addChildElement("arg0");
value.addTextNode("ping");
request.saveChanges();

/** Invoke the service endpoint. **/
SOAPMessage response = dispatch.invoke(request);

/** Process the response. **/]]></Answer>
<Answer><![CDATA[public String someMethod() throws MalformedURLException, IOException {

//Code to make a webservice HTTP request
String responseString = "";
String outputString = "";
String wsURL = "<Endpoint of the webservice to be consumed>";
URL url = new URL(wsURL);
URLConnection connection = url.openConnection();
HttpURLConnection httpConn = (HttpURLConnection)connection;
ByteArrayOutputStream bout = new ByteArrayOutputStream();
String xmlInput = "entire SOAP Request";

byte[] buffer = new byte[xmlInput.length()];
buffer = xmlInput.getBytes();
bout.write(buffer);
byte[] b = bout.toByteArray();
String SOAPAction = "<SOAP action of the webservice to be consumed>";
// Set the appropriate HTTP parameters.
httpConn.setRequestProperty("Content-Length",
String.valueOf(b.length));
httpConn.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
httpConn.setRequestProperty("SOAPAction", SOAPAction);
httpConn.setRequestMethod("POST");
httpConn.setDoOutput(true);
httpConn.setDoInput(true);
OutputStream out = httpConn.getOutputStream();
//Write the content of the request to the outputstream of the HTTP Connection.
out.write(b);
out.close();
//Ready with sending the request.

//Read the response.
InputStreamReader isr = null;
if (httpConn.getResponseCode() == 200) {
  isr = new InputStreamReader(httpConn.getInputStream());
} else {
  isr = new InputStreamReader(httpConn.getErrorStream());
}

BufferedReader in = new BufferedReader(isr);

//Write the SOAP message response to a String.
while ((responseString = in.readLine()) != null) {
outputString = outputString + responseString;
}
//Parse the String output to a org.w3c.dom.Document and be able to reach every node with the org.w3c.dom API.
Document document = parseXmlFile(outputString); // Write a separate method to parse the xml input.
NodeList nodeLst = document.getElementsByTagName("<TagName of the element to be retrieved>");
String elementValue = nodeLst.item(0).getTextContent();
System.out.println(elementValue);

//Write the SOAP message formatted to the console.
String formattedSOAPResponse = formatXML(outputString); // Write a separate method to format the XML input.
System.out.println(formattedSOAPResponse);
return elementValue;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18618653" questionTitle="Binding hashmap with tableview (JavaFX)">
<Answer><![CDATA[public class TableCassaController<K,V> extends TableView<Map.Entry<K,V>> implements Initializable {
@FXML   private TableColumn<K, V> column1;
@FXML   private TableColumn<K, V> column2;


public TableCassaController(ObservableMap<K,V> map, String col1Name, String col2Name) {
    System.out.println("Costruttore table");
    TableColumn<Map.Entry<K, V>, K> column1 = new TableColumn<>(col1Name);
    column1.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Map.Entry<K, V>, K>, ObservableValue<K>>() {

        @Override
        public ObservableValue<K> call(TableColumn.CellDataFeatures<Map.Entry<K, V>, K> p) {
            // this callback returns property for just one cell, you can't use a loop here
            // for first column we use key
            return new SimpleObjectProperty<K>(p.getValue().getKey());
        }
    });

    TableColumn<Map.Entry<K, V>, V> column2 = new TableColumn<>(col2Name);
    column2.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Map.Entry<K, V>, V>, ObservableValue<V>>() {

        @Override
        public ObservableValue<V> call(TableColumn.CellDataFeatures<Map.Entry<K, V>, V> p) {
            // for second column we use value
            return new SimpleObjectProperty<V>(p.getValue().getValue());
        }
    });

    ObservableList<Map.Entry<K, V>> items = FXCollections.observableArrayList(map.entrySet());

    this.setItems(items);
    this.getColumns().setAll(column1, column2);

}]]></Answer>
<Answer><![CDATA[public class MapTableView extends Application {

    @Override
    public void start(Stage stage) {

        // sample data
        Map<String, String> map = new HashMap<>();
        map.put("one", "One");
        map.put("two", "Two");
        map.put("three", "Three");


        // use fully detailed type for Map.Entry<String, String> 
        TableColumn<Map.Entry<String, String>, String> column1 = new TableColumn<>("Key");
        column1.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Map.Entry<String, String>, String>, ObservableValue<String>>() {

            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<Map.Entry<String, String>, String> p) {
                // this callback returns property for just one cell, you can't use a loop here
                // for first column we use key
                return new SimpleStringProperty(p.getValue().getKey());
            }
        });

        TableColumn<Map.Entry<String, String>, String> column2 = new TableColumn<>("Value");
        column2.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<Map.Entry<String, String>, String>, ObservableValue<String>>() {

            @Override
            public ObservableValue<String> call(TableColumn.CellDataFeatures<Map.Entry<String, String>, String> p) {
                // for second column we use value
                return new SimpleStringProperty(p.getValue().getValue());
            }
        });

        ObservableList<Map.Entry<String, String>> items = FXCollections.observableArrayList(map.entrySet());
        final TableView<Map.Entry<String,String>> table = new TableView<>(items);

        table.getColumns().setAll(column1, column2);

        Scene scene = new Scene(table, 400, 400);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18585186" questionTitle="How to detect keys">
<Answer><![CDATA[public class KeyCombinationTableExample extends Application {

    public static void main(String[] args) {
        launch(KeyCombinationTableExample.class);
    }

    @Override
    public void start(Stage stage) throws Exception {
        final ObservableList<KeyCharacterCombination> items = FXCollections.observableArrayList();
        for (int i = 0; i < 110; i++) {
            items.add(null);
        }
        TableView<KeyCharacterCombination> table = new TableView<>(items);
        table.setEditable(true);
        final TableColumn<KeyCharacterCombination, KeyCharacterCombination> column = new TableColumn<>();
        column.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<KeyCharacterCombination, KeyCharacterCombination>, ObservableValue<KeyCharacterCombination>>() {
                                       @Override
                                       public ObservableValue<KeyCharacterCombination> call(TableColumn.CellDataFeatures<KeyCharacterCombination, KeyCharacterCombination> cellDataFeatures) {
                return new ReadOnlyObjectWrapper<>(cellDataFeatures.getValue());
        }
        });
        column.setCellFactory(new Callback<TableColumn<KeyCharacterCombination, KeyCharacterCombination>, TableCell<KeyCharacterCombination, KeyCharacterCombination>>() {
                                  @Override
                                  public TableCell<KeyCharacterCombination, KeyCharacterCombination> call(TableColumn<KeyCharacterCombination, KeyCharacterCombination> tableColumn) {
                final TableCell<KeyCharacterCombination, KeyCharacterCombination> cell = new TextFieldTableCell<KeyCharacterCombination, KeyCharacterCombination>() {
                    @Override
                    public void updateItem(KeyCharacterCombination keyCharacterCombination, boolean b) {
                        super.updateItem(keyCharacterCombination, b);
                        if (this.getItem() == null || b) {
                            setText(null);
                        } else {
                            StringBuilder sb = new StringBuilder();
                            if (keyCharacterCombination.getControl() == KeyCombination.ModifierValue.DOWN) {
                                sb.append("Ctrl + ");
                            }
                            if (keyCharacterCombination.getAlt() == KeyCombination.ModifierValue.DOWN) {
                                sb.append("Alt + ");
                            }
                            sb.append(keyCharacterCombination.getCharacter());
                            setText(sb.toString());
                        }
                    }
                };
                cell.setOnKeyPressed(new EventHandler<KeyEvent>() {
                    Set<KeyCombination.Modifier> keys = new HashSet<>();

                    @Override
                    public void handle(KeyEvent keyEvent) {
                        if (keyEvent.getCode() == KeyCode.CONTROL) {
                            keys.add(KeyCombination.CONTROL_DOWN);
                        } else if (keyEvent.getCode() == KeyCode.ALT) {
                            keys.add(KeyCombination.ALT_DOWN);
                        } else if (keyEvent.getCode().isLetterKey()) {
                            items.set(cell.getIndex(), new KeyCharacterCombination(keyEvent.getCode().getName(),
                                    keys.toArray(new KeyCombination.Modifier[keys.size()])));
                            keys.clear();
                        }
                    }
                });
                return cell;
        }
        });
        table.getColumns().add(column);
        stage.setScene(new Scene(table));
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[public class ShortCutDemo extends Application {

    private KeyEvent shortcutKeyEvent;
    private EventHandler selectedEventHandler;
    private List<EventHandler> eventHandlers;
    private HBox root;

    @Override
    public void start(Stage primaryStage) {

        root = new HBox(10);
        root.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                // Do not filter for TextFields
                if (event.getTarget() instanceof TextField) {
                    return;
                }
                if (isKeyEventsAreEqual(event, shortcutKeyEvent)) {
                    // then apply shortcut event
                    selectedEventHandler.handle(null);
                    event.consume();
                }
            }
        });

        eventHandlers = new ArrayList<EventHandler>();
        eventHandlers.add(new EventHandler() {
            @Override
            public void handle(Event event) {
                root.setStyle("-fx-background-color: lightgray");
            }
        });

        eventHandlers.add(new EventHandler() {
            @Override
            public void handle(Event event) {
                root.setSpacing(50);
            }
        });

        ChoiceBox cb = new ChoiceBox();
        cb.getItems().addAll("HBox background = gray", "HBox spacing = 50");
        cb.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
                selectedEventHandler = eventHandlers.get(newValue.intValue());
            }
        });
        cb.getSelectionModel().selectFirst(); // default value

        final TextField textField = new TextField();
        textField.setEditable(false);

        textField.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                if (event.getCode() == KeyCode.TAB) {
//                    Platform.runLater(new Runnable() {
//                        @Override
//                        public void run() {
//                            root.requestFocus();
//                        }
//                    });
                } else {
                    // Clear the previous text
                    textField.setText("");
                    // Process only desired key types
                    if (event.getCode().isLetterKey()
                            || event.getCode().isDigitKey()
                            || event.getCode().isFunctionKey()) {
                        String shortcut = event.getCode().getName();
                        if (event.isAltDown()) {
                            shortcut = "Alt + " + shortcut;
                        }
                        if (event.isControlDown()) {
                            shortcut = "Ctrl + " + shortcut;
                        }
                        if (event.isShiftDown()) {
                            shortcut = "Shift + " + shortcut;
                        }
                        textField.setText(shortcut);
                        shortcutKeyEvent = event;
                    } else {
                        shortcutKeyEvent = null;
                    }
                }
            }
        });

        Button button = new Button("Reset");
        button.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                textField.setText("");
                root.setSpacing(10);
                root.setStyle("-fx-background-color: white");
                shortcutKeyEvent = null;
            }
        });

        root.getChildren().addAll(new Label("Define a shortcut for "), cb, textField, button);
        Scene scene = new Scene(root, 900, 150);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private boolean isKeyEventsAreEqual(KeyEvent event1, KeyEvent event2) {
        return event1 != null
                && event2 != null
                && event1.getCode() == event2.getCode()
                && event1.isAltDown() == event2.isAltDown()
                && event1.isControlDown() == event2.isControlDown()
                && event1.isShiftDown() == event2.isShiftDown();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public class KeyboardExample extends Application{
 @Override
    public void start(final Stage stage) {
        final Keyboard keyboard = new Keyboard(new Key(KeyCode.A),
                                               new Key(KeyCode.S),
                                               new Key(KeyCode.D),
                                               new Key(KeyCode.F));

        final Scene scene = new Scene(new Group(keyboard.createNode()));
        stage.setScene(scene);
        stage.setTitle("Keyboard Example");
        stage.show();
    }

    public static void main(final String[] args) {
        launch(args);
    }

    private static final class Key {
        private final KeyCode keyCode;
        private final BooleanProperty pressedProperty;

        public Key(final KeyCode keyCode) {
            this.keyCode = keyCode;
            this.pressedProperty = new SimpleBooleanProperty(this, "pressed");
        }

        public KeyCode getKeyCode() {
            return keyCode;
        }

        public boolean isPressed() {
            return pressedProperty.get();
        }

        public void setPressed(final boolean value) {
            pressedProperty.set(value);
        }

        public Node createNode() {
            final StackPane keyNode = new StackPane();
            keyNode.setFocusTraversable(true);
            installEventHandler(keyNode);

            final Rectangle keyBackground = new Rectangle(50, 50);
            keyBackground.fillProperty().bind(
                    Bindings.when(pressedProperty)
                            .then(Color.RED)
                            .otherwise(Bindings.when(keyNode.focusedProperty())
                                               .then(Color.WHITE)
                                               .otherwise(Color.WHITE)));
            keyBackground.setStroke(Color.BLACK);
            keyBackground.setStrokeWidth(2);
            keyBackground.setArcWidth(12);
            keyBackground.setArcHeight(12);

            final Text keyLabel = new Text(keyCode.getName());
            keyLabel.setFont(Font.font("Arial", FontWeight.BOLD, 20));

            keyNode.getChildren().addAll(keyBackground, keyLabel);

            return keyNode;
        }

        private void installEventHandler(final Node keyNode) {
            // handler for enter key press / release events, other keys are
            // handled by the parent (keyboard) node handler
            final EventHandler<KeyEvent> keyEventHandler =
                    new EventHandler<KeyEvent>() {
                        public void handle(final KeyEvent keyEvent) {
                            if (keyEvent.getCode() == KeyCode.ENTER) {
                                setPressed(keyEvent.getEventType()
                                               == KeyEvent.KEY_PRESSED);

                                keyEvent.consume();
                            }
                        }
                    };

            keyNode.setOnKeyPressed(keyEventHandler);
            keyNode.setOnKeyReleased(keyEventHandler);
        }
    }

    private static final class Keyboard {
        private final Key[] keys;

        public Keyboard(final Key... keys) {
            this.keys = keys.clone();
        }

        public Node createNode() {
            final HBox keyboardNode = new HBox(6);
            keyboardNode.setPadding(new Insets(6));

            final List<Node> keyboardNodeChildren = keyboardNode.getChildren();
            for (final Key key: keys) {
                keyboardNodeChildren.add(key.createNode());
            }

            installEventHandler(keyboardNode);
            return keyboardNode;
        }

        private void installEventHandler(final Parent keyboardNode) {
            // handler for key pressed / released events not handled by
            // key nodes
            final EventHandler<KeyEvent> keyEventHandler =
                    new EventHandler<KeyEvent>() {
                        public void handle(final KeyEvent keyEvent) {
                            final Key key = lookupKey(keyEvent.getCode());
                            if (key != null) {
                                key.setPressed(keyEvent.getEventType()
                                                   == KeyEvent.KEY_PRESSED);

                                keyEvent.consume();
                            }
                        }
                    };

            keyboardNode.setOnKeyPressed(keyEventHandler);
            keyboardNode.setOnKeyReleased(keyEventHandler);

            keyboardNode.addEventHandler(KeyEvent.KEY_PRESSED,
                                         new EventHandler<KeyEvent>() {
                                             public void handle(
                                                     final KeyEvent keyEvent) {
                                                 handleFocusTraversal(
                                                         keyboardNode,
                                                         keyEvent);
                                             }
                                         });
        }

        private Key lookupKey(final KeyCode keyCode) {
            for (final Key key: keys) {
                if (key.getKeyCode() == keyCode) {
                    return key;
                }
            }
            return null;
        }

        private static void handleFocusTraversal(final Parent traversalGroup,
                                                 final KeyEvent keyEvent) {
            final Node nextFocusedNode;
            switch (keyEvent.getCode()) {
                case LEFT:
                    nextFocusedNode =
                            getPreviousNode(traversalGroup,
                                            (Node) keyEvent.getTarget());
                    keyEvent.consume();
                    break;

                case RIGHT:
                    nextFocusedNode =
                            getNextNode(traversalGroup,
                                        (Node) keyEvent.getTarget());
                    keyEvent.consume();
                    break;

                default:
                    return;
            }

            if (nextFocusedNode != null) {
                nextFocusedNode.requestFocus();
            }
        }

        private static Node getNextNode(final Parent parent,
                                        final Node node) {
            final Iterator<Node> childIterator =
                    parent.getChildrenUnmodifiable().iterator();

            while (childIterator.hasNext()) {
                if (childIterator.next() == node) {
                    return childIterator.hasNext() ? childIterator.next()
                                                   : null;
                }
            }

            return null;
        }

        private static Node getPreviousNode(final Parent parent,
                                            final Node node) {
            final Iterator<Node> childIterator =
                    parent.getChildrenUnmodifiable().iterator();
            Node lastNode = null;

            while (childIterator.hasNext()) {
                final Node currentNode = childIterator.next();
                if (currentNode == node) {
                    return lastNode;
                }

                lastNode = currentNode;
            }

            return null;
        }
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18552005" questionTitle="Is there a concise way to iterate over a stream with indices in Java 8?">
<Answer><![CDATA[public class WithIndex<T> {
    private int index;
    private T value;

    WithIndex(int index, T value) {
        this.index = index;
        this.value = value;
    }

    public int index() {
        return index;
    }

    public T value() {
        return value;
    }

    @Override
    public String toString() {
        return value + "(" + index + ")";
    }

    public static <T> Function<T, WithIndex<T>> indexed() {
        return new Function<T, WithIndex<T>>() {
            int index = 0;
            @Override
            public WithIndex<T> apply(T t) {
                return new WithIndex<>(index++, t);
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[String[] names = { "Sam", "Pamela", "Dave", "Pascal", "Erik" };
ImmutableList<String> expected = Lists.immutable.with("Erik");
Predicate<Pair<String, Integer>> predicate =
    pair -> pair.getOne().length() <= pair.getTwo() + 1;

// JDK Types
List<String> strings1 = ArrayIterate.zipWithIndex(names)
    .collectIf(predicate, Pair::getOne);
Assert.assertEquals(expected, strings1);

List<String> list = Arrays.asList(names);
List<String> strings2 = ListAdapter.adapt(list)
    .zipWithIndex()
    .collectIf(predicate, Pair::getOne);
Assert.assertEquals(expected, strings2);

// Eclipse Collections types
MutableList<String> mutableNames = Lists.mutable.with(names);
MutableList<String> strings3 = mutableNames.zipWithIndex()
    .collectIf(predicate, Pair::getOne);
Assert.assertEquals(expected, strings3);

ImmutableList<String> immutableNames = Lists.immutable.with(names);
ImmutableList<String> strings4 = immutableNames.zipWithIndex()
    .collectIf(predicate, Pair::getOne);
Assert.assertEquals(expected, strings4);

MutableList<String> strings5 = mutableNames.asLazy()
    .zipWithIndex()
    .collectIf(predicate, Pair::getOne, Lists.mutable.empty());
Assert.assertEquals(expected, strings5);]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.util.function.*;
import java.util.stream.Collector;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import static java.util.Objects.requireNonNull;


public class CollectionUtils {
    private CollectionUtils() { }

    /**
     * Converts an {@link java.util.Iterator} to {@link java.util.stream.Stream}.
     */
    public static <T> Stream<T> iterate(Iterator<? extends T> iterator) {
        int characteristics = Spliterator.ORDERED | Spliterator.IMMUTABLE;
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, characteristics), false);
    }

    /**
     * Zips the specified stream with its indices.
     */
    public static <T> Stream<Map.Entry<Integer, T>> zipWithIndex(Stream<? extends T> stream) {
        return iterate(new Iterator<Map.Entry<Integer, T>>() {
            private final Iterator<? extends T> streamIterator = stream.iterator();
            private int index = 0;

            @Override
            public boolean hasNext() {
                return streamIterator.hasNext();
            }

            @Override
            public Map.Entry<Integer, T> next() {
                return new AbstractMap.SimpleImmutableEntry<>(index++, streamIterator.next());
            }
        });
    }

    /**
     * Returns a stream consisting of the results of applying the given two-arguments function to the elements of this stream.
     * The first argument of the function is the element index and the second one - the element value. 
     */
    public static <T, R> Stream<R> mapWithIndex(Stream<? extends T> stream, BiFunction<Integer, ? super T, ? extends R> mapper) {
        return zipWithIndex(stream).map(entry -> mapper.apply(entry.getKey(), entry.getValue()));
    }

    public static void main(String[] args) {
        String[] names = {"Sam", "Pamela", "Dave", "Pascal", "Erik"};

        System.out.println("Test zipWithIndex");
        zipWithIndex(Arrays.stream(names)).forEach(entry -> System.out.println(entry));

        System.out.println();
        System.out.println("Test mapWithIndex");
        mapWithIndex(Arrays.stream(names), (Integer index, String name) -> index+"="+name).forEach((String s) -> System.out.println(s));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18539642" questionTitle="ProgressBar Animated Javafx">
<Answer><![CDATA[import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.css.PseudoClass;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

/**
 * Displays progress on a striped progress bar
 */
public class StripedProgress extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(final Stage stage) {
        ProgressBar bar = new ProgressBar(0);
        bar.setPrefSize(200, 24);

        Timeline task = new Timeline(
                new KeyFrame(
                        Duration.ZERO,
                        new KeyValue(bar.progressProperty(), 0)
                ),
                new KeyFrame(
                        Duration.seconds(2),
                        new KeyValue(bar.progressProperty(), 1)
                )
        );

        // Set the max status
        int maxStatus = 12;
        // Create the Property that holds the current status count
        IntegerProperty statusCountProperty = new SimpleIntegerProperty(1);
        // Create the timeline that loops the statusCount till the maxStatus
        Timeline timelineBar = new Timeline(
                new KeyFrame(
                        // Set this value for the speed of the animation
                        Duration.millis(300),
                        new KeyValue(statusCountProperty, maxStatus)
                )
        );
        // The animation should be infinite
        timelineBar.setCycleCount(Timeline.INDEFINITE);
        timelineBar.play();
        // Add a listener to the statusproperty
        statusCountProperty.addListener((ov, statusOld, statusNewNumber) -> {
            int statusNew = statusNewNumber.intValue();
            // Remove old status pseudo from progress-bar
            bar.pseudoClassStateChanged(PseudoClass.getPseudoClass("status" + statusOld.intValue()), false);
            // Add current status pseudo from progress-bar
            bar.pseudoClassStateChanged(PseudoClass.getPseudoClass("status" + statusNew), true);
        });

        Button button = new Button("Go!");
        button.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                task.playFromStart();
            }
        });

        VBox layout = new VBox(10);
        layout.getChildren().setAll(
                bar,
                button
        );
        layout.setPadding(new Insets(10));
        layout.setAlignment(Pos.CENTER);

        layout.getStylesheets().add(
                getClass().getResource(
                        "/styles/striped-progress.css"
                ).toExternalForm()
        );

        stage.setScene(new Scene(layout));
        stage.show();
    }
}]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.event.*;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

/** Displays progress on a striped progress bar */
public class StripedProgress extends Application {
  public static void main(String[] args) { launch(args); }

  @Override public void start(final Stage stage) {
    ProgressBar bar = new ProgressBar(0);
    bar.setPrefSize(200, 24);

    Timeline task = new Timeline(
        new KeyFrame(
                Duration.ZERO,       
                new KeyValue(bar.progressProperty(), 0)
        ),
        new KeyFrame(
                Duration.seconds(2), 
                new KeyValue(bar.progressProperty(), 1)
        )
    );

    Button button = new Button("Go!");
    button.setOnAction(new EventHandler<ActionEvent>() {
        @Override public void handle(ActionEvent actionEvent) {
            task.playFromStart();
        }
    });

    VBox layout = new VBox(10);
    layout.getChildren().setAll(
        bar,
        button
    );
    layout.setPadding(new Insets(10));
    layout.setAlignment(Pos.CENTER);

    layout.getStylesheets().add(
        getClass().getResource(
            "striped-progress.css"
        ).toExternalForm()
    );

    stage.setScene(new Scene(layout));
    stage.show();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18411005" questionTitle="Execute Jar file as standalone application">
<Answer><![CDATA[<plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.3</version>
            <executions>
                <execution>
                    <goals>
                        <goal>attached</goal>
                    </goals>
                    <phase>package</phase>
                    <configuration>
                        <descriptorRefs>
                            <descriptorRef>jar-with-dependencies</descriptorRef>
                        </descriptorRefs>
                        <archive>
                            <manifest>
                                <mainClass>com.package.to.my.Main</mainClass>
                            </manifest>
                        </archive>
                    </configuration>
                </execution>
            </executions>
        </plugin>]]></Answer>
<Answer><![CDATA[<plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>2.4</version>
            <configuration>
                <archive>
                    <manifest>
                        <addClasspath>true</addClasspath>
                        <classpathPrefix>lib/</classpathPrefix>
                        <mainClass>my.package.App</mainClass>               
                    </manifest>           
                </archive>
                <executions>
                    <execution>
                        <id>default-package</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </configuration>
        </plugin>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18321167" questionTitle="Vertical menu for configuration panel">
<Answer><![CDATA[<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity"     minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1">
   <children>
  <Accordion layoutX="14.0" layoutY="32.0">
    <panes>
      <TitledPane animated="false" text="untitled 1">
        <content>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
        </content>
      </TitledPane>
      <TitledPane animated="false" text="untitled 2">
        <content>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
        </content>
      </TitledPane>
      <TitledPane animated="false" text="untitled 3">
        <content>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" />
        </content>
      </TitledPane>
    </panes>
  </Accordion>
 </children>
</AnchorPane>]]></Answer>
<Answer><![CDATA[package verticalmenubar;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Accordion;
import javafx.scene.control.Button;
import javafx.scene.control.TabPane;
import javafx.scene.control.TitledPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

/**
 *
 * @author reegan
 */
public class VerticalMenuBar extends Application {
    public static TabPane tabPanel;
    @Override
    public void start(Stage primaryStage) {
        BorderPane root = buildView();
        Scene scene = new Scene(root, 300, 250);        
        primaryStage.setTitle("Hello World!");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    BorderPane buildView() {
        BorderPane root = new BorderPane();
        tabPanel = new TabPane();
        root.setCenter(tabPanel);
        Accordion accordion = new Accordion();
        Pane pane = null;
        TitledPane tiledPane;
        General1Bar general1 = new General1Bar();
        pane= general1.getView();
        tiledPane = new TitledPane("General1", pane);
        accordion.getPanes().add(tiledPane);

        General2Bar general2 = new General2Bar();
        pane = general2.getView();
         tiledPane = new TitledPane("General2", pane);
        accordion.getPanes().add(tiledPane);

        General3Bar general3 = new General3Bar();
        pane = general3.getView();
        tiledPane = new TitledPane("General3", pane);
        accordion.getPanes().add(tiledPane);

        root.setLeft(accordion);
        return root;
    }



    public static void main(String[] args) {
        launch(args);
    }
}

class General1Bar {

    public Pane getView() {
        Pane p = new Pane();
        Button button = new Button("One");
        Button button1 = new Button("Two");
        VBox vBox = new VBox(5);
        vBox.getChildren().addAll(button,button1);
        p.getChildren().addAll(vBox);
        return p;
    }

}

class General2Bar {
     public Pane getView() {
        Pane p = new Pane();
        Button button = new Button("One");
        Button button1 = new Button("Two");
        VBox vBox = new VBox(5);
        vBox.getChildren().addAll(button,button1);
        p.getChildren().addAll(vBox);
        return p;
    }

}

class General3Bar {
    public Pane getView() {
        Pane p = new Pane();
        Button button = new Button("One");
        Button button1 = new Button("Two");
        VBox vBox = new VBox(5);
        vBox.getChildren().addAll(button,button1);
        p.getChildren().addAll(vBox);
        return p;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18267269" questionTitle="Correct way to do an EntityManager query during Hibernate Validation">
<Answer><![CDATA[@Stateful // yes stateful, need the same instance across method invocations
@ValidatePassword
public class UserDao {

    @PersistenceContext private EntityManager em;
    private String password;

    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean isValidPassword() {
        // use the em to find the old passwords
        // check that the submitted password is valid
    }

    public void savePassword() {
        // find the user
        // set the user's now valid password
    }
}]]></Answer>
<Answer><![CDATA[package com.myvalidator;

public class ConstraintInjectableValidatorFactory implements ConstraintValidatorFactory {

    private static BeanManager beanManager;

    @SuppressWarnings(value="unchecked")
    @Override
    public <T extends ConstraintValidator<?, ?>> T getInstance(Class<T> clazz) {
        // lazily initialize the beanManager
        if (beanManager == null) {
            try {
                beanManager = (BeanManager) InitialContext.doLookup("java:comp/BeanManager");
            } catch (NamingException e) {
                // TODO what's the best way to handle this?
                throw new RuntimeException(e);
            }
        }

        T result = null;

        Bean<T> bean = (Bean<T>) beanManager.resolve(beanManager.getBeans(clazz));
        // if the bean/validator specified by clazz is not null that means it has
        // injection points so get it from the beanManager and return it. The validator
        // that comes from the beanManager will already be injected.
        if (bean != null) {
            CreationalContext<T> context = beanManager.createCreationalContext(bean);
            if (context != null) {
                result = (T) beanManager.getReference(bean, clazz, context);
            }
        // the bean/validator was not in the beanManager meaning it has no injection
        // points so go ahead and just instantiate a new instance and return it
        } else {
            try {
                result = clazz.newInstance();
            } catch (Throwable t) {
                throw new RuntimeException(t);
            }
        }

        return result;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18246116" questionTitle="Uploaded files are deleted using Apache Commons FileupLoad and Spring MVC">
<Answer><![CDATA[if(multipartFile != null && multipartFile.getSize() > 0) {
    // Upload to temp directory
    File uploadFile = new File("/tmp/" + multipartFile.getOriginalFilename());
    FileOutputStream fos = null;
    try {
        uploadFile.createNewFile();
        fos = new FileOutputStream(uploadFile);
        IOUtils.copy(multipartFile.getInputStream(), fos);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (fos != null) {
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[import org.springframework.web.multipart.MultipartFile;

public class UploadForm {
    private MultipartFile multipartFile;

    public MultipartFile getMultipartFile() {
        return multipartFile;
    }
    public void setMultipartFile(MultipartFile multipartFile) {
        this.multipartFile = multipartFile;
   }

}


@RequestMapping(value="uploadFile.request", method=RequestMethod.POST)
protected String uploadFile {@ModelAttribute("uploadForm")UploadForm uploadForm, BindingResult result
    if(!result.hasErrors()) {
        MultipartFile multipartFile = uploadForm.getMultipartFile();

        // Is Existing on request?
        if (multipartFile == null) {
            throw new RuntimeException("The file is not existing.");
        }
        // Is file empty?
        if (multipartFile.isEmpty()) {
            throw new RuntimeException("File has no content.");
        }
        // Is it of selected type?
        if (!FilenameUtils.isExtension(multipartFile.getOriginalFilename(), new String[]{"doc", "docx"})) {
            throw new RuntimeException("File has a not accepted type.");
        }

        // Absolute file path to the temp directory
        String tempDirectoryPath = context.getInitParameter("TempDirectoryPath");
        // Absolute file path to the upload directory
        String uploadDirectoryPath = context.getInitParameter("UploadDirectoryPath");

        // Upload to temp directory
        File uploadFile = new File(tempDirectoryPath + File.separator + fileName);
        multipartFile.transferTo(uploadFile); // <= Transfer content method!!

        // Move the file to its final destination
        FileUtils.moveFileToDirectory(uploadFile, new File(uploadDirectoryPath), true);

    return "nextPage";
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18207116" questionTitle="Displaying pdf in JavaFX">
<Answer><![CDATA[package de.vogella.itext.write;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


public class FirstPdf {
  private static String FILE = "c:/temp/FirstPdf.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);

  public static void main(String[] args) {
    try {
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("My first PDF");
    document.addSubject("Using iText");
    document.addKeywords("Java, PDF, iText");
    document.addAuthor("Lars Vogel");
    document.addCreator("Lars Vogel");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Title of the document", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    addEmptyLine(preface, 3);
    preface.add(new Paragraph("This document describes something which is very important ",
        smallBold));

    addEmptyLine(preface, 8);

    preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
        redFont));

    document.add(preface);
    // Start a new page
    document.newPage();
  }

  private static void addContent(Document document) throws DocumentException {
    Anchor anchor = new Anchor("First Chapter", catFont);
    anchor.setName("First Chapter");

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

    Paragraph subPara = new Paragraph("Subcategory 1", subFont);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Hello"));

    subPara = new Paragraph("Subcategory 2", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Paragraph 1"));
    subCatPart.add(new Paragraph("Paragraph 2"));
    subCatPart.add(new Paragraph("Paragraph 3"));

    // add a list
    createList(subCatPart);
    Paragraph paragraph = new Paragraph();
    addEmptyLine(paragraph, 5);
    subCatPart.add(paragraph);

    // add a table
    createTable(subCatPart);

    // now add all this to the document
    document.add(catPart);

    // Next section
    anchor = new Anchor("Second Chapter", catFont);
    anchor.setName("Second Chapter");

    // Second parameter is the number of the chapter
    catPart = new Chapter(new Paragraph(anchor), 1);

    subPara = new Paragraph("Subcategory", subFont);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("This is a very important message"));

    // now add all this to the document
    document.add(catPart);

  }

  private static void createTable(Section subCatPart)
      throws BadElementException {
    PdfPTable table = new PdfPTable(3);

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);

    PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 2"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 3"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    table.setHeaderRows(1);

    table.addCell("1.0");
    table.addCell("1.1");
    table.addCell("1.2");
    table.addCell("2.1");
    table.addCell("2.2");
    table.addCell("2.3");

    subCatPart.add(table);

  }

  private static void createList(Section subCatPart) {
    List list = new List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
}]]></Answer>
<Answer><![CDATA[public class WebController implements Initializable {

    @FXML
    private WebView web;

    @FXML
    private Button btn;

    public void initialize(URL location, ResourceBundle resources) {
        WebEngine engine = web.getEngine();
        String url = getClass().getResource("/web/viewer.html").toExternalForm();

        // connect CSS styles to customize pdf.js appearance
        engine.setUserStyleSheetLocation(getClass().getResource("/web.css").toExternalForm());

        engine.setJavaScriptEnabled(true);
        engine.load(url);

        engine.getLoadWorker()
                .stateProperty()
                .addListener((observable, oldValue, newValue) -> {
                    // to debug JS code by showing console.log() calls in IDE console
                    JSObject window = (JSObject) engine.executeScript("window");
                    window.setMember("java", new JSLogListener());
                    engine.executeScript("console.log = function(message){ java.log(message); };");

                    // this pdf file will be opened on application startup
                    if (newValue == Worker.State.SUCCEEDED) {
                        try {
                            // readFileToByteArray() comes from commons-io library
                            byte[] data = FileUtils.readFileToByteArray(new File("/path/to/file"));
                            String base64 = Base64.getEncoder().encodeToString(data);
                            // call JS function from Java code
                            engine.executeScript("openFileFromBase64('" + base64 + "')");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });

        // this file will be opened on button click
        btn.setOnAction(actionEvent -> {
            try {
                byte[] data = FileUtils.readFileToByteArray(new File("/path/to/another/file"));
                String base64 = Base64.getEncoder().encodeToString(data);
                engine.executeScript("openFileFromBase64('" + base64 + "')");
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[// get file path.
FileChooser fc = new FileChooser();
fc.setTitle("Open PDF file...");
fc.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF Files", "*.pdf"));     
File f = fc.showOpenDialog(stage.getOwner());
String filename = file.getAbsolutePath();

// open file.
PdfDecoder pdf = new PdfDecoder();
pdf.openPdfFile(filename);
showPage(1);
pdf.closePdfFile();

. . . 

/**
 * Update the GUI to show a specified page.
 * @param page 
 */
private void showPage(int page) {

    //Check in range
    if (page > pdf.getPageCount())
        return;
    if (page < 1)
        return;

    //Store
    pageNumber = page;


    //Show/hide buttons as neccessary
    if (page == pdf.getPageCount())
        next.setVisible(false);
    else
        next.setVisible(true);

    if (page == 1)
        back.setVisible(false);
    else
        back.setVisible(true);


    //Calculate scale
    int pW = pdf.getPdfPageData().getCropBoxWidth(page);
    int pH = pdf.getPdfPageData().getCropBoxHeight(page);

    Dimension s = Toolkit.getDefaultToolkit().getScreenSize();

    s.width -= 100;
    s.height -= 100;

    double xScale = (double)s.width / pW;
    double yScale = (double)s.height / pH;
    double scale = xScale < yScale ? xScale : yScale;

    //Work out target size
    pW *= scale;
    pH *= scale;

    //Get image and set
    Image i = getPageAsImage(page,pW,pH);
    imageView.setImage(i);

    //Set size of components
    imageView.setFitWidth(pW);
    imageView.setFitHeight(pH);
    stage.setWidth(imageView.getFitWidth()+2);
    stage.setHeight(imageView.getFitHeight()+2);
    stage.centerOnScreen();
}

/**
 * Wrapper for usual method since JFX has no BufferedImage support.
 * @param page
 * @param width
 * @param height
 * @return 
 */
private Image getPageAsImage(int page, int width, int height) {

    BufferedImage img;
    try {
        img = pdf.getPageAsImage(page);

        //Use deprecated method since there's no real alternative 
        //(for JavaFX 2.2+ can use SwingFXUtils instead).
        if (Image.impl_isExternalFormatSupported(BufferedImage.class))
            return javafx.scene.image.Image.impl_fromExternalImage(img);

    } catch(Exception e) {
        e.printStackTrace();
    }

    return null;
}

/**
 * ===========================================
 * Java Pdf Extraction Decoding Access Library
 * ===========================================
 *
 * Project Info:  http://www.jpedal.org
 * (C) Copyright 1997-2008, IDRsolutions and Contributors.
 *
 *  This file is part of JPedal
 *
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


 *
 * ---------------
 * JPedalFX.java
 * ---------------
 */]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18198176" questionTitle="Java 8 Lambda function that throws exception?">
<Answer><![CDATA[import java.io.FileWriter;
import java.io.IOException;

//lambda expressions and the execute around method (EAM) pattern to
//manage resources

public class FileWriterEAM  {
  private final FileWriter writer;

  private FileWriterEAM(final String fileName) throws IOException {
    writer = new FileWriter(fileName);
  }
  private void close() throws IOException {
    System.out.println("close called automatically...");
    writer.close();
  }
  public void writeStuff(final String message) throws IOException {
    writer.write(message);
  }
  //...

  public static void use(final String fileName, final UseInstance<FileWriterEAM, IOException> block) throws IOException {

    final FileWriterEAM writerEAM = new FileWriterEAM(fileName);    
    try {
      block.accept(writerEAM);
    } finally {
      writerEAM.close();
    }
  }

  public static void main(final String[] args) throws IOException {

    FileWriterEAM.use("eam.txt", writerEAM -> writerEAM.writeStuff("sweet"));

    FileWriterEAM.use("eam2.txt", writerEAM -> {
        writerEAM.writeStuff("how");
        writerEAM.writeStuff("sweet");      
      });

    FileWriterEAM.use("eam3.txt", FileWriterEAM::writeIt);     

  }


 void writeIt() throws IOException{
     this.writeStuff("How ");
     this.writeStuff("sweet ");
     this.writeStuff("it is");

 }

}]]></Answer>
<Answer><![CDATA[public final class Throwing {
    private Throwing() {}

    @Nonnull
    public static <T> Consumer<T> rethrow(@Nonnull final ThrowingConsumer<T> consumer) {
        return consumer;
    }

    /**
     * The compiler sees the signature with the throws T inferred to a RuntimeException type, so it
     * allows the unchecked exception to propagate.
     * 
     * http://www.baeldung.com/java-sneaky-throws
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public static <E extends Throwable> void sneakyThrow(@Nonnull Throwable ex) throws E {
        throw (E) ex;
    }

}]]></Answer>
<Answer><![CDATA[public final class LambdaExceptionUtil {

    @FunctionalInterface
    public interface Function_WithExceptions<T, R, E extends Exception> {
        R apply(T t) throws E;
    }

    /**
     * .map(rethrowFunction(name -> Class.forName(name))) or .map(rethrowFunction(Class::forName))
     */
    public static <T, R, E extends Exception> Function<T, R> rethrowFunction(Function_WithExceptions<T, R, E> function) throws E  {
        return t -> {
            try {
                return function.apply(t);
            } catch (Exception exception) {
                throwActualException(exception);
                return null;
            }
        };
    }

    @SuppressWarnings("unchecked")
    private static <E extends Exception> void throwActualException(Exception exception) throws E {
        throw (E) exception;
    }

}

public class LambdaExceptionUtilTest {

    @Test
    public void testFunction() throws MyTestException {
        List<Integer> sizes = Stream.of("ciao", "hello").<Integer>map(rethrowFunction(s -> transform(s))).collect(toList());
        assertEquals(2, sizes.size());
        assertEquals(4, sizes.get(0).intValue());
        assertEquals(5, sizes.get(1).intValue());
    }

    private Integer transform(String value) throws MyTestException {
        if(value==null) {
            throw new MyTestException();
        }
        return value.length();
    }

    private static class MyTestException extends Exception { }
}]]></Answer>
<Answer><![CDATA[public interface ThrowableFunction<A, B> {
    B apply(A a) throws Exception;
}

public abstract class Try<A> {

    public static boolean isSuccess(Try tryy) {
        return tryy instanceof Success;
    }

    public static <A, B> Function<A, Try<B>> tryOf(ThrowableFunction<A, B> function) {
        return a -> {
            try {
                B result = function.apply(a);
                return new Success<B>(result);
            } catch (Exception e) {
                return new Failure<>(e);
            }
        };
    }

    public abstract boolean isSuccess();

    public boolean isError() {
        return !isSuccess();
    }

    public abstract A getResult();

    public abstract Exception getError();
}

public class Success<A> extends Try<A> {

    private final A result;

    public Success(A result) {
        this.result = result;
    }

    @Override
    public boolean isSuccess() {
        return true;
    }

    @Override
    public A getResult() {
        return result;
    }

    @Override
    public Exception getError() {
        return new UnsupportedOperationException();
    }

    @Override
    public boolean equals(Object that) {
        if(!(that instanceof Success)) {
            return false;
        }
        return Objects.equal(result, ((Success) that).getResult());
    }
}

public class Failure<A> extends Try<A> {

    private final Exception exception;

    public Failure(Exception exception) {
        this.exception = exception;
    }

    @Override
    public boolean isSuccess() {
        return false;
    }

    @Override
    public A getResult() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Exception getError() {
        return exception;
    }
}]]></Answer>
<Answer><![CDATA[public void frankTest() {
    int pageId= -1;

    List<Book> users= null;
    try {
        //Does Not Compile:  Object page=DatabaseConnection.getSpringConnection().queryForObject("SELECT * FROM bookmark_page", (rw, n) -> new Portal(rw.getInt("id"), "", users.parallelStream().filter(uu -> uu.getVbid() == rw.getString("user_id")).findFirst().get(), rw.getString("name")));

        //Compiles:
        Object page= DatabaseConnection.getSpringConnection().queryForObject("SELECT * FROM bookmark_page", (rw, n) -> { 
            try {
                final Book bk= users.stream().filter(bp -> { 
                    String name= null;
                    try {
                        name = rw.getString("name");
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    return bp.getTitle().equals(name); 
                }).limit(1).collect(Collectors.toList()).get(0);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return new Portal(rw.getInt("id"), "", users.get(0), rw.getString("name")); 
        } );
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}]]></Answer>
<Answer><![CDATA[//  Don't use this pattern with FileReader, it's meant to be an
//  example.  FileReader is a Closeable resource and as such should
//  be managed in a try-with-resources block or in another safe
//  manner that will make sure it is closed properly.

//  This will not compile as the FileReader constructor throws
//  an IOException.
    Function<String, FileReader> sToFr =
        (fn) -> new FileReader(Paths.get(fn).toFile());

// Alternative, this will compile.
    Function<String, CheckedValue<FileReader>> sToFr = (fn) -> {
        return CheckedValue.from (
            () -> new FileReader(Paths.get("/home/" + f).toFile()));
    };

// Single record usage
    // The call to get() will propagate the checked exception if it exists.
    FileReader readMe = pToFr.apply("/home/README").get();


// List of records usage
    List<String> paths = ...; //a list of paths to files
    Collection<CheckedValue<FileReader>> frs =
        paths.stream().map(pToFr).collect(Collectors.toList());

// Find out if creation of a file reader failed.
    boolean anyErrors = frs.stream()
        .filter(f -> f.getException().isPresent())
        .findAny().isPresent();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18189337" questionTitle="Inject HttpServletRequest in CDI SessionScoped bean">
<Answer><![CDATA[import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Produces;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestEvent;
import javax.servlet.ServletRequestListener;
import javax.servlet.annotation.WebListener;
import javax.servlet.http.HttpServletRequest;

@WebListener
public class CDIServletRequestProducingListener implements ServletRequestListener {

private static ThreadLocal<ServletRequest> SERVLET_REQUESTS = new ThreadLocal<ServletRequest>();

@Override
public void requestInitialized(ServletRequestEvent sre) {
    SERVLET_REQUESTS.set(sre.getServletRequest());
}

@Override
public void requestDestroyed(ServletRequestEvent sre) {
    SERVLET_REQUESTS.remove();
}

@RequestScoped
@Produces
private HttpServletRequest obtainHttp() {
    ServletRequest servletRequest = SERVLET_REQUESTS.get();
    if (servletRequest instanceof HttpServletRequest) {
        return (HttpServletRequest) servletRequest;
    } else {
        throw new RuntimeException("There is no HttpServletRequest avaible for injection");
    }
}]]></Answer>
<Answer><![CDATA[import javax.enterprise.inject.Produces;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestEvent;
import javax.servlet.ServletRequestListener;
import javax.servlet.annotation.WebListener;

@WebListener
public class CDIServletRequestProducingListener implements ServletRequestListener {

    private static ThreadLocal<ServletRequest> SERVLET_REQUESTS = new ThreadLocal<>();

    @Override
    public void requestInitialized(ServletRequestEvent sre) {
        SERVLET_REQUESTS.set(sre.getServletRequest());
    }

    @Override
    public void requestDestroyed(ServletRequestEvent sre) {
        SERVLET_REQUESTS.remove();
    }

    @Produces
    private ServletRequest obtain() {
        return SERVLET_REQUESTS.get();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18176245" questionTitle="Get mouse position on node relative to it's coordinates and transforms">
<Answer><![CDATA[@Override
public void start(Stage primaryStage) throws Exception {
    VBox root = new VBox();

    Rectangle rect = new Rectangle(20, 20, Color.BLUE);
    rect.setOnMouseMoved(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent arg0) {
            if(arg0.getEventType() == MouseEvent.MOUSE_MOVED){
                System.out.println("Rect : " + arg0.getX() + "," + arg0.getY());
            }

        }
    });
    root.getChildren().add(rect);  
    root.getChildren().add(new Circle(20, Color.RED));
    //root.rotateProperty().set(30);
    root.getTransforms().add(RotateBuilder.create().angle(30).pivotX(0).pivotY(100).pivotZ(100).build());
    root.setStyle("-fx-border-color: black; -fx-border-width:5; ");

    root.setOnMouseMoved(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent arg0) {
            if(arg0.getEventType() == MouseEvent.MOUSE_MOVED){
                System.out.println(arg0.getX() + "," + arg0.getY());
            }

        }
    });

    Scene scene = new Scene(root, 200, 500);
    primaryStage.setTitle("Rotation Coordinates Example");
    primaryStage.setScene(scene);
    primaryStage.show();

}

public static void main(String[] args){
    Application.launch(args);
}
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.geometry.Point3D;
import javafx.scene.PerspectiveCamera;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.RotateBuilder;
import javafx.stage.Stage;


public class JFXRotationXOrds  extends Application{

    @Override
    public void start(Stage primaryStage) throws Exception {
        VBox root = new VBox();
        final Rotate rotate = RotateBuilder.create().angle(80).pivotX(100).pivotY(100).pivotZ(0).axis(new Point3D(1,0,0)).build();
        root.getTransforms().add(rotate);
        root.setStyle("-fx-border-color: black; -fx-border-width:5; ");

        root.setOnMouseMoved(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent arg0) {
                if(arg0.getEventType() == MouseEvent.MOUSE_MOVED){
                    System.out.println(arg0.getSceneX() + "," + arg0.getSceneY());
                }
            }
        });

        Scene scene = new Scene(root, 200, 500);
        PerspectiveCamera camera = new PerspectiveCamera();
        scene.setCamera(camera);
        primaryStage.setTitle("BorderPane Example");
        primaryStage.setScene(scene);
        primaryStage.show();

    }

    public static void main(String[] args){
        Application.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18026706" questionTitle="Chart with inverted y axis">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<HBox         
    prefHeight="600.0" 
    prefWidth="800.0" 
    xmlns:fx="http://javafx.com/fxml/1">    

    <javafx.scene.chart.LineChart 
        fx:id="chart" >
        <xAxis >
            <javafx.scene.chart.NumberAxis 
                label="X Axis"
                lowerBound="0.01"
                upperBound="100"
                tickUnit="10"
                autoRanging="false" /> 
        </xAxis>
        <yAxis> 
            <javafx.scene.chart.NumberAxis 
                    label="Y Axis"
                    lowerBound="100"
                    upperBound="0.001"
                    tickUnit="10"
                    autoRanging="false"
                />
        </yAxis>
    </javafx.scene.chart.LineChart>            
</Hbox>]]></Answer>
<Answer><![CDATA[@Override
protected void layoutChildren() {
    final Side side = getSide();
    boolean isHorisontal = null == side || side.isHorizontal();
    this.offset = isHorisontal ? getWidth() : getHeight();
    super.layoutChildren();
    if (inversed) {
        double prevEnd = isHorisontal ? offset + getTickLabelGap() : 0;
        for (TickMark m : getTickMarks()) {
            double position = m.getPosition();
            try {
                final Text textNode = (Text) textNodeField.get(m);
                final Bounds bounds = textNode.getLayoutBounds();
                if (0 <= position && position <= offset)
                    if (isHorisontal) {
                        textNode.setVisible(position < prevEnd);
                        prevEnd = position - (bounds.getWidth() + getTickLabelGap());
                    } else {
                        textNode.setVisible(position > prevEnd);
                        prevEnd = position + (bounds.getHeight() + getTickLabelGap());
                    }
            } catch (IllegalAccessException ignored) {
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="18007212" questionTitle="How to HIGHLY restrict users with &quot;specific roles&quot; to access the application from &quot;a certain place&quot;?">
<Answer><![CDATA[public class TestFilter implements Filter{ 

     public void destroy() {}  
     public void init(FilterConfig arg0) throws ServletException {} 

     public void doFilter(ServletRequest request, ServletResponse response, FilterChain        filter) throws IOException, ServletException 
     {  
        HttpServletRequest req = (HttpServletRequest) request;  
        HttpServletResponse res = (HttpServletResponse) response;  

        IpAddressMatcher matcher = new IpAddressMatcher("192.168.1.0/24");

        try {
            if(!matcher.matches(req.getHeader("X-Forwarded-For"))){
               res.sendRedirect("AnotherPage.jsp");  
            }
        } catch (UnsupportedOperationException e) {
            //Handle IT
        }
     }     

}]]></Answer>
<Answer><![CDATA[package com.mkyong;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;

public class App{

   public static void main(String[] args){

    InetAddress ip;
    try {

        ip = InetAddress.getLocalHost();
        System.out.println("Current IP address : " + ip.getHostAddress());

        NetworkInterface network = NetworkInterface.getByInetAddress(ip);

        byte[] mac = network.getHardwareAddress();

        System.out.print("Current MAC address : ");

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mac.length; i++) {
            sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));        
        }
        System.out.println(sb.toString());

    } catch (UnknownHostException e) {

        e.printStackTrace();

    } catch (SocketException e){

        e.printStackTrace();

    }

   }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17973277" questionTitle="Problems running JerseyTest when dealing with HttpServletResponse">
<Answer><![CDATA[@Override
protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
    return new TestContainerFactory() {
        @Override
        public TestContainer create(final URI baseUri, final ApplicationHandler application) throws IllegalArgumentException {
            return new TestContainer() {
                private HttpServer server;

                @Override
                public ClientConfig getClientConfig() {
                    return null;
                }

                @Override
                public URI getBaseUri() {
                    return baseUri;
                }

                @Override
                public void start() {
                    try {
                        this.server = GrizzlyWebContainerFactory.create(
                                baseUri, Collections.singletonMap("jersey.config.server.provider.packages", "<your-java-package>")
                        );
                    } catch (ProcessingException e) {
                        throw new TestContainerException(e);
                    } catch (IOException e) {
                        throw new TestContainerException(e);
                    }
                }

                @Override
                public void stop() {
                    this.server.stop();
                }
            };

        }
    };
}]]></Answer>
<Answer><![CDATA[import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.grizzly2.servlet.GrizzlyWebContainerFactory;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.ServerProperties;
import org.glassfish.jersey.test.DeploymentContext;
import org.glassfish.jersey.test.JerseyTest;
import org.glassfish.jersey.test.TestProperties;
import org.glassfish.jersey.test.spi.TestContainer;
import org.glassfish.jersey.test.spi.TestContainerException;
import org.glassfish.jersey.test.spi.TestContainerFactory;

import javax.ws.rs.ProcessingException;
import javax.ws.rs.core.Application;
import java.io.IOException;
import java.net.URI;
import java.util.Collections;

public abstract class RestTest extends JerseyTest {

    @Override
    protected Application configure() {
        enable(TestProperties.LOG_TRAFFIC);
        return new ResourceConfig();
    }

    abstract protected String getRestClassName();

    @Override
    protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
        return new TestContainerFactory() {
            @Override
            public TestContainer create(URI baseUri, DeploymentContext deploymentContext) {
                return new TestContainer() {
                    private HttpServer server;

                    @Override
                    public ClientConfig getClientConfig() {
                        return null;
                    }

                    @Override
                    public URI getBaseUri() {
                        return baseUri;
                    }

                    @Override
                    public void start() {
                        try {
                            this.server = GrizzlyWebContainerFactory.create(
                                    baseUri, Collections.singletonMap(ServerProperties.PROVIDER_CLASSNAMES, getRestClassName())
                            );
                        } catch (ProcessingException | IOException e) {
                            throw new TestContainerException(e);
                        }
                    }

                    @Override
                    public void stop() {
                        this.server.shutdownNow();

                    }
                };
            }
        };
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17925318" questionTitle="How to get hex web String from JavaFX ColorPicker color?">
<Answer><![CDATA[public class TestColor {

        public TestColor() {
            Color c = Color.ALICEBLUE;

             int green = (int) (c.getGreen()*255);
             String greenString = Integer.toHexString(green);

             int red = (int) (c.getRed()*255);
             String redString = Integer.toHexString(red);

             int blue = (int) (c.getBlue()*255);
             String blueString = Integer.toHexString(blue);

             String hexColor = "#"+redString+greenString+blueString;
             System.out.println(hexColor);
             System.out.println(c.toString());
        }
        public static void main(String[] args) {
            new TestColor();
        }
    }]]></Answer>
<Answer><![CDATA[String colorToHex(Color color) {
    String hex1;
    String hex2;

    hex1 = Integer.toHexString(color.hashCode()).toUpperCase();

    switch (hex1.length()) {
    case 2:
        hex2 = "000000";
        break;
    case 3:
        hex2 = String.format("00000%s", hex1.substring(0,1));
        break;
    case 4:
        hex2 = String.format("0000%s", hex1.substring(0,2));
        break;
    case 5:
        hex2 = String.format("000%s", hex1.substring(0,3));
        break;
    case 6:
        hex2 = String.format("00%s", hex1.substring(0,4));
        break;
    case 7:
        hex2 = String.format("0%s", hex1.substring(0,5));
        break;
    default:
        hex2 = hex1.substring(0, 6);
    }
    return hex2;
}]]></Answer>
<Answer><![CDATA[import javafx.scene.paint.Color;

/**
 *
 * @author Marcos Martinewski Alves
 */
public class ColorUtils {

    public static String colorToHex(Color color) {
        return colorChanelToHex(color.getRed())
                + colorChanelToHex(color.getGreen())
                + colorChanelToHex(color.getBlue())
                + colorChanelToHex(color.getOpacity());
    }

    private static String colorChanelToHex(double chanelValue) {
        String rtn = Integer.toHexString((int) Math.min(Math.round(chanelValue * 255), 255));
        if (rtn.length() == 1) {
            rtn = "0" + rtn;
        }
        return rtn;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17881304" questionTitle="Javafx TableView from database duplication">
<Answer><![CDATA[@FXML private void SearchButton() 
         {      
            Connection c ;
            datamem = FXCollections.observableArrayList();
           try
            {
              c = Dao.getCon();
              String SQL =SELECT * FROM `Member`;

              ResultSet rs = c.createStatement().executeQuery(SQL);
              if(table.getColumns().isEmpty())
              {
                for(int i=0 ; i<rs.getMetaData().getColumnCount(); i++)
                {
                    final int j = i;               
                    TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));
                    col.setCellValueFactory(new             Callback<TableColumn.CellDataFeatures<ObservableList,String>,ObservableValue<String>>(){                   
                    public ObservableValue<String>    call(TableColumn.CellDataFeatures<ObservableList, String> param) {                                                                                             
                    return new SimpleStringProperty(param.getValue().get(j).toString());                       
                        }                   
                    });

                    table.getColumns().addAll(col);
                }//for
              }//if
             while(rs.next())
              {
                  ObservableList<String> row = FXCollections.observableArrayList();
                  for(int i=1 ; i<=rs.getMetaData().getColumnCount(); i++)
                    {
                        row.add(rs.getString(i));
                    }// for
                   datamem.add(row);
              }//while
              table.setItems(datamem);
            }//try
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Problem in Search Button "+e);
            }
        }//else
    }//else

} //search method]]></Answer>
<Answer><![CDATA[public void populateTable() {

    final String username = "root";
    final String password = "joshua";
    final String bd_url = "jdbc:mysql://localhost:3306/Bus_billing_system?zeroDateTimeBehavior=convertToNull";
    try {
        connection = DriverManager.getConnection(bd_url, username, password);
        getAllStatement = connection.createStatement();

        resultSet = getAllStatement.executeQuery("select * from RouteDB");

        //from column in table         
        fromColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(0).toString());
            }
        });

        //to column in table
        toColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(1).toString());
            }
        });
        //date of departure column in table
        dateOfDepartureColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(2).toString());
            }
        });
        //time of departure column in table
        timeOfDepartureColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(3).toString());
            }
        });
        //price column
        priceColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(4).toString());
            }
        });
        //availableSpace column
        availableSpaceColumn.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
            @Override
            public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
                return new SimpleStringProperty(param.getValue().get(5).toString());
            }
        });

        allRouteTable.getColumns().setAll(fromColumn, toColumn, dateOfDepartureColumn, timeOfDepartureColumn, priceColumn, availableSpaceColumn);

        while (resultSet.next()) {


          //This is the correction made defining the routes object after while loop
            routes = FXCollections.observableArrayList();


            for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) {
                routes.add(resultSet.getString(i));
            }
            data.add(routes);
        }

        allRouteTable.setItems(data);


    } catch (SQLException e) {
        e.printStackTrace();
    }
    finally {
        try {
            connection.close();
            getAllStatement.close();
            resultSet.close();
        } catch (SQLException er) {
            er.printStackTrace();
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17808813" questionTitle="How to return Array Values as a output to a Method in Java">
<Answer><![CDATA[public void FileMoving()   
{  
   //created object for Class   
   ExternalFileExecutions ExternalFileExecutionsObject=new ExternalFileExecutions();  
   //calling Method from class object
   List<String> fileNames = ExternalFileExecutionsObject.ListOfFileNames("C:/Documents and Settings/mahesh/Desktop/InputFiles",".txt");    
   //to find out the length of list
   System.out.println(fileNames.size());  
}
public List<String> ListOfFileNames(String directoryPath,String fileType)
{
    //Creating Object for File class
    File fileObject=new File(directoryPath);
    //Fetching all the FileNames under given Path
    File[] listOfFiles=fileObject.listFiles();
    //Creating another Array for saving fileNames, which are satisfying as far our requirments
    List<String> fileNames = new ArrayList<String>();
    for (int fileIndex = 0; fileIndex < listOfFiles.length; fileIndex++) 
    {
        if (listOfFiles[fileIndex].isFile())
        {
          //True condition,Array Index value is File
          if (listOfFiles[fileIndex].getName().endsWith(fileType)) 
          {
              //System.out.println(listOfFiles[fileIndex].getName());
              fileNames .add(listOfFiles[fileIndex].getName());
          }
       }
     }  
     return fileNames ;

  }]]></Answer>
<Answer><![CDATA[public List<String> ListOfFileNames1(final String directoryPath,
            final String fileType) {
        List<String> result = new ArrayList<String>();
        // Creating Object for File class
        File root = new File(directoryPath);
        for (File f : root.listFiles()) {
            if (f.isFile() && f.getName().endsWith(fileType)) {
                result.add(f.getName());
            } // if
        } // for
        return result;
    } // ListOfFileNames1

    public List<File> ListOfFileNames2(final String directoryPath,
            final String fileType) {
        // Creating Object for File class
        File root = new File(directoryPath);
        return Arrays.asList(root.listFiles(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return pathname.isFile()
                        && pathname.getName().endsWith(fileType);
            }
        }));
    } // ListOfFileNames2]]></Answer>
<Answer><![CDATA[public List<String> ListOfFileNames(String directoryPath, String fileType) {
    //Creating Object for File class
    File fileObject = new File(directoryPath);

    //Fetching all the FileNames under given Path
    File[] listOfFiles = fileObject.listFiles();

    //Creating another Array for saving fileNames, which are satisfying as far our requirments      
    List<String> fileNames = new ArrayList<String>();
    for (int fileIndex = 0; fileIndex < listOfFiles.length; fileIndex++) {
        if (listOfFiles[fileIndex].isFile()) {
            //True condition,Array Index value is File
            if (listOfFiles[fileIndex].getName().endsWith(fileType)) {
                //System.out.println(listOfFiles[fileIndex].getName());
                fileNames.add(listOfFiles[fileIndex].getName());
            }
        }
    }
    return fileNames;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17769388" questionTitle="javafx change css at runtime">
<Answer><![CDATA[public class CssThemeDemo extends Application {

    private String theme1Url = getClass().getResource("theme1.css").toExternalForm();
    private String theme2Url = getClass().getResource("theme2.css").toExternalForm();

    @Override
    public void start(Stage primaryStage) {
        StackPane root = new StackPane();
        final Scene scene = new Scene(root, 300, 250);
        System.out.println("scene stylesheets: " + scene.getStylesheets());
        scene.getStylesheets().add(theme1Url);
        System.out.println("scene stylesheets: " + scene.getStylesheets());

        final Button btn = new Button("Load Theme 1");
        btn.getStyleClass().add("buttonStyle");
        btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                scene.getStylesheets().remove(theme2Url);
                System.out.println("scene stylesheets on button 1 click: " + scene.getStylesheets());
                if(!scene.getStylesheets().contains(theme1Url)) scene.getStylesheets().add(theme1Url);
                System.out.println("scene stylesheets on button 1 click: " + scene.getStylesheets());
            }
        });

        final Button btn2 = new Button("Load Theme 2");
        btn2.getStyleClass().add("buttonStyle");
        btn2.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                scene.getStylesheets().remove(theme1Url);
                System.out.println("scene stylesheets on button 2 click: " + scene.getStylesheets());
                if(!scene.getStylesheets().contains(theme2Url)) scene.getStylesheets().add(theme2Url);
                System.out.println("scene stylesheets on button 2 click: " + scene.getStylesheets());
            }
        });

        ComboBox<String> comboBox = new ComboBox<String>(FXCollections.observableArrayList("Just", "another", "control"));
        root.getChildren().add(VBoxBuilder.create().spacing(10).children(btn, btn2, comboBox).build());

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[BorderPane rootPane = new BorderPane();
Parent content = FXMLLoader.load(getClass().getResource("sample.fxml"));
rootPane.setCenter(content);
Scene scene = new Scene(root, 650, 550, Color.WHITE);
// Menu bar
MenuBar menuBar = new MenuBar();

// file menu
Menu fileMenu = new Menu("_File");
MenuItem exitItem = new MenuItem("Exit");
exitItem.setAccelerator(new KeyCodeCombination(KeyCode.X, KeyCombination.SHORTCUT_DOWN));
exitItem.setOnAction(ae -> Platform.exit());

fileMenu.getItems().add(exitItem);
menuBar.getMenus().add(fileMenu);

// Look and feel menu
Menu themeMenu = new Menu("_Theme");
themeMenu.setMnemonicParsing(true);
menuBar.getMenus().add(themeMenu);
rootPane.setTop(menuBar);


MenuItem theme1 = new MenuItem("Theme 1");
theme1.setOnAction(ae -> {
            scene.getStylesheets().clear();
            setUserAgentStylesheet(null);
            scene.getStylesheets()
                    .add(getClass()
                            .getResource("theme1.css")
                            .toExternalForm());
});

MenuItem theme2 = new MenuItem("Theme 2");
        theme2.setOnAction(ae -> {
            scene.getStylesheets().clear();
            setUserAgentStylesheet(null);
            scene.getStylesheets()
                    .add(getClass()
                            .getResource("theme2.css")
                            .toExternalForm());
});


themeMenu.getItems()
                .addAll(theme1,
                        theme2);

primaryStage.setScene(scene);
primaryStage.show();]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17736568" questionTitle="basic hibernate and spring mvc integration of view, dao, service and controller">
<Answer><![CDATA[<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
         pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<html>
    <body>
        <div class="content"> 
            <c:if test="${fn:length(productList) > 0}">
                <table cellpadding="5">
                    <tr class="even">
                        <th>Product Code</th>
                        <th>nominal</th>
                        <th>buy price</th>
                        <th>Sell Price</th>
                        <th>Provider</th>
                        <th>Supplier</th>
                    </tr>
                    <c:forEach items="${productList}" var="product" varStatus="status">
                            <td>${product.productCode}</td>
                            <td>${product.nominal}</td>
                            <td>${product.buyPrice}</td>
                            <td>${product.sellPrice}</td>
                            <td>${product.provider.namaProvider}</td>
                            <td>${product.supplier.name}</td>
                        </tr>
                    </c:forEach>
                </table>
            </c:if>
                    <p>Data Form</p>
            <form:form action="add.htm" commandName="product">
                <table>
                    <tr>
                        <td>Product Code :</td>
                        <td><form:input path="productCode" /></td>
                    </tr>
                    <tr>
                        <td>Nominal :</td>
                        <td><form:input path="nominal" /></td>
                    </tr>
                    <tr>
                        <td>Buy Price :</td>
                        <td><form:input path="buyPrice" /></td>
                    </tr>
                    <tr>
                        <td>Sell Price :</td>
                        <td><form:input path="sellPrice" /></td>
                    </tr>
                    <tr>
                        <td>Provider :</td>
                        <td><form:select path="provider.providerID"  modelAttribute="contact" >
                                <form:options items="${providerList}" itemValue="providerID" itemLabel="namaProvider" />
                            </form:select>
                        </td>
                    </tr>
                    <tr>
                        <td>Provider :</td>
                        <td><form:select path="supplier.supplierID"   >
                                <form:options items="${supplierList}" itemValue="supplierID" itemLabel="name" />
                            </form:select>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2"><input type="submit" value="Register"></td>
                    </tr>
                </table>
            </form:form>
        </div>
    </body>
</html>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name>MyWebApp</display-name>

  <!-- log4j -->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.xml</param-value>
  </context-param>
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>MyWebApp.root</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- Spring -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- Welcome -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17710318" questionTitle="How can I change this main method to read files sequentially">
<Answer><![CDATA[public static void main(String[] args){
    String fichier ="E:\\fichiers\\test.txt";

    int tab[] = {2, 2, 20, 8, 20, 8, 4, 3, 7, 3, 3, 3, 18, 139};
    String tabS[] = new String[14];

    try {

        InputStream       ips  = new FileInputStream(fichier); 
        InputStreamReader ipsr = new InputStreamReader(ips);
        BufferedReader    br   = new BufferedReader(ipsr);

        for(int i=0; i<tab.length; i++){

            char cbuf[] = new char[tab[i]];

            br.read(cbuf, 0, tab[i]);

            tabS[i] = new String(cbuf);
            System.out.println(tabS[i]);
        }

    } catch (Exception e){
        System.out.println(e.toString());
    }
}]]></Answer>
<Answer><![CDATA[try 
{
        InputStream       ips  = new FileInputStream(fichier); 
        InputStreamReader ipsr = new InputStreamReader(ips);
        BufferedReader    br   = new BufferedReader(ipsr);

        for(int i=0; i<tab.length; i++)
        {
            char cbuf[] = new char[tab[i]];
            br.read(cbuf, 0, tab[i]);
            tabS[i] = new String(cbuf);

            System.out.println(tabS[i]);
        } 

}
catch (Exception e)
{
    System.out.println(e.toString());
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17686744" questionTitle="work with TJ operator">
<Answer><![CDATA[public static void CreatePdf(String src){
    Rectangle rec= new Rectangle(400,400);
    Document doc= new Document(rec);
    PdfWriter writer= PdfWriter.getInstance(doc,nweFileOutputStream("doc.pdf"));
    PdfContentByte content=writer.getDirectContent();
    doc.open();
    BaseFont bf=BaseFont.createFont();
    String texte="hello";
    content.setCharacterSpacing((float)2.5);
    content.setFontAndSize(bf,12);
    content.beginText();
    content.showText(texte);
    content.endText();
    document.close();
    }
    public static void ManipulatePdf(String src, String dest){
    PdfReader read= new PdfReader("doc.pdf");
    PdfStamper stamper= new PdfStamper(read,new FileOutPutStream("doc_modifie.pdf"));
    PdfContentByte canvas= stamper.getUnderContent(1);
    canvas.setFontAndSize(bf,12);
    canvas.setCharacterSpacing((float)6);
    canvas.beginText();
    canvas.showText(texte);
    canvas.endText();
    stamper.close();

    //now how to modify the character spacing to 6 for example and then replace the modified //string instead of the old string in the document
    }


}]]></Answer>
<Answer><![CDATA[public class ContentWriter
{
    public ContentWriter(PdfContentByte content) throws DocumentException, IOException
    {
        this.content = content;
        BaseFont bf = BaseFont.createFont();
        content.beginText();
        content.setFontAndSize(bf, 12);
    }

    // x and y are offsets relative to the start coordinates of the most recent write call
    public ContentWriter write(float x, float y, String text)
    {
        if (finished)
            throw new IllegalStateException("ContentWritr session already finished.");
        content.moveText(x, y);
        content.showText(text);
        return this;
    }

    public void finish()
    {
        if (!finished)
        {
            content.endText();
            finished = true;
        }
    }

    final PdfContentByte content;
    boolean finished = false;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17673292" questionTitle="Internal Frames in JavaFX">
<Answer><![CDATA[//current state
private boolean RESIZE_BOTTOM;
private boolean RESIZE_RIGHT;

public void makeResizable(double mouseBorderWidth) {
    this.setOnMouseMoved(mouseEvent -> {
        //local window's coordiantes
        double mouseX = mouseEvent.getX();
        double mouseY = mouseEvent.getY();
        //window size
        double width = this.boundsInLocalProperty().get().getWidth();
        double height = this.boundsInLocalProperty().get().getHeight();
        //if we on the edge, change state and cursor
        if (Math.abs(mouseX - width) < mouseBorderWidth
                && Math.abs(mouseY - height) < mouseBorderWidth) {
            RESIZE_RIGHT = true;
            RESIZE_BOTTOM = true;
            this.setCursor(Cursor.NW_RESIZE);
        } else {
            RESIZE_BOTTOM = false;
            RESIZE_RIGHT = false;
            this.setCursor(Cursor.DEFAULT);
        }

    });
    this.setOnMouseDragged(mouseEvent -> {
        //resize root
        Region region = (Region) getChildren().get(0);
        //resize logic depends on state
        if (RESIZE_BOTTOM && RESIZE_RIGHT) {
            region.setPrefSize(mouseEvent.getX(), mouseEvent.getY());
        } else if (RESIZE_RIGHT) {
            region.setPrefWidth(mouseEvent.getX());
        } else if (RESIZE_BOTTOM) {
            region.setPrefHeight(mouseEvent.getY());
        }
    });
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.stage.Stage;
import jfxtras.labs.scene.control.window.CloseIcon;
import jfxtras.labs.scene.control.window.MinimizeIcon;
    import jfxtras.labs.scene.control.window.Window;


public class WindowTests extends Application {
private static int counter = 1;

private void init(Stage primaryStage) {
    final Group root = new Group();

    Button button = new Button("Add more windows");     

    root.getChildren().addAll(button);
    primaryStage.setResizable(false);
    primaryStage.setScene(new Scene(root, 600, 500));

    button.setOnAction(new EventHandler<ActionEvent>() {            
        @Override
        public void handle(ActionEvent arg0) {
            // create a window with title "My Window"
            Window w = new Window("My Window#"+counter);
            // set the window position to 10,10 (coordinates inside canvas)
            w.setLayoutX(10);
            w.setLayoutY(10);
            // define the initial window size
            w.setPrefSize(300, 200);
            // either to the left
            w.getLeftIcons().add(new CloseIcon(w));
            // .. or to the right
            w.getRightIcons().add(new MinimizeIcon(w));
            // add some content
            w.getContentPane().getChildren().add(new Label("Content... \nof the window#"+counter++));
            // add the window to the canvas
            root.getChildren().add(w);  
        }
    });
}

public double getSampleWidth() {return 600;}
public double getSampleHeight() {return 500;}

@Override
public void start(Stage primaryStage) throws Exception {
    init(primaryStage);
    primaryStage.show();


}
    public static void main(String[] args) {launch(args);}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17649436" questionTitle="Estructuration of multi module project. how to packaging modules?">
<Answer><![CDATA[<project>
  <dependencyManagement>  // dependency management doesn't bring actual dependency
    <dependencies>
      <dependency>
         <groupId>org.springframework<groupId>
         <artifactId>spring-core<artifactId>
         <version>3.1.0.RELEASE</version>
      </dependency>
      <dependency>
         <groupId>org.hibernate<groupId>
         <artifactId>hibernate-core<artifactId>
         <version>3.6</version>
      </dependency>
    </dependencies>
  <dependencyManagement>

  <dependencies>    // actual shared dependency
    <dependency>
       <groupId>junit<groupId>
       <artifactId>junit<artifactId>
       <version>4.11</version>
       <scope>test</scope>
    </dependency>
  </dependencies>
  .....
<project>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>gpt</artifactId>
    <groupId>cat.base.gpt</groupId>
    <version>0.0.1</version>
  </parent>

  <groupId>cat.base.gpt.ear</groupId>
  <artifactId>gpt.ear</artifactId>
  <name>gpt.ear</name>


  <packaging>ear</packaging>
  <description>Paquet de l'aplicació J2EE</description>

  <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gpt.domini</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gpt.ejb</artifactId>
            <version>${project.version}</version>
            <type>ejb</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gpt.logica</artifactId>
            <version>${project.version}</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>gpt.ui</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <configuration>
                    <description>GPT</description>
                    <displayName>Gestió posicions tributarias</displayName>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <version>1.4</version>
                    <generateApplicationXml>true</generateApplicationXml>
                    <modules>
                        <ejbModule>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.parent.artifactId}.ejb</artifactId>
                            <bundleFileName>${project.parent.artifactId}-ejb.jar</bundleFileName>
                        </ejbModule>
                        <jarModule>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>gpt.logica</artifactId>
                            <includeInApplicationXml>true</includeInApplicationXml>
                        </jarModule>                        

                        <webModule>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>gpt.ui</artifactId>
                            <contextRoot>/gpt</contextRoot>
                        </webModule>
                    </modules>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <excludeScope>runtime</excludeScope>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17640754" questionTitle="Zipping streams using JDK8 with lambda (java.util.stream.Streams.zip)">
<Answer><![CDATA[public static <A, B, C> Stream<C> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<A, B, C> zipper) {
    final Iterator<A> iteratorA = streamA.iterator();
    final Iterator<B> iteratorB = streamB.iterator();
    final Iterator<C> iteratorC = new Iterator<C>() {
        @Override
        public boolean hasNext() {
            return iteratorA.hasNext() && iteratorB.hasNext();
        }

        @Override
        public C next() {
            return zipper.apply(iteratorA.next(), iteratorB.next());
        }
    };
    final boolean parallel = streamA.isParallel() || streamB.isParallel();
    return iteratorToFiniteStream(iteratorC, parallel);
}

public static <T> Stream<T> iteratorToFiniteStream(Iterator<T> iterator, boolean parallel) {
    final Iterable<T> iterable = () -> iterator;
    return StreamSupport.stream(iterable.spliterator(), parallel);
}]]></Answer>
<Answer><![CDATA[public static<A, B, C> Stream<C> zip(Stream<? extends A> a,
                                     Stream<? extends B> b,
                                     BiFunction<? super A, ? super B, ? extends C> zipper) {
    Objects.requireNonNull(zipper);
    Spliterator<? extends A> aSpliterator = Objects.requireNonNull(a).spliterator();
    Spliterator<? extends B> bSpliterator = Objects.requireNonNull(b).spliterator();

    // Zipping looses DISTINCT and SORTED characteristics
    int characteristics = aSpliterator.characteristics() & bSpliterator.characteristics() &
            ~(Spliterator.DISTINCT | Spliterator.SORTED);

    long zipSize = ((characteristics & Spliterator.SIZED) != 0)
            ? Math.min(aSpliterator.getExactSizeIfKnown(), bSpliterator.getExactSizeIfKnown())
            : -1;

    Iterator<A> aIterator = Spliterators.iterator(aSpliterator);
    Iterator<B> bIterator = Spliterators.iterator(bSpliterator);
    Iterator<C> cIterator = new Iterator<C>() {
        @Override
        public boolean hasNext() {
            return aIterator.hasNext() && bIterator.hasNext();
        }

        @Override
        public C next() {
            return zipper.apply(aIterator.next(), bIterator.next());
        }
    };

    Spliterator<C> split = Spliterators.spliterator(cIterator, zipSize, characteristics);
    return (a.isParallel() || b.isParallel())
           ? StreamSupport.stream(split, true)
           : StreamSupport.stream(split, false);
}]]></Answer>
<Answer><![CDATA[public class Tuple<S,T> {
    private final S object1;
    private final T object2;

    public Tuple(S object1, T object2) {
        this.object1 = object1;
        this.object2 = object2;
    }

    public S getObject1() {
        return object1;
    }

    public T getObject2() {
        return object2;
    }
}


public class StreamUtils {

    private StreamUtils() {
    }

    public static <T> Stream<Tuple<Integer,T>> zipWithIndex(Stream<T> stream) {
        Stream<Integer> integerStream = IntStream.range(0, Integer.MAX_VALUE).boxed();
        Iterator<Integer> integerIterator = integerStream.iterator();
        return stream.map(x -> new Tuple<>(integerIterator.next(), x));
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17502958" questionTitle="Drawing a rectangle in all directions with javaFX fails">
<Answer><![CDATA[if (event.getEventType() == MouseEvent.MOUSE_PRESSED) {
            rect.setX(event.getX());
            rect.setY(event.getY());
            rectinitX.set(event.getX());
            rectinitY.set(event.getY());
        } else if (event.getEventType() == MouseEvent.MOUSE_DRAGGED) {
            Double dx = event.getX() - rectinitX.getValue();
            Double dy = event.getY() - rectinitY.getValue();
            if (dx < 0) {
                rectX.set(event.getX());
                rect.setTranslateX(dx);
                rect.widthProperty().bind(rectinitX.subtract(rectX));
            } else {
                rectX.set(event.getX());
                rect.setTranslateX(0);
                rect.widthProperty().bind(rectX.subtract(rectinitX));
            }
            if(dy < 0) {
                rectY.set(event.getY());
                rect.setTranslateY(dy);
                rect.heightProperty().bind(rectinitX.subtract(rectX));
            } else {
                rectY.set(event.getY());
                rect.setTranslateY(0);
                rect.heightProperty().bind(rectY.subtract(rectinitY));
            }

        } else if (event.getEventType() == MouseEvent.MOUSE_RELEASED) {
            // Clone the rectangle
            Rectangle r = getNewRectangle();
            r.setX(rect.getX());
            r.setY(rect.getY());
            r.setWidth(rect.getWidth());
            r.setHeight(rect.getHeight());
            pane.getChildren().add(r);

            // Hide the rectangle
            rectX.set(0);
            rectY.set(0);
  }}}};]]></Answer>
<Answer><![CDATA[@Override
    public void handle(MouseEvent mouseEvent) {

        if (mouseEvent.getEventType() == MouseEvent.MOUSE_PRESSED) {
            rectinitX.set(mouseEvent.getX());
            rectinitY.set(mouseEvent.getY());
        } else if (mouseEvent.getEventType() == MouseEvent.MOUSE_DRAGGED) {
            Double width = mouseEvent.getX() - rectinitX.getValue();
            if (width < 0) {
                rectX.set(mouseEvent.getX());
                rect.setTranslateX(width);
                rect.widthProperty().bind(rectinitX.subtract(rectX));
                System.out.println(rect.getWidth());
            } else {
                rectX.set(mouseEvent.getX());
                rect.setTranslateX(0);
                rect.widthProperty().bind(rectX.subtract(rectinitX));
            }

        } else if (mouseEvent.getEventType() == MouseEvent.MOUSE_RELEASED) {
            // Clone the rectangle
            Rectangle r = getNewRectangle();
            r.setX(rect.getX());
            r.setY(rect.getY());
            r.setWidth(rect.getWidth());
            r.setHeight(rect.getHeight());
            pane.getChildren().add(r);


        }
    }
};]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17473249" questionTitle="javafx tableview oneditcommit does not get called with custom cellfactory?">
<Answer><![CDATA[public class DeleteButtonCell extends TableCell<Menu, Menu> {

  private Button deleteButton;

  public DeleteButtonCell() {
    deleteButton = new Button();
    deleteButton.setId("trash-button");
    deleteButton.setOnAction((e) -> {
      startEdit();
      commitEdit((Menu) this.getTableView().getItems().get(this.getIndex()));
    });
  }

  @Override
  protected void updateItem(Menu t, boolean empty) {
    super.updateItem(t, empty);
    if (empty) {
      setGraphic(null);
    } else {
      setGraphic(deleteButton);
    }
  }

}]]></Answer>
<Answer><![CDATA[public class ColorPickerTableCell<Inputs> extends TableCell<Inputs, Color>{
private ColorPicker cp;

public ColorPickerTableCell(){        
    cp = new ColorPicker(); 
    cp.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
            commitEdit(cp.getValue());
            updateItem(cp.getValue(), isEmpty());
            ((Inputs) getTableView().getItems().get(
                    getTableRow().getIndex())
                    ).setColor(cp.getValue());
        }            
    });                
    setGraphic(cp);
    setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    setEditable(true);        
}     
@Override
protected void updateItem(Color item, boolean empty) {
    super.updateItem(item, empty);
    cp.setVisible(!empty);
    this.setItem(item);
    cp.setValue(item);
}
}]]></Answer>
<Answer><![CDATA[myColumn.setCellFactory(new Callback<TableColumn<M, ColorWrapper>, TableCell<M, ColorWrapper>>() {          

        @Override
        public TableCell<M, ColorWrapper> call(TableColumn<M,ColorWrapper> arg0) {
            return new TableCell<M, ColorWrapper>(){

                private ColorPicker colorPicker;

                private ColorPicker createPicker(){
                    colorPicker = new ColorPicker();

                    colorPicker.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent evt) {
                            ColorPicker cp = (ColorPicker)evt.getSource();
                            ColorWrapper cw = (ColorWrapper)cp.getUserData();
                            cw.setColor(cp.getValue());
                        }

                    });
                    return colorPicker;
                }


                @Override
                protected void updateItem(ColorWrapper value, boolean empty) {                      
                    super.updateItem(value, empty);
                    if(empty){
                        return;
                    }

                    if(colorPicker == null){
                        colorPicker = createPicker();
                        colorPicker.setUserData(value);
                    }

                    colorPicker.setValue(value.getColor());
                    setGraphic(colorPicker);
                }

            };

        }            

    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17443688" questionTitle="How can I process in two threads simultaniusly by diffrent process?">
<Answer><![CDATA[class ListAProcessor implements Runnable {

    private final List<YourListClass> list;

    public ListAProcessor(final List<YourListClass> yourListA) {
        this.list = yourList;
    }

    @Override
    public void run() {
        // Process this.list
    }

}

class ListBProcessor implements Runnable {

    private final List<YourListClass> list;

    public ListBProcessor(final List<YourListClass> yourListB) {
        this.list = yourList;
    }

    @Override
    public void run() {
        // Process this.list
    }
}

public class Main {
    public static void main(final String args[]) {
        List<YourListClass> listA;
        List<YourListClass> listB;
        // Initialize the lists
        Runnable processor = new ListAProcessor(listA);
        processor.start();
        processor = new ListBProcessor(listB);
        processor.start();
    }
}]]></Answer>
<Answer><![CDATA[{ //Body of some method

     List<Object> sourceList = getList();

     final List<Object> firstList  = createFirstList(sourceList);
     final List<Object> secondList = createsecondList(sourceList);

     //Define the Runnable, that will store the logic to process the lists.

     Runnable processFirstList = new Runnable() {//We create anonymous class
         @Override
        public void run() {
              //Here you implement the logic to process firstList
       }

     };


     Runnable processSecondList = new Runnable() {//We create anonymous class
        @Override
        public void run() {
              //Here you implement the logic to process secondList
       }

     };

     //Declare the Threads that will be responsible for execution of runable logic

     Thread firstListThread  = new Thread(processFirstList);
     Thread secondListThread = new Thread(processSecondList);

     //Start the Threads 

     firstListThread.start();
     secondListThread.start();

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17402543" questionTitle="Is there any way to change mywebapp-1.0-SNAPSHOT-classes.jar from attachClasses configuration in maven-war-plugin to mywebapp-1.0-SNAPSHOT.jar?">
<Answer><![CDATA[...
<build>
  <plugins>
    <plugin>
      <artifactId>maven-jar-plugin</artifactId>
      <executions>
        <execution>
          <id>create-jar</id>
          <phase>package</phase>
          <goals>
            <goal>jar</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>build-helper-maven-plugin</artifactId>
      <executions>
        <execution>
          <id>attach-jar</id>
          <phase>package</phase>
          <goals>
            <goal>attach-artifact</goal>
          </goals>
          <configuration>
            <artifacts>
              <artifact>
                <file>${project.build.directory}/${project.build.finalName}.jar</file>
              </artifact>
            </artifacts>
          </configuration>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
...]]></Answer>
<Answer><![CDATA[<build>
    <pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <archiveClasses>true</archiveClasses>                    
                </configuration>
            </plugin>
        </plugins>
    </pluginManagement>
    <plugins>
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
                <execution>
                    <id>attach-jar</id>
                    <phase>package</phase>
                    <goals>
                        <goal>attach-artifact</goal>
                    </goals>
                    <configuration>
                        <artifacts>
                            <artifact>
                                <file>${project.build.directory}/${project.build.finalName}/WEB-INF/lib/${project.build.finalName}.jar</file>
                            </artifact>
                        </artifacts>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17312734" questionTitle="how to make a Draggable Node in Javafx 2.0.">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.text.Text;
import javafx.scene.text.TextBoundsType;
import javafx.stage.Stage;

public class TextOnCircleWithDragging extends Application {
    private static final int W = 400;
    private static final int H = 400;
    private static final int R = 15;

    @Override
    public void start(Stage stage) {
        final StackPane circleWithText = new StackPane(
                createCircle(),
                createText()
        );
        circleWithText.relocate(
                W/2 - R/2,
                H/2 - R/2
        );

        makeDraggable(circleWithText);

        stage.setScene(
                new Scene(
                        new Pane(circleWithText),
                        W, H
                )
        );
        stage.show();
    }

    private Circle createCircle() {
        final Circle circle = new Circle(R);
        circle.setFill(Color.PALEGREEN);
        circle.relocate(0, 0);

        return circle;
    }

    private Text createText() {
        final Text text = new Text("A");
        text.setBoundsType(TextBoundsType.VISUAL);

        return text;
    }

    private void makeDraggable(Node node) {
        final Delta dragDelta = new Delta();

        node.setOnMouseEntered(me -> {
            if (!me.isPrimaryButtonDown()) {
                node.getScene().setCursor(Cursor.HAND);
            }
        });
        node.setOnMouseExited(me -> {
            if (!me.isPrimaryButtonDown()) {
                node.getScene().setCursor(Cursor.DEFAULT);
            }
        });
        node.setOnMousePressed(me -> {
            if (me.isPrimaryButtonDown()) {
                node.getScene().setCursor(Cursor.DEFAULT);
            }
            dragDelta.x = me.getX();
            dragDelta.y = me.getY();
            node.getScene().setCursor(Cursor.MOVE);
        });
        node.setOnMouseReleased(me -> {
            if (!me.isPrimaryButtonDown()) {
                node.getScene().setCursor(Cursor.DEFAULT);
            }
        });
        node.setOnMouseDragged(me -> {
            node.setLayoutX(node.getLayoutX() + me.getX() - dragDelta.x);
            node.setLayoutY(node.getLayoutY() + me.getY() - dragDelta.y);
        });
    }

    public static void main(String[] args) {
        launch(args);
    }

    private class Delta {
        public double x;
        public double y;
    }
}]]></Answer>
<Answer><![CDATA[/**
 * Generalised implementation of 'Draggability' of a {@link Node}. The Draggable class is used as a 'namespace' for the internal
 * class/interfaces/enum.
 * @author phill
 *
 */
public class Draggable {
public enum Event {
    None, DragStart, Drag, DragEnd
}

/**
 * Marker for an entity that has draggable nature.
 * @author phill
 */
public interface Interface {
    public abstract Draggable.Nature getDraggableNature();
}

public interface Listener {
    public void accept(Nature draggableNature, Event dragEvent);
}

/**
 * Class that encapsulates the draggable nature of a node.
 * <ul>
 * <li>EventNode: the event that receives the drag events</li>
 * <li>One or more DragNodes: that move in response to the drag events. The EventNode is usually (but not always) a
 * DragNode</li>
 * <li>Listeners: listen for the drag events</li>
 * </ul>
 * @author phill
 *
 */
public static final class Nature implements EventHandler<MouseEvent> {
    private double lastMouseX = 0, lastMouseY = 0; // scene coords

    private boolean dragging = false;

    private final boolean enabled = true;
    private final Node eventNode;
    private final List<Node> dragNodes = new ArrayList<>();
    private final List<Listener> dragListeners = new ArrayList<>();

    public Nature(final Node node) {
        this(node, node);
    }

    public Nature(final Node eventNode, final Node... dragNodes) {
        this.eventNode = eventNode;
        this.dragNodes.addAll(Arrays.asList(dragNodes));
        this.eventNode.addEventHandler(MouseEvent.ANY, this);
    }

    public final boolean addDraggedNode(final Node node) {
        if (!this.dragNodes.contains(node)) {
            return this.dragNodes.add(node);
        }
        return false;
    }

    public final boolean addListener(final Listener listener) {
        return this.dragListeners.add(listener);
    }

    public final void detatch() {
        this.eventNode.removeEventFilter(MouseEvent.ANY, this);
    }

    public final List<Node> getDragNodes() {
        return new ArrayList<>(this.dragNodes);
    }

    public final Node getEventNode() {
        return this.eventNode;
    }

    @Override
    public final void handle(final MouseEvent event) {
        if (MouseEvent.MOUSE_PRESSED == event.getEventType()) {
            if (this.enabled && this.eventNode.contains(event.getX(), event.getY())) {
                this.lastMouseX = event.getSceneX();
                this.lastMouseY = event.getSceneY();
                event.consume();
            }
        } else if (MouseEvent.MOUSE_DRAGGED == event.getEventType()) {
            if (!this.dragging) {
                this.dragging = true;
                for (final Listener listener : this.dragListeners) {
                    listener.accept(this, Draggable.Event.DragStart);
                }
            }
            if (this.dragging) {
                final double deltaX = event.getSceneX() - this.lastMouseX;
                final double deltaY = event.getSceneY() - this.lastMouseY;

                for (final Node dragNode : this.dragNodes) {
                    final double initialTranslateX = dragNode.getTranslateX();
                    final double initialTranslateY = dragNode.getTranslateY();
                    dragNode.setTranslateX(initialTranslateX + deltaX);
                    dragNode.setTranslateY(initialTranslateY + deltaY);
                }

                this.lastMouseX = event.getSceneX();
                this.lastMouseY = event.getSceneY();

                event.consume();
                for (final Listener listener : this.dragListeners) {
                    listener.accept(this, Draggable.Event.Drag);
                }
            }
        } else if (MouseEvent.MOUSE_RELEASED == event.getEventType()) {
            if (this.dragging) {
                event.consume();
                this.dragging = false;
                for (final Listener listener : this.dragListeners) {
                    listener.accept(this, Draggable.Event.DragEnd);
                }
            }
        }

    }

    public final boolean removeDraggedNode(final Node node) {
        return this.dragNodes.remove(node);
    }

    public final boolean removeListener(final Listener listener) {
        return this.dragListeners.remove(listener);
    }

    /**
     * When the initial mousePressed is missing we can supply the first coordinates programmatically.
     * @param lastMouseX
     * @param lastMouseY
     */
    public final void setLastMouse(final double lastMouseX, final double lastMouseY) {
        this.lastMouseX = lastMouseX;
        this.lastMouseY = lastMouseY;
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17287445" questionTitle="Horizontal JavaFX TitledPane">
<Answer><![CDATA[/** Animates a node on and off screen to the left. */
class SideBar extends VBox {
  /** @return a control button to hide and show the sidebar */
  public Button getControlButton() { return controlButton; }
  private final Button controlButton;

  /** creates a sidebar containing a vertical alignment of the given nodes */
  SideBar(final double expandedWidth, Node... nodes) {
    getStyleClass().add("sidebar");
    this.setPrefWidth(expandedWidth);

    // create a bar to hide and show.
    setAlignment(Pos.CENTER);
    getChildren().addAll(nodes);

    // create a button to hide and show the sidebar.
    controlButton = new Button("Collapse");
    controlButton.getStyleClass().add("hide-left");

    // apply the animations when the button is pressed.
    controlButton.setOnAction(new EventHandler<ActionEvent>() {
      @Override public void handle(ActionEvent actionEvent) {
        // create an animation to hide sidebar.
        final Animation hideSidebar = new Transition() {
          { setCycleDuration(Duration.millis(250)); }
          protected void interpolate(double frac) {
            final double curWidth = expandedWidth * (1.0 - frac);
            setPrefWidth(curWidth);
            setTranslateX(-expandedWidth + curWidth);
          }
        };
        hideSidebar.onFinishedProperty().set(new EventHandler<ActionEvent>() {
          @Override public void handle(ActionEvent actionEvent) {
            setVisible(false);
            controlButton.setText("Show");
            controlButton.getStyleClass().remove("hide-left");
            controlButton.getStyleClass().add("show-right");
          }
        });

        // create an animation to show a sidebar.
        final Animation showSidebar = new Transition() {
          { setCycleDuration(Duration.millis(250)); }
          protected void interpolate(double frac) {
            final double curWidth = expandedWidth * frac;
            setPrefWidth(curWidth);
            setTranslateX(-expandedWidth + curWidth);
          }
        };
        showSidebar.onFinishedProperty().set(new EventHandler<ActionEvent>() {
          @Override public void handle(ActionEvent actionEvent) {
            controlButton.setText("Collapse");
            controlButton.getStyleClass().add("hide-left");
            controlButton.getStyleClass().remove("show-right");
          }
        });

        if (showSidebar.statusProperty().get() == Animation.Status.STOPPED && hideSidebar.statusProperty().get() == Animation.Status.STOPPED) {
          if (isVisible()) {
            hideSidebar.play();
          } else {
            setVisible(true);
            showSidebar.play();
          }
        }
      }
    });
  }
}]]></Answer>
<Answer><![CDATA[@Override
public void start(Stage stage) throws Exception {       

    Label label1 = new Label("label 1");
    label1.setRotate(90);

    TitledPane pane1 = new TitledPane("titled pane 1", label1);
    pane1.setAlignment(Pos.CENTER);

    Label label2 = new Label("label 2");
    label2.setRotate(90);

    TitledPane pane2 = new TitledPane("titled pane 2", label2);
    pane2.setAlignment(Pos.CENTER);

    Accordion accordion = new Accordion();
    accordion.setRotate(270);
    accordion.getPanes().add(pane1);
    accordion.getPanes().add(pane2);

    HBox mainPane = new HBox(accordion);
    accordion.prefWidthProperty().bind(mainPane.heightProperty());
    accordion.prefHeightProperty().bind(mainPane.widthProperty());

    stage.setTitle("Horizontal Accordion");
    stage.setScene(new Scene(mainPane, 800, 600));
    stage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="17168891" questionTitle="Filtering web.xml when using the jetty-maven-plugin?">
<Answer><![CDATA[<build>
    <plugins>
        <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven-war-plugin.version}</version>
            <configuration>
                <failOnMissingWebXml>false</failOnMissingWebXml>
                <webResources>
                    <resource>
                        <directory>src/main/webapp</directory>
                        <filtering>true</filtering>
                        <includes>
                            <include>**/bm.js</include>
                        </includes>
                    </resource>
                </webResources>
                <warName>${war.name}</warName>
            </configuration>
        </plugin>
    </plugins>
    <filters>
        <filter>src/main/filters/filter-${target.environment}.properties</filter>
    </filters>
</build>]]></Answer>
<Answer><![CDATA[<!-- jetty:run -->
    <profile>
        <id>jetty-run</id>
        <activation>
            <property>
                <name>jetty</name>
                <value>run</value>
            </property>
        </activation>
        <properties>
            <jetty.docroot>${project.build.directory}/jetty-docroot</jetty.docroot>
        </properties>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.4.3</version>
                    <executions>
                        <execution>
                            <id>jetty-docroot</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${jetty.docroot}</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${basedir}/src/main/webapp</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <!-- for maven2, use org.eclipse.jetty for maven3 + slightly different configuration  -->
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>maven-jetty-plugin</artifactId>
                    <configuration>
                        <connectors>
                            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                                <port>${jetty.port}</port>
                                <maxIdleTime>60000</maxIdleTime>
                            </connector>
                        </connectors>
                        <scanIntervalSeconds>10</scanIntervalSeconds>
                        <contextPath>/${jetty.webcontext}</contextPath>
                        <webXml>${jetty.docroot}/WEB-INF/web.xml</webXml>
                        <webAppSourceDirectory>${jetty.docroot}</webAppSourceDirectory>
                        <!-- maven3
                        <webApp>
                            <contextPath>/${jetty.webcontext}</contextPath>
                            <descriptor>${jetty.docroot}/WEB-INF/web.xml</descriptor>
                            <baseResource>${jetty.docroot}</baseResource>
                        </webApp>
                        -->
                        <systemProperties>
                            <systemProperty>
                                <name>java.awt.headless</name>
                                <value>true</value>
                            </systemProperty>
                        </systemProperties>
                    </configuration>
                    <executions>
                        <execution>
                            <id>jetty-run</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    </profile>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16961700" questionTitle="Count and the starting index of the largest string that has all chars same">
<Answer><![CDATA[class Sample {
    static int max = 0, maxStartPos = -1;

    public static void main(String[] args) {
        search("aaakkkkbbkkkkk".toCharArray());
        System.out.println(String.format("max len: %d, start pos: %d", max, maxStartPos));

        search("xxxxxh".toCharArray());
        System.out.println(String.format("max len: %d, start pos: %d", max, maxStartPos));

        search("hxxxxxhyyyyyyh".toCharArray());
        System.out.println(String.format("max len: %d, start pos: %d", max, maxStartPos));
    }

    private static void search(char[] chars) {
        max = 0; maxStartPos = 0;

        int len = 0, startPos = 0;
        char start = chars[0];
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == start) {
                len++;
            } else {
                if (len > max) {
                    updateMaxResults(len, startPos);
                }
                startPos = i;
                len = 1;
                start = chars[i];
            }
        }
        if (len > max) {
            updateMaxResults(len, startPos);
        }
    }

    private static void updateMaxResults(int len, int startPos) {
        max = len;
        maxStartPos = startPos;
    }
}]]></Answer>
<Answer><![CDATA[public static void main(String[] args) {


        String str = "aaakkkkkkkbbkkkkk";

        char[] var = str.toCharArray();

        for(int i=0; i<var.length;i++)
            System.out.print(" "+var[i]);


        int final_index=0; // this is for final index what we want

        int max_size=0; // for maximum no. of time the same char repeats continiously..
        int size=0; // this for finding size of sub string..
        char pre_char=var[0]; // pre_char is used check with present char in the array where the i position is shifted..



        // here is the loop..
        // we don't need much loops to this
        // while we are reading , the comparison is also done parallely.. 
        for(int i=1;i<var.length;i++) // here i starts from 1 because 0th char is shfted into pre_char 
            //and now comparion is starts from next char ie from 1th position
        {
//          System.out.println("i=="+i+" size "+size+"  prechar== "+pre_char+ "  var[i] ="+var[i]+" max size=="+max_size);
//          System.out.println("..........................");
            if(pre_char==var[i]) // here condition is checking. if its same with previous char, its means same char is occur again..
            {
                size+=1;
            }else{ // else means the sub string is has different char 
                if(max_size<size) // now check for whether any maximum size is occured priviously or not..
                {
                    max_size=size;
                    final_index=i-size;
                }
                size=0;
            }
            pre_char=var[i];
        }

        // now this for final 
        // its means if the max sub string is at the ending position, the above for loop breaks at the last element 
        // in this case we check if the last sub string is max or not..

        if(max_size<size)
        {
            max_size=size;
            final_index=var.length-size;
        }
        // then this is the final what we wana,,,,, 
        System.out.print("Max size is "+(max_size+1)+"  index is "+final_index);



    }]]></Answer>
<Answer><![CDATA[String str = "aaakkkkbbkkkkk";
int count = 0;
int firstOccurence = 0;
int prevSequenceLength = 0;
//converting string into character array
char[] vals = str.toCharArray(); 

for(int i=0; i < vals.length; ){

   for(int j=i+1; j<vals.length; j++){
       //if value match then increment counter
       if(vals[i]== str.charAt(j)){
           counter++;
       }
       else
      {
       //set the prevSequenceLength to counter value if it is less than counter value
       if(prevSequenceLength<counter)
        {
          prevSequenceLength=counter;
         //make firstOccurence to  j - counter
         firstOccurence = j-counter;
       }

       //first reset the counter to 0;
       counter = 0;

       //else break from inner loop 
       break; //break from inner loop
   }
   //assign the index value of j to the i to start with new substring
   i = vals.indexOf(j);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16941980" questionTitle="Populate TableView with ObservableMap JavaFX">
<Answer><![CDATA[package tablemap;

import java.util.AbstractMap;
import java.util.Map;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.MapChangeListener;
import javafx.collections.ObservableList;
import javafx.collections.ObservableMap;
import javafx.scene.control.TableView;

public class MapTableView<K,V> extends TableView<Map.Entry<K,V>>{
    private final ObservableList<Map.Entry<K,V>> obsList;
    private final ObservableMap<K,V> map;
    private final MapChangeListener<K,V> mapChange;
    private final ListChangeListener<Map.Entry<K,V>> listChange;

    public MapTableView(ObservableMap<K,V> map) {
        this.map = map;
        obsList = FXCollections.observableArrayList(map.entrySet());
        setItems(obsList);

        mapChange = new MapChangeListener<K, V>() {
            @Override
            public void onChanged(MapChangeListener.Change<? extends K, ? extends V> change) {
                obsList.removeListener(listChange);
                if (change.wasAdded())
                    obsList.add(new AbstractMap.SimpleEntry(change.getKey(),change.getValueAdded()));
                if (change.wasRemoved()){
                    //obsList.remove(new AbstractMap.SimpleEntry(change.getKey(),change.getValueRemoved()));
                    // ^ doesn't work always, use loop instead
                    for (Map.Entry<K,V> me : obsList){
                        if (me.getKey().equals(change.getKey())){
                            obsList.remove(me);
                            break;
                        }
                    }
                }
                obsList.addListener(listChange);
            }
        };

        listChange = (ListChangeListener.Change<? extends Map.Entry<K, V>> change) -> {
            map.removeListener(mapChange);
            while (change.next()){
                //maybe check for uniqueness here
                if (change.wasAdded()) for (Map.Entry<K, V> me: change.getAddedSubList())
                    map.put(me.getKey(),me.getValue());
                if (change.wasRemoved()) for (Map.Entry<K, V> me: change.getRemoved())
                    map.remove(me.getKey());
            }
            map.addListener(mapChange);
        };

        map.addListener(mapChange);
        obsList.addListener(listChange);
    }

    //adding to list should be unique
    public void addUnique(K key, V value){
        boolean isFound = false;
        //if a duplicate key just change the value
        for (Map.Entry<K,V> me : getItems()){
            if (me.getKey().equals(key)){
                isFound = true;
                me.setValue(value);
                break;//only first match 
            }
        }
        if (!isFound) // add new entry
            getItems().add(new AbstractMap.SimpleEntry<>(key,value));
    }

    //for doing lenghty map operations
    public void removeMapListener(){
        map.removeListener(mapChange);
    }

    //for resyncing list to map after many changes
    public void resetMapListener(){
        obsList.removeListener(listChange);
          obsList.clear();
          obsList.addAll(map.entrySet());
        obsList.addListener(listChange);
        map.addListener(mapChange);
    }

}]]></Answer>
<Answer><![CDATA[package tablemap;

import static java.lang.Math.random;
import java.util.Map;
import java.util.TreeMap;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TableMap extends Application {

    @Override
    public void start(Stage primaryStage) {
        VBox root = new VBox();
        Map<String,LineItem> mapData = new TreeMap<>();
        for (int i = 0; i < 3; i++)
            mapData.put(String.valueOf(random()), new LineItem(String.valueOf(i),"i"));

        ObservableList<Map.Entry<String,LineItem>> listData = 
                FXCollections.observableArrayList(mapData.entrySet());
        TableView<Map.Entry<String,LineItem>> tv = new TableView(listData);

        TableColumn<Map.Entry<String,LineItem>,String> keyCol = new TableColumn("Key");
        keyCol.setCellValueFactory(
            (TableColumn.CellDataFeatures<Map.Entry<String,LineItem>, String> p) -> 
                new SimpleStringProperty(p.getValue().getKey()));

        TableColumn<Map.Entry<String,LineItem>,String> lineNoCol = new TableColumn("Line No");
        lineNoCol.setCellValueFactory(
            (TableColumn.CellDataFeatures<Map.Entry<String,LineItem>, String> p) -> 
                new SimpleStringProperty(p.getValue().getValue().getLineNo()));

        TableColumn<Map.Entry<String,LineItem>,String> descCol = new TableColumn("Desc");
        descCol.setCellValueFactory(
            (TableColumn.CellDataFeatures<Map.Entry<String,LineItem>, String> p) -> 
                new SimpleStringProperty(p.getValue().getValue().getDesc()));

        descCol.setCellFactory(TextFieldTableCell.forTableColumn());

        descCol.setOnEditCommit((CellEditEvent<Map.Entry<String,LineItem>, String> t) -> {
             t.getTableView().getItems().get(t.getTablePosition().getRow())
                     .getValue().setDesc(t.getNewValue());
        });

        tv.getColumns().addAll(keyCol,lineNoCol, descCol);
        tv.setEditable(true);
        tv.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        Button btnOut = new Button("out");
        btnOut.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                for (Map.Entry<String,LineItem> me : mapData.entrySet()){
                    System.out.println("key "+me.getKey()+" entry "+me.getValue().toCSVString());
                }
                for (Map.Entry<String,LineItem> me : listData){
                    System.out.println("key "+me.getKey()+" entry "+me.getValue().toCSVString());
                }
            }
        });

        root.getChildren().addAll(tv,btnOut);
        Scene scene = new Scene(root, 300, 200);

        primaryStage.setTitle("Map Table Test");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16855677" questionTitle="How to embed .ttf fonts is JavaFx 2.2?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.*;
import javafx.scene.layout.VBox;
import javafx.scene.text.*;
import javafx.stage.Stage;

// demonstrates the use of a custom font.
public class CustomFontApp extends Application {
  public static void main(String[] args) { launch(args); }
  @Override public void start(Stage stage) {
    stage.setTitle("TRON Synopsis");

    // load the tron font.
    Font.loadFont(
      CustomFontApp.class.getResource("TRON.TTF").toExternalForm(), 
      10
    );

    Label title = new Label("TRON");
    title.getStyleClass().add("title");

    Label caption = new Label("A sci-fi flick set in an alternate reality.");
    caption.getStyleClass().add("caption");
    caption.setMaxWidth(220);
    caption.setWrapText(true);
    caption.setTextAlignment(TextAlignment.CENTER);

    VBox layout = new VBox(10);
    layout.setStyle("-fx-padding: 20px; -fx-background-color: silver");
    layout.setAlignment(Pos.CENTER);
    layout.getChildren().setAll(
      title,
      new ImageView(
        new Image(
          "http://ia.media-imdb.com/images/M/MV5BMTY5NjM2MjAwOV5BMl5BanBnXkFtZTYwMTgyMzA5.V1.SY317.jpg"
        )
      ),
      caption
    );

    // layout the scene.
    final Scene scene = new Scene(layout);
    scene.getStylesheets().add(getClass().getResource("custom-font-styles.css").toExternalForm());
    stage.setScene(scene);
    stage.show();
  }
}]]></Answer>
<Answer><![CDATA[public class Test2 extends Application {

  public static void main(String[] args) {
    launch(args);
  }

  public void start(final Stage primaryStage) {
    Group rootGroup = new Group();

    // create a label to show some text
    Label label = new Label("Demo Text");
    try { 
      // load a custom font from a specific location (change path!)
      // 12 is the size to use
      final Font f = Font.loadFont(new FileInputStream(new File("./myFonts/TRON.TTF")), 12);
      label.setFont(f); // use this font with our label
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }

    rootGroup.getChildren().add(label); 

    // create scene, add root group and show stage
    Scene scene = new Scene(rootGroup, 640, 480, Color.WHITE);
    primaryStage.setScene(scene);
    primaryStage.show();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16823644" questionTitle="Java FX Waiting for User Input">
<Answer><![CDATA[private static Response buttonSelected = Response.CANCEL;


/**
 * Creates a traditional modal dialog box
 *
 * @param owner       the calling Stage that is initiating the dialog.
 * @param windowTitle text that will be displayed in the titlebar
 * @param greeting    text next to icon that provides generally what to do (i.e. "Please enter the data below")
 * @param labelText   label text for the input box (i.e. "Number of widgets:")
 * @return If user clicks OK, the text entered by the user; otherwise if cancel, NULL.
 */
public static String prompt(final Stage owner, final String windowTitle, final String greeting, final String labelText) {
    //overall layout pane
    BorderPane root = new BorderPane();
    root.setPadding(PADDING);

    Scene scene = new Scene(root);

    final Dialog dial = new Dialog(windowTitle, owner, scene, MessageType.CONFIRM);

    final Button okButton = new Button("OK");
    okButton.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent e) {
            dial.close();
            buttonSelected = Response.YES;
        }
    });
    Button cancelButton = new Button("Cancel");
    cancelButton.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent e) {
            dial.close();
            buttonSelected = Response.NO;
        }
    });


    HBox headerGreeting = new HBox();
    headerGreeting.setSpacing(SPACING_SMALL);
    Text messageText = new Text(greeting);

    messageText.setFont(new Font(messageText.getFont().getName(), 14));
    headerGreeting.getChildren().addAll(icon, messageText);

    root.setTop(headerGreeting);

    //setup input controls
    HBox textHBox = new HBox(10);
    TextField input = new TextField();
    Label label = new Label();
    label.setText(labelText);
    label.setLabelFor(input);
    textHBox.getChildren().addAll(label, input);

    //create buttons
    HBox buttons = new HBox();
    buttons.setAlignment(Pos.CENTER);
    buttons.setSpacing(SPACING);
    buttons.getChildren().addAll(okButton, cancelButton);
    root.setCenter(buttons);

    //put controls and buttons in a vertical container, add to root component
    VBox container = new VBox(20);
    container.setPadding(new Insets(15, 12, 15, 12));
    container.getChildren().addAll(textHBox, buttons);
    root.setCenter(container);

    //handle enter key
    root.setOnKeyReleased(new EventHandler<KeyEvent>() {
        final KeyCombination combo = new KeyCodeCombination(KeyCode.ENTER);

        public void handle(KeyEvent t) {
            if (combo.match(t)) {
                okButton.fire();
            }
        }
    });

    input.requestFocus();   //set focus to the input box.

    dial.showDialog();
    if (buttonSelected.equals(Response.YES)) {
        return input.getText();
    }
    else { //cancel
        return null;
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;

public class MissingDataDemo extends Application {
  private static final String[] SAMPLE_TEXT = 
    "Lorem ipsum MISSING dolor sit amet MISSING consectetur adipisicing elit sed do eiusmod tempor incididunt MISSING ut labore et dolore magna aliqua"
    .split(" ");

  @Override public void start(Stage primaryStage) {
    VBox textContainer = new VBox(10);
    textContainer.setStyle("-fx-background-color: cornsilk; -fx-padding: 10;");

    primaryStage.setScene(new Scene(textContainer, 300, 600));
    primaryStage.show();

    TextLoader textLoader = new TextLoader(SAMPLE_TEXT, textContainer);
    textLoader.loadText();
  }

  public static void main(String[] args) { launch(args); }
}

class TextLoader {
  private final String[] lines;
  private final Pane     container;

  TextLoader(final String[] lines, final Pane container) {
    this.lines = lines;
    this.container = container;
  }

  public void loadText() {
    for (String nextText: lines) {
      final Label nextLabel = new Label();

      if ("MISSING".equals(nextText)) {
        nextLabel.setStyle("-fx-background-color: palegreen;");

        MissingTextPrompt prompt = new MissingTextPrompt(
          container.getScene().getWindow()
        );

        nextText = prompt.getResult();
      }

      nextLabel.setText(nextText);

      container.getChildren().add(nextLabel);
    }              
  }

  class MissingTextPrompt {
    private final String result;

    MissingTextPrompt(Window owner) {
      final Stage dialog = new Stage();

      dialog.setTitle("Enter Missing Text");
      dialog.initOwner(owner);
      dialog.initStyle(StageStyle.UTILITY);
      dialog.initModality(Modality.WINDOW_MODAL);
      dialog.setX(owner.getX() + owner.getWidth());
      dialog.setY(owner.getY());

      final TextField textField = new TextField();
      final Button submitButton = new Button("Submit");
      submitButton.setDefaultButton(true);
      submitButton.setOnAction(new EventHandler<ActionEvent>() {
        @Override public void handle(ActionEvent t) {
          dialog.close();
        }
      });
      textField.setMinHeight(TextField.USE_PREF_SIZE);

      final VBox layout = new VBox(10);
      layout.setAlignment(Pos.CENTER_RIGHT);
      layout.setStyle("-fx-background-color: azure; -fx-padding: 10;");
      layout.getChildren().setAll(
        textField, 
        submitButton
      );

      dialog.setScene(new Scene(layout));
      dialog.showAndWait();

      result = textField.getText();
    }

    private String getResult() {
      return result;
    }
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16803684" questionTitle="Primefaces Implementing valueChangeListener along with confirmDialog">
<Answer><![CDATA[<h:form id="form">

        <p:selectOneMenu  value="#{buttonBean.emp.number}">  
            <f:selectItem itemLabel="Select One" itemValue="" />  
            <f:selectItem itemLabel="Option 1" itemValue="1" />  
            <f:selectItem itemLabel="Option 2" itemValue="2" />  
            <f:selectItem itemLabel="Option 3" itemValue="3" />  
        <p:ajax listener="#{buttonBean.change}" />
        </p:selectOneMenu>      




 <p:confirmDialog id="confirmDialog" message="Are you sure about destroying the world?"  
                header="Initiating destroy process" severity="alert" widgetVar="confirmation">  

        <p:commandButton id="confirm" value="Yes Sure" actionListener="#{buttonBean.dialogCheck}" oncomplete="confirmation.hide()" update="@form" 
                     />  
        <p:commandButton id="decline" value="Not Yet" onclick="confirmation.hide()" type="button" />   

    </p:confirmDialog>

        </h:form>]]></Answer>
<Answer><![CDATA[public void check(){
    System.out.println(""+getSelectedAction());
    RequestContext.getCurrentInstance().execute("confirmDialogWidgetVar.show()");
    }

    <p:selectOneMenu id="selectMenu" value="#{home.selectedAction}">

    <f:selectItem itemLabel="Option A" itemValue="A"/>
    <f:selectItem itemLabel="Option B" itemValue="B"/>
    <f:selectItem itemLabel="Option C" itemValue="C"/>
    <f:selectItem itemLabel="Option D" itemValue="D"/>
    <p:ajax listener="#{home.check}" />
    <f:ajax render="confirmDialog" ></f:ajax>
    </p:selectOneMenu>


    <p:confirmDialog id="confirmDialog" widgetVar="confirmDialogWidgetVar"   message="Are you sure you want to select#{home.selectedAction}?">`
    <p:commandButton value="YES" oncomplete="confirmDialogWidgetVar.hide()"/>
    <p:commandButton value="NO" onclick="confirmDialogWidgetVar.hide()"/>
</p:confirmDialog>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16636286" questionTitle="How to call functions on the stage in JavaFX's controller file">
<Answer><![CDATA[import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.*;
import javafx.stage.*;

public class StageTrackingSample extends Application {

  @Override public void start(final Stage stage) throws Exception {
    final FXMLLoader loader = new FXMLLoader(
      getClass().getResource(
        "stagetracking.fxml"
      )
    );

    final Parent root = (Parent) loader.load();
    final StageTrackingController controller = loader.getController();
    controller.initData(stage);

    stage.initStyle(StageStyle.UTILITY);
    stage.setResizable(false);
    stage.setScene(new Scene(root));
    stage.show();
  }

  public static void main(String[] args) { launch(args); }
}]]></Answer>
<Answer><![CDATA[public class AppEntryPoint extends Application
{
    private FXMLLoader loader;

    @Override
    public void init() throws Exception
    {
        loader = new FXMLLoader(getClass().getResource("path-to-fxml-file"));
    }

    @Override
    public void start(Stage initStage) throws Exception
    {
        MyController controller = new MyController(initStage);
        loader.setController(controller);
        Scene scene = loader.load();
        initStage.setScene(scene);
        initStage.show();
    }

    public static void main(String[] args)
    {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16538849" questionTitle="how to use javafx textfield maxlength">
<Answer><![CDATA[import java.awt.Toolkit;
import javafx.scene.control.TextField;

public class DataTextField extends TextField
{
int length;
int compare;

public DatenTextField(int length)
{
    super();
    this.length = length;
}

public void replaceText(int start, int end, String text)
{
    compare = getText().length() - (end - start) + text.length();
    if( compare <= length || start != end)
    {
        super.replaceText( start, end, text );
    }
    else
    {
        Toolkit.getDefaultToolkit().beep();
        show();
    }
}

public void replaceSelection(String text)
{
    compare = getText().length() + text.length();
    if( compare <= length )
    {
        super.replaceSelection( text );
    }
    else
    {
        Toolkit.getDefaultToolkit().beep();
        show();
    }
}
private void show()
{
    final ContextMenu menu = new ContextMenu();
    menu.getItems().add(new MenuItem("This field takes\n"+length+" characters only."));
    menu.show(this, Side.BOTTOM, 0, 0);
}
}]]></Answer>
<Answer><![CDATA[int len = 20;
TextField field = new TextField("max chars: " + len );
// here we reject any change which exceeds the length 
UnaryOperator<Change> rejectChange = c -> {
    // check if the change might effect the validating predicate
    if (c.isContentChange()) {
        // check if change is valid
        if (c.getControlNewText().length() > len) {
            // invalid change
            // sugar: show a context menu with error message
            final ContextMenu menu = new ContextMenu();
            menu.getItems().add(new MenuItem("This field takes\n"+len+" characters only."));
            menu.show(c.getControl(), Side.BOTTOM, 0, 0);
            // return null to reject the change
            return null;
        }
    }
    // valid change: accept the change by returning it
    return c;
};
field.setTextFormatter(new TextFormatter(rejectChange));]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16537821" questionTitle="JAX-WS Web service on Tomcat without sun-jaxws.xml">
<Answer><![CDATA[@WebListener
public class WebServicePublisListener implements ServletContextListener {

    /**
     * Default constructor. 
     */
    public WebServicePublisListener() {
        // TODO Auto-generated constructor stub
    }

    /**
     * @see ServletContextListener#contextInitialized(ServletContextEvent)
     */
    public void contextInitialized(ServletContextEvent sce)  { 
        JaxWsServerFactoryBean srvFactory = new JaxWsServerFactoryBean();
        srvFactory.setServiceClass(RandService.class);
        srvFactory.setAddress("/RandService");
        srvFactory.setServiceBean(new RandServiceImplement());
        srvFactory.create();
    }]]></Answer>
<Answer><![CDATA[@WebListener
public class Listener implements ServletContextAttributeListener, ServletContextListener {

    private final WSServletContextListener listener;

    public Listener() {
        this.listener = new WSServletContextListener();
    }

    @Override
    public void attributeAdded(ServletContextAttributeEvent event) {
        listener.attributeAdded(event);
    }

    @Override
    public void attributeRemoved(ServletContextAttributeEvent event) {
        listener.attributeRemoved(event);
    }

    @Override
    public void attributeReplaced(ServletContextAttributeEvent event) {
        listener.attributeReplaced(event);
    }

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        listener.contextInitialized(sce);
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        listener.contextDestroyed(sce);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16470605" questionTitle="Emulate touch scroll in Java">
<Answer><![CDATA[rect.setOnScroll(new EventHandler<ScrollEvent>() {
        @Override public void handle(ScrollEvent event) {
            if (!event.isInertia()) {
                rect.setTranslateX(rect.getTranslateX() + event.getDeltaX());
                rect.setTranslateY(rect.getTranslateY() + event.getDeltaY());
            }
            log("Rectangle: Scroll event" +
                ", inertia: " + event.isInertia() + 
                ", direct: " + event.isDirect());
            event.consume();
        }
});

rect.setOnScrollStarted(new EventHandler<ScrollEvent>() {
        @Override public void handle(ScrollEvent event) {
            inc(rect);
            log("Rectangle: Scroll started event");
            event.consume();
        }
});

rect.setOnScrollFinished(new EventHandler<ScrollEvent>() {
        @Override public void handle(ScrollEvent event) {
            dec(rect);
            log("Rectangle: Scroll finished event");
            event.consume();
        }
});]]></Answer>
<Answer><![CDATA[import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.JScrollBar;
import javax.swing.JScrollPane;

public class TouchScroll extends JScrollPane implements MouseListener,   MouseMotionListener {
private JScrollBar vbar = this.getVerticalScrollBar();

public TouchScroll(Component view){ // 1-arity CONSTRUCTOR
    super(view);
    view.addMouseListener(this);
    view.addMouseMotionListener(this);
}
public TouchScroll() {  super();    }   // 0-arity CONSTRUCTOR

public void setViewportView(Component view) {
    super.setViewportView(view);
    view.addMouseListener(this);
    view.addMouseMotionListener(this);
}

private static boolean wasdragged = false;  // other MouseListeners may need to know this ...
public boolean wasDragged() {       return wasdragged;  }   // ... this gives them safe access

static int lastY = 0, distY = 0;
double momentum = 0;    // not really physical momentum but it will be used to 'throw' the scroll when the mouse button is released
static boolean lbdown = false;
@Override
public void mouseDragged(MouseEvent e) {
    wasdragged = true;      
    distY = 0;
    int currentY = e.getYOnScreen();
    if(lbdown) {
        distY =  lastY - currentY;
        vbar.setValue(distY + vbar.getValue());
        if(Math.abs(distY) > 1)
            momentum = distY + distY;   // magnify and log the momentum for later use
    }
    lastY = currentY;
}

@Override
public void mousePressed(MouseEvent e) {
    if (e.getButton() == MouseEvent.BUTTON1) {
        lastY = e.getYOnScreen();
        lbdown = true;
    }
}

@Override
public void mouseReleased(MouseEvent e) {
    if (e.getButton() == MouseEvent.BUTTON1)
        lbdown = false;
    if(wasdragged)
        wasdragged = false;

    if(Math.abs(momentum) <= 4.0)   // then assume that the mouse wasn't moving (much) when the button was released
        return;
    // otherwise 'throw' the scroll
    int max = vbar.getMaximum();
    int count;
    double brakingforce = 1.04;     // set an initial braking force
    for(count = 1000; count > 0; count--){  // don't allow it to accidentally go on forever
        momentum = momentum / brakingforce; // apply the brake
        if(Math.abs(momentum) < 1.5)
            brakingforce = 1.02;    // ease off the brake towards the end (gives a slight overrun ala iOS)
        if(Math.abs(momentum) < 1.0)    // bring it to a halt
            break;
        int val = vbar.getValue();
        if(val < 0 || val > max)    // prevent overrun
            break;
        vbar.setValue((int) momentum + val);    // increment the scroll bar
        try {
            Thread.sleep(10);       // slow the loop down so the user can see the scroll
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
    }
}

public void mouseMoved(MouseEvent e) {}
public void mouseClicked(MouseEvent e) {}
public void mouseEntered(MouseEvent e) {}
public void mouseExited(MouseEvent e) {}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16441080" questionTitle="JavaFX textfield: disabling cursor movement">
<Answer><![CDATA[import javafx.application.*;
import javafx.beans.*;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TextFieldControl extends Application {
  @Override public void start(Stage stage) {
    final TextField textField = new TextField("Phone: ");
    textField.addEventFilter(KeyEvent.ANY, new EventHandler<KeyEvent>() {
      @Override
      public void handle(KeyEvent keyEvent) {
        switch (keyEvent.getCode()) {
          // block cursor control keys.
          case LEFT:
          case RIGHT:
          case UP:
          case DOWN:
          case PAGE_UP:
          case PAGE_DOWN:
          case HOME:
          case END:
            keyEvent.consume();

          // allow deletion and tab.
          case DELETE:
          case BACK_SPACE:
          case TAB:
            return;
        }

        // only allow digits and a few punctuation symbols to be entered.
        if (!"0123456789-() ".contains(keyEvent.getCharacter())) {
          keyEvent.consume();
        }
      }
    });

    textField.focusedProperty().addListener(new InvalidationListener() {
      @Override public void invalidated(Observable observable) {
        // due to some weirdness JavaFX will auto select the text when the text field
        // receives focus, so instead deselect and position the caret at the end of the field.
        // Another weird thing is that a pulse must be run before the deselection or caret
        // positioning request occurs or it won't take effect, so a runnable seems to suffic to ensure that.
        Platform.runLater(new Runnable() {
          @Override public void run() {
            textField.deselect();
            textField.positionCaret(textField.getText().length());
          }
        });
      }
    });

    VBox layout = new VBox();
    layout.getChildren().setAll(new VBox(textField, new TextField()));
    stage.setScene(new Scene(layout));
    stage.show();

    textField.requestFocus();
  }

  public static void main(String[] args) {
    launch(args);
  }
}]]></Answer>
<Answer><![CDATA[@FXML
    private void handleKeyPressed(KeyEvent ke){
        //System.out.println(testing.getName());
        Scene scene = (Scene) logoHbox.getScene();
        System.out.println(ke.getCode());

        switch (ke.getCode()) {
            case LEFT:
               Integer previousKey = Integer.parseInt(((Control)ke.getSource()).getId()) - 1;
               System.out.println(previousKey);
               //System.out.println("Key Pressed: " + ((Control)ke.getSource()).getId());
               if(previousKey == 0) {
                   return;
               }
               TextField tb = (TextField) scene.lookup("#"+previousKey);
               tb.requestFocus();
               System.out.println(tb.getText());
                break;

            case RIGHT:
               Integer nextKey = Integer.parseInt(((Control)ke.getSource()).getId()) + 1;
               System.out.println(nextKey);
               if(nextKey == 61) {
                   return;
               }
               //System.out.println("Key Pressed: " + ((Control)ke.getSource()).getId());
               TextField right = (TextField) scene.lookup("#"+nextKey);
               right.requestFocus();
               //System.out.println(tb.getText());
                break;
            case DOWN:
               Integer DownKey = Integer.parseInt(((Control)ke.getSource()).getId()) + 10;
               System.out.println(DownKey);
               if(DownKey == 70) {
                   return;
               }
               //System.out.println("Key Pressed: " + ((Control)ke.getSource()).getId());
               if(DownKey == 61) {
                   DownKey = 2;
               } else if(DownKey == 62) {
                   DownKey = 3;
               } else if(DownKey == 63) {
                   DownKey = 4;
               } else if(DownKey == 64) {
                   DownKey = 5;
               } else if(DownKey == 65) {
                   DownKey = 6;
               } else if(DownKey == 66) {
                   DownKey = 7;
               } else if(DownKey == 67) {
                   DownKey = 8;
               } else if(DownKey == 68) {
                   DownKey = 9;
               } else if(DownKey == 69) {
                   DownKey = 10;
               }
               TextField down = (TextField) scene.lookup("#"+DownKey);
               down.requestFocus();
               //System.out.println(tb.getText());
                break;
            case UP:
               Integer UpKey = Integer.parseInt(((Control)ke.getSource()).getId()) - 10;
               System.out.println(UpKey);
               //System.out.println("Key Pressed: " + ((Control)ke.getSource()).getId());
               if(UpKey == -9) {
                   return;
               }
               if(UpKey == 0) {
                   UpKey = 59;
               } else if(UpKey == -1) {
                   UpKey = 58;
               } else if(UpKey == -2) {
                   UpKey = 57;
               } else if(UpKey == -3) {
                   UpKey = 56;
               } else if(UpKey == -4) {
                   UpKey = 55;
               } else if(UpKey == -5) {
                   UpKey = 54;
               } else if(UpKey == -6) {
                   UpKey = 53;
               } else if(UpKey == -7) {
                   UpKey = 52;
               } else if(UpKey == -8) {
                   UpKey = 51;
               }
               TextField up = (TextField) scene.lookup("#"+UpKey);
               up.requestFocus();
               //System.out.println(tb.getText());
                break;
            case F9:
               clearAll();
               break;
            case TAB:
               break;
            default:
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16384879" questionTitle="auto numbered table rows (javafx)">
<Answer><![CDATA[public class LineNumbersCellFactory<T, E> implements Callback<TableColumn<T, E>, TableCell<T, E>> {

    public LineNumbersCellFactory() {
    }

    @Override
    public TableCell<T, E> call(TableColumn<T, E> param) {
        return new TableCell<T, E>() {
            @Override
            protected void updateItem(E item, boolean empty) {
                super.updateItem(item, empty);

                if (!empty) {
                    setText(this.getTableRow().getIndex() + 1 + "");
                } else {
                    setText("");
                }
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;

public class NumberedTableViewSample extends Application {

    private TableView<Person> table = new TableView<Person>();
    private final ObservableList<Person> data =
        FXCollections.observableArrayList(
            new Person("Jacob", "Smith", "jacob.smith@example.com"),
            new Person("Isabella", "Johnson", "isabella.johnson@example.com"),
            new Person("Ethan", "Williams", "ethan.williams@example.com"),
            new Person("Emma", "Jones", "emma.jones@example.com"),
            new Person("Michael", "Brown", "michael.brown@example.com")
        );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(470);
        stage.setHeight(500);

        final Label label = new Label("Address Book");
        label.setFont(new Font("Arial", 20));

        table.setEditable(true);

        TableColumn numberCol = new TableColumn("#");
        numberCol.setMinWidth(20);
        numberCol.setCellValueFactory(new Callback<CellDataFeatures<Person, Person>, ObservableValue<Person>>() {
            @Override public ObservableValue<Person> call(CellDataFeatures<Person, Person> p) {
                return new ReadOnlyObjectWrapper(p.getValue());
            }
        });

        numberCol.setCellFactory(new Callback<TableColumn<Person, Person>, TableCell<Person, Person>>() {
            @Override public TableCell<Person, Person> call(TableColumn<Person, Person> param) {
                return new TableCell<Person, Person>() {
                    @Override protected void updateItem(Person item, boolean empty) {
                        super.updateItem(item, empty);

                        if (this.getTableRow() != null && item != null) {
                            setText(this.getTableRow().getIndex()+"");
                        } else {
                            setText("");
                        }
                    }
                };
            }
        });
        numberCol.setSortable(false);

        TableColumn firstNameCol = new TableColumn("First Name");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory<Person, String>("firstName"));

        TableColumn lastNameCol = new TableColumn("Last Name");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory<Person, String>("lastName"));

        TableColumn emailCol = new TableColumn("Email");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory<Person, String>("email"));

        table.setItems(data);
        table.getColumns().addAll(numberCol, firstNameCol, lastNameCol, emailCol);

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table);

        ((Group) scene.getRoot()).getChildren().addAll(vbox);
        stage.setScene(scene);
        stage.show();
    }

    public static class Person {

        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;

        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String fName) {
            firstName.set(fName);
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String fName) {
            lastName.set(fName);
        }

        public String getEmail() {
            return email.get();
        }

        public void setEmail(String fName) {
            email.set(fName);
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16153838" questionTitle="Updating TableView row appearance">
<Answer><![CDATA[public class CellDecorator implements Callback<TableColumn, TableCell> {
    private Callback<TableColumn, TableCell> decorated;

    public CellDecorator(Callback<TableColumn, TableCell> toDecorate) {
      this.decorated = toDecorate;
    }

    // Override this to do your thing.
    public abstract void doStyle(TableCell tableCell);

    @Override
    public void style(TableCell tableCell) {
        // Let the decorated styler do its thing.
        decorated.style(tableCell);

        // Now we do our thing.
        doStyle(cell);
    }
}

public class ItemCanceladoCellFactory extends CellDecorator {
    public ItemCanceladoCellFactory(Callback<TableColumn, TableCell> toDecorate) {
      super(toDecorate);
    }

    @Override
    public void doStyle(TableCell tableCell) {
        ...
        if (bean != null && bean.isCancelado())
            getStyleClass().add("itemCancelado");
    }
}

...
colunaCodigo.setCellValueFactory(new ItemCanceladoCellFactory(new MultiPropertyValueFactory<ItemBean, String>("produto.id")));
colunaDescricao.setCellValueFactory(new ItemCanceladoCellFactory(new MultiPropertyValueFactory<ItemBean, String>("produto.descricao")));
colunaDescricao.setCellFactory(new ItemCanceladoCellFactory(new ItemCanceladoCellFactory()));
....]]></Answer>
<Answer><![CDATA[private TableColumn<Friend, Boolean> makeBooleanColumn(String columnName, String propertyName, int prefWidth) {
  TableColumn<Friend, Boolean> column = new TableColumn<>(columnName);
  column.setCellValueFactory(new PropertyValueFactory<Friend, Boolean>(propertyName));
  column.setCellFactory(new Callback<TableColumn<Friend, Boolean>, TableCell<Friend, Boolean>>() {
    @Override public TableCell<Friend, Boolean> call(TableColumn<Friend, Boolean> soCalledFriendBooleanTableColumn) {
      return new TableCell<Friend, Boolean>() {
        @Override public void updateItem(final Boolean item, final boolean empty) {
          super.updateItem(item, empty);

          // clear any custom styles
          this.getStyleClass().remove("willPayCell");
          this.getStyleClass().remove("wontPayCell");
          this.getTableRow().getStyleClass().remove("willPayRow");
          this.getTableRow().getStyleClass().remove("wontPayRow");

          // update the item and set a custom style if necessary
          if (item != null) {
            setText(item.toString());
            this.getStyleClass().add(item ? "willPayCell" : "wontPayCell");
            this.getTableRow().getStyleClass().add(item ? "willPayRow" : "wontPayRow");
          }
        }
      };
    }
  });
  column.setPrefWidth(prefWidth);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="16015623" questionTitle="How to use temp file from which i get inputStream">
<Answer><![CDATA[@Path("/upload/{parentfolderid}")
@Consumes(MediaType.MULTIPART_FORM_DATA)
public Response uploadFileWithPart(FormDataMultiPart form)
    {

        try
        {
            FormDataBodyPart filePart = form.getField("upload");
            BodyPartEntity bodyPart = (BodyPartEntity) filePart.getEntity();

            MIMEPart mimePart = (MIMEPart) readFieldValue("mimePart", bodyPart);
            Object dataHead = readFieldValue("dataHead", mimePart);
            Object dataFile = readFieldValue("dataFile", dataHead);
            File tempFile = null;
            if (dataFile != null)
            {
                Object weakDataFile = readFieldValue("weak", dataFile);
                tempFile = (File) readFieldValue("file", weakDataFile);
            }
            else
            {
                tempFile = filePart.getValueAs(File.class);
            }

    // Here is your *tempFile*, Do what ever you want with it
}

private static Object readFieldValue(String fieldName, Object o) throws Exception
{
    Field field = o.getClass().getDeclaredField(fieldName);
    field.setAccessible(true);
    return field.get(o);
}]]></Answer>
<Answer><![CDATA[private void writeToFile(InputStream uploadedInputStream,
    String location) {

    try {
        OutputStream out = new FileOutputStream(new File(
                location));
        int read = 0;
        byte[] bytes = new byte[1024];

        out = new FileOutputStream(new File(location));
        while ((read = uploadedInputStream.read(bytes)) != -1) {
            out.write(bytes, 0, read);
        }
        out.flush();
        out.close();
    } catch (IOException e) {

        e.printStackTrace();
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15886209" questionTitle="Maven is not working in Java 8 when Javadoc tags are incomplete">
<Answer><![CDATA[<profile>
  <id>doclint-java8-disable</id>
  <activation>
    <jdk>[1.8,)</jdk>
  </activation>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <additionalparam>-Xdoclint:none</additionalparam>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <reportPlugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-javadoc-plugin</artifactId>
              <configuration>
                <additionalparam>-Xdoclint:none</additionalparam>
              </configuration>
            </plugin>
          </reportPlugins>
        </configuration>
      </plugin>
    </plugins>
  </build>
</profile>]]></Answer>
<Answer><![CDATA[<profiles>
  <profile>
    <id>java8-doclint-disabled</id>
    <activation>
      <jdk>[1.8,)</jdk>
    </activation>
    <properties>
      <javadoc.opts>-Xdoclint:none</javadoc.opts>
    </properties>
  </profile>
</profiles>
<build>
  <plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.9</version>
        <executions>
            <execution>
                <id>attach-javadocs</id>
                <goals>
                    <goal>jar</goal>
                </goals>
                <configuration>
                    <additionalparam>${javadoc.opts}</additionalparam>
                </configuration>
            </execution>
        </executions>
    </plugin>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <reportPlugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-javadoc-plugin</artifactId>
              <configuration>
                <additionalparam>${javadoc.opts}</additionalparam>
              </configuration>
            </plugin>
          </reportPlugins>
        </configuration>
      </plugin>
   </plugins>
</build>]]></Answer>
<Answer><![CDATA[<profiles>
  <profile>
    <id>doclint-java8-disable</id>
    <activation>
      <jdk>[1.8,)</jdk>
    </activation>
    <properties>
      <javadoc.opts>-Xdoclint:none</javadoc.opts>
    </properties>
  </profile>
</profiles>

<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-javadoc-plugin</artifactId>
      <version>2.9.1</version>
      <executions>
        <execution>
          <id>attach-javadocs</id> <!-- The actual id should be apparent from maven output -->
          <configuration>
            <additionalparam>${javadoc.opts}</additionalparam>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>]]></Answer>
<Answer><![CDATA[<profiles>
  <profile>
    <id>doclint-java8-disable</id>
    <activation>
      <jdk>[1.8,)</jdk>
    </activation>

    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <configuration>
            <additionalparam>-Xdoclint:none</additionalparam>
          </configuration>
        </plugin>
      </plugins>
    </build>
  </profile>
</profiles>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15860146" questionTitle="How to implement a constantly running process in JavaEE">
<Answer><![CDATA[package clouderial.saas.commons.utils;

import java.util.Map;

import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.ejb.ScheduleExpression;
import javax.ejb.Timeout;
import javax.ejb.Timer;
import javax.ejb.TimerConfig;
import javax.ejb.TimerService;
import javax.inject.Inject;

import jmcnet.libcommun.exception.ExceptionTechnique;
import jmcnet.libcommun.utilit.mail.MailException;

import org.apache.commons.configuration.event.ConfigurationEvent;
import org.apache.commons.configuration.event.ConfigurationListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import clouderial.saas.commons.email.EmailSender;
import clouderial.saas.commons.jpamongo.JPAMongoBasePersistenceContextAccessor;

/**
 * A base class for a periodic process
 * @author jmc
 *
 */
public abstract class PeriodicProcessBase extends JPAMongoBasePersistenceContextAccessor implements ConfigurationListener {
    private static Logger log = LoggerFactory.getLogger(PeriodicProcessBase.class);

    @Resource
    private TimerService timerService;

    @Inject
    protected GlobalConfiguration _config;

    @Inject
    protected EmailSender _emailSender;

    private Timer _timer=null;

    private String _processName=null;
    private Logger _log = null;

    protected void initTimer(String processName, Logger log) {
        if (processName != null) _processName = processName;
        if (log != null) _log = log;

        String second    = _config.getString("timer."+_processName+".second","0");
        String minute    = _config.getString("timer."+_processName+".minute","0");
        String hour      = _config.getString("timer."+_processName+".hours","4");
        String dayOfWeek = _config.getString("timer."+_processName+".dayOfWeek","*");

        ScheduleExpression scheduleExp =
                new ScheduleExpression().second(second).minute(minute).hour(hour).dayOfWeek(dayOfWeek);

        cancelTimer();
        if (timerService != null) { 
            _timer = timerService.createCalendarTimer(scheduleExp, new TimerConfig(_processName, false));
            _log.info("{} : timer programmed for '{}'h, '{}'m, '{}'s for days '{}'.", _processName, hour, minute, second, dayOfWeek);
        }
        else _log.error("{} : no timer programmed because timerService is not initialized. (Normal during tests)", _processName);

        // Listen to change
        _config.addModificationListener(this); // on timer modification, configurationChanged is called
    }

    @PreDestroy
    private void cancelTimer() {
        if (_log != null) _log.info("Stopping timer for '{}'", _processName);
        if (_timer != null) _timer.cancel();
        _timer = null;
    }

    @Override
    public void configurationChanged(ConfigurationEvent event) {
        if (_log != null) _log.info("Configuration have change. Reloading config for ProcessBilling.");
        _config.removeModificationListener(this);
        initTimer(null, null);
    }

    @Timeout
    private void run(Timer timer) {
        runProcess(timer);
    }

    /**
     * The entry point for runner the process. Must be overriden by super class
     * @param timer
     */
    protected abstract void runProcess(Timer timer); // do the job here

}]]></Answer>
<Answer><![CDATA[@Singleton
...
public TimerMangerbean implements TimerManager {

   @Resource
   private TimerService timerService;

   public void startMonitoring() {
      //start in 5 sec and timeout every 10 minutes
      Timer timer = timerService.createTimer(5000, 60000, "MyTimer");
   }

   public void stopMonitoring() {
      Collection<Timer> timers = timerService.getTimers();
      for(Timer timer : timers) {
         //look for your timer
         if("MyTimer".equals(timer.getInfo())) {
            timer.cancel();break;
         }
      }
   }

   //called every 10 minutes
   @Timeout
   public void onTimeout() {
      //verify the condition and do your processing
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15859856" questionTitle="JavaFX, TableView and JPA">
<Answer><![CDATA[@Entity
public class Item implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @ManyToOne
    private Album album;

    @Column(name = "nome")
    private String nome;

    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "data_criacao")
    private Calendar dataCriacao;

    @Column(name = "data_imagem")
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    private Calendar dataImagem;

    @Lob
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "imagem")
    private byte[] imagem;

    @Column(name = "tipo_imagem")
    private String tipoImagem;

    @Column(name = "descricao")
    private String descricao;

    @Column(name = "tags")
    private String tags;

    ...
}]]></Answer>
<Answer><![CDATA[public class MaterialeProperty {
    private Materiale materiale;

    public MaterialeProperty (Materiale materiale) {

        this.materiale= materiale;

        this.setId(materiale.getId());

    }

    private LongProperty id = new SimpleLongProperty() {

        public void set(long l) {
            super.set(l);
            materiale.setId(l);
        }
    };

    public final Long getId() {
        return id.get();
    }

    public final void setId(Long value) {
        id.set(value);
    }

    public LongProperty idProperty() {
        return id;
    }

    ....

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15661500" questionTitle="JavaFX - ListView Item with an Image Button">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.stage.Stage;


public class ListViewDemo extends Application {

     public static class HBoxCell extends HBox {
          Label label = new Label();
          Button button = new Button();

          HBoxCell(String labelText, String buttonText) {
               super();

               label.setText(labelText);
               label.setMaxWidth(Double.MAX_VALUE);
               HBox.setHgrow(label, Priority.ALWAYS);

               button.setText(buttonText);

               this.getChildren().addAll(label, button);
          }
     }

     public Parent createContent() {
          BorderPane layout = new BorderPane();

          List<HBoxCell> list = new ArrayList<>();
          for (int i = 0; i < 12; i++) {
               list.add(new HBoxCell("Item " + i, "Button " + i));
          }

          ListView<HBoxCell> listView = new ListView<HBoxCell>();
          ObservableList<HBoxCell> myObservableList = FXCollections.observableList(list);
          listView.setItems(myObservableList);

          layout.setCenter(listView);

          return layout;
     }

     @Override
     public void start(Stage stage) throws Exception {
          stage.setScene(new Scene(createContent()));
          stage.setWidth(300);
          stage.setHeight(200);
          stage.show();
     }

     public static void main(String args[]) {
          launch(args);
     }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class SO extends Application {
    static class XCell extends ListCell<String> {
        HBox hbox = new HBox();
        Label label = new Label("(empty)");
        Pane pane = new Pane();
        Button button = new Button("(>)");
        String lastItem;

        public XCell() {
            super();
            hbox.getChildren().addAll(label, pane, button);
            HBox.setHgrow(pane, Priority.ALWAYS);
            button.setOnAction(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent event) {
                    System.out.println(lastItem + " : " + event);
                }
            });
        }

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            setText(null);  // No text in label of super class
            if (empty) {
                lastItem = null;
                setGraphic(null);
            } else {
                lastItem = item;
                label.setText(item!=null ? item : "<null>");
                setGraphic(hbox);
            }
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        StackPane pane = new StackPane();
        Scene scene = new Scene(pane, 300, 150);
        primaryStage.setScene(scene);
        ObservableList<String> list = FXCollections.observableArrayList(
                "Item 1", "Item 2", "Item 3", "Item 4");
        ListView<String> lv = new ListView<>(list);
        lv.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
            @Override
            public ListCell<String> call(ListView<String> param) {
                return new XCell();
            }
        });
        pane.getChildren().add(lv);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15555510" questionTitle="JavaFX stop opening URL in WebView - open in browser instead">
<Answer><![CDATA[class AboutDialog extends Dialog {
    private final Controller controller;
    private final String url;

    AboutDialog() {
        super();

        this.controller = Controller.getInstance();

        this.setTitle(controller.getProperty("about_title"));
        this.setHeaderText(null);

        this.url = getClass().getResource("/about_dialog.html").toExternalForm();

        this.setWebView();

        this.getDialogPane().getButtonTypes().add(new ButtonType(controller.getProperty("close"), ButtonBar.ButtonData.CANCEL_CLOSE));
        this.getDialogPane().setPrefWidth(600);
    }

    private void setWebView() {
        final WebView webView = new WebView();
        webView.getEngine().load(url);

        webView.getEngine().locationProperty().addListener((observable, oldValue, newValue) -> {
            controller.getMainFxApp().getHostServices().showDocument(newValue);
            Platform.runLater(this::setWebView);
        });

        this.getDialogPane().setContent(webView);
    }
}]]></Answer>
<Answer><![CDATA[public static class BrowserPopupHandler implements Callback<PopupFeatures, WebEngine>
{

    private WebEngine popupHandlerEngine;

    public WebEngine call(PopupFeatures popupFeatures)
    {
        // by returning null here the action would be canceled
        // by returning a different WebEngine (than the main one where we register our listener) the load-call will go to that one
        // we return a different WebEngine here and register a location change listener on it (see blow)
        return getPopupHandler();
    }

    private WebEngine getPopupHandler()
    {
        if (popupHandlerEngine == null) // lazy init - so we only initialize it when needed ...
        {
            synchronized (this) // double checked synchronization
            {
                if (popupHandlerEngine == null)
                {
                    popupHandlerEngine = initEngine();
                }
            }
        }
        return popupHandlerEngine;
    }

    private WebEngine initEngine()
    {
        final WebEngine popupHandlerEngine = new WebEngine();

        // this change listener will trigger when our secondary popupHandlerEngine starts to load the url ...
        popupHandlerEngine.locationProperty().addListener(new ChangeListener<String>()
        {

            public void changed(ObservableValue<? extends String> observable, String oldValue, String location)
            {
                if (!location.isEmpty())
                {
                    Platform.runLater(new Runnable()
                    {

                        public void run()
                        {
                            popupHandlerEngine.loadContent(""); // stop loading and unload the url
                            // -> does this internally: popupHandlerEngine.getLoadWorker().cancelAndReset();
                        }

                    });

                    try
                    {
                        // Open URL in Browser:
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.BROWSE))
                        {
                            URI uri = new URI(location);
                            desktop.browse(uri);
                        }
                        else
                        {
                            System.out.println("Could not load URL: " + location);
                        }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }

        });
        return popupHandlerEngine;
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.*;
import javafx.beans.value.*;
import javafx.scene.Scene;
import javafx.scene.web.*;
import javafx.stage.Stage;

public class GoogleBlock extends Application {
  public static void main(String[] args) throws Exception { launch(args); }

  @Override public void start(final Stage stage) throws Exception {
    final WebView webView = new WebView();
    final WebEngine engine = webView.getEngine();
    engine.load("http://www.google.com");
    engine.locationProperty().addListener(new ChangeListener<String>() {
      @Override public void changed(ObservableValue<? extends String> ov, final String oldLoc, final String loc) {
        if (!loc.contains("google.com")) {
          Platform.runLater(new Runnable() {
            @Override public void run() {
              engine.load(oldLoc);
            }
          });
        }
      }
    });

    stage.setScene(new Scene(webView));
    stage.show();
  }
}]]></Answer>
<Answer><![CDATA[public class HyperlinkRedirectListener implements ChangeListener<Worker.State>, EventListener {
private static final Logger LOGGER = LoggerFactory.getLogger(HyperlinkRedirectListener.class);

private static final String CLICK_EVENT = "click";
private static final String ANCHOR_TAG = "a";

private final WebView webView;

public HyperlinkRedirectListener(WebView webView) {
    this.webView = webView;
}

@Override
public void changed(ObservableValue<? extends State> observable, State oldValue, State newValue) {
    if (State.SUCCEEDED.equals(newValue)) {
        Document document = webView.getEngine().getDocument();
        NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);
        for (int i = 0; i < anchors.getLength(); i++) {
            Node node = anchors.item(i);
            EventTarget eventTarget = (EventTarget) node;
            eventTarget.addEventListener(CLICK_EVENT, this, false);
        }
    }
}

@Override
public void handleEvent(Event event) {
    HTMLAnchorElement anchorElement = (HTMLAnchorElement)event.getCurrentTarget();
    String href = anchorElement.getHref();

    if (Desktop.isDesktopSupported()) {
        openLinkInSystemBrowser(href);
    } else {
        LOGGER.warn("OS does not support desktop operations like browsing. Cannot open link '{}'.", href);
    }

    event.preventDefault();
}

private void openLinkInSystemBrowser(String url) {
    LOGGER.debug("Opening link '{}' in default system browser.", url);

    try {
        URI uri = new URI(url);
        Desktop.getDesktop().browse(uri);
    } catch (Throwable e) {
        LOGGER.error("Error on opening link '{}' in system browser.", url);
    }
}]]></Answer>
<Answer><![CDATA[// intercept target=_blank hyperlinks
webView.getEngine().setCreatePopupHandler(
    new Callback<PopupFeatures, WebEngine>() {
        @Override
        public WebEngine call(PopupFeatures config) {
            // grab the last hyperlink that has :hover pseudoclass
            Object o = webView
                    .getEngine()
                    .executeScript(
                            "var list = document.querySelectorAll( ':hover' );"
                                    + "for (i=list.length-1; i>-1; i--) "
                                    + "{ if ( list.item(i).getAttribute('href') ) "
                                    + "{ list.item(i).getAttribute('href'); break; } }");

            // open in native browser
            try {
                if (o != null) {
                    Desktop.getDesktop().browse(
                            new URI(o.toString()));
                } else {
                    log.error("No result from uri detector: " + o);
                }
            } catch (IOException e) {
                log.error("Unexpected error obtaining uri: " + o, e);
            } catch (URISyntaxException e) {
                log.error("Could not interpret uri: " + o, e);
            }

            // prevent from opening in webView
            return null;
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15506426" questionTitle="JavaFx ProgressBar doesnt update">
<Answer><![CDATA[/*hack to get progress bar working. From: JDK7u17 jfxrt.jar!/com/sun/javafx/scene/control/skin/caspian/caspian.css */

/*******************************************************************************
 *                                                                             *
 * ProgressBar                                                                 *
 *                                                                             *
 ******************************************************************************/

.progress-bar {
    -fx-skin: "com.sun.javafx.scene.control.skin.ProgressBarSkin";
    -fx-background-color:
        -fx-box-border,
        linear-gradient(to bottom, derive(-fx-color,30%) 5%, derive(-fx-color,-17%));
    -fx-background-insets: 0, 1;
    -fx-indeterminate-bar-length: 60;
    -fx-indeterminate-bar-escape: true;
    -fx-indeterminate-bar-flip: true;
    -fx-indeterminate-bar-animation-time: 2;
    -fx-focus-traversable: true;
}

.progress-bar .bar {
    -fx-background-color:
        -fx-box-border,
        linear-gradient(to bottom, derive(-fx-accent,95%), derive(-fx-accent,10%)),
        linear-gradient(to bottom, derive(-fx-accent,38%), -fx-accent);
    -fx-background-insets: 0, 1, 2;
    -fx-padding: 0.416667em; /* 5 */
}

.progress-bar:indeterminate .bar {
    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);
}

.progress-bar .track {
     -fx-background-color:
        -fx-box-border,
        linear-gradient(to bottom, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
    -fx-background-insets:  0, 1;
}

.progress-bar:disabled {
    -fx-opacity: 1.0
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class ProgressTest extends Application {
  public static void main(String[] args) { Application.launch(args); }
  @Override public void start(Stage stage) {
    Task<Void> task = new Task<Void>() {
      @Override public Void call() {
        for (int i = 0; i < 10; i++) {
          try {
            Thread.sleep(100);
          } catch (InterruptedException e) {
            Thread.interrupted();
            break;
          }
          System.out.println(i + 1);
          updateProgress(i + 1, 10);
        }
        return null;
      }
    };

    ProgressBar updProg = new ProgressBar();
    updProg.progressProperty().bind(task.progressProperty());

    Thread th = new Thread(task);
    th.setDaemon(true);
    th.start();

    StackPane layout = new StackPane();
    layout.setStyle("-fx-background-color: cornsilk; -fx-padding: 10;");
    layout.getChildren().add(updProg);

    stage.setScene(new Scene(layout));
    stage.show();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15252387" questionTitle="Primefaces chart + jqplot extender - rounded value in the y-axis">
<Answer><![CDATA[// This is YOUR data set
var series = [882, 38, 66, 522, 123, 400, 777];

// Instead of letting JQPlot pick the scale on the y-axis, let's figure out our own.
var series_max =  Math.max.apply(null, series);
var digits = max.toString().length;
var scale = Math.pow(10, max_digits - 1);

var max = (Math.ceil(series_max / scale)) * scale;

$.jqplot(
    'foo',
    [series],
    {
        axes: {
            yaxis: {
                min: 0,
                max: max
            }
        }
        // Put your other config stuff here
    }
)]]></Answer>
<Answer><![CDATA[function actionPlanExtender() {
        var series_max =maxSeries(this.cfg.data);
        var numberOfTicks =4;
        var tickInterval = Math.max(1, Math.ceil(series_max/numberOfTicks));
        this.cfg.axes = {
            xaxis : {
                renderer : $.jqplot.DateAxisRenderer, 
                rendererOptions : {
                    tickRenderer:$.jqplot.CanvasAxisTickRenderer
                },
                tickOptions : { 
                    fontSize:'10pt',
                    fontFamily:'Tahoma', 
                    angle:-40,                     
                    formatString:'%b-%y'
                },
                tickInterval:'2592000000'
            },
            yaxis : {
                min: 0,
                rendererOptions : {
                    tickRenderer:$.jqplot.CanvasAxisTickRenderer,
                },
                tickOptions: {
                    fontSize:'10pt', 
                    fontFamily:'Tahoma', 
                    angle:0,
                    formatString: '%d',
                },
                tickInterval: tickInterval
            },
        };
        this.cfg.axes.xaxis.ticks = this.cfg.categories;
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15238928" questionTitle="JavaFX: How to change the focus traversal policy?">
<Answer><![CDATA[/**
 * Requirement: configure focus traversal
 * old question with old hack (using internal api):
 * http://stackoverflow.com/q/15238928/203657
 * 
 * New question (closed as duplicate by ... me ..)
 * http://stackoverflow.com/q/30094080/203657
 * Old hack doesn't work, change of internal api
 * rewritten to new internal (sic!) api
 * 
 */
public class FocusTraversal extends Application {

    private Parent getContent() {
        final VBox vb = new VBox();

        final Button button1 = new Button("Button 1");
        final Button button2 = new Button("Button 2");
        final Button button3 = new Button("Button 3");

        Algorithm algo = new Algorithm() {

            @Override
            public Node select(Node node, Direction dir,
                    TraversalContext context) {
                Node next = trav(node, dir);
                return next;
            }

            /**
             * Just for fun: implemented to invers reaction
             */
            private Node trav(Node node, Direction drctn) {
                int index = vb.getChildren().indexOf(node);

                switch (drctn) {
                    case DOWN:
                    case RIGHT:
                    case NEXT:
                    case NEXT_IN_LINE:    
                        index--;
                        break;
                    case LEFT:
                    case PREVIOUS:
                    case UP:
                        index++;
                }

                if (index < 0) {
                    index = vb.getChildren().size() - 1;
                }
                index %= vb.getChildren().size();

                System.out.println("Select <" + index + ">");

                return vb.getChildren().get(index);
            }

            @Override
            public Node selectFirst(TraversalContext context) {
                return vb.getChildren().get(0);
            }

            @Override
            public Node selectLast(TraversalContext context) {
                return vb.getChildren().get(vb.getChildren().size() - 1);
            }

        };
        ParentTraversalEngine engine = new ParentTraversalEngine(vb, algo);
        vb.setImpl_traversalEngine(engine);

        vb.getChildren().addAll(button1, button2, button3);
        return vb;
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(getContent()));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public void start(Stage stage) throws Exception {
    final VBox vb = new VBox();

    final Button button1 = new Button("Button 1");
    final Button button2 = new Button("Button 2");
    final Button button3 = new Button("Button 3");

    TraversalEngine engine = new TraversalEngine(vb, false) {
        @Override
        public void trav(Node node, Direction drctn) {
            int index = vb.getChildren().indexOf(node);

            switch (drctn) {
                case DOWN:
                case RIGHT:
                case NEXT:
                    index++;
                    break;
                case LEFT:
                case PREVIOUS:
                case UP:
                    index--;
            }

            if (index < 0) {
                index = vb.getChildren().size() - 1;
            }
            index %= vb.getChildren().size();

            System.out.println("Select <" + index + ">");

            vb.getChildren().get(index).requestFocus();
        }
    };

    vb.setImpl_traversalEngine(engine);

    vb.getChildren().addAll(button1, button2, button3);
    Scene scene = new Scene(vb);
    stage.setScene(scene);
    stage.show();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="15159988" questionTitle="JavaFX 2.2 TextField maxlength">
<Answer><![CDATA[package fx.mycontrols;

public class TextFieldLimited extends TextField {  
    private int maxlength;
    public TextFieldLimited() {
        this.maxlength = 10;
    }
    public void setMaxlength(int maxlength) {
        this.maxlength = maxlength;
    }
    @Override
    public void replaceText(int start, int end, String text) {
        // Delete or backspace user input.
        if (text.equals("")) {
            super.replaceText(start, end, text);
        } else if (getText().length() < maxlength) {
            super.replaceText(start, end, text);
        }
    }

    @Override
    public void replaceSelection(String text) {
        // Delete or backspace user input.
        if (text.equals("")) {
            super.replaceSelection(text);
        } else if (getText().length() < maxlength) {
            // Add characters, but don't exceed maxlength.
            if (text.length() > maxlength - getText().length()) {
                text = text.substring(0, maxlength- getText().length());
            }
            super.replaceSelection(text);
        }
    }
}]]></Answer>
<Answer><![CDATA[class LimitedTextField extends TextField {

    private final int limit;

    public LimitedTextField(int limit) {
        this.limit = limit;
    }

    @Override
    public void replaceText(int start, int end, String text) {
        super.replaceText(start, end, text);
        verify();
    }

    @Override
    public void replaceSelection(String text) {
        super.replaceSelection(text);
        verify();
    }

    private void verify() {
        if (getText().length() > limit) {
            setText(getText().substring(0, limit));
        }

    }
};]]></Answer>
<Answer><![CDATA[// fired by every text property change
textField.textProperty().addListener(
  (observable, oldValue, newValue) -> {
    // Your validation rules, anything you like
      // (! note 1 !) make sure that empty string (newValue.equals("")) 
      //   or initial text is always valid
      //   to prevent inifinity cycle
    // do whatever you want with newValue

    // If newValue is not valid for your rules
    ((StringProperty)observable).setValue(oldValue);
      // (! note 2 !) do not bind textProperty (textProperty().bind(someProperty))
      //   to anything in your code.  TextProperty implementation
      //   of StringProperty in TextFieldControl
      //   will throw RuntimeException in this case on setValue(string) call.
      //   Or catch and handle this exception.

    // If you want to change something in text
      // When it is valid for you with some changes that can be automated.
      // For example change it to upper case
    ((StringProperty)observable).setValue(newValue.toUpperCase());
  }
);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14878788" questionTitle="JavaFX - Background Thread for SQL Query">
<Answer><![CDATA[// fetches a collection of names from a database.
class FetchNamesTask extends DBTask<ObservableList<String>> {
  @Override protected ObservableList<String> call() throws Exception {
    // artificially pause for a while to simulate a long 
    // running database connection.
    Thread.sleep(1000); 

    try (Connection con = getConnection()) {
      return fetchNames(con);
    }
  }

  private ObservableList<String> fetchNames(Connection con) throws SQLException {
    logger.info("Fetching names from database");
    ObservableList<String> names = FXCollections.observableArrayList();

    Statement st = con.createStatement();      
    ResultSet rs = st.executeQuery("select name from employee");
    while (rs.next()) {
      names.add(rs.getString("name"));
    }

    logger.info("Found " + names.size() + " names");

    return names;
  }
}

// loads a collection of names fetched from a database into a listview.
// displays a progress indicator and disables the trigge button for
// the operation while the data is being fetched.
private void fetchNamesFromDatabaseToListView(
        final Button triggerButton, 
        final ProgressIndicator databaseActivityIndicator, 
        final ListView listView) {
  final FetchNamesTask fetchNamesTask = new FetchNamesTask();
  triggerButton.setDisable(true);
  databaseActivityIndicator.setVisible(true);
  databaseActivityIndicator.progressProperty().bind(fetchNamesTask.progressProperty());
  fetchNamesTask.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
    @Override public void handle(WorkerStateEvent t) {
      listView.setItems(fetchNamesTask.getValue());
    }
  });
  fetchNamesTask.runningProperty().addListener(new ChangeListener<Boolean>() {
    @Override public void changed(ObservableValue<? extends Boolean> observable, Boolean wasRunning, Boolean isRunning) {
      if (!isRunning) {
        triggerButton.setDisable(false);
        databaseActivityIndicator.setVisible(false);
      }
    };
  });
  databaseExecutor.submit(fetchNamesTask);
}

private Connection getConnection() throws ClassNotFoundException, SQLException {
  logger.info("Getting a database connection");
  Class.forName("org.h2.Driver");
  return DriverManager.getConnection("jdbc:h2:~/test", "sa", "");
}  

abstract class DBTask<T> extends Task<T> {
  DBTask() {
    setOnFailed(new EventHandler<WorkerStateEvent>() {
      @Override public void handle(WorkerStateEvent t) {
        logger.log(Level.SEVERE, null, getException());
      }
    });
  }
}

// executes database operations concurrent to JavaFX operations.
private ExecutorService databaseExecutor = Executors.newFixedThreadPool(
  1, 
  new DatabaseThreadFactory()
);  

static class DatabaseThreadFactory implements ThreadFactory {
  static final AtomicInteger poolNumber = new AtomicInteger(1);

  @Override public Thread newThread(Runnable runnable) {
    Thread thread = new Thread(runnable, "Database-Connection-" + poolNumber.getAndIncrement() + "-thread");
    thread.setDaemon(true);

    return thread;
  }
}]]></Answer>
<Answer><![CDATA[public void getSalesData() {
    try {
        Connection con = DriverManager.getConnection(connectionUrl);
        //Get all records from table
        String SQL = "EXEC dbo.Order_Information";
        try (Statement stmt = con.createStatement(); ResultSet rs =
                        stmt.executeQuery(SQL)) {
            while (rs.next()) {

                todayTot = Double.parseDouble(rs.getString(7));
                weekTot = Double.parseDouble(rs.getString(8));
                monthTot = Double.parseDouble(rs.getString(9));
                yearTot = Double.parseDouble(rs.getString(10));
                yearTar = Double.parseDouble(rs.getString(11));
                monthTar = Double.parseDouble(rs.getString(12));
                weekTar = Double.parseDouble(rs.getString(13));
                todayTar = Double.parseDouble(rs.getString(14));
                deltaValue = Double.parseDouble(rs.getString(17));

                yearPer = yearTot / yearTar * 100;
                monthPer = monthTot / monthTar * 100;
                weekPer = weekTot / weekTar * 100;
                todayPer = todayTot / todayTar * 100;

                //Doesn't update UI unless you add the update code to Platform.runLater...
                Platform.runLater(new Runnable() {
                    public void run() {
                        todayTotal.setText("£" + formatter.format(todayTot));
                        weekTotal.setText("£" + formatter.format(weekTot));
                        monthTotal.setText("£" + formatter.format(monthTot));
                        yearTotal.setText("£" + formatter.format(yearTot));
                        yearTarget.setText("£" + formatter.format(yearTar));
                        monthTarget.setText("£" + formatter.format(monthTar));
                        weekTarget.setText("£" + formatter.format(weekTar));
                        todayTarget.setText("£" + formatter.format(todayTar));
                        yearPercent.setText(percentFormatter.format(yearPer) + "%");
                        currentDelta.setText("Current Delta (Week Ends): £"
                                + formatter.format(deltaValue));
                    }
                });

            }
        }

    } catch (SQLException | NumberFormatException e) {
    }
}


    public void databaseThreadTester() {
    fetchDataFromDB();
}

private void fetchDataFromDB() {
    final testController.FetchNamesTask fetchNamesTask = new testController.FetchNamesTask();
    databaseActivityIndicator.setVisible(true);
    databaseActivityIndicator.progressProperty().bind(fetchNamesTask.progressProperty());
    fetchNamesTask.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
        @Override
        public void handle(WorkerStateEvent t) {
        }
    });
    fetchNamesTask.runningProperty().addListener(new ChangeListener<Boolean>() {
        @Override
        public void changed(ObservableValue<? extends Boolean> observable, Boolean wasRunning, Boolean isRunning) {
            if (!isRunning) {
                databaseActivityIndicator.setVisible(false);
            }
        }
    ;
    });
databaseExecutor.submit(fetchNamesTask);
}

abstract class DBTask<T> extends Task {

    DBTask() {
        setOnFailed(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent t) {
            }
        });
    }
}

class FetchNamesTask extends testController.DBTask {

    @Override
    protected String call() throws Exception {

        fetchNames();

        return null;
    }

    private void fetchNames() throws SQLException, InterruptedException {
        Thread.sleep(5000);
        getTopOrders();
        getSalesData();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14755968" questionTitle="Javafx: drawing on ImageView with the mouse">
<Answer><![CDATA[package sample;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import java.net.URL;
import java.util.ResourceBundle;

public class Controller implements Initializable{

    @FXML private ImageView img;

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        Image[] i={null};
        i[0]=new Image("file:\\"+"C:\\Users\\Ragib\\Desktop\\a.jpg");
        img.setFitHeight(i[0].getHeight());
        img.setFitWidth(i[0].getWidth());
        img.setImage(i[0]);

        img.setOnMouseDragged(event -> {
            double x=event.getX();
            double y=event.getY();
            WritableImage wi=new WritableImage(i[0].getPixelReader(),(int)i[0].getWidth(),(int)i[0].getHeight());
            PixelWriter pw=wi.getPixelWriter();
            pw.setColor((int)x,(int)y,new Color(0,0,0,1));
            i[0]=wi;
            img.setImage(i[0]);
        });
    }
}]]></Answer>
<Answer><![CDATA[AnchorPane anchorRoot;
    double initX;
    double initY;
    ImageView iv = new ImageView(image);
    final double maxX = iv.getImage().getWidth();
    final double maxY = iv.getImage().getHeight();

    anchorRoot.getChildren().add(iv);

    iv.setOnMousePressed(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent me) {
            //System.out.println("Clicked, x:" + me.getSceneX() + " y:" + me.getSceneY());
            //the event will be passed only to the circle which is on front
            initX = me.getSceneX();
            initY = me.getSceneY();
            me.consume();
        }
    });
    iv.setOnMouseDragged(new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent me) {
            //System.out.println("Dragged, x:" + me.getSceneX() + " y:" + me.getSceneY());
            if (me.getSceneX() < maxX && me.getSceneY() < maxY) {
                Line line = new Line(initX, initY, me.getSceneX(), me.getSceneY());
                line.setFill(null);
                line.setStroke(Color.RED);
                line.setStrokeWidth(2);
                anchorRoot.getChildren().add(line);
            }

            initX = me.getSceneX() > maxX ? maxX : me.getSceneX();
            initY = me.getSceneY() > maxY ? maxY : me.getSceneY();
        }
    });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14723664" questionTitle="Change scene in full screen JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBoxBuilder;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Test extends Application {
    private Stage primaryStage;

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        this.primaryStage.setFullScreen(true);
        Button btn = new Button("Login");
        btn.setOnAction(loginClienteHandler());

        StackPane root = new StackPane();
        root.getChildren().add(btn);

        Scene scene = new Scene(root, 300, 250);

        primaryStage.setTitle("JavaFX version: " + com.sun.javafx.runtime.VersionInfo.getRuntimeVersion());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public EventHandler loginClienteHandler() {
        EventHandler evh = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                primaryStage.setScene(new Scene(VBoxBuilder.create().children(new Text("text")).build()));
                primaryStage.sizeToScene();
                primaryStage.setFullScreen(false);
                primaryStage.setFullScreen(true);
            }
        };
        return evh;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public void start(Stage primaryStage) {

            // Start of program
            setUpGame();

            // MENU
            // Setting up menu stage
            primaryStage.setTitle("My cool game");
            primaryStage.setResizable(false);
            primaryStage.setFullScreen(true);
            primaryStage.setFullScreenExitHint("");

            // Setting up grid pane
            mod.getMenuGrid().setAlignment(Pos.CENTER);
            mod.getMenuGrid().setHgap(10);
            mod.getMenuGrid().setVgap(10);
            mod.getMenuGrid().setPadding(new Insets(25, 25, 25, 25));

            ... More code until I'm changing scene ... 
    }

    private void startGame(Stage primaryStage) {
        setNames();
        createPlayers();
        setUpGameScene();
        primaryStage.setScene(mod.getGameScene());
        primaryStage.setFullScreen(true);
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14650787" questionTitle="javafx column in tableview auto fit size">
<Answer><![CDATA[import com.sun.javafx.scene.control.skin.TableViewSkin;
import javafx.scene.control.Skin;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class GUIUtils {
    private static Method columnToFitMethod;

    static {
        try {
            columnToFitMethod = TableViewSkin.class.getDeclaredMethod("resizeColumnToFitContent", TableColumn.class, int.class);
            columnToFitMethod.setAccessible(true);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }

    public static void autoFitTable(TableView tableView) {
        tableView.getItems().addListener(new ListChangeListener<Object>() {
            @Override
            public void onChanged(Change<?> c) {
                for (Object column : tableView.getColumns()) {
                    try {
                        columnToFitMethod.invoke(tableView.getSkin(), column, -1);
                    } catch (IllegalAccessException | InvocationTargetException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[// To generalize the columns width proportions in relation to the table width,
        // you do not need to put pixel related values, you can use small float numbers if you wish,
        // because it's the relative proportion of each columns width what matters here:

        final float[] widths = { 1.2f, 2f, 0.8f };// define the relational width of each column 

        // whether the first column should be fixed
        final boolean fixFirstColumm = true; 

        // fix the first column width when table width is lower than:
        final float fixOnTableWidth = 360; //pixels 

        // calulates sum of widths
        float sum = 0;
        for (double i : widths) {
            sum += i;
        }

        // calculates the fraction of the first column proportion in relation to the sum of all column proportions
        float firstColumnProportion = widths[0] / sum;

        // calculate the fitting fix width for the first column, you can change it by your needs, but it jumps to this width
        final float firstColumnFixSize = fixOnTableWidth * firstColumnProportion;

        // set the width to the columns
        for (int i = 0; i < widths.length; i++) {
            table.getColumns().get(i).prefWidthProperty().bind(table.widthProperty().multiply((widths[i] / sum)));
            // ---------The exact width-------------^-------------^
    if (fixFirstColumm)
            if (i == 0) {
                table.widthProperty().addListener(new ChangeListener<Number>() {
                    @Override
                    public void changed(ObservableValue<? extends Number> arg0, Number oldTableWidth, Number newTableWidth) {

                        if (newTableWidth.intValue() <= fixOnTableWidth) {

                            // before you can set new value to column width property, need to unbind the autoresize binding
                            table.getColumns().get(0).prefWidthProperty().unbind();
                            table.getColumns().get(0).prefWidthProperty().setValue(firstColumnFixSize);

                        } else if (!table.getColumns().get(0).prefWidthProperty().isBound()) {

                            // than readd the autoresize binding if condition table.width > x
                            table.getColumns().get(0).prefWidthProperty()
                                    .bind(table.widthProperty().multiply(firstColumnProportion));
                        }

                    }
                });
            }
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14562027" questionTitle="Inserting data in a TableView Javafx">
<Answer><![CDATA[public class MetaDadosInfo {
    private SimpleIntegerProperty codigoInstituicao;
    private SimpleIntegerProperty ano;
    private SimpleLongProperty size;
    private SimpleStringProperty type;
    private SimpleStringProperty name;

    public MetaDadosInfo(int codigoInstituicao, int ano, long size, String type, String name) {
        this.codigoInstituicao = new SimpleIntegerProperty (codigoInstituicao);
        this.ano = new SimpleIntegerProperty (ano);
        this.size = new SimpleLongProperty (size);
        this.type = new SimpleStringProperty (type);
        this.name = new SimpleStringProperty (name);
    }

    public int getCodigoInstituicao() {
        return codigoInstituicao.get();
    }

    public void setCodigoInstituicao(int codigoInstituicao) {
        this.codigoInstituicao.set(codigoInstituicao);
    }

    public int getAno() {
        return ano.get();
    }

    public void setAno(int ano) {
        this.ano.set(ano);
    }

    public Long getSize() {
        return size.get();
    }

    public void setSize(long size) {
        this.size.set(size);
    }

    public String getType() {
        return type.get();
    }

    public void setType(String type) {
        this.type.set(type);
    }

    public String getName() {
        return name.get();
    }

    public void setName(String name) {
        this.name.set(name);
    }

}]]></Answer>
<Answer><![CDATA[package test;

import java.util.HashMap;
import java.util.Map;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.StringConverter;

public class Test extends Application {

    public static final String Column1MapKey = "A";
    public static final String Column2MapKey = "B";

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle("Table View Sample");
        stage.setWidth(300);
        stage.setHeight(500);
        final Label label = new Label("Student IDs");
        label.setFont(new Font("Arial", 20));
        TableColumn<Map, String> firstDataColumn = new TableColumn<>("Class A");
        TableColumn<Map, String> secondDataColumn = new TableColumn<>("Class B");
        firstDataColumn.setCellValueFactory(new MapValueFactory(Column1MapKey));
        firstDataColumn.setMinWidth(130);
        secondDataColumn.setCellValueFactory(new MapValueFactory(Column2MapKey));
        secondDataColumn.setMinWidth(130);
        TableView table_view = new TableView<>();
        table_view.setItems(generateDataInMap());
        table_view.setEditable(true);
        table_view.getSelectionModel().setCellSelectionEnabled(true);
        table_view.getColumns().setAll(firstDataColumn, secondDataColumn);


//        Callback<TableColumn<Map, String>, TableCell<Map, String>> cellFactoryForMap = new Callback<TableColumn<Map, String>, TableCell<Map, String>>() {
//            @Override
//            public TableCell call(TableColumn p) {
//                return new TextFieldTableCell(new StringConverter() {
//                    @Override
//                    public String toString(Object t) {
//                        return t.toString();
//                    }
//
//                    @Override
//                    public Object fromString(String string) {
//                        return string;
//                    }
//                });
//            }
//        };
//        firstDataColumn.setCellFactory(cellFactoryForMap);
//        secondDataColumn.setCellFactory(cellFactoryForMap);
        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table_view);
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
        stage.setScene(scene);
        stage.show();
    }

    private ObservableList<Map> generateDataInMap() {
        int max = 10;
        ObservableList<Map> allData = FXCollections.observableArrayList();
        for (int i = 1; i < max; i++) {
            Map<String, String> dataRow = new HashMap<>();
            String value1 = "A" + i;
            String value2 = "B" + i;
            dataRow.put(Column1MapKey, value1);
            dataRow.put(Column2MapKey, value2);
            allData.add(dataRow);
        }
        return allData;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14544980" questionTitle="How to restrict every user roles in JSP/Servlet?">
<Answer><![CDATA[public class SessionCheckFilter implements Filter {

    private String contextPath;

    @Override
    public void init(FilterConfig fc) throws ServletException {
        contextPath = fc.getServletContext().getContextPath();
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain fc) throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;                        

        User user = (User) req.getSession().getAttribute("LOGIN_USER");
        if (user == null) {                
                //put your redirect stuff here
                res.sendRedirect(contextPath + "/to_your_login.jsp");                
        } else {
            switch (user.getRole()) {
                case ADMINISTRATOR:
                        //put your redirect stuff here
                        res.sendRedirect(contextPath + "/redirect_to_your_admin_path/admin_page.jsp");
                    break;
                case STAFF:
                        //put your redirect stuff here
                        res.sendRedirect(contextPath + "/redirect_to_staff_path/staff_page.jsp");
                    break;
                default:
                    break;
            }
            fc.doFilter(request, response);
        }
    }

    @Override
    public void destroy() {
    }
}]]></Answer>
<Answer><![CDATA[public class LonginServelt extends HttpServlet{
    public void doPost(HttpServletRequest request, HttpServletResponse response){
        User user = userService.checkUserCredential(username,password);
        Session session = request.getSession();
        session.setAttribute("user",user);
    }
}

<c:choose>
  <c:when test="${isAdmin}">
    You got Gold 
  </c:when>

  <c:when test="${isCustomer}">
    You got Silver 
  </c:when>

  <c:when test="${isProducer}">
    You got Bronze 
  </c:when>

  <c:otherwise>
    Better luck next time 
  </c:otherwise>
</c:choose>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14431075" questionTitle="Java WS: How do I send direct XML as part of a SOAP request">
<Answer><![CDATA[import java.io.IOException;
import java.io.StringReader;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
/**
 * @author <a href="http://stackoverflow.com/users/1904450/zachofalltrades">Zach Shelton</a>
 */
public class SampleCode {
    /**
     * Turn xml into an object. 
     *
     * @param <SomeJaxbType>
     * @param wellFormedXml a String of well-formed XML, with proper reference to the correct namespace
     * @param jaxbClass the class representing the type of object you want to get back (probably a class generated from xsd or wsdl) 
     * @return an object of the requested type
     * @throws JAXBException if there is a problem setting up the Unmarshaller, or performing the unmarshal operation
     * @throws SAXException if the given class is not annotated as XmlRootElement, and the xml String can not be parsed to a generic DOM Document
     */
    public <SomeJaxbType> SomeJaxbType xmlToObject(String wellFormedXml, Class<SomeJaxbType> jaxbClass) throws JAXBException, SAXException {
        if (jaxbClass==null) throw new IllegalArgumentException("received null jaxbClass");
        if (wellFormedXml==null || wellFormedXml.trim().isEmpty()) throw new IllegalArgumentException("received null or empty xml");
        if (!jaxbClass.isAnnotationPresent(XmlType.class)) throw new IllegalArgumentException(jaxbClass.getName() + " is not annotated as a JAXB class");

        JAXBContext context = JAXBContext.newInstance(jaxbClass);
        Unmarshaller unmarshaller =  context.createUnmarshaller();

        Object genericObject;
        if (jaxbClass.isAnnotationPresent(XmlRootElement.class)) {
            genericObject = unmarshaller.unmarshal(new StringReader(wellFormedXml));
        } else {//must use alternate method described in API
                //http://docs.oracle.com/javaee/6/api/javax/xml/bind/Unmarshaller.html#unmarshalByDeclaredType
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder db;
            try {
                db = dbf.newDocumentBuilder();
            } catch (ParserConfigurationException e) {
                throw new IllegalStateException("failed to get DocumentBuilder from factory");
            }
            InputSource input = new InputSource(new StringReader(wellFormedXml));
            Document doc;
            try {
                doc = db.parse(input);
            } catch (IOException e) {
                throw new IllegalStateException("xml string vanished");
            }
            JAXBElement<?> element = unmarshaller.unmarshal(doc, jaxbClass);
            genericObject = element.getValue();
        }

        SomeJaxbType typedObject = (SomeJaxbType) genericObject;
        return typedObject;
    }
}]]></Answer>
<Answer><![CDATA[public class TransactionDataHandler implements SOAPHandler<SOAPMessageContext> {
    private final Source transactionDataSource;

    public TransactionDataHandler(Source transactionDataSource) {
        this.transactionDataSource = transactionDataSource;
    }

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        // no exception handling
        Boolean isOutbound = (Boolean)context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        if (Boolean.TRUE.equals(isOutbound)) {
            SOAPMessage message = context.getMessage();
            SOAPBody body = message.getSOAPBody();
            Node commitTransactionNode = body.getFirstChild();
            Result commitTransactionResult = new DOMResult(commitTransactionNode);
            TransformerFactory.newInstance().newTransformer().transform(this.transactionDataSource, commitTransactionResult);
        }
        return true;
    }

    @Override
    public Set<QName> getHeaders() {
        return null;
    }

    @Override
    public boolean handleFault(SOAPMessageContext context) {
        return true;
    }

    @Override
    public void close(MessageContext context) {
        // no-op
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14402068" questionTitle="EJB @Schedule wait until method completed">
<Answer><![CDATA[@Singleton
public class WorkerBean {

    private AtomicBoolean busy = new AtomicBoolean(false);

    @Lock(READ)
    public void doTimerWork() throws InterruptedException {

        if (!busy.compareAndSet(false, true)) {
            return;
        }

        try {
            System.out.println("Timer work started");
            Thread.sleep(12000);
            System.out.println("Timer work done");
        } finally {
            busy.set(false);
        }
    }

}]]></Answer>
<Answer><![CDATA[@Singleton
public class DoStuffTask {

    @Resource
    private TimerService timerSvc;

    @Timeout
    public void doStuff(Timer t) {
        try {
            doActualStuff(t);
        } catch (Exception e) {
            LOG.warn("Error running task", e);
        }
        scheduleStuff();
    }

    private void doActualStuff(Timer t) {

        LOG.info("Doing Stuff " + t.getInfo());
    }

    @PostConstruct
    public void initialise() {
        scheduleStuff();
    }

    private void scheduleStuff() {
        timerSvc.createSingleActionTimer(1000l, new TimerConfig());
    }

    public void stop() {
        for(Timer timer : timerSvc.getTimers()) {
            timer.cancel();
        }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14296577" questionTitle="how to get javafx media metadata without listener">
<Answer><![CDATA[public class MediaListener implements MapChangeListener<String, Object>
{
    public String title = null;
    public String artist = null;
    public String album = null;

    private final Consumer<MediaListener> handler;
    private boolean handled = false;

    public MediaListener(Consumer<MediaListener> handler)
    {
        this.handler = handler;
    }

    @Override
    public void onChanged(MapChangeListener.Change<? extends String, ?> ch)
    {
        if (ch.wasAdded())
        {
            String key = ch.getKey();
            switch (key)
            {
                case "title":
                    title = (String) ch.getValueAdded();
                    break;
                case "artist":
                    artist = (String) ch.getValueAdded();
                    break;
                case "album":
                    album = (String) ch.getValueAdded();
                    break;
            }

            if (!handled && title != null && artist != null && album != null)
            {
                handler.accept(this);
                handled = true;
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[@FXML private Label label;
@FXML private ListView<String> lv;
@FXML private AnchorPane root;
@FXML private Button button;

private ObservableList<String> ol= FXCollections.observableArrayList();
private List<File> selectedFiles;
private final Object obj= new Object();

@Override
public void initialize(URL url, ResourceBundle rb) {
    assert button != null : "fx:id=\"button\" was not injected: check your FXML file 'ui.fxml'.";
    assert label != null : "fx:id=\"label\" was not injected: check your FXML file 'ui.fxml'.";
    assert lv != null : "fx:id=\"lv\" was not injected: check your FXML file 'ui.fxml'.";
    assert root != null : "fx:id=\"root\" was not injected: check your FXML file 'ui.fxml'.";

    // initialize your logic here: all @FXML variables will have been injected
    lv.setItems(ol);
}  

@FXML private void open(ActionEvent event) {
    FileChooser.ExtensionFilter extention= new FileChooser.ExtensionFilter("Music Files", "*.mp3","*.m4a","*.aif","*.wav","*.m3u","*.m3u8");
    FileChooser fc= new FileChooser();
    fc.setInitialDirectory(new File(System.getenv("userprofile")));
    fc.setTitle("Select File(s)");
    fc.getExtensionFilters().add(extention);
    selectedFiles =fc.showOpenMultipleDialog(root.getScene().getWindow());
    if(selectedFiles != null &&!selectedFiles.isEmpty()){
        listFiles();
    }
}
/**
 * Convert each fie selected to its URI
 */
private void listFiles(){ 
    try {
        for (File file : selectedFiles) {
            readMetaData(file.toURI().toString());
            synchronized(obj){
               obj.wait(100);
            }
        }
    } catch (InterruptedException ex) {
    }
    System.gc();
}
/**
 * Read a Media source metadata 
 * Note: Sometimes the was unable to extract the metadata especially when 
 * i have selected large number of files reasons i don't known why
 * @param mediaURI Media file URI
 */
private void readMetaData(String mediaURI){
    final MediaPlayer mp= new MediaPlayer(new Media(mediaURI));
    mp.setOnReady(new Runnable() {

        @Override
        public void run() {
            String artistName=(String) mp.getMedia().getMetadata().get("artist");
            ol.add(artistName);
            synchronized(obj){//this is required since mp.setOnReady creates a new thread and our loopp  in the main thread
                obj.notify();// the loop has to wait unitl we are able to get the media metadata thats why use .wait() and .notify() to synce the two threads(main thread and MediaPlayer thread)
            }
        }
    });
}]]></Answer>
<Answer><![CDATA[public static void initializeMetaData(Media media) {
    final Ref<Boolean> ready = new Ref<>(false);

    MediaPlayer mediaPlayer = new MediaPlayer(media);
    mediaPlayer.setOnReady(() -> {
        synchronized (ready) {
            ready.set(false);
            ready.notify();
        }
    });

    synchronized (ready) {
        if (!ready.get()) {
            try {
                ready.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14248766" questionTitle="Cake pattern with Java8 possible?">
<Answer><![CDATA[interface UserRepository {
    String authenticate(String username, String password);
}

interface UserRepositoryComponent {
    UserRepository getUserRepository();
}

interface UserServiceComponent extends UserRepositoryComponent {
    default UserService getUserService() {
        return new UserService(getUserRepository());
    }
}

class UserService {
    private final UserRepository repository;

    UserService(UserRepository repository) {
        this.repository = repository;
    }

    String authenticate(String username, String password) {
        return repository.authenticate(username, password);
    }
}

interface LocalUserRepositoryComponent extends UserRepositoryComponent {
    default UserRepository getUserRepository() {
        return new UserRepository() {
            public String authenticate(String username, String password) {
                return "LocalAuthed";
            }
        };
    }
}

interface MongoUserRepositoryComponent extends UserRepositoryComponent {
    default UserRepository getUserRepository() {
        return new UserRepository() {
            public String authenticate(String username, String password) {
                return "MongoAuthed";
            }
        };
    }
}

class LocalApp implements UserServiceComponent, LocalUserRepositoryComponent {}
class MongoApp implements UserServiceComponent, MongoUserRepositoryComponent {}]]></Answer>
<Answer><![CDATA[interface DataSource
{
    String lookup(long id);
}  

interface RealDataSource extends DataSource
{
    default String lookup(long id){ return "real#"+id; }
}  

interface TestDataSource extends DataSource
{
    default String lookup(long id){ return "test#"+id; }
}  

abstract class App implements DataSource
{
    void run(){  print( "data is " + lookup(42) ); }
}  


class RealApp extends App implements RealDataSource {}

new RealApp().run();  // prints "data is real#42"


class TestApp extends App implements TestDataSource {}

new TestApp().run();  // prints "data is test#42"]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14187963" questionTitle="Passing Parameters JavaFX FXML">
<Answer><![CDATA[/**
 * Loads a FXML file and injects its controller from the given Guice {@code Provider}
 */
public abstract class GuiceFxmlLoader {

   public GuiceFxmlLoader(Stage stage, Provider<?> provider) {
      mStage = Objects.requireNonNull(stage);
      mProvider = Objects.requireNonNull(provider);
   }

   /**
    * @return the FXML file name
    */
   public abstract String getFileName();

   /**
    * Load FXML, set its controller with given {@code Provider}, and add it to {@code Stage}.
    */
   public void loadView() {
      try {
         FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(getFileName()));
         loader.setControllerFactory(p -> mProvider.get());
         Node view = loader.load();
         setViewInStage(view);
      }
      catch (IOException ex) {
         LOGGER.error("Failed to load FXML: " + getFileName(), ex);
      }
   }

   private void setViewInStage(Node view) {
      BorderPane pane = (BorderPane)mStage.getScene().getRoot();
      pane.setCenter(view);
   }

   private static final Logger LOGGER = Logger.getLogger(GuiceFxmlLoader.class);

   private final Stage mStage;
   private final Provider<?> mProvider;
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;

public class NamespaceParameterExampleApplication extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws IOException {
        final FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("namespace-parameter-example.fxml"));

        fxmlLoader.getNamespace()
                  .put("labelText", "External Text");

        final Parent root = fxmlLoader.load();

        primaryStage.setTitle("Namespace Parameter Example");
        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[public class Context {
    private final static Context instance = new Context();
    public static Context getInstance() {
        return instance;
    }

    private Connection con;
    public void setConnection(Connection con)
    {
        this.con=con;
    }
    public Connection getConnection() {
        return con;
    }

    private TabRoughController tabRough;
    public void setTabRough(TabRoughController tabRough) {
        this.tabRough=tabRough;
    }

    public TabRoughController getTabRough() {
        return tabRough;
    }
}]]></Answer>
<Answer><![CDATA[public Stage showCustomerDialog(Customer customer) {
  FXMLLoader loader = new FXMLLoader(
    getClass().getResource(
      "customerDialog.fxml"
    )
  );

  Stage stage = new Stage(StageStyle.DECORATED);
  stage.setScene(
    new Scene(
      (Pane) loader.load()
    )
  );

  CustomerDialogController controller = 
    loader.<CustomerDialogController>getController();
  controller.initData(customer);

  stage.show();

  return stage;
}

...

class CustomerDialogController {
  @FXML private Label customerName;
  void initialize() {}
  void initData(Customer customer) {
    customerName.setText(customer.getName());
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14111308" questionTitle="Show Image Dynamically in ScrollPane JavaFx">
<Answer><![CDATA[private List<String> listFileNames(File folder) throws NullPointerException{
    List<String> list = new ArrayList<>();

    for (File file : folder.listFiles()) {
        if (file.isDirectory())
            listFileNames(file);
        else {
            System.out.println(file.getName());
            list.add(file.getName());
        }
    }
    return list;
}

private void insertImages(List<String> list, Hero thisHero) {
    int column = 0;
    int row = 0;
    for (String path:list) {
        String fullPath = "file:"+thisHero.getHeroClass().getFile()+"\\"+path;
        ToggleButton button = new ToggleButton();
        button.setBackground(Background.EMPTY);
        button.setGraphic(new ImageView(new Image(fullPath)));
        grid.add(button,column,row);
        column++;
        if (column == 5) {
            row++;
            column = 0;
        }
    }
}]]></Answer>
<Answer><![CDATA[@FXML private void OnClick(ActionEvent ae)
{
  getGalleryView(ae);
}
public void getGalleryView(ActionEvent ae)
{
  ScrolPane sp=new ScroPane();
  Hbox hb=new Hbox();
  Image [] images=new Image[5];
  ImageView []pics=new ImageView[5];
  final String [] imageNames = new String [] {"fw1.jpg", "fw2.jpg",
    "fw3.jpg", "fw4.jpg", "fw5.jpg"};

  for (int i = 0; i < 5; i++) {
        images[i] = new Image(getClass().getResourceAsStream(imageNames[i]));
        pics[i] = new ImageView(images[i]);
        pics[i].setFitWidth(100);
        pics[i].setPreserveRatio(true);
        hb.getChildren().add(pics[i]);
        sp.setContent(hb);

    }

    Scene scene = ((Node) ae.getSource()).getScene();
    ((Pane) scene.getRoot()).getChildren().add(sp);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="14039995" questionTitle="Java 8: Mandatory checked exceptions handling in lambda expressions. Why mandatory, not optional?">
<Answer><![CDATA[public final class SupplierUtils {
    private SupplierUtils() {
    }

    public static <T> Supplier<T> wrap(Callable<T> callable) {
        return () -> {
            try {
                return callable.call();
            }
            catch (RuntimeException e) {
                throw e;
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
        };
    }
}

public class JdbcConnectionPool extends ObjectPool<Connection> {

    public JdbcConnectionPool(int maxConnections, String url) {
        super(SupplierUtils.wrap(() -> DriverManager.getConnection(url)), maxConnections);
    }
}]]></Answer>
<Answer><![CDATA[@FunctionalInterface
public interface ThrowingFunction<T,R,E extends Throwable> {
R apply(T arg) throws E;

/**
 * @param <T> type
 * @param <E> checked exception
 * @return a function that accepts one argument and returns it as a value.
 */
static <T, E extends Exception> ThrowingFunction<T, T, E> identity() {
    return t -> t;
}

/**
 * @return a Function that returns the result of the given function as an Optional instance.
 * In case of a failure, empty Optional is returned
 */
static <T, R, E extends Exception> Function<T, Optional<R>> lifted(ThrowingFunction<T, R, E> f) {
    Objects.requireNonNull(f);

    return f.lift();
}

static <T, R, E extends Exception> Function<T, R> unchecked(ThrowingFunction<T, R, E> f) {
    Objects.requireNonNull(f);

    return f.uncheck();
}

default <V> ThrowingFunction<V, R, E> compose(final ThrowingFunction<? super V, ? extends T, E> before) {
    Objects.requireNonNull(before);

    return (V v) -> apply(before.apply(v));
}

default <V> ThrowingFunction<T, V, E> andThen(final ThrowingFunction<? super R, ? extends V, E> after) {
    Objects.requireNonNull(after);

    return (T t) -> after.apply(apply(t));
}

/**
 * @return a Function that returns the result as an Optional instance. In case of a failure, empty Optional is
 * returned
 */
default Function<T, Optional<R>> lift() {
    return t -> {
        try {
            return Optional.of(apply(t));
        } catch (Throwable e) {
            return Optional.empty();
        }
    };
}

/**
 * @return a new Function instance which wraps thrown checked exception instance into a RuntimeException
 */
default Function<T, R> uncheck() {
    return t -> {
        try {
            return apply(t);
        } catch (final Throwable e) {
            throw new WrappedException(e);
        }
    };
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13853621" questionTitle="Multiple Components in one column of JavaFX TableView">
<Answer><![CDATA[class EditingCell extends TableCell<NamedProperty, Object> {
private TextField textField;
private CheckBox checkBox;
public EditingCell() {}

@Override public void startEdit() {
  if (!isEmpty()) {
    super.startEdit();

    if (getItem() instanceof Boolean) {
      createCheckBox();
      setText(null);
      setGraphic(checkBox);
    } else {
      createTextField();
      setText(null);
      setGraphic(textField);
      textField.selectAll();
    }  
  }
}

@Override public void cancelEdit() {
  super.cancelEdit();

  if (getItem() instanceof Boolean) {
    setText(getItem().toString());
  } else {
    setText((String) getItem());
  }  
  setGraphic(null);
}

@Override public void updateItem(Object item, boolean empty) {
  super.updateItem(item, empty);

  if (empty) {
    setText(null);
    setGraphic(null);
  } else {
    if (isEditing()) {
      if (getItem() instanceof Boolean) {
        if (checkBox != null) {
          checkBox.setSelected(getBoolean());
        }
        setText(null);
        setGraphic(checkBox);
      } else {
        if (textField != null) {
          textField.setText(getString());
        }
        setText(null);
        setGraphic(textField);
      }  
    } else {
      setText(getString());
      setGraphic(null);
    }
  }
}

private void createTextField() {
  textField = new TextField(getString());
  textField.setMinWidth(this.getWidth() - this.getGraphicTextGap()* 2);
  textField.focusedProperty().addListener(new ChangeListener<Boolean>() {
    @Override public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
      if (!newValue) {
        commitEdit(textField.getText());
      }
    }
  });
}

private void createCheckBox() {
  checkBox = new CheckBox();
  checkBox.setSelected(getBoolean());
  checkBox.setMinWidth(this.getWidth() - this.getGraphicTextGap()* 2);
  checkBox.focusedProperty().addListener(new ChangeListener<Boolean>() {
    @Override public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
      if (!newValue) {
        commitEdit(checkBox.isSelected());
      }
    }
  });
}

private String getString() {
  return getItem() == null ? "" : getItem().toString();
}

private Boolean getBoolean() {
  return getItem() == null ? false : (Boolean) getItem();
}
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
    import javafx.beans.property.SimpleStringProperty;
    import javafx.collections.FXCollections;
    import javafx.collections.ObservableList;
    import javafx.geometry.Insets;
    import javafx.scene.Scene;
    import javafx.scene.control.ComboBox;
    import javafx.scene.control.TableCell;
    import javafx.scene.control.TableColumn;
    import javafx.scene.control.TableView;
    import javafx.scene.control.TextField;
    import javafx.scene.control.cell.PropertyValueFactory;
    import javafx.scene.layout.GridPane;
    import javafx.scene.layout.StackPane;
    import javafx.stage.Stage;
    import javafx.util.Callback;

    public class TableCellWithMultipleComponent extends Application {
        @SuppressWarnings("rawtypes")
        TableColumn answerTypeCol; 
        @SuppressWarnings("rawtypes")
        TableColumn answerCol; 
        ObservableList<String> namesChoiceList;
        @SuppressWarnings("rawtypes")
        ComboBox comboBox;
        TextField textField;

        public static void main(String[] args) {
            launch(args);
        }

        @SuppressWarnings({ "rawtypes", "unchecked" })
        @Override
        public void start(final Stage primaryStage) {
            primaryStage.setTitle("Table Cell With Multiple Components");

             TableView<Person> table = new TableView<Person>();
             table.setEditable(true);
              final ObservableList<Person> data = 
                        FXCollections.observableArrayList(
                            new Person("A", "Multiple Choice"),
                            new Person("JOHN", "Free Text"),
                            new Person("123", "Free Text"),
                            new Person("D", "Multiple Choice")
                        );



            GridPane gridpane = new GridPane();
            gridpane.setPadding(new Insets(5));
            gridpane.setHgap(5);
            gridpane.setVgap(5);


            namesChoiceList = FXCollections.observableArrayList("A", "B", "C", "D", "INVALID_ANSWER", "NO_ANSWER");

            answerCol = new TableColumn();
            answerCol.setText("Answers");
            answerCol.setMinWidth(210);
            answerCol.setEditable(true);
            answerCol.setCellValueFactory(new PropertyValueFactory("answers"));


            answerCol.setCellFactory( new Callback<TableColumn<String, String>, TableCell<String, String>>() {
                @Override
                public TableCell<String, String> call(TableColumn<String, String> arg0) {
                    return new anyMethod();
                }
            });



            answerTypeCol = new TableColumn();
            answerTypeCol.setText("Answers Type");
            answerTypeCol.setMinWidth(210);
            answerTypeCol.setEditable(true);
            answerTypeCol.setCellValueFactory(new PropertyValueFactory("answersType"));



            table.setItems(data);
            table.getColumns().addAll(answerCol, answerTypeCol);

            StackPane root = new StackPane();

            Scene scene =new Scene(root, 500, 550);

            gridpane.add(table, 1, 5,1,20 );


            root.getChildren().addAll(gridpane);
            primaryStage.setScene(scene);
            primaryStage.show();


       }


        private class anyMethod extends TableCell <String, String>{

            @SuppressWarnings({ "unchecked", "rawtypes" })
            public anyMethod(){

                comboBox = new ComboBox();
                textField = new TextField();
                comboBox.setItems(namesChoiceList);
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                     if (empty) {
                    setText(null);
                   setGraphic(null);
                    System.out.println("In empty");
                 } else {
                    if( getTableView().getColumns().get(1).getCellData(getIndex()).toString().startsWith("M")){

                     System.out.println("Making ComboBox");
                     setGraphic(comboBox);
                    }
                    else{
                        setGraphic(textField);
                    }
                 }

            }

        }


        public static class Person {
            private final SimpleStringProperty answers;
            private final SimpleStringProperty answersType;


            private Person(String answers, String answersType) {
                this.answers = new SimpleStringProperty(answers);
                this.answersType = new SimpleStringProperty(answersType);
            }

            public String getAnswers() {
                return answers.get();
            }
            public void setAnswers(String answers) {
                this.answers.set(answers);
            }

            public String getAnswersType() {
                return answersType.get();
            }
            public void setAnswersType(String answersType) {
                this.answersType.set(answersType);
            }
        }



    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13814700" questionTitle="UTF-8 | issue with special character on form submit | java.io.CharConversionException">
<Answer><![CDATA[public void processParameters( byte bytes[], int start, int len, 
                                   String enc ) {
        int end=start+len;
        int pos=start;

        if( debug>0 ) 
            log( "Bytes: " + new String( bytes, start, len ));

        do {
            boolean noEq=false;
            int valStart=-1;
            int valEnd=-1;

            int nameStart=pos;
            int nameEnd=ByteChunk.indexOf(bytes, nameStart, end, '=' );
            // Workaround for a&b&c encoding
            int nameEnd2=ByteChunk.indexOf(bytes, nameStart, end, '&' );
            if( (nameEnd2!=-1 ) &&
                ( nameEnd==-1 || nameEnd > nameEnd2) ) {
                nameEnd=nameEnd2;
                noEq=true;
                valStart=nameEnd;
                valEnd=nameEnd;
                if( debug>0) log("no equal " + nameStart + " " + nameEnd + " " + new String(bytes, nameStart, nameEnd-nameStart) );
            }
            if( nameEnd== -1 ) 
                nameEnd=end;

            if( ! noEq ) {
                valStart= (nameEnd < end) ? nameEnd+1 : end;
                valEnd=ByteChunk.indexOf(bytes, valStart, end, '&');
                if( valEnd== -1 ) valEnd = (valStart < end) ? end : valStart;
            }

            pos=valEnd+1;

            if( nameEnd<=nameStart ) {
                log.warn("Parameters: Invalid chunk ignored.");
                continue;
                // invalid chunk - it's better to ignore
            }
            tmpName.setBytes( bytes, nameStart, nameEnd-nameStart );
            tmpValue.setBytes( bytes, valStart, valEnd-valStart );

            try {
                addParam( urlDecode(tmpName, enc), urlDecode(tmpValue, enc) );
            } catch (IOException e) {
                // Exception during character decoding: skip parameter
                log.warn("Parameters: Character decoding failed. " + 
                         "Parameter skipped.", e);
            }

            tmpName.recycle();
            tmpValue.recycle();

        } while( pos<end );
    }]]></Answer>
<Answer><![CDATA[public class CharConversionExpFilter implements Filter {

    private char[] forbiddenChars;  // ADDED
    private FilterConfig filterConfig;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
        forbiddenChars = filterConfig.getInitParameter("forbiddenChars")
                               .replace(",", "").toCharArray(); // ADDED
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
        String requestURI = ((HttpServletRequest) request).getRequestURI();
        try {
            validateParameters((HttpServletRequest) request);  // ADDED
            chain.doFilter(request, response);
        } catch (IOException e) {
            if (e instanceof CharConversionException) {
                if ("true".equalsIgnoreCase(filterConfig.getInitParameter("useErrorPage"))) {
                    if (response instanceof HttpServletResponse) {
                        ((HttpServletResponse) response).sendError(400,
                        "The request cannot be fulfilled due to bad input.\nError:" + e.getMessage());
                    }
                } else {
                    request.setAttribute("errorMessage", e.getMessage());
                    filterConfig.getServletContext().getRequestDispatcher(requestURI).forward(request, response);
                }
            }
        }
    }

    // ADDED
    private void validateParameters(HttpServletRequest request) throws CharConversionException {
        Enumeration<String> parameterNames = request.getParameterNames();
        while (parameterNames.hasMoreElements()) {
            String parameter = request.getParameter(parameterNames.nextElement());
            if (parameter != null && parameter.length() > 0) {
                for (char forbidChar : forbiddenChars) {
                    if (parameter.indexOf(forbidChar) != -1) {
                        throw new CharConversionException(
                                String.format(
                                        "Parameter: [%s] contains the forbidden character [%c]",
                                        parameter, forbidChar));
                    }
                }
            }
        }
    }

    @Override
    public void destroy() {}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13726824" questionTitle="JAVAFX event triggered when selecting a check box">
<Answer><![CDATA[@FXML private CheckBox redCB = new CheckBox();
@FXML private CheckBox blueCB = new CheckBox();
@FXML private CheckBox greenCB = new CheckBox();
@FXML private CheckBox whiteCB = new CheckBox();
@FXML private CheckBox blackCB = new CheckBox();
@FXML private CheckBox colorlessCB = new CheckBox();

//assigning listeners
redCB.selectedProperty().addListener(colorCheckChange);
blueCB.selectedProperty().addListener(colorCheckChange);
greenCB.selectedProperty().addListener(colorCheckChange);
whiteCB.selectedProperty().addListener(colorCheckChange);
blackCB.selectedProperty().addListener(colorCheckChange);
colorlessCB.selectedProperty().addListener(colorlessCheckChange);
                       //note: this is the only different one^^^

//making listeners
ChangeListener colorCheckChange = new ChangeListener<Boolean>() {
    @Override
    public void changed(ObservableValue<? extends Boolean> ov,
        Boolean old_val, Boolean new_val) {
        if (new_val)
            colorlessCB.setSelected(false);
    }};
ChangeListener colorlessCheckChange = new ChangeListener<Boolean>() {
    @Override
    public void changed(ObservableValue<? extends Boolean> ov,
        Boolean old_val, Boolean new_val) {
        if (new_val)
        {
            redCB.setSelected(false);
            blueCB.setSelected(false);
            greenCB.setSelected(false);
            blackCB.setSelected(false);
            whiteCB.setSelected(false);
        }
    }
};]]></Answer>
<Answer><![CDATA[//First in FXML file 
<CheckBox fx:id="chkbxAuto" mnemonicParsing="false" onAction="#autoConfig" text="Auto" />

// in controler  
public class FXMLController implements Initializable {
    private static int a = 0;
    //references to lables
    ....
    @FXML
    private Label lblStateValue; 
    @FXML
    private Group grpSetting; // a group of elements which I want to be disabled and enabled 
    ... 
    @FXML
    private void autoConfig(ActionEvent event) {
            System.out.println("Configing automatically"); 
             a++;
             if(a%2==1){
                 lblStateValue.setText("Auto configuration enabled"); // it change a lable to show the state 
                 grpSetting.setDisable(true); // it disable a group of elements
             }
            else{
                 lblStateValue.setText("Auto configuration disabled");
                 grpSetting.setDisable(false);
             }
            a%=10;

        }
    ...]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13719669" questionTitle="Append text WebEngine - JavaFX">
<Answer><![CDATA[final WebEngine appendEngine = view.getEngine();
btn.setOnAction(new EventHandler<ActionEvent>() {
 @Override public void handle(ActionEvent event) {
   executejQuery(appendEngine, "$('#content').append('World!');");
 }
});

...

private static Object executejQuery(final WebEngine engine, String script) {
  return engine.executeScript(
    "(function(window, document, version, callback) { "
    + "var j, d;"
    + "var loaded = false;"
    + "if (!(j = window.jQuery) || version > j.fn.jquery || callback(j, loaded)) {"
    + " var script = document.createElement(\"script\");"
    + " script.type = \"text/javascript\";"
    + " script.src = \"http://code.jquery.com/jquery-1.7.2.min.js\";"
    + " script.onload = script.onreadystatechange = function() {"
    + " if (!loaded && (!(d = this.readyState) || d == \"loaded\" || d == \"complete\")) {"
    + " callback((j = window.jQuery).noConflict(1), loaded = true);"
    + " j(script).remove();"
    + " }"
    + " };"
    + " document.documentElement.childNodes[0].appendChild(script) "
    + "} "
    + "})(window, document, \"1.7.2\", function($, jquery_loaded) {" + script + "});"
  );
}]]></Answer>
<Answer><![CDATA[package demo;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class Demo extends Application {

    private WebView view;
    private WebEngine engine;

    @Override
    public void start(Stage primaryStage) {

        view = new WebView();
        engine = view.getEngine();
        engine.loadContent("<body><div id='content'>Hello </div></body>");
        view.setPrefHeight(240);

        Button btn = new Button("Append the \"World!\"");
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                append(" \"World!\"");
            }
        });

        StackPane root = new StackPane();
        root.getChildren().addAll(view, btn);
        Scene scene = new Scene(root, 300, 250);

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void append(String msg) {
        Document doc = engine.getDocument();
        Element el = doc.getElementById("content");
        String s = el.getTextContent();
        el.setTextContent(s + msg);
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13702191" questionTitle="Center location of stage">
<Answer><![CDATA[final double midX = (parentStage.getX() + parentStage.getWidth()) / 2;
final double midY = (parentStage.getY() + parentStage.getHeight()) / 2;

xResized = false;
yResized = false;

newStage.widthProperty().addListener((observable, oldValue, newValue) -> {
    if (!xResized && newValue.intValue() > 1) {
        newStage.setX(midX - newValue.intValue() / 2);
        xResized = true;
    }
});

newStage.heightProperty().addListener((observable, oldValue, newValue) -> {
    if (!yResized && newValue.intValue() > 1) {
        newStage.setY(midY - newValue.intValue() / 2);
        yResized = true;
    }
});

newStage.show();]]></Answer>
<Answer><![CDATA[public class CenterStage extends Application {
    @Override
    public void start(final Stage stage) throws Exception {
        stage.setX(300);
        stage.setWidth(800);
        stage.setHeight(400);
        stage.show();

        final Stage childStage = new Stage();
        childStage.setWidth(200);
        childStage.setHeight(200);
        childStage.setX(stage.getX() + stage.getWidth() / 2 - childStage.getWidth() / 2);
        childStage.setY(stage.getY() + stage.getHeight() / 2 - childStage.getHeight() / 2);
        childStage.show();
    }

    public static void main(String[] args) {
        Application.launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13604703" questionTitle="How do I define a method which takes a lambda as a parameter in Java 8?">
<Answer><![CDATA[public class LambdaDemo {
    public static List<Integer> filter(IMyFunc testNum, List<Integer> listItems) {
        List<Integer> result = new ArrayList<Integer>();
        for(Integer item: listItems) {
            if(testNum.test(item)) {
                result.add(item);
            }
        }
        return result;
    }
    public static void main(String[] args) {
        List<Integer> myList = new ArrayList<Integer>();
        myList.add(1);
        myList.add(4);
        myList.add(6);
        myList.add(7);
        // calling filter method with a lambda expression
        // as one of the param
        Collection<Integer> values = filter(n -> n > 5, myList);

        System.out.println("Filtered values " + values);
    }
}]]></Answer>
<Answer><![CDATA[@FunctionalInterface
interface FInterface{
    int callMeLambda(String temp);
}


class ConcreteClass{

    void funcUsesAnonymousOrLambda(FInterface fi){
        System.out.println("===Executing method arg instantiated with Lambda==="));
    }

    public static void main(){
        // calls a method having FInterface as an argument.
        funcUsesAnonymousOrLambda(new FInterface() {

            int callMeLambda(String temp){ //define callMeLambda(){} here..
                return 0;
            }
        }
    }

/***********Can be replaced by Lambda below*********/
        funcUsesAnonymousOrLambda( (x) -> {
            return 0; //(1)
        }

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13602974" questionTitle="Java EE Struts 2- combo box- database retrieving of elements for a drop down">
<Answer><![CDATA[public class Department extends ActionSupport {

 @SuppressWarnings("rawtypes")
ArrayList deptList;
@SuppressWarnings("rawtypes")
public ArrayList getDeptList() {
    return deptList;
}

@SuppressWarnings("rawtypes")
public void setDeptList(ArrayList deptList) {
    this.deptList = deptList;
}


public String Select(){
         deptList = DBConnection.getConnection();
System.out.println("the list contains..........."+deptList);
return "checked";
}
public String execute(){
    return SUCCESS;
}

    }]]></Answer>
<Answer><![CDATA[public class Mainlist {
    DBLayer db;

    public Mainlist() {
        db = new DBLayer();
    }

    public ArrayList getCategoryname() {
        ArrayList<String> list = new ArrayList();
        try {
            String sql = "select category_name from category";
            PreparedStatement ps = db.getConnection().prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (rs != null) {
                while (rs.next()) {
                    list.add(rs.getString("category_name"));
                    // System.out.println(list);
                }
            }
            return list;
        } catch (Exception e) {
            e.printStackTrace();
            return list;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13228203" questionTitle="Springs MVC JSON Response and convert it to JS Object">
<Answer><![CDATA[@Controller
public class UsersSettingsController {

    @Autowired
    UserSettingsDefaultService userSettingsService;


    @RequestMapping(value="/userSettings/dynamic/userSettings", method=RequestMethod.GET)
    public ModelAndView get() throws Exception {
        ModelAndView mav = new ModelAndView();
        ObjectMapper mapper = new ObjectMapper();


    User user = (User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    UserSettings userSet = userSettingsService.getUserSettingsByUser(user);

    mav.addObject("userSettingsJSON", mapper.writeValueAsString(userSet));

    mav.setViewName("userSettings/dynamic/filter");


        return mav;
    }
}]]></Answer>
<Answer><![CDATA[$.ajax({
                    url: "getFormatIdDescMap?compId="+compId,
                    global: false,
                    type: "POST",
                    dataType:"json",
                    contanttype:'text/json',
                    async:false,
                    error:function(){
                        alert("Error during retrieving the foramt ID List");
                    },
                    success: function(data){                                                
                        //REMOVE ALL THE OLD VALUES OF FORMAT DROP DOWN
                        removeDropDownVals('formatList');

                        var optn;
                        for(var index=0;index<data.formatKeys.length;index++){
                            optn = document.createElement("option");
                            document.getElementById("formatList").options.add(optn);
                            optn.text =data.formatDescs[index];
                            optn.value=data.formatKeys[index];  
                        }
                    }
                });

            });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13142952" questionTitle="Arraylist as parameter in method and add data in multiple Arraylist">
<Answer><![CDATA[public class Session {

    private String coursename;
    private float noofhours;
    private ArrayList<Faculty> faculty=new ArrayList<Faculty>();

    public Session(String courseName, float noOfHours, Faculty faculty){
        this.coursename=courseName;
        this.noofhours=noOfHours;
        this.faculty.add(faculty);

    }

    public Session(String courseName, float noOfHours, ArrayList<Faculty> faculty){
        this.coursename=courseName;
        this.noofhours=noOfHours;
        this.faculty=faculty;

    }

    public void addFaculty(Faculty faculty){
        this.faculty.add(faculty);

    }


}]]></Answer>
<Answer><![CDATA[public class TrainingController {

    public static void main(String[] args) {
        Faculty faculty1 = new Faculty("NY", 200.0);
        List<Faculty> faculties = new ArrayList<Faculty>();
        faculties.add(faculty1);

        TrainingInstitute training=new TrainingInstitute();
        training.takeASession( new Session("java", 5, faculties) );
        training.takeASession( new Session("php", 4, faculties) );
        System.out.println(training);
    }
}

class Faculty {
    String facultyName;
    double gemavailable;
    public Faculty(String facultyName, Double gemavailable) {
        this.facultyName = facultyName;
        this.gemavailable = gemavailable;
    }
    public String toString(){
        return facultyName+" "+gemavailable;
    }
}

class Session {
    String coursename;
    float noofhours;
    List<Faculty> faculties;
    public Session(String coursename, float noofhours,
            List<Faculty> faculties) {
        this.coursename = coursename;
        this.noofhours = noofhours;
        this.faculties = faculties;
    }
    public List<Faculty> getFaculties() {
        return faculties;
    }
    public String toString(){
        return coursename+" "+noofhours+" "+faculties;
    }
}

class TrainingInstitute {
    Set<Faculty> faculties = new HashSet<Faculty>();
    List<Session> sessions = new ArrayList<Session>();
    public void takeASession(Session session) {
        sessions.add(session);
        faculties.addAll(session.getFaculties());
        for (Faculty faculty: faculties){
            faculty.gemavailable -= session.noofhours;
        }
    }
    public String toString(){
        return "faculties: " + faculties + "\nsessions:" + sessions;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13112936" questionTitle="How do I reference a file that is placed in the WEB-INF folder when using Arquillian?">
<Answer><![CDATA[@Test
   public void myTest()
   {
      HttpSession session = new MockHttpSession(new MockServletContext());
      ServletLifecycle.beginSession(session);

      ..testCode..

      // You can obtain a ServletContext (will actually be a MockServletContext 
      // implementation):
      ServletContext sc = session.getServletContext();
      URL url = ServletContext.getResource("/WEB-INF/testdata.xml")
      Path resPath = new Path(url);
      File resFile = new File(url);
      FileReader resRdr = new FileReader(resFile);
      etc...

      ..testCode..

      ServletLifecycle.endSession(session);
   }]]></Answer>
<Answer><![CDATA[@RunWith(Arquillian.class)
public class AttachResourceTest {

    @Deployment
    public static WebArchive createDeployment() {
        WebArchive archive =  ShrinkWrap.create(WebArchive.class).addPackages(true, "org.apache.commons.io")
                .addAsWebInfResource("hello-kitty.png", "classes/hello-kitty.png");             
        System.out.println(archive.toString(true));
        return archive;
    }

    @Test
    public void attachCatTest() {
        InputStream stream = getClass().getResourceAsStream("/hello-kitty.png");
        byte[] bytes = null;
        try {
            bytes = IOUtils.toByteArray(stream);
        } catch (IOException e) {
            e.printStackTrace();
        }   
        Assert.assertNotNull(bytes);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="13001371" questionTitle="Adding all Maven dependencies to Arquillian">
<Answer><![CDATA[<dependencies>
    <dependency>
        <groupId>joda-time</groupId>
        <artifactId>joda-time</artifactId>
        <version>2.1</version>
    </dependency>
    <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>6.0</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.jboss.arquillian.junit</groupId>
        <artifactId>arquillian-junit-container</artifactId>
        <scope>test</scope>

    </dependency>
    <dependency>
        <groupId>org.jboss.arquillian.container</groupId>
        <artifactId>arquillian-glassfish-remote-3.1</artifactId>
        <scope>test</scope>
        <version>1.0.0.CR3</version>
    </dependency>

    <dependency>
        <groupId>org.jboss.shrinkwrap.resolver</groupId>
        <artifactId>shrinkwrap-resolver-api</artifactId>
        <version>2.0.0-alpha-5</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.jboss.shrinkwrap.resolver</groupId>
        <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
        <version>2.0.0-alpha-5</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.jboss.shrinkwrap.resolver</groupId>
        <artifactId>shrinkwrap-resolver-api-maven</artifactId>
        <version>2.0.0-alpha-5</version>
        <scope>test</scope>
    </dependency>
</dependencies>
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-bom</artifactId>
            <version>2.0.0-alpha-5</version>
            <scope>import</scope>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian</groupId>
            <artifactId>arquillian-bom</artifactId>
            <version>1.0.3.Final</version>
            <scope>import</scope>
            <type>pom</type>
        </dependency>


    </dependencies>
</dependencyManagement>]]></Answer>
<Answer><![CDATA[import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.io.File;

@RunWith(Arquillian.class)
public class MyTestClassWithMavenDependencies {

    @Deployment
    public static WebArchive createDeployment() {

        // Import Maven runtime dependencies
        File[] files = Maven.resolver()
                            .loadPomFromFile("pom.xml")
                            .importRuntimeDependencies()
                            .resolve()
                            .withTransitivity()
                            .asFile();

        // Create deploy file    
        WebArchive war = ShrinkWrap.create(WebArchive.class)
                                   .addClass(MyClass1.class)
                                   .addClass(MyClass2.class)
                                   .addClass(MyClass3.class)
                                   .addAsLibraries(files);

        // Show the deploy structure
        System.out.println(war.toString(true)); 

        return war;
    }

    // Create your tests here
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12866614" questionTitle="Run Java code once every hour">
<Answer><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;

public class TestHour {

    private static final int MINUNTE = 20;

    public static void main(String args[]) {
        while (true) {
            SimpleDateFormat bartDateFormat = new SimpleDateFormat("mm");
            Date date = new Date();
            int currentMin = new Integer(bartDateFormat.format(date))
                    .intValue();
            if (currentMin < MINUNTE) {
                sleepMinutes(MINUNTE - currentMin);
            } else if (currentMin > MINUNTE) {
                sleepMinutes(60 - currentMin + MINUNTE);
            } else {
                // DO SOMETHING EVERY HOUR
                System.out.println("come on do it!!!");
                sleepMinutes(60);
            }
        }
    }

    private static void sleepMinutes(int minutes) {
        try {
            System.out.println("Sleeping for " + minutes);
            Thread.sleep(minutes * 1000*60);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }]]></Answer>
<Answer><![CDATA[import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class SchedulerExample2 implements Runnable{

    public static void main(String args[]) {

        Calendar due = Calendar.getInstance();
        due.set(Calendar.MILLISECOND, 0);
        due.set(Calendar.SECOND, 0);
        due.set(Calendar.MINUTE, 20);
        if (due.before(Calendar.getInstance())) {
            due.add(Calendar.HOUR, 1);
        }
        long milliSecondsToNextOcurrence =  due.getTimeInMillis() - new Date().getTime();
        final ScheduledExecutorService s = Executors.newSingleThreadScheduledExecutor();
        ShedulerExample task = new  ShedulerExample();
        s.scheduleAtFixedRate(task, milliSecondsToNextOcurrence, 60*60*1000, TimeUnit.MILLISECONDS);
    }

    @Override
    public void run() {
            System.out.println("hola->"+new Date());
    }   
}]]></Answer>
<Answer><![CDATA[package tests;

import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

public class App201210130040 {


private static Timer timer = new Timer(false);

public static void schedule() {
    Calendar due = Calendar.getInstance();
    due.set(Calendar.MINUTE, 20);
    if( due.before(Calendar.getInstance()) ) {
        due.add(Calendar.HOUR, 1);
    }

    System.out.println("Scheduled to " + due.getTime().toString());

    timer.schedule(new TimerTask() {

        @Override
        public void run() {

            System.out.println("due");

            schedule();
        }

    }, due.getTime());

}


public static void main(String[] args) {
    schedule();
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12860478" questionTitle="Tab key navigation in JavaFX TextArea">
<Answer><![CDATA[public class TextAreaTabToFocusEventHandler implements EventHandler<KeyEvent>
{
    private static final String FOCUS_EVENT_TEXT = "TAB_TO_FOCUS_EVENT";

    @Override
    public void handle(final KeyEvent event)
    {
        if (!KeyCode.TAB.equals(event.getCode()))
        {
            return;
        }

        // handle events where the TAB key or TAB + CTRL key is pressed
        // so don't handle the event if the ALT, SHIFT or any other modifier key is pressed
        if (event.isAltDown() || event.isMetaDown() || event.isShiftDown())
        {
            return;
        }

        if (!(event.getSource() instanceof TextArea))
        {
            return;
        }

        final TextArea textArea = (TextArea) event.getSource();
        if (event.isControlDown())
        {
            // if the event text contains the special focus event text
            // => do not consume the event, and let the default behaviour (= move focus to the next control) happen.
            //
            // if the focus event text is not present, then the user has pressed CTRL + TAB key,
            // then consume the event and insert or replace selection with tab character
            if (!FOCUS_EVENT_TEXT.equalsIgnoreCase(event.getText()))
            {
                event.consume();
                textArea.replaceSelection("\t");
            }
        }
        else
        {
            // The default behaviour of the TextArea for the CTRL+TAB key is a move of focus to the next control.
            // So we consume the TAB key event, and fire a new event with the CTRL + TAB key.

            event.consume();

            final KeyEvent tabControlEvent = new KeyEvent(event.getSource(), event.getTarget(), event.getEventType(), event.getCharacter(),
                                                          FOCUS_EVENT_TEXT, event.getCode(), event.isShiftDown(), true, event.isAltDown(), event.isMetaDown());
            textArea.fireEvent(tabControlEvent);
        }
    }
}]]></Answer>
<Answer><![CDATA[/**
 * Handles tab/shift-tab keystrokes to navigate to other fields,
 * ctrl-tab to insert a tab character in the text area.
 */
public class TabTraversalEventHandler implements EventHandler<KeyEvent> {
    @Override
    public void handle(KeyEvent event) {
        if (event.getCode().equals(KeyCode.TAB)) {
            Node node = (Node) event.getSource();
            if (node instanceof TextArea) {
                TextAreaSkin skin = (TextAreaSkin) ((TextArea)node).getSkin();
                if (!event.isControlDown()) {
                    // Tab or shift-tab => navigational action
                    if (event.isShiftDown()) {
                        skin.getBehavior().traversePrevious();
                    } else {
                        skin.getBehavior().traverseNext();
                    }
                } else {
                    // Ctrl-Tab => insert a tab character in the text area
                    TextArea textArea = (TextArea) node;
                    textArea.replaceSelection("\t");
                }
                event.consume();
            }
        }
    }
}]]></Answer>
<Answer><![CDATA[@Override
public void handle(KeyEvent event) {
    if (event.getCode().equals(KeyCode.TAB)) {
        Node node = (Node) event.getSource();
        if (node instanceof TextField) {
            TextFieldSkin skin = (TextFieldSkin) ((TextField)node).getSkin();
            if (event.isShiftDown()) {
                skin.getBehavior().traversePrevious();
            }
            else {
                skin.getBehavior().traverseNext();
            }               
        }
        else if (node instanceof TextArea) {
            TextAreaSkin skin = (TextAreaSkin) ((TextArea)node).getSkin();
            if (event.isShiftDown()) {
                skin.getBehavior().traversePrevious();
            }
            else {
                skin.getBehavior().traverseNext();
            }
        }

        event.consume();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12577227" questionTitle="Jaxb XmlElementRef parent class tag">
<Answer><![CDATA[//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.09.25 at 11:57:53 AM GMT+05:30 
//


package com.test;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Requests">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="Request">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="ChildRequest">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;sequence>
 *                                       &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                                       &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                                     &lt;/sequence>
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                           &lt;attribute name="requestid" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "requests"
})
@XmlRootElement(name = "PublishRequest")
public class PublishRequest {

    @XmlElement(name = "Requests", required = true)
    protected PublishRequest.Requests requests;

    /**
     * Gets the value of the requests property.
     * 
     * @return
     *     possible object is
     *     {@link PublishRequest.Requests }
     *     
     */
    public PublishRequest.Requests getRequests() {
        return requests;
    }

    /**
     * Sets the value of the requests property.
     * 
     * @param value
     *     allowed object is
     *     {@link PublishRequest.Requests }
     *     
     */
    public void setRequests(PublishRequest.Requests value) {
        this.requests = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="Request">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="ChildRequest">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;sequence>
     *                             &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *                             &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *                           &lt;/sequence>
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *                 &lt;attribute name="requestid" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "request"
    })
    public static class Requests {

        @XmlElement(name = "Request", required = true)
        protected PublishRequest.Requests.Request request;

        /**
         * Gets the value of the request property.
         * 
         * @return
         *     possible object is
         *     {@link PublishRequest.Requests.Request }
         *     
         */
        public PublishRequest.Requests.Request getRequest() {
            return request;
        }

        /**
         * Sets the value of the request property.
         * 
         * @param value
         *     allowed object is
         *     {@link PublishRequest.Requests.Request }
         *     
         */
        public void setRequest(PublishRequest.Requests.Request value) {
            this.request = value;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="ChildRequest">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;sequence>
         *                   &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
         *                   &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
         *                 &lt;/sequence>
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *       &lt;attribute name="requestid" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "childRequest"
        })
        public static class Request {

            @XmlElement(name = "ChildRequest", required = true)
            protected PublishRequest.Requests.Request.ChildRequest childRequest;
            @XmlAttribute
            protected String requestid;

            /**
             * Gets the value of the childRequest property.
             * 
             * @return
             *     possible object is
             *     {@link PublishRequest.Requests.Request.ChildRequest }
             *     
             */
            public PublishRequest.Requests.Request.ChildRequest getChildRequest() {
                return childRequest;
            }

            /**
             * Sets the value of the childRequest property.
             * 
             * @param value
             *     allowed object is
             *     {@link PublishRequest.Requests.Request.ChildRequest }
             *     
             */
            public void setChildRequest(PublishRequest.Requests.Request.ChildRequest value) {
                this.childRequest = value;
            }

            /**
             * Gets the value of the requestid property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRequestid() {
                return requestid;
            }

            /**
             * Sets the value of the requestid property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRequestid(String value) {
                this.requestid = value;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
             *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "name",
                "id"
            })
            public static class ChildRequest {

                @XmlElement(required = true)
                protected String name;
                @XmlElement(required = true)
                protected String id;

                /**
                 * Gets the value of the name property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getName() {
                    return name;
                }

                /**
                 * Sets the value of the name property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setName(String value) {
                    this.name = value;
                }

                /**
                 * Gets the value of the id property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getId() {
                    return id;
                }

                /**
                 * Sets the value of the id property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setId(String value) {
                    this.id = value;
                }

            }

        }

    }

}]]></Answer>
<Answer><![CDATA[@XmlRootElement(name = "Request")
public class BaseRequest
{
    @XmlAttribute(name = "requestid")
    private String requestId;
    //Getters and Setters   
    @XmlElement(name = "ChildRequest")
    ChildRequest childRequest;
}

@XmlRootElement(name = "ChildRequest")
public class ChildRequest extends BaseRequest
{
    @XmlElement(name = "name")
    private String name = null;
    @XmlElement(name = "id")
    private String id = null;
    //Setters and getters 
}

@XmlRootElement(name = "PublishRequest")
public class PublishRequest
{
    private List<BaseRequest>   requests  = null;

    @XmlElementWrapper(name = "Requests")
    @XmlElementRefs({ @XmlElementRef(type = ChildRequest.class) })
    public List<BaseRequest> getRequests()
    {
        return this.requests;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12550542" questionTitle="XML parse node value as string">
<Answer><![CDATA[public static void main(String[] args) throws Exception {
    Document doc = parseDocument("properties.xml");
    List<Element> valueElements = getValueElements(doc);  // or getValueElementsUsingXpath(doc)

    int nodeNumber = 0;
    for (Element element : valueElements) {
      nodeNumber++;
      System.out.println("Node " + nodeNumber + ": " + formatValueElement(element));
    }
  }

  private static String formatValueElement(Element element) {
    StringBuffer result = new StringBuffer();

    boolean first = true;
    NodeList children = ((Element) element).getChildNodes();
    for (int i = 0, len = children.getLength(); i < len; i++) {
      Node child = children.item(i);

      String childText = null;
      switch (child.getNodeType()) {
      case Node.CDATA_SECTION_NODE:
      case Node.TEXT_NODE:
        childText = child.getTextContent().trim();
      }

      if (childText == null || childText.isEmpty()) {
        continue;
      }

      if (first)
        first = false;
      else
        result.append(" ");

      result.append(childText);
    }

    return result.toString();
  }]]></Answer>
<Answer><![CDATA[private static void printValues(String xml) throws Exception {
    Element element = parseXml(xml);

    NodeList values = element.getElementsByTagName("value");
    for(int i = 0; i<values.getLength(); i++){
        Node item = values.item(i);
        NodeList vals = item.getChildNodes();

        String value = ""; 

        for(int j = 0; j<vals.getLength(); j++){
            value += vals.item(j).getNodeValue(); 
        }

        System.out.print("Node ");
        System.out.print(Integer.toString(i));
        System.out.print(": ");
        System.out.println(value.trim());
    }
}

public static Element parseXml(String source) throws Exception{
    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    Document doc = dBuilder.parse(new InputSource(new ByteArrayInputStream(source.getBytes("utf-8"))));
    Element element = doc.getDocumentElement();
    element.normalize();

    return element;
}]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <xsl:output method="text" omit-xml-declaration="yes" />

    <xsl:template match="/">
        <xsl:apply-templates select="*/property"/>
    </xsl:template>

    <xsl:template match="property">
        <xsl:number /> 
        <xsl:text> </xsl:text>
        <xsl:apply-templates select="node()" />
        <xsl:text>&#xa;</xsl:text>
    </xsl:template>

    <xsl:template match="node()">
        <xsl:if test="normalize-space(.)">
            <xsl:value-of select="normalize-space(.)" />
        </xsl:if>
    </xsl:template>

</xsl:stylesheet>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12505366" questionTitle="Binding two tableviews together such that they scroll in sync">
<Answer><![CDATA[// Controller 
@FXML private TableView<MyBean> tableLeft;
@FXML private TableView<MyBean> tableRight;
@FXML private ScrollBar scrollBar;


@SuppressWarnings("rawtypes")
private void bindScrollBars(TableView<?> tableView1, TableView<?> tableView2, 
                 ScrollBar scrollBar, Orientation orientation) {

    // Get the scrollbar of first table
    VirtualFlow vf = (VirtualFlow)tableView1.getChildrenUnmodifiable().get(1);
    ScrollBar scrollBar1 = null;
    for (final Node subNode: vf.getChildrenUnmodifiable()) {
        if (subNode instanceof ScrollBar && 
                ((ScrollBar)subNode).getOrientation() == orientation) {
            scrollBar1 = (ScrollBar)subNode;
        }
     }

    // Get the scrollbar of second table
    vf = (VirtualFlow)tableView2.getChildrenUnmodifiable().get(1);
    ScrollBar scrollBar2 = null;
    for (final Node subNode: vf.getChildrenUnmodifiable()) {
        if (subNode instanceof ScrollBar && 
                ((ScrollBar)subNode).getOrientation() == orientation) {
            scrollBar2 = (ScrollBar)subNode;
        }
     }

    // Set min/max of visible scrollbar to min/max of a table scrollbar
    scrollBar.setMin(scrollBar1.getMin());
    scrollBar.setMax(scrollBar1.getMax());

    // bind the hidden scrollbar valueProterty the visible scrollbar
    scrollBar.valueProperty().bindBidirectional(scrollBar1.valueProperty());
    scrollBar.valueProperty().bindBidirectional(scrollBar2.valueProperty());
}

/*
 * This method must be called in Application.start() after the stage is shown,
 * because the hidden scrollbars exist only when the tables are rendered
 */
public void setScrollBarBinding() {
    bindScrollBars(this.tableLeft, this.tableRight, this.scrollBar, Orientation.VERTICAL);
}]]></Answer>
<Answer><![CDATA[/* The main scrollbar **track** CSS class  */

.mytableview .scroll-bar:vertical .track{
        -fx-padding:0px;
    -fx-background-color:transparent;
    -fx-border-color:transparent;
    -fx-background-radius: 0em;
    -fx-border-radius:2em;

}

/* The increment and decrement button CSS class of scrollbar */

.mytableview .scroll-bar:vertical .increment-button ,
.mytableview .scroll-bar:vertical .decrement-button {

    -fx-background-color:transparent;
    -fx-background-radius: 0em;
    -fx-padding:0 0 0 0;
}

.mytableview  .scroll-bar:vertical .increment-arrow,
.mytableview  .scroll-bar:vertical  .decrement-arrow
{
    -fx-shape: " "; 
    -fx-padding:0;        
}

/* The main scrollbar **thumb** CSS class which we drag every time (movable) */
.mytableview .scroll-bar:vertical .thumb {
    -fx-background-color:transparent;
    -fx-background-insets: 0, 0, 0;
    -fx-background-radius: 2em;
    -fx-padding:0px;

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12330720" questionTitle="How to convert node to image in javafx 2.1?">
<Answer><![CDATA[public class TrySnapshot extends Application {

    @Override
    public void start(Stage primaryStage) {
        final VBox vbox = new VBox(2);
        final Button btn = new Button();
        vbox.getChildren().add(btn);
        btn.setText("Say 'Hello World'");
        btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // here we make image from vbox and add it to scene, can be repeated :)
                WritableImage snapshot = vbox.snapshot(new SnapshotParameters(), null);

                vbox.getChildren().add(new ImageView(snapshot));
                System.out.println(vbox.getChildren().size());
            }
        });

        Scene scene = new Scene(new Group(vbox), 300, 250);

        primaryStage.setScene(scene);
        primaryStage.show();
    }]]></Answer>
<Answer><![CDATA[public class TrySnapshot extends Application {

javafx.embed.swing.SwingFXUtils fXUtils;
BufferedImage bufferedImage = new BufferedImage(550, 400, BufferedImage.TYPE_INT_ARGB);
File file = new File("C:/Users/PC1/Desktop/Sample Images/test.jpg");
VBox vbox = null;

@Override
public void start(Stage primaryStage) {
    vbox = new VBox();
    Button btn = new Button();
    Image i = new Image("file:C:\\Koala.jpg");
    ImageView imageView = new ImageView();
    imageView.setImage(i);
    vbox.getChildren().add(imageView);
    vbox.setSpacing(10);
    btn.setText("Say 'Hello World'");
    btn.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent event) {
        // here we make image from vbox and add it to scene, can be repeated :)
       WritableImage snapshot = vbox.snapshot(new SnapshotParameters(), null);
           vbox.getChildren().add(new ImageView(snapshot));
            saveImage(snapshot);
            System.out.println(vbox.getChildren().size());
        }
    });


    Scene scene = new Scene(new Group(btn), 500, 400);

    primaryStage.setScene(scene);
    primaryStage.show();
}

private void saveImage(WritableImage snapshot) {
    BufferedImage image;
    image = javafx.embed.swing.SwingFXUtils.fromFXImage(snapshot, bufferedImage);
    try {
        Graphics2D gd = (Graphics2D) image.getGraphics();
        gd.translate(vbox.getWidth(), vbox.getHeight());
        ImageIO.write(image, "png", file);
    } catch (IOException ex) {
        Logger.getLogger(TrySnapshot.class.getName()).log(Level.SEVERE, null, ex);
    };
  }
 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12299162" questionTitle="How to style menu button and menu items">
<Answer><![CDATA[.menu-item .label {
    -fx-text-fill: white;
}

.menu-item:focused {
     -fx-background-color: darkgray;
}

.menu-item:focused .label {
    -fx-text-fill: blue;
}

.context-menu {
    -fx-skin: "com.sun.javafx.scene.control.skin.ContextMenuSkin";
    -fx-background-color: black;
    -fx-background-insets: 0, 1, 2;
    -fx-background-radius: 0 6 6 6, 0 5 5 5, 0 4 4 4;
/*    -fx-padding: 0.666667em 0.083333em 0.666667em 0.083333em;  8 1 8 1 */
    -fx-padding: 0.333333em 0.083333em 0.666667em 0.083333em; /* 4 1 8 1 */
}]]></Answer>
<Answer><![CDATA[/* VARIABLE DEFINITIONS: Only these 4 variables have to be adjusted, the rest is copy-paste */
* {
    -fx-my-menu-color: #263238;                  /* Change according to your needs */
    -fx-my-menu-color-highlighted: #455a64;      /* Change according to your needs */
    -fx-my-menu-font-color: #FFFFFF;             /* Change according to your needs */
    -fx-my-menu-font-color-highlighted: #FFFFFF; /* Change according to your needs */
}

/* MENU BAR + Top-level MENU BUTTONS */
/*** The menu bar itself ***/    
.menu-bar {
    -fx-background-color: -fx-my-menu-color;
}

/*** Top-level menu itself (not selected / hovered) ***/
.menu-bar > .container > .menu-button {
    -fx-background-color: -fx-my-menu-color;
}

/*** Top-level menu's label (not selected / hovered) ***/
.menu-bar > .container > .menu-button > .label {
    -fx-text-fill: -fx-my-menu-font-color;
}

/*** Top-level menu's label (disabled) ***/
.menu-bar > .container > .menu-button > .label:disabled {
    -fx-opacity: 1.0;
}

/*** Top-level menu itself (selected / hovered) ***/
.menu-bar > .container > .menu-button:hover,
.menu-bar > .container > .menu-button:focused,
.menu-bar > .container > .menu-button:showing {
    -fx-background-color: -fx-my-menu-color-highlighted;
}

/*** Top-level menu's label (selected / hovered) ***/
.menu-bar > .container > .menu-button:hover > .label,
.menu-bar > .container > .menu-button:focused > .label,
.menu-bar > .container > .menu-button:showing > .label {
    -fx-text-fill: -fx-my-menu-font-color-highlighted;
}

/* MENU ITEM (children of a MENU BUTTON) */
/*** The item itself (not hovered / focused) ***/    
.menu-item {
    -fx-background-color: -fx-my-menu-color; 
}

/*** The item's label (not hovered / focused) ***/   
.menu-item .label {
    -fx-text-fill: -fx-my-menu-font-color;
}

/*** The item's label (disabled) ***/   
.menu-item .label:disabled {
    -fx-opacity: 1.0;
}    

/*** The item itself (hovered / focused) ***/    
.menu-item:focused, .menu-item:hovered {
    -fx-background-color: -fx-my-menu-color-highlighted; 
}

/*** The item's label (hovered / focused) ***/  
.menu-item:focused .label, .menu-item:hovered .label {
    -fx-text-fill: -fx-my-menu-font-color-highlighted;
}

/* CONTEXT MENU */
/*** The context menu that contains a menu's menu items ***/  
.context-menu {
    -fx-background-color: -fx-my-menu-color; 
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12265702" questionTitle="PDF generation using iText in Struts-2 : result type stream not working">
<Answer><![CDATA[import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts2.interceptor.ServletResponseAware;
import com.yoursite.helper.PDFGenerator;
import com.opensymphony.xwork2.ActionSupport;

public class ViewPDFAction extends ActionSupport
    implements ServletResponseAware {

    private static final long serialVersionUID = 1L;    
    private HttpServletResponse response;

    @Override
    public String execute() throws Exception {

        ByteArrayOutputStream baosPDF = new PDFGenerator().generatePDF();    
        String filename = "Your_Filename.pdf"; 

        response.setContentType("application/pdf");
        response.setHeader("Content-Disposition",
            "inline; filename=" + filename); // open in new tab or window           
        response.setContentLength(baosPDF.size());

        OutputStream os = response.getOutputStream();
        os.write(baosPDF.toByteArray());
        os.flush();
        os.close();
        baosPDF.reset();

        return NONE; // or return null
    }

    @Override
    public void setServletResponse(HttpServletResponse response) {
        this.response = response;       
    }
}]]></Answer>
<Answer><![CDATA[Class ExportReportAction extends ActionSupport {
  public void exportToPdf() { // no return type
    try {
        Document document = new Document();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter.getInstance(document, baos);
        document.open();
        document.add(new Paragraph("success PDF FROM STRUTS"));
        document.close(); 
        ServletOutputStream outputStream = response.getOutputStream() ; 
        baos.writeTo(outputStream); 
        response.setHeader("Content-Disposition", "attachment; filename=\"stuReport.pdf\""); 
        response.setContentType("application/pdf"); 
        outputStream.flush(); 
        outputStream.close(); 
    }catch (Exception e) {
        //catch
    }

  } 
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12124657" questionTitle="Getting started on Scala + JavaFX desktop application development">
<Answer><![CDATA[package hack

/**
  * Created by WorkDay on 8/11/16.<br>
  * <br>
  * HelloTest shows a method which allows parameters to be passed
  * into your javaFX application as it is started
  * this allows it to be connected to non-FX code that existed before it.
  *
  * You could also pass a reference to the Application back
  * into the non-FX code if needed.
  */

import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.layout.StackPane
import javafx.stage.Stage
import javafx.scene.control.Label

case class Data(data: String)

object SomeOtherCode extends App {
  HelloTest.launch(Data("brave"), Data("new"))
}

object HelloTest {
  var data1: Data = _
  var data2: Data = _
  def launch(data1: Data, data2: Data) = {
    HelloTest.data1 = data1
    HelloTest.data2 = data2
    Application.launch(classOf[HelloTest])
  }
}

private class HelloTest extends Application {
  val data1: Data = HelloTest.data1
  val data2: Data = HelloTest.data2


  override def start(primaryStage: Stage) {
    primaryStage.setTitle("Sup!")

    val root = new StackPane
    root.getChildren.add(new Label(s"Hello ${data1.data} ${data2.data} world!"))

    primaryStage.setScene(new Scene(root, 300, 300))
    primaryStage.setX(0)
    primaryStage.setY(0)
    primaryStage.show()
  }
}]]></Answer>
<Answer><![CDATA[class BuildFx extends Application{

  override def start(primaryStage: Stage): Unit = {
    primaryStage.setTitle("Scala")
    var btn=new Button("Say Hello Scala")
    val root=new StackPane()
    root.getChildren().add(btn)
    primaryStage.setScene(new Scene(root, 300, 300))
    primaryStage.show()

  }



  def launchIt():Unit={
    Application.launch()
  }

}

///////////////////////////////////////////////////////////
object Init{


  def main(args: Array[String]): Unit = {
    val buildFx=new BuildFx
    buildFx.launchIt()

  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.layout.StackPane
import javafx.stage.Stage
import javafx.scene.control.Label

class Test extends Application {
  println("Test()")

  override def start(primaryStage: Stage) {
    primaryStage.setTitle("Sup!")

    val root = new StackPane
    root.getChildren.add(new Label("Hello world!"))

    primaryStage.setScene(new Scene(root, 300, 300))
    primaryStage.show()
  }
}

object Test {
  def main(args: Array[String]) {
    Application.launch(classOf[Test], args: _*)
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12113213" questionTitle="EJB - How to use CRUD code with multiple Persistence Units">
<Answer><![CDATA[/**
 *  Example managed bean that uses our
 *  stateless session bean's generic CRUD
 *  methods.
 *
 */

class ExampleManagedBean {

    @EJB
    MyCrudBeanLocal crudBean;

    public void createStuff() {
        // create two test objects
        Customer cust   =  createRandomCustomer();
        FunkyItem item  =  createRandomItem();
        // use generic method to persist them
        crudBean.create(cust);
        crudBean.create(item);
    }
}]]></Answer>
<Answer><![CDATA[public class FormEBean {

        final Logger logger = LoggerFactory.getLogger(FormEBean.class);

        protected EntityManager emCrud;

        public EntityManager getEmCrud() {
            return emCrud;
        }

        public void setEmCrud(EntityManager em) {
            emCrud = em;
        }

        public <T> String create(T entity) {
            String exception = null;
            try {
                emCrud.persist(entity);
                emCrud.flush();
            } catch (Exception ex) {
                //ex.printStackTrace();
                exception = ex.getLocalizedMessage();
            }
            return exception;
        }

        public <T> void create(List<T> entityList) {
            for (T entity : entityList) {
                emCrud.persist(entity);
            }
        }

        public <T> void edit(T entity) {
            emCrud.merge(entity);
        }

        public <T> void edit(Set<T> entitySet) {
            Iterator<T> it = entitySet.iterator();
            while (it.hasNext()) {
                T entity = it.next();
                emCrud.merge(entity);
                emCrud.flush();
            }
        }

        public <T> void remove(T entity) {
            emCrud.remove(emCrud.merge(entity));
        }

        public <T> void remove(T[] listaDaRimuovere) {
            for (T entity : listaDaRimuovere) {
                emCrud.remove(emCrud.merge(entity));
            }
        }

        public <T> void remove(List<T> listaDaRimuovere) {
            for (T entity : listaDaRimuovere) {
                emCrud.remove(emCrud.merge(entity));
            }
        }
     }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12093346" questionTitle="maven-ear-plugin is not including jarModule into application.xml">
<Answer><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.blah</groupId>
    <artifactId>MyApp.EAR</artifactId>
    <version>1.0</version>
    <packaging>ear</packaging>

    <properties>
        <weblogic.version>10.3</weblogic.version>
        <weblogic.version.minor>${weblogic.version}.4</weblogic.version.minor>
        <weblogic.host>***</weblogic.host>
        <weblogic.port>***</weblogic.port>
        <weblogic.username>***</weblogic.username>
        <weblogic.password>***</weblogic.password>
    </properties>

    <build>
        <finalName>MyApp</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ear-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <applicationName>MyApp</applicationName>
          <includeLibInApplicationXml>true</includeLibInApplicationXml>
                    <modules>
                        <ejbModule>
                            <groupId>com.blah</groupId>
                            <artifactId>MyApp.EJB</artifactId>
                        </ejbModule>
                        <webModule>
                            <groupId>com.blah</groupId>
                            <artifactId>MyApp.Web</artifactId>
                            <contextRoot>MyApp</contextRoot>
                        </webModule>
                    </modules>
                    <archive>
                        <manifestEntries>
                            <WebLogic-Application-Version>${weblogic.version}</WebLogic-Application-Version>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.oracle.weblogic</groupId>
                <artifactId>weblogic-maven-plugin</artifactId>
                <version>10.3.4</version>
                <configuration>
                    <adminurl>t3://${weblogic.host}:${weblogic.port}</adminurl>
                    <user>${weblogic.username}</user>
                    <password>${weblogic.password}</password>
                    <upload>true</upload>
                    <action>deploy</action>
                    <remote>false</remote>
                    <verbose>true</verbose>
                    <source>${project.build.directory}/${project.build.finalName}.${project.packaging}</source>
                    <name>${project.build.finalName}</name>
                </configuration>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-ear-plugin</artifactId>
                                        <versionRange>[2.7,)</versionRange>
                                        <goals>
                                            <goal>generate-application-xml</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencies>
    <dependency>
      <groupId>com.blah</groupId>
      <artifactId>MyApp.EJB</artifactId>
      <version>1.0</version>
      <type>ejb</type>
    </dependency>
    <dependency>
      <groupId>com.blah</groupId>
      <artifactId>MyApp.Web</artifactId>
      <version>1.0</version>
      <type>war</type>
    </dependency>
    </dependencies>
</project>]]></Answer>
<Answer><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>appletree.be-multi</artifactId>
        <groupId>be.appletree</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>appletree.be-ear</artifactId>
    <packaging>ear</packaging>

    <dependencies>


        <dependency>
            <groupId>be.appletree</groupId>
            <artifactId>appletree.be-domain</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <groupId>be.appletree</groupId>
            <artifactId>appletree.be-ejb</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>ejb</type>
        </dependency>

        <dependency>
            <groupId>be.appletree</groupId>
            <artifactId>appletree.be-web</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>war</type>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-ear-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <modules>
                        <jarModule>
                            <groupId>be.appletree</groupId>
                            <artifactId>appletree.be-domain</artifactId>
                            <includeInApplicationXml>true</includeInApplicationXml>
                        </jarModule>
                        <webModule>
                            <groupId>be.appletree</groupId>
                            <artifactId>appletree.be-web</artifactId>
                        </webModule>
                        <ejbModule>
                            <groupId>be.appletree</groupId>
                            <artifactId>appletree.be-ejb</artifactId>
                        </ejbModule>
                    </modules>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="12060917" questionTitle="using nested_tables in java">
<Answer><![CDATA[SQL> create or replace type numArray as table of number;
  2  /

Type created.

SQL> create or replace type dateArray as table of date;
  2  /

Type created.

SQL> create or replace type strArray as table of varchar2(255);
  2  /

Type created.

SQL> create or replace package demo_passing_pkg
  2  as
  3      procedure pass( p_in in numArray, p_out out numArray )
  4      as language java
  5      name 'demo_passing_pkg.pass_num_array( oracle.sql.ARRAY,
  6                                             oracle.sql.ARRAY[] )';
  7
  8      procedure pass( p_in in dateArray, p_out out dateArray )
  9      as language java
 10      name 'demo_passing_pkg.pass_date_array( oracle.sql.ARRAY,
 11                                              oracle.sql.ARRAY[] )';
 12
 13
 14      procedure pass( p_in in strArray, p_out out strArray )
 15      as language java
 16      name 'demo_passing_pkg.pass_str_array( oracle.sql.ARRAY,
 17                                             oracle.sql.ARRAY[] )';
 18  end;
 19  /

Package created.

SQL> set define off
SQL>
SQL> create or replace and compile
  2  java source named "demo_passing_pkg"
  3  as
  4  import java.io.*;
  5  import java.sql.*;
  6  import java.math.*;
  7  import oracle.sql.*;
  8  import oracle.jdbc.driver.*;
  9
 10  public class demo_passing_pkg extends Object
 11  {
 12
 13  private static void show_array_info( oracle.sql.ARRAY p_in )
 14  throws SQLException
 15  {
 16      System.out.println( "Array is of type      " +
 17                           p_in.getSQLTypeName() );
 18      System.out.println( "Array is of type code " +
 19                           p_in.getBaseType() );
 20      System.out.println( "Array is of length    " +
 21                           p_in.length() );
 22  }
 23
 24  public static void pass_num_array( oracle.sql.ARRAY p_in,
 25                                     oracle.sql.ARRAY[] p_out )
 26  throws SQLException
 27  {
 28      show_array_info( p_in );
 29      java.math.BigDecimal[] values = (BigDecimal[])p_in.getArray();
 30
 31      for( int i = 0; i < p_in.length(); i++ )
 32          System.out.println( "p_in["+i+"] = " + values[i].toString() );
 33
 34      Connection conn = new OracleDriver().defaultConnection();
 35      ArrayDescriptor descriptor =
 36         ArrayDescriptor.createDescriptor( p_in.getSQLTypeName(), conn );
 37
 38      p_out[0] = new ARRAY( descriptor, conn, values );
 39
 40  }
 41
 42  public static void
 43  pass_date_array( oracle.sql.ARRAY p_in, oracle.sql.ARRAY[] p_out )
 44  throws SQLException
 45  {
 46      show_array_info( p_in );
 47      java.sql.Timestamp[] values = (Timestamp[])p_in.getArray();
 48
 49      for( int i = 0; i < p_in.length(); i++ )
 50          System.out.println( "p_in["+i+"] = " + values[i].toString() );
 51
 52      Connection conn = new OracleDriver().defaultConnection();
 53      ArrayDescriptor descriptor =
 54         ArrayDescriptor.createDescriptor( p_in.getSQLTypeName(), conn );
 55
 56      p_out[0] = new ARRAY( descriptor, conn, values );
 57
 58  }
 59
 60  public static void
 61  pass_str_array( oracle.sql.ARRAY p_in, oracle.sql.ARRAY[] p_out )
 62  throws java.sql.SQLException,IOException
 63  {
 64      show_array_info( p_in );
 65      String[] values = (String[])p_in.getArray();
 66
 67      for( int i = 0; i < p_in.length(); i++ )
 68          System.out.println( "p_in["+i+"] = " + values[i] );
 69
 70      Connection conn = new OracleDriver().defaultConnection();
 71      ArrayDescriptor descriptor =
 72         ArrayDescriptor.createDescriptor( p_in.getSQLTypeName(), conn );
 73
 74      p_out[0] = new ARRAY( descriptor, conn, values );
 75
 76  }
 77
 78  }
 79  /

Java created.

SQL> set serveroutput on size 1000000
SQL> exec dbms_java.set_output( 1000000 )

PL/SQL procedure successfully completed.

SQL>
SQL> declare
  2      l_in strArray := strArray();
  3      l_out strArray := strArray();
  4  begin
  5      for i in 1 .. 5 loop
  6          l_in.extend;
  7          l_in(i) := 'Element ' || i;
  8      end loop;
  9
 10      demo_passing_pkg.pass( l_in, l_out );
 11      for i in 1 .. l_out.count loop
 12          dbms_output.put_line( 'l_out(' || i || ') = ' || l_out(i) );
 13      end loop;
 14  end;
 15  /
Array is of type      OPS$TKYTE.STRARRAY
Array is of type code 12
Array is of length    5
p_in[0] = Element 1
p_in[1] = Element 2
p_in[2] = Element 3
p_in[3] = Element 4
p_in[4] = Element 5
l_out(1) = Element 1
l_out(2) = Element 2
l_out(3) = Element 3
l_out(4) = Element 4
l_out(5) = Element 5

PL/SQL procedure successfully completed.]]></Answer>
<Answer><![CDATA[try {

        stmt = con.createStatement();

        // -----------------------------------------------------
        // Call PL/SQL Procedure
        // -----------------------------------------------------

        String s1 = "begin p_schema_level_out(?,?); end;";
        cstmt = (OracleCallableStatement) con.prepareCall(s1);
        cstmt.setString(1, "something");
        cstmt.registerOutParameter(2, Types.ARRAY, "ITYPE_CUSTOM");
        cstmt.execute();

        Object[] data = (Object[]) ((Array) cstmt.getObject(2)).getArray();
        for (Object tmp : data) {
            STRUCT row = (STRUCT) tmp;

            for (Object attribute : row.getAttributes()) {
                System.out.println(attribute);

            }

            cstmt.close();
            stmt.close();

        }
    } catch (SQLException e) {

        e.printStackTrace();

    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11934045" questionTitle="How to add empty row in GridPane in JavaFx?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

// GridPane with a blank row
// http://stackoverflow.com/questions/11934045/how-to-add-empty-row-in-gridpane-in-javafx
public class GridPaneWithEmptyRowSample extends Application {
  public static void main(String[] args) { launch(args); }
  @Override public void start(final Stage stage) throws Exception {
    // create nodes for the grid.
    final Label label1 = new Label("Label 1");
    final Label label2 = new Label("Label 2");
    final Label label3 = new Label("Label 3");
    final Pane  spring = new Pane();
    spring.minHeightProperty().bind(label1.heightProperty());

    // layout the scene.
    final GridPane layout = new GridPane();
    layout.add(label1, 0, 0);
    layout.add(spring, 0, 1);
    layout.add(label2, 0, 2);
    layout.add(label3, 0, 3);
    layout.setPrefHeight(100);
    stage.setScene(new Scene(layout));
    stage.show();
  }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class SSCCE extends Application {

    @Override
    public void start(Stage stage) {

        VBox root = new VBox();

        GridPane gridPane = new GridPane();

        gridPane.add(new Label("First"), 0, 0);
        gridPane.add(new Label("Second"), 0, 2);
        gridPane.add(new Label("Third"), 0, 3);

        // Add one RowConstraint for each row. The problem here is that you
        // have to know how many rows you have in you GridPane to set
        // RowConstraints for all of them.
        for (int i = 0; i <= 3; i++) {
            RowConstraints con = new RowConstraints();
            // Here we set the pref height of the row, but you could also use .setPercentHeight(double) if you don't know much space you will need for each label.
            con.setPrefHeight(20);
            gridPane.getRowConstraints().add(con);
        }

        root.getChildren().add(gridPane);

        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

    }

    public static void main(String[] args) {
        launch();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11838421" questionTitle="Jsp, servlet back button issue">
<Answer><![CDATA[<html>
    <body>
        <form action="servletA" method="POST">
            <select name="corrtoe">
                <%if("1".equals(request.getSession().getAttribute("corrtoe"))){ %>
                    <option value="1" selected>1</option>
                <%}else{ %>
                    <option value="1">1</option>
                <%} %>
                <%if("2".equals(request.getSession().getAttribute("corrtoe"))){ %>
                    <option value="2" selected>2</option>
                <%}else{ %>
                    <option value="2">2</option>
                <%} %>
                <%if("3".equals(request.getSession().getAttribute("corrtoe"))){ %>
                    <option value="3" selected>3</option>
                <%}else{ %>
                    <option value="3">3</option>
                <%} %>
            </select>
            <input type="submit">
        </form>
    </body>
</html>]]></Answer>
<Answer><![CDATA[try{
int rs1;

// Load the database driver
Class.forName("com.mysql.jdbc.Driver");
// Get a Connection to the database
connection = DriverManager.getConnection(connectionURL); 

//Add the data into the database

Statement stmt = connection.createStatement(); 
Statement stmt1 = connection.createStatement(); 
Statement stmt2 = connection.createStatement(); 
Statement stmt3 = connection.createStatement(); 
Statement stmt4 = connection.createStatement(); 
Statement stmt5 = connection.createStatement(); 
Statement stmt6 = connection.createStatement(); 





ResultSet rs = stmt.executeQuery( "Select * from toe_description where toe_id= '" + corrtoepost + "' " ) ;




ResultSet rs2 = stmt1.executeQuery( "Select * from toe_text where type_id=1 AND toe_id= '" + corrtoepost + "' " ) ;
ResultSet rs3 = stmt2.executeQuery( "Select * from toe_text where type_id=2 AND toe_id= '" + corrtoepost + "' " ) ;
ResultSet rs4 = stmt3.executeQuery( "Select * from toe_text where type_id=3 AND toe_id= '" + corrtoepost + "' " ) ;
ResultSet rs5 = stmt4.executeQuery( "Select * from toe_text where type_id=4 AND toe_id= '" + corrtoepost + "' " ) ;
ResultSet rs6 = stmt5.executeQuery( "Select * from toe_text where type_id=5 AND toe_id= '" + corrtoepost + "' " ) ;
ResultSet rs7 = stmt6.executeQuery( "Select * from toe_text where type_id=6 AND toe_id= '" + corrtoepost + "' " ) ;











while(rs.next()){
String toeid= rs.getString(1);
String toename= rs.getString(2);
String Intname= rs.getString(4);
String Assetname= rs.getString(5);
String Objname= rs.getString(6);
String ProjectID= rs.getString(7);



request.setAttribute("toeid", toeid);
request.setAttribute("toename", toename);
request.setAttribute("Intname", Intname);
request.setAttribute("Assetname", Assetname);
request.setAttribute("Objname", Objname);
request.setAttribute("ProjectID", ProjectID);





while(rs2.next()){
String purpose= rs2.getString(4);

request.setAttribute("purpose", purpose);








while(rs3.next()){
String scope= rs3.getString(4);

request.setAttribute("scope", scope);
System.out.println(scope);





while(rs4.next()){
String toe_desc= rs4.getString(4);

request.setAttribute("toe_desc", toe_desc);


System.out.println(toe_desc);




while(rs7.next()){
String toe_ass= rs7.getString(4);

request.setAttribute("toe_ass", toe_ass);








while(rs6.next()){
String enviroment= rs6.getString(4);

request.setAttribute("enviroment", enviroment);





while(rs5.next()){
String ass_env= rs5.getString(4);

request.setAttribute("ass_env", ass_env);



}


}



}



}



}



}

}


request.getRequestDispatcher("/WEB-INF/indexa.jsp").forward(request, response);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11775546" questionTitle="m2eclipse not copying src/main/resources to target">
<Answer><![CDATA[<build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <versionRange>[1.0,)</versionRange>
                    <goals>
                      <goal>resources</goal>
                      <goal>testResources</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
    <name>m2demo</name>
    <comment></comment>
    <projects>
    </projects>
    <buildSpec>
        <buildCommand>
            <name>org.eclipse.jdt.core.javabuilder</name>
            <arguments>
            </arguments>
        </buildCommand>
        <!-- 
        <buildCommand>
            <name>org.eclipse.m2e.core.maven2Builder</name>
            <arguments>
            </arguments>
        </buildCommand>
         -->
    </buildSpec>
    <natures>
        <nature>org.eclipse.jdt.core.javanature</nature>
        <nature>org.eclipse.m2e.core.maven2Nature</nature>
    </natures>
</projectDescription>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11774722" questionTitle="How to catch and wrap exceptions thrown by JTA when a container-managed-tx EJB commits?">
<Answer><![CDATA[@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
class TheEJB {

    @Inject
    private TheEJB self;

    @Inject private EntityManager em;

    public methodOfInterest() throws AppValidationException {
       try {
           self.methodOfInterestImpl();
       } catch (ValidationException ex) {
           throw new AppValidationException(ex);
       }
    }

    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
    public methodOfInterestImpl() throws AppValidationException {
        someEntity.getCollectionWithMinSize1().removeAll();
        em.merge(someEntity);
    }    
}]]></Answer>
<Answer><![CDATA[@Stateless
@TransactionManagement(TransactionManagementType.BEAN)
class TheEJB {

    @Inject private EntityManager em;

    @Resource private UserTransaction tx; 

    // Note: Any current container managed tx gets suspended at the entry
    // point to this method; it's effectively `REQUIRES_NEW`.
    // 
    public methodOfInterest() throws AppValidationException, SomeOtherAppException {
       try {
           tx.begin();
           // For demonstration's sake create a situation that'll cause validation to
           // fail at commit-time here, like
           someEntity.getCollectionWithMinSize1().removeAll();
           em.merge(someEntity);
           tx.commit();
       } catch (ValidationException ex) {
           throw new AppValidationException(ex);
       } catch (PersistenceException ex) {
           // Go grubbing in the exception for useful nested exceptions
           if (isConstraintViolation(ex)) {
               throw new AppValidationException(ex);
           } else {
               throw new SomeOtherAppException(ex);
           }
       }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11719005" questionTitle="Draw a semi ring - JavaFX">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.stage.Stage;

public class SemiCircleSample extends Application {
  @Override public void start(Stage stage) {
    Arc arc = new Arc(50, 50, 25, 25, 0, 180);
    arc.setType(ArcType.OPEN);
    arc.setStrokeWidth(10);
    arc.setStroke(Color.CORAL);
    arc.setStrokeType(StrokeType.INSIDE);
    arc.setFill(null);

    stage.setScene(new Scene(new Group(arc), 100, 80));
    stage.show();
  }

  public static void main(String[] args) { launch(args); }
}]]></Answer>
<Answer><![CDATA[public class SemiDemo extends Application {

    @Override
    public void start(Stage primaryStage) {

        Group root = new Group();
        root.getChildren().add(drawSemiRing(120, 120, 100, 50, Color.LIGHTGREEN, Color.DARKGREEN));
        root.getChildren().add(drawSemiRing(350, 350, 200, 30, Color.LIGHTSKYBLUE, Color.DARKBLUE));

        Scene scene = new Scene(root, 300, 250);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private Path drawSemiRing(double centerX, double centerY, double radius, double innerRadius, Color bgColor, Color strkColor) {
        Path path = new Path();
        path.setFill(bgColor);
        path.setStroke(strkColor);
        path.setFillRule(FillRule.EVEN_ODD);

        MoveTo moveTo = new MoveTo();
        moveTo.setX(centerX + innerRadius);
        moveTo.setY(centerY);

        ArcTo arcToInner = new ArcTo();
        arcToInner.setX(centerX - innerRadius);
        arcToInner.setY(centerY);
        arcToInner.setRadiusX(innerRadius);
        arcToInner.setRadiusY(innerRadius);

        MoveTo moveTo2 = new MoveTo();
        moveTo2.setX(centerX + innerRadius);
        moveTo2.setY(centerY);

        HLineTo hLineToRightLeg = new HLineTo();
        hLineToRightLeg.setX(centerX + radius);

        ArcTo arcTo = new ArcTo();
        arcTo.setX(centerX - radius);
        arcTo.setY(centerY);
        arcTo.setRadiusX(radius);
        arcTo.setRadiusY(radius);

        HLineTo hLineToLeftLeg = new HLineTo();
        hLineToLeftLeg.setX(centerX - innerRadius);

        path.getElements().add(moveTo);
        path.getElements().add(arcToInner);
        path.getElements().add(moveTo2);
        path.getElements().add(hLineToRightLeg);
        path.getElements().add(arcTo);
        path.getElements().add(hLineToLeftLeg);

        return path;
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[/**
 *
 * @param x Coordinate x of the centre of the arc
 * @param y Coordinate y of the centre of the arc
 * @param outer Outer radius of the arc
 * @param innerPercentage Inner radius of the arc, from 0 to 1 (as percentage)
 * @param arcStartAngle Start angle of the arc, in degrees
 * @param arcExtent Extent of the arc, in degrees
 */
private void drawSemiCircle(float x, float y, float outer, float innerPercentage, float arcStartAngle, float arcExtent) {
    RadialGradient rg = new RadialGradient(
            0,
            0,
            x,
            y,
            outer,
            false,
            CycleMethod.NO_CYCLE,
            new Stop((innerPercentage + (.0 * innerPercentage)), Color.TRANSPARENT),
            new Stop((innerPercentage + (.1 * innerPercentage)), Color.RED),
            new Stop((innerPercentage + (.6 * innerPercentage)), Color.YELLOW),
            new Stop((innerPercentage + (1 * innerPercentage)), Color.GREEN)
    );
    gc.setFill(rg);
    gc.fillArc(
            x - outer,
            y - outer,
            outer * 2,
            outer * 2,
            arcStartAngle,
            arcExtent,
            ArcType.ROUND
    );
}]]></Answer>
<Answer><![CDATA[drawpercent = 0.85; //this draws a semi ring to 85% you can change it using your code.
DegreesStart = -90;
DegreesRotation = 180;

radiusPathRectF = new android.graphics.RectF((float)CentreX - (float)Radius, (float)CentreY - (float)Radius,  (float)CentreX + (float)Radius, (float)CentreY + (float)Radius);
innerradiusPathRectF = new android.graphics.RectF((float)CentreX - (float)InnerRadius, (float)CentreY - (float)InnerRadius, (float)CentreX + (float)InnerRadius, (float)CentreY + (float)InnerRadius);

Path p = new Path(); //TODO put this outside your draw() function,  you should never have a "new" keyword inside a fast loop.

                degrees = (360 + (DegreesStart)) % 360;
                radians = (360 - degrees + 90) * Math.PI / 180.0;
                //radians = Math.toRadians(DegreesStart);
                int XstartOuter = (int)Math.round((Math.cos(radians) * Radius + CentreX));
                int YstartOuter = (int)Math.round((Math.sin(-radians)* Radius + CentreY));
                int XstartInner = (int)Math.round((Math.cos(radians) * InnerRadius + CentreX));
                int YstartInner = (int)Math.round((Math.sin(-radians) * InnerRadius + CentreY));

                degrees = (360 + (DegreesStart + drawpercent * DegreesRotation)) % 360;
                //radians = degrees * Math.PI / 180.0;
                radians = (360 - degrees + 90) * Math.PI / 180.0;
                //radians = Math.toRadians(DegreesStart + drawpercent * DegreesRotation);
                int XendOuter = (int)Math.round((Math.cos(radians) * Radius + CentreX));
                int YendOuter = (int)Math.round((Math.sin(-radians) * Radius + CentreY));
                int XendInner = (int)Math.round((Math.cos(radians) * InnerRadius + CentreX));
                int YendInner = (int)Math.round((Math.sin(-radians) * InnerRadius + CentreY));

                //draw a path outlining the semi-circle ring.
                p.moveTo(XstartInner, YstartInner);
                p.lineTo(XstartOuter, YstartOuter);
                p.arcTo(radiusPathRectF, (float)DegreesStart - (float)90, (float)drawpercent * (float)DegreesRotation);
                p.lineTo(XendInner, YendInner);
                p.arcTo(innerradiusPathRectF, (float)degrees - (float)90, -1 * (float)drawpercent * (float)DegreesRotation);
                p.close();

                g.clipPath(p);

                g.drawBitmap(bitmapCircularBarImage, bitmapRect0, bitmapRectXY, paint);]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11687269" questionTitle="Incorrect data redirects user to a blank page from a Servlet Login page">
<Answer><![CDATA[if(loginemail.equals("")||loginemail.equals(" ")||loginpassword.equals("")||loginpassword.equals(" "))
         redirectMyPage(response);
    // There should be only one record. So, If should be used.
    if(rs.next()) {
        //In my opinion there is no need of this. But you haven't mentioned your DAO part.
        // You should write DAO in such manner that if both email and password are correct, then
        // only return a record from the database.
        if(loginemail.equals(regemail) && (loginpassword.equals(regpassword))==true)
        {
            //Your other code ...
            HttpSession session = request.getSession(true);
            session.setAttribute("USERID", userid);
            session.setAttribute("FNAME", fname);
            redirectPage = UserHome.jsp";
        }
        // No need of else
    }
    redirectMyPage(response);
    //.. Other code
}

private void redirectMyPage(HttpResponse response){
    response.sendRedirect(redirectPage);
    return;
}]]></Answer>
<Answer><![CDATA[import getset.Getset;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import accessdb.Dao;

public class LoginAuthentication extends HttpServlet {
private static final long serialVersionUID = 1L;


protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // Authentication and Logging in The Registered User
    Getset g=new Getset();
    Dao dao=new Dao();
    String userid="";
    String fname="";
//  PrintWriter pw=response.getWriter();
    String loginemail=request.getParameter("loginemail");
    String loginpassword=request.getParameter("loginpassword");
    if(loginemail.equals("")||loginemail.equals(" ")||loginpassword.equals("")||loginpassword.equals(" "))
    {
        response.sendRedirect("WelcomePage.jsp");
    }
    else{
    g.setloginemail(loginemail);
    g.setloginpassword(loginpassword);
    try {
        ResultSet rs=dao.loginauthentication(g);
        while(rs.next())   //Fetching all emails and passwords from user table
        {
            String regemail=rs.getString("regemail");
            String regpassword=rs.getString("regpassword");
            System.out.println(""+regemail);
            if(loginemail.equals(regemail) && (loginpassword.equals(regpassword)))
            {   
                System.out.println("55555");
                ResultSet rs1=dao.getnameid(g);
                while(rs1.next())   //GET USERID and name FROM NEWUSER TO USE AS PRIMARY KEY
                {
                     userid=rs1.getString("USERID");
                     fname=rs1.getString("FNAME");
                    System.out.println(""+userid);

                }

                HttpSession session = request.getSession(true);
                  session.setAttribute("USERID", userid);
                  session.setAttribute("FNAME", fname);
                response.sendRedirect("UserHome.jsp");
                break;
            }

        }

    } catch (ClassNotFoundException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }       
}
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11675626" questionTitle="approach for displaying message after form submit">
<Answer><![CDATA[$("#submit").click(function(){

        var response = '';
        $.ajax({ type: "GET",   
                 url: "ajaxprintcoupon",   
                 async: false,
                 success : function(text)
                 {
                     response = text;
                 }
        });

        alert(response);

        if(response == 'Testing'){
            $('#printCoupon').submit();
        }else{
            // no change
        }
    });]]></Answer>
<Answer><![CDATA[function sendIt() {
    var theCode = document.codeHolderForm.code.value;
    var linkToDiv = document.getElementById("output");
    linkToDiv.innerHTML = 'p> Server response below: p>';

    var request = getXmlHttp();

    request.open("POST", "/", true);
    request.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
    request.onreadystatechange = function () {
        if (request.readyState != 4) return;

        if (request.status == 200) {
            linkToDiv.innerHTML += 'p>' + request.responseText + '/p>';
        } else {
            handleError(request.statusText);
        }
    };

    request.send("code=" + theCode);

}

function handleError(message) {
    alert("Error: "+message)
}

function getXmlHttp() {
    var xmlhttp;
    try {
        xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (e) {
        try {
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (E) {
            xmlhttp = false;
        }
    }
    if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
        xmlhttp = new XMLHttpRequest();
    }
    return xmlhttp;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11621696" questionTitle="Path position with respect to slider value not set correctly">
<Answer><![CDATA[public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        Slider slider = new Slider();
        slider.setStyle("-fx-border-color: green");
        slider.setLayoutX(60);
        slider.setLayoutY(50);
        slider.setMax(200);
        slider.setValue(180);
        slider.setMin(100);
        slider.setPrefWidth(390);

        double margin = 10; // left and right margins between the border and the slider line of the slider

        SimpleDoubleProperty pixelsPerValueProperty = //
                new SimpleDoubleProperty((slider.getPrefWidth() //
                - (2 * margin)) / (slider.getMax() - slider.getMin()));

        SimpleDoubleProperty pathXProperty = new SimpleDoubleProperty();
        pathXProperty.bind(slider.layoutXProperty()//
                .add(margin)//
                .add(pixelsPerValueProperty.multiply(slider.valueProperty().subtract(slider.getMin()))));

        MoveTo moveTo = new MoveTo(0, 0);
        moveTo.xProperty().bind(pathXProperty);
        LineTo lineTo = new LineTo(0, 25);
        lineTo.xProperty().bind(pathXProperty);

        Path path = PathBuilder.create().elements(
                moveTo, lineTo)//
                .stroke(Color.CYAN)//
                .strokeWidth(3)//
                .translateX(0)//
                .translateY(77.0)//
                .build();

        Group group = new Group(slider, path);
        primaryStage.setScene(new Scene(group, 700, 250));
        System.out.println("before slider.getWidth() = " + slider.getWidth());
        primaryStage.show();
        System.out.println("after slider.getWidth() = " + slider.getWidth());
    }
}]]></Answer>
<Answer><![CDATA[private void addMarker() {

       double margin = 7; // left and right margins between the border and the slider line of the slider

        SimpleDoubleProperty pixelsPerValueProperty = new SimpleDoubleProperty( //
                (slider.getPrefWidth() - (2 * margin)) / (slider.getMax() - slider.getMin())); // need preferred width even though called from keystroke handler

        SimpleDoubleProperty pathXProperty = new SimpleDoubleProperty();
        pathXProperty.bind(slider.layoutXProperty()//
                .add(margin)//
                .add(pixelsPerValueProperty.multiply(slider.valueProperty().subtract(slider.getMin())))//
        );

        double currentValue = pathXProperty.doubleValue(); 
        MoveTo moveTo = new MoveTo(0, 0);
        moveTo.setX(currentValue);
        LineTo lineTo = new LineTo(0, 25);
        lineTo.setX(currentValue);

        Path myTick = PathBuilder.create()
            .elements(
                moveTo
                , lineTo
                )
            .stroke(Color.CYAN)
            .strokeWidth(3)
            .translateX(0)     // for path instantiated in FXML = 7.0
            .translateY(27.0)
            .managed(true)
            .build();

        pathGroup.getChildren().add(myTick);

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11583644" questionTitle="ways to create a deadlock in servlet">
<Answer><![CDATA[public class DeadLockServlet extends HttpServlet {
       private static long sleepMillis = 10000;
       private final Object lock1 = new Object();
       private final Object lock2 = new Object();

   private boolean switch = true;

   public void doGet(HttpServletRequest req, HttpServletResponse res)  throws ServletException, IOException  {

        if(switch){
            switch=!switch;
            lock12();
        }
        else{
            switch=!switch;
            lock21();
        }
        PrintWriter out = res.getWriter();
        out.println("Done!");
        out.close();
  }

   private void lock12() {
       synchronized (lock1) {
           sleep();
           synchronized (lock2) {
               sleep();
           }
       }
   }

   private void lock21() {
       synchronized (lock2) {
           sleep();
           synchronized (lock1) {
               sleep();
           }
       }
   }

   private void sleep() {
       try {
           Thread.sleep(sleepMillis);
       } catch (InterruptedException e) {
           e.printStackTrace();
       }
   }

}]]></Answer>
<Answer><![CDATA[public class DeadLockServlet extends HttpServlet {
       public static Object s = new Object();
       public static Object s1 = new Object();
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        synchronized (s) {
            System.out.println("Got lock of s in get");
            try {
                Thread.sleep(9977);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
      System.out.println("waiting for lock of s1 in get");
        synchronized (s1) {
            System.out.println("Got lock of s1 in get");
        }
        }

    }
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        synchronized (s1) {
            System.out.println("Got lock of s1 in post");
            try {
                Thread.sleep(9977);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
     System.out.println("waiting for lock of s in post");
        synchronized (s) {
            System.out.println("Got lock of s in  post");
        }
    }}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11582149" questionTitle="How access a @Lob field from an EJB3 extended persistence context">
<Answer><![CDATA[@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class LobTest {

    @PersistenceContext
    private EntityManager em;

    @Resource 
    private SessionContext sctx;

    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
    public byte[] getLob() {
        // Get your LOB content by fetching a new copy of the entity from the DB
        // by ID, avoiding the need to split the LOB out. Note that you lose
        // tx consistency guarantees between the LOB and the rest of the entity by
        // doing this.
        // then after loading the LOB:
        sctx.setRollbackOnly();
    }

}]]></Answer>
<Answer><![CDATA[@Entity
@Access(value = AccessType.FIELD)
public class MyEntity
{
    [...]

    protected Long contentLobId;
    @Transient
    protected String editableContent;

    public Long getContentLobId()
    {
        return contentLobId;
    }

    public void setContentLobId(Long contentLobId)
    {
        this.contentLobId = contentLobId;
    }

    public String getEditableContent()
    {
        return editableContent;
    }

    public void setEditableContent(String editableContent)
    {
        this.editableContent = editableContent;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11463231" questionTitle="How to generate JAXB classes from XSD?">
<Answer><![CDATA[<plugin>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-xjc-plugin</artifactId>
    <version>2.3.0</version>
    <configuration>
      <extensions>
        <extension>org.apache.cxf.xjcplugins:cxf-xjc-dv:2.3.0</extension>
      </extensions>
    </configuration>
    <executions>
      <execution>
        <id>generate-sources-trans</id>
        <phase>generate-sources</phase>
        <goals>
          <goal>xsdtojava</goal>
        </goals>
        <configuration>
          <sourceRoot>${basedir}/src/main/java</sourceRoot>
          <xsdOptions>
            <xsdOption>
              <xsd>src/main/resources/xxx.xsd</xsd>
            </xsdOption>
          </xsdOptions>
        </configuration>
      </execution>
    </executions>
  </plugin>]]></Answer>
<Answer><![CDATA[package org.w3._2005.atom;

import java.util.*;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.*;
import javax.xml.namespace.QName;

@XmlType(name = "feedType", propOrder = {"authorOrCategoryOrContributor"})
public class FeedType {
    @XmlElementRefs({
        @XmlElementRef(name = "link", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "updated", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "category", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "rights", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "contributor", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "title", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "id", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "generator", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "icon", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "subtitle", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "author", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "entry", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class),
        @XmlElementRef(name = "logo", namespace = "http://www.w3.org/2005/Atom", type = JAXBElement.class)
    })
    @XmlAnyElement(lax = true)
    protected List<Object> authorOrCategoryOrContributor;

    @XmlAttribute(namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlSchemaType(name = "anyURI")
    protected String base;

    @XmlAttribute(namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String lang;

    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();
}]]></Answer>
<Answer><![CDATA[<plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>jaxb2-maven-plugin</artifactId>
            <version>2.2</version>
            <executions>
                <execution>
                    <goals>
                        <goal>xjc</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <sources>
                    <source>src/main/resources/your_schema.xsd</source>
                </sources>
                <xjbSources>
                    <xjbSource>src/main/resources/bindings.xjb</xjbSource>
                </xjbSources>
                <packageName>some_package</packageName>
                <outputDirectory>src/main/java</outputDirectory>
                <clearOutputDir>false</clearOutputDir>
                <generateEpisode>false</generateEpisode>
                <noGeneratedHeaderComments>true</noGeneratedHeaderComments>
            </configuration>
        </plugin>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11219858" questionTitle="Java 8 Pattern Matching?">
<Answer><![CDATA[import java.util.Optional;
import java.util.function.Function;
import java.util.function.Predicate;

final class Test
{
    public static final Function<Integer, Integer> fact = new Match<Integer>()
            .caseOf( i -> i == 0, i -> 1 )
            .otherwise( i -> i * Test.fact.apply(i - 1) );

    public static final Function<Object, String> dummy = new Match<Object>()
            .caseOf( i -> i.equals(42), i -> "forty-two" )
            .caseOf( i -> i instanceof Integer, i -> "Integer : " + i.toString() )
            .caseOf( i -> i.equals("world"), i -> "Hello " + i.toString() )
            .otherwise( i -> "got this : " + i.toString() );

    public static void main(String[] args)
    {
        System.out.println("factorial : " + fact.apply(6));
        System.out.println("dummy : " + dummy.apply(42));
        System.out.println("dummy : " + dummy.apply(6));
        System.out.println("dummy : " + dummy.apply("world"));
        System.out.println("dummy : " + dummy.apply("does not match"));
    }
}

final class Match<T>
{
    public <U> CaseOf<U> caseOf(Predicate<T> cond, Function<T, U> map)
    {
        return this.new CaseOf<U>(cond, map, Optional.empty());
    }

    class CaseOf<U> implements Function<T, Optional<U>>
    {
        private Predicate<T> cond;
        private Function<T, U> map;
        private Optional<CaseOf<U>> previous;

        CaseOf(Predicate<T> cond, Function<T, U> map, Optional<CaseOf<U>> previous)
        {
          this.cond = cond;
          this.map = map;
          this.previous = previous;
        }

        @Override
        public Optional<U> apply(T value)
        {
            Optional<U> r = previous.flatMap( p -> p.apply(value) );
            return r.isPresent() || !cond.test(value) ? r
                : Optional.of( this.map.apply(value) );
        }

        public CaseOf<U> caseOf(Predicate<T> cond, Function<T, U> map)
        {
          return new CaseOf<U>(cond, map, Optional.of(this));
        }

        public Function<T,U> otherwise(Function<T, U> map)
        {
            return value -> this.apply(value)
                .orElseGet( () -> map.apply(value) );
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.function.Function;
import org.derive4j.Data;
import static org.derive4j.exemple.Expressions.*;

@Data
public abstract class Expression {

    interface Cases<R> {
        R Const(Integer value);
        R Add(Expression left, Expression right);
        R Mult(Expression left, Expression right);
        R Neg(Expression expr);
    }

    public abstract <R> R match(Cases<R> cases);

    private static Function<Expression, Integer> eval = Expressions
        .match()
            .Const(value        -> value)
            .Add((left, right)  -> eval(left) + eval(right))
            .Mult((left, right) -> eval(left) * eval(right))
            .Neg(expr           -> -eval(expr));

    public static Integer eval(Expression expression) {
        return eval.apply(expression);
    }

    public static void main(String[] args) {
        Expression expr = Add(Const(1), Mult(Const(2), Mult(Const(3), Const(3))));
        System.out.println(eval(expr)); // (1+(2*(3*3))) = 19
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11188633" questionTitle="HibernateDaoSupport in hibernate 4.0">
<Answer><![CDATA[package com.techcielo.spring4.hibernate.template;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Component;

@Component("hibernateTemplate")
public class Hibernate4CustomTemplate extends HibernateTemplate{

    @Autowired(required=true)
    private SessionFactory sessionFactory;
    public void setSessionFactory(SessionFactory sessionFactory) {
        System.out.println("Setting SessionFactory");
        this.sessionFactory = sessionFactory;
        super.setSessionFactory(sessionFactory);
    }

    @Override
    public void afterPropertiesSet() {
    System.out.println("Checking if properties set..."+this.sessionFactory);
    setSessionFactory(sessionFactory);
    super.afterPropertiesSet();
    }
}]]></Answer>
<Answer><![CDATA[import java.util.List;

import org.hibernate.SessionFactory;

public class CustomerDaoImpl implements CustomerDao{
    private SessionFactory sessionFactory;
    public SessionFactory getSessionFactory() {
        return sessionFactory;}
    public void setSessionFactory(SessionFactory sessionFactory) {
         this.sessionFactory = sessionFactory;
    }

    public void addCustomer(Customer customer){


        getSessionFactory().getCurrentSession().save(customer);

    }

    public List<Customer> findAllCustomer(){

        List list = getSessionFactory().getCurrentSession().createQuery("from Customer").list();
        return list;

    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="11065140" questionTitle="JavaFX 2.1 TableView refresh items">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.List;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class Dddeb extends Application {

    public static class Product {
        private String name;
        private String code;

        public Product(String name, String code) {
            this.name = name;
            this.code = code;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    private TableView<Product> productTable = new TableView<Product>();

    @Override
    public void start(Stage stage) {

        Button refreshBtn = new Button("Refresh table");
        refreshBtn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent arg0) {
                // You can get the new data from DB
                List<Product> newProducts = new ArrayList<Product>();
                newProducts.add(new Product("new product A", "1201"));
                newProducts.add(new Product("new product B", "1202"));
                newProducts.add(new Product("new product C", "1203"));
                newProducts.add(new Product("new product D", "1244"));

                productTable.getItems().clear();
                productTable.getItems().addAll(newProducts);
                //productTable.setItems(FXCollections.observableArrayList(newProducts));
            }
        });

        TableColumn nameCol = new TableColumn("Name");
        nameCol.setMinWidth(100);
        nameCol.setCellValueFactory(new PropertyValueFactory<Product, String>("name"));

        TableColumn codeCol = new TableColumn("Code");
        codeCol.setCellValueFactory(new PropertyValueFactory<Product, String>("code"));

        productTable.getColumns().addAll(nameCol, codeCol);
        productTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        // You can get the data from DB
        List<Product> products = new ArrayList<Product>();
        products.add(new Product("product A", "0001"));
        products.add(new Product("product B", "0002"));
        products.add(new Product("product C", "0003"));

        //productTable.getItems().addAll(products);
        productTable.setItems(FXCollections.observableArrayList(products));

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.getChildren().addAll(productTable, refreshBtn);

        Scene scene = new Scene(new Group());
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
        stage.setScene(scene);
        stage.setWidth(300);
        stage.setHeight(500);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[public <T> void tableItemsRefresh(final ObservableList<T> items) {

      if (items == null || items.size() == 0)
         return;

      int idx = items.size() -1;
      final T item = items.get(idx);
      items.remove(idx);

      new Timer().schedule(new TimerTask() {
         @Override
         public void run() {
            Platform.runLater(new Runnable() {
               @Override
               public void run() {
                  items.add(item);
               }
            });
         }
      }, 100);
   }]]></Answer>
<Answer><![CDATA[public class CostAnalytics{
protected WritableObjectValue<Double> subtotal=new SimpleObjectProperty<Double>();//利用WritableObjectValue達到自動更新目的，不需要使用個別Column操作setVisable(false)及setVisable(true)
//...
public void setQuantity(double quantity) {
    this.pcs.firePropertyChange("quantity", this.quantity, quantity);
    this.quantity.set(quantity);
    this.calsSubtotal();
}
public WritableObjectValue<Double> getSubtotal() {//利用WritableObjectValue達到自動更新目的，不需要使用個別Column操作setVisable(false)及setVisable(true)
    return subtotal;
}
///...
}


TableColumn<CostAnalytics, Double> subtotal = new TableColumn<CostAnalytics, Double>(
            "小計");
subtotal.setCellValueFactory(new Callback<CellDataFeatures<CostAnalytics, Double>, ObservableValue<Double>>() {

        public ObservableValue<Double> call(
                CellDataFeatures<CostAnalytics, Double> p) {
            WritableObjectValue<Double> result = p.getValue().getSubtotal();// //利用WritableObjectValue達到自動更新目的，不需要使用個別Column操作setVisable(false)及setVisable(true)
            // return (ObservableValue<Double>)
            // result;//利用WritableObjectValue達到自動更新目的，不需要使用個別Column操作setVisable(false)及setVisable(true)
            // return new
            // ReadOnlyObjectWrapper<Double>(p.getValue().getSubtotal());//造成無法自動更新
            return (ObservableValue<Double>) p.getValue().getSubtotal();// 利用WritableObjectValue達到自動更新目的，不需要使用個別Column操作setVisable(false)及setVisable(true)
        }

    });]]></Answer>
<Answer><![CDATA[/**
 * Extended TableRow that updates its item if equal but not same.
 * Needs custom skin to update cells on invalidation of the 
 * item property.<p>
 * 
 * Looks ugly, as we have to let super doing its job and then
 * re-check the state. No way to hook anywhere else into super 
 * because all is private. <p>
 * 
 * Super might support a configuration option to check against
 * identity vs. against equality.<p>
 * 
 * Note that this is _not_ formally tested! Any execution paths calling
 * <code>updateItem(int)</code> other than through 
 * <code>indexedCell.updateIndex(int)</code> are not handled.
 * 
 * @author Jeanette Winzenburg, Berlin
 */
public class IdentityCheckingTableRow<T>  extends TableRow<T> {

    @Override
    public void updateIndex(int i) {
        int oldIndex = getIndex();
        T oldItem = getItem();
        boolean wasEmpty = isEmpty();
        super.updateIndex(i);
        updateItemIfNeeded(oldIndex, oldItem, wasEmpty);

    }

    /**
     * Here we try to guess whether super updateIndex didn't update the item if
     * it is equal to the old.
     * 
     * Strictly speaking, an implementation detail.
     * 
     * @param oldIndex cell's index before update
     * @param oldItem cell's item before update
     * @param wasEmpty cell's empty before update
     */
    protected void updateItemIfNeeded(int oldIndex, T oldItem, boolean wasEmpty) {
        // weed out the obvious
        if (oldIndex != getIndex()) return;
        if (oldItem == null || getItem() == null) return;
        if (wasEmpty != isEmpty()) return;
        // here both old and new != null, check whether the item had changed
        if (oldItem != getItem()) return;
        // unchanged, check if it should have been changed
        T listItem = getTableView().getItems().get(getIndex());
        // update if not same
        if (oldItem != listItem) {
            // doesn't help much because itemProperty doesn't fire
            // so we need the help of the skin: it must listen
            // to invalidation and force an update if 
            // its super wouldn't get a changeEvent
            updateItem(listItem, isEmpty());
        }
    }


    @Override
    protected Skin<?> createDefaultSkin() {
        return new TableRowSkinX<>(this);
    }


    public static class TableRowSkinX<T> extends TableRowSkin<T> {

        private WeakReference<T> oldItemRef;
        private InvalidationListener itemInvalidationListener;
        private WeakInvalidationListener weakItemInvalidationListener;
        /**
         * @param tableRow
         */
        public TableRowSkinX(TableRow<T> tableRow) {
            super(tableRow);
            oldItemRef = new WeakReference<>(tableRow.getItem());
            itemInvalidationListener = o -> {
                T newItem = ((ObservableValue<T>) o).getValue();
                T oldItem = oldItemRef != null ? oldItemRef.get() : null;
                oldItemRef = new WeakReference<>(newItem);
                if (oldItem != null && newItem != null && oldItem.equals(newItem)) {
                    forceCellUpdate();
                }
            };
            weakItemInvalidationListener = new WeakInvalidationListener(itemInvalidationListener);
            tableRow.itemProperty().addListener(weakItemInvalidationListener);
        }

        /**
         * Try to force cell update for equal (but not same) items.
         * C&P'ed code from TableRowSkinBase.
         */
        private void forceCellUpdate() {
            updateCells = true;
            getSkinnable().requestLayout();

            // update the index of all children cells (RT-29849).
            // Note that we do this after the TableRow item has been updated,
            // rather than when the TableRow index has changed (as this will be
            // before the row has updated its item). This will result in the
            // issue highlighted in RT-33602, where the table cell had the correct
            // item whilst the row had the old item.
            final int newIndex = getSkinnable().getIndex();
            for (int i = 0, max = cells.size(); i < max; i++) {
                cells.get(i).updateIndex(newIndex);
            }
       }

    }

    @SuppressWarnings("unused")
    private static final Logger LOG = Logger
            .getLogger(IdentityCheckingListCell.class.getName());

}

 // usage
 table.setRowFactory(p -> new IdentityCheckingTableRow());]]></Answer>
<Answer><![CDATA[public static class Person {

    private final SimpleStringProperty firstName;
    private final SimpleStringProperty lastName;
    private final SimpleStringProperty email;

    private Person(String fName, String lName, String email) {
        this.firstName = new SimpleStringProperty(fName);
        this.lastName = new SimpleStringProperty(lName);
        this.email = new SimpleStringProperty(email);
    }

    public String getFirstName() {
        return firstName.get();
    }

    public void setFirstName(String fName) {
        firstName.set(fName);
    }

    public SimpleStringProperty firstNameProperty(){
        return firstName;
    }

    public String getLastName() {
        return lastName.get();
    }

    public void setLastName(String fName) {
        lastName.set(fName);
    }

    public SimpleStringProperty lastNameProperty(){
        return lastName;
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String fName) {
        email.set(fName);
    }

    public SimpleStringProperty emailProperty(){
            return email;
        }]]></Answer>
<Answer><![CDATA[//To get all customer details
def getCustomerDetails : ObservableBuffer[Customer] = {

val customerDetails = new ObservableBuffer[Customer]()
  try {

    val resultSet = statement.executeQuery("SELECT * FROM MusteriBilgileri")

    while (resultSet.next()) {

      val musteriId = resultSet.getString("MusteriId")
      val musteriIsmi = resultSet.getString("MusteriIsmi")
      val urununTakildigiTarih = resultSet.getDate("UrununTakildigiTarih").toString
      val bakimTarihi = resultSet.getDate("BakimTarihi").toString
      val urununIsmi = resultSet.getString("UrununIsmi")
      val telNo = resultSet.getString("TelNo")
      val aciklama = resultSet.getString("Aciklama")

      customerDetails += new Customer(musteriId,musteriIsmi,urununTakildigiTarih,bakimTarihi,urununIsmi,telNo,aciklama)

    }
  } catch {
    case e => e.printStackTrace
  }

  customerDetails
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10949461" questionTitle="Javafx 2 click and double click">
<Answer><![CDATA[@Override
 public void handle(MouseEvent t) {

        long diff = 0;

        currentTime=System.currentTimeMillis();

        if(lastTime!=0 && currentTime!=0){
            diff=currentTime-lastTime;

            if( diff<=215)
                isdblClicked=true;
            else
                isdblClicked=false;
        }

        lastTime=currentTime;

        System.out.println("IsDblClicked()"+isdblClicked); 

       //use the isdblClicked flag...   
}]]></Answer>
<Answer><![CDATA[import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class DoubleClickDetectionTest extends Application {

    boolean dragFlag = false;

    int clickCounter = 0;

    ScheduledThreadPoolExecutor executor;

    ScheduledFuture<?> scheduledFuture;

    public DoubleClickDetectionTest() {
        executor = new ScheduledThreadPoolExecutor(1);
        executor.setRemoveOnCancelPolicy(true);
    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        StackPane root = new StackPane();

        primaryStage.setScene(new Scene(root, 400, 400));
        primaryStage.show();

        root.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                if (e.getButton().equals(MouseButton.PRIMARY)) {
                    dragFlag = true;
                }
            }
        });

        root.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                if (e.getButton().equals(MouseButton.PRIMARY)) {
                    if (!dragFlag) {
                        System.out.println(++clickCounter + " " + e.getClickCount());
                        if (e.getClickCount() == 1) {
                            scheduledFuture = executor.schedule(() -> singleClickAction(), 500, TimeUnit.MILLISECONDS);
                        } else if (e.getClickCount() > 1) {
                            if (scheduledFuture != null && !scheduledFuture.isCancelled() && !scheduledFuture.isDone()) {
                                scheduledFuture.cancel(false);
                                doubleClickAction();
                            }
                        }
                    }
                    dragFlag = false;
                }
            }
        });
    }

    @Override
    public void stop() {
        executor.shutdown();
    }

    private void singleClickAction() {
        System.out.println("Single-click action executed.");
    }

    private void doubleClickAction() {
        System.out.println("Double-click action executed.");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10894903" questionTitle="How to make an overlay on top of JavaFX 2 webview?">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.RectangleBuilder;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextBuilder;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class Demo extends Application {

    @Override
    public void start(Stage primaryStage) {
        WebView webView = new WebView();
        webView.getEngine().load("http://www.google.com");
        StackPane root = new StackPane();
        root.getChildren().addAll(webView, getOverlay());
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
    }

     private Pane getOverlay() {
        StackPane p = new StackPane();
        Rectangle r = RectangleBuilder.create()
                .height(100).width(100)
                .arcHeight(40).arcWidth(40)
                .stroke(Color.RED)
                .fill(Color.web("red", 0.1))
                .build();

        Text txt=TextBuilder.create().text("Overlay")
                .font(Font.font("Arial", FontWeight.BOLD, 18))
                .fill(Color.BLUE)
                .build();
         p.getChildren().addAll(r, txt);
         return p;
    }

     public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[@Override
    public void start(Stage stage) {
        StackPane root = new StackPane();
        WebView webView = new WebView();

        final WebEngine webEngine = webView.getEngine();
        Canvas overlay = new Canvas(600,600);
        overlay.setOpacity(0.5);
        final GraphicsContext gc = overlay.getGraphicsContext2D();
        gc.setFill(Color.RED);

        root.getChildren().addAll(webView, overlay);
        stage.setScene(new Scene(root, 600, 600));

        webEngine.getLoadWorker().workDoneProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue.intValue() == 100) {
                // find coordinates by javascript call
                JSObject bounds = (JSObject)webEngine.executeScript("document.getElementsByClassName('question-hyperlink')[0].getBoundingClientRect()");

                Number right = (Number)bounds.getMember("right");
                Number top = (Number)bounds.getMember("top");
                Number bottom = (Number)bounds.getMember("bottom");
                Number left = (Number)bounds.getMember("left");

                // paint on overlaing canvas
                gc.rect(left.doubleValue(), top.doubleValue(), right.doubleValue(), bottom.doubleValue());
                gc.fill();
            }
        });
        webEngine.load("http://stackoverflow.com/questions/10894903/how-to-make-an-overlay-on-top-of-javafx-2-webview");

        stage.show();
    }

    public static void main(String[] args) { launch(); }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10891556" questionTitle="JavaScript force an OnChange in Maximo">
<Answer><![CDATA[cc : function(e,v){
            e.focus(); //Get focus of the element
            e.value = v; //Change the value
            e.onchange(); //Call the onchange event
            e.blur(); //Unfocus the element
            console.log("TITLE === "+e.title);
            if(e.title.indexOf(v) != -1) {
                return true; //The value partially matches the requested value. No need to update
            } else {
                //Generate an hidden form and submit it to update the page with the new value
                var hiddenForm = getHiddenForm();
                var inputs = hiddenForm.elements;
                inputs.namedItem("changedcomponentid").value = e.id;
                inputs.namedItem("changedcomponentvalue").value = v;
                inputs.namedItem("event").value = "X"; //Send a Dummy Event so the script see's its invalid and sets the right Event
                submitHidden();
            }
            //Value isn't set to the required value so pass false
            return false;
        }]]></Answer>
<Answer><![CDATA[function riskmatrix_setvalue(callerId, lookupId, value,bgrColor,targetid){       
   if (document.getElementById(callerId).readOnly){
    sendEvent('selectrecord', lookupId);
    return;
}
textBoxCaller = document.getElementById(callerId);

//dojo.byId(callerId).setAttribute("value", value);
//dojo.byId(callerId).setAttribute("changed", true);
//dojohelper.input_changed_value(dojo.byId(callerId),value);
//textBoxCaller.style.background = bgrColor;
//var hiddenForm = getHiddenForm();
//if(!hiddenForm)
 //       return;
//var inputs = hiddenForm.elements;
//inputs.namedItem("event").value = "setvalue";
//inputs.namedItem("targetid").value = dojo.byId(callerId).id;
//inputs.namedItem("value").value = value;
//sendXHRFromHiddenForm();
textBoxCaller.focus(); //Get focus of the element
textBoxCaller.value = value; //Change the value
textBoxCaller.onchange(); //Call the onchange event
textBoxCaller.blur(); //Unfocus the element
//Generate an hidden form and submit it to update the page with the new value
var hiddenForm = getHiddenForm();
var inputs = hiddenForm.elements;
inputs.namedItem("changedcomponentid").value = textBoxCaller.id;
inputs.namedItem("changedcomponentvalue").value = value;
inputs.namedItem("event").value = "X"; //Send a Dummy Event so the script see's its invalid and sets the right Event
submitHidden();
sendEvent("dialogclose",lookupId);

 }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10887525" questionTitle="JavaFX style class won't refresh">
<Answer><![CDATA[import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBoxBuilder;
import javafx.stage.Stage;

public class StyleDemo extends Application {

    @Override
    public void start(Stage primaryStage) {
        final Label lbl = new Label("Style Me");
        lbl.getStyleClass().add("style1"); // initial style

        Button btn = new Button("Change the style");
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent arg0) {
                lbl.getStyleClass().remove("style1");
                lbl.getStyleClass().add("style2");
            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(VBoxBuilder.create().spacing(20).children(lbl, btn).build());
        Scene scene = new Scene(root, 300, 250);
        scene.getStylesheets().add(this.getClass().getResource("style.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBoxBuilder;
import javafx.stage.Stage;

public class StyleDemo extends Application {
    //ADD just a toggle property
    public static BooleanProperty toggle = new SimpleBooleanProperty(false);

    @Override
    public void start(Stage primaryStage) {
        final Label lbl = new Label("Style Me");
        lbl.getStyleClass().add("style1"); // initial style

        Button btn = new Button("Change the style");

        btn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                //ADD clear style class !
                lbl.getStyleClass().clear();
                if(toggle.get()) {
                    lbl.getStyleClass().add("style1");
                    toggle.set(!toggle.get());
                }else{
                    lbl.getStyleClass().add("style2");
                    toggle.set(!toggle.get());
                }
            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(VBoxBuilder.create().spacing(20).children(lbl,btn).build());
        Scene scene = new Scene(root, 300, 250); 
        scene.getStylesheets().add("/style.css");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10714850" questionTitle="Is the file persistence.xml required?">
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
    version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
    <persistence-unit name="saptalabs" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

        <class>com.sapta.hr.domainobject.UserDO</class>
        <class>com.sapta.hr.domainobject.EmployeeDO</class>
        <class>com.sapta.hr.domainobject.AddressDO</class>
        <class>com.sapta.hr.domainobject.EmpDetailDO</class>
        <class>com.sapta.hr.domainobject.EmpAccDetailDO</class>
        <class>com.sapta.hr.domainobject.ProjectDO</class>
        <class>com.sapta.hr.domainobject.CustomerDO</class>
        <class>com.sapta.hr.domainobject.EmpAssignmentDO</class>
        <class>com.sapta.hr.domainobject.EmpAboutDO</class>
        <class>com.sapta.hr.domainobject.EmpAchievementsDO</class>
        <class>com.sapta.hr.domainobject.EmpEmploymentHistoryDO</class>
        <class>com.sapta.hr.domainobject.EmpSportsDO</class>
        <class>com.sapta.hr.domainobject.EmpCulturalsDO</class>
        <class>com.sapta.hr.domainobject.EmpEducationDO</class>
        <class>com.sapta.hr.domainobject.EmpLanguageKnownDO</class>
        <class>com.sapta.hr.domainobject.EmpReferencesDO</class>
        <class>com.sapta.hr.domainobject.EmpSkillSetDO</class>
        <class>com.sapta.hr.domainobject.EmpFamilyBackgroundDO</class>
        <class>com.sapta.hr.domainobject.AssetDO</class>
        <class>com.sapta.hr.domainobject.AssetTypeDO</class>
        <class>com.sapta.hr.domainobject.EmpCTCDO</class>
        <class>com.sapta.hr.domainobject.ExpenseDO</class>
        <class>com.sapta.hr.domainobject.ExpTypeDO</class>
        <class>com.sapta.hr.domainobject.InvoiceDO</class>
        <class>com.sapta.hr.domainobject.PayrollDO</class>
        <class>com.sapta.hr.domainobject.ProfessionalTaxDO</class>
        <class>com.sapta.hr.domainobject.TDSDO</class>
        <class>com.sapta.hr.domainobject.VendorDO</class>
        <class>com.sapta.hr.domainobject.BillsDO</class>
        <class>com.sapta.hr.domainobject.EmpLoseOfPayDO</class>

        <!-- shouldn't be valid for java SE per specification, but it works for 
            EclipseLink ... -->
        <exclude-unlisted-classes>false</exclude-unlisted-classes>

        <!-- For Local Testing -->
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/hrportal" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
            <property name="eclipselink.cache.shared.default" value="false" />
            <property name="eclipselink.ddl-generation" value="create-tables" />
            <property name="eclipselink.ddl-generation.output-mode"
                value="database" />
            <property name="eclipselink.logging.level" value="SEVERE" />
        </properties>
    </persistence-unit>
</persistence>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
    version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
    <persistence-unit name="AINS" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

        <class>com.tridenthyundai.ains.domainobject.AccessoriesDO</class>
        <class>com.tridenthyundai.ains.domainobject.BranchDO</class>
        <class>com.tridenthyundai.ains.domainobject.ContactDO</class>
        <class>com.tridenthyundai.ains.domainobject.CustomerDO</class>
        <class>com.tridenthyundai.ains.domainobject.FinanceDO</class>
        <class>com.tridenthyundai.ains.domainobject.InsuranceDO</class>
        <class>com.tridenthyundai.ains.domainobject.MessageDO</class>
        <class>com.tridenthyundai.ains.domainobject.NotificationDO</class>
        <class>com.tridenthyundai.ains.domainobject.ProductDO</class>
        <class>com.tridenthyundai.ains.domainobject.ProductPriceDO</class>
        <class>com.tridenthyundai.ains.domainobject.ProductSpecDO</class>
        <class>com.tridenthyundai.ains.domainobject.ProductVariantDO</class>
        <class>com.tridenthyundai.ains.domainobject.PurchaseDO</class>
        <class>com.tridenthyundai.ains.domainobject.ServiceCentreDO</class>
        <class>com.tridenthyundai.ains.domainobject.ServiceDO</class>
        <class>com.tridenthyundai.ains.domainobject.ServiceTypeDO</class>
        <class>com.tridenthyundai.ains.domainobject.UserDO</class>
        <class>com.tridenthyundai.ains.domainobject.VisitorDO</class>


        <!-- shouldn't be valid for java SE per specification, but it works for  EclipseLink ... -->
        <exclude-unlisted-classes>false</exclude-unlisted-classes>

        <!-- For Local Testing -->
        <!-- <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://saptalabs:3306/tridenthyundai" />
            <property name="javax.persistence.jdbc.user" value="adminuser" />
            <property name="javax.persistence.jdbc.password" value="adminuser" />
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />

            <property name="eclipselink.cache.shared.default" value="false"/>
            <property name="eclipselink.ddl-generation" value="create-tables" />
            <property name="eclipselink.ddl-generation.output-mode" value="database" />
            <property name="eclipselink.logging.level" value="SEVERE" />        
        </properties> -->

        <!-- For Production -->

    </persistence-unit>
</persistence>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence 
    xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
    version="1.0">
    <persistence-unit name="<PERSISTENCE UNIT NAME>">
        <properties>
            <!--
            <property name="hibernate.ejb.cfgfile" value="/hibernate.cfg.xml"/>
            <property name="hibernate.hbm2ddl.auto" value="create"/>
            -->
            <property name="hibernate.archive.autodetection" value="class, hbm"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/>
            <property name="hibernate.connection.password" value="<PASSWORD>"/>
            <property name="hibernate.connection.url" value="jdbc:mysql://<HOST IP ADDRESS>/<DB NAME>"/>
            <property name="hibernate.connection.username" value="<USERNAME>"/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
            <property name="hibernate.c3p0.min_size" value="5"/>
            <property name="hibernate.c3p0.max_size" value="20"/>
            <property name="hibernate.c3p0.timeout" value="300"/>
            <property name="hibernate.c3p0.max_statements" value="50"/>
            <property name="hibernate.c3p0.idle_test_period" value="3000"/>
        </properties>
    </persistence-unit>
</persistence>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10685395" questionTitle="Webview with contenteditable cannot be focused programmatically">
<Answer><![CDATA[import com.sun.javafx.scene.web.skin.HTMLEditorSkin;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.web.HTMLEditor;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class FocusTest extends Application {

    public static void main(final String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        final HTMLEditor editor = new HTMLEditor();
        final WebView view = (WebView) ((GridPane)((HTMLEditorSkin)editor.getSkin()).getChildren().get(0)).getChildren().get(2);

        primaryStage.setScene(new Scene(editor));
        primaryStage.sizeToScene();
        primaryStage.show();

        Platform.runLater(() -> {
            view.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 100, 100, 200, 200, MouseButton.PRIMARY, 1, false, false, false, false, false, false, false, false, false, false, null));
            editor.requestFocus();
            view.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 100, 100, 200, 200, MouseButton.PRIMARY, 1, false, false, false, false, false, false, false, false, false, false, null));
        });
    }

}]]></Answer>
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.event.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.web.WebView;
import javafx.stage.Stage;

public class WebViewEditable extends Application {
  String content = "<body bgcolor='cornsilk' onLoad='document.body.focus();' contenteditable='true'/>";
  public static void main(String[] args) { launch(args); }
  @Override public void start(Stage stage) {
    final WebView editor = new WebView();
    editor.getEngine().loadContent(content);

    Button webviewFocusButton = new Button("Focus on WebView");
    webviewFocusButton.setOnAction(new EventHandler<ActionEvent>() {
      @Override public void handle(ActionEvent event) {
        editor.getEngine().executeScript("document.body.focus()");
        editor.requestFocus();
      }
    });
    Button selfFocusButton = new Button("Focus on this Button");

    Label focusLabel = new Label();
    focusLabel.textProperty().bind(Bindings
      .when(editor.focusedProperty())
        .then("WebView has the focus.")
        .otherwise("WebView does not have the focus.")
    );
    focusLabel.setMaxWidth(Double.MAX_VALUE);
    focusLabel.setStyle("-fx-background-color: coral; -fx-padding: 5;");

    BorderPane layout = new BorderPane();
    layout.setTop(HBoxBuilder.create().spacing(10).children(webviewFocusButton, selfFocusButton).style("-fx-padding: 10; -fx-background-color: palegreen").build());
    layout.setCenter(editor);
    layout.setBottom(focusLabel);
    stage.setScene(new Scene(layout));
    stage.show();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10682107" questionTitle="correct way to move a node by dragging in javafx 2?">
<Answer><![CDATA[@Override
public void initialize(URL location, ResourceBundle resources) {
    super.initialize(location, resources);
    labelTableName.setText("Table Categories");

    final PhongMaterial blueMaterial = new PhongMaterial();
    blueMaterial.setDiffuseColor(Color.BLUE);
    blueMaterial.setSpecularColor(Color.LIGHTBLUE);

    final Sphere sphere = new Sphere(50);
    sphere.setMaterial(blueMaterial);

    final Measure dragMeasure = new Measure();
    final Measure position = new Measure();
    sphere.setOnMousePressed(mouseEvent -> {
        dragMeasure.x = mouseEvent.getSceneX() - position.x;
        dragMeasure.y = mouseEvent.getSceneY() - position.y;
        sphere.setCursor(Cursor.MOVE);
    });
    sphere.setOnMouseDragged(mouseEvent -> {
        position.x = mouseEvent.getSceneX() - dragMeasure.x;
        position.y = mouseEvent.getSceneY() - dragMeasure.y;
        sphere.setTranslateX(position.x);
        sphere.setTranslateY(position.y);
    });
    sphere.setOnMouseReleased(mouseEvent -> sphere.setCursor(Cursor.HAND));
    sphere.setOnMouseEntered(mouseEvent -> sphere.setCursor(Cursor.HAND));

    bottomHeader.getChildren().addAll( sphere);

}

class Measure {
    double x, y;

    public Measure() {
        x = 0; y = 0;
    }
}]]></Answer>
<Answer><![CDATA[// allow the label to be dragged around.
final Delta dragDelta = new Delta();
label.setOnMousePressed(new EventHandler<MouseEvent>() {
  @Override public void handle(MouseEvent mouseEvent) {
    // record a delta distance for the drag and drop operation.
    dragDelta.x = label.getLayoutX() - mouseEvent.getSceneX();
    dragDelta.y = label.getLayoutY() - mouseEvent.getSceneY();
    label.setCursor(Cursor.MOVE);
  }
});
label.setOnMouseReleased(new EventHandler<MouseEvent>() {
  @Override public void handle(MouseEvent mouseEvent) {
    label.setCursor(Cursor.HAND);
  }
});
label.setOnMouseDragged(new EventHandler<MouseEvent>() {
  @Override public void handle(MouseEvent mouseEvent) {
    label.setLayoutX(mouseEvent.getSceneX() + dragDelta.x);
    label.setLayoutY(mouseEvent.getSceneY() + dragDelta.y);
  }
});
label.setOnMouseEntered(new EventHandler<MouseEvent>() {
  @Override public void handle(MouseEvent mouseEvent) {
    label.setCursor(Cursor.HAND);
  }
});

. . .

// records relative x and y co-ordinates.
class Delta { double x, y; }]]></Answer>
<Answer><![CDATA[@FXML
public void lblDragMousePressed(MouseEvent m)
{
    System.out.println("Mouse is pressed");

    prevLblCordX= (int) lblDragTest.getLayoutX();
    prevLblCordY= (int) lblDragTest.getLayoutY();
    prevMouseCordX= (int) m.getX();
    prevMouseCordY= (int) m.getY();     
}
//set this method on mouse released event for lblDrag
@FXML
public void lblDragMouseReleased(MouseEvent m)
{       
    System.out.println("Label Dragged");    
}
// set this method on Mouse Drag event for lblDrag
@FXML
public void lblDragMouseDragged(MouseEvent m)
{   
    diffX= (int) (m.getX()- prevMouseCordX);
    diffY= (int) (m.getY()-prevMouseCordY );        
    int x = (int) (diffX+lblDragTest.getLayoutX()-rootAnchorPane.getLayoutX());
    int y = (int) (diffY+lblDragTest.getLayoutY()-rootAnchorPane.getLayoutY());     
    if (y > 0 && x > 0 && y < rootAnchorPane.getHeight() && x < rootAnchorPane.getWidth()) 
    { 
     lblDragTest.setLayoutX(x);
     lblDragTest.setLayoutY(y);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10548558" questionTitle="How to call Applet method from javascript">
<Answer><![CDATA[<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
        <title>Insert title here</title>
        <SCRIPT LANGUAGE="JavaScript">
            function selectedCity() 
            {
                var elem = document.getElementById('cityRb');

                if(elem.checked)
                {
                    document.SimpleMessageApplet.setMessage(elem.value);
                }      
            }
        </SCRIPT></HEAD>
    <BODY >
        <b>This is the Applet</b>
    <APPLET CODE="MessageApplet.class" NAME="SimpleMessageApplet" WIDTH=350 HEIGHT=100 >
    </APPLET >
    <FORM NAME="CityChoice">
        <input type="radio" id="cityRb" name="City" value="Boston" onClick="selectedCity()"> Boston<br>
    </form>
</BODY > 
</html>]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <jnlp codebase="file:/C:/JavaApplication6/dist/" href="launch.jnlp" spec="1.0+">
        <information>
            <title>JavaApplication6</title>
            <description>blalbla</description>
            <description kind="short">JavaApplication6</description>

        </information>
    <update check="background"/>
    <security>
    <all-permissions/>
    </security>
        <resources>
    <j2se java-vm-args="-Djava.security.policy=applet.policy" version="1.5+"/>
    <jar href="JavaApplication6.jar" main="true"/>


        <jar href="lib/jna.jar"/>
    <jar href="lib/platform.jar"/>
    </resources>
        <applet-desc height="300" main-class="winToJnaApi.NewApplet" name="JavaApplication6" width="300">

        </applet-desc>
    </jnlp>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10518458" questionTitle="JavaFX - create custom button with image">
<Answer><![CDATA[import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.scene.*;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.*;
import javafx.scene.layout.StackPaneBuilder;
import javafx.stage.Stage;

public class ToggleButtonImageViaGraphic extends Application {
  public static void main(String[] args) throws Exception { launch(args); }
  @Override public void start(final Stage stage) throws Exception {
    final ToggleButton toggle      = new ToggleButton();
    final Image        unselected  = new Image(
      "http://icons.iconarchive.com/icons/aha-soft/desktop-buffet/128/Pizza-icon.png"
    );
    final Image        selected    = new Image(
      "http://icons.iconarchive.com/icons/aha-soft/desktop-buffet/128/Piece-of-cake-icon.png"
    );
    final ImageView    toggleImage = new ImageView();
    toggle.setGraphic(toggleImage);
    toggleImage.imageProperty().bind(Bindings
      .when(toggle.selectedProperty())
        .then(selected)
        .otherwise(unselected)
    );

    stage.setScene(new Scene(
      StackPaneBuilder.create()
        .children(toggle)
        .style("-fx-padding:10; -fx-background-color: cornsilk;")
        .build()
    ));
    stage.show();
  }
}]]></Answer>
<Answer><![CDATA[import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;

public class ImageButton extends Button {

    public void updateImages(final Image selected, final Image unselected) {
        final ImageView iv = new ImageView(selected);
        this.getChildren().add(iv);

        iv.setOnMousePressed(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent evt) {
                iv.setImage(unselected);
            }
        });
        iv.setOnMouseReleased(new EventHandler<MouseEvent>() {
            public void handle(MouseEvent evt) {
                iv.setImage(selected);
            }
        });

        super.setGraphic(iv);
    }
}]]></Answer>
<Answer><![CDATA[public class ImageButton extends Parent {

    private static final Image NORMAL_IMAGE = ...;
    private static final Image PRESSED_IMAGE = ...;

    private final ImageView iv;

    public ImageButton() {
        this.iv = new ImageView(NORMAL_IMAGE);
        this.getChildren().add(this.iv);

        this.iv.setOnMousePressed(new EventHandler<MouseEvent>() {

            public void handle(MouseEvent evt) {
                iv.setImage(PRESSED_IMAGE);
            }

        });

        // TODO other event handlers like mouse up

    } 

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10331041" questionTitle="RestEasy @EJB returning null">
<Answer><![CDATA[@Stateless
public class ServiceImpl implements Service {
    public void doSomething() {
        System.out.println("I did something");
    }

    @PostConstruct
    public void postConstruct() {
        System.out.println("I was just constructed");
    }

    @PreDestroy
    public void preDestroy() {
        System.out.println("Arrgg I am being destroyed");
    }
}

@Local
public interface Service {
    public void doSomething();
}


public class Client {

    @EBJ Service service;

    public void someMethod() {
        service.doSomething();
    }
}]]></Answer>
<Answer><![CDATA[import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

import java.util.HashSet;
import java.util.Set;

@ApplicationPath("/rest")

public class YourApplication extends Application
{
   HashSet<Object> singletons = new HashSet<Object>();

   public YourApplication()
   {
      getClasses().add(yourOwnClass.class);
   }

   @Override
   public Set<Class<?>> getClasses()
   {
      HashSet<Class<?>> set = new HashSet<Class<?>>();
      return set;
   }

    enter code here

   @Override
   public Set<Object> getSingletons()
   {
      return singletons;  
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10269017" questionTitle="javafx animation: displaying circles">
<Answer><![CDATA[@Override
    public void start(Stage primaryStage) throws Exception {
        Group root = new Group();
        primaryStage.setResizable(false);
        primaryStage.setScene(new Scene(root, sceneWidth, sceneHeight));

        final ObservableList<Node> ol = root.getChildren();

        new Thread(new Runnable() {
            @Override public void run() {
                while (true) {
                    try {
                        // Wait for 2 seconds.
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                    Platform.runLater(new Runnable() {
                        @Override public void run() {
                            System.out.println("ol size:" + ol.size());
                            if (ol.size() == 5) {
                                ol.remove(0);
                            }
                            ol.add(createCircle());
                        }
                    });
                }
            }
        }).start();
        primaryStage.show();
    }]]></Answer>
<Answer><![CDATA[import javafx.animation.*;
import javafx.application.Application;
import javafx.event.*;
import javafx.scene.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.Random;

public class FiveAutoCircleExample extends Application {
  private static final Random r = new Random();
  public static final int SCENE_SIZE = 800;

  public static void main(String[] args) throws Exception { launch(args); }
  public void start(final Stage stage) throws Exception {
    final Group circles = new Group();
    final Timeline animation = new Timeline(
      new KeyFrame(Duration.seconds(.5), 
      new EventHandler<ActionEvent>() {
        @Override public void handle(ActionEvent actionEvent) {
          while (circles.getChildren().size() >= 5) circles.getChildren().remove(0);
          int radius = 10 * r.nextInt(20);
          circles.getChildren().add(
            new Circle(
              r.nextInt(SCENE_SIZE - radius * 2) + radius, r.nextInt(SCENE_SIZE - radius * 2) + radius,
              radius,
              new Color(r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble())
            )
          );
        }
      })
    );
    animation.setCycleCount(Animation.INDEFINITE);
    animation.play();

    // display the scene.
    stage.setScene(new Scene(circles, SCENE_SIZE, SCENE_SIZE, Color.CORNSILK));
    stage.show();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10042766" questionTitle="JPA - analog of LobCreator from hibernate?">
<Answer><![CDATA[class MyBean{

    @Column
    private byte[] object;

    @Transient
    public Object getObjectDeserialized() throws IOException, ClassNotFoundException {
        if(this.object == null)
            return new String(); // or another type
        return SerializationHelper.deserialize(this.object);
    }

    byte[] getObject() {
        return this.object;
    }

    void setObject(byte[] object) {
        this.object = object;
    }

    @Transient
    public void setObject(Object obj) throws IOException {
        if(obj != null)
            this.object = SerializationHelper.serialize((Serializable) obj);
    }
}]]></Answer>
<Answer><![CDATA[@Transient
public void setContentFromInputStream(InputStream is) throws IOException 
{
    ByteArrayOutputStream baos = new ByteArrayOutputStream();

    byte[] buff = new byte[1024];
    int l = 0;
    do {
        l = is.read(buff);
        if (l > 0)
        {
            baos.write(buff, 0, l);
        }
    } while (l > 0);

    is.close();
    baos.flush();
    baos.close();

    content = baos.toByteArray();
}]]></Answer>
<Answer><![CDATA[@Column
private byte[] object;

@Transient
public Object getObjectDeserialized() throws IOException, ClassNotFoundException {
    if(this.object == null)
        return new String(); // or another type
    return SerializationHelper.deserialize(this.object);
}

byte[] getObject() {
    return this.object;
}

void setObject(byte[] object) {
    this.object = object;
}

@Transient
public void setObject(Object obj) throws IOException {
    if(obj != null)
        this.object = SerializationHelper.serialize((Serializable) obj);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9969375" questionTitle="Adding a listener to a variable in Java/JavaFX which gets called on variable change">
<Answer><![CDATA[public interface Listener
  {
      public void handle(Object o) ;
  }

  public class PropertiesChangeListener
  {
      public void handle(Object o) {
        //DO SOMETHING...
      }
  }

  public class Bean {
      private boolean flag;
      private List<Listener> listeners = new ArrayList<Listener>();

      public setFlag(boolean flag) {
        this.flag = flag;
        if (listeners.size() > 0 ) {
            for (Listener l : this.listeners ) {
                l.handle(flag); //invoke 
            }
        }
      }

      public registerListener(Listener listener) {
        this.listeners.add(listener);
      }

      //..... other fields and methods

  }

  public class Main{

      public static void main(String[] args) {
        Bean bean  = new Bean();
        bean.registerListener(new PropertiesChangeListener());
        bean.setFlag(true); //handler method will be invoked..
      }
  }]]></Answer>
<Answer><![CDATA[import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class MyClass {
    private final List<PropertyChangeListener> listeners = new ArrayList<>();
    private boolean b1, b2;

    public MyClass() {
    }

    public boolean isB1() {
        return b1;
    }

    public void setB1(boolean b1) {
        boolean oldValue = this.b1;
        this.b1 = b1;
        firePropertyChange("b1", oldValue, b1);
    }

    public boolean isB2() {
        return b2;
    }

    public void setB2(boolean b2) {
        boolean oldValue = this.b2;
        this.b2 = b2;
        firePropertyChange("b2", oldValue, b2);
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        listeners.add(listener);
    }

    private void firePropertyChange(String property, Object oldValue, Object newValue) {
        for (PropertyChangeListener l : listeners) {
            l.propertyChange(new PropertyChangeEvent(this, property, oldValue, newValue));
        }
    }

    /**
     * Main method for tests.
     * @param args
     */
    public static void main(String[] args) {
        MyClass m = new MyClass();

        m.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                String changedProperty = e.getPropertyName();
                System.out.println("Changed property: " + changedProperty);
                System.out.println("New value: " + e.getNewValue());
                System.out.println("Old value: " + e.getOldValue());
                System.out.println();
            }
        });

        m.setB1(true);
        m.setB2(false);
    }
}]]></Answer>
<Answer><![CDATA[public class Demo extends Application {

    private BooleanProperty booleanProperty = new SimpleBooleanProperty(true);

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        // Add change listener
        booleanProperty.addListener(new ChangeListener<Boolean>() {

            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                System.out.println("changed " + oldValue + "->" + newValue);
                myFunc();
            }
        });

        Button btn = new Button();
        btn.setText("Toggle boolean flag");
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                booleanProperty.set(!booleanProperty.get()); //toggle
                System.out.println("toggled to " + booleanProperty.get());
            }
        });

        // Bind to another property variable
        btn.underlineProperty().bind(booleanProperty);

        StackPane root = new StackPane();
        root.getChildren().add(btn);
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
    }

    public boolean getFlag() {
        return booleanProperty.get();
    }

    public void setFlag(boolean val) {
        booleanProperty.set(val);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9950954" questionTitle="Drag and drop TXT file into TextArea">
<Answer><![CDATA[import java.awt.dnd.*;
import java.awt.datatransfer.*;
import java.io.File;
import java.util.List;
public class MyDragDropListener implements DropTargetListener
{
    MyFrame frame; // initialize in a constructor that takes in the frame

    @Override
    public void dragEnter(DropTargetDragEvent event) {
    }

    @Override
    public void dragExit(DropTargetEvent event) {
    }

    @Override
    public void dragOver(DropTargetDragEvent event) {
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent event) {
    }

    @Override
    public void drop(DropTargetDropEvent event)
    {
        // This is the main chunk of the drag and drop.
        event.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable transferable = event.getTransferable();
        DataFlavor[] flavors = transferable.getTransferDataFlavors();
        for(DataFlavor flavor : flavors)
        {
            if(flavor.isFlavorJavaFileListType())
            {
                List myFiles = (List) transferable.getTransferData(flavor);
                frame.get(myFiles);
            }
        }
    }

}]]></Answer>
<Answer><![CDATA[...
for (File file : db.getFiles()) {
    sourceTx.setText(handleFile(file));
}
...
    private String handleFile(File file) {
            String ret = "";
            if (file.isDirectory()) {
                for (File f : file.listFiles()) {
                    ret.concat(handleFile(f));
                }
            } else {
                /*this is your filereader*/
                String absolutePath = file.getAbsolutePath();
                BufferedReader br = null;
                try {
                    br = new BufferedReader(new InputStreamReader(new FileInputStream(absolutePath)));

                    String line = null;
                    String text = "";

                    String nl = System.getProperty("line.separator", "\n");

                    while ((line = br.readLine()) != null)
                        text += line + nl;

                    ret.concat(text.trim());

                } catch (Exception e) {
                    MessageBox.show(MessageBoxType.ERROR, I18n.localize("File Error"), I18n.localize("Error while reading content from selected file"));
                } finally {
                    if (br != null)
                        try {
                            br.close();
                        } catch (Exception e) {
                        }
                }

            }
            return ret;
        }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9722418" questionTitle="How to handle ListView item clicked action?">
<Answer><![CDATA[public static Callback<ListView<BlockFactory>, ListCell<BlockFactory>> getCellFactory() {
    return new Callback<ListView<BlockFactory>, ListCell<BlockFactory>>() {

        @Override
        public ListCell<BlockFactory> call(ListView<BlockFactory> param) {
            ListCell<BlockFactory> cell = new ListCell<BlockFactory>() {

                @Override
                protected void updateItem(BlockFactory item, boolean empty) {
                    super.updateItem(item, empty);
                    if (item != null) {
                        ImageView img = new ImageView(item.img);
                        Label label = new Label(item.desc);
                        HBox bar = new HBox(img, label);
                        bar.setSpacing(15);
                        bar.setAlignment(Pos.CENTER_LEFT);
                        setGraphic(bar);
                    }
                }
            };
            cell.setOnMousePressed((MouseEvent event) -> {
                if (cell.isEmpty()) {
                    event.consume();
                }
            });
            return cell;
        }
    };
}]]></Answer>
<Answer><![CDATA[// only one global event handler
private EventHandler<MouseEvent> oneClickHandler;


public AppListCellFactory(){
    oneClickHandler = new EventHandler<MouseEvent>() {
        @Override
        public void handle(MouseEvent event) {
            Parent p = (Parent) event.getSource();
            //  do what you want to do with data.
            AppClickHandler.onAppBeanClicked((AppBean) p.getUserData());
        }
    };
}

@Override
public ListCell<AppBean> call(ListView<AppBean> param) {
    return new DemoListCell(oneClickHandler);
}

public static final class DemoListCell extends ListCell<AppBean> {

    private EventHandler<MouseEvent> clickHandler;

    /**
     * This is ListView item root node.
     */
    private Parent itemRoot;

    private Label label_AppName;
    private ImageView imgv_AppIcon;

    DemoListCell(EventHandler<MouseEvent> clickHandler) {
        this.clickHandler = clickHandler;
    }

    @Override
    protected void updateItem(AppBean app, boolean empty) {
        super.updateItem(app, empty);
        if (app == null) {
            setText(null);
            setGraphic(null);
            return;
        }
        if (null == itemRoot) {
            try {
                itemRoot = FXMLLoader.load(getClass().getResource(("fxml/appList_item.fxml")));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            label_AppName = (Label) itemRoot.lookup("#item_Label_AppName");
            imgv_AppIcon = (ImageView) itemRoot.lookup("#item_ImageView_AppIcon");
            itemRoot.setOnMouseClicked(clickHandler);
        }
        //  set user data. like android's setTag(Object).
        itemRoot.setUserData(app);
        label_AppName.setText(app.name);
        imgv_AppIcon.setImage(new Image(getClass().getResource("img/icon_64.png").toExternalForm()));
        setGraphic(itemRoot);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9699948" questionTitle="TableView exclude bottom row (total) from sorting">
<Answer><![CDATA[public class BigDecimalColumnComparator implements Comparator<BigDecimal> {
    private final ObjectProperty<TableColumn.SortType> sortTypeProperty;

    public BigDecimalColumnComparator(ObjectProperty<TableColumn.SortType> sortTypeProperty) {
        this.sortTypeProperty = sortTypeProperty;
    }

    @Override
    public int compare(BigDecimal o1, BigDecimal o2) {
        TableColumn.SortType sortType = sortTypeProperty.get();
        if (sortType == null) {
            return 0;
        }

        if (o1 instanceof TotalBigDecimal) {
            if (sortType == TableColumn.SortType.ASCENDING) {
                return 1;
            } else {
                return -1;
            }
        } else if (o2 instanceof TotalBigDecimal) {
            if (sortType == TableColumn.SortType.ASCENDING) {
                return -1;
            } else {
                return 1;
            }
        }

        return o1.compareTo(o2);
    }
}]]></Answer>
<Answer><![CDATA[public class LocalDateTableCell<T> implements 
    Callback<TableColumn<T, LocalDate>, TableCell<T, LocalDate>> {

  @Override
  public TableCell<T, LocalDate> call(TableColumn<T, LocalDate> p) {
    TableCell<T, LocalDate> cell = new TableCell<T, LocalDate>() {
      @Override
      protected void updateItem(LocalDate item, boolean empty) {
        super.updateItem(item, empty);

        if (item == null || empty) {
          setText(null);
        } else {
          setText(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)
            .format(item));
        }

        if (getTableView().getItems().size() == getIndex())
          setText("Test"); // This shows in the summary row
      }
    };

    return cell;
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9696572" questionTitle="Queries returning multiple result sets">
<Answer><![CDATA[boolean isResultSet = stmt.execute();

int count = 0;
while(true) {
    if(isResultSet) {
        rs = stmt.getResultSet();
        while(rs.next()) {
            processEachRow(rs);
        }

        rs.close();
    } else {
        if(stmt.getUpdateCount() == -1) {
            break;
        }

        log.info("Result {} is just a count: {}", count, stmt.getUpdateCount());
    }

    count ++;
    isResultSet = stmt.getMoreResults();
}]]></Answer>
<Answer><![CDATA[public static void executeStatement(Connection con) {
   try {
      String SQL = "SELECT TOP 10 * FROM Person.Contact; " +
                   "SELECT TOP 20 * FROM Person.Contact";
      Statement stmt = con.createStatement();
      boolean results = stmt.execute(SQL);
      int rsCount = 0;

      //Loop through the available result sets.
     do {
        if(results) {
           ResultSet rs = stmt.getResultSet();
           rsCount++;

           //Show data from the result set.
           System.out.println("RESULT SET #" + rsCount);
           while (rs.next()) {
              System.out.println(rs.getString("LastName") + ", " + rs.getString("FirstName"));
           }
           rs.close();
        }
        System.out.println();
        results = stmt.getMoreResults();
        } while(results);
      stmt.close();
      }
   catch (Exception e) {
      e.printStackTrace();
   }
}]]></Answer>
<Answer><![CDATA[public static void executeProcedure(Connection con) {
   try {
      CallableStatement stmt = con.prepareCall(...);
      .....  //Set call parameters, if you have IN,OUT, or IN/OUT parameters

      boolean results = stmt.execute();
      int rsCount = 0;

      //Loop through the available result sets.
     while (results) {
           ResultSet rs = stmt.getResultSet();
           //Retrieve data from the result set.
           while (rs.next()) {
        ....// using rs.getxxx() method to retieve data
           }
           rs.close();

        //Check for next result set
        results = stmt.getMoreResults();
      } 
      stmt.close();
   }
   catch (Exception e) {
      e.printStackTrace();
   }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9355303" questionTitle="JavaFX stopwatch timer">
<Answer><![CDATA[package fxtimer;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Duration;

public class FXTimer extends Application {

    private Timeline timeline;
    private Label timerLabel = new Label(), splitTimerLabel = new Label();
    private DoubleProperty timeSeconds = new SimpleDoubleProperty(),
            splitTimeSeconds = new SimpleDoubleProperty();
    private Duration time = Duration.ZERO, splitTime = Duration.ZERO;

    @Override
    public void start(Stage primaryStage) {
        // Configure the Label
        // Bind the timerLabel text property to the timeSeconds property
        timerLabel.textProperty().bind(timeSeconds.asString());
        timerLabel.setTextFill(Color.RED);
        timerLabel.setStyle("-fx-font-size: 4em;");
        splitTimerLabel.textProperty().bind(splitTimeSeconds.asString());
        splitTimerLabel.setTextFill(Color.BLUE);
        splitTimerLabel.setStyle("-fx-font-size: 4em;");

        // Create and configure the Button
        Button button = new Button();
        button.setText("Start / Split");
        button.setOnAction(new EventHandler() {
            @Override
            public void handle(Event event) {
                if (timeline != null) {
                    splitTime = Duration.ZERO;
                    splitTimeSeconds.set(splitTime.toSeconds());
                } else {
                    timeline = new Timeline(
                        new KeyFrame(Duration.millis(100),
                        new EventHandler<ActionEvent>() {
                            @Override
                            public void handle(ActionEvent t) {
                                Duration duration = ((KeyFrame)t.getSource()).getTime();
                                time = time.add(duration);
                                splitTime = splitTime.add(duration);
                                timeSeconds.set(time.toSeconds());
                                splitTimeSeconds.set(splitTime.toSeconds());
                            }
                        })
                    );
                    timeline.setCycleCount(Timeline.INDEFINITE);
                    timeline.play();
                }
            }
        });

        // Setup the Stage and the Scene (the scene graph)
        StackPane root = new StackPane();
        Scene scene = new Scene(root, 300, 250);

        // Create and configure VBox
        // gap between components is 20
        VBox vb = new VBox(20);
        // center the components within VBox
        vb.setAlignment(Pos.CENTER);
        // Make it as wide as the application frame (scene)
        vb.setPrefWidth(scene.getWidth());
        // Move the VBox down a bit
        vb.setLayoutY(30);
        // Add the button and timerLabel to the VBox
        vb.getChildren().addAll(button, timerLabel, splitTimerLabel);
        // Add the VBox to the root component
        root.getChildren().add(vb);

        primaryStage.setTitle("FX Timer");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[package aaa;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javafx.beans.property.SimpleStringProperty;

/**
 *
 * @author D07114915
 */
public class KTimer {

private SimpleDateFormat sdf = new SimpleDateFormat("mm:ss:S");
private String[] split;
private SimpleStringProperty sspTime;
private long time;
private Timer t = new Timer("Metronome", true);
private TimerTask tt;
boolean timing = false;

public KTimer() {
    sspTime = new SimpleStringProperty("00:00:00");
}

public void startTimer(final long time) {
    this.time = time;
    timing = true;
    tt = new TimerTask() {

        @Override
        public void run() {
            if (!timing) {
                try {
                    tt.cancel();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                updateTime();
            }
        }
    };
    t.scheduleAtFixedRate(tt, 10, 10);
}

public synchronized void stopTimer() {
    timing = false;
}

public synchronized void updateTime() {
    this.time = this.time + 10;
    split = sdf.format(new Date(this.time)).split(":");
    sspTime.set(split[0] + ":" + split[1] + ":" + (split[2].length() == 1 ? "0" + split[2] : split[2].substring(0, 2)));
}

public synchronized void moveToTime(long time) {
    stopTimer();
    this.time = time;
    split = sdf.format(new Date(time)).split(":");
    sspTime.set(split[0] + ":" + split[1] + ":" + (split[2].length() == 1 ? "0" + split[2] : split[2].substring(0, 2)));
}

public synchronized long getTime() {
    return time;
}

public synchronized SimpleStringProperty getSspTime() {
    return sspTime;
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9160044" questionTitle="Delay Java Step Execution">
<Answer><![CDATA[package test;

import net.sf.cglib.reflect.FastClass;
import net.sf.cglib.reflect.FastMethod;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

public class Test {

    private static final long SLEEP = 0;
    private static final Object[] withoutParameters = new Object[0];

    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InterruptedException, IllegalAccessException {
        final Method[] methods = getMethods(Test.class, "command1", "command2");
        final FastMethod[] fastMethods = getFastMethods(Test.class, methods);
        final Test test = new Test();
        final int loop = 10* 1000 * 1000;

        long timeStamp = System.currentTimeMillis();
        for (int i = 0; i < loop; i++) {
            test.functionDirectCall();
        }
        System.out.println("DirectCall time:" + (System.currentTimeMillis() - timeStamp));

        timeStamp = System.currentTimeMillis();
        for (int i = 0; i < loop; i++) {
            test.functionMethod(methods);
        }
        System.out.println("Method time:" + (System.currentTimeMillis() - timeStamp));

        timeStamp = System.currentTimeMillis();
        for (int i = 0; i < loop; i++) {
            test.functionFastMethod(fastMethods);
        }
        System.out.println("FastMethod time:" + (System.currentTimeMillis() - timeStamp));
    }

    private void functionDirectCall() throws InterruptedException {
        this.command1();
        Thread.sleep(SLEEP);
        this.command2();
        Thread.sleep(SLEEP);
    }

    private void functionMethod(Method... methods) throws InvocationTargetException, IllegalAccessException, InterruptedException {
        for (Method method : methods) {
            method.invoke(this);
            Thread.sleep(SLEEP);
        }
    }

    private void functionFastMethod(FastMethod... fastMethods) throws InvocationTargetException, InterruptedException {
        for (FastMethod fastMethod : fastMethods) {
            fastMethod.invoke(this, withoutParameters);
            Thread.sleep(SLEEP);
        }
    }

    private static Method[] getMethods(final Class aClass, final String... methodNames) throws NoSuchMethodException {
        return new ArrayList<Method>() {{
            for (String methodName : methodNames) {
                final Method method = aClass.getDeclaredMethod(methodName);
                method.setAccessible(true);
                this.add(method);
            }
        }}.toArray(new Method[methodNames.length]);
    }

    private static FastMethod[] getFastMethods(final Class aClass, final Method... methods) {
        final FastClass fastClass = FastClass.create(aClass);
        return new ArrayList<FastMethod>() {{
            for (Method method : methods) {
                add(fastClass.getMethod(method));
            }
        }}.toArray(new FastMethod[methods.length]);
    }

    public void command1() throws InterruptedException {
        Thread.sleep(SLEEP);
    }

    public void command2() throws InterruptedException {
        Thread.sleep(SLEEP);
    }
}]]></Answer>
<Answer><![CDATA[package main;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class TempClass {
    public static void main(String[] args) throws ParseException, InterruptedException, InvocationTargetException, NoSuchMethodException, IllegalAccessException {
        new TempClass().function();
    }

    private void function() throws NoSuchMethodException, InterruptedException, InvocationTargetException, IllegalAccessException {
        final Class aClass = this.getClass();
        List<Method> methods = new ArrayList<Method>() {{
            add(aClass.getDeclaredMethod("command1"));
            add(aClass.getDeclaredMethod("command2"));
        }};
        for (Method method : methods) {
            method.setAccessible(true);
            method.invoke(this);
            Thread.sleep(1000);
        }
    }

    private void command1() {
        System.out.println("command1");
    }

    private void command2() {
        System.out.println("command2");
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9045123" questionTitle="org.apache.tomcat.dbcp.dbcp.SQLNestedException: Cannot get a connection, pool error Timeout waiting for idle object">
<Answer><![CDATA[public class DBController {
private DataSource ds;
private Connection con;// NEW CHANGE

public void setUp() throws NamingException{
    //connect to database
    Context ctx = new InitialContext();
    ds = (DataSource)ctx.lookup("java:comp/env/jdbc/it2299");
    con = ds.getConnection(); // NEW CHANGE
}

public ResultSet readRequest(String dbQuery){
    ResultSet rs=null;
    try{
        //REMOVED CODE FROM HERE
        Statement stmt = con.createStatement();
        rs = stmt.executeQuery(dbQuery);
    }
    catch(Exception e){e.printStackTrace();}
    return rs;
}

public int updateRequest(String dbQuery){
    int count=0;
    try{
        //REMOVED CODE FROM HERE
        Statement stmt = con.createStatement();
        count=stmt.executeUpdate(dbQuery);
    }
    catch(Exception e){e.printStackTrace();}
    return count;
}

public void terminate(){
    try {con.close();}
    catch(Exception e){e.printStackTrace();}
}
}]]></Answer>
<Answer><![CDATA[public List<Entity> list() throws SQLException {
    Connection connection = null;
    PreparedStatement statement = null;
    ResultSet resultSet = null;
    List<Entity> entities = new ArrayList<Entity>();

    try {
        connection = Database.getConnection();
        statement = connection.prepareStatement("SELECT id, foo, bar FROM entity");
        resultSet = statement.executeQuery();

        while (resultSet.next()) {
            Entity entity = new Entity();
            entity.setId(resultSet.getLong("id"));
            entity.setFoo(resultSet.getString("foo"));
            entity.setBar(resultSet.getString("bar"));
            entities.add(entity);
        }
    } finally {
        if (resultSet != null) try { resultSet.close(); } catch (SQLException ignore) {}
        if (statement != null) try { statement.close(); } catch (SQLException ignore) {}
        if (connection != null) try { connection.close(); } catch (SQLException ignore) {}
    }

    return entities;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8937158" questionTitle="How to check whether a port is open at client's network/firewall?">
<Answer><![CDATA[import java.io.*;
import java.net.*;

public class ConnectionTestApplet extends Applet {
    public void start() {
        boolean portAvailable = false;
        int delay = 1000; // 1 s
        try {
            Socket socket = new Socket();
            socket.connect(new InetSocketAddress("server.domain.com", 1935), delay);
            portAvailable = socket.isConnected();
            socket.close();
        } catch (UnknownHostException uhe) {
            uhe.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        System.out.println("Connection possible: " + portAvailable);
    }
}]]></Answer>
<Answer><![CDATA[var myrequest = new ajaxRequest();
var isAccessible = false;
myrequest._timeout = setTimeout(function() {
      myrequest.abort();
      displayErrorMessage();
    },
    1000
    ) //end setTimeout
myrequest.onreadystatechange = function() {
    if (myrequest.readyState == 4) { //if request has completed
      if (myrequest.status == 200) {
        isAccessible = false;
        goOnWithTheJob();
      } else {
        displayErrorMessage();
      }
    }
myrequest.open("GET", url, true);
myrequest.send(null); //send GET request
// do nothing - wait for either timeout or readystate callback]]></Answer>
<Answer><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
        <script type="text/javascript" src="jquery-1.7.2-min.js"></script>
    </head>
    <body>
        <script type"text/javascript">
            var isAccessible = null;
            function checkConnection() {
                var url = "http://101.212.33.60:1935/test/hello.html" ;
                $.ajax({
                    url: url,
                    type: "get",
                    cache: false,
                    dataType: 'jsonp', // it is for supporting crossdomain
                    crossDomain : true,
                    asynchronous : false,
                    jsonpCallback: 'deadCode',
                    timeout : 1500, // set a timeout in milliseconds
                    complete : function(xhr, responseText, thrownError) {
                        if(xhr.status == "200") {
                           isAccessible = true;
                           success(); // yes response came, esecute success()
                        }
                        else {
                           isAccessible = false;
                           failure(); // this will be executed after the request gets timed out due to blockage of ports/connections/IPs
                        }
                    }
               });
            }
            $(document).ready( function() {
                checkConnection(); // here I invoke the checking function
            });
        </script>
    </body>
</html>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8663662" questionTitle="How to write data to CSV file in Java Application">
<Answer><![CDATA[public void should_partial_write() throws Exception {
    // The data to write
    Order mainOrder = new Order();
    mainOrder.setOrderNumber(1);
    mainOrder.setProductNumber(42);
    mainOrder.setUserComment("some comment");
    Order subOorder = new Order();
    subOorder.setOrderNumber(2);
    subOorder.setParentOrder(1);
    subOorder.setProductNumber(43);

    // for testing write to a string rather than a file
    StringWriter outFile = new StringWriter();

    // setup header for the file and processors. Notice the match between the header and the attributes of the
    // objects to write. The rules are that
    // - if optional "parent orders" are absent, write -1
    // - and optional user comments absent are written as ""
    String[] header = new String[] { "orderNumber", "parentOrder", "productNumber", "userComment" };
    CellProcessor[] Processing = new CellProcessor[] { null, new ConvertNullTo(-1), null, new ConvertNullTo("\"\"") };

    // write the partial data
    CsvBeanWriter writer = new CsvBeanWriter(outFile, CsvPreference.EXCEL_PREFERENCE);
    writer.writeHeader(header);
    writer.write(mainOrder, header, Processing);
    writer.write(subOorder, header, Processing);
    writer.close();

    // show output
    System.out.println(outFile.toString());
}]]></Answer>
<Answer><![CDATA[Need to define before try-catch 
String fileName = name.csv
String filePath = directory path 

try {                   
        CSVWriter writer = new CSVWriter(filePath);
        writer.setQuoteMode(CSVWriter.DQUOTE_CONDITIONAL);
        writer.setHeader(newHeader);
        writer.write(data);
        file_written = true;
        data = null;
        HashMap model = new HashMap();
        model.put("fileName", fileName);
        model.put("filePath", filePath);
        model.put("delete_after", new Boolean(true));
        model.put("content_type", "application/vnd.ms-excel");              
        return new ModelAndView("fileView", model);
    } catch (IOException io) {
        System.out.println("ERROR :" + io.toString());
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8374365" questionTitle="Integrating JavaFX 2.0 WebView into a Swing Java SE 6 Application">
<Answer><![CDATA[import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;

import javax.swing.*;
import java.awt.*;

/**
 * This sample demonstrates how to create Browser instance,
 * embed it into Swing BrowserView container, display it in JFrame and
 * navigate to the "www.google.com" web site.
 */
public class BrowserSample {
    public static void main(String[] args) {
        Browser browser = new Browser();
        BrowserView browserView = new BrowserView(browser);

        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.add(browserView, BorderLayout.CENTER);
        frame.setSize(700, 500);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        browser.loadURL("http://www.google.com");
    }
}]]></Answer>
<Answer><![CDATA[import java.awt.Dimension;
import java.awt.Point;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

public class JavaFX {

    /* Create a JFrame with a JButton and a JFXPanel containing the WebView. */
    private static void initAndShowGUI() {
        // This method is invoked on Swing thread
        JFrame frame = new JFrame("FX");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(null); // do the layout manually

        final JButton jButton = new JButton("Button");
        final JFXPanel fxPanel = new JFXPanel();

        frame.add(jButton);
        frame.add(fxPanel);
        frame.setVisible(true);

        jButton.setSize(new Dimension(200, 27));
        fxPanel.setSize(new Dimension(300, 300));
        fxPanel.setLocation(new Point(0, 27));

        frame.getContentPane().setPreferredSize(new Dimension(300, 327));
        frame.pack();
        frame.setResizable(false);

        Platform.runLater(new Runnable() { // this will run initFX as JavaFX-Thread
            @Override
            public void run() {
                initFX(fxPanel);
            }
        });
    }

    /* Creates a WebView and fires up google.com */
    private static void initFX(final JFXPanel fxPanel) {
        Group group = new Group();
        Scene scene = new Scene(group);
        fxPanel.setScene(scene);

        WebView webView = new WebView();

        group.getChildren().add(webView);
        webView.setMinSize(300, 300);
        webView.setMaxSize(300, 300);

            // Obtain the webEngine to navigate
        WebEngine webEngine = webView.getEngine();
        webEngine.load("http://www.google.com/");
    }

    /* Start application */
    public static void main(final String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                initAndShowGUI();
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8106497" questionTitle="JavaFx 2.0 with FXML: tabs at bottom instead of top?">
<Answer><![CDATA[package tabtest;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class TabTest extends Application {

    public static void main(String[] args) {
        Application.launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();
        Scene scene = new Scene(root, 300, 250);

        TabPane tabPane = new TabPane();
        Tab tab1 = new Tab("Tab 1");
        tabPane.getTabs().add(tab1);

        root.setBottom(tabPane);

        primaryStage.setScene(scene);
        primaryStage.show();
    }
}]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.collections.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.effect.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.shape.*?>
<?import javafx.scene.text.*?>
<?import javafx.scene.web.*?>

<BorderPane xmlns:fx="http://javafx.com/fxml" fx:controller="example.MainViewController">
  <bottom>
    <HBox>
      <children>
        <Button fx:id="btnNewTab" mnemonicParsing="false" text="Add New Tab" onAction="#btnNewTabAction" />
      </children>
    </HBox>
  </bottom>
  <center>
    <TabPane fx:id="tabPane" side="BOTTOM">
      <tabs>
        <Tab text="Untitled Tab 1">
          <content>
            <AnchorPane id="Content">
                <Label>Content 1</Label>
            </AnchorPane>
          </content>
        </Tab>
        <Tab text="Untitled Tab 2">
          <content>
            <AnchorPane id="Content">
                <Label>Content 2</Label>
            </AnchorPane>
          </content>
        </Tab>
      </tabs>
    </TabPane>
  </center>
  <top>
    <Label text="TabPane Example" />
  </top>
</BorderPane>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8012515" questionTitle="How do you keep clean layers separation with Hibernate/ORM?">
<Answer><![CDATA[// This is a "global" API (meaning it is visible to all layers). This is ok as
// it is a specification and not an implementation.
public interface FooWriter {
    void write(Foo foo);
}

// DAO layer
public class FooDaoImpl {
    ...
    public void streamBigQueryTo(FooWriter fooWriter, ...) {
        ...
        for (Foo foo: executeQueryThatReturnsLotsOfFoos(...)) {
            fooWriter.write(foo);
            evict(foo);
        }
    } 
    ...
}

// UI layer
public class FooUI {
    ...
    public void dumpCsv(...) {
        ...
        fooBusiness.streamBigQueryTo(new CsvFooWriter(request.getOutputStream()), ...);
        ...
    }
}

// Business layer
public class FooBusinessImpl {
    ...
    public void streamBigQueryTo(FooWriter fooWriter, ...) {
        ...
        if (user.canQueryFoos()) {
            beginTransaction();
            fooDao.streamBigQueryTo(fooWriter, ...);
            auditAccess(...);
            endTransaction();
        }
        ...
    }
}]]></Answer>
<Answer><![CDATA[public class GenericDaoHibernateImpl <T, PK extends Serializable>
implements GenericDao<T, PK>, FinderExecutor {
private Class<T> type;

public GenericDaoHibernateImpl(Class<T> type) {
    this.type = type;
}

public PK create(T o) {
    return (PK) getSession().save(o);
}

public T read(PK id) {
    return (T) getSession().get(type, id);
}

public void update(T o) {
    getSession().update(o);
}

public void delete(T o) {
    getSession().delete(o);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8004293" questionTitle="How to I make this Timer Service Class handle the &quot;change in scheduled time&quot;?">
<Answer><![CDATA[@Stateless
    public class TimerUtilityBean {

    @Resource
    TimerService timerService;

     public void createTimer(String sec, String min, String hour){

        ScheduleExpression expression = new ScheduleExpression();
        expression.second(sec).minute(min).hour(hour);
        timerService.createCalendarTimer(expression);
     }

     public void cancelTimer(String timerInfo){

      if (timerService.getTimers() != null) {

           for (Timer timer : timerService.getTimers()) 
               if (timer.getInfo().equals(timerInfo))
                   timer.cancel();
       }
     }

     @Timeout
     public void execute(Timer timer){
        System.out.println("Invoked: " + System.currentTimeMillis());
     }

     public void reinitializeTimer(String sec, String min, String hour, String timerInfo){
        cancelTimer(timerInfo);
        createTimer(sec, min, hour);
     }
}]]></Answer>
<Answer><![CDATA[package com.test.scheduler;

import java.io.Serializable;
import java.util.Date;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.Timeout;
import javax.ejb.TimerService;

import org.jboss.seam.annotations.Name;

@Stateless
@Name("pingImpl")
public class PingImpl
                implements PingLocal, PingRemote, Serializable {

        private static final long serialVersionUID = 1105969164226368956L;

        @Resource
        SessionContext sessionContext;
        private static final String name = "Ping";

        public void doAction() {
                Long schedule = new Long(5000); //new timeout...
                TimerService timerService = sessionContext.getTimerService();
                System.out.println("++++ Initialize: AppTimers");
                removeTimer();
                System.out.println("Re-initialize Timers: Setting new timer : " + name);
                timerService.createTimer(new Date(System.currentTimeMillis()+schedule), schedule, name);
                System.out.println("++++ Initialize: Completed");
        }

        public void removeTimer() {
                TimerService timerService = sessionContext.getTimerService();
                for (Object obj : timerService.getTimers()) {
                        javax.ejb.Timer timer = (javax.ejb.Timer) obj;
                        String scheduled = (String) timer.getInfo();
                        System.out.println("-> Timer Found : " + scheduled);
                        if (scheduled.equals(name)) {
                                System.out.println("-> Removing old timer : " + scheduled);
                                timer.cancel();
                        }
                }
        }

        @Timeout
        public void timeout(javax.ejb.Timer timer) {
                System.out.println("Timed event called: " + name);
                doAction();
        }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="7868188" questionTitle="JavaFX 2: Save edit in TableCell">
<Answer><![CDATA[private void createTextField() {
        textField = new TextField(getItem());
        textField.setMinWidth(this.getWidth() - this.getGraphicTextGap() * 2);

        // Detect a change in focus on the text field.. If we lose the focus we take appropriate action
        textField.focusedProperty().addListener(new ChangeListener<Boolean>() {
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                if(!newValue.booleanValue())
                    commitEdit(textField.getText());
            }
        } );
        textField.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override public void handle(KeyEvent t) {
                if (t.getCode() == KeyCode.ENTER) {
                    commitEdit(textField.getText());
                } else if (t.getCode() == KeyCode.ESCAPE) {
                    cancelEdit();
                }
            }
        });
    }]]></Answer>
<Answer><![CDATA[import java.util.ArrayList;
  import java.util.List;

  import javafx.beans.property.ObjectProperty;
  import javafx.beans.property.SimpleObjectProperty;
  import javafx.collections.FXCollections;
  import javafx.collections.ObservableList;
  import javafx.event.EventHandler;
  import javafx.scene.control.*;
   import javafx.scene.input.KeyCode;
   import javafx.scene.input.KeyEvent;
   import javafx.util.Callback;
   import javafx.util.StringConverter;
   import javafx.util.converter.DefaultStringConverter;

 public class EdittingCell<S, T> extends TableCell<S, T> {

public static <S> Callback<TableColumn<S, String>, TableCell<S, String>> 
forTableColumn() {
    return forTableColumn(new DefaultStringConverter());
}

public static <S, T> Callback<TableColumn<S, T>, TableCell<S, T>> 
forTableColumn(
        final StringConverter<T> converter) {
    return new Callback<TableColumn<S, T>, TableCell<S, T>>() {
        @Override
        public TableCell<S, T> call(TableColumn<S, T> list) {
            return new EdittingCell<S, T>(converter);
        }
    };
}

public static <S, T> Callback<TableColumn<S, T>, TableCell<S, T>> 
forTableColumn(final StringConverter<T> converter,
        final boolean isFieldEditable) {
    return new Callback<TableColumn<S, T>, TableCell<S, T>>() {
        @Override
        public TableCell<S, T> call(TableColumn<S, T> list) {
            return new EdittingCell<S, T>(converter, isFieldEditable);
        }
    };
}

/***************************************************************************
 * * Fields * *
 **************************************************************************/
public TextField textField;
private static int currentRow = -1;
private static int control = 0;

public EdittingCell() {
    this(null);
    textField = CellGenerator.createTextField(this, getConverter());
}

public EdittingCell(StringConverter<T> converter) {

    this.getStyleClass().add("text-field-table-cell");

    setConverter(converter);
    textField = CellGenerator.createTextField(this, getConverter());
    // textField.setEditable(false);

}

public EdittingCell(StringConverter<T> converter, boolean isFieldEditable) {

    this.getStyleClass().add("text-field-table-cell");

    setConverter(converter);
    textField = CellGenerator.createTextField(this, getConverter());
    textField.setEditable(isFieldEditable);

}

/***************************************************************************
 * * Properties * *
 **************************************************************************/
// --- converter
private ObjectProperty<StringConverter<T>> converter = new SimpleObjectProperty<StringConverter<T>>(this,
        "converter");

public final ObjectProperty<StringConverter<T>> converterProperty() {
    return converter;
}

public TextField getTextFiedCell() {
    return textField;
}

public final void setConverter(StringConverter<T> value) {
    converterProperty().set(value);
}

public final StringConverter<T> getConverter() {
    return converterProperty().get();
}

@Override
public void startEdit() {
    if (!isEditable() || !getTableView().isEditable() || !getTableColumn().isEditable()) {
        return;
    }
    super.startEdit();
    if (isEditing()) {

        CellGenerator.startEdit(this, getConverter(), null, null, textField);
    }
}

@Override
public void cancelEdit() {
    super.cancelEdit();
    CellGenerator.cancelEdit(this, getConverter(), null);
}

/** {@inheritDoc} */
@Override
public void updateItem(T item, boolean empty) {
    super.updateItem(item, empty);
    CellGenerator.updateItem(this, getConverter(), null, null, textField);
    // System.out.println("Silas");
}

public TableView<S> getContextTableView() {

    return getTableView();
}

public void setNextColumn(KeyEvent event) {
    TableColumn nextColumn = getNextColumn(!event.isShiftDown());

    if (nextColumn != null) {

        // Get Selected index to reset current editable row
        int selectedRow = getTableRow().getIndex();
        // Set row that serves as a control for tapping through
        if (currentRow == -1) {
            currentRow = getTableRow().getIndex();
        }
        // Reset editing upon selection change row
        if (currentRow != selectedRow) {
            currentRow = selectedRow;
        }

        int colSize = getTableView().getColumns().size();
        int colindex = getTableView().getColumns().indexOf(nextColumn);

        if (colindex == colSize - 1) {
            control++;
        }
        if (control > 0 && colindex == 0) {
            currentRow++;
        }

        if (getTableView().getItems().size() > currentRow) {
            getTableView().edit(currentRow, nextColumn);
            // getTableView().getSelectionModel().select(currentRow,
            // nextColumn);
        } else {
            currentRow = 0;
            // getTableView().getSelectionModel().select(currentRow,
            // nextColumn);
            getTableView().edit(currentRow, nextColumn);
        }
    }
}

private TableColumn<S, ?> getNextColumn(boolean forward) {

    List<TableColumn<S, ?>> columns = new ArrayList<>();

    for (TableColumn<S, ?> column : getTableView().getColumns()) {

        columns.addAll(getLeaves(column));

    }

    // There is no other column that supports editing.

    if (columns.size() < 2) {
        return null;
    }
    int currentIndex = columns.indexOf(getTableColumn());
    int nextIndex = currentIndex;
    if (forward) {
        nextIndex++;
        if (nextIndex > columns.size() - 1) {
            nextIndex = 0;

        }
    } else {
        nextIndex--;
        if (nextIndex < 0) {

            nextIndex = columns.size() - 1;
        }

    }
    return columns.get(nextIndex);
}

private ObservableList<TableColumn<S, ?>> getLeaves(TableColumn<S, ?> column2) {
    ObservableList<TableColumn<S, ?>> columns = FXCollections.observableArrayList();
    if (column2.getColumns().isEmpty()) {
        // We only want the leaves that are editable.
        if (column2.isEditable()) {
            columns.addAll(column2);
        }
        return columns;
    } else {
        for (TableColumn<S, ?> column : column2.getColumns()) {
            columns.addAll(getLeaves(column));
        }
        return columns;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="7646831" questionTitle="Java find most common value in HashSet">
<Answer><![CDATA[class MapWrapper<Key>
{
    private Map<Key,Integer> map = new HashMap<Key, Integer>();

    void add( Key key )
    {
        Integer n = map.get( key );
        if ( n == null )
        {
            map.put( key, 1 );
        }
        else
        {
            map.put( key, new Integer( n + 1 ));
        }
    }

    int occurrences( Key k )
    {
        Integer n = map.get( k );
        if ( n == null )
        {
            return 0;
        }
        else
        {
            return n;
        }
    }
}]]></Answer>
<Answer><![CDATA[/**
 * in ManyValuedMap can be stored lists of elements identificated by some key
 * */
public class ManyValuedHashMap<K, V> implements ManyValuedMap<K, V>, Serializable {

    //linked hash map guarantees right key order
    private Map<K, List<V>> map = new LinkedHashMap<K, List<V>>();
    private boolean isNeedToCheckUniqueness;
    private boolean lock = false;

    /**
     * @param needToCheckUniqueness if true then every time when element added uniqueness will be checked
     * */
    public ManyValuedHashMap(boolean needToCheckUniqueness) {
        isNeedToCheckUniqueness = needToCheckUniqueness;
    }

    public ManyValuedHashMap() {
        this(false);
    }

    public ManyValuedHashMap<K, V> put2 (K key, List<V> newValues ) {
        put(key, newValues);
        return this;
    }

    public List<V> put ( K key, List<V> newValues ) {
        if ( newValues == null ) {
            return put(key, (V)null);
        } else if ( newValues.isEmpty() ) {
            return put(key, (V)null);
        } else {
            //noinspection unchecked
            return put(key, (V[])newValues.toArray() );
        }
    }

    public List<V> put(K key, V... newValues) {
        checkLock();
        List<V> curValues = null;
        if (newValues != null && key != null) {
            curValues = this.map.get(key);

            if (curValues == null) {
                //new values  - add
                curValues = new ArrayList<V>();
                curValues.addAll(Arrays.asList(newValues));
                this.map.put(key, curValues);
            } else {
                // for this key values were added
                if (isNeedToCheckUniqueness) {
                    //if is need to check uniqueness - check
                    Integer index;
                    for (V newValue : newValues) {
                        index = null;
                        for (int i = 0; i < curValues.size(); i++) {
                            if (curValues.get(i).equals(newValue)) {
                                index = i;
                                break;
                            }
                        }
                        if (index == null) {
                            curValues.add(newValue);
                        } /*else {
                            //no need to add
                            //this value is already stored in map
                        }*/
                    }
                } else {
                    //otherwise add
                    curValues.addAll(Arrays.asList(newValues));
                }
            }
        } else if (key != null) {
            curValues = this.map.get(key);

            if (curValues == null) {
                curValues = new ArrayList<V>();
                this.map.put(key, curValues);
            }
        }

        return curValues;
    }

    public boolean containsValue(Object value) {
        boolean result = false;
        for (List<V> values : this.map.values()) {
            for (V v : values) {
                if (v.equals(value)) {
                    result = true;
                    break;
                }
            }
            if (result) {
                break;
            }
        }
        return result;
    }

    public List<V> get(Object key) {
        return this.map.get(key);
    }

    public boolean containsKey(Object key) {
        return this.map.containsKey(key);
    }

    public boolean isEmpty() {
        return this.map.isEmpty();
    }

    public int size() {
        int size = 0;
        for (List<V> vs : map.values()) {
            size += vs.size();
        }
        return size;
    }

    public List<V> remove(Object key) {
        checkLock();
        return this.map.remove(key);
    }

    @Override
    public void putAll(Map<? extends K, ? extends List<V>> m) {
        checkLock();
        this.map.putAll(m);
    }

    public void clear() {
        checkLock();
        this.map.clear();
    }

    @Override
    public void clear(K key) {
        checkLock();
        List<V> curValues = this.map.get(key);
        if ( curValues != null ) {
            curValues.clear();
        }
    }

    public Set<K> keySet() {
        return this.map.keySet();
    }

    public Collection<List<V>> values() {
        return this.map.values();
    }

    public Set<Map.Entry<K, List<V>>> entrySet() {
        return this.map.entrySet();
    }

    public Map<K, List<V>> toMap() {
        return new HashMap<K, List<V>>(map);
    }

    @Override
    public ManyValuedHashMap<K, V> clone() {
        ManyValuedHashMap<K, V> clone = null;
        try {
            //noinspection unchecked
            clone = (ManyValuedHashMap<K, V>)super.clone();
            //IMPORTANT: NOT DEEP CLONE
            //noinspection unchecked
            clone.map = new LinkedHashMap<K, List<V>>();
            clone.map.putAll(this.map);
        } catch (CloneNotSupportedException e) {
            Logger.getLogger(this.getClass()).error(e.getMessage(), e);
        }
        return clone;
    }

    @Override
    public void sort(Comparator<? super V> c) {
        for (List<V> list : map.values()) {
            Collections.sort(list, c);
        }
    }

    @Override
    public List<V> getAllValues() {
        final List<V> result = new ArrayList<V>();
        for (List<V> list : map.values()) {
            result.addAll(list);
        }
        return result;
    }

    public Collection<List<V>> values(Comparator<? super K> c) {
        List<Map.Entry<K, List<V>>> entries = new ArrayList<Map.Entry<K, List<V>>>(entrySet());

        Collections.sort(entries, new EntryComparator(c));

        Collection<List<V>> result = new ArrayList<List<V>>();

        for (Map.Entry<K, List<V>> entry : entries) {
            result.add(entry.getValue());
        }

        return result;
    }

    private class EntryComparator implements Comparator<Map.Entry<K, List<V>>>{

        private Comparator<? super K> keyComparator = null;

        private EntryComparator(Comparator<? super K> keyComparator) {
            this.keyComparator = keyComparator;
        }

        @Override
        public int compare(Map.Entry<K, List<V>> o1, Map.Entry<K, List<V>> o2) {
            return keyComparator.compare(o1.getKey(), o2.getKey());
        }
    }

    @Override
    public void lock() {
        this.lock = true;
    }

    private void checkLock () {
        if ( this.lock ) {
            throw new UnsupportedOperationException();
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.HashMap;
import java.util.Map;

public class Count<K, V> extends HashMap<K, V> {

    // Counts unique objects
    public void add(K o) {
        int count = this.containsKey(o) ? ((Integer)this.get(o)).intValue() + 1 : 1;
        super.put(o, (V) new Integer(count));
    }

    // Demonstration
    public static void main(String[] args) {

        Count<Object, Integer> c = new Count<Object, Integer>();

        String one = "one";
        String two = "two";
        String six = "six";

        c.add(one);
        c.add(two);
        c.add(two);
        c.add(six);
        c.add(six);
        c.add(six);

        System.out.println("Number of distinct objects: " + c.size());

        System.out.println("Frequency of different objects: ");

        for (Map.Entry<Object, Integer> entry : c.entrySet()) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="7555564" questionTitle="What is the recommended way to make a numeric TextField in JavaFX?">
<Answer><![CDATA[import java.text.DecimalFormatSymbols;
import java.util.regex.Pattern;

import javafx.beans.NamedArg;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.TextFormatter.Change;

public class TextFieldValidator {

    private static final String CURRENCY_SYMBOL   = DecimalFormatSymbols.getInstance().getCurrencySymbol();
    private static final char   DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance().getDecimalSeparator();

    private final Pattern       INPUT_PATTERN;

    public TextFieldValidator(@NamedArg("modus") ValidationModus modus, @NamedArg("countOf") int countOf) {
        this(modus.createPattern(countOf));
    }

    public TextFieldValidator(@NamedArg("regex") String regex) {
        this(Pattern.compile(regex));
    }

    public TextFieldValidator(Pattern inputPattern) {
        INPUT_PATTERN = inputPattern;
    }

    public static TextFieldValidator maxFractionDigits(int countOf) {
        return new TextFieldValidator(maxFractionPattern(countOf));
    }

    public static TextFieldValidator maxIntegers(int countOf) {
        return new TextFieldValidator(maxIntegerPattern(countOf));
    }

    public static TextFieldValidator integersOnly() {
        return new TextFieldValidator(integersOnlyPattern());
    }

    public TextFormatter<Object> getFormatter() {
        return new TextFormatter<>(this::validateChange);
    }

    private Change validateChange(Change c) {
        if (validate(c.getControlNewText())) {
            return c;
        }
        return null;
    }

    public boolean validate(String input) {
        return INPUT_PATTERN.matcher(input).matches();
    }

    private static Pattern maxFractionPattern(int countOf) {
        return Pattern.compile("\\d*(\\" + DECIMAL_SEPARATOR + "\\d{0," + countOf + "})?");
    }

    private static Pattern maxCurrencyFractionPattern(int countOf) {
        return Pattern.compile("^\\" + CURRENCY_SYMBOL + "?\\s?\\d*(\\" + DECIMAL_SEPARATOR + "\\d{0," + countOf + "})?\\s?\\" +
                CURRENCY_SYMBOL + "?");
    }

    private static Pattern maxIntegerPattern(int countOf) {
        return Pattern.compile("\\d{0," + countOf + "}");
    }

    private static Pattern integersOnlyPattern() {
        return Pattern.compile("\\d*");
    }

    public enum ValidationModus {

        MAX_CURRENCY_FRACTION_DIGITS {
            @Override
            public Pattern createPattern(int countOf) {
                return maxCurrencyFractionPattern(countOf);
            }
        },

        MAX_FRACTION_DIGITS {
            @Override
            public Pattern createPattern(int countOf) {
                return maxFractionPattern(countOf);
            }
        },
        MAX_INTEGERS {
            @Override
            public Pattern createPattern(int countOf) {
                return maxIntegerPattern(countOf);
            }
        },

        INTEGERS_ONLY {
            @Override
            public Pattern createPattern(int countOf) {
                return integersOnlyPattern();
            }
        };

        public abstract Pattern createPattern(int countOf);
    }

}]]></Answer>
<Answer><![CDATA[public class NumberTextField extends TextField
{

    @Override
    public void replaceText(int start, int end, String text)
    {
        if (validate(text))
        {
            super.replaceText(start, end, text);
        }
    }

    @Override
    public void replaceSelection(String text)
    {
        if (validate(text))
        {
            super.replaceSelection(text);
        }
    }

    private boolean validate(String text)
    {
        return text.matches("[0-9]*");
    }
}]]></Answer>
<Answer><![CDATA[DecimalFormat format = new DecimalFormat( "#.0" );
TextField field = new TextField();
field.setTextFormatter( new TextFormatter<>(c ->
{
    if ( c.getControlNewText().isEmpty() )
    {
        return c;
    }

    ParsePosition parsePosition = new ParsePosition( 0 );
    Object object = format.parse( c.getControlNewText(), parsePosition );

    if ( object == null || parsePosition.getIndex() <          c.getControlNewText().length() )
    {
        return null;
    }
    else
    {
        return c;
    }
}));]]></Answer>
<Answer><![CDATA[// fired by every text property change
textField.textProperty().addListener(
  (observable, oldValue, newValue) -> {
    // Your validation rules, anything you like
      // (! note 1 !) make sure that empty string (newValue.equals("")) 
      //   or initial text is always valid
      //   to prevent inifinity cycle
    // do whatever you want with newValue

    // If newValue is not valid for your rules
    ((StringProperty)observable).setValue(oldValue);
      // (! note 2 !) do not bind textProperty (textProperty().bind(someProperty))
      //   to anything in your code.  TextProperty implementation
      //   of StringProperty in TextFieldControl
      //   will throw RuntimeException in this case on setValue(string) call.
      //   Or catch and handle this exception.

    // If you want to change something in text
      // When it is valid for you with some changes that can be automated.
      // For example change it to upper case
    ((StringProperty)observable).setValue(newValue.toUpperCase());
  }
);]]></Answer>
<Answer><![CDATA[// helper text field subclass which restricts text input to a given range of natural int numbers
// and exposes the current numeric int value of the edit box as a value property.
class IntField extends TextField {
  final private IntegerProperty value;
  final private int minValue;
  final private int maxValue;

  // expose an integer value property for the text field.
  public int  getValue()                 { return value.getValue(); }
  public void setValue(int newValue)     { value.setValue(newValue); }
  public IntegerProperty valueProperty() { return value; }

  IntField(int minValue, int maxValue, int initialValue) {
    if (minValue > maxValue) 
      throw new IllegalArgumentException(
        "IntField min value " + minValue + " greater than max value " + maxValue
      );
    if (maxValue < minValue) 
      throw new IllegalArgumentException(
        "IntField max value " + minValue + " less than min value " + maxValue
      );
    if (!((minValue <= initialValue) && (initialValue <= maxValue))) 
      throw new IllegalArgumentException(
        "IntField initialValue " + initialValue + " not between " + minValue + " and " + maxValue
      );

    // initialize the field values.
    this.minValue = minValue;
    this.maxValue = maxValue;
    value = new SimpleIntegerProperty(initialValue);
    setText(initialValue + "");

    final IntField intField = this;

    // make sure the value property is clamped to the required range
    // and update the field's text to be in sync with the value.
    value.addListener(new ChangeListener<Number>() {
      @Override public void changed(ObservableValue<? extends Number> observableValue, Number oldValue, Number newValue) {
        if (newValue == null) {
          intField.setText("");
        } else {
          if (newValue.intValue() < intField.minValue) {
            value.setValue(intField.minValue);
            return;
          }

          if (newValue.intValue() > intField.maxValue) {
            value.setValue(intField.maxValue);
            return;
          }

          if (newValue.intValue() == 0 && (textProperty().get() == null || "".equals(textProperty().get()))) {
            // no action required, text property is already blank, we don't need to set it to 0.
          } else {
            intField.setText(newValue.toString());
          }
        }
      }
    });

    // restrict key input to numerals.
    this.addEventFilter(KeyEvent.KEY_TYPED, new EventHandler<KeyEvent>() {
      @Override public void handle(KeyEvent keyEvent) {
        if (!"0123456789".contains(keyEvent.getCharacter())) {
          keyEvent.consume();
        }
      }
    });

    // ensure any entered values lie inside the required range.
    this.textProperty().addListener(new ChangeListener<String>() {
      @Override public void changed(ObservableValue<? extends String> observableValue, String oldValue, String newValue) {
        if (newValue == null || "".equals(newValue)) {
          value.setValue(0);
          return;
        }

        final int intValue = Integer.parseInt(newValue);

        if (intField.minValue > intValue || intValue > intField.maxValue) {
          textProperty().setValue(oldValue);
        }

        value.set(Integer.parseInt(textProperty().get()));
      }
    });
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="6998551" questionTitle="Setting font color of JavaFX TableView Cells?">
<Answer><![CDATA[package tablecelltextcolorexample;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Callback;

/**
 *
 * @author jKaufmann
 */
public class TableCellTextColorExample extends Application {
public static class TableData {
    SimpleStringProperty one,two,three;
    public TableData(String one, String two, String three) {
        this.one = new SimpleStringProperty(one);
        this.two = new SimpleStringProperty(two);
        this.three = new SimpleStringProperty(three);
    }
    public String getOne() {
        return one.get();
    }

    public void setOne(String one) {
        this.one.set(one);
    }

    public String getThree() {
        return three.get();
    }

    public void setThree(String three) {
        this.three.set(three);
    }

    public String getTwo() {
        return two.get();
    }

    public void setTwo(String two) {
        this.two.set(two);
    }

} 
/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    Application.launch(args);
}

@Override
public void start(Stage stage) {
    VBox vbox = new VBox();
    Scene scene = new Scene(vbox, 200, 200);
    stage.setTitle("Table View - Change color of a particular column");
    stage.setWidth(400);
    stage.setHeight(500);


    TableView<TableData> myTable = new TableView<TableData>();
    ObservableList<TableData> myTableData = FXCollections.observableArrayList(
            new TableData("data", "data", "data"),
            new TableData("data", "data", "data"),
            new TableData("Name the song","867-5309","SomeEmail@gmail.com"));  

    TableColumn firstColumn = new TableColumn("First Column"); 
    firstColumn.setCellValueFactory(new PropertyValueFactory<TableData,String>("one"));

    TableColumn secondColumn = new TableColumn("Second Column"); 
    secondColumn.setCellValueFactory(new PropertyValueFactory<TableData,String>("two"));

    TableColumn thirdColumn = new TableColumn("Third Column");  
    thirdColumn.setCellValueFactory(new PropertyValueFactory<TableData,String>("three"));

    // ** The TableCell class has the method setTextFill(Paint p) that you 
    // ** need to override the text color
    //   To obtain the TableCell we need to replace the Default CellFactory 
    //   with one that returns a new TableCell instance, 
    //   and @Override the updateItem(String item, boolean empty) method.
    //
    thirdColumn.setCellFactory(new Callback<TableColumn, TableCell>() {
        public TableCell call(TableColumn param) {
            return new TableCell<TableData, String>() {

                @Override
                public void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (!isEmpty()) {
                        this.setTextFill(Color.RED);
                        // Get fancy and change color based on data
                        if(item.contains("@")) 
                            this.setTextFill(Color.BLUEVIOLET);
                        setText(item);
                    }
                }
            };
        }
    });

    myTable.setItems(myTableData); 
    myTable.getColumns().addAll(firstColumn, secondColumn, thirdColumn);

    vbox.getChildren().addAll(myTable);
    VBox.setVgrow(myTable, Priority.ALWAYS);

    stage.setScene(scene);
    stage.show();
}
}]]></Answer>
<Answer><![CDATA[// Method for displaying data in table
    protected void displayDataInTable(){
        tblColID.setCellValueFactory(new PropertyValueFactory<Person, String>("id"));

        // Table cell coloring
        tblColID.setCellFactory(new Callback<TableColumn<Person, String>, TableCell<Person, String>>() {
            @Override
            public TableCell<Person, String> call(TableColumn<Person, String> param) {
                return new TableCell<Person, String>() {

                    @Override
                    public void updateItem(String item, boolean empty) {
                        super.updateItem(item, empty);
                        if (!isEmpty()) {
                            this.setTextFill(Color.RED);
                            // Get fancy and change color based on data
                            if(item.contains("@")) 
                                this.setTextFill(Color.BLUEVIOLET);
                            setText(item);

                        }
                    }

                };
            }
        });]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="6948427" questionTitle="Can I implement Hibernate (JSR 303) method validation with apache wink (JAX/RS)">
<Answer><![CDATA[// Get Method Validator from hibernate 
   MethodValidator validator = Validation.byProvider(HibernateValidator.class).configure()
            .buildValidatorFactory().getValidator().unwrap(
                    MethodValidator.class);

    // Extract the method parameters, object instance and method metadata from the JAX/RS internals.
    Method javaMethod = null;
    Object instance = null;
    Object[] parameters = null;
    SearchResult searchResult = context.getAttribute(SearchResult.class);

    javaMethod = searchResult.getMethod().getMetadata()
            .getReflectionMethod();

    parameters = searchResult.getInvocationParameters();
    instance = searchResult.getResource().getInstance(context);

    // Use all this to perform validation...
    Set<MethodConstraintViolation<Object>> violations = validator
            .validateAllParameters(instance, javaMethod, parameters);
    if (!violations.isEmpty()) {
         // do something with the violations here 
    }]]></Answer>
<Answer><![CDATA[@Interceptor
public class ValidationInterceptor {

    Validator validator = Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory().getValidator();

    @AroundInvoke
    public Object validate(InvocationContext ctx) throws Exception {
        Object[] parameters = ctx.getParameters();
        Set<ConstraintViolation<Object>> validateResult = new HashSet<>();

        for (Object parameter : parameters) {
            Set<ConstraintViolation<Object>> validateParam = validator.validate(parameter);
            validateResult.addAll(validateParam);
        }
        if (!validateResult.isEmpty()) {
            throw new RestValidationException(validateResult);
        }
        return ctx.proceed();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="6469751" questionTitle="Testing an EJB with JUnit">
<Answer><![CDATA[public class MyCommentServiceUnitTest {
    CommentService commentService;
    EntityManager entityManager;

    @Before
    public void setUp() {
        commentService = new CommentService();

        entityManager = mock(EntityManager.class);
        commentService.setEm(entityManager); // inject our stubbed entity manager
    }

    @Test
    public void testFindAll() {
        // stub the entity manager to return a meaningful result when somebody asks
        // for the FIND_ALL named query
        Query query = mock(Query.class);
        when(entityManager.createNamedQuery(Comment.FIND_ALL, Comment.class)).thenReturn(query);
        // stub the query returned above to return a meaningful result when somebody
        // asks for the result list
        List<Comment> dummyResult = new LinkedList<Comment>();
        when(query.getResultList()).thenReturn(dummyResult);

        // let's call findAll() and see what it does
        List<Comment> result = commentService.findAll();

        // did it request the named query?
        verify(entityManager).createNamedQuery(Comment.FIND_ALL, Comment.class);
        // did it ask for the result list of the named query?
        verify(query).getResultList();
        // did it return the result list of the named query?
        assertSame(dummyResult, result);

        // success, it did all of the above!
    }
}]]></Answer>
<Answer><![CDATA[public class CommentTest extends TestCase {

     private Context  ctx;
     private EJBContainer ejbContainer;

    @BeforeClass
    public  void setUp() {
        ejbContainer = EJBContainer.createEJBContainer();
        System.out.println("Opening the container" );
        ctx = ejbContainer.getContext();
    }

    @AfterClass
    public  void tearDown() {
        ejbContainer.close();
        System.out.println("Closing the container" );
    }

    public void testApp() throws NamingException {

        CommentService converter = (CommentService) ctx.lookup("java:global/classes/CommentService");
        assertNotNull(converter);

        Comment t = new Comment();
        converter.create(t);
        t = new Comment();
        converter.create(t);
        t = new Comment();
        converter.create(t);
        t = new Comment();
        converter.create(t);

        Collection<Comment> ts = converter.getAll();

        assertEquals(4, ts.size());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="6149919" questionTitle="Is it safe to start a new thread in a JSF managed bean?">
<Answer><![CDATA[import javax.ejb.embeddable.EJBContainer;
import javax.naming.Context;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class JobProcessorTest extends TestCase {

    public void test() throws Exception {

        final Context context = EJBContainer.createEJBContainer().getContext();

        final JobProcessor processor = (JobProcessor) context.lookup("java:global/async-methods/JobProcessor");

        final long start = System.nanoTime();

        // Queue up a bunch of work
        final Future<String> red = processor.addJob("red");
        final Future<String> orange = processor.addJob("orange");
        final Future<String> yellow = processor.addJob("yellow");
        final Future<String> green = processor.addJob("green");
        final Future<String> blue = processor.addJob("blue");
        final Future<String> violet = processor.addJob("violet");

        // Wait for the result -- 1 minute worth of work
        assertEquals("blue", blue.get());
        assertEquals("orange", orange.get());
        assertEquals("green", green.get());
        assertEquals("red", red.get());
        assertEquals("yellow", yellow.get());
        assertEquals("violet", violet.get());

        // How long did it take?
        final long total = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start);

        // Execution should be around 9 - 21 seconds
        assertTrue("" + total, total > 9);
        assertTrue("" + total, total < 21);
    }
}]]></Answer>
<Answer><![CDATA[@Named
@RequestScoped // Or @ViewScoped
public class Bean {

    private Future<List<Entity>> asyncEntities;

    @EJB
    private EntityService entityService;

    @PostConstruct
    public void init() {
        asyncEntities = entityService.asyncList();
        // ... (this code will immediately continue without waiting)
    }

    public List<Entity> getEntities() {
        try {
            return asyncEntities.get();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new FacesException(e);
        } catch (ExecutionException e) {
            throw new FacesException(e);
        }
    }
}]]></Answer>
<Answer><![CDATA[ExecutorService executor = Executors.newFixedThreadPool(1);

@EJB
private IMaterialSvc materialSvc;

private void updateMaterial(Material material, String status,  Location position) {

    executor.execute(new Runnable() {
        public void run() {
            synchronized (position) {
                // TODO update material in audit? do we need materials in audit?
                int index = position.getMaterials().indexOf(material);
                Material m = materialSvc.getById(material.getId());
                m.setStatus(status);
                m = materialSvc.update(m);
                if (index != -1) {
                    position.getMaterials().set(index, m);
                }

            }
        }
    });

}

@PreDestroy
public void destory() {
    executor.shutdown();
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5681724" questionTitle="Java: connecting to db to fetch data">
<Answer><![CDATA[class Database {

    private Connection conn;

    public Database() {
        connect();
    }

    private void connect() {
        Class.forName("com.mysql.jdbc.Driver");
        conn = DriverManager.getConnection(dbUrl);
    }

    public void close() {
        conn.close();
    }

    private ResultSet readSth() {
        statement = conn.createStatement();
        return statement.executeQuery("select * from FEEDBACK.COMMENTS");
    }

    private void doSth() {
        // do sth else with conn
    }

}]]></Answer>
<Answer><![CDATA[import java.sql.*;
import java.util.Properties;

public class Getconnection{
    private static final String dbClassName = "com.mysql.jdbc.Driver";
    private static final String CONNECTION ="jdbc:mysql://127.0.0.1/dbUserData";
    private static Properties p = new Properties();
    public static Connection getConnection(){
        p.put("user","root");
        p.put("password","library");
        try{
            Class.forName(dbClassName);
            Connection con=DriverManager.getConnection(CONNECTION,p);
            return con;
        }
        catch(Exception ie){
            ie.printStackTrace();
            return null;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5542382" questionTitle="What are the conventional locations for for JSPs, JavaScript, CSS, Images in Maven web projects?">
<Answer><![CDATA[|-- pom.xml  
 `-- src
     `-- main
         |-- java
         |   `-- com
         |       `-- example
         |           `-- projects
         |               `-- SampleAction.java
         |-- resources
         |   `-- images
         |       `-- sampleimage.jpg
         |   `-- js
         |       `-- scripts.js
         |   `-- css
         |       `-- styles.css
         `-- webapp
             |-- WEB-INF
             |   `-- web.xml
             |-- index.jsp
             `-- jsp
                 `-- websource.jsp]]></Answer>
<Answer><![CDATA[<?xml version="1.0" encoding="windows-1252"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

  <!-- Use @Component annotations for bean definitions -->
  <context:component-scan base-package="form"/>

  <!-- Use @Controller annotations for MVC controller definitions -->
  <mvc:annotation-driven />

  <mvc:resources mapping="/resources/**" location="/resources/" />

  <!-- Add JPA support -->
  <bean id="emf" class=
       "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
     <property name="loadTimeWeaver">
        <bean class=
 "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
      </property>
  </bean>

  <!-- Add Transaction support -->
  <bean id="myTxManager"
     class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="emf"/>
  </bean>

  <!-- Use @Transaction annotations for managing transactions -->
  <tx:annotation-driven transaction-manager="myTxManager" />

  <!-- View resolver -->
 <bean class=
     "org.springframework.web.servlet.view.InternalResourceViewResolver">
   <property name="prefix" value="/WEB-INF/"/>
 </bean>

</beans>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5509606" questionTitle="Sessions in struts2 application">
<Answer><![CDATA[public class LoginInterceptor extends AbstractInterceptor {
    @Override
    public String intercept(final ActionInvocation invocation) throws Exception {
        Map<String, Object> session = ActionContext.getContext().getSession();

        // sb: feel free to change this to some other type of an object which
        // represents that the user is logged in. for this example, I am using
        // an integer which would probably represent a primary key that I would
        // look the user up by with Hibernate or some other mechanism.
        Integer userId = (Integer) session.get("userId");

        // sb: if the user is already signed-in, then let the request through.
        if (userId != null) {
            return invocation.invoke();
        }

        Object action = invocation.getAction();

        // sb: if the action doesn't require sign-in, then let it through.
        if (!(action instanceof LoginRequired)) {
            return invocation.invoke();
        }

        // sb: if this request does require login and the current action is
        // not the login action, then redirect the user
        if (!(action instanceof LoginAction)) {
            return "loginRedirect";
        }

        // sb: they either requested the login page or are submitting their
        // login now, let it through
        return invocation.invoke();
    }
}]]></Answer>
<Answer><![CDATA[import org.apache.struts2.interceptor.SessionAware;

import com.opensymphony.xwork2.ActionSupport;

public class LogingEx extends ActionSupport implements SessionAware{
    private static final long serialVersionUID = 1L;

    private String stuname,stuage,country;
    private int stumarks;
    Map m;

    public String getStuname() {
        return stuname;
    }
    public void setStuname(String stuname) {
        this.stuname = stuname;
    }

    public String getStuage() {
        return stuage;
    }
    public void setStuage(String stuage) {
        this.stuage = stuage;
    }

    public String getCountry() {
        return country;
    }
    public void setCountry(String country) {
        this.country = country;
    }

    public int getStumarks() {
        return stumarks;
    }
    public void setStumarks(int stumarks) {
        this.stumarks = stumarks;
    }

    public void setSession(Map m)
    {
        this.m=m;
    }

    public String execute()
    {
        m.put("a",stuname);
        m.put("b", stuage);
        m.put("c",stumarks);
        m.put("d",country);

        return SUCCESS;
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5484404" questionTitle="Why this dataTable sortBy function does not work?">
<Answer><![CDATA[<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.prime.com.tr/ui">
    <f:view contentType="text/html" >
        <h:head>
            <title>PrimeFacesTest</title>
        </h:head>
        <h:body>
            <h:form>
                <p:dataTable var="garbage" value="#{indexBean.allGarbage}"
                             dynamic="true" paginator="true" paginatorPosition="bottom" rows="4"
                             paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"
                             rowsPerPageTemplate="5,10,15">

                    <p:column filterBy="#{garbage.filename}" filterMatchMode="startsWith" sortBy="#{garbage.filename}" >
                        <f:facet name="header">
                            <h:outputText value="Filename" />
                        </f:facet>
                        <h:outputText value="#{garbage.filename}" />
                    </p:column>

                    <p:column filterBy="#{garbage.description}" filterMatchMode="contains"   >
                        <f:facet name="header">
                            <h:outputText value="Description" />
                        </f:facet>
                        <h:outputText value="#{garbage.description}" />
                    </p:column>

                    <p:column sortBy="#{garbage.uploadDate}" parser="string">
                        <f:facet name="header">
                            <h:outputText value="Upload date" />
                        </f:facet>
                        <h:outputText value="#{garbage.uploadDate}" />
                    </p:column>
                </p:dataTable>

            </h:form>

        </h:body>
    </f:view>
</html>]]></Answer>
<Answer><![CDATA[@ManagedBean
@ViewScoped
public class IndexBean implements Serializable {

private ArrayList<Garbage> allGarbage;

@PostConstuct
public init() 
{
    allGarbage = new ArrayList<Garbage>();
    allGarbage.add(new Garbage("Abc", "Abc", "28/03/2011 12:13:32"));
    allGarbage.add(new Garbage("Bbc;", "bbc", "28/03/2011 12:14:32"));
    allGarbage.add(new Garbage("Cbc", "Cbc", "28/03/2011 12:17:32"));
    allGarbage.add(new Garbage("1Abc", "1Abc", "28/03/2011 12:13:32"));
    allGarbage.add(new Garbage("2Bbc;", "2bbc", "28/03/2011 12:14:32"));
    allGarbage.add(new Garbage("3Cbc", "3Cbc", "28/03/2011 12:17:32"));
    allGarbage.add(new Garbage("4Abc", "4Abc", "28/03/2011 12:13:32"));
    allGarbage.add(new Garbage("5Bbc;", "5bbc", "28/03/2011 12:14:32"));
    allGarbage.add(new Garbage("6Cbc", "6Cbc", "28/03/2011 12:17:32"));
}

public ArrayList<Garbage> getAllGarbage() 
{
    return allGarbage;
}

public void setAllgarbage(ArrayList<Garbage> garbage)
{
    this.allGarbage = garbage;
}

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5244416" questionTitle="how to stop servlet?">
<Answer><![CDATA[public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException{
    String param1 = request.getParameter("param1");
    String param2 = request.getParameter("param2");

    if(!isValidInput(param1, param2)){
        PrintWriter out = response.getWriter();
        out.write("invalid input");
        return;
    }

    //if nothing's wrong with the input, do this and that

}


private boolean isValidInput(String param1, String param2){
    boolean fail = false;
    //validate input and return true/false

}]]></Answer>
<Answer><![CDATA[public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException{
    String param1 = request.getParameter("param1");
    String param2 = request.getParameter("param2");

    if (! validateInput(param1, param2, request, response)){
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        //Or you can use this instead... 
        //response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        //PrintWriter out = response.getWriter();
        //out.write("invalid input");
        return;
    }
    //if nothing's wrong with the input, do this and that
}




private boolean validateInput(String param1, String param2, HttpServletRequest request, HttpServletResponse response) throws IOException{
    boolean success = false;

    //validate input blah blah blah

    return success;
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5161466" questionTitle="How do I use the Jersey JSON POJO support?">
<Answer><![CDATA[package test;

import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class SampleJaxbObject {

    private String field1;

    private Integer field2;

    private String field3;

    public String getField1() {
        return field1;
    }

    public void setField1(String field1) {
        this.field1 = field1;
    }

    public Integer getField2() {
        return field2;
    }

    public void setField2(Integer field2) {
        this.field2 = field2;
    }

    public String getField3() {
        return field3;
    }

    public void setField3(String field3) {
        this.field3 = field3;
    }


}]]></Answer>
<Answer><![CDATA[@Provider
public class JAXBContextResolver implements ContextResolver<JAXBContext> {
    private final static String ENTITY_PACKAGE = "package.goes.here";
    private final static JAXBContext context;
    static {
        try {
            context = new JAXBContextAdapter(new JSONJAXBContext(JSONConfiguration.mapped().rootUnwrapping(false).build(), ENTITY_PACKAGE));
        } catch (final JAXBException ex) {
            throw new IllegalStateException("Could not resolve JAXBContext.", ex);
        }
    }

    public JAXBContext getContext(final Class<?> type) {
        try {
            if (type.getPackage().getName().contains(ENTITY_PACKAGE)) {
                return context;
            }
        } catch (final Exception ex) {
            // trap, just return null
        }
        return null;
    }

    public static final class JAXBContextAdapter extends JAXBContext {
        private final JAXBContext context;

        public JAXBContextAdapter(final JAXBContext context) {
            this.context = context;
        }

        @Override
        public Marshaller createMarshaller() {
            Marshaller marshaller = null;
            try {
                marshaller = context.createMarshaller();
                marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            } catch (final PropertyException pe) {
                return marshaller;
            } catch (final JAXBException jbe) {
                return null;
            }
            return marshaller;
        }

        @Override
        public Unmarshaller createUnmarshaller() throws JAXBException {
            final Unmarshaller unmarshaller = context.createUnmarshaller();
            unmarshaller.setEventHandler(new DefaultValidationEventHandler());
            return unmarshaller;
        }

        @Override
        public Validator createValidator() throws JAXBException {
            return context.createValidator();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5093514" questionTitle="JAXB XJC Possible to suppress comment creation in generated classes?">
<Answer><![CDATA[<plugin>
    <groupId>com.google.code.maven-replacer-plugin</groupId>
    <artifactId>maven-replacer-plugin</artifactId>
    <version>1.3.8</version>
    <executions>
        <execution> 
            <phase>prepare-package</phase>                          
            <goals>
                <goal>replace</goal>
            </goals>
        </execution>
    </executions>
    <configuration>                         
        <includes>                              
            <include>src/main/java/jaxb/*.java</include>            
        </includes>
        <token>^// Generated on.*$</token>
        <value>// Generated on: [TEXT REMOVED by maven-replacer-plugin]</value>                         
        <regexFlags>
            <regexFlag>MULTILINE</regexFlag>
        </regexFlags>
    </configuration>
</plugin>]]></Answer>
<Answer><![CDATA[...
<plugins>
    <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jaxb2-maven-plugin</artifactId>
        <version>2.3.1</version>
        <executions>
            <execution>
                <id>xjc</id>
                <goals>
                    <goal>xjc</goal>
                </goals>
            </execution>
        </executions>
        <configuration>
            <target>2.1</target>
            <sources>
                <source>FirstXSD.xsd</source>
                <source>SecondXSD.xsd</source>
            </sources>
            <xjbSources>
                <xjbSource>OptionalBindings.xjb</xjbSource>
            </xjbSources>
            <noGeneratedHeaderComments>true</noGeneratedHeaderComments>
        </configuration>
        <dependencies>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-xjc</artifactId>
                <version>${jaxb.version}</version>
            </dependency>
        </dependencies>
    </plugin>
</plugins>
...]]></Answer>
<Answer><![CDATA[<plugin>
    <groupId>com.google.code.maven-replacer-plugin</groupId>
    <artifactId>maven-replacer-plugin</artifactId>
    <executions>
      <execution>
        <phase>prepare-package</phase>
          <goals>
            <goal>replace</goal>
          </goals>                   
        </execution>
      </executions>
      <configuration>
        <!-- assumes your xjc is putting source code here -->
        <includes>
          <include>src/main/java/**/*.java</include>
        </includes>
        <regex>true</regex>
        <regexFlags>
          <regexFlag>MULTILINE</regexFlag>
        </regexFlags>
        <replacements>
          <replacement>
            <token>(^//.*\u000a|^\u000a)*^package</token>
            <value>// your new comment
package</value>
          </replacement>         
        </replacements>
      </configuration>
   </plugin>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4832544" questionTitle="JPA 2 - Foreign key that only includes one field from a composite primary key?">
<Answer><![CDATA[@Entity
@Table(name = "province")
public class Province  implements Serializable {

@EmbeddedId
protected ProvincePK provincePK;

@Basic(optional = false)
@Column(name = "name")
private String name;

@MapsId(value = "country_code")
@JoinColumn(name = "country_code", referencedColumnName = "code")
@ManyToOne(optional = false)
private Country country;

}

@Embeddable
public class ProvincePK implements Serializable {

@Basic(optional = false)
@Column(name = "code")
private String code;

@Basic(optional = false)
@Column(name = "country_code")
private String country_code;
}

@Entity
@Table(name = "country")
public class Country  implements Serializable {

@Id
@Basic(optional = false)
@Column(name = "code")
private String code;

@Basic(optional = false)
@Column(name = "name")
private String name;

@OneToMany(cascade = CascadeType.ALL, mappedBy = "country")
private List<Province> provinces;
}]]></Answer>
<Answer><![CDATA[@Entity
@Table(name = "province")
@IdClass(ProvincePK.class)
public class Province extends DomainObjectBase implements Serializable {

    @Id
    @Basic(optional = false)
    @Column(name = "code")
    private String code;

    @Id
    @Basic(optional = false, insertable = false, updatable = false)
    @Column(name = "country_code")
    private String countryCode;


    @Basic(optional = false)
    @Column(name = "name")
    private String name;

    @JoinColumn(name = "country_code", referencedColumnName = "code")
    @ManyToOne
    private Country country;

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4756596" questionTitle="JPA / Hibernate unidirectional one-to-one mapping with shared primary key">
<Answer><![CDATA[@Entity
class Parent {
  @Id
  @Column(name = "parent_id")
  @GeneratedValue 
  Long parent_id;

  @OneToOne
  @PrimaryKeyJoinColumn(name="parent_id", referencedColumnName="child_id")
  public Child;
}

@Entity
class Child {
  @Id
  @Column(name = "child_id")
  Long child_id;

  @MapsId 
  @OneToOne
  @JoinColumn(name = "child_id")
  Parent parent;
}]]></Answer>
<Answer><![CDATA[@Entity
@Table(name = "PARENT")
public class Parent implements java.io.Serializable {       
    private Long parentId;
    private String message;
    private Child child;

    @Id
    @Column(name = "PARENT_ID", unique = true, nullable = false, precision = 22, scale = 0)
    @SequenceGenerator(name="pk_sequence", sequenceName="SEQ_PK_PARENT")
    @GeneratedValue(generator="pk_sequence", strategy=GenerationType.SEQUENCE)
    public Long getParentId() {
        return this.parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    @OneToOne (cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    public Child getTestOneToOneChild() {
        return this.child;
    }

    public void setTestOneToOneChild(Child child) {
        this.child = child;
    }


   @PostPersist
    public void initializeCandidateDetailID()
    {
        System.out.println("reached here");// for debugging purpose
        this.child.setChildId(parentId); // set child id here
        System.out.println("reached here"+Id); // for debugging purpose
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4449096" questionTitle="How to read request.getInputStream() multiple times">
<Answer><![CDATA[public class CustomHttpServletRequestWrapper extends HttpServletRequestWrapper {

private static final Logger logger = Logger.getLogger(CustomHttpServletRequestWrapper.class);
private final String body;

public CustomHttpServletRequestWrapper(HttpServletRequest request) {
    super(request);

    StringBuilder stringBuilder = new StringBuilder();  
    BufferedReader bufferedReader = null;  

    try {  
        InputStream inputStream = request.getInputStream(); 

        if (inputStream != null) {  
            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));  

            char[] charBuffer = new char[128];  
            int bytesRead = -1;  

            while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {  
                stringBuilder.append(charBuffer, 0, bytesRead);  
            }  
        } else {  
            stringBuilder.append("");  
        }  
    } catch (IOException ex) {  
        logger.error("Error reading the request body...");  
    } finally {  
        if (bufferedReader != null) {  
            try {  
                bufferedReader.close();  
            } catch (IOException ex) {  
                logger.error("Error closing bufferedReader...");  
            }  
        }  
    }  

    body = stringBuilder.toString();  
}

@Override  
public ServletInputStream getInputStream () throws IOException {          
    final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes());

    ServletInputStream inputStream = new ServletInputStream() {  
        public int read () throws IOException {  
            return byteArrayInputStream.read();  
        }  
    };

    return inputStream;  
} 
}]]></Answer>
<Answer><![CDATA[@Override
public void destroy() {

}

@Override
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,
        ServletException {
    final HttpServletRequest req = (HttpServletRequest) request;

    try {
        if (LOG.isDebugEnabled()) {
            final MultiReadHttpServletRequest wrappedRequest = new MultiReadHttpServletRequest(req);
            // debug payload info
            logPayLoad(wrappedRequest);
            chain.doFilter(wrappedRequest, response);
        } else {
            chain.doFilter(request, response);
        }
    } finally {
        LOG.info("end-of-process");
    }
}

private String getRemoteAddress(HttpServletRequest req) {
    String ipAddress = req.getHeader("X-FORWARDED-FOR");
    if (ipAddress == null) {
        ipAddress = req.getRemoteAddr();
    }
    return ipAddress;
}

private void logPayLoad(HttpServletRequest request) {
    final StringBuilder params = new StringBuilder();
    final String method = request.getMethod().toUpperCase();
    final String ipAddress = getRemoteAddress(request);
    final String userAgent = request.getHeader("User-Agent");
    LOG.debug(String.format("============debug request=========="));
    LOG.debug(String.format("Access from ip:%s;ua:%s", ipAddress, userAgent));
    LOG.debug(String.format("Method : %s requestUri %s", method, request.getRequestURI()));
    params.append("Query Params:").append(System.lineSeparator());
    Enumeration<String> parameterNames = request.getParameterNames();

    for (; parameterNames.hasMoreElements();) {
        String paramName = parameterNames.nextElement();
        String paramValue = request.getParameter(paramName);
        if ("password".equalsIgnoreCase(paramName) || "pwd".equalsIgnoreCase(paramName)) {
            paramValue = "*****";
        }
        params.append("---->").append(paramName).append(": ").append(paramValue).append(System.lineSeparator());
    }
    LOG.debug(params.toString());
    /** request body */

    if ("POST".equals(method) || "PUT".equals(method)) {
        try {
            LOG.debug(IOUtils.toString(request.getInputStream()));
        } catch (IOException e) {
            LOG.error(e.getMessage(), e);
        }
    }
    LOG.debug(String.format("============End-debug-request=========="));
}

@Override
public void init(FilterConfig arg0) throws ServletException {

}]]></Answer>
<Answer><![CDATA[public class HttpServletRequestWrapper extends javax.servlet.http.HttpServletRequestWrapper {

private final byte[] body;

public HttpServletRequestWrapper(HttpServletRequest request)
        throws IOException {
    super(request);
    body = StreamUtil.readBytes(request.getReader(), "UTF-8");
}

@Override
public BufferedReader getReader() throws IOException {
    return new BufferedReader(new InputStreamReader(getInputStream()));
}

@Override
public ServletInputStream getInputStream() throws IOException {
    final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body);
    return new ServletInputStream() {

        @Override
        public int read() throws IOException {
            return byteArrayInputStream.read();
        }

        @Override
        public boolean isFinished() {
            return false;
        }

        @Override
        public boolean isReady() {
            return false;
        }

        @Override
        public void setReadListener(ReadListener arg0) {
        }
    };
}]]></Answer>
<Answer><![CDATA[private class MyHttpServletRequestWrapper extends HttpServletRequestWrapper {

    private byte[] body;

    public MyHttpServletRequestWrapper(HttpServletRequest request) {
        super(request);
        try {
            body = IOUtils.toByteArray(request.getInputStream());
        } catch (IOException ex) {
            body = new byte[0];
        }
    }

    @Override
    public ServletInputStream getInputStream() throws IOException {
        return new ServletInputStream() {
            ByteArrayInputStream bais = new ByteArrayInputStream(body);

            @Override
            public int read() throws IOException {
                return bais.read();
            }
        };
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4332467" questionTitle="Mapping array with Hibernate">
<Answer><![CDATA[public class ArraySqlTypeDescriptor 
    implements SqlTypeDescriptor {

    public static final ArraySqlTypeDescriptor INSTANCE = 
        new ArraySqlTypeDescriptor();

    @Override
    public int getSqlType() {
        return Types.ARRAY;
    }

    @Override
    public boolean canBeRemapped() {
        return true;
    }

    @Override
    public <X> ValueBinder<X> getBinder(
        JavaTypeDescriptor<X> javaTypeDescriptor) {
        return new BasicBinder<X>( javaTypeDescriptor, this) {
            @Override
            protected void doBind(
                    PreparedStatement st, 
                    X value, 
                    int index, 
                    WrapperOptions options
                ) throws SQLException {

                AbstractArrayTypeDescriptor<Object> abstractArrayTypeDescriptor = 
                    (AbstractArrayTypeDescriptor<Object>) 
                        javaTypeDescriptor;

                st.setArray( 
                    index, 
                    st.getConnection().createArrayOf(
                        abstractArrayTypeDescriptor.getSqlArrayType(),
                        abstractArrayTypeDescriptor.unwrap( 
                            value, 
                            Object[].class, 
                            options 
                        )
                    )
                );
            }

            @Override
            protected void doBind(
                    CallableStatement st, 
                    X value, 
                    String name, 
                    WrapperOptions options
                ) throws SQLException {
                throw new UnsupportedOperationException( 
                    "Binding by name is not supported!"
                );
            }
        };
    }

    @Override
    public <X> ValueExtractor<X> getExtractor(
        final JavaTypeDescriptor<X> javaTypeDescriptor) {
        return new BasicExtractor<X>(javaTypeDescriptor, this) {
            @Override
            protected X doExtract(
                    ResultSet rs, 
                    String name, 
                    WrapperOptions options
                ) throws SQLException {
                return javaTypeDescriptor.wrap(
                    rs.getArray(name), 
                    options
                );
            }

            @Override
            protected X doExtract(
                    CallableStatement statement, 
                    int index, 
                    WrapperOptions options
                ) throws SQLException {
                return javaTypeDescriptor.wrap(
                    statement.getArray(index), 
                    options
                );
            }

            @Override
            protected X doExtract(
                    CallableStatement statement, 
                    String name, 
                    WrapperOptions options
                ) throws SQLException {
                return javaTypeDescriptor.wrap(
                    statement.getArray(name), 
                    options
                );
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[package com.usertype.IntArrayUserType;

public class IntArrayUserType implements UserType {

protected static final int[] SQL_TYPES = { Types.ARRAY };

@Override
public Object assemble(Serializable cached, Object owner) throws HibernateException {
    return this.deepCopy(cached);
}

@Override
public Object deepCopy(Object value) throws HibernateException {
    return value;
}

@Override
public Serializable disassemble(Object value) throws HibernateException {
    return (Integer[]) this.deepCopy(value);
}

@Override
public boolean equals(Object x, Object y) throws HibernateException {

    if (x == null) {
        return y == null;
    }
    return x.equals(y);
}

@Override
public int hashCode(Object x) throws HibernateException {
    return x.hashCode();
}

@Override
public boolean isMutable() {
    return true;
}

@Override
public Object nullSafeGet(ResultSet resultSet, String[] names, SessionImplementor session, Object owner)
        throws HibernateException, SQLException {
    if (resultSet.wasNull()) {
        return null;
    }
    if(resultSet.getArray(names[0]) == null){
        return new Integer[0];
    }

    Array array = resultSet.getArray(names[0]);
    Integer[] javaArray = (Integer[]) array.getArray();
    return javaArray;
}

@Override
public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session)
        throws HibernateException, SQLException {
    Connection connection = statement.getConnection();
    if (value == null) {
        statement.setNull(index, SQL_TYPES[0]);
    } else {
        Integer[] castObject = (Integer[]) value;
        Array array = connection.createArrayOf("integer", castObject);
        statement.setArray(index, array);
    }
}

@Override
public Object replace(Object original, Object target, Object owner)       throws HibernateException {
    return original;
}

@Override
public Class<Integer[]> returnedClass() {
    return Integer[].class;
}

@Override
public int[] sqlTypes() {
    return new int[] { Types.ARRAY };
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4303514" questionTitle="Generic CDI producer method not working as expected">
<Answer><![CDATA[// the wrapper class
    public class Wrapper<T> {
      public final T bean;
      public Wrapper(T bean){
        this.bean = bean;
      }
    }

    // the producer inside some class
    @Produces
    public <T> Wrapper<T> create(InjectionPoint p){
      // with parameter 'p', it is possible retrieve the class type of <T>, at runtime
    }


    // the bean example 1
    public class BeanA {
      public void doFoo(){
        // ...
      }
    }
    // the bean example 2
    public class BeanB {
      public void doBar(){
        // ...
      }
    }


    // the class that uses the produced beans
    public class SomeBean{

//// There on producer method, do you can retrieve the Class object of BeanA and BeanB, from type parameters of Wrapper.

      @Inject
      private Wrapper<BeanA> containerA;
      @Inject
      private Wrapper<BeanB> containerB;

      public void doSomeThing(){
         containerA.doFoo();
         containerB.doBar();
      }

    }]]></Answer>
<Answer><![CDATA[public class TestProducer {

  @Produces @TestQualifier
  public String createString(InjectionPoint ip) {
    if(something) {
      return "a String";
    } else {
      // Some other value
    }
  }

  @Produces @TestQualifier
  public int createInt(InjectionPoint ip) {
    if(something) {
      return 42;
    } else {
      // Some other value
    }
  }
// ...]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="4124831" questionTitle="How to do Rest Authentication with JAX-RS">
<Answer><![CDATA[<!-- Specifies what and how to protect *part* of a webapp -->
<security-constraint>

    <!-- WHAT TO PROTECT -->
    <web-resource-collection>
         <web-resource-name>employee-related-urls</web-resource-name>
         <!-- You might need to list other patterns too with more of these -->
         <url-pattern>/employee/*</url-pattern>
    </web-resource-collection>

    <!-- WHO IS ALLOWED IN -->
    <auth-constraint>
         <!-- I assume something sensible here! -->
         <role-name>employee</role-name>
    </auth-constraint>

    <!-- HOW TO PROTECT THE REQUESTS AND RESPONSES -->
    <user-data-constraint>
         <!-- Force HTTPS (or equivalent, in a formal sense) -->
         <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
</security-constraint>

<!-- HOW TO WORK OUT WHO IS ASKING -->
<login-config>
    <!-- This is how to specify BASIC HTTP auth; look up docs for OAuth yourself -->
    <auth-method>BASIC</auth-method>
    <!-- Omit the next element to use the container's default -->
    <realm-name>site</realm-name>
</login-config>]]></Answer>
<Answer><![CDATA[import java.util.Map;

import org.apache.cxf.message.Message;
import org.apache.cxf.phase.PhaseInterceptor;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;
import org.apache.cxf.configuration.security.AuthorizationPolicy;
import org.apache.cxf.interceptor.Interceptor;

import org.springframework.beans.factory.annotation.Required;

public class AuthenticatorInterceptor extends AbstractPhaseInterceptor<Message> {

    private Map<String,String> users;

    @Required
    public void setUsers(Map<String, String> users) {
        this.users = users;
    }

    public AuthenticatorInterceptor() {
        super(Phase.RECEIVE);
    }

    public void handleMessage(Message message) {

        AuthorizationPolicy policy = message.get(AuthorizationPolicy.class);

    if (policy == null) {
        System.out.println("User attempted to log in with no credentials");
        throw new RuntimeException("Denied");
        }

    String expectedPassword = users.get(policy.getUserName());
    if (expectedPassword == null || !expectedPassword.equals(policy.getPassword())) {
        throw new RuntimeException("Denied");
    }
    }

}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="3775747" questionTitle="Converting a Servlet to Struts2 Action Class">
<Answer><![CDATA[public class YourAction extends BaseAction {

    private static final long serialVersionUID = -6113083300296539328L;

    private static final Logger logger = Logger.getLogger(YourAction .class);

    private Bean bean;

    public String get() throws ApplicationException {
    try {
        this.setBean(getService().fetchBeanById(
                getHttpRequest().getParameter(
                "xxxx")));
    } catch (Exception e) {
        logger.error(new String[] { " Exception listing Comment ",
                e.toString() });
        throw new ApplicationException(e);
    }
        return SUCCESS;
    }

    public Bean getBean() {
        return bean;
    }

    public void setBean(Bean bean) {
        this.bean= bean;
    }
}]]></Answer>
<Answer><![CDATA[public class NewAction implements SessionAware {

  private Map theSession;
  private XXX xxx;

  public String execute() {
    Bean b = new Bean();
    b.setXXX(xxx);
    theSession.put(b);

    return "success";
  }

  public XXX getXXX() {
    return xxx;
  }

  public void setXXX(XXX xxx) {
    this.xxx = xxx;
  }

  public Map getSession() {
    return theSession;
  }

  public void setSession(Map session) {
    theSession = session;
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="3271659" questionTitle="Use Enum type as a value parameter for @RolesAllowed-Annotation">
<Answer><![CDATA[/**
 * empty interface which must be implemented by enums participating in
 * annotations of "type" @RolesAllowed.
 */
public interface RoleType {
    public String toString();
}

/** meta annotation to be applied to annotations that have enum values implementing RoleType. 
 *  the value() method should return an array of objects assignable to RoleType*.
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ANNOTATION_TYPE})
public @interface RolesAllowed { 
    /* deliberately empty */ 
}

@RolesAllowed
@Retention(RetentionPolicy.RUNTIME)
@Target({TYPE, METHOD})
public @interface AcademicRolesAllowed {
    public AcademicRoleType[] value();
}

public enum AcademicRoleType implements RoleType {
    STUDENT, TEACHER, DEANERY;
    @Override
    public String toString() {
        return name();
    }
}


public class RolesAllowedUtil {

    /** get the array of allowed RoleTypes for a given class **/
    public static List<RoleType> getRoleTypesAllowedFromAnnotations(
            Annotation[] annotations) {
        List<RoleType> roleTypesAllowed = new ArrayList<RoleType>();
        for (Annotation annotation : annotations) {
            if (annotation.annotationType().isAnnotationPresent(
                    RolesAllowed.class)) {
                RoleType[] roleTypes = getRoleTypesFromAnnotation(annotation);
                if (roleTypes != null)
                    for (RoleType roleType : roleTypes)
                        roleTypesAllowed.add(roleType);
            }
        }
        return roleTypesAllowed;
    }

    public static RoleType[] getRoleTypesFromAnnotation(Annotation annotation) {
        Method[] methods = annotation.annotationType().getMethods();
        for (Method method : methods) {
            String name = method.getName();
            Class<?> returnType = method.getReturnType();
            Class<?> componentType = returnType.getComponentType();
            if (name.equals("value") && returnType.isArray()
                    && RoleType.class.isAssignableFrom(componentType)) {
                RoleType[] features;
                try {
                    features = (RoleType[]) (method.invoke(annotation,
                            new Object[] {}));
                } catch (Exception e) {
                    throw new RuntimeException(
                            "Error executing value() method in "
                                    + annotation.getClass().getCanonicalName(),
                            e);
                }
                return features;
            }
        }
        throw new RuntimeException(
                "No value() method returning a RoleType[] type "
                        + "was found in annotation "
                        + annotation.getClass().getCanonicalName());
    }

}

public class RoleTypeTest {

    @AcademicRolesAllowed({DEANERY})
    public class DeaneryDemo {

    }

    @Test
    public void testDeanery() {
        List<RoleType> roleTypes = RolesAllowedUtil.getRoleTypesAllowedFromAnnotations(DeaneryDemo.class.getAnnotations());
        assertEquals(1, roleTypes.size());
    }
}]]></Answer>
<Answer><![CDATA[public enum RoleType {
    STUDENT(Names.STUDENT),
    TEACHER(Names.TEACHER),
    DEANERY(Names.DEANERY);

    public class Names{
        public static final String STUDENT = "Student";
        public static final String TEACHER = "Teacher";
        public static final String DEANERY = "Deanery";
    }

    private final String label;

    private RoleType(String label) {
        this.label = label;
    }

    public String toString() {
        return this.label;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="3123536" questionTitle="I follow this maven-glassfish-plugin example but error message,why?">
<Answer><![CDATA[<plugin>
            <groupId>org.glassfish.embedded</groupId>
            <artifactId>maven-embedded-glassfish-plugin</artifactId>
            <version>4.0</version>
            <configuration>
                <app>target/${project.artifactId}.war</app>
                <port>8080</port>
                <ports>
                    <https-listener>8181</https-listener>
                </ports>       
            </configuration>
            <dependencies>
                <dependency>
                    <groupId>org.glassfish.main.common</groupId>
                    <artifactId>simple-glassfish-api</artifactId>
                    <version>4.0</version>
                </dependency>                    
                <dependency>
                    <groupId>org.glassfish.main.extras</groupId>
                    <artifactId>glassfish-embedded-all</artifactId>
                    <version>4.0</version>
                </dependency>
            </dependencies>
            <executions>
                <execution>
                    <id>start</id>
                    <phase>integration-test</phase>
                    <goals>
                        <goal>start</goal>
                        <goal>deploy</goal>
                    </goals>
                </execution>
                <execution>
                    <id>stop</id>
                    <phase>post-integration-test</phase>
                    <goals>
                        <goal>undeploy</goal>
                        <goal>stop</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>]]></Answer>
<Answer><![CDATA[<project>
  ...
  <pluginRepositories>
    <pluginRepository>
      <id>m.g.o-groups-glassfish</id>
      <url>http://maven.glassfish.org/content/groups/glassfish</url>
    </pluginRepository>
  </pluginRepositories>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.glassfish</groupId>
        <artifactId>maven-embedded-glassfish-plugin</artifactId>
        <version>3.0.1</version>
        <configuration>
          <app>${project.build.directory}/${build.finalName}.war</app>
          <autoDelete>true</autoDelete>
          <port>8080</port>
          <contextRoot>test</contextRoot>
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
</project>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="3027834" questionTitle="Inject an EJB into JAX-RS (RESTful service)">
<Answer><![CDATA[@Path("book")
public class BookResource {

  @EJB
  BookEJB bookEJB;

  public BookResource() {
    try {
        String lookupName = "java:global/my_app/my_ejb_module/BookEJB";
        bookEJB = (BookEJB) InitialContext.doLookup(lookupName);
    } catch (NamingException e) {
        e.printStackTrace();
    }
  }

  @GET
  @Produces("application/xml")
  @Path("/{bookId}")
  public Book getBookById(@PathParam("bookId") Integer id) {
    return bookEJB.findById(id);
  }
}]]></Answer>
<Answer><![CDATA[@javax.ws.rs.ApplicationPath("application")
public class InjectionApplication extends javax.ws.rs.core.Application {
  private Set<Object> singletons = new HashSet<Object>();
  private Set<Class<?>> classes = new HashSet<Class<?>>();

  public InjectionApplication() {
    // no instance is created, just class is listed
    classes.add(BookResource.class);
  }

  @Override
  public Set<Class<?>> getClasses() {
    return classes;
  }

  @Override
  public Set<Object> getSingletons() {
    return singletons;
  }
}]]></Answer>
<Answer><![CDATA[import com.sun.jersey.core.spi.component.ComponentContext;
import com.sun.jersey.core.spi.component.ComponentScope;
import com.sun.jersey.spi.inject.Injectable;
import com.sun.jersey.spi.inject.InjectableProvider;

import javax.ejb.EJB;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.ws.rs.ext.Provider;
import java.lang.reflect.Type;

/**
 * JAX-RS EJB Injection provider.
 */
@Provider
public class EJBProvider implements InjectableProvider<EJB, Type> {

    public ComponentScope getScope() {
        return ComponentScope.Singleton;
    }

    public Injectable getInjectable(ComponentContext cc, EJB ejb, Type t) {
        if (!(t instanceof Class)) return null;

        try {
            Class c = (Class)t;
            Context ic = new InitialContext();

            final Object o = ic.lookup(c.getName());

            return new Injectable<Object>() {
                public Object getValue() {
                    return o;
                }
            };
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2909021" questionTitle="JSF 2.0: Validate equality of 2 InputSecret Fields (confirm password) without writing Code?">
<Answer><![CDATA[package com.jsf.beans.user;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.html.HtmlInputSecret;

import org.apache.commons.lang.StringUtils;

import com.pichler.jsf.beans.base.JsfViewBean;

 @ManagedBean(name = "changePassword")
 @RequestScoped
 public class ChangePassword extends JsfViewBean {
private HtmlInputSecret inputSecret1, inputSecret2;

/**
 * @return the inputSecret1
 */
public HtmlInputSecret getInputSecret1() {
    return inputSecret1;
}

/**
 * @param inputSecret1
 *            the inputSecret1 to set
 */
public void setInputSecret1(HtmlInputSecret inputSecret1) {
    this.inputSecret1 = inputSecret1;
}

/**
 * @return the inputSecret2
 */
public HtmlInputSecret getInputSecret2() {
    return inputSecret2;
}

/**
 * @param inputSecret2
 *            the inputSecret2 to set
 */
public void setInputSecret2(HtmlInputSecret inputSecret2) {
    this.inputSecret2 = inputSecret2;
}

private String password1, password2;

public String alterar() {
    if (!StringUtils.equals(password1, password2)) {
        addErrorMessage(inputSecret1.getClientId(),
                "As senhas não coincidem");
        addErrorMessage(inputSecret2.getClientId(),
                "As senhas não coincidem");
        return null;
    }
    return null;
}

/**
 * @return the password1
 */
public String getPassword1() {
    return password1;
}

/**
 * @param password1
 *            the password1 to set
 */
public void setPassword1(String password1) {
    this.password1 = password1;
}

/**
 * @return the password2
 */
public String getPassword2() {
    return password2;
}

/**
 * @param password2
 *            the password2 to set
 */
public void setPassword2(String password2) {
    this.password2 = password2;
}]]></Answer>
<Answer><![CDATA[package ca.triumf.mis.trevents.jsf.validator;

import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.FacesValidator;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;

@FacesValidator(value="duplicateFieldValidator")
public class DuplicateFieldValidator implements Validator {

@Override
public void validate(FacesContext context, UIComponent component, Object value)
        throws ValidatorException {
    // Obtain the client ID of the first field from f:attribute.
    System.out.println(component.getFamily());
    String field1Id = (String) component.getAttributes().get("field1Id");

    // Find the actual JSF component for the client ID.
    UIInput textInput = (UIInput) context.getViewRoot().findComponent(field1Id);
    if (textInput == null)
        throw new IllegalArgumentException(String.format("Unable to find component with id %s",field1Id));
    // Get its value, the entered text of the first field.
    String field1 = (String) textInput.getValue();

    // Cast the value of the entered text of the second field back to String.
    String confirm = (String) value;

    // Check if the first text is actually entered and compare it with second text.
    if (field1 != null && field1.length() != 0 && !field1.equals(confirm)) {
        throw new ValidatorException(new FacesMessage("E-mail addresses are not equal."));
    }
}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2809877" questionTitle="How to convert map to url query string?">
<Answer><![CDATA[import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class UrlQueryString {
  private static final String DEFAULT_ENCODING = "UTF-8";

  public static String buildQueryString(final LinkedHashMap<String, Object> map) {
    try {
      final Iterator<Map.Entry<String, Object>> it = map.entrySet().iterator();
      final StringBuilder sb = new StringBuilder(map.size() * 8);
      while (it.hasNext()) {
        final Map.Entry<String, Object> entry = it.next();
        final String key = entry.getKey();
        if (key != null) {
          sb.append(URLEncoder.encode(key, DEFAULT_ENCODING));
          sb.append("=");
          final Object value = entry.getValue();
          final String valueAsString = value != null ? URLEncoder.encode(value.toString(), DEFAULT_ENCODING) : "";
          sb.append(valueAsString);
          if (it.hasNext()) {
            sb.append("&");
          }
        } else {
          // Do what you want...for example:
          assert false : String.format("Null key in query map: %s", map.entrySet());
        }
      }
      return sb.toString();
    } catch (final UnsupportedEncodingException e) {
      throw new UnsupportedOperationException(e);
    }
  }

  public static String buildQueryStringMulti(final LinkedHashMap<String, List<Object>> map) {
    try {
      final StringBuilder sb = new StringBuilder(map.size() * 8);
      for (final Iterator<Entry<String, List<Object>>> mapIterator = map.entrySet().iterator(); mapIterator.hasNext();) {
        final Entry<String, List<Object>> entry = mapIterator.next();
        final String key = entry.getKey();
        if (key != null) {
          final String keyEncoded = URLEncoder.encode(key, DEFAULT_ENCODING);
          final List<Object> values = entry.getValue();
          sb.append(keyEncoded);
          sb.append("=");
          if (values != null) {
            for (final Iterator<Object> listIt = values.iterator(); listIt.hasNext();) {
              final Object valueObject = listIt.next();
              sb.append(valueObject != null ? URLEncoder.encode(valueObject.toString(), DEFAULT_ENCODING) : "");
              if (listIt.hasNext()) {
                sb.append("&");
                sb.append(keyEncoded);
                sb.append("=");
              }
            }
          }
          if (mapIterator.hasNext()) {
            sb.append("&");
          }
        } else {
          // Do what you want...for example:
          assert false : String.format("Null key in query map: %s", map.entrySet());
        }
      }
      return sb.toString();
    } catch (final UnsupportedEncodingException e) {
      throw new UnsupportedOperationException(e);
    }
  }

  public static void main(final String[] args) {
    // Examples:
    {
      final LinkedHashMap<String, Object> queryItems = new LinkedHashMap<String, Object>();
      queryItems.put("brand", "C&A");
      queryItems.put("count", null);
      queryItems.put("misc", 42);
      final String buildQueryString = buildQueryString(queryItems);
      System.out.println(buildQueryString);
    }
    {
      final LinkedHashMap<String, List<Object>> queryItems = new LinkedHashMap<String, List<Object>>();
      queryItems.put("usernames", new ArrayList<Object>(Arrays.asList(new String[] { "bob", "john" })));
      queryItems.put("nullValue", null);
      queryItems.put("misc", new ArrayList<Object>(Arrays.asList(new Integer[] { 1, 2, 3 })));
      final String buildQueryString = buildQueryStringMulti(queryItems);
      System.out.println(buildQueryString);
    }
  }
}]]></Answer>
<Answer><![CDATA[import java.util.*;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

public class MapQuery {
    static String urlEncodeUTF8(String s) {
        try {
            return URLEncoder.encode(s, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new UnsupportedOperationException(e);
        }
    }
    static String urlEncodeUTF8(Map<?,?> map) {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<?,?> entry : map.entrySet()) {
            if (sb.length() > 0) {
                sb.append("&");
            }
            sb.append(String.format("%s=%s",
                urlEncodeUTF8(entry.getKey().toString()),
                urlEncodeUTF8(entry.getValue().toString())
            ));
        }
        return sb.toString();       
    }
    public static void main(String[] args) {
        Map<String,Object> map = new HashMap<String,Object>();
        map.put("p1", 12);
        map.put("p2", "cat");
        map.put("p3", "a & b");         
        System.out.println(urlEncodeUTF8(map));
        // prints "p3=a+%26+b&p2=cat&p1=12"
    }
}]]></Answer>
<Answer><![CDATA[public String getQueryString(HttpServletRequest request, String encoding) {
    Map<String, String[]> parameters = request.getParameterMap();

    return parameters.entrySet().stream()
            .flatMap(entry -> encodeMultiParameter(entry.getKey(), entry.getValue(), encoding))
            .reduce((param1, param2) -> param1 + "&" + param2)
            .orElse("");
}

private Stream<String> encodeMultiParameter(String key, String[] values, String encoding) {
    return Stream.of(values).map(value -> encodeSingleParameter(key, value, encoding));
}

private String encodeSingleParameter(String key, String value, String encoding) {
    return urlEncode(key, encoding) + "=" + urlEncode(value, encoding);
}

private String urlEncode(String value, String encoding) {
    try {
        return URLEncoder.encode(value, encoding);
    } catch (UnsupportedEncodingException e) {
        throw new IllegalArgumentException("Cannot url encode " + value, e);
    }
}]]></Answer>
<Answer><![CDATA[public static void parseAndFormatExample() throws UnsupportedEncodingException {
        final String queryString = "nonce=12345&redirectCallbackUrl=http://www.bbc.co.uk";
        System.out.println(queryString);
        // => nonce=12345&redirectCallbackUrl=http://www.bbc.co.uk

        final List<NameValuePair> params =
                URLEncodedUtils.parse(queryString, StandardCharsets.UTF_8);
        // List<NameValuePair> params = URLEncodedUtils.parse(new URI(url), "UTF-8");

        for (final NameValuePair param : params) {
            System.out.println(param.getName() + " : " + param.getValue());
            // => nonce : 12345
            // => redirectCallbackUrl : http://www.bbc.co.uk
        }

        final String newQueryStringEncoded =
                URLEncodedUtils.format(params, StandardCharsets.UTF_8);


        // decode when printing to screen
        final String newQueryStringDecoded =
                URLDecoder.decode(newQueryStringEncoded, StandardCharsets.UTF_8.toString());
        System.out.println(newQueryStringDecoded);
        // => nonce=12345&redirectCallbackUrl=http://www.bbc.co.uk
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2451255" questionTitle="Java data structure suggestion">
<Answer><![CDATA[public enum Zone
{
    private Integer zoneCode;
    private Double value;

    ZONE1( /* Integer, Double */ ),
    ZONE2( /* Integer, Double */ );

    public Integer getZone()
    {
       return zoneCode;
    }
    public Double getValue()
    {
       return value;
    }

    private Zone(Integer z, Double v)
    {
       zoneCode = z;
       value = v;
    }
}]]></Answer>
<Answer><![CDATA[public class Location {
  private Integer zoneCode;
  private Integer areaCode;

  // getters and setters here

  // With an equals and hashCode (always implement BOTH or NONE)
  // they behave well in a Map, otherwise you can have the same location
  // twice if the same (zone, area) are in more than 1 object
  // NB these implementations don't like NULL areaCodes or zoneCodes
  public boolean equals(Object other) {
    if (other == null) return false;
    if (other == this) return true;

    if (other instanceof Location) {
      Location otherLocation = (Location)other;
      return (zoneCode == otherLocation.zoneCode) && (areaCode == otherLocation.areaCode);
    }
    return false;
  }

  public int hashCode() {
    return zoneCode.hashCode() + areaCode.hashCode();
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2422468" questionTitle="How to upload files to server using JSP/Servlet?">
<Answer><![CDATA[// Import required java libraries
import java.io.*;
import java.util.*;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.output.*;

public class UploadServlet extends HttpServlet {

   private boolean isMultipart;
   private String filePath;
   private int maxFileSize = 50 * 1024;
   private int maxMemSize = 4 * 1024;
   private File file ;

   public void init( ){
      // Get the file location where it would be stored.
      filePath = 
             getServletContext().getInitParameter("file-upload"); 
   }
   public void doPost(HttpServletRequest request, 
               HttpServletResponse response)
              throws ServletException, java.io.IOException {
      // Check that we have a file upload request
      isMultipart = ServletFileUpload.isMultipartContent(request);
      response.setContentType("text/html");
      java.io.PrintWriter out = response.getWriter( );
      if( !isMultipart ){
         out.println("<html>");
         out.println("<head>");
         out.println("<title>Servlet upload</title>");  
         out.println("</head>");
         out.println("<body>");
         out.println("<p>No file uploaded</p>"); 
         out.println("</body>");
         out.println("</html>");
         return;
      }
      DiskFileItemFactory factory = new DiskFileItemFactory();
      // maximum size that will be stored in memory
      factory.setSizeThreshold(maxMemSize);
      // Location to save data that is larger than maxMemSize.
      factory.setRepository(new File("c:\\temp"));

      // Create a new file upload handler
      ServletFileUpload upload = new ServletFileUpload(factory);
      // maximum file size to be uploaded.
      upload.setSizeMax( maxFileSize );

      try{ 
      // Parse the request to get file items.
      List fileItems = upload.parseRequest(request);

      // Process the uploaded file items
      Iterator i = fileItems.iterator();

      out.println("<html>");
      out.println("<head>");
      out.println("<title>Servlet upload</title>");  
      out.println("</head>");
      out.println("<body>");
      while ( i.hasNext () ) 
      {
         FileItem fi = (FileItem)i.next();
         if ( !fi.isFormField () )  
         {
            // Get the uploaded file parameters
            String fieldName = fi.getFieldName();
            String fileName = fi.getName();
            String contentType = fi.getContentType();
            boolean isInMemory = fi.isInMemory();
            long sizeInBytes = fi.getSize();
            // Write the file
            if( fileName.lastIndexOf("\\") >= 0 ){
               file = new File( filePath + 
               fileName.substring( fileName.lastIndexOf("\\"))) ;
            }else{
               file = new File( filePath + 
               fileName.substring(fileName.lastIndexOf("\\")+1)) ;
            }
            fi.write( file ) ;
            out.println("Uploaded Filename: " + fileName + "<br>");
         }
      }
      out.println("</body>");
      out.println("</html>");
   }catch(Exception ex) {
       System.out.println(ex);
   }
   }
   public void doGet(HttpServletRequest request, 
                       HttpServletResponse response)
        throws ServletException, java.io.IOException {

        throw new ServletException("GET method used with " +
                getClass( ).getName( )+": POST method required.");
   } 
}]]></Answer>
<Answer><![CDATA[Pasted from <http://osdir.com/ml/user-geronimo-apache/2011-03/msg00026.html> 



<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<web:web-app xmlns:app="http://geronimo.apache.org/xml/ns/j2ee/application-2.0" xmlns:client="http://geronimo.apache.org/xml/ns/j2ee/application-client-2.0" xmlns:conn="http://geronimo.apache.org/xml/ns/j2ee/connector-1.2" xmlns:dep="http://geronimo.apache.org/xml/ns/deployment-1.2" xmlns:ejb="http://openejb.apache.org/xml/ns/openejb-jar-2.2" xmlns:log="http://geronimo.apache.org/xml/ns/loginconfig-2.0" xmlns:name="http://geronimo.apache.org/xml/ns/naming-1.2" xmlns:pers="http://java.sun.com/xml/ns/persistence" xmlns:pkgen="http://openejb.apache.org/xml/ns/pkgen-2.1" xmlns:sec="http://geronimo.apache.org/xml/ns/security-2.0" xmlns:web="http://geronimo.apache.org/xml/ns/j2ee/web-2.0.1">
    <dep:environment>
        <dep:moduleId>
            <dep:groupId>DataStar</dep:groupId>
            <dep:artifactId>DataStar</dep:artifactId>
            <dep:version>1.0</dep:version>
            <dep:type>car</dep:type>
        </dep:moduleId>

<!--Don't load commons-io or fileupload from parent classloaders-->
        <dep:hidden-classes>
            <dep:filter>org.apache.commons.io</dep:filter>
            <dep:filter>org.apache.commons.fileupload</dep:filter>
        </dep:hidden-classes>
        <dep:inverse-classloading/>        


    </dep:environment>
    <web:context-root>/DataStar</web:context-root>
</web:web-app>]]></Answer>
<Answer><![CDATA[public class ServletCommonfunctions extends HttpServlet implements
        Connections {

    private static final long serialVersionUID = 1L;

    public ServletCommonfunctions() {}

    protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException,
            IOException {}

    public SortedMap<String, String> savefilesindirectory(
            HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        // Map<String, String> key_values = Collections.synchronizedMap( new
        // TreeMap<String, String>());
        SortedMap<String, String> key_values = new TreeMap<String, String>();
        String dist = null, fact = null;
        PrintWriter out = response.getWriter();
        File file;
        String filePath = "E:\\FSPATH1\\2KL06CS048\\";
        System.out.println("Directory Created   ????????????"
            + new File(filePath).mkdir());
        int maxFileSize = 5000 * 1024;
        int maxMemSize = 5000 * 1024;
        // Verify the content type
        String contentType = request.getContentType();
        if ((contentType.indexOf("multipart/form-data") >= 0)) {
            DiskFileItemFactory factory = new DiskFileItemFactory();
            // maximum size that will be stored in memory
            factory.setSizeThreshold(maxMemSize);
            // Location to save data that is larger than maxMemSize.
            factory.setRepository(new File(filePath));
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload(factory);
            // maximum file size to be uploaded.
            upload.setSizeMax(maxFileSize);
            try {
                // Parse the request to get file items.
                @SuppressWarnings("unchecked")
                List<FileItem> fileItems = upload.parseRequest(request);
                // Process the uploaded file items
                Iterator<FileItem> i = fileItems.iterator();
                while (i.hasNext()) {
                    FileItem fi = (FileItem) i.next();
                    if (!fi.isFormField()) {
                        // Get the uploaded file parameters
                        String fileName = fi.getName();
                        // Write the file
                        if (fileName.lastIndexOf("\\") >= 0) {
                            file = new File(filePath
                                + fileName.substring(fileName
                                        .lastIndexOf("\\")));
                        } else {
                            file = new File(filePath
                                + fileName.substring(fileName
                                        .lastIndexOf("\\") + 1));
                        }
                        fi.write(file);
                    } else {
                        key_values.put(fi.getFieldName(), fi.getString());
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
        return key_values;
    }
}]]></Answer>
<Answer><![CDATA[package com.abc..servlet;

import java.io.File;
---------
--------


/**
 * Servlet implementation class UploadFileServlet
 */
public class UploadFileServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public UploadFileServlet() {
        super();
        // TODO Auto-generated constructor stub
    }
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        response.sendRedirect("../jsp/ErrorPage.jsp");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub

            PrintWriter out = response.getWriter();
            HttpSession httpSession = request.getSession();
            String filePathUpload = (String) httpSession.getAttribute("path")!=null ? httpSession.getAttribute("path").toString() : "" ;

            String path1 =  filePathUpload;
            String filename = null;
            File path = null;
            FileItem item=null;


            boolean isMultipart = ServletFileUpload.isMultipartContent(request);

            if (isMultipart) {
                FileItemFactory factory = new DiskFileItemFactory();
                ServletFileUpload upload = new ServletFileUpload(factory);
                String FieldName = "";
                try {
                    List items = upload.parseRequest(request);
                    Iterator iterator = items.iterator();
                    while (iterator.hasNext()) {
                         item = (FileItem) iterator.next();

                            if (fieldname.equals("description")) {
                                description = item.getString();
                            }
                        }
                        if (!item.isFormField()) {
                            filename = item.getName();
                            path = new File(path1 + File.separator);
                            if (!path.exists()) {
                                boolean status = path.mkdirs();
                            }
                            /* START OF CODE FRO PRIVILEDGE*/

                            File uploadedFile = new File(path + Filename);  // for copy file
                            item.write(uploadedFile);
                            }
                        } else {
                            f1 = item.getName();
                        }

                    } // END OF WHILE 
                    response.sendRedirect("welcome.jsp");
                } catch (FileUploadException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                } 
            }   
    }

}]]></Answer>
<Answer><![CDATA[protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    try {
        List<FileItem> items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);
        for (FileItem item : items) {
            if (item.isFormField()) {
                // Process regular form field (input type="text|radio|checkbox|etc", select, etc).
                String fieldName = item.getFieldName();
                String fieldValue = item.getString();
                // ... (do your job here)
            } else {
                // Process form file field (input type="file").
                String fieldName = item.getFieldName();
                String fileName = FilenameUtils.getName(item.getName());
                InputStream fileContent = item.getInputStream();
                // ... (do your job here)
            }
        }
    } catch (FileUploadException e) {
        throw new ServletException("Cannot parse multipart request.", e);
    }

    // ...
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2415803" questionTitle="Running Jetty 7 server in eclipse?">
<Answer><![CDATA[<jetty.version>9.3.0.M1</jetty.version>

<!-- JETTY DEPENDENCIES -->
<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-server</artifactId>
  <version>${jetty.version}</version>
  <scope>provided</scope>
</dependency>
<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-servlet</artifactId>
  <version>${jetty.version}</version>
  <scope>provided</scope>
</dependency>
<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-webapp</artifactId>
  <version>${jetty.version}</version>
  <scope>provided</scope>
</dependency>
<dependency>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-servlets</artifactId>
    <version>${jetty.version}</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-ant</artifactId>
    <version>${jetty.version}</version>
</dependency>]]></Answer>
<Answer><![CDATA[import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.webapp.WebAppContext;

public class JettyServer {
 public static void main(String[] args) {
  Server server = new Server(8080);

  WebAppContext context = new WebAppContext();
  context.setResourceBase("../webapp-project/WebContent");
  context.setDescriptor("../webapp-project/WebContent/WEB-INF/web.xml");
  context.setContextPath("/");
  context.setParentLoaderPriority(true);
  server.setHandler(context);

  try {
   server.start();
   server.join();
  } catch (Exception e) {
   e.printStackTrace();
  }
 }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="2028958" questionTitle="rich:datatable rowspan issue">
<Answer><![CDATA[<rich:dataTable
    value="#{backingBean.companyList}"
    rows="100"
    var="company">
    <f:facet name="header">
        <rich:columnGroup>
            <rich:column>Company Name</rich:column>
            <rich:column>Company Email</rich:column>
            <rich:column>Product Name</rich:column>
            <rich:column>Product Email</rich:column>
        </rich:columnGroup>
    </f:facet>
    <rich:subTable value="#{company.products}" var="product" rowKeyVar="rowKey">
        <rich:column rowspan="#{company.products.size()}" rendered="#{rowKey eq 0}">
            #{company.name}
        </rich:column>
        <rich:column rowspan="#{company.products.size()}" rendered="#{rowKey eq 0}">
            #{company.email}
        </rich:column>
        <rich:column>
            #{product.name}
        </rich:column>
        <rich:column>
            #{product.email}
        </rich:column>
    </rich:subTable>
</rich:dataTable>]]></Answer>
<Answer><![CDATA[<rich:dataTable width="70%" id="applicantsTable" rows="100"
rowClasses="applicant_row" columnClasses="col"
value="#{backingBean.companyList}" var="company">
<f:facet name="header">
        <rich:column>
            <h:outputText styleClass="headerText" value="Company Name" />
        </rich:column>
        <rich:column>
            <h:outputText styleClass="headerText" value="Company Email" />
        </rich:column>
        <rich:column>
            <h:outputText styleClass="headerText" value="Product Name" />
        </rich:column>
        <rich:column>
            <h:outputText styleClass="headerText" value="Product Email" />
        </rich:column>

</f:facet>

<c:forEach items="#{backingBean.companyList}" var="c_company">

    <c:if test="#{prs:collectionSize(c_company.products)> 0}">

        <rich:column breakBefore="true"
            rowspan="#{prs:collectionSize(c_company.products)}">
            <h:outputText value="#{c_company.name}" />
        </rich:column>

        <rich:column
            rowspan="#{prs:collectionSize(c_company.products)}">
            <h:outputText value="#{c_company.email}" />
        </rich:column>

        <c:forEach items="#{c_company.products}" var="c_product">
            <!-- This if clause is just to determine the breakBefore attribute -->
            <c:if test="#{c_company.products[0] == c_product}">
                <rich:column>
                    <h:outputText value="#{c_product.name}" />
                </rich:column>
            </c:if>

            <c:if test="#{c_company.products[0] != c_product}">
                <rich:column breakBefore="true" styleClass="internal_cell">
                    <h:outputText value="#{c_product.name}" />
                </rich:column>
            </c:if>

            <rich:column styleClass="internal_cell">
                <h:outputText value="#{c_product.email}" />
            </rich:column>

        </c:forEach>

    </c:if>

</c:forEach>]]></Answer>
<Answer><![CDATA[<h:dataTable value="#{bean.companies}" var="company">
    <h:column>
        <h:outputText value="#{company.name}" />
    </h:column>
    <h:column>
        <h:outputText value="#{company.email}" />
    </h:column>
    <h:column>
        <h:dataTable value="#{company.products}" var="product">
            <h:column>
                <h:outputText value="#{product.name}" />
            </h:column>
        </h:dataTable>
    </h:column>
    <h:column>
        <h:dataTable value="#{company.products}" var="product">
            <h:column>
                <h:outputText value="#{product.description}" />
            </h:column>
        </h:dataTable>
    </h:column>
</h:dataTable>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="10275841" questionTitle="How to Change the icon on the title bar of a stage in java fx 2.0 of my application">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class StackoverflowIcon extends Application {

    @Override
    public void start(Stage stage) {
        StackPane root = new StackPane();
        // set icon
        stage.getIcons().add(new Image("/path/to/stackoverflow.jpg"));
        stage.setTitle("Wow!! Stackoverflow Icon");
        stage.setScene(new Scene(root, 300, 250));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
<question questionID="10121991" questionTitle="JavaFX Application Icon">
<Answer><![CDATA[import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class StackoverflowIcon extends Application {

    @Override
    public void start(Stage stage) {
        StackPane root = new StackPane();
        // set icon
        stage.getIcons().add(new Image("/path/to/stackoverflow.jpg"));
        stage.setTitle("Wow!! Stackoverflow Icon");
        stage.setScene(new Scene(root, 300, 250));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="19883563" questionTitle="How to get data in one Java FXML Controller from another FXML Controller (these controllers are not nested controllers)?">
<Answer><![CDATA[public class TextController implements Initializable {

    private TextController instance;

    private TextController() {};

    public static TextController getInstance() {
        if (TextController.instance == null) {
            synchronized (TextController.class) {
                if (TextController.instance == null) {
                    TextController.instance = new TextController();
                }
            }
        }
        return TextController.instance;
    }

    @FXML
    private TextField textField1;

    public TextField getTextField1() {
        return textField1;
    }
    @FXML
    private TextField textField2;

    public TextField getTextField2() {
        return textField2;
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {

    }    
}]]></Answer>
<Answer><![CDATA[public class Singleton {
        private static Singleton instance = new Singleton();
        public static Singleton getInstance(){
            return instance;
        }

        private TextField txtField1;
        private TextField txtField2;

        public TextField getTxtField2() {
            return txtField2;
        }

        public void setTxtField2(TextField txtField2) {
           this.txtField2 = txtField2;
        }

        public TextField getTxtField1() {
           return txtField1;
        }

       public void setTxtField1(TextField txtField1) {
           this.txtField1 = txtField1;
       }

    }]]></Answer>
</question>
<question questionID="14511016" questionTitle=""/>
</cluster>
<cluster>
<question questionID="31675319" questionTitle="Which would be better in terms of performance Lambda or simple loop?">
<Answer><![CDATA[import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Timeout;
import org.openjdk.jmh.annotations.Warmup;

/**
 *
 * @author devb
 */
@BenchmarkMode(Mode.Throughput)
@Fork(value = 1)
@Warmup(iterations = 1, time = 32, timeUnit = TimeUnit.MILLISECONDS)
@Measurement(iterations = 16, time = 1, timeUnit = TimeUnit.SECONDS)
@Timeout(time = 1, timeUnit = TimeUnit.SECONDS)
@State(Scope.Benchmark)
public class CheckLamdaPerformance {

    List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);

    @Benchmark
    public void testPerOld() {
        //Old way:
        for (Integer n : list) {
            System.out.println(n);
        }
    }

    @Benchmark
    public void testPerNew() {
        //New way:
        list.forEach(n -> System.out.println(n));
    }

    @Benchmark
    public void testPerDoubleColon() {
        //or we can use :: double colon operator in Java 8
        list.forEach(System.out::println);
    }

}]]></Answer>
</question>
<question questionID="16635398" questionTitle="Java 8 Iterable.forEach() vs foreach loop">
<Answer><![CDATA[class MyConsumer implements Consumer<Integer>{

    @Override
    public void accept(Integer o) {
        System.out.println("Here you can also add your business logic that will work with Iteration and you can reuse it."+o);
    }
}

public class ForEachConsumer {

    public static void main(String[] args) {

        // Creating simple ArrayList.
        ArrayList<Integer> aList = new ArrayList<>();
        for(int i=1;i<=10;i++) aList.add(i);

        //Calling forEach with customized Iterator.
        MyConsumer consumer = new MyConsumer();
        aList.forEach(consumer);


        // Using Lambda Expression for Consumer. (Functional Interface) 
        Consumer<Integer> lambda = (Integer o) ->{
            System.out.println("Using Lambda Expression to iterate and do something else(BI).. "+o);
        };
        aList.forEach(lambda);

        // Using Anonymous Inner Class.
        aList.forEach(new Consumer<Integer>(){
            @Override
            public void accept(Integer o) {
                System.out.println("Calling with Anonymous Inner Class "+o);
            }
        });
    }
}]]></Answer>
<Answer><![CDATA[@VmOptions("-server")
public class Java8IterationBenchmarks {

    public static class TestObject {
        public int result;
    }

    public @Param({"100", "10000"}) int elementCount;

    ArrayList<TestObject> list;
    TestObject[] array;

    @BeforeExperiment
    public void setup(){
        list = new ArrayList<>(elementCount);
        for (int i = 0; i < elementCount; i++) {
            list.add(new TestObject());
        }
        array = list.toArray(new TestObject[list.size()]);
    }

    @Benchmark
    public void timeTraditionalForEach(int reps){
        for (int i = 0; i < reps; i++) {
            for (TestObject t : list) {
                t.result++;
            }
        }
        return;
    }

    @Benchmark
    public void timeForEachAnonymousClass(int reps){
        for (int i = 0; i < reps; i++) {
            list.forEach(new Consumer<TestObject>() {
                @Override
                public void accept(TestObject t) {
                    t.result++;
                }
            });
        }
        return;
    }

    @Benchmark
    public void timeForEachLambda(int reps){
        for (int i = 0; i < reps; i++) {
            list.forEach(t -> t.result++);
        }
        return;
    }

    @Benchmark
    public void timeForEachOverArray(int reps){
        for (int i = 0; i < reps; i++) {
            for (TestObject t : array) {
                t.result++;
            }
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20001427" questionTitle=":: (double colon) operator in Java 8">
<Answer><![CDATA[public class TestObject {

    public TestObject() {
        System.out.println(this.hashCode());
    }

    public final TestObject testInstance(TestObject t){
        System.out.println("Test instance called. this.hashCode:" 
    + this.hashCode());
        System.out.println("Given parameter hashCode:" + t.hashCode());
        return t;
    }

    public final TestObject testInstance(TestObject t, TestObject t2){
        return t;
    }

    public static final TestObject testStatic(TestObject t, TestObject t2){
        return t;
    }
}]]></Answer>
<Answer><![CDATA[public interface Action {
    void execute();
}

public class ActionImpl implements Action {

    @Override
    public void execute() {
        System.out.println("execute with ActionImpl");
    }

}

public static void main(String[] args) {
    Action action = new Action() {
        @Override
        public void execute() {
            System.out.println("execute with anonymous class");
        }
    };
    action.execute();

    //or

    Action actionImpl = new ActionImpl();
    actionImpl.execute();
}]]></Answer>
<Answer><![CDATA[interface ConstructorReference {
    T constructor();
}

interface  MethodReference {
   void anotherMethod(String input);
}

public class ConstructorClass {
    String value;

   public ConstructorClass() {
       value = "default";
   }

   public static void method(String input) {
      System.out.println(input);
   }

   public void nextMethod(String input) {
       // operations
   }

   public static void main(String... args) {
       // constructor reference
       ConstructorReference reference = ConstructorClass::new;
       ConstructorClass cc = reference.constructor();

       // static method reference
       MethodReference mr = cc::method;

       // object method reference
       MethodReference mr2 = cc::nextMethod;

       System.out.println(cc.value);
   }
}]]></Answer>
</question>
<question questionID="27015495" questionTitle="Meaning of :: in Java syntax">
<Answer><![CDATA[class Zoo {
    private List animalList;
    public Zoo(List animalList) {
        this.animalList = animalList;
        System.out.println("Zoo created.");
    }
}

interface ZooFactory {
    Zoo getZoo(List animals);
}

public class ConstructorReferenceExample {

    public static void main(String[] args) {
        //following commented line is lambda expression equivalent
        //ZooFactory zooFactory = (List animalList)-> {return new Zoo(animalList);};    
        ZooFactory zooFactory = Zoo::new;
        System.out.println("Ok");       
        Zoo zoo = zooFactory.getZoo(new ArrayList());
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20470010" questionTitle="Collect successive pairs from a stream">
<Answer><![CDATA[public class ConsecutiveSpliterator<T> implements Spliterator<List<T>> {

    private final Spliterator<T> wrappedSpliterator;

    private final int n;

    private final Deque<T> deque;

    private final Consumer<T> dequeConsumer;

    public ConsecutiveSpliterator(Spliterator<T> wrappedSpliterator, int n) {
        this.wrappedSpliterator = wrappedSpliterator;
        this.n = n;
        this.deque = new ArrayDeque<>();
        this.dequeConsumer = deque::addLast;
    }

    @Override
    public boolean tryAdvance(Consumer<? super List<T>> action) {
        deque.pollFirst();
        fillDeque();
        if (deque.size() == n) {
            List<T> list = new ArrayList<>(deque);
            action.accept(list);
            return true;
        } else {
            return false;
        }
    }

    private void fillDeque() {
        while (deque.size() < n && wrappedSpliterator.tryAdvance(dequeConsumer))
            ;
    }

    @Override
    public Spliterator<List<T>> trySplit() {
        return null;
    }

    @Override
    public long estimateSize() {
        return wrappedSpliterator.estimateSize();
    }

    @Override
    public int characteristics() {
        return wrappedSpliterator.characteristics();
    }
}]]></Answer>
<Answer><![CDATA[public class TwoSubsequentElems {
  public static void main(String[] args) {
    List<Integer> input = new ArrayList<Integer>(asList(0, 1, 2, 3, 4));

    class BoundedQueue<T> extends LinkedList<T> {
      public BoundedQueue<T> save(T curElem) {
        if (size() == 2) { // we need to know only two subsequent elements
          pollLast(); // remove last to keep only requested number of elements
        }

        offerFirst(curElem);

        return this;
      }

      public T getPrevious() {
        return (size() < 2) ? null : getLast();
      }

      public T getCurrent() {
        return (size() == 0) ? null : getFirst();
      }
    }

    BoundedQueue<Integer> streamHistory = new BoundedQueue<Integer>();

    final List<Pair<Integer>> answer = input.stream()
      .map(i -> streamHistory.save(i))
      .filter(e -> e.getPrevious() != null)
      .map(e -> new Pair<Integer>(e.getPrevious(), e.getCurrent()))
      .collect(Collectors.toList());

    answer.forEach(System.out::println);
  }
}]]></Answer>
<Answer><![CDATA[/**
 * Stream that pairs each element in the stream with the next subsequent element.
 * The final pair will have only the first item, the second will be null.
 */
<T> Spliterator<Pair<T>> lead(final Stream<T> stream)
{
    final Iterator<T> input = stream.sequential().iterator();

    final Iterable<Pair<T>> iterable = () ->
    {
        return new Iterator<Pair<T>>()
        {
            Optional<T> current = getOptionalNext(input);

            @Override
            public boolean hasNext()
            {
                return current.isPresent();
            }

            @Override
            public Pair<T> next()
            {
                Optional<T> next = getOptionalNext(input);
                final Pair<T> pair = next.isPresent()
                    ? new Pair(current.get(), next.get())
                    : new Pair(current.get(), null);
                current = next;

                return pair;
            }
        };
    };

    return iterable.spliterator();
}

private <T> Optional<T> getOptionalNext(final Iterator<T> iterator)
{
    return iterator.hasNext()
        ? Optional.of(iterator.next())
        : Optional.empty();
}]]></Answer>
<Answer><![CDATA[import java.util.function.IntFunction;
import java.util.stream.IntStream;

public class PairFunction implements IntFunction<PairFunction.Pair> {

  public static class Pair {

    private final int first;
    private final int second;

    public Pair(int first, int second) {
      this.first = first;
      this.second = second;
    }

    @Override
    public String toString() {
      return "[" + first + "|" + second + "]";
    }
  }

  private int last;
  private boolean first = true;

  @Override
  public Pair apply(int value) {
    Pair pair = !first ? new Pair(last, value) : null;
    last = value;
    first = false;
    return pair;
  }

  public static void main(String[] args) {

    IntStream intStream = IntStream.of(0, 1, 2, 3, 4);
    final PairFunction pairFunction = new PairFunction();
    intStream.mapToObj(pairFunction)
        .filter(p -> p != null) // filter out the null
        .forEach(System.out::println); // display each Pair

  }

}]]></Answer>
<Answer><![CDATA[pubic class DifferenceCollector implements LongConsumer
{
    private final List< Long > intervals = new ArrayList<>();
    private Long lastTime;

    @Override
    public void accept( final long time )
    {
        if( Objects.isNull( lastTime ) )
        {
            lastTime = time;
        }
        else
        {
            intervals.add( time - lastTime );
            lastTime = time;
        }
    }

    public void combine( final DifferenceCollector other )
    {
        intervals.addAll( other.intervals );
        lastTime = other.lastTime;
    }

    public List< Long > intervals()
    {
        return intervals;
    }
}]]></Answer>
</question>
<question questionID="35676949" questionTitle="Java Streams with state - a trivial exercise">
<Answer><![CDATA[public static <T, R> Stream<R> pairMap(BaseStream<T, ?> source,
        BiFunction<? super T, ? super T, ? extends R> mapper) {
    Spliterator<T> spltr = source.spliterator();
    long sourceSize = spltr.estimateSize();
    Spliterator<R> result = new Spliterators.AbstractSpliterator<R>(
            sourceSize > 0 && sourceSize < Long.MAX_VALUE ? sourceSize - 1 : sourceSize,
            spltr.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {
        T prev;
        boolean started;

        @Override
        public boolean tryAdvance(Consumer<? super R> action) {
            if (!started) {
                if (!spltr.tryAdvance(t -> prev = t))
                    return false;
                started = true;
            }
            return spltr.tryAdvance(t -> action.accept(mapper.apply(prev, prev = t)));
        }
    };
    return StreamSupport.stream(result, source.isParallel()).onClose(source::close);
}]]></Answer>
<Answer><![CDATA[import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

public final class Pair<L, R> implements Comparable<Pair<L, R>> {

    private final Comparator<? super L> comparator;

    private L left;
    private R right;

    public Pair() {
        comparator = null;
    }

    public Pair(Comparator<? super L> comparator) {
        this.comparator = comparator;
    }

    public Pair(L left, R right) {
        this(left, right, null);
    }

    public Pair(L left, R right, Comparator<? super L> comparator) {
        this.left = left;
        this.right = right;
        this.comparator = comparator;
    }

    public L getLeft() {
        return left;
    }

    public void setLeft(L left) {
        this.left = left;
    }

    public R getRight() {
        return right;
    }

    public void setRight(R right) {
        this.right = right;
    }

    @Override
    public int hashCode() {
        return Objects.hash(left, right);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj == null || !(obj instanceof Pair)) {
            return false;
        }
        Pair that = (Pair) obj;
        return Objects.equals(left, that.left) && Objects.equals(right, that.right);
    }

    @Override
    public String toString() {
        return "{" + left +
                ", " + right +
                '}';
    }

    @Override
    @SuppressWarnings("unchecked")
    public int compareTo(Pair<L, R> o) {
        return comparator == null ? ((Comparable<? super L>) left).compareTo(o.left) : comparator.compare(left, o.left);
    }

    public static abstract class Stream {

        private Stream() {
        }

        public final java.util.stream.Stream<Pair<Integer, Integer>> of(IntStream src) {
            return of(src.boxed());
        }

        public final java.util.stream.Stream<Pair<Long, Long>> of(LongStream src) {
            return of(src.boxed());
        }

        public final java.util.stream.Stream<Pair<Double, Double>> of(DoubleStream src) {
            return of(src.boxed());
        }

        public final <E> java.util.stream.Stream<Pair<E, E>> of(java.util.stream.Stream<E> src) {
            return of(src.collect(Collectors.toList()));
        }

        @SuppressWarnings("all")
        public abstract <E> java.util.stream.Stream<Pair<E, E>> of(E... src);

        public abstract <E> java.util.stream.Stream<Pair<E, E>> of(List<E> src);

        protected static void checkSize(int size) {
            if (size < 1) {
                throw new IllegalArgumentException("Empty source.");
            }
        }

        protected static <E> E getOrNull(E[] array, int index) {
            return index < array.length ? array[index] : null;
        }

        protected static <E> E getOrNull(List<E> list, int index) {
            return index < list.size() ? list.get(index) : null;
        }

        public static Stream chained() {
            return new ChainedPairStream();
        }

        public static Stream distinct() {
            return new DistinctPairStream();
        }

    }

    private static final class ChainedPairStream extends Stream {

        @SafeVarargs
        public final <E> java.util.stream.Stream<Pair<E, E>> of(E... src) {
            int length = src.length;
            checkSize(length);
            return IntStream.range(0, Math.max(1, length - 1)).mapToObj(i -> new Pair<>(src[i], getOrNull(src, i + 1)));
        }

        public final <E> java.util.stream.Stream<Pair<E, E>> of(List<E> src) {
            int size = src.size();
            checkSize(size);
            return IntStream.range(0, Math.max(1, size - 1)).mapToObj(i -> new Pair<>(src.get(i), getOrNull(src, i + 1)));
        }

    }

    private static final class DistinctPairStream extends Stream {

        @SafeVarargs
        public final <E> java.util.stream.Stream<Pair<E, E>> of(E... src) {
            int length = src.length;
            checkSize(length);
            return IntStream.iterate(0, i -> i + 2)
                    .limit((long) Math.ceil(length / 2.0))
                    .mapToObj(i -> new Pair<>(src[i], getOrNull(src, i + 1)));
        }

        public final <E> java.util.stream.Stream<Pair<E, E>> of(List<E> src) {
            int size = src.size();
            checkSize(size);
            return IntStream.iterate(0, i -> i + 2)
                    .limit((long) Math.ceil(size / 2.0))
                    .mapToObj(i -> new Pair<>(src.get(i), getOrNull(src, i + 1)));
        }

    }

    public static void main(String[] args) {
        Pair.Stream.distinct().of(1, 2, 3, 4, 5, 6).forEach(System.out::println);

        Pair.Stream.chained().of(Arrays.asList(1, 3, 5, 7, 9)).forEach(System.out::println);

        Pair.Stream.chained().of(Arrays.stream(new int[]{0, 2, 4, 6, 8})).forEach(System.out::println);
        Pair.Stream.distinct().of(Arrays.stream(new int[]{0, 2, 4, 6, 8})).forEach(System.out::println);

        Pair.Stream.distinct().of(IntStream.range(0, 6)).forEach(System.out::println);
    }

}]]></Answer>
<Answer><![CDATA[public class StreamExercise {
    public static void main(String[] args) {
        f(IntStream.range(0, 6))
            .forEach(s -> System.out.println(s));

        System.out.println();

        f(IntStream.of(1,3,5,7,9))
            .forEach(s -> System.out.println(s));
    }

    private static Stream<String> f(IntStream input) {
        IntFunction<String> mapper = new IntFunction<String>() {
            private int last = -1;

            @Override
            public String apply(int value) {
                String result = last + ", " + value;
                last = value;
                return result;
            }

        };

        return input.sequential().mapToObj(mapper).skip(1);
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="20746429" questionTitle="Limit a stream by a predicate">
<Answer><![CDATA[public static void main(String[] args) {
    System.out.println(StreamUtil.iterate(1, o -> o + 1).terminateOn(15)
            .map(o -> o.toString()).collect(Collectors.joining(", ")));
}

static interface TerminatedStream<T> {
    Stream<T> terminateOn(T e);
}

static class StreamUtil {
    static <T> TerminatedStream<T> iterate(T seed, UnaryOperator<T> op) {
        return new TerminatedStream<T>() {
            public Stream<T> terminateOn(T e) {
                Builder<T> builder = Stream.<T> builder().add(seed);
                T current = seed;
                while (!current.equals(e)) {
                    current = op.apply(current);
                    builder.add(current);
                }
                return builder.build();
            }
        };
    }
}]]></Answer>
<Answer><![CDATA[import java.util.PrimitiveIterator;
import java.util.Spliterators;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.stream.IntStream;
import java.util.stream.StreamSupport;

public class StreamUtil
{
    public static IntStream takeWhile(IntStream stream, IntPredicate predicate)
    {
        return StreamSupport.intStream(new PredicateIntSpliterator(stream, predicate), false);
    }

    private static class PredicateIntSpliterator extends Spliterators.AbstractIntSpliterator
    {
        private final PrimitiveIterator.OfInt iterator;
        private final IntPredicate predicate;

        public PredicateIntSpliterator(IntStream stream, IntPredicate predicate)
        {
            super(Long.MAX_VALUE, IMMUTABLE);
            this.iterator = stream.iterator();
            this.predicate = predicate;
        }

        @Override
        public boolean tryAdvance(IntConsumer action)
        {
            if (iterator.hasNext()) {
                int value = iterator.nextInt();
                if (predicate.test(value)) {
                    action.accept(value);
                    return true;
                }
            }

            return false;
        }
    }
}]]></Answer>
<Answer><![CDATA[import java.util.stream.IntStream;
import rx.Observable;


// Example 1)
IntStream intStream  = IntStream.iterate(1, n -> n + 1);
Observable.from(() -> intStream.iterator())
    .takeWhile(n ->
          {
                System.out.println(n);
                return n < 10;
          }
    ).subscribe() ;


// Example 2
IntStream intStream  = IntStream.iterate(1, n -> n + 1);
Observable.from(() -> intStream.iterator())
    .takeWhile(n -> n < 10)
    .forEach( n -> System.out.println(n));]]></Answer>
<Answer><![CDATA[static <T> Stream<T> takeWhile(Stream<T> stream, Predicate<? super T> p) {
    class Taking extends Spliterators.AbstractSpliterator<T> implements Consumer<T> {
        private static final int CANCEL_CHECK_COUNT = 63;
        private final Spliterator<T> s;
        private int count;
        private T t;
        private final AtomicBoolean cancel = new AtomicBoolean();
        private boolean takeOrDrop = true;

        Taking(Spliterator<T> s) {
            super(s.estimateSize(), s.characteristics() & ~(Spliterator.SIZED | Spliterator.SUBSIZED));
            this.s = s;
        }

        @Override
        public boolean tryAdvance(Consumer<? super T> action) {
            boolean test = true;
            if (takeOrDrop &&               // If can take
                    (count != 0 || !cancel.get()) && // and if not cancelled
                    s.tryAdvance(this) &&   // and if advanced one element
                    (test = p.test(t))) {   // and test on element passes
                action.accept(t);           // then accept element
                return true;
            } else {
                // Taking is finished
                takeOrDrop = false;
                // Cancel all further traversal and splitting operations
                // only if test of element failed (short-circuited)
                if (!test)
                    cancel.set(true);
                return false;
            }
        }

        @Override
        public Comparator<? super T> getComparator() {
            return s.getComparator();
        }

        @Override
        public void accept(T t) {
            count = (count + 1) & CANCEL_CHECK_COUNT;
            this.t = t;
        }

        @Override
        public Spliterator<T> trySplit() {
            return null;
        }
    }
    return StreamSupport.stream(new Taking(stream.spliterator()), stream.isParallel()).onClose(stream::close);
}]]></Answer>
<Answer><![CDATA[class TakeWhile<T> implements Iterator<T> {

    private final Iterator<T> iterator;
    private final Predicate<T> predicate;
    private volatile T next;
    private volatile boolean keepGoing = true;

    public TakeWhile(Stream<T> s, Predicate<T> p) {
        this.iterator = s.iterator();
        this.predicate = p;
    }

    @Override
    public boolean hasNext() {
        if (!keepGoing) {
            return false;
        }
        if (next != null) {
            return true;
        }
        if (iterator.hasNext()) {
            next = iterator.next();
            keepGoing = predicate.test(next);
            if (!keepGoing) {
                next = null;
            }
        }
        return next != null;
    }

    @Override
    public T next() {
        if (next == null) {
            if (!hasNext()) {
                throw new NoSuchElementException("Sorry. Nothing for you.");
            }
        }
        T temp = next;
        next = null;
        return temp;
    }

    public static <T> Stream<T> stream(Stream<T> s, Predicate<T> p) {
        TakeWhile tw = new TakeWhile(s, p);
        Spliterator split = Spliterators.spliterator(tw, Integer.MAX_VALUE, Spliterator.ORDERED);
        return StreamSupport.stream(split, false);
    }

}]]></Answer>
<Answer><![CDATA[static <T> Spliterator<T> takeWhile(
    Spliterator<T> splitr, Predicate<? super T> predicate) {
  return new Spliterators.AbstractSpliterator<T>(splitr.estimateSize(), 0) {
    boolean stillGoing = true;
    @Override public boolean tryAdvance(Consumer<? super T> consumer) {
      if (stillGoing) {
        boolean hadNext = splitr.tryAdvance(elem -> {
          if (predicate.test(elem)) {
            consumer.accept(elem);
          } else {
            stillGoing = false;
          }
        });
        return hadNext && stillGoing;
      }
      return false;
    }
  };
}

static <T> Stream<T> takeWhile(Stream<T> stream, Predicate<? super T> predicate) {
   return StreamSupport.stream(takeWhile(stream.spliterator(), predicate), false);
}]]></Answer>
</question>
<question questionID="23996454" questionTitle="terminate or break java 8 stream loop">
<Answer><![CDATA[Iterator<BuyOrderType> iter = market.buyOrders() // replace BuyOrderType with correct type here
            .stream()
            .filter(buyOrder -> buyOrder.price >= sellOrder.price)
            .sorted(BY_ASCENDING_PRICE).iterator();
while (iter.hasNext()) {
    BuyOrderType buyOrder = iter.next()  // replace BuyOrderType with correct type here
    double tradeVolume = Math.min(buyOrder.quantity, sellOrder.quantity);
    double price = buyOrder.price;

    buyOrder.quantity -= tradeVolume;
    sellOrder.quantity -= tradeVolume;

    Trade trade = new Trade.Builder(market, price, tradeVolume, Trade.Type.SELL).build();
    CommonUtil.convertToJSON(trade);

    if (sellOrder.quantity == 0) {
        System.out.println("order fulfilled");
        break;
    }
}]]></Answer>
<Answer><![CDATA[public class BreakException extends RuntimeException {...}

try {
    market.buyOrders()
            .stream()
            .filter(buyOrder -> buyOrder.price >= sellOrder.price)
            .sorted(BY_ASCENDING_PRICE)
            .forEach((buyOrder) -> {
                double tradeVolume = Math.min(buyOrder.quantity, sellOrder.quantity);
                double price = buyOrder.price;

                buyOrder.quantity -= tradeVolume;
                sellOrder.quantity -= tradeVolume;

                Trade trade = new Trade.Builder(market, price, tradeVolume, Trade.Type.SELL).build();
                CommonUtil.convertToJSON(trade);

                if (sellOrder.quantity == 0) {
                    System.out.println("order fulfilled");
                    throw new BreakException()
                }
            });
} catch (BreakException e) {
    //Stoped
}]]></Answer>
</question>
<question questionID="39762960" questionTitle="Java stream - Get objects of consecutive same field">
<Answer><![CDATA[public class ListTest
{

    @Test
    public void test()
    {

        List<Foo> list = new ArrayList<>();
        list.add(new Foo(true));
        list.add(new Foo(true));
        list.add(new Foo(true));
        list.add(new Foo(false));
        list.add(new Foo(false));
        list.add(new Foo(true));
        list.add(new Foo(true));


        List<Foo> firstSequence = list.stream().filter(new Predicate<Foo>() {

            private boolean inFirstSequence = true;

            @Override
            public boolean test(Foo foo)
            {
                // turns into false, if first false value is found
                inFirstSequence = inFirstSequence && foo.b;

                return inFirstSequence;                
            }
        }).collect(Collectors.toList());

        Assert.assertEquals(3, firstSequence.size());
    }

    private class Foo
    {
        public Foo(boolean b)
        {
            super();
            this.b = b;
        }

        boolean b = true;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="31827970" questionTitle="Converting java.sql.Date values retrieved via JDBC into java.time.LocalDate?">
<Answer><![CDATA[public static void main(String[] args) {
    String dbFilePath = "C:/Users/Public/UCanAccessDemo.accdb";
    String connUrl = "jdbc:ucanaccess://" + dbFilePath;
    try (Connection conn = DriverManager.getConnection(connUrl)) {
        String sql = "SELECT Date1 FROM DateTest ORDER BY ID";
        try (Statement st = conn.createStatement()) {
            try (ResultSet rs = st.executeQuery(sql)) {
                while (rs.next()) {
                    LocalDate dateEchantillonnage = null;
                    try {
                        dateEchantillonnage = rs.getDate(1).toLocalDate();
                    } catch (NullPointerException npe) {
                        // do nothing
                    }
                    System.out.println(dateEchantillonnage);
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace(System.err);
    }
}]]></Answer>
</question>
<question questionID="21242110" questionTitle="Convert java.util.Date to java.time.LocalDate">
<Answer><![CDATA[/**
 * Utilities for conversion between the old and new JDK date types 
 * (between {@code java.util.Date} and {@code java.time.*}).
 * 
 * <p>
 * All methods are null-safe.
 */
public class DateConvertUtils {

    /**
     * Calls {@link #asLocalDate(Date, ZoneId)} with the system default time zone.
     */
    public static LocalDate asLocalDate(java.util.Date date) {
        return asLocalDate(date, ZoneId.systemDefault());
    }

    /**
     * Creates {@link LocalDate} from {@code java.util.Date} or it's subclasses. Null-safe.
     */
    public static LocalDate asLocalDate(java.util.Date date, ZoneId zone) {
        if (date == null)
            return null;

        if (date instanceof java.sql.Date)
            return ((java.sql.Date) date).toLocalDate();
        else
            return Instant.ofEpochMilli(date.getTime()).atZone(zone).toLocalDate();
    }

    /**
     * Calls {@link #asLocalDateTime(Date, ZoneId)} with the system default time zone.
     */
    public static LocalDateTime asLocalDateTime(java.util.Date date) {
        return asLocalDateTime(date, ZoneId.systemDefault());
    }

    /**
     * Creates {@link LocalDateTime} from {@code java.util.Date} or it's subclasses. Null-safe.
     */
    public static LocalDateTime asLocalDateTime(java.util.Date date, ZoneId zone) {
        if (date == null)
            return null;

        if (date instanceof java.sql.Timestamp)
            return ((java.sql.Timestamp) date).toLocalDateTime();
        else
            return Instant.ofEpochMilli(date.getTime()).atZone(zone).toLocalDateTime();
    }

    /**
     * Calls {@link #asUtilDate(Object, ZoneId)} with the system default time zone.
     */
    public static java.util.Date asUtilDate(Object date) {
        return asUtilDate(date, ZoneId.systemDefault());
    }

    /**
     * Creates a {@link java.util.Date} from various date objects. Is null-safe. Currently supports:<ul>
     * <li>{@link java.util.Date}
     * <li>{@link java.sql.Date}
     * <li>{@link java.sql.Timestamp}
     * <li>{@link java.time.LocalDate}
     * <li>{@link java.time.LocalDateTime}
     * <li>{@link java.time.ZonedDateTime}
     * <li>{@link java.time.Instant}
     * </ul>
     * 
     * @param zone Time zone, used only if the input object is LocalDate or LocalDateTime.
     * 
     * @return {@link java.util.Date} (exactly this class, not a subclass, such as java.sql.Date)
     */
    public static java.util.Date asUtilDate(Object date, ZoneId zone) {
        if (date == null)
            return null;

        if (date instanceof java.sql.Date || date instanceof java.sql.Timestamp)
            return new java.util.Date(((java.util.Date) date).getTime());
        if (date instanceof java.util.Date)
            return (java.util.Date) date;
        if (date instanceof LocalDate)
            return java.util.Date.from(((LocalDate) date).atStartOfDay(zone).toInstant());
        if (date instanceof LocalDateTime)
            return java.util.Date.from(((LocalDateTime) date).atZone(zone).toInstant());
        if (date instanceof ZonedDateTime)
            return java.util.Date.from(((ZonedDateTime) date).toInstant());
        if (date instanceof Instant)
            return java.util.Date.from((Instant) date);

        throw new UnsupportedOperationException("Don't know hot to convert " + date.getClass().getName() + " to java.util.Date");
    }

    /**
     * Creates an {@link Instant} from {@code java.util.Date} or it's subclasses. Null-safe.
     */
    public static Instant asInstant(Date date) {
        if (date == null)
            return null;
        else
            return Instant.ofEpochMilli(date.getTime());
    }

    /**
     * Calls {@link #asZonedDateTime(Date, ZoneId)} with the system default time zone.
     */
    public static ZonedDateTime asZonedDateTime(Date date) {
        return asZonedDateTime(date, ZoneId.systemDefault());
    }

    /**
     * Creates {@link ZonedDateTime} from {@code java.util.Date} or it's subclasses. Null-safe.
     */
    public static ZonedDateTime asZonedDateTime(Date date, ZoneId zone) {
        if (date == null)
            return null;
        else
            return asInstant(date).atZone(zone);
    }

}]]></Answer>
<Answer><![CDATA[public String toString() {
        // "EEE MMM dd HH:mm:ss zzz yyyy";
        BaseCalendar.Date date = normalize();
        StringBuilder sb = new StringBuilder(28);
        int index = date.getDayOfWeek();
        if (index == BaseCalendar.SUNDAY) {
            index = 8;
        }
        convertToAbbr(sb, wtb[index]).append(' ');                        // EEE
        convertToAbbr(sb, wtb[date.getMonth() - 1 + 2 + 7]).append(' ');  // MMM
        CalendarUtils.sprintf0d(sb, date.getDayOfMonth(), 2).append(' '); // dd

        CalendarUtils.sprintf0d(sb, date.getHours(), 2).append(':');   // HH
        CalendarUtils.sprintf0d(sb, date.getMinutes(), 2).append(':'); // mm
        CalendarUtils.sprintf0d(sb, date.getSeconds(), 2).append(' '); // ss
        TimeZone zi = date.getZone();
        if (zi != null) {
            sb.append(zi.getDisplayName(date.isDaylightTime(), TimeZone.SHORT, Locale.US)); // zzz
        } else {
            sb.append("GMT");
        }
        sb.append(' ').append(date.getYear());  // yyyy
        return sb.toString();
    }]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="8024344" questionTitle="User login with JSF 2.0">
<Answer><![CDATA[public String login() {
    try {
       String nextPage = "/index.xhtml"; // have a default value in case the user goes to login page directly.
       ExternalContext ctx = FacesContext.getCurrentInstance().getExternalContext();
       Map<String, String> map = ctx.getRequestParameterMap();
       String redirect = map.get("redirect");
       String queryString = map.get("query_string");
       HttpServletRequest request = (HttpServletRequest) ctx.getRequest();
       request.login(this.username, this.password);
       // here login is successful otherwise it would've thrown exception
       // now let's check the kind of URL our user was going to 
       if (redirect != null && !redirect.isEmpty()) {  // if redirect is null, return the default page
       // please use faces-redirect = true to ensure URL change in the browser
          if (queryString != null) {
              nextPage = redirect + "?" + queryString + "&faces-redirect=true";
          } else {  // there is no query string, nextPage = redirect
              nextPage = redirect + "&faces-redirect=true";
          }
          // Caveat: You may not need the next lines of code. 
          // I discovered that the `redirect` string has my context path  
          // value in it and so it was'nt redirecting. Remove the context path
          if (nextPage.contains(request.getContextPath())) {
            nextPage = nextPage.substring(request.getContextPath().length());
          }
      }

    } catch (ServletException ex) {
      Logger.getLogger(SecurityController.class.getName()).log(Level.SEVERE, null, ex);
      // invalid username or password
      return "/login.xhtml?failed=true";  // or login error page
    }
 return nextPage;
}]]></Answer>
</question>
<question questionID="2206911" questionTitle="Performing user authentication in Java EE / JSF using j_security_check">
<Answer><![CDATA[@ManagedBean
@ViewScoped
public class Auth {

    private String username;
    private String password;
    private String originalURL;

    @PostConstruct
    public void init() {
        ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
        originalURL = (String) externalContext.getRequestMap().get(RequestDispatcher.FORWARD_REQUEST_URI);

        if (originalURL == null) {
            originalURL = externalContext.getRequestContextPath() + "/home.xhtml";
        } else {
            String originalQuery = (String) externalContext.getRequestMap().get(RequestDispatcher.FORWARD_QUERY_STRING);

            if (originalQuery != null) {
                originalURL += "?" + originalQuery;
            }
        }
    }

    @EJB
    private UserService userService;

    public void login() throws IOException {
        FacesContext context = FacesContext.getCurrentInstance();
        ExternalContext externalContext = context.getExternalContext();
        HttpServletRequest request = (HttpServletRequest) externalContext.getRequest();

        try {
            request.login(username, password);
            User user = userService.find(username, password);
            externalContext.getSessionMap().put("user", user);
            externalContext.redirect(originalURL);
        } catch (ServletException e) {
            // Handle unknown username/password in request.login().
            context.addMessage(null, new FacesMessage("Unknown login"));
        }
    }

    public void logout() throws IOException {
        ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
        externalContext.invalidateSession();
        externalContext.redirect(externalContext.getRequestContextPath() + "/login.xhtml");
    }

    // Getters/setters for username and password.
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26810375" questionTitle="Java 8 Collector that returns a value if there's only a single value">
<Answer><![CDATA[public final class SingleTests {

    @Test
    public void collect_single() {
        ArrayList<String> list = new ArrayList<>();
        list.add("ABC");

        String collect = list.stream().collect(new SingleCollector<>());
        assertEquals("ABC", collect);
    }

    @Test(expected = SingleException.class)
    public void collect_multiple_entries() {
        ArrayList<String> list = new ArrayList<>();
        list.add("ABC");
        list.add("ABCD");

        list.stream().collect(new SingleCollector<>());
    }

    @Test(expected = SingleException.class)
    public void collect_no_entries() {
        ArrayList<String> list = new ArrayList<>();

        list.stream().collect(new SingleCollector<>());
    }

    @Test
    public void collect_single_or_null() {
        ArrayList<String> list = new ArrayList<>();
        list.add("ABC");

        String collect = list.stream().collect(new SingleOrNullCollector<>());
        assertEquals("ABC", collect);
    }

    @Test(expected = SingleException.class)
    public void collect_multiple_entries_or_null() {
        ArrayList<String> list = new ArrayList<>();
        list.add("ABC");
        list.add("ABCD");

        list.stream().collect(new SingleOrNullCollector<>());
    }

    @Test
    public void collect_no_entries_or_null() {
        ArrayList<String> list = new ArrayList<>();

        assertNull(list.stream().collect(new SingleOrNullCollector<>()));
    }

}]]></Answer>
<Answer><![CDATA[public class AllOrNothing<T> implements Collector<T, Set<T>, Optional<T>>{



@Override
public Supplier<Set<T>> supplier() {
    return () -> new HashSet<>();
}



@Override
public BinaryOperator<Set<T>> combiner() {
    return (set1, set2)-> {
        set1.addAll(set2);
        return set1;
    };
}

@Override
public Function<Set<T>, Optional<T>> finisher() {
    return (set) -> {
        if(set.size() ==1){
            return Optional.of(set.iterator().next());
        }
        return Optional.empty();
    };
}

@Override
public Set<java.util.stream.Collector.Characteristics> characteristics() {
    return Collections.emptySet();
}

@Override
public BiConsumer<Set<T>, T> accumulator() {
    return Set::add;
}

}]]></Answer>
</question>
<question questionID="22694884" questionTitle="Filter Java Stream to 1 and only 1 element">
<Answer><![CDATA[<E> Collector<E, ?, Optional<E>> getOnly() {
  return Collector.of(
    AtomicReference::new,
    (ref, e) -> {
      if (!ref.compareAndSet(null, e)) {
         throw new IllegalArgumentException("Multiple values");
      }
    },
    (ref1, ref2) -> {
      if (ref1.get() == null) {
        return ref2;
      } else if (ref2.get() != null) {
        throw new IllegalArgumentException("Multiple values");
      } else {
        return ref1;
      }
    },
    ref -> Optional.ofNullable(ref.get()),
    Collector.Characteristics.UNORDERED);
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="22725537" questionTitle="Using Java 8's Optional with Stream::flatMap">
<Answer><![CDATA[import javaslang.collection.Stream;
import javaslang.control.Option;

public class Test {

    void run() {

        // = Stream(Thing(1), Thing(2), Thing(3))
        Stream<Thing> things = Stream.of(new Thing(1), new Thing(2), new Thing(3));

        // = Some(Other(2))
        Option<Other> others = things.flatMap(this::resolve).headOption();
    }

    Option<Other> resolve(Thing thing) {
        Other other = (thing.i % 2 == 0) ? new Other(i + "") : null;
        return Option.of(other);
    }

}

class Thing {
    final int i;
    Thing(int i) { this.i = i; }
    public String toString() { return "Thing(" + i + ")"; }
}

class Other {
    final String s;
    Other(String s) { this.s = s; }
    public String toString() { return "Other(" + s + ")"; }
}]]></Answer>
<Answer><![CDATA[class CustomOptional<T> {
    private final Optional<T> optional;

    private CustomOptional() {
        this.optional = Optional.empty();
    }

    private CustomOptional(final T value) {
        this.optional = Optional.of(value);
    }

    private CustomOptional(final Optional<T> optional) {
        this.optional = optional;
    }

    public Optional<T> getOptional() {
        return optional;
    }

    public static <T> CustomOptional<T> empty() {
        return new CustomOptional<>();
    }

    public static <T> CustomOptional<T> of(final T value) {
        return new CustomOptional<>(value);
    }

    public static <T> CustomOptional<T> ofNullable(final T value) {
        return (value == null) ? empty() : of(value);
    }

    public T get() {
        return optional.get();
    }

    public boolean isPresent() {
        return optional.isPresent();
    }

    public void ifPresent(final Consumer<? super T> consumer) {
        optional.ifPresent(consumer);
    }

    public CustomOptional<T> filter(final Predicate<? super T> predicate) {
        return new CustomOptional<>(optional.filter(predicate));
    }

    public <U> CustomOptional<U> map(final Function<? super T, ? extends U> mapper) {
        return new CustomOptional<>(optional.map(mapper));
    }

    public <U> CustomOptional<U> flatMap(final Function<? super T, ? extends CustomOptional<U>> mapper) {
        return new CustomOptional<>(optional.flatMap(mapper.andThen(cu -> cu.getOptional())));
    }

    public T orElse(final T other) {
        return optional.orElse(other);
    }

    public T orElseGet(final Supplier<? extends T> other) {
        return optional.orElseGet(other);
    }

    public <X extends Throwable> T orElseThrow(final Supplier<? extends X> exceptionSuppier) throws X {
        return optional.orElseThrow(exceptionSuppier);
    }

    public Stream<T> flatStream() {
        if (!optional.isPresent()) {
            return Stream.empty();
        }
        return Stream.of(get());
    }

    public T getTOrNull() {
        if (!optional.isPresent()) {
            return null;
        }
        return get();
    }

    @Override
    public boolean equals(final Object obj) {
        return optional.equals(obj);
    }

    @Override
    public int hashCode() {
        return optional.hashCode();
    }

    @Override
    public String toString() {
        return optional.toString();
    }
}]]></Answer>
<Answer><![CDATA[public class StackOverflow {

    public static void main( String... args ) {
        try {
            final int integer = Stream.of( args )
                    .peek( s -> System.out.println( "Looking at " + s ) )
                    .map( StackOverflow::resolve )
                    .filter( Optional::isPresent )
                    .findFirst()
                    .flatMap( o -> o )
                    .orElseThrow( NoSuchElementException::new )
                    .intValue();

            System.out.println( "First integer found is " + integer );
        }
        catch ( NoSuchElementException e ) {
            System.out.println( "No integers provided!" );
        }
    }

    private static Optional<Integer> resolve( String string ) {
        try {
            return Optional.of( Integer.valueOf( string ) );
        }
        catch ( NumberFormatException e )
        {
            System.out.println( '"' + string + '"' + " is not an integer");
            return Optional.empty();
        }
    }

}]]></Answer>
</question>
<question questionID="39920542" questionTitle="Java 8 collect() only isPresent() Optional values">
<Answer><![CDATA[public class Demo{
    public static void main(String[] args) {
        List<String> list = Arrays.asList("1", "2", "Hi Stack!", "not", "5");
        List<Integer> newList = list.stream()
                .flatMap(Demo::createStream)
                .collect(Collectors.toList());
        System.out.println(newList);
    }

    public static Stream<Integer> createStream(String e) {
        Optional<Integer> opt = MyClass.returnsOptional(e);
        return opt.isPresent() ? Stream.of(opt.get()) : Stream.empty();
    }
}


class MyClass {
    public static Optional<Integer> returnsOptional(String e) {
        try {
            return Optional.of(Integer.valueOf(e));
        } catch (NumberFormatException ex) {
            return Optional.empty();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="24911388" questionTitle="Perform Operations on Code Using Java 8">
<Answer><![CDATA[public static final String getXmlAsString(final Object xmlObject) {

        return xmlObject.toString();

    }

    public static final Map<String, String> xmlObjectToString(final Map<String, Object> xmlObjectsByString) {
        return xmlObjectsByString.entrySet()
                .stream()
                .collect(Collectors.toMap(Map.Entry::getKey, entry -> getXmlAsString(entry.getValue())));
    }

    public static final void main(final String... args) {

        final Map<String, Object> xmlObjectsByString = new HashMap<>();
        xmlObjectsByString.put("Mykey", "<xml/>");

        final Map<String, String> xmlStringsByString = xmlObjectToString(xmlObjectsByString);

        // {Mykey=<xml/>}
        System.out.println(xmlStringsByString);
    }]]></Answer>
</question>
<question questionID="22742974" questionTitle="In Java 8 how do I transform a Map&lt;K,V&gt; to another Map&lt;K,V&gt; using a lambda?">
<Answer><![CDATA[import java.util.*;
import java.util.stream.Collectors;

public class Defensive {

  public static void main(String[] args) {
    Map<String, Column> original = new HashMap<>();
    original.put("foo", new Column());
    original.put("bar", new Column());

    Map<String, Column> copy = original.entrySet()
        .stream()
        .collect(Collectors.toMap(Map.Entry::getKey,
                                  e -> new Column(e.getValue())));

    System.out.println(original);
    System.out.println(copy);
  }

  static class Column {
    public Column() {}
    public Column(Column c) {}
  }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="37664670" questionTitle="javafx Table view add datepicker">
<Answer><![CDATA[Callback<TableColumn<String, String>, TableCell<String, String>> cellFactory = new Callback<TableColumn<String, String>, TableCell<String, String>>() {
        @Override
        public TableCell call(final TableColumn<String, String> param) {

            final TableCell<String, String> cell = new TableCell<String, String>() {

                final DatePicker datePicker = new DatePicker();

                @Override
                public void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                        setText(null);
                    } else {

                        setGraphic(datePicker);
                        setText(null);
                    }
                }
            };
            return cell;
        }
    };]]></Answer>
</question>
<question questionID="23075139" questionTitle="DatePicker in javafx TableCell">
<Answer><![CDATA[public class ColorTableCell<T> extends TableCell<T, Color> {    
    private final ColorPicker colorPicker;

    public ColorTableCell(TableColumn<T, Color> column) {
        this.colorPicker = new ColorPicker();
        this.colorPicker.editableProperty().bind(column.editableProperty());
        this.colorPicker.disableProperty().bind(column.editableProperty().not());
        this.colorPicker.setOnShowing(event -> {
            final TableView<T> tableView = getTableView();
            tableView.getSelectionModel().select(getTableRow().getIndex());
            tableView.edit(tableView.getSelectionModel().getSelectedIndex(), column);       
        });
        this.colorPicker.valueProperty().addListener((observable, oldValue, newValue) -> {
            if(isEditing()) {
                commitEdit(newValue);
            }
        });     
        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
    }

    @Override
    protected void updateItem(Color item, boolean empty) {
        super.updateItem(item, empty);  

        setText(null);  
        if(empty) {     
            setGraphic(null);
        } else {        
            this.colorPicker.setValue(item);
            this.setGraphic(this.colorPicker);
        } 
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="25569836" questionTitle="Equivalent of Scala dropWhile">
<Answer><![CDATA[static <T> Stream<T> dropWhile(Predicate<T> p, Stream<T> s) {
    Spliterator<T> sp = s.spliterator();
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<T>(
            sp.estimateSize(), sp.characteristics() & ~Spliterator.SIZED) {
        boolean dropped;
        public boolean tryAdvance(Consumer<? super T> action) {
            if(dropped) return sp.tryAdvance(action);
            do {} while(!dropped && sp.tryAdvance(t -> {
                if(!p.test(t)) {
                    dropped=true;
                    action.accept(t);
                }
            }));
            return dropped;
        }
        public void forEachRemaining(Consumer<? super T> action) {
            while(!dropped) if(!tryAdvance(action)) return;
            sp.forEachRemaining(action);
        }
    }, s.isParallel());
}]]></Answer>
</question>
<question questionID="39925054" questionTitle="Lambda expression to generate a sublist based on existence of an entry">
<Answer><![CDATA[public class IsAfterString implements Predicate<String> {

    private final String stringToWatchFor;
    private boolean foundString = false;

    public IsAfterString(String stringToWatchFor) {
      this.stringToWatchFor = stringToWatchFor;
    }

    @Override
    public boolean test(String s) {

      if (foundString) {
        return true;
      }

      foundString = stringToWatchFor.equals(s);
      return false;
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="26350996" questionTitle="Java 8 Comparator nullsFirst naturalOrder confused">
<Answer><![CDATA[import java.util.ArrayList;
import java.util.Iterator;

import java.util.List;
import java.util.Comparator;

public class TestClass {

    public static void main(String[] args) {

        Student s1 = new Student("1","Nikhil");
        Student s2 = new Student("1","*");
        Student s3 = new Student("1",null);
        Student s11 = new Student("2","Nikhil");
        Student s12 = new Student("2","*");
        Student s13 = new Student("2",null);
        List<Student> list = new ArrayList<Student>();
        list.add(s1);
        list.add(s2);
        list.add(s3);
        list.add(s11);
        list.add(s12);
        list.add(s13);

        list.sort(Comparator.comparing(Student::getName,Comparator.nullsLast(Comparator.naturalOrder())));

        for (Iterator iterator = list.iterator(); iterator.hasNext();) {
            Student student = (Student) iterator.next();
            System.out.println(student);
        }


    }

}]]></Answer>
</question>
<question questionID="46664452" questionTitle="Getting the below exception on using the null first method of java 8">
<Answer><![CDATA[import java.util.stream.*;
import static java.util.Comparator.*;
import java.util.*;
public class HelloWorld{

     public static void main(String []args){

        List<Person> personList = new ArrayList<>();                                
            personList.add(new Person("Alice", "alice@gmail.com"));
            personList.add(new Person("Bob", "bob@gmail.com"));           
            personList.add(new Person("Eric", "eric@gmail.com"));
            personList.add(new Person("Carol", "carol@gmail.com"));
            personList.add(new Person(null, "alice@gmail.com"));
            personList.add(new Person("Carol", "carol@gmail.com"));
            personList.add(new Person("David", "david@gmail.com"));
            personList.add(new Person("Bob", "bob@gmail.com"));
             System.out.println(personList);



            personList.stream().sorted(comparing(Person::getName, nullsFirst(naturalOrder()))).forEach(System.out::println);
     }
}
class Person
{
    private String name,email;
    Person(String name, String email)
    {
        this.name=name;
    }
    public String getName()
    {
        return name;
    }
    public String toString(){return name;}
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="28622119" questionTitle="pick 2 elements from stream at a time">
<Answer><![CDATA[Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6);

ArrayList<Integer[]> pairs =
    stream.collect(
        () -> new ArrayList<>(), 
        (acc, next) -> {
            if(acc.isEmpty()) {
                acc.add(new Integer[] {next, null});
            } else {
                acc.get(acc.size() - 1)[1] = next;
                acc.add(new Integer[] {next, null});
            }
        },
        ArrayList::addAll
    );

pairs.forEach(a -> System.out.println(a[0] + ", " + a[1]));

//-> 1, 2
//-> 2, 3
//-> 3, 4
//-> 4, 5
//-> 5, 6
//-> 6, null]]></Answer>
</question>
<question questionID="28210775" questionTitle="Split list into multiple lists with fixed number of elements in java 8">
<Answer><![CDATA[public static <T> Stream<List<T>> chunked(Stream<T> s, int chunkSize) {
    if(chunkSize<1) throw new IllegalArgumentException("chunkSize=="+chunkSize);
    if(chunkSize==1) return s.map(Collections::singletonList);
    Spliterator<T> src=s.spliterator();
    long size=src.estimateSize();
    if(size!=Long.MAX_VALUE) size=(size+chunkSize-1)/chunkSize;
    int ch=src.characteristics();
    ch&=Spliterator.SIZED|Spliterator.ORDERED|Spliterator.DISTINCT|Spliterator.IMMUTABLE;
    ch|=Spliterator.NONNULL;
    return StreamSupport.stream(new Spliterators.AbstractSpliterator<List<T>>(size, ch)
    {
        private List<T> current;
        @Override
        public boolean tryAdvance(Consumer<? super List<T>> action) {
            if(current==null) current=new ArrayList<>(chunkSize);
            while(current.size()<chunkSize && src.tryAdvance(current::add));
            if(!current.isEmpty()) {
                action.accept(current);
                current=null;
                return true;
            }
            return false;
        }
    }, s.isParallel());
}]]></Answer>
<Answer><![CDATA[final List<String> strings = Arrays.asList("Hello", "World", "I", "Am", "You");
final int size = 3;

final List<List<String>> stringLists = strings.stream()
        .collect(Collectors.collectingAndThen(Collectors.toList(), new Function<List<String>, List<List<String>>>() {
            @Override
            public List<List<String>> apply(List<String> strings) {
                final List<List<String>> result = new ArrayList<>();
                int counter = 0;
                List<String> stringsToAdd = new ArrayList<>();

                for (final String string : strings) {
                    if (counter == 0) {
                        result.add(stringsToAdd);
                    } else {
                        if (counter == size) {
                            stringsToAdd = new ArrayList<>();
                            result.add(stringsToAdd);
                            counter = 0;
                        }
                    }

                    ++counter;
                    stringsToAdd.add(string);
                }

                return result;
            }
        }));

System.out.println("stringLists = " + stringLists); // stringLists = [[Hello, World, I], [Am, You]]]]></Answer>
<Answer><![CDATA[class GroupingCollector<T> implements Collector<T, List<List<T>>, List<List<T>>> {
    private final int elementCountInGroup;

    public GroupingCollector(int elementCountInGroup) {
        this.elementCountInGroup = elementCountInGroup;
    }

    @Override
    public Supplier<List<List<T>>> supplier() {
        return ArrayList::new;
    }

    @Override
    public BiConsumer<List<List<T>>, T> accumulator() {
        return (lists, integer) -> {
            if (!lists.isEmpty()) {
                List<T> integers = lists.get(lists.size() - 1);
                if (integers.size() < elementCountInGroup) {
                    integers.add(integer);
                    return;
                }
            }

            List<T> list = new ArrayList<>();
            list.add(integer);
            lists.add(list);
        };
    }

    @Override
    public BinaryOperator<List<List<T>>> combiner() {
        return (lists, lists2) -> {
            List<List<T>> r = new ArrayList<>();
            r.addAll(lists);
            r.addAll(lists2);
            return r;
        };
    }

    @Override
    public Function<List<List<T>>, List<List<T>>> finisher() {
        return lists -> lists;
    }

    @Override
    public Set<Characteristics> characteristics() {
        return Collections.emptySet();
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="44185762" questionTitle="How to convert the date value &quot;26th May 2017&quot; to &quot;26/05/2017&quot;?">
<Answer><![CDATA[static final Map<Long, String> ORDINAL_DAYS = new HashMap<>();
static
 {
   ORDINAL_DAYS.put(1, "1st");
   .... more ....
   ORDINAL_DAYS.put(26, "26th");
   .... more ....
   ORDINAL_DAYS.put(31, "31st");
 }

static final DateTimeFormatter FORMAT_DAY_MONTH_YEAR = new DateTimeFormatterBuilder()
  .appendText(ChronoField.DAY_OF_MONTH, ORDINAL_DAYS)
  .appendLiteral(' ')
  .appendText(ChronoField.MONTH_OF_YEAR)
  .appendLiteral(' ')
  .appendText(ChronoField.YEAR)
  .toFormatter();


 String dateInString = "26th May 2017";

 LocalDate date = LocalDate.parse(dateInString, FORMAT_DAY_MONTH_YEAR);]]></Answer>
<Answer><![CDATA[import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class TestDateExample3 {

    public static void main(String[] argv) {



        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        String dateInString = "26th May 2017"; // Remove your 'th', 'nd', etc. from the input string.

        String withoutEnding = dateInString;
        //Something like this
        if(dateInString.contains("th") withoutEnding = dateInString.replace("th", "");
        if(dateInString.contains("nd") withoutEnding = dateInString.replace("nd", "");
        if(dateInString.contains("st") withoutEnding = dateInString.replace("st", "");
        if(dateInString.contains("rd") withoutEnding = dateInString.replace("rd", "");

        try {

            Date date = formatter.parse(withoutEnding);
            System.out.println(date);
            System.out.println(formatter.format(date));

        } catch (ParseException e) {
            e.printStackTrace();
        }

    }

}]]></Answer>
</question>
<question questionID="28514346" questionTitle=""/>
</cluster>
<cluster>
<question questionID="39173489" questionTitle="who can show me an example of how data are move from one page to another in java">
<Answer><![CDATA[/**
* Class that has data that you want another class to use
*/
public class SingletonExample extends Application{
    private String stringOfData;
    private SingletonExample self;
    private SingletonExample(){
        stringOfData = "Hello World!";
        //Do other constructor stuff
        self = this;
    }
    /**
    * Returns an instance of SingletonExample. Will never return null
    * @return SingletonExample
    */
    public SingletonExample instanceOf(){
        if(self == null){
            new SingletonExample();
        }
        return self;
    }
    /**
    * This allows you to change the value of stringOfData from another class
    */
    public void changeData(String newData){
        this.stringOfData = newData;
    }
    /**
    * Simple getter method for stringOfData
    * @return String, stringOfData
    */
    public String getData(){
        return this.stringOfData;
    }
    public void start(Stage primaryStage){
        new SingletonExample();
        //Do stuff for the program here
    }
}

/**
* Class that you want to use SingletonExample's data in
*/
public class UseData extends Application{
    private UseData(){
        //Do other constructor stuff
    }
    public void start(Stage primaryStage){
        String neededData = SingletonExample.instanceOf().getData();
        Label data = new Label(neededData);
        //Do other stuff for the program here
    }
    public static void main(String[] args){
        launch(args);
    }
}]]></Answer>
<Answer><![CDATA[/*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
    package Session;

    import entities.ErpUser;
    import entities.Run;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.io.Serializable;

    /**
     *
     * @author samo
     */
    public class SessionHandler implements Serializable {

        private static final String _location = "session.ser";

        private Boolean saved = false;

        private Session session;

        public SessionHandler() {

        }

        private void serialize() {
            saved = true;
            try {
                FileOutputStream fout = new FileOutputStream(_location);
                ObjectOutputStream oos = new ObjectOutputStream(fout);
                oos.writeObject(session);

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        private Session deSerialize() {
            Session ses = new Session();
            try {
                FileInputStream fin = new FileInputStream(_location);
                ObjectInputStream ois = new ObjectInputStream(fin);
                ses = (Session) ois.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }

            return ses;
        }

        public void setCurrentPlant(String plant) {
            getSession().setPlant(plant);
            this.serialize();
        }

        public String getCurrentPlant() {
            if (!saved) {
                session = this.deSerialize();
            }

            return getSession().getPlant();

        }

        /**
         *
         * @return
         */
        public String getCurrentType() {
            if (!saved) {
                session = this.deSerialize();
            }
            return getSession().getType();
        }

        /**
         *
         * @param type
         */
        public void setCurrentType(String type) {
            getSession().setType(type);
            this.serialize();
        }

        /**
         *
         * @param run
         */
        public void setCurrentRun(Run run) {
            getSession().setRun(run);
            this.serialize();
        }

        /**
         *
         * @return
         */
        public Run getCurrentRun() {
            if (!saved) {
                session = this.deSerialize();
            }
            return getSession().getRun();
        }

        /**
         * @return the currentUser
         */
        public ErpUser getCurrentUser() {
            if (!saved) {
                session = this.deSerialize();
            }
            return getSession().getUser();
        }

        /**
         * @param currentUser the currentUser to set
         */
        public void setCurrentUser(ErpUser currentUser) {
            getSession().setUser(currentUser);
            this.serialize();
        }

        /**
         * @return the session
         */
        public Session getSession() {
            if (session == null) {
                session = new Session();
            }
            return session;
        }

        /**
         * @param session the session to set
         */
        public void setSession(Session session) {
            this.session = session;
        }

    }]]></Answer>
</question>
<question questionID="32342864" questionTitle="Applying MVC With JavaFx">
<Answer><![CDATA[public class EditorController {

    @FXML
    private TextField firstNameField ;
    @FXML
    private TextField lastNameField ;
    @FXML
    private TextField emailField ;

    private DataModel model ;

    public void initModel(DataModel model) {
        if (this.model != null) {
            throw new IllegalStateException("Model can only be initialized once");
        }
        this.model = model ;
        model.currentPersonProperty().addListener((obs, oldPerson, newPerson) -> {
            if (oldPerson != null) {
                firstNameField.textProperty().unbindBidirectional(oldPerson.firstNameProperty());
                lastNameField.textProperty().unbindBidirectional(oldPerson.lastNameProperty());
                emailField.textProperty().unbindBidirectional(oldPerson.emailProperty());
            }
            if (newPerson == null) {
                firstNameField.setText("");
                lastNameField.setText("");
                emailField.setText("");
            } else {
                firstNameField.textProperty().bindBidirectional(newPerson.firstNameProperty());
                lastNameField.textProperty().bindBidirectional(newPerson.lastNameProperty());
                emailField.textProperty().bindBidirectional(newPerson.emailProperty());
            }
        });
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34405452" questionTitle="Split hashmap to partitions in java 8">
<Answer><![CDATA[private static <K, V> Collector<Map.Entry<K, V>, ?, List<Map<K, V>>> mapSize(int limit) {
    return Collector.of(ArrayList::new,
            (l, e) -> {
                if (l.isEmpty() || l.get(l.size() - 1).size() == limit) {
                    l.add(new HashMap<>());
                }
                l.get(l.size() - 1).put(e.getKey(), e.getValue());
            },
            (l1, l2) -> {
                if (l1.isEmpty()) {
                    return l2;
                }
                if (l2.isEmpty()) {
                    return l1;
                }
                if (l1.get(l1.size() - 1).size() < limit) {
                    Map<K, V> map = l1.get(l1.size() - 1);
                    ListIterator<Map<K, V>> mapsIte = l2.listIterator(l2.size());
                    while (mapsIte.hasPrevious() && map.size() < limit) {
                        Iterator<Map.Entry<K, V>> ite = mapsIte.previous().entrySet().iterator();
                        while (ite.hasNext() && map.size() < limit) {
                            Map.Entry<K, V> entry = ite.next();
                            map.put(entry.getKey(), entry.getValue());
                            ite.remove();
                        }
                        if (!ite.hasNext()) {
                            mapsIte.remove();
                        }
                    }
                }
                l1.addAll(l2);
                return l1;
            }
    );
}]]></Answer>
</question>
<question questionID="32434592" questionTitle="Partition a Java 8 Stream">
<Answer><![CDATA[public static <T, A, R> Collector<T, ?, R> unorderedBatches(int batchSize, 
                   Collector<List<T>, A, R> downstream) {
    class Acc {
        List<T> cur = new ArrayList<>();
        A acc = downstream.supplier().get();
    }
    BiConsumer<Acc, T> accumulator = (acc, t) -> {
        acc.cur.add(t);
        if(acc.cur.size() == batchSize) {
            downstream.accumulator().accept(acc.acc, acc.cur);
            acc.cur = new ArrayList<>();
        }
    };
    return Collector.of(Acc::new, accumulator,
            (acc1, acc2) -> {
                acc1.acc = downstream.combiner().apply(acc1.acc, acc2.acc);
                for(T t : acc2.cur) accumulator.accept(acc1, t);
                return acc1;
            }, acc -> {
                if(!acc.cur.isEmpty())
                    downstream.accumulator().accept(acc.acc, acc.cur);
                return downstream.finisher().apply(acc.acc);
            }, Collector.Characteristics.UNORDERED);
}]]></Answer>
<Answer><![CDATA[public static <T> void applyConcurrentBatchToStream(Consumer<List<T>> batchFunc, Stream<T> stream, int batchSize){
    ConcurrentBatch batch = new ConcurrentBatch(batchSize);
    //hack java map: extends and override computeIfAbsent
    Supplier<ConcurrentMap<Long, List<T>>> mapFactory = () -> new ConcurrentHashMap<Long, List<T>>() {
        @Override
        public List<T> computeIfAbsent(Long key, Function<? super Long, ? extends List<T>> mappingFunction) {
            List<T> rs = super.computeIfAbsent(key, mappingFunction);
            //apply batchFunc to old lists, when new batch list is created
            if(rs.isEmpty()){
                for(Entry<Long, List<T>> e : entrySet()) {
                    List<T> batchList = e.getValue();
                    //todo: need to improve
                    synchronized (batchList) {
                        if (batchList.size() == batch.getBatchSize()){
                            batchFunc.accept(batchList);
                            remove(e.getKey());
                            batchList.clear();
                        }
                    }
                }
            }
            return rs;
        }
    };
    stream.map(s -> new AbstractMap.SimpleEntry<>(batch.next(), s))
            .collect(groupingByConcurrent(AbstractMap.SimpleEntry::getKey, mapFactory, mapping(AbstractMap.SimpleEntry::getValue, toList())))
            .entrySet()
            .stream()
            //map contains only unprocessed lists (size<batchSize)
            .forEach(e -> batchFunc.accept(e.getValue()));
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="34271256" questionTitle="Is there any hack to know the actual concrete class of the generic of an instance at runtime?">
<Answer><![CDATA[public class Q34271256 {

  public static interface MyInterface<T> {
    T getValue();
  }

  public static class MyDoubleClass implements MyInterface<Double> {
    private final Double value;
    public MyDoubleClass(Double value) {
      this.value = value;
    }
    @Override
    public Double getValue() {
      return value;
    }
  }

  public static class MyIntegerClass implements MyInterface<Integer> {
    private final Integer value;
    public MyIntegerClass(Integer value) {
      this.value = value;
    }
    @Override
    public Integer getValue() {
      return value;
    }
  }

  @SuppressWarnings("unchecked")
  public static <T extends Number> Class<T> inferInstanceType(MyInterface<T> myInterface){
    Number value = myInterface.getValue();
    if (value == null) return null;
    return (Class<T>)value.getClass();
  }

  public static void main(String...args) {
    List<MyInterface<? extends Number>> list = Arrays.asList(
        new MyDoubleClass(1.1),
        new MyIntegerClass(5)
    );
    for (MyInterface<? extends Number> myInterface : list) {
      Class<?> type = inferInstanceType(myInterface);
      System.out.printf("%s inferred type is %s\n",
          myInterface.getClass().getName(),
          type.getName());
    }
  }
}]]></Answer>
<Answer><![CDATA[interface MyInterface<T extends Number> {
    T getVal();
}
class DoubleImpl implements MyInterface<Double> {
    public Double getVal() {return 42.42; }
}
...
public static void main (String[] args) throws java.lang.Exception {
    MyInterface<? extends Number> x = new DoubleImpl();
    Type[] ifs = x.getClass().getGenericInterfaces();

    System.out.println(ifs.length);
    for (Type c : ifs) {
        System.out.println(c);
        Type[] tps = ((ParameterizedType)c).getActualTypeArguments();
        for (Object tp : tps) {
            System.out.println("===="+tp); // <<== This produces class java.lang.Double
        }
    }
}]]></Answer>
</question>
<question questionID="3403909" questionTitle=""/>
</cluster>
<cluster>
<question questionID="43504078" questionTitle="Java8 Stream of files, how to control the closing of files?">
<Answer><![CDATA[filenames.map(File::new)
    .filter(File::exists)
    .map(f->{
        BufferedReader br = null;
        FileReader fr = null;
        try {
            fr = new FileReader(f)
            br = new BufferedReader(fr);
            return Optional.of(Pair.of(br,fr)) ;
        } catch(Exception e) {}
            return Optional.ofNullable(br);
        })
    .filter(Optional::isPresent)
    .map(Optional::get)
    .flatMap( pair -> { 
        try {
            // do something with br               
        } finally {
             try {
                 pair.getRight().close();
             } catch (IOException x ){
                 throw new RuntimeException(x) ;
             }
        }
    })]]></Answer>
</question>
<question questionID="43609062" questionTitle="Using AutoClosable interfaces inside Stream API">
<Answer><![CDATA[import java.util.stream.Stream;

class Test {
    public static void main(String[] args) {
        Stream.of(1, 2, 3).flatMap(i ->
                Stream.of(i, i * 2).onClose(() ->
                        System.out.println("Closed!")
                )
        ).forEach(System.out::println);
    }
}

1
2
Closed!
2
4
Closed!
3
6
Closed!]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="5003142" questionTitle=""/>
<question questionID="35986206" questionTitle="Is this MVC structure right to comply the pattern?">
<Answer><![CDATA[class ServletCar extends HttpServlet {
   private CarService carService;
   public void doPost( ... )
  {
   ...
   switch (action) {
       ...
       case 'insert':
           carService.insert(carParam)
           break;
       ...
   }
   ... 
  }
}

public interface CarService {
    save(Car car);
    update(Car car);
    delete(Car car);
}

public class CarServiceImpl implements CarService {

    save (Car car) {
     ...
    }

}]]></Answer>
</question>
<question questionID="46382540" questionTitle="How retrieve list of object from database in my JSP Page Without submitting the form?">
<Answer><![CDATA[<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>

<%
String id = request.getParameter("userId");
String driverName = "com.mysql.jdbc.Driver";
String connectionUrl = "jdbc:mysql://localhost:3306/";
String dbName = "dbname";
String userId = "root";
String password = "password";

try {
Class.forName(driverName);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}

Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;
%>
<h2 align="center"><font><strong>Retrieve data from database in jsp</strong></font></h2>
<table align="center" cellpadding="5" cellspacing="5" border="1">
<%
try{ 
connection = DriverManager.getConnection(connectionUrl+dbName, userId, password);
statement=connection.createStatement();
String sql ="select `id`,`first_name`,`mobile_no` from `user_info` where `first_name` like '%Chettupalli%'";

List<Employee> empList = new ArrayList<Employee>();
Employee emp;
resultSet = statement.executeQuery(sql);
while(resultSet.next()){
    emp = new Employee();
    emp.setId(resultSet.getString("id"));
    emp.setName(resultSet.getString("first_name"));
    emp.setMobileNo(resultSet.getString("mobile_no"));
    empList.add(emp);
}

} catch (Exception e) {
e.printStackTrace();
}
%>
<form>
<!-- You can prepare your form based on your requirement-->
</form>
</table>]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="27862762" questionTitle="Java: How can I compile an entire directory structure of code in command prompt?">
<Answer><![CDATA[Usage: javac <options> <source files>
where possible options include:
-g                         Generate all debugging info
-g:none                    Generate no debugging info
-g:{lines,vars,source}     Generate only some debugging info
-nowarn                    Generate no warnings
-verbose                   Output messages about what the compiler is doing
-deprecation               Output source locations where deprecated APIs are used
-classpath <path>          Specify where to find user class files and annotation processors
-cp <path>                 Specify where to find user class files and annotation processors
-sourcepath <path>         Specify where to find input source files
-bootclasspath <path>      Override location of bootstrap class files
-extdirs <dirs>            Override location of installed extensions
-endorseddirs <dirs>       Override location of endorsed standards path
-proc:{none,only}          Control whether annotation processing and/or compilation is done.
-processor <class1>[,<class2>,<class3>...]Names of the annotation processors to run; bypasses     default discovery process
-processorpath <path>      Specify where to find annotation processors
-d <directory>             Specify where to place generated class files
-s <directory>             Specify where to place generated source files
-implicit:{none,class}     Specify whether or not to generate class files for implicitly   referenced files
-encoding <encoding>       Specify character encoding used by source files
-source <release>          Provide source compatibility with specified release
-target <release>          Generate class files for specific VM version
-version                   Version information
-help                      Print a synopsis of standard options
-Akey[=value]              Options to pass to annotation processors
-X                         Print a synopsis of nonstandard options
-J<flag>                   Pass <flag> directly to the runtime system]]></Answer>
<Answer><![CDATA[<project name="MyProject" default="dist" basedir=".">
    <description>
        simple example build file
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}"/>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}"/>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>]]></Answer>
</question>
<question questionID="6623161" questionTitle=""/>
</cluster>
<cluster>
<question questionID="9428573" questionTitle=""/>
<question questionID="20666658" questionTitle="How can I use one database connection object in whole application?">
<Answer><![CDATA[public class Connect_db {        
    static Connection con=null;
    public static Connection getConnection()
    {
        if (con != null) return con;
        // get db, user, pass from settings file
        return getConnection(db, user, pass);
    }

    private static Connection getConnection(String db_name,String user_name,String password)
    {
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://localhost/"+db_name+"?user="+user_name+"&password="+password);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return con;        
    }
}]]></Answer>
<Answer><![CDATA[import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class SignalDB {

    private static MysqlDataSource ds = null;

    public static MysqlDataSource getDataSource(String db_name) {
        if (ds == null) {
            // db variables set here
            getDataSource(db_url, db_user, db_password, db_port);
        }
        ds.setDatabaseName(db_name);
        return ds;
    }

    private static void getDataSource(String db_url, String db_user, String db_password, int db_port) {
        try {
            ds = new MysqlDataSource();
            ds.setServerName(db_url);
            ds.setUser(db_user);
            ds.setPassword(db_password);
            ds.setPort(db_port);
        } catch (Exception e) {
            System.out.println("MysqlDataSource err: " + e.getMessage());
            e.printStackTrace();
        }
    }
}]]></Answer>
</question>
</cluster>
<cluster>
<question questionID="9664036" questionTitle=""/>
<question questionID="46055059" questionTitle="How to run 3 methods simultaneously or in parallel using java 8 Streams">
<Answer><![CDATA[public class ThreadTest1 {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        Thread thread1 = new Thread() {
            public void run() {
                method1();
            }
        };
        thread1.start();

        Thread thread2 = new Thread() {
            public void run() {
                method2();
            }
        };
        thread2.start();

        Thread thread3 = new Thread() {
            public void run() {
                method3();
            }
        };
        thread3.start();

    }

    static void method1() {

        try {
            while(true){
            System.out.println("test1");
            Thread.currentThread().sleep(1000);
            }
        } catch (InterruptedException e) {
        }
    }

    static void method2() {
        try {
            while(true){
            System.out.println("test2");
            Thread.currentThread().sleep(1000);
            }
        } catch (InterruptedException e) {
        }
    }

    static void method3() {
        try {
            while(true){
            System.out.println("test3");
            Thread.currentThread().sleep(1000);
            }
        } catch (InterruptedException e) {
        }
    }

}]]></Answer>
<Answer><![CDATA[public void RunParallel()
{
    CompletableFuture<Void> future1 = CompletableFuture.runAsync(()->{
        String method1 = method1();
    });

    CompletableFuture<Void> future2 = CompletableFuture.runAsync(()->{
        String method2 = method2();
    });

    CompletableFuture<Void> future3 = CompletableFuture.runAsync(()->{
        String method3 = method3("some inp");
    });

    CompletableFuture<Void> future = CompletableFuture.allOf(future1, future2, future3); 
    try {
        future.get(); // this line waits for all to be completed
    } catch (InterruptedException  | ExecutionException e) {
        // Handle
    }
}]]></Answer>
</question>
</cluster>
</Clusters>
